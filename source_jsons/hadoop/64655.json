{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "s3GetFileStatus",
  "functionId": "s3GetFileStatus___path-Path(modifiers-final)__key-String(modifiers-final)__probes-Set__StatusProbeEnum__(modifiers-final)__tombstones-Set__Path__(annotations-@Nullable)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 2949,
  "functionEndLine": 3050,
  "numCommitsSeen": 257,
  "timeTaken": 8757,
  "changeHistory": [
    "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
    "56dee667707926f3796c7757be1a133a362f05c9",
    "74e5018d871bdf712b3ad0706150a37cb8efee5c",
    "9221704f857e33a5f9e00c19d3705e46e94f427b",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
    "5bbca80428ffbe776650652de86a3bba885edb31",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0": "Ybodychange",
    "56dee667707926f3796c7757be1a133a362f05c9": "Yparametermetachange",
    "74e5018d871bdf712b3ad0706150a37cb8efee5c": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
    "9221704f857e33a5f9e00c19d3705e46e94f427b": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc": "Ybodychange",
    "5bbca80428ffbe776650652de86a3bba885edb31": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16711.\n\nThis adds a new option fs.s3a.bucket.probe, range (0-2) to\ncontrol which probe for a bucket existence to perform on startup.\n\n0: no checks\n1: v1 check (as has been performend until now)\n2: v2 bucket check, which also incudes a permission check. Default.\n\nWhen set to 0, bucket existence checks won\u0027t be done\nduring initialization thus making it faster.\nWhen the bucket is not available in S3,\nor if fs.s3a.endpoint points to the wrong instance of a private S3 store\nconsecutive calls like listing, read, write etc. will fail with\nan UnknownStoreException.\n\nContributed by:\n  * Mukund Thakur (main patch and tests)\n  * Rajesh Balamohan (v0 list and performance tests)\n  * lqjacklee (HADOOP-15990/v2 list)\n  * Steve Loughran (UnknownStoreException support)\n\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ARetryPolicy.java\n       modified:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java\n       new file:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/UnknownStoreException.java\n       new file:   hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ErrorTranslation.java\n       modified:   hadoop-tools/hadoop-aws/src/site/markdown/tools/hadoop-aws/index.md\n       modified:   hadoop-tools/hadoop-aws/src/site/markdown/tools/hadoop-aws/performance.md\n       modified:   hadoop-tools/hadoop-aws/src/site/markdown/tools/hadoop-aws/troubleshooting_s3a.md\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/AbstractS3AMockTest.java\n       new file:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3ABucketExistence.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/MockS3ClientFactory.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/TestS3AExceptionTranslation.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/AbstractS3GuardToolTestBase.java\n       modified:   hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java\n       modified:   hadoop-tools/hadoop-aws/src/test/resources/core-site.xml\n\nChange-Id: Ic174f803e655af172d81c1274ed92b51bdceb384\n",
      "commitDate": "21/02/20 5:44 AM",
      "commitName": "e77767bb1e8dfb8b0bd7af4664c900f7238b4fa0",
      "commitAuthor": "Mukund Thakur",
      "commitDateOld": "13/02/20 11:09 AM",
      "commitNameOld": "56dee667707926f3796c7757be1a133a362f05c9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 7.77,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,102 @@\n   S3AFileStatus s3GetFileStatus(final Path path,\n       final String key,\n       final Set\u003cStatusProbeEnum\u003e probes,\n       @Nullable Set\u003cPath\u003e tombstones) throws IOException {\n     if (!key.isEmpty()) {\n       if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n         try {\n           // look for the simple file\n           ObjectMetadata meta \u003d getObjectMetadata(key);\n           LOG.debug(\"Found exact file: normal file {}\", key);\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n         } catch (AmazonServiceException e) {\n           // if the response is a 404 error, it just means that there is\n           // no file at that path...the remaining checks will be needed.\n-          if (e.getStatusCode() !\u003d SC_404) {\n+          if (e.getStatusCode() !\u003d SC_404 || isUnknownBucket(e)) {\n             throw translateException(\"getFileStatus\", path, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       }\n \n       // Either a normal file was not found or the probe was skipped.\n       // because the key ended in \"/\" or it was not in the set of probes.\n       // Look for the dir marker\n       if (probes.contains(StatusProbeEnum.DirMarker)) {\n         String newKey \u003d maybeAddTrailingSlash(key);\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n-          if (e.getStatusCode() !\u003d SC_404) {\n+          if (e.getStatusCode() !\u003d SC_404 || isUnknownBucket(e)) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     // execute the list\n     if (probes.contains(StatusProbeEnum.List)) {\n       try {\n         String dirKey \u003d maybeAddTrailingSlash(key);\n         S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n \n         S3ListResult objects \u003d listObjects(request);\n \n         Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n         Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n         if (!isEmptyOfKeys(prefixes, tombstones) ||\n             !isEmptyOfObjects(summaries, tombstones)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found path as directory (with /): {}/{}\",\n                 prefixes.size(), summaries.size());\n \n             for (S3ObjectSummary summary : summaries) {\n               LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n             }\n             for (String prefix : prefixes) {\n               LOG.debug(\"Prefix: {}\", prefix);\n             }\n           }\n \n           return new S3AFileStatus(Tristate.FALSE, path, username);\n         } else if (key.isEmpty()) {\n           LOG.debug(\"Found root directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n       } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d SC_404) {\n+        if (e.getStatusCode() !\u003d SC_404 || isUnknownBucket(e)) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  S3AFileStatus s3GetFileStatus(final Path path,\n      final String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      @Nullable Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n        try {\n          // look for the simple file\n          ObjectMetadata meta \u003d getObjectMetadata(key);\n          LOG.debug(\"Found exact file: normal file {}\", key);\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        } catch (AmazonServiceException e) {\n          // if the response is a 404 error, it just means that there is\n          // no file at that path...the remaining checks will be needed.\n          if (e.getStatusCode() !\u003d SC_404 || isUnknownBucket(e)) {\n            throw translateException(\"getFileStatus\", path, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      }\n\n      // Either a normal file was not found or the probe was skipped.\n      // because the key ended in \"/\" or it was not in the set of probes.\n      // Look for the dir marker\n      if (probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d maybeAddTrailingSlash(key);\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404 || isUnknownBucket(e)) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        String dirKey \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404 || isUnknownBucket(e)) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "56dee667707926f3796c7757be1a133a362f05c9": {
      "type": "Yparametermetachange",
      "commitMessage": "HADOOP-16823. Large DeleteObject requests are their own Thundering Herd.\n\nContributed by Steve Loughran.\n\nDuring S3A rename() and delete() calls, the list of objects delete is\nbuilt up into batches of a thousand and then POSTed in a single large\nDeleteObjects request.\n\nBut as the IO capacity allowed on an S3 partition may only be 3500 writes\nper second *and* each entry in that POST counts as a single write, then\none of those posts alone can trigger throttling on an already loaded\nS3 directory tree. Which can trigger backoff and retry, with the same\nthousand entry post, and so recreate the exact same problem.\n\nFixes\n\n* Page size for delete object requests is set in\n  fs.s3a.bulk.delete.page.size; the default is 250.\n* The property fs.s3a.experimental.aws.s3.throttling (default\u003dtrue)\n  can be set to false to disable throttle retry logic in the AWS\n  client SDK -it is all handled in the S3A client. This\n  gives more visibility in to when operations are being throttled\n* Bulk delete throttling events are logged to the log\n  org.apache.hadoop.fs.s3a.throttled log at INFO; if this appears\n  often then choose a smaller page size.\n* The metric \"store_io_throttled\" adds the entire count of delete\n  requests when a single DeleteObjects request is throttled.\n* A new quantile, \"store_io_throttle_rate\" can track throttling\n  load over time.\n* DynamoDB metastore throttle resilience issues have also been\n  identified and fixed. Note: the fs.s3a.experimental.aws.s3.throttling\n  flag does not apply to DDB IO precisely because there may still be\n  lurking issues there and it safest to rely on the DynamoDB client\n  SDK.\n\nChange-Id: I00f85cdd94fc008864d060533f6bd4870263fd84\n",
      "commitDate": "13/02/20 11:09 AM",
      "commitName": "56dee667707926f3796c7757be1a133a362f05c9",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "30/01/20 2:16 AM",
      "commitNameOld": "5977360878e6780bd04842c8a2156f9848e1d088",
      "commitAuthorOld": "Mustafa İman",
      "daysBetweenCommits": 14.37,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,102 @@\n   S3AFileStatus s3GetFileStatus(final Path path,\n       final String key,\n       final Set\u003cStatusProbeEnum\u003e probes,\n-      final Set\u003cPath\u003e tombstones) throws IOException {\n+      @Nullable Set\u003cPath\u003e tombstones) throws IOException {\n     if (!key.isEmpty()) {\n       if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n         try {\n           // look for the simple file\n           ObjectMetadata meta \u003d getObjectMetadata(key);\n           LOG.debug(\"Found exact file: normal file {}\", key);\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n         } catch (AmazonServiceException e) {\n           // if the response is a 404 error, it just means that there is\n           // no file at that path...the remaining checks will be needed.\n           if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", path, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       }\n \n       // Either a normal file was not found or the probe was skipped.\n       // because the key ended in \"/\" or it was not in the set of probes.\n       // Look for the dir marker\n       if (probes.contains(StatusProbeEnum.DirMarker)) {\n         String newKey \u003d maybeAddTrailingSlash(key);\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     // execute the list\n     if (probes.contains(StatusProbeEnum.List)) {\n       try {\n         String dirKey \u003d maybeAddTrailingSlash(key);\n         S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n \n         S3ListResult objects \u003d listObjects(request);\n \n         Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n         Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n         if (!isEmptyOfKeys(prefixes, tombstones) ||\n             !isEmptyOfObjects(summaries, tombstones)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found path as directory (with /): {}/{}\",\n                 prefixes.size(), summaries.size());\n \n             for (S3ObjectSummary summary : summaries) {\n               LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n             }\n             for (String prefix : prefixes) {\n               LOG.debug(\"Prefix: {}\", prefix);\n             }\n           }\n \n           return new S3AFileStatus(Tristate.FALSE, path, username);\n         } else if (key.isEmpty()) {\n           LOG.debug(\"Found root directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  S3AFileStatus s3GetFileStatus(final Path path,\n      final String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      @Nullable Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n        try {\n          // look for the simple file\n          ObjectMetadata meta \u003d getObjectMetadata(key);\n          LOG.debug(\"Found exact file: normal file {}\", key);\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        } catch (AmazonServiceException e) {\n          // if the response is a 404 error, it just means that there is\n          // no file at that path...the remaining checks will be needed.\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", path, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      }\n\n      // Either a normal file was not found or the probe was skipped.\n      // because the key ended in \"/\" or it was not in the set of probes.\n      // Look for the dir marker\n      if (probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d maybeAddTrailingSlash(key);\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        String dirKey \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {
        "oldValue": "[path-Path(modifiers-final), key-String(modifiers-final), probes-Set\u003cStatusProbeEnum\u003e(modifiers-final), tombstones-Set\u003cPath\u003e(modifiers-final)]",
        "newValue": "[path-Path(modifiers-final), key-String(modifiers-final), probes-Set\u003cStatusProbeEnum\u003e(modifiers-final), tombstones-Set\u003cPath\u003e(annotations-@Nullable)]"
      }
    },
    "74e5018d871bdf712b3ad0706150a37cb8efee5c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-16635. S3A \"directories only\" scan still does a HEAD.\n\nContributed by Steve Loughran.\n\nChange-Id: I5e41d7f721364c392e1f4344db83dfa8c5aa06ce\n",
      "commitDate": "14/10/19 9:05 AM",
      "commitName": "74e5018d871bdf712b3ad0706150a37cb8efee5c",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16635. S3A \"directories only\" scan still does a HEAD.\n\nContributed by Steve Loughran.\n\nChange-Id: I5e41d7f721364c392e1f4344db83dfa8c5aa06ce\n",
          "commitDate": "14/10/19 9:05 AM",
          "commitName": "74e5018d871bdf712b3ad0706150a37cb8efee5c",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "04/10/19 10:54 AM",
          "commitNameOld": "6574f27fa348542411bff888b184cd7ce34e5d9e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 9.92,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,101 +1,102 @@\n-  private S3AFileStatus s3GetFileStatus(final Path path,\n-      String key,\n+  S3AFileStatus s3GetFileStatus(final Path path,\n+      final String key,\n       final Set\u003cStatusProbeEnum\u003e probes,\n       final Set\u003cPath\u003e tombstones) throws IOException {\n-    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n-      try {\n-        ObjectMetadata meta \u003d getObjectMetadata(key);\n-\n-        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-          LOG.debug(\"Found exact file: fake directory\");\n-          return new S3AFileStatus(Tristate.TRUE, path, username);\n-        } else {\n-          LOG.debug(\"Found exact file: normal file\");\n+    if (!key.isEmpty()) {\n+      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n+        try {\n+          // look for the simple file\n+          ObjectMetadata meta \u003d getObjectMetadata(key);\n+          LOG.debug(\"Found exact file: normal file {}\", key);\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n-        }\n-      } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d SC_404) {\n+        } catch (AmazonServiceException e) {\n+          // if the response is a 404 error, it just means that there is\n+          // no file at that path...the remaining checks will be needed.\n+          if (e.getStatusCode() !\u003d SC_404) {\n+            throw translateException(\"getFileStatus\", path, e);\n+          }\n+        } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n-      } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", path, e);\n       }\n \n+      // Either a normal file was not found or the probe was skipped.\n+      // because the key ended in \"/\" or it was not in the set of probes.\n       // Look for the dir marker\n-      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n-        String newKey \u003d key + \"/\";\n+      if (probes.contains(StatusProbeEnum.DirMarker)) {\n+        String newKey \u003d maybeAddTrailingSlash(key);\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     // execute the list\n     if (probes.contains(StatusProbeEnum.List)) {\n       try {\n-        key \u003d maybeAddTrailingSlash(key);\n-        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n+        String dirKey \u003d maybeAddTrailingSlash(key);\n+        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n \n         S3ListResult objects \u003d listObjects(request);\n \n         Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n         Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n         if (!isEmptyOfKeys(prefixes, tombstones) ||\n             !isEmptyOfObjects(summaries, tombstones)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found path as directory (with /): {}/{}\",\n                 prefixes.size(), summaries.size());\n \n             for (S3ObjectSummary summary : summaries) {\n               LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n             }\n             for (String prefix : prefixes) {\n               LOG.debug(\"Prefix: {}\", prefix);\n             }\n           }\n \n           return new S3AFileStatus(Tristate.FALSE, path, username);\n         } else if (key.isEmpty()) {\n           LOG.debug(\"Found root directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  S3AFileStatus s3GetFileStatus(final Path path,\n      final String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      final Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n        try {\n          // look for the simple file\n          ObjectMetadata meta \u003d getObjectMetadata(key);\n          LOG.debug(\"Found exact file: normal file {}\", key);\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        } catch (AmazonServiceException e) {\n          // if the response is a 404 error, it just means that there is\n          // no file at that path...the remaining checks will be needed.\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", path, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      }\n\n      // Either a normal file was not found or the probe was skipped.\n      // because the key ended in \"/\" or it was not in the set of probes.\n      // Look for the dir marker\n      if (probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d maybeAddTrailingSlash(key);\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        String dirKey \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16635. S3A \"directories only\" scan still does a HEAD.\n\nContributed by Steve Loughran.\n\nChange-Id: I5e41d7f721364c392e1f4344db83dfa8c5aa06ce\n",
          "commitDate": "14/10/19 9:05 AM",
          "commitName": "74e5018d871bdf712b3ad0706150a37cb8efee5c",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "04/10/19 10:54 AM",
          "commitNameOld": "6574f27fa348542411bff888b184cd7ce34e5d9e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 9.92,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,101 +1,102 @@\n-  private S3AFileStatus s3GetFileStatus(final Path path,\n-      String key,\n+  S3AFileStatus s3GetFileStatus(final Path path,\n+      final String key,\n       final Set\u003cStatusProbeEnum\u003e probes,\n       final Set\u003cPath\u003e tombstones) throws IOException {\n-    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n-      try {\n-        ObjectMetadata meta \u003d getObjectMetadata(key);\n-\n-        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-          LOG.debug(\"Found exact file: fake directory\");\n-          return new S3AFileStatus(Tristate.TRUE, path, username);\n-        } else {\n-          LOG.debug(\"Found exact file: normal file\");\n+    if (!key.isEmpty()) {\n+      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n+        try {\n+          // look for the simple file\n+          ObjectMetadata meta \u003d getObjectMetadata(key);\n+          LOG.debug(\"Found exact file: normal file {}\", key);\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n-        }\n-      } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d SC_404) {\n+        } catch (AmazonServiceException e) {\n+          // if the response is a 404 error, it just means that there is\n+          // no file at that path...the remaining checks will be needed.\n+          if (e.getStatusCode() !\u003d SC_404) {\n+            throw translateException(\"getFileStatus\", path, e);\n+          }\n+        } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n-      } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", path, e);\n       }\n \n+      // Either a normal file was not found or the probe was skipped.\n+      // because the key ended in \"/\" or it was not in the set of probes.\n       // Look for the dir marker\n-      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n-        String newKey \u003d key + \"/\";\n+      if (probes.contains(StatusProbeEnum.DirMarker)) {\n+        String newKey \u003d maybeAddTrailingSlash(key);\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     // execute the list\n     if (probes.contains(StatusProbeEnum.List)) {\n       try {\n-        key \u003d maybeAddTrailingSlash(key);\n-        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n+        String dirKey \u003d maybeAddTrailingSlash(key);\n+        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n \n         S3ListResult objects \u003d listObjects(request);\n \n         Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n         Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n         if (!isEmptyOfKeys(prefixes, tombstones) ||\n             !isEmptyOfObjects(summaries, tombstones)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found path as directory (with /): {}/{}\",\n                 prefixes.size(), summaries.size());\n \n             for (S3ObjectSummary summary : summaries) {\n               LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n             }\n             for (String prefix : prefixes) {\n               LOG.debug(\"Prefix: {}\", prefix);\n             }\n           }\n \n           return new S3AFileStatus(Tristate.FALSE, path, username);\n         } else if (key.isEmpty()) {\n           LOG.debug(\"Found root directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  S3AFileStatus s3GetFileStatus(final Path path,\n      final String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      final Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n        try {\n          // look for the simple file\n          ObjectMetadata meta \u003d getObjectMetadata(key);\n          LOG.debug(\"Found exact file: normal file {}\", key);\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        } catch (AmazonServiceException e) {\n          // if the response is a 404 error, it just means that there is\n          // no file at that path...the remaining checks will be needed.\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", path, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      }\n\n      // Either a normal file was not found or the probe was skipped.\n      // because the key ended in \"/\" or it was not in the set of probes.\n      // Look for the dir marker\n      if (probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d maybeAddTrailingSlash(key);\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        String dirKey \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-16635. S3A \"directories only\" scan still does a HEAD.\n\nContributed by Steve Loughran.\n\nChange-Id: I5e41d7f721364c392e1f4344db83dfa8c5aa06ce\n",
          "commitDate": "14/10/19 9:05 AM",
          "commitName": "74e5018d871bdf712b3ad0706150a37cb8efee5c",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "04/10/19 10:54 AM",
          "commitNameOld": "6574f27fa348542411bff888b184cd7ce34e5d9e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 9.92,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,101 +1,102 @@\n-  private S3AFileStatus s3GetFileStatus(final Path path,\n-      String key,\n+  S3AFileStatus s3GetFileStatus(final Path path,\n+      final String key,\n       final Set\u003cStatusProbeEnum\u003e probes,\n       final Set\u003cPath\u003e tombstones) throws IOException {\n-    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n-      try {\n-        ObjectMetadata meta \u003d getObjectMetadata(key);\n-\n-        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-          LOG.debug(\"Found exact file: fake directory\");\n-          return new S3AFileStatus(Tristate.TRUE, path, username);\n-        } else {\n-          LOG.debug(\"Found exact file: normal file\");\n+    if (!key.isEmpty()) {\n+      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n+        try {\n+          // look for the simple file\n+          ObjectMetadata meta \u003d getObjectMetadata(key);\n+          LOG.debug(\"Found exact file: normal file {}\", key);\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n-        }\n-      } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d SC_404) {\n+        } catch (AmazonServiceException e) {\n+          // if the response is a 404 error, it just means that there is\n+          // no file at that path...the remaining checks will be needed.\n+          if (e.getStatusCode() !\u003d SC_404) {\n+            throw translateException(\"getFileStatus\", path, e);\n+          }\n+        } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n-      } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", path, e);\n       }\n \n+      // Either a normal file was not found or the probe was skipped.\n+      // because the key ended in \"/\" or it was not in the set of probes.\n       // Look for the dir marker\n-      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n-        String newKey \u003d key + \"/\";\n+      if (probes.contains(StatusProbeEnum.DirMarker)) {\n+        String newKey \u003d maybeAddTrailingSlash(key);\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     // execute the list\n     if (probes.contains(StatusProbeEnum.List)) {\n       try {\n-        key \u003d maybeAddTrailingSlash(key);\n-        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n+        String dirKey \u003d maybeAddTrailingSlash(key);\n+        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n \n         S3ListResult objects \u003d listObjects(request);\n \n         Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n         Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n         if (!isEmptyOfKeys(prefixes, tombstones) ||\n             !isEmptyOfObjects(summaries, tombstones)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found path as directory (with /): {}/{}\",\n                 prefixes.size(), summaries.size());\n \n             for (S3ObjectSummary summary : summaries) {\n               LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n             }\n             for (String prefix : prefixes) {\n               LOG.debug(\"Prefix: {}\", prefix);\n             }\n           }\n \n           return new S3AFileStatus(Tristate.FALSE, path, username);\n         } else if (key.isEmpty()) {\n           LOG.debug(\"Found root directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  S3AFileStatus s3GetFileStatus(final Path path,\n      final String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      final Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      if (probes.contains(StatusProbeEnum.Head) \u0026\u0026 !key.endsWith(\"/\")) {\n        try {\n          // look for the simple file\n          ObjectMetadata meta \u003d getObjectMetadata(key);\n          LOG.debug(\"Found exact file: normal file {}\", key);\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        } catch (AmazonServiceException e) {\n          // if the response is a 404 error, it just means that there is\n          // no file at that path...the remaining checks will be needed.\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", path, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      }\n\n      // Either a normal file was not found or the probe was skipped.\n      // because the key ended in \"/\" or it was not in the set of probes.\n      // Look for the dir marker\n      if (probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d maybeAddTrailingSlash(key);\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        String dirKey \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(dirKey, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[path-Path(modifiers-final), key-String, probes-Set\u003cStatusProbeEnum\u003e(modifiers-final), tombstones-Set\u003cPath\u003e(modifiers-final)]",
            "newValue": "[path-Path(modifiers-final), key-String(modifiers-final), probes-Set\u003cStatusProbeEnum\u003e(modifiers-final), tombstones-Set\u003cPath\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "9221704f857e33a5f9e00c19d3705e46e94f427b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
      "commitDate": "11/09/19 8:46 AM",
      "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
          "commitDate": "11/09/19 8:46 AM",
          "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/09/19 6:25 AM",
          "commitNameOld": "511df1e837b19ccb9271520589452d82d50ac69d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 6.1,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,96 +1,101 @@\n-  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n-      Set\u003cPath\u003e tombstones) throws IOException {\n-    if (!key.isEmpty()) {\n+  private S3AFileStatus s3GetFileStatus(final Path path,\n+      String key,\n+      final Set\u003cStatusProbeEnum\u003e probes,\n+      final Set\u003cPath\u003e tombstones) throws IOException {\n+    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n         }\n       } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d 404) {\n+        if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n-      // Necessary?\n-      if (!key.endsWith(\"/\")) {\n+      // Look for the dir marker\n+      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n-          if (e.getStatusCode() !\u003d 404) {\n+          if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n-    try {\n-      key \u003d maybeAddTrailingSlash(key);\n-      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n+    // execute the list\n+    if (probes.contains(StatusProbeEnum.List)) {\n+      try {\n+        key \u003d maybeAddTrailingSlash(key);\n+        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n \n-      S3ListResult objects \u003d listObjects(request);\n+        S3ListResult objects \u003d listObjects(request);\n \n-      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n-      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n-      if (!isEmptyOfKeys(prefixes, tombstones) ||\n-          !isEmptyOfObjects(summaries, tombstones)) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Found path as directory (with /): {}/{}\",\n-              prefixes.size(), summaries.size());\n+        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n+        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n+        if (!isEmptyOfKeys(prefixes, tombstones) ||\n+            !isEmptyOfObjects(summaries, tombstones)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found path as directory (with /): {}/{}\",\n+                prefixes.size(), summaries.size());\n \n-          for (S3ObjectSummary summary : summaries) {\n-            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+            for (S3ObjectSummary summary : summaries) {\n+              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+            }\n+            for (String prefix : prefixes) {\n+              LOG.debug(\"Prefix: {}\", prefix);\n+            }\n           }\n-          for (String prefix : prefixes) {\n-            LOG.debug(\"Prefix: {}\", prefix);\n-          }\n+\n+          return new S3AFileStatus(Tristate.FALSE, path, username);\n+        } else if (key.isEmpty()) {\n+          LOG.debug(\"Found root directory\");\n+          return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n-\n-        return new S3AFileStatus(Tristate.FALSE, path, username);\n-      } else if (key.isEmpty()) {\n-        LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(Tristate.TRUE, path, username);\n-      }\n-    } catch (AmazonServiceException e) {\n-      if (e.getStatusCode() !\u003d 404) {\n+      } catch (AmazonServiceException e) {\n+        if (e.getStatusCode() !\u003d SC_404) {\n+          throw translateException(\"getFileStatus\", path, e);\n+        }\n+      } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"getFileStatus\", path, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path,\n      String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      final Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Look for the dir marker\n      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        key \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[path-Path(modifiers-final), key-String, tombstones-Set\u003cPath\u003e]",
            "newValue": "[path-Path(modifiers-final), key-String, probes-Set\u003cStatusProbeEnum\u003e(modifiers-final), tombstones-Set\u003cPath\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
          "commitDate": "11/09/19 8:46 AM",
          "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/09/19 6:25 AM",
          "commitNameOld": "511df1e837b19ccb9271520589452d82d50ac69d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 6.1,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,96 +1,101 @@\n-  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n-      Set\u003cPath\u003e tombstones) throws IOException {\n-    if (!key.isEmpty()) {\n+  private S3AFileStatus s3GetFileStatus(final Path path,\n+      String key,\n+      final Set\u003cStatusProbeEnum\u003e probes,\n+      final Set\u003cPath\u003e tombstones) throws IOException {\n+    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n         }\n       } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d 404) {\n+        if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n-      // Necessary?\n-      if (!key.endsWith(\"/\")) {\n+      // Look for the dir marker\n+      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n-          if (e.getStatusCode() !\u003d 404) {\n+          if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n-    try {\n-      key \u003d maybeAddTrailingSlash(key);\n-      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n+    // execute the list\n+    if (probes.contains(StatusProbeEnum.List)) {\n+      try {\n+        key \u003d maybeAddTrailingSlash(key);\n+        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n \n-      S3ListResult objects \u003d listObjects(request);\n+        S3ListResult objects \u003d listObjects(request);\n \n-      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n-      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n-      if (!isEmptyOfKeys(prefixes, tombstones) ||\n-          !isEmptyOfObjects(summaries, tombstones)) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Found path as directory (with /): {}/{}\",\n-              prefixes.size(), summaries.size());\n+        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n+        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n+        if (!isEmptyOfKeys(prefixes, tombstones) ||\n+            !isEmptyOfObjects(summaries, tombstones)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found path as directory (with /): {}/{}\",\n+                prefixes.size(), summaries.size());\n \n-          for (S3ObjectSummary summary : summaries) {\n-            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+            for (S3ObjectSummary summary : summaries) {\n+              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+            }\n+            for (String prefix : prefixes) {\n+              LOG.debug(\"Prefix: {}\", prefix);\n+            }\n           }\n-          for (String prefix : prefixes) {\n-            LOG.debug(\"Prefix: {}\", prefix);\n-          }\n+\n+          return new S3AFileStatus(Tristate.FALSE, path, username);\n+        } else if (key.isEmpty()) {\n+          LOG.debug(\"Found root directory\");\n+          return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n-\n-        return new S3AFileStatus(Tristate.FALSE, path, username);\n-      } else if (key.isEmpty()) {\n-        LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(Tristate.TRUE, path, username);\n-      }\n-    } catch (AmazonServiceException e) {\n-      if (e.getStatusCode() !\u003d 404) {\n+      } catch (AmazonServiceException e) {\n+        if (e.getStatusCode() !\u003d SC_404) {\n+          throw translateException(\"getFileStatus\", path, e);\n+        }\n+      } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"getFileStatus\", path, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path,\n      String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      final Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Look for the dir marker\n      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        key \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
          "commitDate": "11/09/19 8:46 AM",
          "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/09/19 6:25 AM",
          "commitNameOld": "511df1e837b19ccb9271520589452d82d50ac69d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 6.1,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,96 +1,101 @@\n-  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n-      Set\u003cPath\u003e tombstones) throws IOException {\n-    if (!key.isEmpty()) {\n+  private S3AFileStatus s3GetFileStatus(final Path path,\n+      String key,\n+      final Set\u003cStatusProbeEnum\u003e probes,\n+      final Set\u003cPath\u003e tombstones) throws IOException {\n+    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username,\n               meta.getETag(),\n               meta.getVersionId());\n         }\n       } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d 404) {\n+        if (e.getStatusCode() !\u003d SC_404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n-      // Necessary?\n-      if (!key.endsWith(\"/\")) {\n+      // Look for the dir marker\n+      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username,\n                     meta.getETag(),\n                     meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n-          if (e.getStatusCode() !\u003d 404) {\n+          if (e.getStatusCode() !\u003d SC_404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n-    try {\n-      key \u003d maybeAddTrailingSlash(key);\n-      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n+    // execute the list\n+    if (probes.contains(StatusProbeEnum.List)) {\n+      try {\n+        key \u003d maybeAddTrailingSlash(key);\n+        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n \n-      S3ListResult objects \u003d listObjects(request);\n+        S3ListResult objects \u003d listObjects(request);\n \n-      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n-      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n-      if (!isEmptyOfKeys(prefixes, tombstones) ||\n-          !isEmptyOfObjects(summaries, tombstones)) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Found path as directory (with /): {}/{}\",\n-              prefixes.size(), summaries.size());\n+        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n+        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n+        if (!isEmptyOfKeys(prefixes, tombstones) ||\n+            !isEmptyOfObjects(summaries, tombstones)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found path as directory (with /): {}/{}\",\n+                prefixes.size(), summaries.size());\n \n-          for (S3ObjectSummary summary : summaries) {\n-            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+            for (S3ObjectSummary summary : summaries) {\n+              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+            }\n+            for (String prefix : prefixes) {\n+              LOG.debug(\"Prefix: {}\", prefix);\n+            }\n           }\n-          for (String prefix : prefixes) {\n-            LOG.debug(\"Prefix: {}\", prefix);\n-          }\n+\n+          return new S3AFileStatus(Tristate.FALSE, path, username);\n+        } else if (key.isEmpty()) {\n+          LOG.debug(\"Found root directory\");\n+          return new S3AFileStatus(Tristate.TRUE, path, username);\n         }\n-\n-        return new S3AFileStatus(Tristate.FALSE, path, username);\n-      } else if (key.isEmpty()) {\n-        LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(Tristate.TRUE, path, username);\n-      }\n-    } catch (AmazonServiceException e) {\n-      if (e.getStatusCode() !\u003d 404) {\n+      } catch (AmazonServiceException e) {\n+        if (e.getStatusCode() !\u003d SC_404) {\n+          throw translateException(\"getFileStatus\", path, e);\n+        }\n+      } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"getFileStatus\", path, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path,\n      String key,\n      final Set\u003cStatusProbeEnum\u003e probes,\n      final Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty() \u0026\u0026 probes.contains(StatusProbeEnum.Head)) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Look for the dir marker\n      if (!key.endsWith(\"/\") \u0026\u0026 probes.contains(StatusProbeEnum.DirMarker)) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d SC_404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    // execute the list\n    if (probes.contains(StatusProbeEnum.List)) {\n      try {\n        key \u003d maybeAddTrailingSlash(key);\n        S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n\n        S3ListResult objects \u003d listObjects(request);\n\n        Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n        Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n        if (!isEmptyOfKeys(prefixes, tombstones) ||\n            !isEmptyOfObjects(summaries, tombstones)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found path as directory (with /): {}/{}\",\n                prefixes.size(), summaries.size());\n\n            for (S3ObjectSummary summary : summaries) {\n              LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n            }\n            for (String prefix : prefixes) {\n              LOG.debug(\"Prefix: {}\", prefix);\n            }\n          }\n\n          return new S3AFileStatus(Tristate.FALSE, path, username);\n        } else if (key.isEmpty()) {\n          LOG.debug(\"Found root directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d SC_404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[path-Path(modifiers-final), key-String, tombstones-Set\u003cPath\u003e]",
            "newValue": "[path-Path(modifiers-final), key-String, probes-Set\u003cStatusProbeEnum\u003e(modifiers-final), tombstones-Set\u003cPath\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "30/04/19 3:53 AM",
      "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 19.44,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,96 @@\n   private S3AFileStatus s3GetFileStatus(final Path path, String key,\n       Set\u003cPath\u003e tombstones) throws IOException {\n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n-              username);\n+              username,\n+              meta.getETag(),\n+              meta.getVersionId());\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n-                    username);\n+                    username,\n+                    meta.getETag(),\n+                    meta.getVersionId());\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n       key \u003d maybeAddTrailingSlash(key);\n       S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n \n       S3ListResult objects \u003d listObjects(request);\n \n       Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n       Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n       if (!isEmptyOfKeys(prefixes, tombstones) ||\n           !isEmptyOfObjects(summaries, tombstones)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               prefixes.size(), summaries.size());\n \n           for (S3ObjectSummary summary : summaries) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : prefixes) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n         return new S3AFileStatus(Tristate.FALSE, path, username);\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n         return new S3AFileStatus(Tristate.TRUE, path, username);\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"getFileStatus\", path, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n      Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username,\n              meta.getETag(),\n              meta.getVersionId());\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username,\n                    meta.getETag(),\n                    meta.getVersionId());\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n\n      S3ListResult objects \u003d listObjects(request);\n\n      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n      if (!isEmptyOfKeys(prefixes, tombstones) ||\n          !isEmptyOfObjects(summaries, tombstones)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              prefixes.size(), summaries.size());\n\n          for (S3ObjectSummary summary : summaries) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : prefixes) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(Tristate.FALSE, path, username);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(Tristate.TRUE, path, username);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", path, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15141 Support IAM Assumed roles in S3A. Contributed by Steve Loughran.\n",
      "commitDate": "17/01/18 12:05 AM",
      "commitName": "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "15/01/18 3:33 AM",
      "commitNameOld": "a0c71dcc33ca7c5539d0ab61c4a276c4f39e5744",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,92 @@\n   private S3AFileStatus s3GetFileStatus(final Path path, String key,\n       Set\u003cPath\u003e tombstones) throws IOException {\n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username);\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n       key \u003d maybeAddTrailingSlash(key);\n       S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n \n       S3ListResult objects \u003d listObjects(request);\n \n       Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n       Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n       if (!isEmptyOfKeys(prefixes, tombstones) ||\n           !isEmptyOfObjects(summaries, tombstones)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               prefixes.size(), summaries.size());\n \n           for (S3ObjectSummary summary : summaries) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : prefixes) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n         return new S3AFileStatus(Tristate.FALSE, path, username);\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n         return new S3AFileStatus(Tristate.TRUE, path, username);\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n-        throw translateException(\"getFileStatus\", key, e);\n+        throw translateException(\"getFileStatus\", path, e);\n       }\n     } catch (AmazonClientException e) {\n-      throw translateException(\"getFileStatus\", key, e);\n+      throw translateException(\"getFileStatus\", path, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n      Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username);\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n\n      S3ListResult objects \u003d listObjects(request);\n\n      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n      if (!isEmptyOfKeys(prefixes, tombstones) ||\n          !isEmptyOfObjects(summaries, tombstones)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              prefixes.size(), summaries.size());\n\n          for (S3ObjectSummary summary : summaries) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : prefixes) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(Tristate.FALSE, path, username);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(Tristate.TRUE, path, username);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", path, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "5bbca80428ffbe776650652de86a3bba885edb31": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13421. Switch to v2 of the S3 List Objects API in S3A.\nContributed by Aaron Fabbri\n",
      "commitDate": "08/09/17 4:07 AM",
      "commitName": "5bbca80428ffbe776650652de86a3bba885edb31",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "01/09/17 6:13 AM",
      "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.91,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,92 @@\n   private S3AFileStatus s3GetFileStatus(final Path path, String key,\n       Set\u003cPath\u003e tombstones) throws IOException {\n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(Tristate.TRUE, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n               getDefaultBlockSize(path),\n               username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(Tristate.TRUE, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                     dateToLong(meta.getLastModified()),\n                     path,\n                     getDefaultBlockSize(path),\n                     username);\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n       key \u003d maybeAddTrailingSlash(key);\n-      ListObjectsRequest request \u003d new ListObjectsRequest();\n-      request.setBucketName(bucket);\n-      request.setPrefix(key);\n-      request.setDelimiter(\"/\");\n-      request.setMaxKeys(1);\n+      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n \n-      ObjectListing objects \u003d listObjects(request);\n+      S3ListResult objects \u003d listObjects(request);\n \n       Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n       Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n       if (!isEmptyOfKeys(prefixes, tombstones) ||\n           !isEmptyOfObjects(summaries, tombstones)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               prefixes.size(), summaries.size());\n \n           for (S3ObjectSummary summary : summaries) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : prefixes) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n         return new S3AFileStatus(Tristate.FALSE, path, username);\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n         return new S3AFileStatus(Tristate.TRUE, path, username);\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         throw translateException(\"getFileStatus\", key, e);\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"getFileStatus\", key, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n      Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username);\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      S3ListRequest request \u003d createListObjectsRequest(key, \"/\", 1);\n\n      S3ListResult objects \u003d listObjects(request);\n\n      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n      if (!isEmptyOfKeys(prefixes, tombstones) ||\n          !isEmptyOfObjects(summaries, tombstones)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              prefixes.size(), summaries.size());\n\n          for (S3ObjectSummary summary : summaries) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : prefixes) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(Tristate.FALSE, path, username);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(Tristate.TRUE, path, username);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,96 @@\n+  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n+      Set\u003cPath\u003e tombstones) throws IOException {\n+    if (!key.isEmpty()) {\n+      try {\n+        ObjectMetadata meta \u003d getObjectMetadata(key);\n+\n+        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n+          LOG.debug(\"Found exact file: fake directory\");\n+          return new S3AFileStatus(Tristate.TRUE, path, username);\n+        } else {\n+          LOG.debug(\"Found exact file: normal file\");\n+          return new S3AFileStatus(meta.getContentLength(),\n+              dateToLong(meta.getLastModified()),\n+              path,\n+              getDefaultBlockSize(path),\n+              username);\n+        }\n+      } catch (AmazonServiceException e) {\n+        if (e.getStatusCode() !\u003d 404) {\n+          throw translateException(\"getFileStatus\", path, e);\n+        }\n+      } catch (AmazonClientException e) {\n+        throw translateException(\"getFileStatus\", path, e);\n+      }\n+\n+      // Necessary?\n+      if (!key.endsWith(\"/\")) {\n+        String newKey \u003d key + \"/\";\n+        try {\n+          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n+\n+          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n+            LOG.debug(\"Found file (with /): fake directory\");\n+            return new S3AFileStatus(Tristate.TRUE, path, username);\n+          } else {\n+            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n+                key);\n+\n+            return new S3AFileStatus(meta.getContentLength(),\n+                    dateToLong(meta.getLastModified()),\n+                    path,\n+                    getDefaultBlockSize(path),\n+                    username);\n+          }\n+        } catch (AmazonServiceException e) {\n+          if (e.getStatusCode() !\u003d 404) {\n+            throw translateException(\"getFileStatus\", newKey, e);\n+          }\n+        } catch (AmazonClientException e) {\n+          throw translateException(\"getFileStatus\", newKey, e);\n+        }\n+      }\n+    }\n+\n+    try {\n+      key \u003d maybeAddTrailingSlash(key);\n+      ListObjectsRequest request \u003d new ListObjectsRequest();\n+      request.setBucketName(bucket);\n+      request.setPrefix(key);\n+      request.setDelimiter(\"/\");\n+      request.setMaxKeys(1);\n+\n+      ObjectListing objects \u003d listObjects(request);\n+\n+      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n+      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n+      if (!isEmptyOfKeys(prefixes, tombstones) ||\n+          !isEmptyOfObjects(summaries, tombstones)) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Found path as directory (with /): {}/{}\",\n+              prefixes.size(), summaries.size());\n+\n+          for (S3ObjectSummary summary : summaries) {\n+            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n+          }\n+          for (String prefix : prefixes) {\n+            LOG.debug(\"Prefix: {}\", prefix);\n+          }\n+        }\n+\n+        return new S3AFileStatus(Tristate.FALSE, path, username);\n+      } else if (key.isEmpty()) {\n+        LOG.debug(\"Found root directory\");\n+        return new S3AFileStatus(Tristate.TRUE, path, username);\n+      }\n+    } catch (AmazonServiceException e) {\n+      if (e.getStatusCode() !\u003d 404) {\n+        throw translateException(\"getFileStatus\", key, e);\n+      }\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"getFileStatus\", key, e);\n+    }\n+\n+    LOG.debug(\"Not Found: {}\", path);\n+    throw new FileNotFoundException(\"No such file or directory: \" + path);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private S3AFileStatus s3GetFileStatus(final Path path, String key,\n      Set\u003cPath\u003e tombstones) throws IOException {\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(Tristate.TRUE, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(Tristate.TRUE, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                    dateToLong(meta.getLastModified()),\n                    path,\n                    getDefaultBlockSize(path),\n                    username);\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d listObjects(request);\n\n      Collection\u003cString\u003e prefixes \u003d objects.getCommonPrefixes();\n      Collection\u003cS3ObjectSummary\u003e summaries \u003d objects.getObjectSummaries();\n      if (!isEmptyOfKeys(prefixes, tombstones) ||\n          !isEmptyOfObjects(summaries, tombstones)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              prefixes.size(), summaries.size());\n\n          for (S3ObjectSummary summary : summaries) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : prefixes) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(Tristate.FALSE, path, username);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(Tristate.TRUE, path, username);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}