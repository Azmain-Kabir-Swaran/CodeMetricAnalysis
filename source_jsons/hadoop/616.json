{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReaderFactory.java",
  "functionName": "getRemoteBlockReaderFromTcp",
  "functionId": "getRemoteBlockReaderFromTcp",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
  "functionStartLine": 743,
  "functionEndLine": 778,
  "numCommitsSeen": 63,
  "timeTaken": 4248,
  "changeHistory": [
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "f308561f1d885491b88db73ac63003202056d661",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "f308561f1d885491b88db73ac63003202056d661": "Yfilerename",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Ymultichange(Yfilerename,Ybodychange)",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Ybodychange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/07/18 2:59 PM",
      "commitNameOld": "0247cb6318507afe06816e337a19f396afc53efa",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 61.99,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n     LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n         this);\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n           LOG.trace(\"{}: got security exception while constructing a remote \"\n               + \"block reader from {}\", this, peer, ioe);\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n           LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n-          IOUtilsClient.cleanup(LOG, peer);\n+          IOUtilsClient.cleanupWithLogger(LOG, peer);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n        this);\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n              + \"block reader from {}\", this, peer, ioe);\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "f308561f1d885491b88db73ac63003202056d661": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8057 Move BlockReader implementation to the client implementation package.  Contributed by Takanobu Asanuma\n",
      "commitDate": "25/04/16 12:01 PM",
      "commitName": "f308561f1d885491b88db73ac63003202056d661",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/04/16 9:38 AM",
      "commitNameOld": "10f0f7851a3255caab775777e8fb6c2781d97062",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n        this);\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n              + \"block reader from {}\", this, peer, ioe);\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java"
      }
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,36 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(this + \": trying to create a remote block reader from a \" +\n-          \"TCP socket\");\n-    }\n+    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n+        this);\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": got security exception while constructing \" +\n-                \"a remote block reader from \" + peer, ioe);\n-          }\n+          LOG.trace(\"{}: got security exception while constructing a remote \"\n+              + \"block reader from {}\", this, peer, ioe);\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n-          }\n+          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n        this);\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n              + \"block reader from {}\", this, peer, ioe);\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n-    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n-        this);\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": trying to create a remote block reader from a \" +\n+          \"TCP socket\");\n+    }\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n-          LOG.trace(\"{}: got security exception while constructing a remote \"\n-              + \"block reader from {}\", this, peer, ioe);\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": got security exception while constructing \" +\n+                \"a remote block reader from \" + peer, ioe);\n+          }\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n-          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n+          }\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from a \" +\n          \"TCP socket\");\n    }\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from \" + peer, ioe);\n          }\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 1:39 PM",
      "commitNameOld": "e5992ef4df63fbc6a6b8e357b32c647e7837c662",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,36 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(this + \": trying to create a remote block reader from a \" +\n-          \"TCP socket\");\n-    }\n+    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n+        this);\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": got security exception while constructing \" +\n-                \"a remote block reader from \" + peer, ioe);\n-          }\n+          LOG.trace(\"{}: got security exception while constructing a remote \"\n+              + \"block reader from {}\", this, peer, ioe);\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n-          }\n+          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    LOG.trace(\"{}: trying to create a remote block reader from a TCP socket\",\n        this);\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n              + \"block reader from {}\", this, peer, ioe);\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          LOG.debug(\"Closed potentially stale remote peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/09/15 11:08 AM",
          "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "26/09/15 9:06 AM",
          "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from a \" +\n           \"TCP socket\");\n     }\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from \" + peer, ioe);\n           }\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from a \" +\n          \"TCP socket\");\n    }\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from \" + peer, ioe);\n          }\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/09/15 11:08 AM",
          "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "26/09/15 9:06 AM",
          "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from a \" +\n           \"TCP socket\");\n     }\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from \" + peer, ioe);\n           }\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from a \" +\n          \"TCP socket\");\n    }\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from \" + peer, ioe);\n          }\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/10/14 9:38 AM",
      "commitNameOld": "463aec11718e47d4aabb86a7a539cb973460aae6",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 45.17,
      "commitsBetweenForRepo": 388,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,42 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from a \" +\n           \"TCP socket\");\n     }\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n-        if (curPeer \u003d\u003d null) break;\n         if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from \" + peer, ioe);\n           }\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtils.cleanup(LOG, peer);\n         }\n       }\n     }\n-    return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from a \" +\n          \"TCP socket\");\n    }\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from \" + peer, ioe);\n          }\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 7:10 PM",
      "commitNameOld": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 18.03,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from a \" +\n           \"TCP socket\");\n     }\n     BlockReader blockReader \u003d null;\n     while (true) {\n       BlockReaderPeer curPeer \u003d null;\n       Peer peer \u003d null;\n       try {\n         curPeer \u003d nextTcpPeer();\n         if (curPeer \u003d\u003d null) break;\n+        if (curPeer.fromCache) remainingCacheTries--;\n         peer \u003d curPeer.peer;\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from \" + peer, ioe);\n           }\n           throw ioe;\n         }\n         if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be\n           // stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created peer.\n           LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n           throw ioe;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtils.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from a \" +\n          \"TCP socket\");\n    }\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer \u003d\u003d null) break;\n        if (curPeer.fromCache) remainingCacheTries--;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from \" + peer, ioe);\n          }\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,43 @@\n+  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": trying to create a remote block reader from a \" +\n+          \"TCP socket\");\n+    }\n+    BlockReader blockReader \u003d null;\n+    while (true) {\n+      BlockReaderPeer curPeer \u003d null;\n+      Peer peer \u003d null;\n+      try {\n+        curPeer \u003d nextTcpPeer();\n+        if (curPeer \u003d\u003d null) break;\n+        peer \u003d curPeer.peer;\n+        blockReader \u003d getRemoteBlockReader(peer);\n+        return blockReader;\n+      } catch (IOException ioe) {\n+        if (isSecurityException(ioe)) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": got security exception while constructing \" +\n+                \"a remote block reader from \" + peer, ioe);\n+          }\n+          throw ioe;\n+        }\n+        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n+          // Handle an I/O error we got when using a cached peer.  These are\n+          // considered less serious, because the underlying socket may be\n+          // stale.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n+          }\n+        } else {\n+          // Handle an I/O error we got when using a newly created peer.\n+          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n+          throw ioe;\n+        }\n+      } finally {\n+        if (blockReader \u003d\u003d null) {\n+          IOUtils.cleanup(LOG, peer);\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromTcp() throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from a \" +\n          \"TCP socket\");\n    }\n    BlockReader blockReader \u003d null;\n    while (true) {\n      BlockReaderPeer curPeer \u003d null;\n      Peer peer \u003d null;\n      try {\n        curPeer \u003d nextTcpPeer();\n        if (curPeer \u003d\u003d null) break;\n        peer \u003d curPeer.peer;\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from \" + peer, ioe);\n          }\n          throw ioe;\n        }\n        if ((curPeer !\u003d null) \u0026\u0026 curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be\n          // stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale remote peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created peer.\n          LOG.warn(\"I/O error constructing remote block reader.\", ioe);\n          throw ioe;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
    }
  }
}