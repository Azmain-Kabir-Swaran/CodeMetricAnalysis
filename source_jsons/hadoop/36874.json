{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "checkUserAccessToQueue",
  "functionId": "checkUserAccessToQueue___queue-String(annotations-@PathParam(RMWSConsts.QUEUE))__username-String(annotations-@QueryParam(RMWSConsts.USER))__queueAclType-String(annotations-@QueryParam(RMWSConsts.QUEUE_ACL_TYPE)-@DefaultValue(\"SUBMIT_APPLICATIONS\"))__hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2801,
  "functionEndLine": 2843,
  "numCommitsSeen": 106,
  "timeTaken": 4009,
  "changeHistory": [
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "c78cb18c61a0565b9697ab5bbf4d186e43e82f55",
    "6bd130ea459f2327f344e7c04c616e30defc24dd"
  ],
  "changeHistoryShort": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "c78cb18c61a0565b9697ab5bbf4d186e43e82f55": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6bd130ea459f2327f344e7c04c616e30defc24dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public RMQueueAclInfo checkUserAccessToQueue(\n       @PathParam(RMWSConsts.QUEUE) String queue,\n       @QueryParam(RMWSConsts.USER) String username,\n       @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n         @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n       @Context HttpServletRequest hsr) throws AuthorizationException {\n-    init();\n+    initForReadableEndpoints();\n \n     // For the user who invokes this REST call, he/she should have admin access\n     // to the queue. Otherwise we will reject the call.\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n         callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n       throw new ForbiddenException(\n           \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n               + queue + \" so it cannot check ACLs for other users.\");\n     }\n \n     // Create UGI for the to-be-checked user.\n     UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n     if (user \u003d\u003d null) {\n       throw new ForbiddenException(\n           \"Failed to retrieve UserGroupInformation for user\u003d\" + username);\n     }\n \n     // Check if the specified queue acl is valid.\n     QueueACL queueACL;\n     try {\n       queueACL \u003d QueueACL.valueOf(queueAclType);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"Specified queueAclType\u003d\" + queueAclType\n           + \" is not a valid type, valid queue acl types\u003d{\"\n           + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\");\n     }\n \n     if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n       return new RMQueueAclInfo(false, user.getUserName(),\n           \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n               + \" with acl-type\u003d\" + queueAclType);\n     }\n \n     return new RMQueueAclInfo(true, user.getUserName(), \"\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMQueueAclInfo checkUserAccessToQueue(\n      @PathParam(RMWSConsts.QUEUE) String queue,\n      @QueryParam(RMWSConsts.USER) String username,\n      @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n        @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n      @Context HttpServletRequest hsr) throws AuthorizationException {\n    initForReadableEndpoints();\n\n    // For the user who invokes this REST call, he/she should have admin access\n    // to the queue. Otherwise we will reject the call.\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n        callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n      throw new ForbiddenException(\n          \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n              + queue + \" so it cannot check ACLs for other users.\");\n    }\n\n    // Create UGI for the to-be-checked user.\n    UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n    if (user \u003d\u003d null) {\n      throw new ForbiddenException(\n          \"Failed to retrieve UserGroupInformation for user\u003d\" + username);\n    }\n\n    // Check if the specified queue acl is valid.\n    QueueACL queueACL;\n    try {\n      queueACL \u003d QueueACL.valueOf(queueAclType);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"Specified queueAclType\u003d\" + queueAclType\n          + \" is not a valid type, valid queue acl types\u003d{\"\n          + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\");\n    }\n\n    if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n      return new RMQueueAclInfo(false, user.getUserName(),\n          \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n              + \" with acl-type\u003d\" + queueAclType);\n    }\n\n    return new RMQueueAclInfo(true, user.getUserName(), \"\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "c78cb18c61a0565b9697ab5bbf4d186e43e82f55": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8091. Revisit checkUserAccessToQueue RM REST API. (wangda)\n\nChange-Id: I5fab3fe229c34e967487b7327c7b3c8ddf7cb795\n",
      "commitDate": "02/04/18 3:22 PM",
      "commitName": "c78cb18c61a0565b9697ab5bbf4d186e43e82f55",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8091. Revisit checkUserAccessToQueue RM REST API. (wangda)\n\nChange-Id: I5fab3fe229c34e967487b7327c7b3c8ddf7cb795\n",
          "commitDate": "02/04/18 3:22 PM",
          "commitName": "c78cb18c61a0565b9697ab5bbf4d186e43e82f55",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/03/18 10:30 PM",
          "commitNameOld": "6bd130ea459f2327f344e7c04c616e30defc24dd",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 15.7,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,43 @@\n-  public Response checkUserAccessToQueue(\n+  public RMQueueAclInfo checkUserAccessToQueue(\n       @PathParam(RMWSConsts.QUEUE) String queue,\n       @QueryParam(RMWSConsts.USER) String username,\n       @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n         @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n       @Context HttpServletRequest hsr) throws AuthorizationException {\n     init();\n \n-    // Check if the specified queue acl is valid.\n-    QueueACL queueACL;\n-    try {\n-      queueACL \u003d QueueACL.valueOf(queueAclType);\n-    } catch (IllegalArgumentException e) {\n-      return Response.status(Status.BAD_REQUEST).entity(\n-          \"Specified queueAclType\u003d\" + queueAclType\n-              + \" is not a valid type, valid queue acl types\u003d{\"\n-              + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\").build();\n-    }\n-\n     // For the user who invokes this REST call, he/she should have admin access\n     // to the queue. Otherwise we will reject the call.\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n         callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n-      return Response.status(Status.FORBIDDEN).entity(\n+      throw new ForbiddenException(\n           \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n-              + queue + \" so it cannot check ACLs for other users.\")\n-          .build();\n+              + queue + \" so it cannot check ACLs for other users.\");\n     }\n \n     // Create UGI for the to-be-checked user.\n     UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n     if (user \u003d\u003d null) {\n-      return Response.status(Status.FORBIDDEN).entity(\n-          \"Failed to retrieve UserGroupInformation for user\u003d\" + username)\n-          .build();\n+      throw new ForbiddenException(\n+          \"Failed to retrieve UserGroupInformation for user\u003d\" + username);\n+    }\n+\n+    // Check if the specified queue acl is valid.\n+    QueueACL queueACL;\n+    try {\n+      queueACL \u003d QueueACL.valueOf(queueAclType);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"Specified queueAclType\u003d\" + queueAclType\n+          + \" is not a valid type, valid queue acl types\u003d{\"\n+          + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\");\n     }\n \n     if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n-      return Response.status(Status.FORBIDDEN).entity(\n+      return new RMQueueAclInfo(false, user.getUserName(),\n           \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n-              + \" with acl-type\u003d\" + queueAclType).build();\n+              + \" with acl-type\u003d\" + queueAclType);\n     }\n \n-    return Response.status(Status.OK).build();\n+    return new RMQueueAclInfo(true, user.getUserName(), \"\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMQueueAclInfo checkUserAccessToQueue(\n      @PathParam(RMWSConsts.QUEUE) String queue,\n      @QueryParam(RMWSConsts.USER) String username,\n      @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n        @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n      @Context HttpServletRequest hsr) throws AuthorizationException {\n    init();\n\n    // For the user who invokes this REST call, he/she should have admin access\n    // to the queue. Otherwise we will reject the call.\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n        callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n      throw new ForbiddenException(\n          \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n              + queue + \" so it cannot check ACLs for other users.\");\n    }\n\n    // Create UGI for the to-be-checked user.\n    UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n    if (user \u003d\u003d null) {\n      throw new ForbiddenException(\n          \"Failed to retrieve UserGroupInformation for user\u003d\" + username);\n    }\n\n    // Check if the specified queue acl is valid.\n    QueueACL queueACL;\n    try {\n      queueACL \u003d QueueACL.valueOf(queueAclType);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"Specified queueAclType\u003d\" + queueAclType\n          + \" is not a valid type, valid queue acl types\u003d{\"\n          + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\");\n    }\n\n    if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n      return new RMQueueAclInfo(false, user.getUserName(),\n          \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n              + \" with acl-type\u003d\" + queueAclType);\n    }\n\n    return new RMQueueAclInfo(true, user.getUserName(), \"\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "Response",
            "newValue": "RMQueueAclInfo"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8091. Revisit checkUserAccessToQueue RM REST API. (wangda)\n\nChange-Id: I5fab3fe229c34e967487b7327c7b3c8ddf7cb795\n",
          "commitDate": "02/04/18 3:22 PM",
          "commitName": "c78cb18c61a0565b9697ab5bbf4d186e43e82f55",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/03/18 10:30 PM",
          "commitNameOld": "6bd130ea459f2327f344e7c04c616e30defc24dd",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 15.7,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,43 @@\n-  public Response checkUserAccessToQueue(\n+  public RMQueueAclInfo checkUserAccessToQueue(\n       @PathParam(RMWSConsts.QUEUE) String queue,\n       @QueryParam(RMWSConsts.USER) String username,\n       @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n         @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n       @Context HttpServletRequest hsr) throws AuthorizationException {\n     init();\n \n-    // Check if the specified queue acl is valid.\n-    QueueACL queueACL;\n-    try {\n-      queueACL \u003d QueueACL.valueOf(queueAclType);\n-    } catch (IllegalArgumentException e) {\n-      return Response.status(Status.BAD_REQUEST).entity(\n-          \"Specified queueAclType\u003d\" + queueAclType\n-              + \" is not a valid type, valid queue acl types\u003d{\"\n-              + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\").build();\n-    }\n-\n     // For the user who invokes this REST call, he/she should have admin access\n     // to the queue. Otherwise we will reject the call.\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n         callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n-      return Response.status(Status.FORBIDDEN).entity(\n+      throw new ForbiddenException(\n           \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n-              + queue + \" so it cannot check ACLs for other users.\")\n-          .build();\n+              + queue + \" so it cannot check ACLs for other users.\");\n     }\n \n     // Create UGI for the to-be-checked user.\n     UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n     if (user \u003d\u003d null) {\n-      return Response.status(Status.FORBIDDEN).entity(\n-          \"Failed to retrieve UserGroupInformation for user\u003d\" + username)\n-          .build();\n+      throw new ForbiddenException(\n+          \"Failed to retrieve UserGroupInformation for user\u003d\" + username);\n+    }\n+\n+    // Check if the specified queue acl is valid.\n+    QueueACL queueACL;\n+    try {\n+      queueACL \u003d QueueACL.valueOf(queueAclType);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"Specified queueAclType\u003d\" + queueAclType\n+          + \" is not a valid type, valid queue acl types\u003d{\"\n+          + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\");\n     }\n \n     if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n-      return Response.status(Status.FORBIDDEN).entity(\n+      return new RMQueueAclInfo(false, user.getUserName(),\n           \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n-              + \" with acl-type\u003d\" + queueAclType).build();\n+              + \" with acl-type\u003d\" + queueAclType);\n     }\n \n-    return Response.status(Status.OK).build();\n+    return new RMQueueAclInfo(true, user.getUserName(), \"\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMQueueAclInfo checkUserAccessToQueue(\n      @PathParam(RMWSConsts.QUEUE) String queue,\n      @QueryParam(RMWSConsts.USER) String username,\n      @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n        @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n      @Context HttpServletRequest hsr) throws AuthorizationException {\n    init();\n\n    // For the user who invokes this REST call, he/she should have admin access\n    // to the queue. Otherwise we will reject the call.\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n        callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n      throw new ForbiddenException(\n          \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n              + queue + \" so it cannot check ACLs for other users.\");\n    }\n\n    // Create UGI for the to-be-checked user.\n    UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n    if (user \u003d\u003d null) {\n      throw new ForbiddenException(\n          \"Failed to retrieve UserGroupInformation for user\u003d\" + username);\n    }\n\n    // Check if the specified queue acl is valid.\n    QueueACL queueACL;\n    try {\n      queueACL \u003d QueueACL.valueOf(queueAclType);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"Specified queueAclType\u003d\" + queueAclType\n          + \" is not a valid type, valid queue acl types\u003d{\"\n          + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\");\n    }\n\n    if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n      return new RMQueueAclInfo(false, user.getUserName(),\n          \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n              + \" with acl-type\u003d\" + queueAclType);\n    }\n\n    return new RMQueueAclInfo(true, user.getUserName(), \"\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "6bd130ea459f2327f344e7c04c616e30defc24dd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8028. Support authorizeUserAccessToQueue in RMWebServices. Contributed by Wangda Tan.\n",
      "commitDate": "17/03/18 10:30 PM",
      "commitName": "6bd130ea459f2327f344e7c04c616e30defc24dd",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,46 @@\n+  public Response checkUserAccessToQueue(\n+      @PathParam(RMWSConsts.QUEUE) String queue,\n+      @QueryParam(RMWSConsts.USER) String username,\n+      @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n+        @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n+      @Context HttpServletRequest hsr) throws AuthorizationException {\n+    init();\n+\n+    // Check if the specified queue acl is valid.\n+    QueueACL queueACL;\n+    try {\n+      queueACL \u003d QueueACL.valueOf(queueAclType);\n+    } catch (IllegalArgumentException e) {\n+      return Response.status(Status.BAD_REQUEST).entity(\n+          \"Specified queueAclType\u003d\" + queueAclType\n+              + \" is not a valid type, valid queue acl types\u003d{\"\n+              + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\").build();\n+    }\n+\n+    // For the user who invokes this REST call, he/she should have admin access\n+    // to the queue. Otherwise we will reject the call.\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n+        callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n+      return Response.status(Status.FORBIDDEN).entity(\n+          \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n+              + queue + \" so it cannot check ACLs for other users.\")\n+          .build();\n+    }\n+\n+    // Create UGI for the to-be-checked user.\n+    UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n+    if (user \u003d\u003d null) {\n+      return Response.status(Status.FORBIDDEN).entity(\n+          \"Failed to retrieve UserGroupInformation for user\u003d\" + username)\n+          .build();\n+    }\n+\n+    if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n+      return Response.status(Status.FORBIDDEN).entity(\n+          \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n+              + \" with acl-type\u003d\" + queueAclType).build();\n+    }\n+\n+    return Response.status(Status.OK).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response checkUserAccessToQueue(\n      @PathParam(RMWSConsts.QUEUE) String queue,\n      @QueryParam(RMWSConsts.USER) String username,\n      @QueryParam(RMWSConsts.QUEUE_ACL_TYPE)\n        @DefaultValue(\"SUBMIT_APPLICATIONS\") String queueAclType,\n      @Context HttpServletRequest hsr) throws AuthorizationException {\n    init();\n\n    // Check if the specified queue acl is valid.\n    QueueACL queueACL;\n    try {\n      queueACL \u003d QueueACL.valueOf(queueAclType);\n    } catch (IllegalArgumentException e) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Specified queueAclType\u003d\" + queueAclType\n              + \" is not a valid type, valid queue acl types\u003d{\"\n              + \"SUBMIT_APPLICATIONS/ADMINISTER_QUEUE}\").build();\n    }\n\n    // For the user who invokes this REST call, he/she should have admin access\n    // to the queue. Otherwise we will reject the call.\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI !\u003d null \u0026\u0026 !this.rm.getResourceScheduler().checkAccess(\n        callerUGI, QueueACL.ADMINISTER_QUEUE, queue)) {\n      return Response.status(Status.FORBIDDEN).entity(\n          \"User\u003d\" + callerUGI.getUserName() + \" doesn\u0027t haven access to queue\u003d\"\n              + queue + \" so it cannot check ACLs for other users.\")\n          .build();\n    }\n\n    // Create UGI for the to-be-checked user.\n    UserGroupInformation user \u003d UserGroupInformation.createRemoteUser(username);\n    if (user \u003d\u003d null) {\n      return Response.status(Status.FORBIDDEN).entity(\n          \"Failed to retrieve UserGroupInformation for user\u003d\" + username)\n          .build();\n    }\n\n    if (!this.rm.getResourceScheduler().checkAccess(user, queueACL, queue)) {\n      return Response.status(Status.FORBIDDEN).entity(\n          \"User\u003d\" + username + \" doesn\u0027t have access to queue\u003d\" + queue\n              + \" with acl-type\u003d\" + queueAclType).build();\n    }\n\n    return Response.status(Status.OK).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}