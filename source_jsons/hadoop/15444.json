{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XMLUtils.java",
  "functionName": "unmangleXmlString",
  "functionId": "unmangleXmlString___str-String__decodeEntityRefs-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/XMLUtils.java",
  "functionStartLine": 173,
  "functionEndLine": 238,
  "numCommitsSeen": 12,
  "timeTaken": 1981,
  "changeHistory": [
    "c7f81dad30c391822eed7273278cf5885fa59264",
    "7e2d98da4080d40f3f772c87ef6619628c90a922"
  ],
  "changeHistoryShort": {
    "c7f81dad30c391822eed7273278cf5885fa59264": "Ymultichange(Yparameterchange,Ybodychange)",
    "7e2d98da4080d40f3f772c87ef6619628c90a922": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7f81dad30c391822eed7273278cf5885fa59264": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7309. XMLUtils.mangleXmlString doesn\u0027t seem to handle less than sign. (Colin Patrick McCabe via raviprak)\n",
      "commitDate": "31/10/14 11:22 AM",
      "commitName": "c7f81dad30c391822eed7273278cf5885fa59264",
      "commitAuthor": "Ravi Prakash",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7309. XMLUtils.mangleXmlString doesn\u0027t seem to handle less than sign. (Colin Patrick McCabe via raviprak)\n",
          "commitDate": "31/10/14 11:22 AM",
          "commitName": "c7f81dad30c391822eed7273278cf5885fa59264",
          "commitAuthor": "Ravi Prakash",
          "commitDateOld": "24/03/14 4:32 PM",
          "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 220.78,
          "commitsBetweenForRepo": 1786,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,66 @@\n-  public static String unmangleXmlString(String str)\n+  public static String unmangleXmlString(String str, boolean decodeEntityRefs)\n         throws UnmanglingError {\n     int slashPosition \u003d -1;\n     String escapedCp \u003d \"\";\n     StringBuilder bld \u003d new StringBuilder();\n+    StringBuilder entityRef \u003d null;\n     for (int i \u003d 0; i \u003c str.length(); i++) {\n       char ch \u003d str.charAt(i);\n-      if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n+      if (entityRef !\u003d null) {\n+        entityRef.append(ch);\n+        if (ch \u003d\u003d \u0027;\u0027) {\n+          String e \u003d entityRef.toString();\n+          if (e.equals(\"\u0026quot;\")) {\n+            bld.append(\"\\\"\");\n+          } else if (e.equals(\"\u0026apos;\")) {\n+            bld.append(\"\\\u0027\");\n+          } else if (e.equals(\"\u0026amp;\")) {\n+            bld.append(\"\u0026\");\n+          } else if (e.equals(\"\u0026lt;\")) {\n+            bld.append(\"\u003c\");\n+          } else if (e.equals(\"\u0026gt;\")) {\n+            bld.append(\"\u003e\");\n+          } else {\n+            throw new UnmanglingError(\"Unknown entity ref \" + e);\n+          }\n+          entityRef \u003d null;\n+        }\n+      } else  if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n         escapedCp +\u003d ch;\n         ++slashPosition;\n       } else if (slashPosition \u003d\u003d NUM_SLASH_POSITIONS) {\n         if (ch !\u003d \u0027;\u0027) {\n           throw new UnmanglingError(\"unterminated code point escape: \" +\n               \"expected semicolon at end.\");\n         }\n         try {\n           bld.appendCodePoint(Integer.parseInt(escapedCp, 16));\n         } catch (NumberFormatException e) {\n           throw new UnmanglingError(\"error parsing unmangling escape code\", e);\n         }\n         escapedCp \u003d \"\";\n         slashPosition \u003d -1;\n       } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n         slashPosition \u003d 0;\n       } else {\n-        bld.append(ch);\n+        boolean startingEntityRef \u003d false;\n+        if (decodeEntityRefs) {\n+          startingEntityRef \u003d (ch \u003d\u003d \u0027\u0026\u0027);\n+        }\n+        if (startingEntityRef) {\n+          entityRef \u003d new StringBuilder();\n+          entityRef.append(\"\u0026\");\n+        } else {\n+          bld.append(ch);\n+        }\n       }\n     }\n-    if (slashPosition !\u003d -1) {\n+    if (entityRef !\u003d null) {\n+      throw new UnmanglingError(\"unterminated entity ref starting with \" +\n+          entityRef.toString());\n+    } else if (slashPosition !\u003d -1) {\n       throw new UnmanglingError(\"unterminated code point escape: string \" +\n           \"broke off in the middle\");\n     }\n     return bld.toString();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String unmangleXmlString(String str, boolean decodeEntityRefs)\n        throws UnmanglingError {\n    int slashPosition \u003d -1;\n    String escapedCp \u003d \"\";\n    StringBuilder bld \u003d new StringBuilder();\n    StringBuilder entityRef \u003d null;\n    for (int i \u003d 0; i \u003c str.length(); i++) {\n      char ch \u003d str.charAt(i);\n      if (entityRef !\u003d null) {\n        entityRef.append(ch);\n        if (ch \u003d\u003d \u0027;\u0027) {\n          String e \u003d entityRef.toString();\n          if (e.equals(\"\u0026quot;\")) {\n            bld.append(\"\\\"\");\n          } else if (e.equals(\"\u0026apos;\")) {\n            bld.append(\"\\\u0027\");\n          } else if (e.equals(\"\u0026amp;\")) {\n            bld.append(\"\u0026\");\n          } else if (e.equals(\"\u0026lt;\")) {\n            bld.append(\"\u003c\");\n          } else if (e.equals(\"\u0026gt;\")) {\n            bld.append(\"\u003e\");\n          } else {\n            throw new UnmanglingError(\"Unknown entity ref \" + e);\n          }\n          entityRef \u003d null;\n        }\n      } else  if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n        escapedCp +\u003d ch;\n        ++slashPosition;\n      } else if (slashPosition \u003d\u003d NUM_SLASH_POSITIONS) {\n        if (ch !\u003d \u0027;\u0027) {\n          throw new UnmanglingError(\"unterminated code point escape: \" +\n              \"expected semicolon at end.\");\n        }\n        try {\n          bld.appendCodePoint(Integer.parseInt(escapedCp, 16));\n        } catch (NumberFormatException e) {\n          throw new UnmanglingError(\"error parsing unmangling escape code\", e);\n        }\n        escapedCp \u003d \"\";\n        slashPosition \u003d -1;\n      } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n        slashPosition \u003d 0;\n      } else {\n        boolean startingEntityRef \u003d false;\n        if (decodeEntityRefs) {\n          startingEntityRef \u003d (ch \u003d\u003d \u0027\u0026\u0027);\n        }\n        if (startingEntityRef) {\n          entityRef \u003d new StringBuilder();\n          entityRef.append(\"\u0026\");\n        } else {\n          bld.append(ch);\n        }\n      }\n    }\n    if (entityRef !\u003d null) {\n      throw new UnmanglingError(\"unterminated entity ref starting with \" +\n          entityRef.toString());\n    } else if (slashPosition !\u003d -1) {\n      throw new UnmanglingError(\"unterminated code point escape: string \" +\n          \"broke off in the middle\");\n    }\n    return bld.toString();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/XMLUtils.java",
          "extendedDetails": {
            "oldValue": "[str-String]",
            "newValue": "[str-String, decodeEntityRefs-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7309. XMLUtils.mangleXmlString doesn\u0027t seem to handle less than sign. (Colin Patrick McCabe via raviprak)\n",
          "commitDate": "31/10/14 11:22 AM",
          "commitName": "c7f81dad30c391822eed7273278cf5885fa59264",
          "commitAuthor": "Ravi Prakash",
          "commitDateOld": "24/03/14 4:32 PM",
          "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 220.78,
          "commitsBetweenForRepo": 1786,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,66 @@\n-  public static String unmangleXmlString(String str)\n+  public static String unmangleXmlString(String str, boolean decodeEntityRefs)\n         throws UnmanglingError {\n     int slashPosition \u003d -1;\n     String escapedCp \u003d \"\";\n     StringBuilder bld \u003d new StringBuilder();\n+    StringBuilder entityRef \u003d null;\n     for (int i \u003d 0; i \u003c str.length(); i++) {\n       char ch \u003d str.charAt(i);\n-      if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n+      if (entityRef !\u003d null) {\n+        entityRef.append(ch);\n+        if (ch \u003d\u003d \u0027;\u0027) {\n+          String e \u003d entityRef.toString();\n+          if (e.equals(\"\u0026quot;\")) {\n+            bld.append(\"\\\"\");\n+          } else if (e.equals(\"\u0026apos;\")) {\n+            bld.append(\"\\\u0027\");\n+          } else if (e.equals(\"\u0026amp;\")) {\n+            bld.append(\"\u0026\");\n+          } else if (e.equals(\"\u0026lt;\")) {\n+            bld.append(\"\u003c\");\n+          } else if (e.equals(\"\u0026gt;\")) {\n+            bld.append(\"\u003e\");\n+          } else {\n+            throw new UnmanglingError(\"Unknown entity ref \" + e);\n+          }\n+          entityRef \u003d null;\n+        }\n+      } else  if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n         escapedCp +\u003d ch;\n         ++slashPosition;\n       } else if (slashPosition \u003d\u003d NUM_SLASH_POSITIONS) {\n         if (ch !\u003d \u0027;\u0027) {\n           throw new UnmanglingError(\"unterminated code point escape: \" +\n               \"expected semicolon at end.\");\n         }\n         try {\n           bld.appendCodePoint(Integer.parseInt(escapedCp, 16));\n         } catch (NumberFormatException e) {\n           throw new UnmanglingError(\"error parsing unmangling escape code\", e);\n         }\n         escapedCp \u003d \"\";\n         slashPosition \u003d -1;\n       } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n         slashPosition \u003d 0;\n       } else {\n-        bld.append(ch);\n+        boolean startingEntityRef \u003d false;\n+        if (decodeEntityRefs) {\n+          startingEntityRef \u003d (ch \u003d\u003d \u0027\u0026\u0027);\n+        }\n+        if (startingEntityRef) {\n+          entityRef \u003d new StringBuilder();\n+          entityRef.append(\"\u0026\");\n+        } else {\n+          bld.append(ch);\n+        }\n       }\n     }\n-    if (slashPosition !\u003d -1) {\n+    if (entityRef !\u003d null) {\n+      throw new UnmanglingError(\"unterminated entity ref starting with \" +\n+          entityRef.toString());\n+    } else if (slashPosition !\u003d -1) {\n       throw new UnmanglingError(\"unterminated code point escape: string \" +\n           \"broke off in the middle\");\n     }\n     return bld.toString();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String unmangleXmlString(String str, boolean decodeEntityRefs)\n        throws UnmanglingError {\n    int slashPosition \u003d -1;\n    String escapedCp \u003d \"\";\n    StringBuilder bld \u003d new StringBuilder();\n    StringBuilder entityRef \u003d null;\n    for (int i \u003d 0; i \u003c str.length(); i++) {\n      char ch \u003d str.charAt(i);\n      if (entityRef !\u003d null) {\n        entityRef.append(ch);\n        if (ch \u003d\u003d \u0027;\u0027) {\n          String e \u003d entityRef.toString();\n          if (e.equals(\"\u0026quot;\")) {\n            bld.append(\"\\\"\");\n          } else if (e.equals(\"\u0026apos;\")) {\n            bld.append(\"\\\u0027\");\n          } else if (e.equals(\"\u0026amp;\")) {\n            bld.append(\"\u0026\");\n          } else if (e.equals(\"\u0026lt;\")) {\n            bld.append(\"\u003c\");\n          } else if (e.equals(\"\u0026gt;\")) {\n            bld.append(\"\u003e\");\n          } else {\n            throw new UnmanglingError(\"Unknown entity ref \" + e);\n          }\n          entityRef \u003d null;\n        }\n      } else  if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n        escapedCp +\u003d ch;\n        ++slashPosition;\n      } else if (slashPosition \u003d\u003d NUM_SLASH_POSITIONS) {\n        if (ch !\u003d \u0027;\u0027) {\n          throw new UnmanglingError(\"unterminated code point escape: \" +\n              \"expected semicolon at end.\");\n        }\n        try {\n          bld.appendCodePoint(Integer.parseInt(escapedCp, 16));\n        } catch (NumberFormatException e) {\n          throw new UnmanglingError(\"error parsing unmangling escape code\", e);\n        }\n        escapedCp \u003d \"\";\n        slashPosition \u003d -1;\n      } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n        slashPosition \u003d 0;\n      } else {\n        boolean startingEntityRef \u003d false;\n        if (decodeEntityRefs) {\n          startingEntityRef \u003d (ch \u003d\u003d \u0027\u0026\u0027);\n        }\n        if (startingEntityRef) {\n          entityRef \u003d new StringBuilder();\n          entityRef.append(\"\u0026\");\n        } else {\n          bld.append(ch);\n        }\n      }\n    }\n    if (entityRef !\u003d null) {\n      throw new UnmanglingError(\"unterminated entity ref starting with \" +\n          entityRef.toString());\n    } else if (slashPosition !\u003d -1) {\n      throw new UnmanglingError(\"unterminated code point escape: string \" +\n          \"broke off in the middle\");\n    }\n    return bld.toString();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/XMLUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "7e2d98da4080d40f3f772c87ef6619628c90a922": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4235. When outputting XML, OfflineEditsViewer can\u0027t handle some edits containing non-ASCII strings. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449984 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 4:44 PM",
      "commitName": "7e2d98da4080d40f3f772c87ef6619628c90a922",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,34 @@\n+  public static String unmangleXmlString(String str)\n+        throws UnmanglingError {\n+    int slashPosition \u003d -1;\n+    String escapedCp \u003d \"\";\n+    StringBuilder bld \u003d new StringBuilder();\n+    for (int i \u003d 0; i \u003c str.length(); i++) {\n+      char ch \u003d str.charAt(i);\n+      if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n+        escapedCp +\u003d ch;\n+        ++slashPosition;\n+      } else if (slashPosition \u003d\u003d NUM_SLASH_POSITIONS) {\n+        if (ch !\u003d \u0027;\u0027) {\n+          throw new UnmanglingError(\"unterminated code point escape: \" +\n+              \"expected semicolon at end.\");\n+        }\n+        try {\n+          bld.appendCodePoint(Integer.parseInt(escapedCp, 16));\n+        } catch (NumberFormatException e) {\n+          throw new UnmanglingError(\"error parsing unmangling escape code\", e);\n+        }\n+        escapedCp \u003d \"\";\n+        slashPosition \u003d -1;\n+      } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n+        slashPosition \u003d 0;\n+      } else {\n+        bld.append(ch);\n+      }\n+    }\n+    if (slashPosition !\u003d -1) {\n+      throw new UnmanglingError(\"unterminated code point escape: string \" +\n+          \"broke off in the middle\");\n+    }\n+    return bld.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String unmangleXmlString(String str)\n        throws UnmanglingError {\n    int slashPosition \u003d -1;\n    String escapedCp \u003d \"\";\n    StringBuilder bld \u003d new StringBuilder();\n    for (int i \u003d 0; i \u003c str.length(); i++) {\n      char ch \u003d str.charAt(i);\n      if ((slashPosition \u003e\u003d 0) \u0026\u0026 (slashPosition \u003c NUM_SLASH_POSITIONS)) {\n        escapedCp +\u003d ch;\n        ++slashPosition;\n      } else if (slashPosition \u003d\u003d NUM_SLASH_POSITIONS) {\n        if (ch !\u003d \u0027;\u0027) {\n          throw new UnmanglingError(\"unterminated code point escape: \" +\n              \"expected semicolon at end.\");\n        }\n        try {\n          bld.appendCodePoint(Integer.parseInt(escapedCp, 16));\n        } catch (NumberFormatException e) {\n          throw new UnmanglingError(\"error parsing unmangling escape code\", e);\n        }\n        escapedCp \u003d \"\";\n        slashPosition \u003d -1;\n      } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n        slashPosition \u003d 0;\n      } else {\n        bld.append(ch);\n      }\n    }\n    if (slashPosition !\u003d -1) {\n      throw new UnmanglingError(\"unterminated code point escape: string \" +\n          \"broke off in the middle\");\n    }\n    return bld.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/XMLUtils.java"
    }
  }
}