{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourcePBImpl.java",
  "functionName": "newDefaultInformation",
  "functionId": "newDefaultInformation___resourceInformation-ResourceInformation__entry-ResourceInformationProto",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
  "functionStartLine": 171,
  "functionEndLine": 203,
  "numCommitsSeen": 29,
  "timeTaken": 3394,
  "changeHistory": [
    "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd"
  ],
  "changeHistoryShort": {
    "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8836. Add tags and attributes in resource definition. Contributed by Weiwei Yang.\n",
      "commitDate": "15/10/18 3:08 AM",
      "commitName": "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "02/08/18 9:59 AM",
      "commitNameOld": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 73.71,
      "commitsBetweenForRepo": 686,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,33 @@\n   private static ResourceInformation newDefaultInformation(\n       ResourceInformation resourceInformation, ResourceInformationProto entry) {\n     ResourceInformation ri \u003d new ResourceInformation();\n     ri.setName(resourceInformation.getName());\n     ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n     ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n     ri.setResourceType(entry.hasType()\n         ? ProtoUtils.convertFromProtoFormat(entry.getType())\n         : ResourceTypes.COUNTABLE);\n     String units \u003d entry.hasUnits() ? entry.getUnits() :\n         ResourceUtils.getDefaultUnit(entry.getKey());\n     long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n     String destUnit \u003d ResourceUtils.getDefaultUnit(entry.getKey());\n     if(!units.equals(destUnit)) {\n       ri.setValue(UnitsConversionUtil.convert(units, destUnit, value));\n       ri.setUnits(destUnit);\n     } else {\n       ri.setUnits(units);\n       ri.setValue(value);\n     }\n+    if (entry.getTagsCount() \u003e 0) {\n+      ri.setTags(new HashSet\u003c\u003e(entry.getTagsList()));\n+    } else {\n+      ri.setTags(ImmutableSet.of());\n+    }\n+    if (entry.getAttributesCount() \u003e 0) {\n+      ri.setAttributes(ProtoUtils\n+          .convertStringStringMapProtoListToMap(entry.getAttributesList()));\n+    } else {\n+      ri.setAttributes(ImmutableMap.of());\n+    }\n     return ri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ResourceInformation newDefaultInformation(\n      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n    ResourceInformation ri \u003d new ResourceInformation();\n    ri.setName(resourceInformation.getName());\n    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n    ri.setResourceType(entry.hasType()\n        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n        : ResourceTypes.COUNTABLE);\n    String units \u003d entry.hasUnits() ? entry.getUnits() :\n        ResourceUtils.getDefaultUnit(entry.getKey());\n    long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n    String destUnit \u003d ResourceUtils.getDefaultUnit(entry.getKey());\n    if(!units.equals(destUnit)) {\n      ri.setValue(UnitsConversionUtil.convert(units, destUnit, value));\n      ri.setUnits(destUnit);\n    } else {\n      ri.setUnits(units);\n      ri.setValue(value);\n    }\n    if (entry.getTagsCount() \u003e 0) {\n      ri.setTags(new HashSet\u003c\u003e(entry.getTagsList()));\n    } else {\n      ri.setTags(ImmutableSet.of());\n    }\n    if (entry.getAttributesCount() \u003e 0) {\n      ri.setAttributes(ProtoUtils\n          .convertStringStringMapProtoListToMap(entry.getAttributesList()));\n    } else {\n      ri.setAttributes(ImmutableMap.of());\n    }\n    return ri;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/07/18 3:35 PM",
      "commitNameOld": "f354f47f9959d8a79baee690858af3e160494c32",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 13.77,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,22 @@\n   private static ResourceInformation newDefaultInformation(\n       ResourceInformation resourceInformation, ResourceInformationProto entry) {\n     ResourceInformation ri \u003d new ResourceInformation();\n     ri.setName(resourceInformation.getName());\n     ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n     ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n     ri.setResourceType(entry.hasType()\n         ? ProtoUtils.convertFromProtoFormat(entry.getType())\n         : ResourceTypes.COUNTABLE);\n-    ri.setUnits(\n-        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n-    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n+    String units \u003d entry.hasUnits() ? entry.getUnits() :\n+        ResourceUtils.getDefaultUnit(entry.getKey());\n+    long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n+    String destUnit \u003d ResourceUtils.getDefaultUnit(entry.getKey());\n+    if(!units.equals(destUnit)) {\n+      ri.setValue(UnitsConversionUtil.convert(units, destUnit, value));\n+      ri.setUnits(destUnit);\n+    } else {\n+      ri.setUnits(units);\n+      ri.setValue(value);\n+    }\n     return ri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ResourceInformation newDefaultInformation(\n      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n    ResourceInformation ri \u003d new ResourceInformation();\n    ri.setName(resourceInformation.getName());\n    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n    ri.setResourceType(entry.hasType()\n        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n        : ResourceTypes.COUNTABLE);\n    String units \u003d entry.hasUnits() ? entry.getUnits() :\n        ResourceUtils.getDefaultUnit(entry.getKey());\n    long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n    String destUnit \u003d ResourceUtils.getDefaultUnit(entry.getKey());\n    if(!units.equals(destUnit)) {\n      ri.setValue(UnitsConversionUtil.convert(units, destUnit, value));\n      ri.setUnits(destUnit);\n    } else {\n      ri.setUnits(units);\n      ri.setValue(value);\n    }\n    return ri;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)\n\nChange-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595\n",
      "commitDate": "09/11/17 2:51 PM",
      "commitName": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)\n\nChange-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595\n",
          "commitDate": "09/11/17 2:51 PM",
          "commitName": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/11/17 1:47 PM",
          "commitNameOld": "1883a0024949f7946264a4d7649b03fd1881567a",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,14 @@\n-  private static ResourceInformation newDefaultInformation(String name,\n-      String unit, long value) {\n+  private static ResourceInformation newDefaultInformation(\n+      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n     ResourceInformation ri \u003d new ResourceInformation();\n-    ri.setName(name);\n-    ri.setValue(value);\n-    ri.setResourceType(ResourceTypes.COUNTABLE);\n-    ri.setUnitsWithoutValidation(unit);\n-    ri.setMinimumAllocation(0);\n-    ri.setMaximumAllocation(Long.MAX_VALUE);\n+    ri.setName(resourceInformation.getName());\n+    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n+    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n+    ri.setResourceType(entry.hasType()\n+        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n+        : ResourceTypes.COUNTABLE);\n+    ri.setUnits(\n+        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n+    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n     return ri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ResourceInformation newDefaultInformation(\n      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n    ResourceInformation ri \u003d new ResourceInformation();\n    ri.setName(resourceInformation.getName());\n    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n    ri.setResourceType(entry.hasType()\n        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n        : ResourceTypes.COUNTABLE);\n    ri.setUnits(\n        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n    return ri;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/LightWeightResource.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
            "oldMethodName": "newDefaultInformation",
            "newMethodName": "newDefaultInformation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)\n\nChange-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595\n",
          "commitDate": "09/11/17 2:51 PM",
          "commitName": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/11/17 1:47 PM",
          "commitNameOld": "1883a0024949f7946264a4d7649b03fd1881567a",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,14 @@\n-  private static ResourceInformation newDefaultInformation(String name,\n-      String unit, long value) {\n+  private static ResourceInformation newDefaultInformation(\n+      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n     ResourceInformation ri \u003d new ResourceInformation();\n-    ri.setName(name);\n-    ri.setValue(value);\n-    ri.setResourceType(ResourceTypes.COUNTABLE);\n-    ri.setUnitsWithoutValidation(unit);\n-    ri.setMinimumAllocation(0);\n-    ri.setMaximumAllocation(Long.MAX_VALUE);\n+    ri.setName(resourceInformation.getName());\n+    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n+    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n+    ri.setResourceType(entry.hasType()\n+        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n+        : ResourceTypes.COUNTABLE);\n+    ri.setUnits(\n+        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n+    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n     return ri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ResourceInformation newDefaultInformation(\n      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n    ResourceInformation ri \u003d new ResourceInformation();\n    ri.setName(resourceInformation.getName());\n    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n    ri.setResourceType(entry.hasType()\n        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n        : ResourceTypes.COUNTABLE);\n    ri.setUnits(\n        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n    return ri;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)\n\nChange-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595\n",
          "commitDate": "09/11/17 2:51 PM",
          "commitName": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/11/17 1:47 PM",
          "commitNameOld": "1883a0024949f7946264a4d7649b03fd1881567a",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,14 @@\n-  private static ResourceInformation newDefaultInformation(String name,\n-      String unit, long value) {\n+  private static ResourceInformation newDefaultInformation(\n+      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n     ResourceInformation ri \u003d new ResourceInformation();\n-    ri.setName(name);\n-    ri.setValue(value);\n-    ri.setResourceType(ResourceTypes.COUNTABLE);\n-    ri.setUnitsWithoutValidation(unit);\n-    ri.setMinimumAllocation(0);\n-    ri.setMaximumAllocation(Long.MAX_VALUE);\n+    ri.setName(resourceInformation.getName());\n+    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n+    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n+    ri.setResourceType(entry.hasType()\n+        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n+        : ResourceTypes.COUNTABLE);\n+    ri.setUnits(\n+        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n+    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n     return ri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ResourceInformation newDefaultInformation(\n      ResourceInformation resourceInformation, ResourceInformationProto entry) {\n    ResourceInformation ri \u003d new ResourceInformation();\n    ri.setName(resourceInformation.getName());\n    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\n    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\n    ri.setResourceType(entry.hasType()\n        ? ProtoUtils.convertFromProtoFormat(entry.getType())\n        : ResourceTypes.COUNTABLE);\n    ri.setUnits(\n        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());\n    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);\n    return ri;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
          "extendedDetails": {
            "oldValue": "[name-String, unit-String, value-long]",
            "newValue": "[resourceInformation-ResourceInformation, entry-ResourceInformationProto]"
          }
        }
      ]
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,11 @@\n+  private static ResourceInformation newDefaultInformation(String name,\n+      String unit, long value) {\n+    ResourceInformation ri \u003d new ResourceInformation();\n+    ri.setName(name);\n+    ri.setValue(value);\n+    ri.setResourceType(ResourceTypes.COUNTABLE);\n+    ri.setUnitsWithoutValidation(unit);\n+    ri.setMinimumAllocation(0);\n+    ri.setMaximumAllocation(Long.MAX_VALUE);\n+    return ri;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ResourceInformation newDefaultInformation(String name,\n      String unit, long value) {\n    ResourceInformation ri \u003d new ResourceInformation();\n    ri.setName(name);\n    ri.setValue(value);\n    ri.setResourceType(ResourceTypes.COUNTABLE);\n    ri.setUnitsWithoutValidation(unit);\n    ri.setMinimumAllocation(0);\n    ri.setMaximumAllocation(Long.MAX_VALUE);\n    return ri;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/LightWeightResource.java"
    }
  }
}