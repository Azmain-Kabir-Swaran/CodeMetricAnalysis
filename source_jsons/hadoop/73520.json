{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "handleConnectionFailure",
  "functionId": "handleConnectionFailure___curRetries-int__ioe-IOException",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 934,
  "functionEndLine": 968,
  "numCommitsSeen": 125,
  "timeTaken": 3475,
  "changeHistory": [
    "eec52e158b7bc14b2d3d53512323ba05e15e09e3",
    "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70"
  ],
  "changeHistoryShort": {
    "eec52e158b7bc14b2d3d53512323ba05e15e09e3": "Ybodychange",
    "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e": "Ybodychange",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eec52e158b7bc14b2d3d53512323ba05e15e09e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6145. Improve log message on fail over. Contributed by Jian He.\n",
      "commitDate": "08/02/17 2:11 AM",
      "commitName": "eec52e158b7bc14b2d3d53512323ba05e15e09e3",
      "commitAuthor": "Junping Du",
      "commitDateOld": "09/09/16 8:39 AM",
      "commitNameOld": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 151.77,
      "commitsBetweenForRepo": 954,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n     private void handleConnectionFailure(int curRetries, IOException ioe\n         ) throws IOException {\n       closeConnection();\n \n       final RetryAction action;\n       try {\n         action \u003d connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);\n       } catch(Exception e) {\n         throw e instanceof IOException? (IOException)e: new IOException(e);\n       }\n       if (action.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n         if (action.reason !\u003d null) {\n-          LOG.warn(\"Failed to connect to server: \" + server + \": \"\n-              + action.reason, ioe);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Failed to connect to server: \" + server + \": \"\n+                    + action.reason, ioe);\n+          }\n         }\n         throw ioe;\n       }\n \n       // Throw the exception if the thread is interrupted\n       if (Thread.currentThread().isInterrupted()) {\n         LOG.warn(\"Interrupted while trying for connection\");\n         throw ioe;\n       }\n \n       try {\n         Thread.sleep(action.delayMillis);\n       } catch (InterruptedException e) {\n         throw (IOException)new InterruptedIOException(\"Interrupted: action\u003d\"\n             + action + \", retry policy\u003d\" + connectionRetryPolicy).initCause(e);\n       }\n       LOG.info(\"Retrying connect to server: \" + server + \". Already tried \"\n           + curRetries + \" time(s); retry policy is \" + connectionRetryPolicy);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleConnectionFailure(int curRetries, IOException ioe\n        ) throws IOException {\n      closeConnection();\n\n      final RetryAction action;\n      try {\n        action \u003d connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);\n      } catch(Exception e) {\n        throw e instanceof IOException? (IOException)e: new IOException(e);\n      }\n      if (action.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n        if (action.reason !\u003d null) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Failed to connect to server: \" + server + \": \"\n                    + action.reason, ioe);\n          }\n        }\n        throw ioe;\n      }\n\n      // Throw the exception if the thread is interrupted\n      if (Thread.currentThread().isInterrupted()) {\n        LOG.warn(\"Interrupted while trying for connection\");\n        throw ioe;\n      }\n\n      try {\n        Thread.sleep(action.delayMillis);\n      } catch (InterruptedException e) {\n        throw (IOException)new InterruptedIOException(\"Interrupted: action\u003d\"\n            + action + \", retry policy\u003d\" + connectionRetryPolicy).initCause(e);\n      }\n      LOG.info(\"Retrying connect to server: \" + server + \". Already tried \"\n          + curRetries + \" time(s); retry policy is \" + connectionRetryPolicy);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6221 RPC Client operations cannot be interrupted (stevel)\n",
      "commitDate": "26/01/15 2:04 PM",
      "commitName": "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/11/14 9:54 PM",
      "commitNameOld": "7dae5b5a880205fd0125c143c44498db79c19392",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 74.67,
      "commitsBetweenForRepo": 450,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,33 @@\n     private void handleConnectionFailure(int curRetries, IOException ioe\n         ) throws IOException {\n       closeConnection();\n \n       final RetryAction action;\n       try {\n         action \u003d connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);\n       } catch(Exception e) {\n         throw e instanceof IOException? (IOException)e: new IOException(e);\n       }\n       if (action.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n         if (action.reason !\u003d null) {\n           LOG.warn(\"Failed to connect to server: \" + server + \": \"\n               + action.reason, ioe);\n         }\n         throw ioe;\n       }\n \n+      // Throw the exception if the thread is interrupted\n+      if (Thread.currentThread().isInterrupted()) {\n+        LOG.warn(\"Interrupted while trying for connection\");\n+        throw ioe;\n+      }\n+\n       try {\n         Thread.sleep(action.delayMillis);\n       } catch (InterruptedException e) {\n         throw (IOException)new InterruptedIOException(\"Interrupted: action\u003d\"\n             + action + \", retry policy\u003d\" + connectionRetryPolicy).initCause(e);\n       }\n       LOG.info(\"Retrying connect to server: \" + server + \". Already tried \"\n           + curRetries + \" time(s); retry policy is \" + connectionRetryPolicy);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleConnectionFailure(int curRetries, IOException ioe\n        ) throws IOException {\n      closeConnection();\n\n      final RetryAction action;\n      try {\n        action \u003d connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);\n      } catch(Exception e) {\n        throw e instanceof IOException? (IOException)e: new IOException(e);\n      }\n      if (action.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n        if (action.reason !\u003d null) {\n          LOG.warn(\"Failed to connect to server: \" + server + \": \"\n              + action.reason, ioe);\n        }\n        throw ioe;\n      }\n\n      // Throw the exception if the thread is interrupted\n      if (Thread.currentThread().isInterrupted()) {\n        LOG.warn(\"Interrupted while trying for connection\");\n        throw ioe;\n      }\n\n      try {\n        Thread.sleep(action.delayMillis);\n      } catch (InterruptedException e) {\n        throw (IOException)new InterruptedIOException(\"Interrupted: action\u003d\"\n            + action + \", retry policy\u003d\" + connectionRetryPolicy).initCause(e);\n      }\n      LOG.info(\"Retrying connect to server: \" + server + \". Already tried \"\n          + curRetries + \" time(s); retry policy is \" + connectionRetryPolicy);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 10:27 PM",
      "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,27 @@\n+    private void handleConnectionFailure(int curRetries, IOException ioe\n+        ) throws IOException {\n+      closeConnection();\n+\n+      final RetryAction action;\n+      try {\n+        action \u003d connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);\n+      } catch(Exception e) {\n+        throw e instanceof IOException? (IOException)e: new IOException(e);\n+      }\n+      if (action.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n+        if (action.reason !\u003d null) {\n+          LOG.warn(\"Failed to connect to server: \" + server + \": \"\n+              + action.reason, ioe);\n+        }\n+        throw ioe;\n+      }\n+\n+      try {\n+        Thread.sleep(action.delayMillis);\n+      } catch (InterruptedException e) {\n+        throw (IOException)new InterruptedIOException(\"Interrupted: action\u003d\"\n+            + action + \", retry policy\u003d\" + connectionRetryPolicy).initCause(e);\n+      }\n+      LOG.info(\"Retrying connect to server: \" + server + \". Already tried \"\n+          + curRetries + \" time(s); retry policy is \" + connectionRetryPolicy);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleConnectionFailure(int curRetries, IOException ioe\n        ) throws IOException {\n      closeConnection();\n\n      final RetryAction action;\n      try {\n        action \u003d connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);\n      } catch(Exception e) {\n        throw e instanceof IOException? (IOException)e: new IOException(e);\n      }\n      if (action.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n        if (action.reason !\u003d null) {\n          LOG.warn(\"Failed to connect to server: \" + server + \": \"\n              + action.reason, ioe);\n        }\n        throw ioe;\n      }\n\n      try {\n        Thread.sleep(action.delayMillis);\n      } catch (InterruptedException e) {\n        throw (IOException)new InterruptedIOException(\"Interrupted: action\u003d\"\n            + action + \", retry policy\u003d\" + connectionRetryPolicy).initCause(e);\n      }\n      LOG.info(\"Retrying connect to server: \" + server + \". Already tried \"\n          + curRetries + \" time(s); retry policy is \" + connectionRetryPolicy);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}