{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AmIpFilter.java",
  "functionName": "isValidUrl",
  "functionId": "isValidUrl___url-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
  "functionStartLine": 214,
  "functionEndLine": 234,
  "numCommitsSeen": 11,
  "timeTaken": 1775,
  "changeHistory": [
    "6b74f5d7fc509c55c331249256eec78b7e53b6ce",
    "9e0cde1469b8ffeb59619c64d6ece86b62424f04"
  ],
  "changeHistoryShort": {
    "6b74f5d7fc509c55c331249256eec78b7e53b6ce": "Ymultichange(Ymodifierchange,Ybodychange)",
    "9e0cde1469b8ffeb59619c64d6ece86b62424f04": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b74f5d7fc509c55c331249256eec78b7e53b6ce": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8197. Fixed AM IP Filter and Webapp proxy to redirect app tracking-URLs correctly when UI is secure. Contributed by Sunil Govindan.\n",
      "commitDate": "31/05/18 4:48 PM",
      "commitName": "6b74f5d7fc509c55c331249256eec78b7e53b6ce",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8197. Fixed AM IP Filter and Webapp proxy to redirect app tracking-URLs correctly when UI is secure. Contributed by Sunil Govindan.\n",
          "commitDate": "31/05/18 4:48 PM",
          "commitName": "6b74f5d7fc509c55c331249256eec78b7e53b6ce",
          "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
          "commitDateOld": "17/04/18 1:08 PM",
          "commitNameOld": "db1bba857a44d13db6df913b20767c2834da29aa",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 44.15,
          "commitsBetweenForRepo": 849,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,21 @@\n-  private boolean isValidUrl(String url) {\n+  public boolean isValidUrl(String url) {\n     boolean isValid \u003d false;\n     try {\n-      HttpURLConnection conn \u003d\n-          (HttpURLConnection) new URL(url).openConnection();\n+      HttpURLConnection conn \u003d (HttpURLConnection) new URL(url)\n+          .openConnection();\n       conn.connect();\n       isValid \u003d conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK;\n+      // If security is enabled, any valid RM which can give 401 Unauthorized is\n+      // good enough to access. Since AM doesn\u0027t have enough credential, auth\n+      // cannot be completed and hence 401 is fine in such case.\n+      if (!isValid \u0026\u0026 UserGroupInformation.isSecurityEnabled()) {\n+        isValid \u003d (conn\n+            .getResponseCode() \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED)\n+            || (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN);\n+        return isValid;\n+      }\n     } catch (Exception e) {\n-      LOG.debug(\"Failed to connect to \" + url + \": \" + e.toString());\n+      LOG.warn(\"Failed to connect to \" + url + \": \" + e.toString());\n     }\n     return isValid;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean isValidUrl(String url) {\n    boolean isValid \u003d false;\n    try {\n      HttpURLConnection conn \u003d (HttpURLConnection) new URL(url)\n          .openConnection();\n      conn.connect();\n      isValid \u003d conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK;\n      // If security is enabled, any valid RM which can give 401 Unauthorized is\n      // good enough to access. Since AM doesn\u0027t have enough credential, auth\n      // cannot be completed and hence 401 is fine in such case.\n      if (!isValid \u0026\u0026 UserGroupInformation.isSecurityEnabled()) {\n        isValid \u003d (conn\n            .getResponseCode() \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED)\n            || (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN);\n        return isValid;\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Failed to connect to \" + url + \": \" + e.toString());\n    }\n    return isValid;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8197. Fixed AM IP Filter and Webapp proxy to redirect app tracking-URLs correctly when UI is secure. Contributed by Sunil Govindan.\n",
          "commitDate": "31/05/18 4:48 PM",
          "commitName": "6b74f5d7fc509c55c331249256eec78b7e53b6ce",
          "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
          "commitDateOld": "17/04/18 1:08 PM",
          "commitNameOld": "db1bba857a44d13db6df913b20767c2834da29aa",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 44.15,
          "commitsBetweenForRepo": 849,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,21 @@\n-  private boolean isValidUrl(String url) {\n+  public boolean isValidUrl(String url) {\n     boolean isValid \u003d false;\n     try {\n-      HttpURLConnection conn \u003d\n-          (HttpURLConnection) new URL(url).openConnection();\n+      HttpURLConnection conn \u003d (HttpURLConnection) new URL(url)\n+          .openConnection();\n       conn.connect();\n       isValid \u003d conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK;\n+      // If security is enabled, any valid RM which can give 401 Unauthorized is\n+      // good enough to access. Since AM doesn\u0027t have enough credential, auth\n+      // cannot be completed and hence 401 is fine in such case.\n+      if (!isValid \u0026\u0026 UserGroupInformation.isSecurityEnabled()) {\n+        isValid \u003d (conn\n+            .getResponseCode() \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED)\n+            || (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN);\n+        return isValid;\n+      }\n     } catch (Exception e) {\n-      LOG.debug(\"Failed to connect to \" + url + \": \" + e.toString());\n+      LOG.warn(\"Failed to connect to \" + url + \": \" + e.toString());\n     }\n     return isValid;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean isValidUrl(String url) {\n    boolean isValid \u003d false;\n    try {\n      HttpURLConnection conn \u003d (HttpURLConnection) new URL(url)\n          .openConnection();\n      conn.connect();\n      isValid \u003d conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK;\n      // If security is enabled, any valid RM which can give 401 Unauthorized is\n      // good enough to access. Since AM doesn\u0027t have enough credential, auth\n      // cannot be completed and hence 401 is fine in such case.\n      if (!isValid \u0026\u0026 UserGroupInformation.isSecurityEnabled()) {\n        isValid \u003d (conn\n            .getResponseCode() \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED)\n            || (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN);\n        return isValid;\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Failed to connect to \" + url + \": \" + e.toString());\n    }\n    return isValid;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e0cde1469b8ffeb59619c64d6ece86b62424f04": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6625. yarn application -list returns a tracking URL for AM that doesn\u0027t work in secured and HA environment. (Yufei Gu)\n",
      "commitDate": "14/07/17 2:10 PM",
      "commitName": "9e0cde1469b8ffeb59619c64d6ece86b62424f04",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,12 @@\n+  private boolean isValidUrl(String url) {\n+    boolean isValid \u003d false;\n+    try {\n+      HttpURLConnection conn \u003d\n+          (HttpURLConnection) new URL(url).openConnection();\n+      conn.connect();\n+      isValid \u003d conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK;\n+    } catch (Exception e) {\n+      LOG.debug(\"Failed to connect to \" + url + \": \" + e.toString());\n+    }\n+    return isValid;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isValidUrl(String url) {\n    boolean isValid \u003d false;\n    try {\n      HttpURLConnection conn \u003d\n          (HttpURLConnection) new URL(url).openConnection();\n      conn.connect();\n      isValid \u003d conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK;\n    } catch (Exception e) {\n      LOG.debug(\"Failed to connect to \" + url + \": \" + e.toString());\n    }\n    return isValid;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java"
    }
  }
}