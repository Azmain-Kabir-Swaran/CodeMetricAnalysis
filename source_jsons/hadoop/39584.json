{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "getEffectiveMinRatioPerResource",
  "functionId": "getEffectiveMinRatioPerResource___configuredMinResources-Resource__numeratorForMinRatio-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 1061,
  "functionEndLine": 1083,
  "numCommitsSeen": 85,
  "timeTaken": 1714,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "aa3f62740f71e6e5b2a424a9f4654c1a4ba1dbe6"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "aa3f62740f71e6e5b2a424a9f4654c1a4ba1dbe6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/12/18 10:45 AM",
      "commitNameOld": "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 31.49,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private Map\u003cString, Float\u003e getEffectiveMinRatioPerResource(\n       Resource configuredMinResources, Resource numeratorForMinRatio) {\n     Map\u003cString, Float\u003e effectiveMinRatioPerResource \u003d new HashMap\u003c\u003e();\n     if (numeratorForMinRatio !\u003d null) {\n-      int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+      int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n       for (int i \u003d 0; i \u003c maxLength; i++) {\n         ResourceInformation nResourceInformation \u003d numeratorForMinRatio\n             .getResourceInformation(i);\n         ResourceInformation dResourceInformation \u003d configuredMinResources\n             .getResourceInformation(i);\n \n         long nValue \u003d nResourceInformation.getValue();\n         long dValue \u003d UnitsConversionUtil.convert(\n             dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n             dResourceInformation.getValue());\n         if (dValue !\u003d 0) {\n           effectiveMinRatioPerResource.put(nResourceInformation.getName(),\n               (float) nValue / dValue);\n         }\n       }\n     }\n     return effectiveMinRatioPerResource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Float\u003e getEffectiveMinRatioPerResource(\n      Resource configuredMinResources, Resource numeratorForMinRatio) {\n    Map\u003cString, Float\u003e effectiveMinRatioPerResource \u003d new HashMap\u003c\u003e();\n    if (numeratorForMinRatio !\u003d null) {\n      int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n      for (int i \u003d 0; i \u003c maxLength; i++) {\n        ResourceInformation nResourceInformation \u003d numeratorForMinRatio\n            .getResourceInformation(i);\n        ResourceInformation dResourceInformation \u003d configuredMinResources\n            .getResourceInformation(i);\n\n        long nValue \u003d nResourceInformation.getValue();\n        long dValue \u003d UnitsConversionUtil.convert(\n            dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n            dResourceInformation.getValue());\n        if (dValue !\u003d 0) {\n          effectiveMinRatioPerResource.put(nResourceInformation.getName(),\n              (float) nValue / dValue);\n        }\n      }\n    }\n    return effectiveMinRatioPerResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "aa3f62740f71e6e5b2a424a9f4654c1a4ba1dbe6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7332. Compute effectiveCapacity per each resource vector. (Sunil G via wangda)\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "aa3f62740f71e6e5b2a424a9f4654c1a4ba1dbe6",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,23 @@\n+  private Map\u003cString, Float\u003e getEffectiveMinRatioPerResource(\n+      Resource configuredMinResources, Resource numeratorForMinRatio) {\n+    Map\u003cString, Float\u003e effectiveMinRatioPerResource \u003d new HashMap\u003c\u003e();\n+    if (numeratorForMinRatio !\u003d null) {\n+      int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+      for (int i \u003d 0; i \u003c maxLength; i++) {\n+        ResourceInformation nResourceInformation \u003d numeratorForMinRatio\n+            .getResourceInformation(i);\n+        ResourceInformation dResourceInformation \u003d configuredMinResources\n+            .getResourceInformation(i);\n+\n+        long nValue \u003d nResourceInformation.getValue();\n+        long dValue \u003d UnitsConversionUtil.convert(\n+            dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n+            dResourceInformation.getValue());\n+        if (dValue !\u003d 0) {\n+          effectiveMinRatioPerResource.put(nResourceInformation.getName(),\n+              (float) nValue / dValue);\n+        }\n+      }\n+    }\n+    return effectiveMinRatioPerResource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Float\u003e getEffectiveMinRatioPerResource(\n      Resource configuredMinResources, Resource numeratorForMinRatio) {\n    Map\u003cString, Float\u003e effectiveMinRatioPerResource \u003d new HashMap\u003c\u003e();\n    if (numeratorForMinRatio !\u003d null) {\n      int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n      for (int i \u003d 0; i \u003c maxLength; i++) {\n        ResourceInformation nResourceInformation \u003d numeratorForMinRatio\n            .getResourceInformation(i);\n        ResourceInformation dResourceInformation \u003d configuredMinResources\n            .getResourceInformation(i);\n\n        long nValue \u003d nResourceInformation.getValue();\n        long dValue \u003d UnitsConversionUtil.convert(\n            dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n            dResourceInformation.getValue());\n        if (dValue !\u003d 0) {\n          effectiveMinRatioPerResource.put(nResourceInformation.getName(),\n              (float) nValue / dValue);\n        }\n      }\n    }\n    return effectiveMinRatioPerResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}