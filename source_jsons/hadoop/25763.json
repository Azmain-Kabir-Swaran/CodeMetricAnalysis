{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerRequestor.java",
  "functionName": "applyRequestLimits",
  "functionId": "applyRequestLimits",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
  "functionStartLine": 243,
  "functionEndLine": 271,
  "numCommitsSeen": 38,
  "timeTaken": 1338,
  "changeHistory": [
    "4228de94028f1e10ca59ce23e963e488fe566909"
  ],
  "changeHistoryShort": {
    "4228de94028f1e10ca59ce23e963e488fe566909": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4228de94028f1e10ca59ce23e963e488fe566909": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.\n",
      "commitDate": "03/03/15 2:02 AM",
      "commitName": "4228de94028f1e10ca59ce23e963e488fe566909",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,29 @@\n+  private void applyRequestLimits() {\n+    Iterator\u003cResourceRequest\u003e iter \u003d requestLimits.values().iterator();\n+    while (iter.hasNext()) {\n+      ResourceRequest reqLimit \u003d iter.next();\n+      int limit \u003d reqLimit.getNumContainers();\n+      Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n+          remoteRequestsTable.get(reqLimit.getPriority());\n+      Map\u003cResource, ResourceRequest\u003e reqMap \u003d (remoteRequests !\u003d null)\n+          ? remoteRequests.get(ResourceRequest.ANY) : null;\n+      ResourceRequest req \u003d (reqMap !\u003d null)\n+          ? reqMap.get(reqLimit.getCapability()) : null;\n+      if (req \u003d\u003d null) {\n+        continue;\n+      }\n+      // update an existing ask or send a new one if updating\n+      if (ask.remove(req) || requestLimitsToUpdate.contains(req)) {\n+        ResourceRequest newReq \u003d req.getNumContainers() \u003e limit\n+            ? reqLimit : req;\n+        ask.add(newReq);\n+        LOG.info(\"Applying ask limit of \" + newReq.getNumContainers()\n+            + \" for priority:\" + reqLimit.getPriority()\n+            + \" and capability:\" + reqLimit.getCapability());\n+      }\n+      if (limit \u003d\u003d Integer.MAX_VALUE) {\n+        iter.remove();\n+      }\n+    }\n+    requestLimitsToUpdate.clear();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyRequestLimits() {\n    Iterator\u003cResourceRequest\u003e iter \u003d requestLimits.values().iterator();\n    while (iter.hasNext()) {\n      ResourceRequest reqLimit \u003d iter.next();\n      int limit \u003d reqLimit.getNumContainers();\n      Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n          remoteRequestsTable.get(reqLimit.getPriority());\n      Map\u003cResource, ResourceRequest\u003e reqMap \u003d (remoteRequests !\u003d null)\n          ? remoteRequests.get(ResourceRequest.ANY) : null;\n      ResourceRequest req \u003d (reqMap !\u003d null)\n          ? reqMap.get(reqLimit.getCapability()) : null;\n      if (req \u003d\u003d null) {\n        continue;\n      }\n      // update an existing ask or send a new one if updating\n      if (ask.remove(req) || requestLimitsToUpdate.contains(req)) {\n        ResourceRequest newReq \u003d req.getNumContainers() \u003e limit\n            ? reqLimit : req;\n        ask.add(newReq);\n        LOG.info(\"Applying ask limit of \" + newReq.getNumContainers()\n            + \" for priority:\" + reqLimit.getPriority()\n            + \" and capability:\" + reqLimit.getCapability());\n      }\n      if (limit \u003d\u003d Integer.MAX_VALUE) {\n        iter.remove();\n      }\n    }\n    requestLimitsToUpdate.clear();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java"
    }
  }
}