{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProtobufRpcEngine.java",
  "functionName": "constructRpcRequestHeader",
  "functionId": "constructRpcRequestHeader___method-Method",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
  "functionStartLine": 153,
  "functionEndLine": 173,
  "numCommitsSeen": 86,
  "timeTaken": 2020,
  "changeHistory": [
    "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
    "aa4fe26a01d2ca881cb458d49032ce419351bed1",
    "65200998c01b17e017d1814e8b1f4d82ac334a23",
    "55d3dc50d16cd5b94f542f74e5329de4c30a8655"
  ],
  "changeHistoryShort": {
    "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
    "aa4fe26a01d2ca881cb458d49032ce419351bed1": "Ymultichange(Yreturntypechange,Ybodychange)",
    "65200998c01b17e017d1814e8b1f4d82ac334a23": "Ybodychange",
    "55d3dc50d16cd5b94f542f74e5329de4c30a8655": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-9163 The rpc msg in ProtobufRpcEngine.proto should be moved out to avoid an extra copy (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452581 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/13 2:55 PM",
      "commitName": "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-9163 The rpc msg in ProtobufRpcEngine.proto should be moved out to avoid an extra copy (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452581 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/13 2:55 PM",
          "commitName": "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "14/02/13 6:26 PM",
          "commitNameOld": "461e614a3aa11372d18537028aa217a9d79527af",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 17.85,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,21 @@\n-    private RequestProto constructRpcRequest(Method method,\n-        Object[] params) throws ServiceException {\n-      RequestProto rpcRequest;\n-      RequestProto.Builder builder \u003d RequestProto\n+    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n+      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n+     \n \n-      if (params.length !\u003d 2) { // RpcController + Message\n-        throw new ServiceException(\"Too many parameters for request. Method: [\"\n-            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n-            + params.length);\n-      }\n-      if (params[1] \u003d\u003d null) {\n-        throw new ServiceException(\"null param while calling Method: [\"\n-            + method.getName() + \"]\");\n-      }\n-\n-      Message param \u003d (Message) params[1];\n-      builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n-      rpcRequest \u003d builder.build();\n-      return rpcRequest;\n+      return builder.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n     \n\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      return builder.build();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "constructRpcRequest",
            "newValue": "constructRpcRequestHeader"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9163 The rpc msg in ProtobufRpcEngine.proto should be moved out to avoid an extra copy (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452581 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/13 2:55 PM",
          "commitName": "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "14/02/13 6:26 PM",
          "commitNameOld": "461e614a3aa11372d18537028aa217a9d79527af",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 17.85,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,21 @@\n-    private RequestProto constructRpcRequest(Method method,\n-        Object[] params) throws ServiceException {\n-      RequestProto rpcRequest;\n-      RequestProto.Builder builder \u003d RequestProto\n+    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n+      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n+     \n \n-      if (params.length !\u003d 2) { // RpcController + Message\n-        throw new ServiceException(\"Too many parameters for request. Method: [\"\n-            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n-            + params.length);\n-      }\n-      if (params[1] \u003d\u003d null) {\n-        throw new ServiceException(\"null param while calling Method: [\"\n-            + method.getName() + \"]\");\n-      }\n-\n-      Message param \u003d (Message) params[1];\n-      builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n-      rpcRequest \u003d builder.build();\n-      return rpcRequest;\n+      return builder.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n     \n\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      return builder.build();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "[method-Method, params-Object[]]",
            "newValue": "[method-Method]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-9163 The rpc msg in ProtobufRpcEngine.proto should be moved out to avoid an extra copy (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452581 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/13 2:55 PM",
          "commitName": "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "14/02/13 6:26 PM",
          "commitNameOld": "461e614a3aa11372d18537028aa217a9d79527af",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 17.85,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,21 @@\n-    private RequestProto constructRpcRequest(Method method,\n-        Object[] params) throws ServiceException {\n-      RequestProto rpcRequest;\n-      RequestProto.Builder builder \u003d RequestProto\n+    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n+      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n+     \n \n-      if (params.length !\u003d 2) { // RpcController + Message\n-        throw new ServiceException(\"Too many parameters for request. Method: [\"\n-            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n-            + params.length);\n-      }\n-      if (params[1] \u003d\u003d null) {\n-        throw new ServiceException(\"null param while calling Method: [\"\n-            + method.getName() + \"]\");\n-      }\n-\n-      Message param \u003d (Message) params[1];\n-      builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n-      rpcRequest \u003d builder.build();\n-      return rpcRequest;\n+      return builder.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n     \n\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      return builder.build();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "RequestProto",
            "newValue": "RequestHeaderProto"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-9163 The rpc msg in ProtobufRpcEngine.proto should be moved out to avoid an extra copy (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452581 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/13 2:55 PM",
          "commitName": "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "14/02/13 6:26 PM",
          "commitNameOld": "461e614a3aa11372d18537028aa217a9d79527af",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 17.85,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,21 @@\n-    private RequestProto constructRpcRequest(Method method,\n-        Object[] params) throws ServiceException {\n-      RequestProto rpcRequest;\n-      RequestProto.Builder builder \u003d RequestProto\n+    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n+      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n+     \n \n-      if (params.length !\u003d 2) { // RpcController + Message\n-        throw new ServiceException(\"Too many parameters for request. Method: [\"\n-            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n-            + params.length);\n-      }\n-      if (params[1] \u003d\u003d null) {\n-        throw new ServiceException(\"null param while calling Method: [\"\n-            + method.getName() + \"]\");\n-      }\n-\n-      Message param \u003d (Message) params[1];\n-      builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n-      rpcRequest \u003d builder.build();\n-      return rpcRequest;\n+      return builder.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n     \n\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      return builder.build();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "[ServiceException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9163 The rpc msg in ProtobufRpcEngine.proto should be moved out to avoid an extra copy (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452581 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/13 2:55 PM",
          "commitName": "ead90cc1a8cd7a0f3ae28d9860ff2e3c108f1172",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "14/02/13 6:26 PM",
          "commitNameOld": "461e614a3aa11372d18537028aa217a9d79527af",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 17.85,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,21 @@\n-    private RequestProto constructRpcRequest(Method method,\n-        Object[] params) throws ServiceException {\n-      RequestProto rpcRequest;\n-      RequestProto.Builder builder \u003d RequestProto\n+    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n+      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n+     \n \n-      if (params.length !\u003d 2) { // RpcController + Message\n-        throw new ServiceException(\"Too many parameters for request. Method: [\"\n-            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n-            + params.length);\n-      }\n-      if (params[1] \u003d\u003d null) {\n-        throw new ServiceException(\"null param while calling Method: [\"\n-            + method.getName() + \"]\");\n-      }\n-\n-      Message param \u003d (Message) params[1];\n-      builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n-      rpcRequest \u003d builder.build();\n-      return rpcRequest;\n+      return builder.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestHeaderProto constructRpcRequestHeader(Method method) {\n      RequestHeaderProto.Builder builder \u003d RequestHeaderProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n     \n\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      return builder.build();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {}
        }
      ]
    },
    "aa4fe26a01d2ca881cb458d49032ce419351bed1": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/12 2:16 PM",
      "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/12/12 2:16 PM",
          "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "24/08/12 6:03 PM",
          "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 114.88,
          "commitsBetweenForRepo": 607,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-    private HadoopRpcRequestProto constructRpcRequest(Method method,\n+    private RequestProto constructRpcRequest(Method method,\n         Object[] params) throws ServiceException {\n-      HadoopRpcRequestProto rpcRequest;\n-      HadoopRpcRequestProto.Builder builder \u003d HadoopRpcRequestProto\n+      RequestProto rpcRequest;\n+      RequestProto.Builder builder \u003d RequestProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n \n       if (params.length !\u003d 2) { // RpcController + Message\n         throw new ServiceException(\"Too many parameters for request. Method: [\"\n             + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n             + params.length);\n       }\n       if (params[1] \u003d\u003d null) {\n         throw new ServiceException(\"null param while calling Method: [\"\n             + method.getName() + \"]\");\n       }\n \n       Message param \u003d (Message) params[1];\n       builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n       rpcRequest \u003d builder.build();\n       return rpcRequest;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestProto constructRpcRequest(Method method,\n        Object[] params) throws ServiceException {\n      RequestProto rpcRequest;\n      RequestProto.Builder builder \u003d RequestProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n\n      if (params.length !\u003d 2) { // RpcController + Message\n        throw new ServiceException(\"Too many parameters for request. Method: [\"\n            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n            + params.length);\n      }\n      if (params[1] \u003d\u003d null) {\n        throw new ServiceException(\"null param while calling Method: [\"\n            + method.getName() + \"]\");\n      }\n\n      Message param \u003d (Message) params[1];\n      builder.setRequest(param.toByteString());\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      rpcRequest \u003d builder.build();\n      return rpcRequest;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "HadoopRpcRequestProto",
            "newValue": "RequestProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9140 Cleanup rpc PB protos (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/12/12 2:16 PM",
          "commitName": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "24/08/12 6:03 PM",
          "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 114.88,
          "commitsBetweenForRepo": 607,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-    private HadoopRpcRequestProto constructRpcRequest(Method method,\n+    private RequestProto constructRpcRequest(Method method,\n         Object[] params) throws ServiceException {\n-      HadoopRpcRequestProto rpcRequest;\n-      HadoopRpcRequestProto.Builder builder \u003d HadoopRpcRequestProto\n+      RequestProto rpcRequest;\n+      RequestProto.Builder builder \u003d RequestProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n \n       if (params.length !\u003d 2) { // RpcController + Message\n         throw new ServiceException(\"Too many parameters for request. Method: [\"\n             + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n             + params.length);\n       }\n       if (params[1] \u003d\u003d null) {\n         throw new ServiceException(\"null param while calling Method: [\"\n             + method.getName() + \"]\");\n       }\n \n       Message param \u003d (Message) params[1];\n       builder.setRequest(param.toByteString());\n       // For protobuf, {@code protocol} used when creating client side proxy is\n       // the interface extending BlockingInterface, which has the annotations \n       // such as ProtocolName etc.\n       //\n       // Using Method.getDeclaringClass(), as in WritableEngine to get at\n       // the protocol interface will return BlockingInterface, from where \n       // the annotation ProtocolName and Version cannot be\n       // obtained.\n       //\n       // Hence we simply use the protocol class used to create the proxy.\n       // For PB this may limit the use of mixins on client side.\n       builder.setDeclaringClassProtocolName(protocolName);\n       builder.setClientProtocolVersion(clientProtocolVersion);\n       rpcRequest \u003d builder.build();\n       return rpcRequest;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private RequestProto constructRpcRequest(Method method,\n        Object[] params) throws ServiceException {\n      RequestProto rpcRequest;\n      RequestProto.Builder builder \u003d RequestProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n\n      if (params.length !\u003d 2) { // RpcController + Message\n        throw new ServiceException(\"Too many parameters for request. Method: [\"\n            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n            + params.length);\n      }\n      if (params[1] \u003d\u003d null) {\n        throw new ServiceException(\"null param while calling Method: [\"\n            + method.getName() + \"]\");\n      }\n\n      Message param \u003d (Message) params[1];\n      builder.setRequest(param.toByteString());\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      rpcRequest \u003d builder.build();\n      return rpcRequest;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {}
        }
      ]
    },
    "65200998c01b17e017d1814e8b1f4d82ac334a23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/11 12:44 PM",
      "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "04/11/11 10:06 PM",
      "commitNameOld": "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 29.65,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,35 @@\n     private HadoopRpcRequestProto constructRpcRequest(Method method,\n         Object[] params) throws ServiceException {\n       HadoopRpcRequestProto rpcRequest;\n       HadoopRpcRequestProto.Builder builder \u003d HadoopRpcRequestProto\n           .newBuilder();\n       builder.setMethodName(method.getName());\n \n       if (params.length !\u003d 2) { // RpcController + Message\n         throw new ServiceException(\"Too many parameters for request. Method: [\"\n             + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n             + params.length);\n       }\n       if (params[1] \u003d\u003d null) {\n         throw new ServiceException(\"null param while calling Method: [\"\n             + method.getName() + \"]\");\n       }\n \n       Message param \u003d (Message) params[1];\n       builder.setRequest(param.toByteString());\n+      // For protobuf, {@code protocol} used when creating client side proxy is\n+      // the interface extending BlockingInterface, which has the annotations \n+      // such as ProtocolName etc.\n+      //\n+      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n+      // the protocol interface will return BlockingInterface, from where \n+      // the annotation ProtocolName and Version cannot be\n+      // obtained.\n+      //\n+      // Hence we simply use the protocol class used to create the proxy.\n+      // For PB this may limit the use of mixins on client side.\n+      builder.setDeclaringClassProtocolName(protocolName);\n+      builder.setClientProtocolVersion(clientProtocolVersion);\n       rpcRequest \u003d builder.build();\n       return rpcRequest;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private HadoopRpcRequestProto constructRpcRequest(Method method,\n        Object[] params) throws ServiceException {\n      HadoopRpcRequestProto rpcRequest;\n      HadoopRpcRequestProto.Builder builder \u003d HadoopRpcRequestProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n\n      if (params.length !\u003d 2) { // RpcController + Message\n        throw new ServiceException(\"Too many parameters for request. Method: [\"\n            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n            + params.length);\n      }\n      if (params[1] \u003d\u003d null) {\n        throw new ServiceException(\"null param while calling Method: [\"\n            + method.getName() + \"]\");\n      }\n\n      Message param \u003d (Message) params[1];\n      builder.setRequest(param.toByteString());\n      // For protobuf, {@code protocol} used when creating client side proxy is\n      // the interface extending BlockingInterface, which has the annotations \n      // such as ProtocolName etc.\n      //\n      // Using Method.getDeclaringClass(), as in WritableEngine to get at\n      // the protocol interface will return BlockingInterface, from where \n      // the annotation ProtocolName and Version cannot be\n      // obtained.\n      //\n      // Hence we simply use the protocol class used to create the proxy.\n      // For PB this may limit the use of mixins on client side.\n      builder.setDeclaringClassProtocolName(protocolName);\n      builder.setClientProtocolVersion(clientProtocolVersion);\n      rpcRequest \u003d builder.build();\n      return rpcRequest;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
      "extendedDetails": {}
    },
    "55d3dc50d16cd5b94f542f74e5329de4c30a8655": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7773. Add support for protocol buffer based RPC engine. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/11 2:55 PM",
      "commitName": "55d3dc50d16cd5b94f542f74e5329de4c30a8655",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,22 @@\n+    private HadoopRpcRequestProto constructRpcRequest(Method method,\n+        Object[] params) throws ServiceException {\n+      HadoopRpcRequestProto rpcRequest;\n+      HadoopRpcRequestProto.Builder builder \u003d HadoopRpcRequestProto\n+          .newBuilder();\n+      builder.setMethodName(method.getName());\n+\n+      if (params.length !\u003d 2) { // RpcController + Message\n+        throw new ServiceException(\"Too many parameters for request. Method: [\"\n+            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n+            + params.length);\n+      }\n+      if (params[1] \u003d\u003d null) {\n+        throw new ServiceException(\"null param while calling Method: [\"\n+            + method.getName() + \"]\");\n+      }\n+\n+      Message param \u003d (Message) params[1];\n+      builder.setRequest(param.toByteString());\n+      rpcRequest \u003d builder.build();\n+      return rpcRequest;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private HadoopRpcRequestProto constructRpcRequest(Method method,\n        Object[] params) throws ServiceException {\n      HadoopRpcRequestProto rpcRequest;\n      HadoopRpcRequestProto.Builder builder \u003d HadoopRpcRequestProto\n          .newBuilder();\n      builder.setMethodName(method.getName());\n\n      if (params.length !\u003d 2) { // RpcController + Message\n        throw new ServiceException(\"Too many parameters for request. Method: [\"\n            + method.getName() + \"]\" + \", Expected: 2, Actual: \"\n            + params.length);\n      }\n      if (params[1] \u003d\u003d null) {\n        throw new ServiceException(\"null param while calling Method: [\"\n            + method.getName() + \"]\");\n      }\n\n      Message param \u003d (Message) params[1];\n      builder.setRequest(param.toByteString());\n      rpcRequest \u003d builder.build();\n      return rpcRequest;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java"
    }
  }
}