{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKConfigurationStore.java",
  "functionName": "initialize",
  "functionId": "initialize___config-Configuration__schedConf-Configuration__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
  "functionStartLine": 75,
  "functionEndLine": 115,
  "numCommitsSeen": 14,
  "timeTaken": 4757,
  "changeHistory": [
    "5ead9c15ca6766769d2dd73e91d050ecdede724c",
    "be901f49628a553cfe6a3942478cb528cce2b266",
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
    "4510970e2f7728d036c750b596985e5ffa357b60",
    "2df73dace06cfd2b3193a14cd455297f8f989617",
    "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634"
  ],
  "changeHistoryShort": {
    "5ead9c15ca6766769d2dd73e91d050ecdede724c": "Ybodychange",
    "be901f49628a553cfe6a3942478cb528cce2b266": "Ybodychange",
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e": "Ybodychange",
    "4510970e2f7728d036c750b596985e5ffa357b60": "Ybodychange",
    "2df73dace06cfd2b3193a14cd455297f8f989617": "Ybodychange",
    "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ead9c15ca6766769d2dd73e91d050ecdede724c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9997. Code cleanup in ZKConfigurationStore. Contributed by Andras Gyori\n",
      "commitDate": "12/03/20 4:29 AM",
      "commitName": "5ead9c15ca6766769d2dd73e91d050ecdede724c",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "10/03/20 8:35 AM",
      "commitNameOld": "61f4cf3055e60e64a95f4599ebceac5a924bba02",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws Exception {\n     this.conf \u003d config;\n+\n+    String znodeParentPath \u003d conf.get(\n+        YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n+        YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n+\n     this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n         YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n-    this.znodeParentPath \u003d\n-        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n-            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n     this.zkManager \u003d\n         rmContext.getResourceManager().createAndStartZKManager(conf);\n     this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n \n     this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n     this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n     this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n     this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n     this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n \n     zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n     zkManager.delete(fencingNodePath);\n \n-    if (!zkManager.exists(logsPath)) {\n-      zkManager.create(logsPath);\n-      zkManager.setData(logsPath,\n-          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n+    if (createNewZkPath(logsPath)) {\n+      setZkData(logsPath, new LinkedList\u003cLogMutation\u003e());\n     }\n \n-    if (!zkManager.exists(confVersionPath)) {\n-      zkManager.create(confVersionPath);\n-      zkManager.setData(confVersionPath, String.valueOf(0), -1);\n+    if (createNewZkPath(confVersionPath)) {\n+      setZkData(confVersionPath, String.valueOf(0));\n     }\n \n-    if (!zkManager.exists(confStorePath)) {\n-      zkManager.create(confStorePath);\n+    if (createNewZkPath(confStorePath)) {\n       HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n       for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n         mapSchedConf.put(entry.getKey(), entry.getValue());\n       }\n-      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n+      setZkData(confStorePath, mapSchedConf);\n       long configVersion \u003d getConfigVersion() + 1L;\n-      zkManager.setData(confVersionPath, String.valueOf(configVersion), -1);\n+      setZkData(confVersionPath, String.valueOf(configVersion));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n\n    String znodeParentPath \u003d conf.get(\n        YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.zkManager \u003d\n        rmContext.getResourceManager().createAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n    this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n    zkManager.delete(fencingNodePath);\n\n    if (createNewZkPath(logsPath)) {\n      setZkData(logsPath, new LinkedList\u003cLogMutation\u003e());\n    }\n\n    if (createNewZkPath(confVersionPath)) {\n      setZkData(confVersionPath, String.valueOf(0));\n    }\n\n    if (createNewZkPath(confStorePath)) {\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      setZkData(confStorePath, mapSchedConf);\n      long configVersion \u003d getConfigVersion() + 1L;\n      setZkData(confVersionPath, String.valueOf(configVersion));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
      "extendedDetails": {}
    },
    "be901f49628a553cfe6a3942478cb528cce2b266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change need to update Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "09/10/19 3:23 AM",
      "commitName": "be901f49628a553cfe6a3942478cb528cce2b266",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 8:45 PM",
      "commitNameOld": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,43 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws Exception {\n     this.conf \u003d config;\n     this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n         YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n     this.znodeParentPath \u003d\n         conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n             YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n     this.zkManager \u003d\n         rmContext.getResourceManager().createAndStartZKManager(conf);\n     this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n \n     this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n     this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n     this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n     this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n+    this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n \n     zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n     zkManager.delete(fencingNodePath);\n \n     if (!zkManager.exists(logsPath)) {\n       zkManager.create(logsPath);\n       zkManager.setData(logsPath,\n           serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n     }\n \n+    if (!zkManager.exists(confVersionPath)) {\n+      zkManager.create(confVersionPath);\n+      zkManager.setData(confVersionPath, String.valueOf(0), -1);\n+    }\n+\n     if (!zkManager.exists(confStorePath)) {\n       zkManager.create(confStorePath);\n       HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n       for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n         mapSchedConf.put(entry.getKey(), entry.getValue());\n       }\n       zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n+      long configVersion \u003d getConfigVersion() + 1L;\n+      zkManager.setData(confVersionPath, String.valueOf(configVersion), -1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.znodeParentPath \u003d\n        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n    this.zkManager \u003d\n        rmContext.getResourceManager().createAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n    this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n    zkManager.delete(fencingNodePath);\n\n    if (!zkManager.exists(logsPath)) {\n      zkManager.create(logsPath);\n      zkManager.setData(logsPath,\n          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n    }\n\n    if (!zkManager.exists(confVersionPath)) {\n      zkManager.create(confVersionPath);\n      zkManager.setData(confVersionPath, String.valueOf(0), -1);\n    }\n\n    if (!zkManager.exists(confStorePath)) {\n      zkManager.create(confStorePath);\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n      long configVersion \u003d getConfigVersion() + 1L;\n      zkManager.setData(confVersionPath, String.valueOf(configVersion), -1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
      "extendedDetails": {}
    },
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-9873. Mutation API Config Change updates Version Number. Contributed by Prabhu Joseph\"\n\nThis reverts commit 4510970e2f7728d036c750b596985e5ffa357b60.\n",
      "commitDate": "04/10/19 8:45 PM",
      "commitName": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 9:19 AM",
      "commitNameOld": "4510970e2f7728d036c750b596985e5ffa357b60",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,35 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws Exception {\n     this.conf \u003d config;\n     this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n         YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n     this.znodeParentPath \u003d\n         conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n             YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n     this.zkManager \u003d\n         rmContext.getResourceManager().createAndStartZKManager(conf);\n     this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n \n     this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n     this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n     this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n     this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n-    this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n \n     zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n     zkManager.delete(fencingNodePath);\n \n     if (!zkManager.exists(logsPath)) {\n       zkManager.create(logsPath);\n       zkManager.setData(logsPath,\n           serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n     }\n \n-    if (!zkManager.exists(confVersionPath)) {\n-      zkManager.create(confVersionPath);\n-      zkManager.setData(confVersionPath,\n-          String.valueOf(System.currentTimeMillis()), -1);\n-    }\n-\n     if (!zkManager.exists(confStorePath)) {\n       zkManager.create(confStorePath);\n       HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n       for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n         mapSchedConf.put(entry.getKey(), entry.getValue());\n       }\n       zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n-      zkManager.setData(confVersionPath,\n-          String.valueOf(System.currentTimeMillis()), -1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.znodeParentPath \u003d\n        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n    this.zkManager \u003d\n        rmContext.getResourceManager().createAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n    zkManager.delete(fencingNodePath);\n\n    if (!zkManager.exists(logsPath)) {\n      zkManager.create(logsPath);\n      zkManager.setData(logsPath,\n          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n    }\n\n    if (!zkManager.exists(confStorePath)) {\n      zkManager.create(confStorePath);\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
      "extendedDetails": {}
    },
    "4510970e2f7728d036c750b596985e5ffa357b60": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change updates Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "04/10/19 9:19 AM",
      "commitName": "4510970e2f7728d036c750b596985e5ffa357b60",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/09/19 8:38 PM",
      "commitNameOld": "137546a78a45adbfb5ef338c1c2984a97b3cecc2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 3.53,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,44 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws Exception {\n     this.conf \u003d config;\n     this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n         YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n     this.znodeParentPath \u003d\n         conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n             YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n     this.zkManager \u003d\n         rmContext.getResourceManager().createAndStartZKManager(conf);\n     this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n \n     this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n     this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n     this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n     this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n+    this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n \n     zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n     zkManager.delete(fencingNodePath);\n \n     if (!zkManager.exists(logsPath)) {\n       zkManager.create(logsPath);\n       zkManager.setData(logsPath,\n           serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n     }\n \n+    if (!zkManager.exists(confVersionPath)) {\n+      zkManager.create(confVersionPath);\n+      zkManager.setData(confVersionPath,\n+          String.valueOf(System.currentTimeMillis()), -1);\n+    }\n+\n     if (!zkManager.exists(confStorePath)) {\n       zkManager.create(confStorePath);\n       HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n       for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n         mapSchedConf.put(entry.getKey(), entry.getValue());\n       }\n       zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n+      zkManager.setData(confVersionPath,\n+          String.valueOf(System.currentTimeMillis()), -1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.znodeParentPath \u003d\n        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n    this.zkManager \u003d\n        rmContext.getResourceManager().createAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n    this.confVersionPath \u003d getNodePath(znodeParentPath, CONF_VERSION_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n    zkManager.delete(fencingNodePath);\n\n    if (!zkManager.exists(logsPath)) {\n      zkManager.create(logsPath);\n      zkManager.setData(logsPath,\n          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n    }\n\n    if (!zkManager.exists(confVersionPath)) {\n      zkManager.create(confVersionPath);\n      zkManager.setData(confVersionPath,\n          String.valueOf(System.currentTimeMillis()), -1);\n    }\n\n    if (!zkManager.exists(confStorePath)) {\n      zkManager.create(confStorePath);\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n      zkManager.setData(confVersionPath,\n          String.valueOf(System.currentTimeMillis()), -1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
      "extendedDetails": {}
    },
    "2df73dace06cfd2b3193a14cd455297f8f989617": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8405. RM zk-state-store.parent-path ACLs has been changed since HADOOP-14773. Contributed by  Íñigo Goiri.\n",
      "commitDate": "12/06/18 4:43 AM",
      "commitName": "2df73dace06cfd2b3193a14cd455297f8f989617",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "08/11/17 8:00 AM",
      "commitNameOld": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 215.82,
      "commitsBetweenForRepo": 2027,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws Exception {\n     this.conf \u003d config;\n     this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n         YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n     this.znodeParentPath \u003d\n         conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n             YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n     this.zkManager \u003d\n         rmContext.getResourceManager().createAndStartZKManager(conf);\n     this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n \n     this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n     this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n     this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n     this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n \n-    zkManager.createRootDirRecursively(znodeParentPath);\n+    zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n     zkManager.delete(fencingNodePath);\n \n     if (!zkManager.exists(logsPath)) {\n       zkManager.create(logsPath);\n       zkManager.setData(logsPath,\n           serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n     }\n \n     if (!zkManager.exists(confStorePath)) {\n       zkManager.create(confStorePath);\n       HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n       for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n         mapSchedConf.put(entry.getKey(), entry.getValue());\n       }\n       zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.znodeParentPath \u003d\n        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n    this.zkManager \u003d\n        rmContext.getResourceManager().createAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath, zkAcl);\n    zkManager.delete(fencingNodePath);\n\n    if (!zkManager.exists(logsPath)) {\n      zkManager.create(logsPath);\n      zkManager.setData(logsPath,\n          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n    }\n\n    if (!zkManager.exists(confStorePath)) {\n      zkManager.create(confStorePath);\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
      "extendedDetails": {}
    },
    "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7453. Fix issue where RM fails to switch to active after first successful start. (Rohith Sharma K S via asuresh)\n",
      "commitDate": "08/11/17 8:00 AM",
      "commitName": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 29.91,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws Exception {\n     this.conf \u003d config;\n     this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n         YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n     this.znodeParentPath \u003d\n         conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n             YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n-    this.zkManager \u003d rmContext.getResourceManager().getAndStartZKManager(conf);\n+    this.zkManager \u003d\n+        rmContext.getResourceManager().createAndStartZKManager(conf);\n     this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n \n     this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n     this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n     this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n     this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n \n     zkManager.createRootDirRecursively(znodeParentPath);\n     zkManager.delete(fencingNodePath);\n \n     if (!zkManager.exists(logsPath)) {\n       zkManager.create(logsPath);\n       zkManager.setData(logsPath,\n           serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n     }\n \n     if (!zkManager.exists(confStorePath)) {\n       zkManager.create(confStorePath);\n       HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n       for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n         mapSchedConf.put(entry.getKey(), entry.getValue());\n       }\n       zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.znodeParentPath \u003d\n        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n    this.zkManager \u003d\n        rmContext.getResourceManager().createAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath);\n    zkManager.delete(fencingNodePath);\n\n    if (!zkManager.exists(logsPath)) {\n      zkManager.create(logsPath);\n      zkManager.setData(logsPath,\n          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n    }\n\n    if (!zkManager.exists(confStorePath)) {\n      zkManager.create(confStorePath);\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,34 @@\n+  public void initialize(Configuration config, Configuration schedConf,\n+      RMContext rmContext) throws Exception {\n+    this.conf \u003d config;\n+    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n+        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n+    this.znodeParentPath \u003d\n+        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n+            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n+    this.zkManager \u003d rmContext.getResourceManager().getAndStartZKManager(conf);\n+    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n+\n+    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n+    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n+    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n+    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n+\n+    zkManager.createRootDirRecursively(znodeParentPath);\n+    zkManager.delete(fencingNodePath);\n+\n+    if (!zkManager.exists(logsPath)) {\n+      zkManager.create(logsPath);\n+      zkManager.setData(logsPath,\n+          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n+    }\n+\n+    if (!zkManager.exists(confStorePath)) {\n+      zkManager.create(confStorePath);\n+      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n+      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n+        mapSchedConf.put(entry.getKey(), entry.getValue());\n+      }\n+      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws Exception {\n    this.conf \u003d config;\n    this.maxLogs \u003d conf.getLong(YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n        YarnConfiguration.DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS);\n    this.znodeParentPath \u003d\n        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,\n            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);\n    this.zkManager \u003d rmContext.getResourceManager().getAndStartZKManager(conf);\n    this.zkAcl \u003d ZKCuratorManager.getZKAcls(conf);\n\n    this.zkVersionPath \u003d getNodePath(znodeParentPath, ZK_VERSION_PATH);\n    this.logsPath \u003d getNodePath(znodeParentPath, LOGS_PATH);\n    this.confStorePath \u003d getNodePath(znodeParentPath, CONF_STORE_PATH);\n    this.fencingNodePath \u003d getNodePath(znodeParentPath, FENCING_PATH);\n\n    zkManager.createRootDirRecursively(znodeParentPath);\n    zkManager.delete(fencingNodePath);\n\n    if (!zkManager.exists(logsPath)) {\n      zkManager.create(logsPath);\n      zkManager.setData(logsPath,\n          serializeObject(new LinkedList\u003cLogMutation\u003e()), -1);\n    }\n\n    if (!zkManager.exists(confStorePath)) {\n      zkManager.create(confStorePath);\n      HashMap\u003cString, String\u003e mapSchedConf \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e entry : schedConf) {\n        mapSchedConf.put(entry.getKey(), entry.getValue());\n      }\n      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/ZKConfigurationStore.java"
    }
  }
}