{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogWebServiceUtils.java",
  "functionName": "sendStreamOutputResponse",
  "functionId": "sendStreamOutputResponse___factory-LogAggregationFileControllerFactory__appId-ApplicationId__appOwner-String__nodeId-String__containerIdStr-String__fileName-String__format-String__bytes-long__printEmptyLocalContainerLog-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
  "functionStartLine": 67,
  "functionEndLine": 99,
  "numCommitsSeen": 66,
  "timeTaken": 6774,
  "changeHistory": [
    "71b2c2ffe962ff4f5799e1f55961db687cb55842",
    "8d1981806feb8278966c02a9eff42d72541bb35e",
    "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
    "9378d9428f127eff7acd6c13544016cdbf2d65fb",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
    "9a31e5dfef42929951d305f31200ca4f80d86632",
    "e61d431275d7fe5641fe9da4903e285b10330fa0"
  ],
  "changeHistoryShort": {
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": "Ybodychange",
    "8d1981806feb8278966c02a9eff42d72541bb35e": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "327c9980aafce52cc02d2b8885fc4e9f628ab23c": "Ymultichange(Yparameterchange,Ybodychange)",
    "9378d9428f127eff7acd6c13544016cdbf2d65fb": "Ymultichange(Yparameterchange,Ybodychange)",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "9a31e5dfef42929951d305f31200ca4f80d86632": "Ybodychange",
    "e61d431275d7fe5641fe9da4903e285b10330fa0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal\n",
      "commitDate": "06/02/20 3:25 AM",
      "commitName": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "22/01/20 7:25 AM",
      "commitNameOld": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 14.83,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public static Response sendStreamOutputResponse(\n       LogAggregationFileControllerFactory factory, ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr, String fileName,\n       String format, long bytes, boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n         String errorMessage \u003d\n             \"The valid values for the parameter : format \" + \"are \"\n                 + WebAppUtils.listSupportedLogContentType();\n         return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d\n           getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n               fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n+      LOG.debug(\"Exception\", ex);\n       return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n     Response.ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Response sendStreamOutputResponse(\n      LogAggregationFileControllerFactory factory, ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr, String fileName,\n      String format, long bytes, boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d\n            \"The valid values for the parameter : format \" + \"are \"\n                + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d\n          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n              fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      LOG.debug(\"Exception\", ex);\n      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    Response.ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
      "extendedDetails": {}
    },
    "8d1981806feb8278966c02a9eff42d72541bb35e": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
      "commitDate": "11/10/18 4:26 PM",
      "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthor": "Vrushali C",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  private Response sendStreamOutputResponse(ApplicationId appId,\n-      String appOwner, String nodeId, String containerIdStr,\n-      String fileName, String format, long bytes,\n-      boolean printEmptyLocalContainerLog) {\n+  public static Response sendStreamOutputResponse(\n+      LogAggregationFileControllerFactory factory, ApplicationId appId,\n+      String appOwner, String nodeId, String containerIdStr, String fileName,\n+      String format, long bytes, boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n-        String errorMessage \u003d \"The valid values for the parameter : format \"\n-            + \"are \" + WebAppUtils.listSupportedLogContentType();\n-        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n+        String errorMessage \u003d\n+            \"The valid values for the parameter : format \" + \"are \"\n+                + WebAppUtils.listSupportedLogContentType();\n+        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n-      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n+      stream \u003d\n+          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n+              fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n-    ResponseBuilder response \u003d Response.ok(stream);\n+    Response.ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Response sendStreamOutputResponse(\n      LogAggregationFileControllerFactory factory, ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr, String fileName,\n      String format, long bytes, boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d\n            \"The valid values for the parameter : format \" + \"are \"\n                + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d\n          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n              fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    Response.ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
            "oldMethodName": "sendStreamOutputResponse",
            "newMethodName": "sendStreamOutputResponse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  private Response sendStreamOutputResponse(ApplicationId appId,\n-      String appOwner, String nodeId, String containerIdStr,\n-      String fileName, String format, long bytes,\n-      boolean printEmptyLocalContainerLog) {\n+  public static Response sendStreamOutputResponse(\n+      LogAggregationFileControllerFactory factory, ApplicationId appId,\n+      String appOwner, String nodeId, String containerIdStr, String fileName,\n+      String format, long bytes, boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n-        String errorMessage \u003d \"The valid values for the parameter : format \"\n-            + \"are \" + WebAppUtils.listSupportedLogContentType();\n-        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n+        String errorMessage \u003d\n+            \"The valid values for the parameter : format \" + \"are \"\n+                + WebAppUtils.listSupportedLogContentType();\n+        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n-      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n+      stream \u003d\n+          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n+              fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n-    ResponseBuilder response \u003d Response.ok(stream);\n+    Response.ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Response sendStreamOutputResponse(\n      LogAggregationFileControllerFactory factory, ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr, String fileName,\n      String format, long bytes, boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d\n            \"The valid values for the parameter : format \" + \"are \"\n                + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d\n          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n              fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    Response.ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  private Response sendStreamOutputResponse(ApplicationId appId,\n-      String appOwner, String nodeId, String containerIdStr,\n-      String fileName, String format, long bytes,\n-      boolean printEmptyLocalContainerLog) {\n+  public static Response sendStreamOutputResponse(\n+      LogAggregationFileControllerFactory factory, ApplicationId appId,\n+      String appOwner, String nodeId, String containerIdStr, String fileName,\n+      String format, long bytes, boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n-        String errorMessage \u003d \"The valid values for the parameter : format \"\n-            + \"are \" + WebAppUtils.listSupportedLogContentType();\n-        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n+        String errorMessage \u003d\n+            \"The valid values for the parameter : format \" + \"are \"\n+                + WebAppUtils.listSupportedLogContentType();\n+        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n-      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n+      stream \u003d\n+          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n+              fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n-    ResponseBuilder response \u003d Response.ok(stream);\n+    Response.ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Response sendStreamOutputResponse(\n      LogAggregationFileControllerFactory factory, ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr, String fileName,\n      String format, long bytes, boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d\n            \"The valid values for the parameter : format \" + \"are \"\n                + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d\n          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n              fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    Response.ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  private Response sendStreamOutputResponse(ApplicationId appId,\n-      String appOwner, String nodeId, String containerIdStr,\n-      String fileName, String format, long bytes,\n-      boolean printEmptyLocalContainerLog) {\n+  public static Response sendStreamOutputResponse(\n+      LogAggregationFileControllerFactory factory, ApplicationId appId,\n+      String appOwner, String nodeId, String containerIdStr, String fileName,\n+      String format, long bytes, boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n-        String errorMessage \u003d \"The valid values for the parameter : format \"\n-            + \"are \" + WebAppUtils.listSupportedLogContentType();\n-        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n+        String errorMessage \u003d\n+            \"The valid values for the parameter : format \" + \"are \"\n+                + WebAppUtils.listSupportedLogContentType();\n+        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n-      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n+      stream \u003d\n+          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n+              fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n-    ResponseBuilder response \u003d Response.ok(stream);\n+    Response.ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Response sendStreamOutputResponse(\n      LogAggregationFileControllerFactory factory, ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr, String fileName,\n      String format, long bytes, boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d\n            \"The valid values for the parameter : format \" + \"are \"\n                + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d\n          getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr,\n              fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    Response.ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebServiceUtils.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, format-String, bytes-long, printEmptyLocalContainerLog-boolean]",
            "newValue": "[factory-LogAggregationFileControllerFactory, appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, format-String, bytes-long, printEmptyLocalContainerLog-boolean]"
          }
        }
      ]
    },
    "327c9980aafce52cc02d2b8885fc4e9f628ab23c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6100. Improve YARN webservice to output aggregated container logs. Contributed by Xuan Gong.\n",
      "commitDate": "02/02/17 12:41 AM",
      "commitName": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6100. Improve YARN webservice to output aggregated container logs. Contributed by Xuan Gong.\n",
          "commitDate": "02/02/17 12:41 AM",
          "commitName": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/01/17 3:26 PM",
          "commitNameOld": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 8.39,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,30 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n-      String fileName, String format, long bytes) {\n+      String fileName, String format, long bytes,\n+      boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n         String errorMessage \u003d \"The valid values for the parameter : format \"\n             + \"are \" + WebAppUtils.listSupportedLogContentType();\n         return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName, bytes);\n+          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n-    if (stream \u003d\u003d null) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-          \"Can not get log for container: \" + containerIdStr);\n-    }\n     ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, String format, long bytes,\n      boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d \"The valid values for the parameter : format \"\n            + \"are \" + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, format-String, bytes-long]",
            "newValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, format-String, bytes-long, printEmptyLocalContainerLog-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6100. Improve YARN webservice to output aggregated container logs. Contributed by Xuan Gong.\n",
          "commitDate": "02/02/17 12:41 AM",
          "commitName": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/01/17 3:26 PM",
          "commitNameOld": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 8.39,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,30 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n-      String fileName, String format, long bytes) {\n+      String fileName, String format, long bytes,\n+      boolean printEmptyLocalContainerLog) {\n     String contentType \u003d WebAppUtils.getDefaultLogContentType();\n     if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n       contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n       if (contentType \u003d\u003d null) {\n         String errorMessage \u003d \"The valid values for the parameter : format \"\n             + \"are \" + WebAppUtils.listSupportedLogContentType();\n         return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n             .build();\n       }\n     }\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName, bytes);\n+          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n-    if (stream \u003d\u003d null) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-          \"Can not get log for container: \" + containerIdStr);\n-    }\n     ResponseBuilder response \u003d Response.ok(stream);\n     response.header(\"Content-Type\", contentType);\n     // Sending the X-Content-Type-Options response header with the value\n     // nosniff will prevent Internet Explorer from MIME-sniffing a response\n     // away from the declared content-type.\n     response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, String format, long bytes,\n      boolean printEmptyLocalContainerLog) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d \"The valid values for the parameter : format \"\n            + \"are \" + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9378d9428f127eff7acd6c13544016cdbf2d65fb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5191. Renamed the newly added “download\u003dtrue” option for getting logs via NMWebServices and AHSWebServices to be a better \"format\" option. (Xuan Gong via vinodkv)\n",
      "commitDate": "09/06/16 12:30 PM",
      "commitName": "9378d9428f127eff7acd6c13544016cdbf2d65fb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5191. Renamed the newly added “download\u003dtrue” option for getting logs via NMWebServices and AHSWebServices to be a better \"format\" option. (Xuan Gong via vinodkv)\n",
          "commitDate": "09/06/16 12:30 PM",
          "commitName": "9378d9428f127eff7acd6c13544016cdbf2d65fb",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/16 4:07 PM",
          "commitNameOld": "58be55b6e07b94aa55ed87c461f3e5c04cc61630",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 1.85,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,33 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n-      String fileName, boolean downloadFile, long bytes) {\n+      String fileName, String format, long bytes) {\n+    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n+    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n+      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n+      if (contentType \u003d\u003d null) {\n+        String errorMessage \u003d \"The valid values for the parameter : format \"\n+            + \"are \" + WebAppUtils.listSupportedLogContentType();\n+        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n+            .build();\n+      }\n+    }\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n           containerIdStr, fileName, bytes);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n     if (stream \u003d\u003d null) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           \"Can not get log for container: \" + containerIdStr);\n     }\n     ResponseBuilder response \u003d Response.ok(stream);\n-    if (downloadFile) {\n-      response.header(\"Content-Type\", \"application/octet-stream\");\n-    }\n+    response.header(\"Content-Type\", contentType);\n+    // Sending the X-Content-Type-Options response header with the value\n+    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n+    // away from the declared content-type.\n+    response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, String format, long bytes) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d \"The valid values for the parameter : format \"\n            + \"are \" + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName, bytes);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    if (stream \u003d\u003d null) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get log for container: \" + containerIdStr);\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, downloadFile-boolean, bytes-long]",
            "newValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, format-String, bytes-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5191. Renamed the newly added “download\u003dtrue” option for getting logs via NMWebServices and AHSWebServices to be a better \"format\" option. (Xuan Gong via vinodkv)\n",
          "commitDate": "09/06/16 12:30 PM",
          "commitName": "9378d9428f127eff7acd6c13544016cdbf2d65fb",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/16 4:07 PM",
          "commitNameOld": "58be55b6e07b94aa55ed87c461f3e5c04cc61630",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 1.85,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,33 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n-      String fileName, boolean downloadFile, long bytes) {\n+      String fileName, String format, long bytes) {\n+    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n+    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n+      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n+      if (contentType \u003d\u003d null) {\n+        String errorMessage \u003d \"The valid values for the parameter : format \"\n+            + \"are \" + WebAppUtils.listSupportedLogContentType();\n+        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n+            .build();\n+      }\n+    }\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n           containerIdStr, fileName, bytes);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n     if (stream \u003d\u003d null) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           \"Can not get log for container: \" + containerIdStr);\n     }\n     ResponseBuilder response \u003d Response.ok(stream);\n-    if (downloadFile) {\n-      response.header(\"Content-Type\", \"application/octet-stream\");\n-    }\n+    response.header(\"Content-Type\", contentType);\n+    // Sending the X-Content-Type-Options response header with the value\n+    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n+    // away from the declared content-type.\n+    response.header(\"X-Content-Type-Options\", \"nosniff\");\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, String format, long bytes) {\n    String contentType \u003d WebAppUtils.getDefaultLogContentType();\n    if (format !\u003d null \u0026\u0026 !format.isEmpty()) {\n      contentType \u003d WebAppUtils.getSupportedLogContentType(format);\n      if (contentType \u003d\u003d null) {\n        String errorMessage \u003d \"The valid values for the parameter : format \"\n            + \"are \" + WebAppUtils.listSupportedLogContentType();\n        return Response.status(Status.BAD_REQUEST).entity(errorMessage)\n            .build();\n      }\n    }\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName, bytes);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    if (stream \u003d\u003d null) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get log for container: \" + containerIdStr);\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    response.header(\"Content-Type\", contentType);\n    // Sending the X-Content-Type-Options response header with the value\n    // nosniff will prevent Internet Explorer from MIME-sniffing a response\n    // away from the declared content-type.\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
      "commitDate": "01/06/16 1:44 PM",
      "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "25/05/16 6:31 AM",
          "commitNameOld": "9a31e5dfef42929951d305f31200ca4f80d86632",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 7.3,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n-      String fileName, boolean downloadFile) {\n+      String fileName, boolean downloadFile, long bytes) {\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName);\n+          containerIdStr, fileName, bytes);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n     if (stream \u003d\u003d null) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           \"Can not get log for container: \" + containerIdStr);\n     }\n     ResponseBuilder response \u003d Response.ok(stream);\n     if (downloadFile) {\n       response.header(\"Content-Type\", \"application/octet-stream\");\n     }\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, boolean downloadFile, long bytes) {\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName, bytes);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    if (stream \u003d\u003d null) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get log for container: \" + containerIdStr);\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    if (downloadFile) {\n      response.header(\"Content-Type\", \"application/octet-stream\");\n    }\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, downloadFile-boolean]",
            "newValue": "[appId-ApplicationId, appOwner-String, nodeId-String, containerIdStr-String, fileName-String, downloadFile-boolean, bytes-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "25/05/16 6:31 AM",
          "commitNameOld": "9a31e5dfef42929951d305f31200ca4f80d86632",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 7.3,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n-      String fileName, boolean downloadFile) {\n+      String fileName, boolean downloadFile, long bytes) {\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n-          containerIdStr, fileName);\n+          containerIdStr, fileName, bytes);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n     if (stream \u003d\u003d null) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           \"Can not get log for container: \" + containerIdStr);\n     }\n     ResponseBuilder response \u003d Response.ok(stream);\n     if (downloadFile) {\n       response.header(\"Content-Type\", \"application/octet-stream\");\n     }\n     return response.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, boolean downloadFile, long bytes) {\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName, bytes);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    if (stream \u003d\u003d null) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get log for container: \" + containerIdStr);\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    if (downloadFile) {\n      response.header(\"Content-Type\", \"application/octet-stream\");\n    }\n    return response.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9a31e5dfef42929951d305f31200ca4f80d86632": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5115. Avoid setting CONTENT-DISPOSITION header in the container-logs web-service. Contributed by Xuan Gong.\n",
      "commitDate": "25/05/16 6:31 AM",
      "commitName": "9a31e5dfef42929951d305f31200ca4f80d86632",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "11/05/16 9:28 AM",
      "commitNameOld": "39f2bac38b111f90d3402229201cdb4315f5d4f5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 13.88,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   private Response sendStreamOutputResponse(ApplicationId appId,\n       String appOwner, String nodeId, String containerIdStr,\n       String fileName, boolean downloadFile) {\n     StreamingOutput stream \u003d null;\n     try {\n       stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n           containerIdStr, fileName);\n     } catch (Exception ex) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           ex.getMessage());\n     }\n     if (stream \u003d\u003d null) {\n       return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n           \"Can not get log for container: \" + containerIdStr);\n     }\n     ResponseBuilder response \u003d Response.ok(stream);\n     if (downloadFile) {\n       response.header(\"Content-Type\", \"application/octet-stream\");\n-      response.header(\"Content-Disposition\", \"attachment; filename\u003d\"\n-          + fileName);\n     }\n     return response.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, boolean downloadFile) {\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    if (stream \u003d\u003d null) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get log for container: \" + containerIdStr);\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    if (downloadFile) {\n      response.header(\"Content-Type\", \"application/octet-stream\");\n    }\n    return response.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "e61d431275d7fe5641fe9da4903e285b10330fa0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4920. ATS/NM should support a link to dowload/get the logs in text format. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 10:35 AM",
      "commitName": "e61d431275d7fe5641fe9da4903e285b10330fa0",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,23 @@\n+  private Response sendStreamOutputResponse(ApplicationId appId,\n+      String appOwner, String nodeId, String containerIdStr,\n+      String fileName, boolean downloadFile) {\n+    StreamingOutput stream \u003d null;\n+    try {\n+      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n+          containerIdStr, fileName);\n+    } catch (Exception ex) {\n+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+          ex.getMessage());\n+    }\n+    if (stream \u003d\u003d null) {\n+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+          \"Can not get log for container: \" + containerIdStr);\n+    }\n+    ResponseBuilder response \u003d Response.ok(stream);\n+    if (downloadFile) {\n+      response.header(\"Content-Type\", \"application/octet-stream\");\n+      response.header(\"Content-Disposition\", \"attachment; filename\u003d\"\n+          + fileName);\n+    }\n+    return response.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response sendStreamOutputResponse(ApplicationId appId,\n      String appOwner, String nodeId, String containerIdStr,\n      String fileName, boolean downloadFile) {\n    StreamingOutput stream \u003d null;\n    try {\n      stream \u003d getStreamingOutput(appId, appOwner, nodeId,\n          containerIdStr, fileName);\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n    if (stream \u003d\u003d null) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get log for container: \" + containerIdStr);\n    }\n    ResponseBuilder response \u003d Response.ok(stream);\n    if (downloadFile) {\n      response.header(\"Content-Type\", \"application/octet-stream\");\n      response.header(\"Content-Disposition\", \"attachment; filename\u003d\"\n          + fileName);\n    }\n    return response.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java"
    }
  }
}