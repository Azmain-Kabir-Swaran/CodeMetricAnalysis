{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobHistoryEventHandler.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
  "functionStartLine": 348,
  "functionEndLine": 398,
  "numCommitsSeen": 93,
  "timeTaken": 11918,
  "changeHistory": [
    "83e60cd2db20f655e272958ef43b1b5a084ef3e3",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "971e91c8c03a23e4613ed3f071b4f982ee5a1b63",
    "6b2f11b54bc679b0715fe66bd129e340e8c61c5c",
    "0928502029ef141759008997335ea2cd836a7154",
    "0515b3322f9d94f1743504085967b29efe1dd7fe",
    "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "44b7e031145490e9730cdddbb4b0ed23f5bdc049",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "83e60cd2db20f655e272958ef43b1b5a084ef3e3": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "971e91c8c03a23e4613ed3f071b4f982ee5a1b63": "Ybodychange",
    "6b2f11b54bc679b0715fe66bd129e340e8c61c5c": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "0515b3322f9d94f1743504085967b29efe1dd7fe": "Ybodychange",
    "e8645636ce1721aa6dc3674fbc553a7bb3522fbe": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "44b7e031145490e9730cdddbb4b0ed23f5bdc049": "Ymultichange(Ybodychange,Yparametermetachange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "83e60cd2db20f655e272958ef43b1b5a084ef3e3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7042. Killed MR job data does not move to mapreduce.jobhistory.done-dir when ATS v2 is enabled. Contributed by Rohith Sharma K S.\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "83e60cd2db20f655e272958ef43b1b5a084ef3e3",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/04/18 3:08 PM",
      "commitNameOld": "345e7624d58a058a1bad666bd1e5ce4b346a9056",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 21.95,
      "commitsBetweenForRepo": 653,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   protected void serviceStart() throws Exception {\n     if (timelineClient !\u003d null) {\n       timelineClient.start();\n     } else if (timelineV2Client !\u003d null) {\n       timelineV2Client.start();\n     }\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n                 LOG.debug(\"Event handling interrupted\");\n                 Thread.currentThread().interrupt();\n               }\n             }\n           }\n         }\n     }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n+\n+    if (handleTimelineEvent) {\n+      atsEventDispatcher.start();\n+    }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (timelineClient !\u003d null) {\n      timelineClient.start();\n    } else if (timelineV2Client !\u003d null) {\n      timelineV2Client.start();\n    }\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n\n    if (handleTimelineEvent) {\n      atsEventDispatcher.start();\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 93.03,
      "commitsBetweenForRepo": 475,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n   protected void serviceStart() throws Exception {\n     if (timelineClient !\u003d null) {\n       timelineClient.start();\n+    } else if (timelineV2Client !\u003d null) {\n+      timelineV2Client.start();\n     }\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n                 LOG.debug(\"Event handling interrupted\");\n                 Thread.currentThread().interrupt();\n               }\n             }\n           }\n         }\n     }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (timelineClient !\u003d null) {\n      timelineClient.start();\n    } else if (timelineV2Client !\u003d null) {\n      timelineV2Client.start();\n    }\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "971e91c8c03a23e4613ed3f071b4f982ee5a1b63": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6018. Added an MR specific config to enable emitting job history data to the timeline server. Contributed by Robert Kanter.\n",
      "commitDate": "27/10/14 9:03 PM",
      "commitName": "971e91c8c03a23e4613ed3f071b4f982ee5a1b63",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "27/10/14 8:35 PM",
      "commitNameOld": "6b2f11b54bc679b0715fe66bd129e340e8c61c5c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n   protected void serviceStart() throws Exception {\n-    timelineClient.start();\n+    if (timelineClient !\u003d null) {\n+      timelineClient.start();\n+    }\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n                 LOG.debug(\"Event handling interrupted\");\n                 Thread.currentThread().interrupt();\n               }\n             }\n           }\n         }\n     }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (timelineClient !\u003d null) {\n      timelineClient.start();\n    }\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "6b2f11b54bc679b0715fe66bd129e340e8c61c5c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5933. Enabled MR AM to post history events to the timeline server. Contributed by Robert Kanter.\n",
      "commitDate": "27/10/14 8:35 PM",
      "commitName": "6b2f11b54bc679b0715fe66bd129e340e8c61c5c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "15/08/14 1:17 PM",
      "commitNameOld": "84bc2fe4021be32e0ff8ba395359337904149034",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 73.3,
      "commitsBetweenForRepo": 704,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   protected void serviceStart() throws Exception {\n+    timelineClient.start();\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n                 LOG.debug(\"Event handling interrupted\");\n                 Thread.currentThread().interrupt();\n               }\n             }\n           }\n         }\n     }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    timelineClient.start();\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n-              Thread.currentThread().interrupt();\n+                LOG.debug(\"Event handling interrupted\");\n+                Thread.currentThread().interrupt();\n+              }\n             }\n           }\n         }\n-      }\n-    });\n+    }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n-              Thread.currentThread().interrupt();\n+                LOG.debug(\"Event handling interrupted\");\n+                Thread.currentThread().interrupt();\n+              }\n             }\n           }\n         }\n-      }\n-    });\n+    }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n-              Thread.currentThread().interrupt();\n+                LOG.debug(\"Event handling interrupted\");\n+                Thread.currentThread().interrupt();\n+              }\n             }\n           }\n         }\n-      }\n-    });\n+    }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n           if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n-              Thread.currentThread().interrupt();\n+                LOG.debug(\"Event handling interrupted\");\n+                Thread.currentThread().interrupt();\n+              }\n             }\n           }\n         }\n-      }\n-    });\n+    }, \"eventHandlingThread\");\n     eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n                LOG.debug(\"Event handling interrupted\");\n                Thread.currentThread().interrupt();\n              }\n            }\n          }\n        }\n    }, \"eventHandlingThread\");\n    eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "0515b3322f9d94f1743504085967b29efe1dd7fe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3846. Addressed MR AM hanging issues during AM restart and then the recovery. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1243752 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/12 4:06 PM",
      "commitName": "0515b3322f9d94f1743504085967b29efe1dd7fe",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/01/12 5:42 PM",
      "commitNameOld": "74697f231772a556884feaf1c986631d02a9ae4e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 32.93,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void start() {\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n \n           // Log the size of the history-event-queue every so often.\n-          if (eventCounter % 1000 \u003d\u003d 0) {\n+          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n             eventCounter \u003d 0;\n             LOG.info(\"Size of the JobHistory event queue is \"\n                 + eventQueue.size());\n           } else {\n             eventCounter++;\n           }\n \n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n               Thread.currentThread().interrupt();\n             }\n           }\n         }\n       }\n     });\n     eventHandlingThread.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter !\u003d 0 \u0026\u0026 eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "e8645636ce1721aa6dc3674fbc553a7bb3522fbe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3511. Removed a multitude of cloned/duplicate counters in the AM thereby reducing the AM heap size and preventing full GCs. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229347 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/12 1:04 PM",
      "commitName": "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/11/11 11:28 PM",
      "commitNameOld": "9fe9f42c8fad872f7aab5f9bbdac4a860edb0d43",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 62.57,
      "commitsBetweenForRepo": 297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,41 @@\n   public void start() {\n     eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n         JobHistoryEvent event \u003d null;\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+\n+          // Log the size of the history-event-queue every so often.\n+          if (eventCounter % 1000 \u003d\u003d 0) {\n+            eventCounter \u003d 0;\n+            LOG.info(\"Size of the JobHistory event queue is \"\n+                + eventQueue.size());\n+          } else {\n+            eventCounter++;\n+          }\n+\n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.info(\"EventQueue take interrupted. Returning\");\n             return;\n           }\n           // If an event has been removed from the queue. Handle it.\n           // The rest of the queue is handled via stop()\n           // Clear the interrupt status if it\u0027s set before calling handleEvent\n           // and set it if it was set before calling handleEvent. \n           // Interrupts received from other threads during handleEvent cannot be\n           // dealth with - Shell.runCommand() ignores them.\n           synchronized (lock) {\n             boolean isInterrupted \u003d Thread.interrupted();\n             handleEvent(event);\n             if (isInterrupted) {\n               Thread.currentThread().interrupt();\n             }\n           }\n         }\n       }\n     });\n     eventHandlingThread.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n\n          // Log the size of the history-event-queue every so often.\n          if (eventCounter % 1000 \u003d\u003d 0) {\n            eventCounter \u003d 0;\n            LOG.info(\"Size of the JobHistory event queue is \"\n                + eventQueue.size());\n          } else {\n            eventCounter++;\n          }\n\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  void startNewTask(final TaskInProgress tip) {\n-    Thread launchThread \u003d new Thread(new Runnable() {\n+  public void start() {\n+    eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n+        JobHistoryEvent event \u003d null;\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.info(\"EventQueue take interrupted. Returning\");\n+            return;\n           }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n+          // If an event has been removed from the queue. Handle it.\n+          // The rest of the queue is handled via stop()\n+          // Clear the interrupt status if it\u0027s set before calling handleEvent\n+          // and set it if it was set before calling handleEvent. \n+          // Interrupts received from other threads during handleEvent cannot be\n+          // dealth with - Shell.runCommand() ignores them.\n+          synchronized (lock) {\n+            boolean isInterrupted \u003d Thread.interrupted();\n+            handleEvent(event);\n+            if (isInterrupted) {\n+              Thread.currentThread().interrupt();\n+            }\n           }\n         }\n       }\n     });\n-    launchThread.start();\n-        \n+    eventHandlingThread.start();\n+    super.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
            "oldMethodName": "startNewTask",
            "newMethodName": "start"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  void startNewTask(final TaskInProgress tip) {\n-    Thread launchThread \u003d new Thread(new Runnable() {\n+  public void start() {\n+    eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n+        JobHistoryEvent event \u003d null;\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.info(\"EventQueue take interrupted. Returning\");\n+            return;\n           }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n+          // If an event has been removed from the queue. Handle it.\n+          // The rest of the queue is handled via stop()\n+          // Clear the interrupt status if it\u0027s set before calling handleEvent\n+          // and set it if it was set before calling handleEvent. \n+          // Interrupts received from other threads during handleEvent cannot be\n+          // dealth with - Shell.runCommand() ignores them.\n+          synchronized (lock) {\n+            boolean isInterrupted \u003d Thread.interrupted();\n+            handleEvent(event);\n+            if (isInterrupted) {\n+              Thread.currentThread().interrupt();\n+            }\n           }\n         }\n       }\n     });\n-    launchThread.start();\n-        \n+    eventHandlingThread.start();\n+    super.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  void startNewTask(final TaskInProgress tip) {\n-    Thread launchThread \u003d new Thread(new Runnable() {\n+  public void start() {\n+    eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n+        JobHistoryEvent event \u003d null;\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.info(\"EventQueue take interrupted. Returning\");\n+            return;\n           }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n+          // If an event has been removed from the queue. Handle it.\n+          // The rest of the queue is handled via stop()\n+          // Clear the interrupt status if it\u0027s set before calling handleEvent\n+          // and set it if it was set before calling handleEvent. \n+          // Interrupts received from other threads during handleEvent cannot be\n+          // dealth with - Shell.runCommand() ignores them.\n+          synchronized (lock) {\n+            boolean isInterrupted \u003d Thread.interrupted();\n+            handleEvent(event);\n+            if (isInterrupted) {\n+              Thread.currentThread().interrupt();\n+            }\n           }\n         }\n       }\n     });\n-    launchThread.start();\n-        \n+    eventHandlingThread.start();\n+    super.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  void startNewTask(final TaskInProgress tip) {\n-    Thread launchThread \u003d new Thread(new Runnable() {\n+  public void start() {\n+    eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n+        JobHistoryEvent event \u003d null;\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.info(\"EventQueue take interrupted. Returning\");\n+            return;\n           }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n+          // If an event has been removed from the queue. Handle it.\n+          // The rest of the queue is handled via stop()\n+          // Clear the interrupt status if it\u0027s set before calling handleEvent\n+          // and set it if it was set before calling handleEvent. \n+          // Interrupts received from other threads during handleEvent cannot be\n+          // dealth with - Shell.runCommand() ignores them.\n+          synchronized (lock) {\n+            boolean isInterrupted \u003d Thread.interrupted();\n+            handleEvent(event);\n+            if (isInterrupted) {\n+              Thread.currentThread().interrupt();\n+            }\n           }\n         }\n       }\n     });\n-    launchThread.start();\n-        \n+    eventHandlingThread.start();\n+    super.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "startNewTask",
            "newValue": "start"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  void startNewTask(final TaskInProgress tip) {\n-    Thread launchThread \u003d new Thread(new Runnable() {\n+  public void start() {\n+    eventHandlingThread \u003d new Thread(new Runnable() {\n       @Override\n       public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n+        JobHistoryEvent event \u003d null;\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.info(\"EventQueue take interrupted. Returning\");\n+            return;\n           }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n+          // If an event has been removed from the queue. Handle it.\n+          // The rest of the queue is handled via stop()\n+          // Clear the interrupt status if it\u0027s set before calling handleEvent\n+          // and set it if it was set before calling handleEvent. \n+          // Interrupts received from other threads during handleEvent cannot be\n+          // dealth with - Shell.runCommand() ignores them.\n+          synchronized (lock) {\n+            boolean isInterrupted \u003d Thread.interrupted();\n+            handleEvent(event);\n+            if (isInterrupted) {\n+              Thread.currentThread().interrupt();\n+            }\n           }\n         }\n       }\n     });\n-    launchThread.start();\n-        \n+    eventHandlingThread.start();\n+    super.start();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void start() {\n    eventHandlingThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        JobHistoryEvent event \u003d null;\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.info(\"EventQueue take interrupted. Returning\");\n            return;\n          }\n          // If an event has been removed from the queue. Handle it.\n          // The rest of the queue is handled via stop()\n          // Clear the interrupt status if it\u0027s set before calling handleEvent\n          // and set it if it was set before calling handleEvent. \n          // Interrupts received from other threads during handleEvent cannot be\n          // dealth with - Shell.runCommand() ignores them.\n          synchronized (lock) {\n            boolean isInterrupted \u003d Thread.interrupted();\n            handleEvent(event);\n            if (isInterrupted) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      }\n    });\n    eventHandlingThread.start();\n    super.start();\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[tip-TaskInProgress(modifiers-final)]",
            "newValue": "[]"
          }
        }
      ]
    },
    "44b7e031145490e9730cdddbb4b0ed23f5bdc049": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "MAPREDUCE-2705. Permits parallel multiple task launches. Contributed by Thomas Graves.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153717 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/08/11 6:15 PM",
      "commitName": "44b7e031145490e9730cdddbb4b0ed23f5bdc049",
      "commitAuthor": "Devaraj Das",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2705. Permits parallel multiple task launches. Contributed by Thomas Graves.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153717 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/08/11 6:15 PM",
          "commitName": "44b7e031145490e9730cdddbb4b0ed23f5bdc049",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 52.14,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n-  void startNewTask(TaskInProgress tip) {\n-    try {\n-      RunningJob rjob \u003d localizeJob(tip);\n-      // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-      launchTaskForJob(tip, new JobConf(rjob.jobConf), rjob.ugi); \n-    } catch (Throwable e) {\n-      String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                    \":\\n\" + StringUtils.stringifyException(e));\n-      LOG.warn(msg);\n-      tip.reportDiagnosticInfo(msg);\n-      try {\n-        tip.kill(true);\n-        tip.cleanup(true);\n-      } catch (IOException ie2) {\n-        LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                 StringUtils.stringifyException(ie2));          \n+  void startNewTask(final TaskInProgress tip) {\n+    Thread launchThread \u003d new Thread(new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          RunningJob rjob \u003d localizeJob(tip);\n+          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n+          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n+        } catch (Throwable e) {\n+          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n+                        \":\\n\" + StringUtils.stringifyException(e));\n+          LOG.warn(msg);\n+          tip.reportDiagnosticInfo(msg);\n+          try {\n+            tip.kill(true);\n+            tip.cleanup(true);\n+          } catch (IOException ie2) {\n+            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n+                     StringUtils.stringifyException(ie2));          \n+          }\n+          if (e instanceof Error) {\n+            LOG.error(\"TaskLauncher error \" +\n+                StringUtils.stringifyException(e));\n+          }\n+        }\n       }\n+    });\n+    launchThread.start();\n         \n-      // Careful! \n-      // This might not be an \u0027Exception\u0027 - don\u0027t handle \u0027Error\u0027 here!\n-      if (e instanceof Error) {\n-        throw ((Error) e);\n-      }\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void startNewTask(final TaskInProgress tip) {\n    Thread launchThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          RunningJob rjob \u003d localizeJob(tip);\n          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n        } catch (Throwable e) {\n          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n                        \":\\n\" + StringUtils.stringifyException(e));\n          LOG.warn(msg);\n          tip.reportDiagnosticInfo(msg);\n          try {\n            tip.kill(true);\n            tip.cleanup(true);\n          } catch (IOException ie2) {\n            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n                     StringUtils.stringifyException(ie2));          \n          }\n          if (e instanceof Error) {\n            LOG.error(\"TaskLauncher error \" +\n                StringUtils.stringifyException(e));\n          }\n        }\n      }\n    });\n    launchThread.start();\n        \n  }",
          "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "MAPREDUCE-2705. Permits parallel multiple task launches. Contributed by Thomas Graves.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153717 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/08/11 6:15 PM",
          "commitName": "44b7e031145490e9730cdddbb4b0ed23f5bdc049",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 52.14,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n-  void startNewTask(TaskInProgress tip) {\n-    try {\n-      RunningJob rjob \u003d localizeJob(tip);\n-      // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-      launchTaskForJob(tip, new JobConf(rjob.jobConf), rjob.ugi); \n-    } catch (Throwable e) {\n-      String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                    \":\\n\" + StringUtils.stringifyException(e));\n-      LOG.warn(msg);\n-      tip.reportDiagnosticInfo(msg);\n-      try {\n-        tip.kill(true);\n-        tip.cleanup(true);\n-      } catch (IOException ie2) {\n-        LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                 StringUtils.stringifyException(ie2));          \n+  void startNewTask(final TaskInProgress tip) {\n+    Thread launchThread \u003d new Thread(new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          RunningJob rjob \u003d localizeJob(tip);\n+          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n+          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n+        } catch (Throwable e) {\n+          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n+                        \":\\n\" + StringUtils.stringifyException(e));\n+          LOG.warn(msg);\n+          tip.reportDiagnosticInfo(msg);\n+          try {\n+            tip.kill(true);\n+            tip.cleanup(true);\n+          } catch (IOException ie2) {\n+            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n+                     StringUtils.stringifyException(ie2));          \n+          }\n+          if (e instanceof Error) {\n+            LOG.error(\"TaskLauncher error \" +\n+                StringUtils.stringifyException(e));\n+          }\n+        }\n       }\n+    });\n+    launchThread.start();\n         \n-      // Careful! \n-      // This might not be an \u0027Exception\u0027 - don\u0027t handle \u0027Error\u0027 here!\n-      if (e instanceof Error) {\n-        throw ((Error) e);\n-      }\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void startNewTask(final TaskInProgress tip) {\n    Thread launchThread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          RunningJob rjob \u003d localizeJob(tip);\n          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n        } catch (Throwable e) {\n          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n                        \":\\n\" + StringUtils.stringifyException(e));\n          LOG.warn(msg);\n          tip.reportDiagnosticInfo(msg);\n          try {\n            tip.kill(true);\n            tip.cleanup(true);\n          } catch (IOException ie2) {\n            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n                     StringUtils.stringifyException(ie2));          \n          }\n          if (e instanceof Error) {\n            LOG.error(\"TaskLauncher error \" +\n                StringUtils.stringifyException(e));\n          }\n        }\n      }\n    });\n    launchThread.start();\n        \n  }",
          "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
          "extendedDetails": {
            "oldValue": "[tip-TaskInProgress]",
            "newValue": "[tip-TaskInProgress(modifiers-final)]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,25 @@\n+  void startNewTask(TaskInProgress tip) {\n+    try {\n+      RunningJob rjob \u003d localizeJob(tip);\n+      // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n+      launchTaskForJob(tip, new JobConf(rjob.jobConf), rjob.ugi); \n+    } catch (Throwable e) {\n+      String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n+                    \":\\n\" + StringUtils.stringifyException(e));\n+      LOG.warn(msg);\n+      tip.reportDiagnosticInfo(msg);\n+      try {\n+        tip.kill(true);\n+        tip.cleanup(true);\n+      } catch (IOException ie2) {\n+        LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n+                 StringUtils.stringifyException(ie2));          \n+      }\n+        \n+      // Careful! \n+      // This might not be an \u0027Exception\u0027 - don\u0027t handle \u0027Error\u0027 here!\n+      if (e instanceof Error) {\n+        throw ((Error) e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void startNewTask(TaskInProgress tip) {\n    try {\n      RunningJob rjob \u003d localizeJob(tip);\n      // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n      launchTaskForJob(tip, new JobConf(rjob.jobConf), rjob.ugi); \n    } catch (Throwable e) {\n      String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n                    \":\\n\" + StringUtils.stringifyException(e));\n      LOG.warn(msg);\n      tip.reportDiagnosticInfo(msg);\n      try {\n        tip.kill(true);\n        tip.cleanup(true);\n      } catch (IOException ie2) {\n        LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n                 StringUtils.stringifyException(ie2));          \n      }\n        \n      // Careful! \n      // This might not be an \u0027Exception\u0027 - don\u0027t handle \u0027Error\u0027 here!\n      if (e instanceof Error) {\n        throw ((Error) e);\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java"
    }
  }
}