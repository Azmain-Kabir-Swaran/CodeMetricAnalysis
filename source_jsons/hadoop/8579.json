{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatPBINode.java",
  "functionName": "loadXAttrs",
  "functionId": "loadXAttrs___proto-XAttrFeatureProto__stringTable-StringTable(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
  "functionStartLine": 117,
  "functionEndLine": 130,
  "numCommitsSeen": 121,
  "timeTaken": 5539,
  "changeHistory": [
    "b60ca37914b22550e3630fa02742d40697decb31",
    "eee0d4563c62647cfaaed6605ee713aaf69add78",
    "04915a08141bbe71bdef26e3f539aa8b76f89ac7",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "b60ca37914b22550e3630fa02742d40697decb31": "Ymultichange(Yparameterchange,Ybodychange)",
    "eee0d4563c62647cfaaed6605ee713aaf69add78": "Ymultichange(Yreturntypechange,Ybodychange)",
    "04915a08141bbe71bdef26e3f539aa8b76f89ac7": "Ybodychange",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b60ca37914b22550e3630fa02742d40697decb31": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
      "commitDate": "15/10/18 3:18 AM",
      "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthor": "Vinayakumar B",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
          "commitDate": "15/10/18 3:18 AM",
          "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "06/09/18 2:48 PM",
          "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 38.52,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,14 @@\n     public static List\u003cXAttr\u003e loadXAttrs(\n-        XAttrFeatureProto proto, final String[] stringTable) {\n+        XAttrFeatureProto proto, final StringTable stringTable) {\n       List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n       for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n         int v \u003d xAttrCompactProto.getName();\n-        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n-        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n-        ns |\u003d\n-            ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n-        String name \u003d stringTable[nid];\n         byte[] value \u003d null;\n         if (xAttrCompactProto.getValue() !\u003d null) {\n           value \u003d xAttrCompactProto.getValue().toByteArray();\n         }\n-        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n-            .setName(name).setValue(value).build());\n+        b.add(XAttrFormat.toXAttr(v, value, stringTable));\n       }\n       \n       return b;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static List\u003cXAttr\u003e loadXAttrs(\n        XAttrFeatureProto proto, final StringTable stringTable) {\n      List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n        int v \u003d xAttrCompactProto.getName();\n        byte[] value \u003d null;\n        if (xAttrCompactProto.getValue() !\u003d null) {\n          value \u003d xAttrCompactProto.getValue().toByteArray();\n        }\n        b.add(XAttrFormat.toXAttr(v, value, stringTable));\n      }\n      \n      return b;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
          "extendedDetails": {
            "oldValue": "[proto-XAttrFeatureProto, stringTable-String[](modifiers-final)]",
            "newValue": "[proto-XAttrFeatureProto, stringTable-StringTable(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
          "commitDate": "15/10/18 3:18 AM",
          "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "06/09/18 2:48 PM",
          "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 38.52,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,14 @@\n     public static List\u003cXAttr\u003e loadXAttrs(\n-        XAttrFeatureProto proto, final String[] stringTable) {\n+        XAttrFeatureProto proto, final StringTable stringTable) {\n       List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n       for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n         int v \u003d xAttrCompactProto.getName();\n-        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n-        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n-        ns |\u003d\n-            ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n-        String name \u003d stringTable[nid];\n         byte[] value \u003d null;\n         if (xAttrCompactProto.getValue() !\u003d null) {\n           value \u003d xAttrCompactProto.getValue().toByteArray();\n         }\n-        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n-            .setName(name).setValue(value).build());\n+        b.add(XAttrFormat.toXAttr(v, value, stringTable));\n       }\n       \n       return b;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static List\u003cXAttr\u003e loadXAttrs(\n        XAttrFeatureProto proto, final StringTable stringTable) {\n      List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n        int v \u003d xAttrCompactProto.getName();\n        byte[] value \u003d null;\n        if (xAttrCompactProto.getValue() !\u003d null) {\n          value \u003d xAttrCompactProto.getValue().toByteArray();\n        }\n        b.add(XAttrFormat.toXAttr(v, value, stringTable));\n      }\n      \n      return b;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
          "extendedDetails": {}
        }
      ]
    },
    "eee0d4563c62647cfaaed6605ee713aaf69add78": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)\n",
      "commitDate": "25/08/15 1:16 AM",
      "commitName": "eee0d4563c62647cfaaed6605ee713aaf69add78",
      "commitAuthor": "yliu",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)\n",
          "commitDate": "25/08/15 1:16 AM",
          "commitName": "eee0d4563c62647cfaaed6605ee713aaf69add78",
          "commitAuthor": "yliu",
          "commitDateOld": "22/08/15 1:31 PM",
          "commitNameOld": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 2.49,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    public static ImmutableList\u003cXAttr\u003e loadXAttrs(\n+    public static List\u003cXAttr\u003e loadXAttrs(\n         XAttrFeatureProto proto, final String[] stringTable) {\n-      ImmutableList.Builder\u003cXAttr\u003e b \u003d ImmutableList.builder();\n+      List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n       for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n         int v \u003d xAttrCompactProto.getName();\n         int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n         int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n         ns |\u003d\n             ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n         String name \u003d stringTable[nid];\n         byte[] value \u003d null;\n         if (xAttrCompactProto.getValue() !\u003d null) {\n           value \u003d xAttrCompactProto.getValue().toByteArray();\n         }\n         b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n             .setName(name).setValue(value).build());\n       }\n       \n-      return b.build();\n+      return b;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static List\u003cXAttr\u003e loadXAttrs(\n        XAttrFeatureProto proto, final String[] stringTable) {\n      List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n        int v \u003d xAttrCompactProto.getName();\n        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n        ns |\u003d\n            ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n        String name \u003d stringTable[nid];\n        byte[] value \u003d null;\n        if (xAttrCompactProto.getValue() !\u003d null) {\n          value \u003d xAttrCompactProto.getValue().toByteArray();\n        }\n        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n            .setName(name).setValue(value).build());\n      }\n      \n      return b;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
          "extendedDetails": {
            "oldValue": "ImmutableList\u003cXAttr\u003e",
            "newValue": "List\u003cXAttr\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)\n",
          "commitDate": "25/08/15 1:16 AM",
          "commitName": "eee0d4563c62647cfaaed6605ee713aaf69add78",
          "commitAuthor": "yliu",
          "commitDateOld": "22/08/15 1:31 PM",
          "commitNameOld": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 2.49,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    public static ImmutableList\u003cXAttr\u003e loadXAttrs(\n+    public static List\u003cXAttr\u003e loadXAttrs(\n         XAttrFeatureProto proto, final String[] stringTable) {\n-      ImmutableList.Builder\u003cXAttr\u003e b \u003d ImmutableList.builder();\n+      List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n       for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n         int v \u003d xAttrCompactProto.getName();\n         int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n         int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n         ns |\u003d\n             ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n         String name \u003d stringTable[nid];\n         byte[] value \u003d null;\n         if (xAttrCompactProto.getValue() !\u003d null) {\n           value \u003d xAttrCompactProto.getValue().toByteArray();\n         }\n         b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n             .setName(name).setValue(value).build());\n       }\n       \n-      return b.build();\n+      return b;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static List\u003cXAttr\u003e loadXAttrs(\n        XAttrFeatureProto proto, final String[] stringTable) {\n      List\u003cXAttr\u003e b \u003d new ArrayList\u003c\u003e();\n      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n        int v \u003d xAttrCompactProto.getName();\n        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n        ns |\u003d\n            ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n        String name \u003d stringTable[nid];\n        byte[] value \u003d null;\n        if (xAttrCompactProto.getValue() !\u003d null) {\n          value \u003d xAttrCompactProto.getValue().toByteArray();\n        }\n        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n            .setName(name).setValue(value).build());\n      }\n      \n      return b;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
          "extendedDetails": {}
        }
      ]
    },
    "04915a08141bbe71bdef26e3f539aa8b76f89ac7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6951. Correctly persist raw namespace xattrs to edit log and fsimage. Contributed by Charles Lamb.\n",
      "commitDate": "08/09/14 4:59 PM",
      "commitName": "04915a08141bbe71bdef26e3f539aa8b76f89ac7",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "22/06/14 12:39 AM",
      "commitNameOld": "1e89eba47d0f291b33fc26f9406231fc70b63a87",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 78.68,
      "commitsBetweenForRepo": 618,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n     public static ImmutableList\u003cXAttr\u003e loadXAttrs(\n         XAttrFeatureProto proto, final String[] stringTable) {\n       ImmutableList.Builder\u003cXAttr\u003e b \u003d ImmutableList.builder();\n       for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n         int v \u003d xAttrCompactProto.getName();\n         int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n         int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n+        ns |\u003d\n+            ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n         String name \u003d stringTable[nid];\n         byte[] value \u003d null;\n         if (xAttrCompactProto.getValue() !\u003d null) {\n           value \u003d xAttrCompactProto.getValue().toByteArray();\n         }\n         b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n             .setName(name).setValue(value).build());\n       }\n       \n       return b.build();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static ImmutableList\u003cXAttr\u003e loadXAttrs(\n        XAttrFeatureProto proto, final String[] stringTable) {\n      ImmutableList.Builder\u003cXAttr\u003e b \u003d ImmutableList.builder();\n      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n        int v \u003d xAttrCompactProto.getName();\n        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n        ns |\u003d\n            ((v \u003e\u003e XATTR_NAMESPACE_EXT_OFFSET) \u0026 XATTR_NAMESPACE_EXT_MASK) \u003c\u003c 2;\n        String name \u003d stringTable[nid];\n        byte[] value \u003d null;\n        if (xAttrCompactProto.getValue() !\u003d null) {\n          value \u003d xAttrCompactProto.getValue().toByteArray();\n        }\n        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n            .setName(name).setValue(value).build());\n      }\n      \n      return b.build();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Yintroduced",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,18 @@\n+    public static ImmutableList\u003cXAttr\u003e loadXAttrs(\n+        XAttrFeatureProto proto, final String[] stringTable) {\n+      ImmutableList.Builder\u003cXAttr\u003e b \u003d ImmutableList.builder();\n+      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n+        int v \u003d xAttrCompactProto.getName();\n+        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n+        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n+        String name \u003d stringTable[nid];\n+        byte[] value \u003d null;\n+        if (xAttrCompactProto.getValue() !\u003d null) {\n+          value \u003d xAttrCompactProto.getValue().toByteArray();\n+        }\n+        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n+            .setName(name).setValue(value).build());\n+      }\n+      \n+      return b.build();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static ImmutableList\u003cXAttr\u003e loadXAttrs(\n        XAttrFeatureProto proto, final String[] stringTable) {\n      ImmutableList.Builder\u003cXAttr\u003e b \u003d ImmutableList.builder();\n      for (XAttrCompactProto xAttrCompactProto : proto.getXAttrsList()) {\n        int v \u003d xAttrCompactProto.getName();\n        int nid \u003d (v \u003e\u003e XATTR_NAME_OFFSET) \u0026 XATTR_NAME_MASK;\n        int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n        String name \u003d stringTable[nid];\n        byte[] value \u003d null;\n        if (xAttrCompactProto.getValue() !\u003d null) {\n          value \u003d xAttrCompactProto.getValue().toByteArray();\n        }\n        b.add(new XAttr.Builder().setNameSpace(XATTR_NAMESPACE_VALUES[ns])\n            .setName(name).setValue(value).build());\n      }\n      \n      return b.build();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java"
    }
  }
}