{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QuorumJournalManager.java",
  "functionName": "selectRpcInputStreams",
  "functionId": "selectRpcInputStreams___streams-Collection__EditLogInputStream____fromTxnId-long__onlyDurableTxns-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
  "functionStartLine": 549,
  "functionEndLine": 607,
  "numCommitsSeen": 42,
  "timeTaken": 2702,
  "changeHistory": [
    "eb96a3093ea34a7749410a63c72b6d0a9636d80f",
    "a65bb97f5d8bf2eb817923a69bbb966359f736d7",
    "00e99c65943e64fd696ec715cf21e851b93115f1"
  ],
  "changeHistoryShort": {
    "eb96a3093ea34a7749410a63c72b6d0a9636d80f": "Ybodychange",
    "a65bb97f5d8bf2eb817923a69bbb966359f736d7": "Ybodychange",
    "00e99c65943e64fd696ec715cf21e851b93115f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eb96a3093ea34a7749410a63c72b6d0a9636d80f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14655. [SBN Read] Namenode crashes if one of The JN is down. Contributed by Ayush Saxena.\n",
      "commitDate": "24/09/19 12:46 PM",
      "commitName": "eb96a3093ea34a7749410a63c72b6d0a9636d80f",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "23/08/19 11:33 AM",
      "commitNameOld": "d699022fce756d25956d33e022100111aa0dd22e",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 32.05,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   private void selectRpcInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n       long fromTxnId, boolean onlyDurableTxns) throws IOException {\n     QuorumCall\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e q \u003d\n         loggers.getJournaledEdits(fromTxnId, maxTxnsPerRpc);\n     Map\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e responseMap \u003d\n         loggers.waitForWriteQuorum(q, selectInputStreamsTimeoutMs,\n             \"selectRpcInputStreams\");\n     assert responseMap.size() \u003e\u003d loggers.getMajoritySize() :\n         \"Quorum call returned without a majority\";\n \n     List\u003cInteger\u003e responseCounts \u003d new ArrayList\u003c\u003e();\n     for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n       responseCounts.add(resp.getTxnCount());\n     }\n     Collections.sort(responseCounts);\n     int highestTxnCount \u003d responseCounts.get(responseCounts.size() - 1);\n     if (LOG.isDebugEnabled() || highestTxnCount \u003c 0) {\n       StringBuilder msg \u003d new StringBuilder(\"Requested edits starting from \");\n       msg.append(fromTxnId).append(\"; got \").append(responseMap.size())\n           .append(\" responses: \u003c\");\n       for (Map.Entry\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e ent :\n           responseMap.entrySet()) {\n         msg.append(\"[\").append(ent.getKey()).append(\", \")\n             .append(ent.getValue().getTxnCount()).append(\"],\");\n       }\n       msg.append(\"\u003e\");\n       if (highestTxnCount \u003c 0) {\n         throw new IOException(\"Did not get any valid JournaledEdits \" +\n             \"responses: \" + msg);\n       } else {\n         LOG.debug(msg.toString());\n       }\n     }\n+    // Cancel any outstanding calls to JN\u0027s.\n+    q.cancelCalls();\n \n     int maxAllowedTxns \u003d !onlyDurableTxns ? highestTxnCount :\n         responseCounts.get(responseCounts.size() - loggers.getMajoritySize());\n     if (maxAllowedTxns \u003d\u003d 0) {\n       LOG.debug(\"No new edits available in logs; requested starting from \" +\n           \"ID \" + fromTxnId);\n       return;\n     }\n     LogAction logAction \u003d selectInputStreamLogHelper.record(fromTxnId);\n     if (logAction.shouldLog()) {\n       LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns + \" transactions \" +\n           \"starting from lowest txn ID \" + logAction.getStats(0).getMin() +\n           LogThrottlingHelper.getLogSupressionMessage(logAction));\n     }\n     PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d new PriorityQueue\u003c\u003e(\n         JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n       long endTxnId \u003d fromTxnId - 1 +\n           Math.min(maxAllowedTxns, resp.getTxnCount());\n       allStreams.add(EditLogFileInputStream.fromByteString(\n           resp.getEditLog(), fromTxnId, endTxnId, true));\n     }\n     JournalSet.chainAndMakeRedundantStreams(streams, allStreams, fromTxnId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void selectRpcInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxnId, boolean onlyDurableTxns) throws IOException {\n    QuorumCall\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e q \u003d\n        loggers.getJournaledEdits(fromTxnId, maxTxnsPerRpc);\n    Map\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e responseMap \u003d\n        loggers.waitForWriteQuorum(q, selectInputStreamsTimeoutMs,\n            \"selectRpcInputStreams\");\n    assert responseMap.size() \u003e\u003d loggers.getMajoritySize() :\n        \"Quorum call returned without a majority\";\n\n    List\u003cInteger\u003e responseCounts \u003d new ArrayList\u003c\u003e();\n    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n      responseCounts.add(resp.getTxnCount());\n    }\n    Collections.sort(responseCounts);\n    int highestTxnCount \u003d responseCounts.get(responseCounts.size() - 1);\n    if (LOG.isDebugEnabled() || highestTxnCount \u003c 0) {\n      StringBuilder msg \u003d new StringBuilder(\"Requested edits starting from \");\n      msg.append(fromTxnId).append(\"; got \").append(responseMap.size())\n          .append(\" responses: \u003c\");\n      for (Map.Entry\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e ent :\n          responseMap.entrySet()) {\n        msg.append(\"[\").append(ent.getKey()).append(\", \")\n            .append(ent.getValue().getTxnCount()).append(\"],\");\n      }\n      msg.append(\"\u003e\");\n      if (highestTxnCount \u003c 0) {\n        throw new IOException(\"Did not get any valid JournaledEdits \" +\n            \"responses: \" + msg);\n      } else {\n        LOG.debug(msg.toString());\n      }\n    }\n    // Cancel any outstanding calls to JN\u0027s.\n    q.cancelCalls();\n\n    int maxAllowedTxns \u003d !onlyDurableTxns ? highestTxnCount :\n        responseCounts.get(responseCounts.size() - loggers.getMajoritySize());\n    if (maxAllowedTxns \u003d\u003d 0) {\n      LOG.debug(\"No new edits available in logs; requested starting from \" +\n          \"ID \" + fromTxnId);\n      return;\n    }\n    LogAction logAction \u003d selectInputStreamLogHelper.record(fromTxnId);\n    if (logAction.shouldLog()) {\n      LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns + \" transactions \" +\n          \"starting from lowest txn ID \" + logAction.getStats(0).getMin() +\n          LogThrottlingHelper.getLogSupressionMessage(logAction));\n    }\n    PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d new PriorityQueue\u003c\u003e(\n        JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n      long endTxnId \u003d fromTxnId - 1 +\n          Math.min(maxAllowedTxns, resp.getTxnCount());\n      allStreams.add(EditLogFileInputStream.fromByteString(\n          resp.getEditLog(), fromTxnId, endTxnId, true));\n    }\n    JournalSet.chainAndMakeRedundantStreams(streams, allStreams, fromTxnId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "a65bb97f5d8bf2eb817923a69bbb966359f736d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13791. Limit logging frequency of edit tail related statements. Contributed by Erik Krogen.\n",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "a65bb97f5d8bf2eb817923a69bbb966359f736d7",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "24/12/18 9:34 AM",
      "commitNameOld": "4c9baba06629e3b3f8eddc52afb62c5fbcb06178",
      "commitAuthorOld": "Chao Sun",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n   private void selectRpcInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n       long fromTxnId, boolean onlyDurableTxns) throws IOException {\n     QuorumCall\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e q \u003d\n         loggers.getJournaledEdits(fromTxnId, maxTxnsPerRpc);\n     Map\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e responseMap \u003d\n         loggers.waitForWriteQuorum(q, selectInputStreamsTimeoutMs,\n             \"selectRpcInputStreams\");\n     assert responseMap.size() \u003e\u003d loggers.getMajoritySize() :\n         \"Quorum call returned without a majority\";\n \n     List\u003cInteger\u003e responseCounts \u003d new ArrayList\u003c\u003e();\n     for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n       responseCounts.add(resp.getTxnCount());\n     }\n     Collections.sort(responseCounts);\n     int highestTxnCount \u003d responseCounts.get(responseCounts.size() - 1);\n     if (LOG.isDebugEnabled() || highestTxnCount \u003c 0) {\n       StringBuilder msg \u003d new StringBuilder(\"Requested edits starting from \");\n       msg.append(fromTxnId).append(\"; got \").append(responseMap.size())\n           .append(\" responses: \u003c\");\n       for (Map.Entry\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e ent :\n           responseMap.entrySet()) {\n         msg.append(\"[\").append(ent.getKey()).append(\", \")\n             .append(ent.getValue().getTxnCount()).append(\"],\");\n       }\n       msg.append(\"\u003e\");\n       if (highestTxnCount \u003c 0) {\n         throw new IOException(\"Did not get any valid JournaledEdits \" +\n             \"responses: \" + msg);\n       } else {\n         LOG.debug(msg.toString());\n       }\n     }\n \n     int maxAllowedTxns \u003d !onlyDurableTxns ? highestTxnCount :\n         responseCounts.get(responseCounts.size() - loggers.getMajoritySize());\n     if (maxAllowedTxns \u003d\u003d 0) {\n       LOG.debug(\"No new edits available in logs; requested starting from \" +\n           \"ID \" + fromTxnId);\n       return;\n     }\n-    LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns +\n-        \" transactions starting from \" + fromTxnId);\n+    LogAction logAction \u003d selectInputStreamLogHelper.record(fromTxnId);\n+    if (logAction.shouldLog()) {\n+      LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns + \" transactions \" +\n+          \"starting from lowest txn ID \" + logAction.getStats(0).getMin() +\n+          LogThrottlingHelper.getLogSupressionMessage(logAction));\n+    }\n     PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d new PriorityQueue\u003c\u003e(\n         JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n       long endTxnId \u003d fromTxnId - 1 +\n           Math.min(maxAllowedTxns, resp.getTxnCount());\n       allStreams.add(EditLogFileInputStream.fromByteString(\n           resp.getEditLog(), fromTxnId, endTxnId, true));\n     }\n     JournalSet.chainAndMakeRedundantStreams(streams, allStreams, fromTxnId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void selectRpcInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxnId, boolean onlyDurableTxns) throws IOException {\n    QuorumCall\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e q \u003d\n        loggers.getJournaledEdits(fromTxnId, maxTxnsPerRpc);\n    Map\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e responseMap \u003d\n        loggers.waitForWriteQuorum(q, selectInputStreamsTimeoutMs,\n            \"selectRpcInputStreams\");\n    assert responseMap.size() \u003e\u003d loggers.getMajoritySize() :\n        \"Quorum call returned without a majority\";\n\n    List\u003cInteger\u003e responseCounts \u003d new ArrayList\u003c\u003e();\n    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n      responseCounts.add(resp.getTxnCount());\n    }\n    Collections.sort(responseCounts);\n    int highestTxnCount \u003d responseCounts.get(responseCounts.size() - 1);\n    if (LOG.isDebugEnabled() || highestTxnCount \u003c 0) {\n      StringBuilder msg \u003d new StringBuilder(\"Requested edits starting from \");\n      msg.append(fromTxnId).append(\"; got \").append(responseMap.size())\n          .append(\" responses: \u003c\");\n      for (Map.Entry\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e ent :\n          responseMap.entrySet()) {\n        msg.append(\"[\").append(ent.getKey()).append(\", \")\n            .append(ent.getValue().getTxnCount()).append(\"],\");\n      }\n      msg.append(\"\u003e\");\n      if (highestTxnCount \u003c 0) {\n        throw new IOException(\"Did not get any valid JournaledEdits \" +\n            \"responses: \" + msg);\n      } else {\n        LOG.debug(msg.toString());\n      }\n    }\n\n    int maxAllowedTxns \u003d !onlyDurableTxns ? highestTxnCount :\n        responseCounts.get(responseCounts.size() - loggers.getMajoritySize());\n    if (maxAllowedTxns \u003d\u003d 0) {\n      LOG.debug(\"No new edits available in logs; requested starting from \" +\n          \"ID \" + fromTxnId);\n      return;\n    }\n    LogAction logAction \u003d selectInputStreamLogHelper.record(fromTxnId);\n    if (logAction.shouldLog()) {\n      LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns + \" transactions \" +\n          \"starting from lowest txn ID \" + logAction.getStats(0).getMin() +\n          LogThrottlingHelper.getLogSupressionMessage(logAction));\n    }\n    PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d new PriorityQueue\u003c\u003e(\n        JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n      long endTxnId \u003d fromTxnId - 1 +\n          Math.min(maxAllowedTxns, resp.getTxnCount());\n      allStreams.add(EditLogFileInputStream.fromByteString(\n          resp.getEditLog(), fromTxnId, endTxnId, true));\n    }\n    JournalSet.chainAndMakeRedundantStreams(streams, allStreams, fromTxnId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "00e99c65943e64fd696ec715cf21e851b93115f1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13609. [SBN read] Edit Tail Fast Path Part 3: NameNode-side changes to support tailing edits via RPC. Contributed by Erik Krogen.\n",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "00e99c65943e64fd696ec715cf21e851b93115f1",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,53 @@\n+  private void selectRpcInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n+      long fromTxnId, boolean onlyDurableTxns) throws IOException {\n+    QuorumCall\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e q \u003d\n+        loggers.getJournaledEdits(fromTxnId, maxTxnsPerRpc);\n+    Map\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e responseMap \u003d\n+        loggers.waitForWriteQuorum(q, selectInputStreamsTimeoutMs,\n+            \"selectRpcInputStreams\");\n+    assert responseMap.size() \u003e\u003d loggers.getMajoritySize() :\n+        \"Quorum call returned without a majority\";\n+\n+    List\u003cInteger\u003e responseCounts \u003d new ArrayList\u003c\u003e();\n+    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n+      responseCounts.add(resp.getTxnCount());\n+    }\n+    Collections.sort(responseCounts);\n+    int highestTxnCount \u003d responseCounts.get(responseCounts.size() - 1);\n+    if (LOG.isDebugEnabled() || highestTxnCount \u003c 0) {\n+      StringBuilder msg \u003d new StringBuilder(\"Requested edits starting from \");\n+      msg.append(fromTxnId).append(\"; got \").append(responseMap.size())\n+          .append(\" responses: \u003c\");\n+      for (Map.Entry\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e ent :\n+          responseMap.entrySet()) {\n+        msg.append(\"[\").append(ent.getKey()).append(\", \")\n+            .append(ent.getValue().getTxnCount()).append(\"],\");\n+      }\n+      msg.append(\"\u003e\");\n+      if (highestTxnCount \u003c 0) {\n+        throw new IOException(\"Did not get any valid JournaledEdits \" +\n+            \"responses: \" + msg);\n+      } else {\n+        LOG.debug(msg.toString());\n+      }\n+    }\n+\n+    int maxAllowedTxns \u003d !onlyDurableTxns ? highestTxnCount :\n+        responseCounts.get(responseCounts.size() - loggers.getMajoritySize());\n+    if (maxAllowedTxns \u003d\u003d 0) {\n+      LOG.debug(\"No new edits available in logs; requested starting from \" +\n+          \"ID \" + fromTxnId);\n+      return;\n+    }\n+    LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns +\n+        \" transactions starting from \" + fromTxnId);\n+    PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d new PriorityQueue\u003c\u003e(\n+        JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);\n+    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n+      long endTxnId \u003d fromTxnId - 1 +\n+          Math.min(maxAllowedTxns, resp.getTxnCount());\n+      allStreams.add(EditLogFileInputStream.fromByteString(\n+          resp.getEditLog(), fromTxnId, endTxnId, true));\n+    }\n+    JournalSet.chainAndMakeRedundantStreams(streams, allStreams, fromTxnId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void selectRpcInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxnId, boolean onlyDurableTxns) throws IOException {\n    QuorumCall\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e q \u003d\n        loggers.getJournaledEdits(fromTxnId, maxTxnsPerRpc);\n    Map\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e responseMap \u003d\n        loggers.waitForWriteQuorum(q, selectInputStreamsTimeoutMs,\n            \"selectRpcInputStreams\");\n    assert responseMap.size() \u003e\u003d loggers.getMajoritySize() :\n        \"Quorum call returned without a majority\";\n\n    List\u003cInteger\u003e responseCounts \u003d new ArrayList\u003c\u003e();\n    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n      responseCounts.add(resp.getTxnCount());\n    }\n    Collections.sort(responseCounts);\n    int highestTxnCount \u003d responseCounts.get(responseCounts.size() - 1);\n    if (LOG.isDebugEnabled() || highestTxnCount \u003c 0) {\n      StringBuilder msg \u003d new StringBuilder(\"Requested edits starting from \");\n      msg.append(fromTxnId).append(\"; got \").append(responseMap.size())\n          .append(\" responses: \u003c\");\n      for (Map.Entry\u003cAsyncLogger, GetJournaledEditsResponseProto\u003e ent :\n          responseMap.entrySet()) {\n        msg.append(\"[\").append(ent.getKey()).append(\", \")\n            .append(ent.getValue().getTxnCount()).append(\"],\");\n      }\n      msg.append(\"\u003e\");\n      if (highestTxnCount \u003c 0) {\n        throw new IOException(\"Did not get any valid JournaledEdits \" +\n            \"responses: \" + msg);\n      } else {\n        LOG.debug(msg.toString());\n      }\n    }\n\n    int maxAllowedTxns \u003d !onlyDurableTxns ? highestTxnCount :\n        responseCounts.get(responseCounts.size() - loggers.getMajoritySize());\n    if (maxAllowedTxns \u003d\u003d 0) {\n      LOG.debug(\"No new edits available in logs; requested starting from \" +\n          \"ID \" + fromTxnId);\n      return;\n    }\n    LOG.info(\"Selected loggers with \u003e\u003d \" + maxAllowedTxns +\n        \" transactions starting from \" + fromTxnId);\n    PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d new PriorityQueue\u003c\u003e(\n        JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (GetJournaledEditsResponseProto resp : responseMap.values()) {\n      long endTxnId \u003d fromTxnId - 1 +\n          Math.min(maxAllowedTxns, resp.getTxnCount());\n      allStreams.add(EditLogFileInputStream.fromByteString(\n          resp.getEditLog(), fromTxnId, endTxnId, true));\n    }\n    JournalSet.chainAndMakeRedundantStreams(streams, allStreams, fromTxnId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java"
    }
  }
}