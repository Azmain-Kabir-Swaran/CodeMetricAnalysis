{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Log4jWarningErrorMetricsAppender.java",
  "functionName": "getCounts",
  "functionId": "getCounts___map-SortedMap__Long,Integer____cutoffs-List__Long__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java",
  "functionStartLine": 261,
  "functionEndLine": 280,
  "numCommitsSeen": 2,
  "timeTaken": 560,
  "changeHistory": [
    "bad070fe15a642cc6f3a165612fbd272187e03cb"
  ],
  "changeHistoryShort": {
    "bad070fe15a642cc6f3a165612fbd272187e03cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bad070fe15a642cc6f3a165612fbd272187e03cb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2901. Add errors and warning metrics page to RM, NM web UI. (Varun Vasudev via wangda)\n",
      "commitDate": "02/04/15 5:23 PM",
      "commitName": "bad070fe15a642cc6f3a165612fbd272187e03cb",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,20 @@\n+  private List\u003cInteger\u003e getCounts(SortedMap\u003cLong, Integer\u003e map,\n+      List\u003cLong\u003e cutoffs) {\n+    List\u003cInteger\u003e ret \u003d new ArrayList\u003c\u003e();\n+    Long largestCutoff \u003d Collections.min(cutoffs);\n+    for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n+      ret.add(0);\n+    }\n+    synchronized (lock) {\n+      Map\u003cLong, Integer\u003e submap \u003d map.tailMap(largestCutoff);\n+      for (Map.Entry\u003cLong, Integer\u003e entry : submap.entrySet()) {\n+        for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n+          if (entry.getKey() \u003e\u003d cutoffs.get(i)) {\n+            int tmp \u003d ret.get(i);\n+            ret.set(i, tmp + entry.getValue());\n+          }\n+        }\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cInteger\u003e getCounts(SortedMap\u003cLong, Integer\u003e map,\n      List\u003cLong\u003e cutoffs) {\n    List\u003cInteger\u003e ret \u003d new ArrayList\u003c\u003e();\n    Long largestCutoff \u003d Collections.min(cutoffs);\n    for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n      ret.add(0);\n    }\n    synchronized (lock) {\n      Map\u003cLong, Integer\u003e submap \u003d map.tailMap(largestCutoff);\n      for (Map.Entry\u003cLong, Integer\u003e entry : submap.entrySet()) {\n        for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n          if (entry.getKey() \u003e\u003d cutoffs.get(i)) {\n            int tmp \u003d ret.get(i);\n            ret.set(i, tmp + entry.getValue());\n          }\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java"
    }
  }
}