{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileBasedKeyStoresFactory.java",
  "functionName": "init",
  "functionId": "init___mode-SSLFactory.Mode",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
  "functionStartLine": 135,
  "functionEndLine": 236,
  "numCommitsSeen": 19,
  "timeTaken": 2984,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "9130af3f74a7923fff3f80360ba043ab2c6558a9",
    "a2b5d602201a4f619f6a68ec2168a884190d8de6",
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
    "71269f70971dc7aa7bcb5e78b19cb3f04fdaa2f4",
    "a6cfaab5aa18c235db8543ecf65607f5f38cabc8",
    "0634b42366d396bc2dd3f5f6c6189665f0b9abb0",
    "04b0f6851bcfcd8986868f06d64e4339ef8609de",
    "0bdeb7d143e1567cbf2a409d4cab00ab9d71a4c8",
    "af7b7667f52869d88fd99738ea7e1affeccb60ce",
    "50b20477fd374771a1fe150be74565d4e135a13d",
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "9130af3f74a7923fff3f80360ba043ab2c6558a9": "Ybodychange",
    "a2b5d602201a4f619f6a68ec2168a884190d8de6": "Ybodychange",
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": "Ybodychange",
    "71269f70971dc7aa7bcb5e78b19cb3f04fdaa2f4": "Ybodychange",
    "a6cfaab5aa18c235db8543ecf65607f5f38cabc8": "Ybodychange",
    "0634b42366d396bc2dd3f5f6c6189665f0b9abb0": "Ybodychange",
    "04b0f6851bcfcd8986868f06d64e4339ef8609de": "Ybodychange",
    "0bdeb7d143e1567cbf2a409d4cab00ab9d71a4c8": "Ybodychange",
    "af7b7667f52869d88fd99738ea7e1affeccb60ce": "Ybodychange",
    "50b20477fd374771a1fe150be74565d4e135a13d": "Ybodychange",
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 203.63,
      "commitsBetweenForRepo": 1506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,102 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n           SSLFactory.SSL_REQUIRE_CLIENT_CERT_DEFAULT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d getPassword(\n           conf, keyPasswordProperty, keystorePassword);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n       }\n \n-      InputStream is \u003d new FileInputStream(keystoreLocation);\n+      InputStream is \u003d Files.newInputStream(Paths.get(keystoreLocation));\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n       }\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (!truststoreLocation.isEmpty()) {\n       String passwordProperty \u003d resolvePropertyName(mode,\n           SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n       String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (truststorePassword.isEmpty()) {\n         // An empty trust store password is legal; the trust store password\n         // is only required when writing to a trust store. Otherwise it\u0027s\n         // an optional integrity check.\n         truststorePassword \u003d null;\n       }\n       long truststoreReloadInterval \u003d\n           conf.getLong(\n               resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n               DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n       }\n \n       trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n           truststoreLocation,\n           truststorePassword,\n           truststoreReloadInterval);\n       trustManager.init();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n       }\n       trustManagers \u003d new TrustManager[]{trustManager};\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n             \"no TrustStore will be loaded\");\n       }\n       trustManagers \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.SSL_REQUIRE_CLIENT_CERT_DEFAULT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d getPassword(\n          conf, keyPasswordProperty, keystorePassword);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n      }\n\n      InputStream is \u003d Files.newInputStream(Paths.get(keystoreLocation));\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n      }\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        // An empty trust store password is legal; the trust store password\n        // is only required when writing to a trust store. Otherwise it\u0027s\n        // an optional integrity check.\n        truststorePassword \u003d null;\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n      }\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      }\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n            \"no TrustStore will be loaded\");\n      }\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "9130af3f74a7923fff3f80360ba043ab2c6558a9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13955. Replace deprecated HttpServer2 and SSLFactory constants. Contributed by John Zhuge.\n",
      "commitDate": "18/01/17 1:11 AM",
      "commitName": "9130af3f74a7923fff3f80360ba043ab2c6558a9",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/12/16 5:36 PM",
      "commitNameOld": "a2b5d602201a4f619f6a68ec2168a884190d8de6",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 43.32,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,102 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n-          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n+          SSLFactory.SSL_REQUIRE_CLIENT_CERT_DEFAULT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d getPassword(\n           conf, keyPasswordProperty, keystorePassword);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n       }\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n       }\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (!truststoreLocation.isEmpty()) {\n       String passwordProperty \u003d resolvePropertyName(mode,\n           SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n       String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (truststorePassword.isEmpty()) {\n         // An empty trust store password is legal; the trust store password\n         // is only required when writing to a trust store. Otherwise it\u0027s\n         // an optional integrity check.\n         truststorePassword \u003d null;\n       }\n       long truststoreReloadInterval \u003d\n           conf.getLong(\n               resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n               DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n       }\n \n       trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n           truststoreLocation,\n           truststorePassword,\n           truststoreReloadInterval);\n       trustManager.init();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n       }\n       trustManagers \u003d new TrustManager[]{trustManager};\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n             \"no TrustStore will be loaded\");\n       }\n       trustManagers \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.SSL_REQUIRE_CLIENT_CERT_DEFAULT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d getPassword(\n          conf, keyPasswordProperty, keystorePassword);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n      }\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n      }\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        // An empty trust store password is legal; the trust store password\n        // is only required when writing to a trust store. Otherwise it\u0027s\n        // an optional integrity check.\n        truststorePassword \u003d null;\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n      }\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      }\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n            \"no TrustStore will be loaded\");\n      }\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "a2b5d602201a4f619f6a68ec2168a884190d8de6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13864. KMS should not require truststore password. Contributed by Mike Yoder.\n",
      "commitDate": "05/12/16 5:36 PM",
      "commitName": "a2b5d602201a4f619f6a68ec2168a884190d8de6",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "22/02/16 2:13 PM",
      "commitNameOld": "a2fdfff02daef85b651eda31e99868986aab5b28",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 287.14,
      "commitsBetweenForRepo": 2075,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,102 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n           SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d getPassword(\n           conf, keyPasswordProperty, keystorePassword);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n       }\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n       }\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (!truststoreLocation.isEmpty()) {\n       String passwordProperty \u003d resolvePropertyName(mode,\n           SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n       String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (truststorePassword.isEmpty()) {\n-        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n-            \"\u0027 has not been set in the ssl configuration file.\");\n+        // An empty trust store password is legal; the trust store password\n+        // is only required when writing to a trust store. Otherwise it\u0027s\n+        // an optional integrity check.\n+        truststorePassword \u003d null;\n       }\n       long truststoreReloadInterval \u003d\n           conf.getLong(\n               resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n               DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n       }\n \n       trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n           truststoreLocation,\n           truststorePassword,\n           truststoreReloadInterval);\n       trustManager.init();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n       }\n       trustManagers \u003d new TrustManager[]{trustManager};\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n             \"no TrustStore will be loaded\");\n       }\n       trustManagers \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d getPassword(\n          conf, keyPasswordProperty, keystorePassword);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n      }\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n      }\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        // An empty trust store password is legal; the trust store password\n        // is only required when writing to a trust store. Otherwise it\u0027s\n        // an optional integrity check.\n        truststorePassword \u003d null;\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n      }\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      }\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n            \"no TrustStore will be loaded\");\n      }\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11741. Add LOG.isDebugEnabled() guard for some LOG.debug(). Contributed by Walter Su.\n",
      "commitDate": "25/03/15 12:36 AM",
      "commitName": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 22.1,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,100 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n           SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d getPassword(\n           conf, keyPasswordProperty, keystorePassword);\n-      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n+      }\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n-      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n+      }\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (!truststoreLocation.isEmpty()) {\n       String passwordProperty \u003d resolvePropertyName(mode,\n           SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n       String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (truststorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n             \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       long truststoreReloadInterval \u003d\n           conf.getLong(\n               resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n               DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n-      LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n+      }\n \n       trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n           truststoreLocation,\n           truststorePassword,\n           truststoreReloadInterval);\n       trustManager.init();\n-      LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n+      }\n       trustManagers \u003d new TrustManager[]{trustManager};\n     } else {\n-      LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n-          \"no TrustStore will be loaded\");\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n+            \"no TrustStore will be loaded\");\n+      }\n       trustManagers \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d getPassword(\n          conf, keyPasswordProperty, keystorePassword);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n      }\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n      }\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n            \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n      }\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      }\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n            \"no TrustStore will be loaded\");\n      }\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "71269f70971dc7aa7bcb5e78b19cb3f04fdaa2f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6998. warning message \u0027ssl.client.truststore.location has not been set\u0027 gets printed for hftp command. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "05/09/14 11:14 AM",
      "commitName": "71269f70971dc7aa7bcb5e78b19cb3f04fdaa2f4",
      "commitAuthor": "arp",
      "commitDateOld": "05/08/14 2:29 PM",
      "commitNameOld": "a6cfaab5aa18c235db8543ecf65607f5f38cabc8",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 30.86,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,90 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n           SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d getPassword(\n           conf, keyPasswordProperty, keystorePassword);\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (!truststoreLocation.isEmpty()) {\n       String passwordProperty \u003d resolvePropertyName(mode,\n           SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n       String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (truststorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n             \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       long truststoreReloadInterval \u003d\n           conf.getLong(\n               resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n               DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n       LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n \n       trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n           truststoreLocation,\n           truststorePassword,\n           truststoreReloadInterval);\n       trustManager.init();\n       LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n       trustManagers \u003d new TrustManager[]{trustManager};\n     } else {\n-      LOG.warn(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n+      LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n           \"no TrustStore will be loaded\");\n       trustManagers \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d getPassword(\n          conf, keyPasswordProperty, keystorePassword);\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n            \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      LOG.debug(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n          \"no TrustStore will be loaded\");\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "a6cfaab5aa18c235db8543ecf65607f5f38cabc8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10933. FileBasedKeyStoresFactory Should use Configuration.getPassword for SSL Passwords. (lmccay via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616008 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 2:29 PM",
      "commitName": "a6cfaab5aa18c235db8543ecf65607f5f38cabc8",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/06/14 12:23 AM",
      "commitNameOld": "0634b42366d396bc2dd3f5f6c6189665f0b9abb0",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 63.59,
      "commitsBetweenForRepo": 423,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,90 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n           SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n-      String keystorePassword \u003d conf.get(passwordProperty, \"\");\n+      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n-      keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n+      keystoreKeyPassword \u003d getPassword(\n+          conf, keyPasswordProperty, keystorePassword);\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (!truststoreLocation.isEmpty()) {\n       String passwordProperty \u003d resolvePropertyName(mode,\n           SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n-      String truststorePassword \u003d conf.get(passwordProperty, \"\");\n+      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n       if (truststorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n             \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       long truststoreReloadInterval \u003d\n           conf.getLong(\n               resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n               DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n       LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n \n       trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n           truststoreLocation,\n           truststorePassword,\n           truststoreReloadInterval);\n       trustManager.init();\n       LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n       trustManagers \u003d new TrustManager[]{trustManager};\n     } else {\n       LOG.warn(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n           \"no TrustStore will be loaded\");\n       trustManagers \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d getPassword(\n          conf, keyPasswordProperty, keystorePassword);\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d getPassword(conf, passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n            \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      LOG.warn(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n          \"no TrustStore will be loaded\");\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "0634b42366d396bc2dd3f5f6c6189665f0b9abb0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10658. SSLFactory expects truststores being configured. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599435 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/14 12:23 AM",
      "commitName": "0634b42366d396bc2dd3f5f6c6189665f0b9abb0",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "29/05/14 2:39 PM",
      "commitNameOld": "04b0f6851bcfcd8986868f06d64e4339ef8609de",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 4.41,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,89 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n           SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d conf.get(passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n-    if (truststoreLocation.isEmpty()) {\n-      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n-        \"\u0027 has not been set in the ssl configuration file.\");\n+    if (!truststoreLocation.isEmpty()) {\n+      String passwordProperty \u003d resolvePropertyName(mode,\n+          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n+      String truststorePassword \u003d conf.get(passwordProperty, \"\");\n+      if (truststorePassword.isEmpty()) {\n+        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n+            \"\u0027 has not been set in the ssl configuration file.\");\n+      }\n+      long truststoreReloadInterval \u003d\n+          conf.getLong(\n+              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n+              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n+\n+      LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n+\n+      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n+          truststoreLocation,\n+          truststorePassword,\n+          truststoreReloadInterval);\n+      trustManager.init();\n+      LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n+      trustManagers \u003d new TrustManager[]{trustManager};\n+    } else {\n+      LOG.warn(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n+          \"no TrustStore will be loaded\");\n+      trustManagers \u003d null;\n     }\n-\n-    String passwordProperty \u003d resolvePropertyName(mode,\n-                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n-    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n-    if (truststorePassword.isEmpty()) {\n-      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n-        \"\u0027 has not been set in the ssl configuration file.\");\n-    }\n-    long truststoreReloadInterval \u003d\n-      conf.getLong(\n-        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n-        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n-\n-    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n-\n-    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n-                                                 truststoreLocation,\n-                                                 truststorePassword,\n-                                                 truststoreReloadInterval);\n-    trustManager.init();\n-    LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n-\n-    trustManagers \u003d new TrustManager[]{trustManager};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d conf.get(passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (!truststoreLocation.isEmpty()) {\n      String passwordProperty \u003d resolvePropertyName(mode,\n          SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n      String truststorePassword \u003d conf.get(passwordProperty, \"\");\n      if (truststorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n            \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      long truststoreReloadInterval \u003d\n          conf.getLong(\n              resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n              DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n      LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n      trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n          truststoreLocation,\n          truststorePassword,\n          truststoreReloadInterval);\n      trustManager.init();\n      LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n      trustManagers \u003d new TrustManager[]{trustManager};\n    } else {\n      LOG.warn(\"The property \u0027\" + locationProperty + \"\u0027 has not been set, \" +\n          \"no TrustStore will be loaded\");\n      trustManagers \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "04b0f6851bcfcd8986868f06d64e4339ef8609de": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10639. FileBasedKeyStoresFactory initialization is not using default for SSL_REQUIRE_CLIENT_CERT_KEY. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 2:39 PM",
      "commitName": "04b0f6851bcfcd8986868f06d64e4339ef8609de",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "23/09/13 10:48 AM",
      "commitNameOld": "0bdeb7d143e1567cbf2a409d4cab00ab9d71a4c8",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 248.16,
      "commitsBetweenForRepo": 1695,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,89 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n-      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n+      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n+          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       String keystorePassword \u003d conf.get(passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String keyPasswordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n       // Key password defaults to the same value as store password for\n       // compatibility with legacy configurations that did not use a separate\n       // configuration property for key password.\n       keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n     keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                  keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (truststoreLocation.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n \n     String passwordProperty \u003d resolvePropertyName(mode,\n                                                   SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n     String truststorePassword \u003d conf.get(passwordProperty, \"\");\n     if (truststorePassword.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n     long truststoreReloadInterval \u003d\n       conf.getLong(\n         resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n         DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n     LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n \n     trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                  truststoreLocation,\n                                                  truststorePassword,\n                                                  truststoreReloadInterval);\n     trustManager.init();\n     LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n \n     trustManagers \u003d new TrustManager[]{trustManager};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY,\n          SSLFactory.DEFAULT_SSL_REQUIRE_CLIENT_CERT);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d conf.get(passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (truststoreLocation.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n\n    String passwordProperty \u003d resolvePropertyName(mode,\n                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n    if (truststorePassword.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n    long truststoreReloadInterval \u003d\n      conf.getLong(\n        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                 truststoreLocation,\n                                                 truststorePassword,\n                                                 truststoreReloadInterval);\n    trustManager.init();\n    LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n\n    trustManagers \u003d new TrustManager[]{trustManager};\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "0bdeb7d143e1567cbf2a409d4cab00ab9d71a4c8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9977. Hadoop services won\u0027t start with different keypass and keystorepass when https is enabled. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/13 10:48 AM",
      "commitName": "0bdeb7d143e1567cbf2a409d4cab00ab9d71a4c8",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/03/13 11:57 AM",
      "commitNameOld": "af7b7667f52869d88fd99738ea7e1affeccb60ce",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 180.95,
      "commitsBetweenForRepo": 1080,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,88 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n-    String keystorePassword \u003d null;\n+    String keystoreKeyPassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n-      keystorePassword \u003d conf.get(passwordProperty, \"\");\n+      String keystorePassword \u003d conf.get(passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n+      String keyPasswordProperty \u003d\n+        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n+      // Key password defaults to the same value as store password for\n+      // compatibility with legacy configurations that did not use a separate\n+      // configuration property for key password.\n+      keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n         .getInstance(SSLFactory.SSLCERTIFICATE);\n       \n-    keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n-                                 keystorePassword.toCharArray() : null);\n+    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n+                                 keystoreKeyPassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (truststoreLocation.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n \n     String passwordProperty \u003d resolvePropertyName(mode,\n                                                   SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n     String truststorePassword \u003d conf.get(passwordProperty, \"\");\n     if (truststorePassword.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n     long truststoreReloadInterval \u003d\n       conf.getLong(\n         resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n         DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n     LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n \n     trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                  truststoreLocation,\n                                                  truststorePassword,\n                                                  truststoreReloadInterval);\n     trustManager.init();\n     LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n \n     trustManagers \u003d new TrustManager[]{trustManager};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystoreKeyPassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      String keystorePassword \u003d conf.get(passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String keyPasswordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_KEYPASSWORD_TPL_KEY);\n      // Key password defaults to the same value as store password for\n      // compatibility with legacy configurations that did not use a separate\n      // configuration property for key password.\n      keystoreKeyPassword \u003d conf.get(keyPasswordProperty, keystorePassword);\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystoreKeyPassword !\u003d null) ?\n                                 keystoreKeyPassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (truststoreLocation.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n\n    String passwordProperty \u003d resolvePropertyName(mode,\n                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n    if (truststorePassword.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n    long truststoreReloadInterval \u003d\n      conf.getLong(\n        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                 truststoreLocation,\n                                                 truststorePassword,\n                                                 truststoreReloadInterval);\n    trustManager.init();\n    LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n\n    trustManagers \u003d new TrustManager[]{trustManager};\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "af7b7667f52869d88fd99738ea7e1affeccb60ce": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9430. TestSSLFactory fails on IBM JVM. Contributed by Amir Sanjar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461268 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/13 11:57 AM",
      "commitName": "af7b7667f52869d88fd99738ea7e1affeccb60ce",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "04/10/12 10:32 AM",
      "commitNameOld": "50b20477fd374771a1fe150be74565d4e135a13d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 173.06,
      "commitsBetweenForRepo": 819,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,82 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystorePassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       keystorePassword \u003d conf.get(passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n       LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n-    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory.getInstance(\"SunX509\");\n+    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n+        .getInstance(SSLFactory.SSLCERTIFICATE);\n+      \n     keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n                                  keystorePassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (truststoreLocation.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n \n     String passwordProperty \u003d resolvePropertyName(mode,\n                                                   SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n     String truststorePassword \u003d conf.get(passwordProperty, \"\");\n     if (truststorePassword.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n     long truststoreReloadInterval \u003d\n       conf.getLong(\n         resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n         DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n     LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n \n     trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                  truststoreLocation,\n                                                  truststorePassword,\n                                                  truststoreReloadInterval);\n     trustManager.init();\n     LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n \n     trustManagers \u003d new TrustManager[]{trustManager};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystorePassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      keystorePassword \u003d conf.get(passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory\n        .getInstance(SSLFactory.SSLCERTIFICATE);\n      \n    keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n                                 keystorePassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (truststoreLocation.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n\n    String passwordProperty \u003d resolvePropertyName(mode,\n                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n    if (truststorePassword.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n    long truststoreReloadInterval \u003d\n      conf.getLong(\n        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                 truststoreLocation,\n                                                 truststorePassword,\n                                                 truststoreReloadInterval);\n    trustManager.init();\n    LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n\n    trustManagers \u003d new TrustManager[]{trustManager};\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "50b20477fd374771a1fe150be74565d4e135a13d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8881. FileBasedKeyStoresFactory initialization logging should be debug not info. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1394165 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/12 10:32 AM",
      "commitName": "50b20477fd374771a1fe150be74565d4e135a13d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 40.69,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public void init(SSLFactory.Mode mode)\n     throws IOException, GeneralSecurityException {\n \n     boolean requireClientCert \u003d\n       conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n \n     // certificate store\n     String keystoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n     KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n     String keystorePassword \u003d null;\n     if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n       String locationProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n       String keystoreLocation \u003d conf.get(locationProperty, \"\");\n       if (keystoreLocation.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       String passwordProperty \u003d\n         resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n       keystorePassword \u003d conf.get(passwordProperty, \"\");\n       if (keystorePassword.isEmpty()) {\n         throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n           \"\u0027 has not been set in the ssl configuration file.\");\n       }\n       LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n \n       InputStream is \u003d new FileInputStream(keystoreLocation);\n       try {\n         keystore.load(is, keystorePassword.toCharArray());\n       } finally {\n         is.close();\n       }\n-      LOG.info(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n+      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n     } else {\n       keystore.load(null, null);\n     }\n     KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory.getInstance(\"SunX509\");\n     keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n                                  keystorePassword.toCharArray() : null);\n     keyManagers \u003d keyMgrFactory.getKeyManagers();\n \n     //trust store\n     String truststoreType \u003d\n       conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n                DEFAULT_KEYSTORE_TYPE);\n \n     String locationProperty \u003d\n       resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n     String truststoreLocation \u003d conf.get(locationProperty, \"\");\n     if (truststoreLocation.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n \n     String passwordProperty \u003d resolvePropertyName(mode,\n                                                   SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n     String truststorePassword \u003d conf.get(passwordProperty, \"\");\n     if (truststorePassword.isEmpty()) {\n       throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n         \"\u0027 has not been set in the ssl configuration file.\");\n     }\n     long truststoreReloadInterval \u003d\n       conf.getLong(\n         resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n         DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n \n     LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n \n     trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                  truststoreLocation,\n                                                  truststorePassword,\n                                                  truststoreReloadInterval);\n     trustManager.init();\n-    LOG.info(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n+    LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n \n     trustManagers \u003d new TrustManager[]{trustManager};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystorePassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      keystorePassword \u003d conf.get(passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.debug(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory.getInstance(\"SunX509\");\n    keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n                                 keystorePassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (truststoreLocation.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n\n    String passwordProperty \u003d resolvePropertyName(mode,\n                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n    if (truststorePassword.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n    long truststoreReloadInterval \u003d\n      conf.getLong(\n        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                 truststoreLocation,\n                                                 truststorePassword,\n                                                 truststoreReloadInterval);\n    trustManager.init();\n    LOG.debug(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n\n    trustManagers \u003d new TrustManager[]{trustManager};\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java",
      "extendedDetails": {}
    },
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4417. add support for encrypted shuffle (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/12 6:23 AM",
      "commitName": "9d16c9354b0c05edb30d23003dcdec4cc44ed925",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,80 @@\n+  public void init(SSLFactory.Mode mode)\n+    throws IOException, GeneralSecurityException {\n+\n+    boolean requireClientCert \u003d\n+      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n+\n+    // certificate store\n+    String keystoreType \u003d\n+      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n+               DEFAULT_KEYSTORE_TYPE);\n+    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n+    String keystorePassword \u003d null;\n+    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n+      String locationProperty \u003d\n+        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n+      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n+      if (keystoreLocation.isEmpty()) {\n+        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n+          \"\u0027 has not been set in the ssl configuration file.\");\n+      }\n+      String passwordProperty \u003d\n+        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n+      keystorePassword \u003d conf.get(passwordProperty, \"\");\n+      if (keystorePassword.isEmpty()) {\n+        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n+          \"\u0027 has not been set in the ssl configuration file.\");\n+      }\n+      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n+\n+      InputStream is \u003d new FileInputStream(keystoreLocation);\n+      try {\n+        keystore.load(is, keystorePassword.toCharArray());\n+      } finally {\n+        is.close();\n+      }\n+      LOG.info(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n+    } else {\n+      keystore.load(null, null);\n+    }\n+    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory.getInstance(\"SunX509\");\n+    keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n+                                 keystorePassword.toCharArray() : null);\n+    keyManagers \u003d keyMgrFactory.getKeyManagers();\n+\n+    //trust store\n+    String truststoreType \u003d\n+      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n+               DEFAULT_KEYSTORE_TYPE);\n+\n+    String locationProperty \u003d\n+      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n+    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n+    if (truststoreLocation.isEmpty()) {\n+      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n+        \"\u0027 has not been set in the ssl configuration file.\");\n+    }\n+\n+    String passwordProperty \u003d resolvePropertyName(mode,\n+                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n+    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n+    if (truststorePassword.isEmpty()) {\n+      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n+        \"\u0027 has not been set in the ssl configuration file.\");\n+    }\n+    long truststoreReloadInterval \u003d\n+      conf.getLong(\n+        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n+        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n+\n+    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n+\n+    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n+                                                 truststoreLocation,\n+                                                 truststorePassword,\n+                                                 truststoreReloadInterval);\n+    trustManager.init();\n+    LOG.info(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n+\n+    trustManagers \u003d new TrustManager[]{trustManager};\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SSLFactory.Mode mode)\n    throws IOException, GeneralSecurityException {\n\n    boolean requireClientCert \u003d\n      conf.getBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, true);\n\n    // certificate store\n    String keystoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_KEYSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n    KeyStore keystore \u003d KeyStore.getInstance(keystoreType);\n    String keystorePassword \u003d null;\n    if (requireClientCert || mode \u003d\u003d SSLFactory.Mode.SERVER) {\n      String locationProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_LOCATION_TPL_KEY);\n      String keystoreLocation \u003d conf.get(locationProperty, \"\");\n      if (keystoreLocation.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      String passwordProperty \u003d\n        resolvePropertyName(mode, SSL_KEYSTORE_PASSWORD_TPL_KEY);\n      keystorePassword \u003d conf.get(passwordProperty, \"\");\n      if (keystorePassword.isEmpty()) {\n        throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n          \"\u0027 has not been set in the ssl configuration file.\");\n      }\n      LOG.debug(mode.toString() + \" KeyStore: \" + keystoreLocation);\n\n      InputStream is \u003d new FileInputStream(keystoreLocation);\n      try {\n        keystore.load(is, keystorePassword.toCharArray());\n      } finally {\n        is.close();\n      }\n      LOG.info(mode.toString() + \" Loaded KeyStore: \" + keystoreLocation);\n    } else {\n      keystore.load(null, null);\n    }\n    KeyManagerFactory keyMgrFactory \u003d KeyManagerFactory.getInstance(\"SunX509\");\n    keyMgrFactory.init(keystore, (keystorePassword !\u003d null) ?\n                                 keystorePassword.toCharArray() : null);\n    keyManagers \u003d keyMgrFactory.getKeyManagers();\n\n    //trust store\n    String truststoreType \u003d\n      conf.get(resolvePropertyName(mode, SSL_TRUSTSTORE_TYPE_TPL_KEY),\n               DEFAULT_KEYSTORE_TYPE);\n\n    String locationProperty \u003d\n      resolvePropertyName(mode, SSL_TRUSTSTORE_LOCATION_TPL_KEY);\n    String truststoreLocation \u003d conf.get(locationProperty, \"\");\n    if (truststoreLocation.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + locationProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n\n    String passwordProperty \u003d resolvePropertyName(mode,\n                                                  SSL_TRUSTSTORE_PASSWORD_TPL_KEY);\n    String truststorePassword \u003d conf.get(passwordProperty, \"\");\n    if (truststorePassword.isEmpty()) {\n      throw new GeneralSecurityException(\"The property \u0027\" + passwordProperty +\n        \"\u0027 has not been set in the ssl configuration file.\");\n    }\n    long truststoreReloadInterval \u003d\n      conf.getLong(\n        resolvePropertyName(mode, SSL_TRUSTSTORE_RELOAD_INTERVAL_TPL_KEY),\n        DEFAULT_SSL_TRUSTSTORE_RELOAD_INTERVAL);\n\n    LOG.debug(mode.toString() + \" TrustStore: \" + truststoreLocation);\n\n    trustManager \u003d new ReloadingX509TrustManager(truststoreType,\n                                                 truststoreLocation,\n                                                 truststorePassword,\n                                                 truststoreReloadInterval);\n    trustManager.init();\n    LOG.info(mode.toString() + \" Loaded TrustStore: \" + truststoreLocation);\n\n    trustManagers \u003d new TrustManager[]{trustManager};\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/FileBasedKeyStoresFactory.java"
    }
  }
}