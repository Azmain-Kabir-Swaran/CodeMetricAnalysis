{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogCLIHelpers.java",
  "functionName": "listContainerLogs",
  "functionId": "listContainerLogs___options-ContainerLogsRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
  "functionStartLine": 415,
  "functionEndLine": 433,
  "numCommitsSeen": 30,
  "timeTaken": 3104,
  "changeHistory": [
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
    "91cc070d67533ebb3325b982eba2135e0d175a82",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1"
  ],
  "changeHistoryShort": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Ybodychange",
    "91cc070d67533ebb3325b982eba2135e0d175a82": "Ybodychange",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/09/17 3:16 PM",
          "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 205,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n-      throws IOException {\n+  public Set\u003cContainerLogFileInfo\u003e listContainerLogs(\n+      ContainerLogsRequest options) throws IOException {\n     List\u003cContainerLogMeta\u003e containersLogMeta;\n-    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n+    Set\u003cContainerLogFileInfo\u003e logTypes \u003d new HashSet\u003cContainerLogFileInfo\u003e();\n     try {\n       containersLogMeta \u003d getFileController(options.getAppId(),\n           options.getAppOwner()).readAggregatedLogsMeta(\n           options);\n     } catch (Exception ex) {\n       System.err.println(ex.getMessage());\n       return logTypes;\n     }\n     for (ContainerLogMeta logMeta: containersLogMeta) {\n       for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n-        logTypes.add(fileInfo.getFileName());\n+        logTypes.add(fileInfo);\n       }\n     }\n     return logTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cContainerLogFileInfo\u003e listContainerLogs(\n      ContainerLogsRequest options) throws IOException {\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    Set\u003cContainerLogFileInfo\u003e logTypes \u003d new HashSet\u003cContainerLogFileInfo\u003e();\n    try {\n      containersLogMeta \u003d getFileController(options.getAppId(),\n          options.getAppOwner()).readAggregatedLogsMeta(\n          options);\n    } catch (Exception ex) {\n      System.err.println(ex.getMessage());\n      return logTypes;\n    }\n    for (ContainerLogMeta logMeta: containersLogMeta) {\n      for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n        logTypes.add(fileInfo);\n      }\n    }\n    return logTypes;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "Set\u003cString\u003e",
            "newValue": "Set\u003cContainerLogFileInfo\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/09/17 3:16 PM",
          "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 205,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n-      throws IOException {\n+  public Set\u003cContainerLogFileInfo\u003e listContainerLogs(\n+      ContainerLogsRequest options) throws IOException {\n     List\u003cContainerLogMeta\u003e containersLogMeta;\n-    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n+    Set\u003cContainerLogFileInfo\u003e logTypes \u003d new HashSet\u003cContainerLogFileInfo\u003e();\n     try {\n       containersLogMeta \u003d getFileController(options.getAppId(),\n           options.getAppOwner()).readAggregatedLogsMeta(\n           options);\n     } catch (Exception ex) {\n       System.err.println(ex.getMessage());\n       return logTypes;\n     }\n     for (ContainerLogMeta logMeta: containersLogMeta) {\n       for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n-        logTypes.add(fileInfo.getFileName());\n+        logTypes.add(fileInfo);\n       }\n     }\n     return logTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cContainerLogFileInfo\u003e listContainerLogs(\n      ContainerLogsRequest options) throws IOException {\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    Set\u003cContainerLogFileInfo\u003e logTypes \u003d new HashSet\u003cContainerLogFileInfo\u003e();\n    try {\n      containersLogMeta \u003d getFileController(options.getAppId(),\n          options.getAppOwner()).readAggregatedLogsMeta(\n          options);\n    } catch (Exception ex) {\n      System.err.println(ex.getMessage());\n      return logTypes;\n    }\n    for (ContainerLogMeta logMeta: containersLogMeta) {\n      for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n        logTypes.add(fileInfo);\n      }\n    }\n    return logTypes;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/09/17 1:19 PM",
      "commitNameOld": "63231a2a3008794c5ebcbc9d3855638fc5f28216",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n       throws IOException {\n     List\u003cContainerLogMeta\u003e containersLogMeta;\n     Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n     try {\n       containersLogMeta \u003d getFileController(options.getAppId(),\n           options.getAppOwner()).readAggregatedLogsMeta(\n           options);\n     } catch (Exception ex) {\n       System.err.println(ex.getMessage());\n       return logTypes;\n     }\n     for (ContainerLogMeta logMeta: containersLogMeta) {\n-      for (PerContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n+      for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n         logTypes.add(fileInfo.getFileName());\n       }\n     }\n     return logTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n      throws IOException {\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n    try {\n      containersLogMeta \u003d getFileController(options.getAppId(),\n          options.getAppOwner()).readAggregatedLogsMeta(\n          options);\n    } catch (Exception ex) {\n      System.err.println(ex.getMessage());\n      return logTypes;\n    }\n    for (ContainerLogMeta logMeta: containersLogMeta) {\n      for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n        logTypes.add(fileInfo.getFileName());\n      }\n    }\n    return logTypes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "91cc070d67533ebb3325b982eba2135e0d175a82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "31/08/17 4:41 PM",
      "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/03/17 12:58 PM",
      "commitNameOld": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 170.16,
      "commitsBetweenForRepo": 1032,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,19 @@\n   public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n       throws IOException {\n+    List\u003cContainerLogMeta\u003e containersLogMeta;\n     Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n-    ApplicationId appId \u003d options.getAppId();\n-    String appOwner \u003d options.getAppOwner();\n-    String nodeId \u003d options.getNodeId();\n-    String containerIdStr \u003d options.getContainerId();\n-    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n-    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n-        : LogAggregationUtils.getNodeString(nodeId);\n-    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n-        appId, appOwner);\n-    if (nodeFiles \u003d\u003d null) {\n+    try {\n+      containersLogMeta \u003d getFileController(options.getAppId(),\n+          options.getAppOwner()).readAggregatedLogsMeta(\n+          options);\n+    } catch (Exception ex) {\n+      System.err.println(ex.getMessage());\n       return logTypes;\n     }\n-    while (nodeFiles.hasNext()) {\n-      FileStatus thisNodeFile \u003d nodeFiles.next();\n-      if (nodeIdStr !\u003d null) {\n-        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n-          continue;\n-        }\n-      }\n-      if (!thisNodeFile.getPath().getName()\n-          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n-        AggregatedLogFormat.LogReader reader \u003d\n-            new AggregatedLogFormat.LogReader(getConf(),\n-            thisNodeFile.getPath());\n-        try {\n-          DataInputStream valueStream;\n-          LogKey key \u003d new LogKey();\n-          valueStream \u003d reader.next(key);\n-          while (valueStream !\u003d null) {\n-            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n-              while (true) {\n-                try {\n-                  String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n-                      valueStream).getFirst();\n-                  logTypes.add(logFile);\n-                } catch (EOFException eof) {\n-                  break;\n-                }\n-              }\n-              if (!getAllContainers) {\n-                break;\n-              }\n-            }\n-            // Next container\n-            key \u003d new LogKey();\n-            valueStream \u003d reader.next(key);\n-          }\n-        } finally {\n-          reader.close();\n-        }\n+    for (ContainerLogMeta logMeta: containersLogMeta) {\n+      for (PerContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n+        logTypes.add(fileInfo.getFileName());\n       }\n     }\n     return logTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n      throws IOException {\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n    try {\n      containersLogMeta \u003d getFileController(options.getAppId(),\n          options.getAppOwner()).readAggregatedLogsMeta(\n          options);\n    } catch (Exception ex) {\n      System.err.println(ex.getMessage());\n      return logTypes;\n    }\n    for (ContainerLogMeta logMeta: containersLogMeta) {\n      for (PerContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\n        logTypes.add(fileInfo.getFileName());\n      }\n    }\n    return logTypes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "commitDateOld": "25/10/16 12:15 PM",
      "commitNameOld": "c88c1dc50c0ec4521bc93f39726248026e68063a",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 91.17,
      "commitsBetweenForRepo": 591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n       throws IOException {\n     Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n       return logTypes;\n     }\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n               while (true) {\n                 try {\n                   String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n-                      valueStream, null).getFirst();\n+                      valueStream).getFirst();\n                   logTypes.add(logFile);\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     return logTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n      throws IOException {\n    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return logTypes;\n    }\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              while (true) {\n                try {\n                  String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n                      valueStream).getFirst();\n                  logTypes.add(logFile);\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    return logTypes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/06/16 9:48 PM",
      "commitNameOld": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 20.55,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n       throws IOException {\n     Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n       return logTypes;\n     }\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n               while (true) {\n                 try {\n                   String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n-                      valueStream, null);\n+                      valueStream, null).getFirst();\n                   logTypes.add(logFile);\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     return logTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n      throws IOException {\n    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return logTypes;\n    }\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              while (true) {\n                try {\n                  String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n                      valueStream, null).getFirst();\n                  logTypes.add(logFile);\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    return logTypes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,57 @@\n+  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n+      throws IOException {\n+    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n+    ApplicationId appId \u003d options.getAppId();\n+    String appOwner \u003d options.getAppOwner();\n+    String nodeId \u003d options.getNodeId();\n+    String containerIdStr \u003d options.getContainerId();\n+    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n+    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n+        : LogAggregationUtils.getNodeString(nodeId);\n+    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n+        appId, appOwner);\n+    if (nodeFiles \u003d\u003d null) {\n+      return logTypes;\n+    }\n+    while (nodeFiles.hasNext()) {\n+      FileStatus thisNodeFile \u003d nodeFiles.next();\n+      if (nodeIdStr !\u003d null) {\n+        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n+          continue;\n+        }\n+      }\n+      if (!thisNodeFile.getPath().getName()\n+          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n+        AggregatedLogFormat.LogReader reader \u003d\n+            new AggregatedLogFormat.LogReader(getConf(),\n+            thisNodeFile.getPath());\n+        try {\n+          DataInputStream valueStream;\n+          LogKey key \u003d new LogKey();\n+          valueStream \u003d reader.next(key);\n+          while (valueStream !\u003d null) {\n+            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n+              while (true) {\n+                try {\n+                  String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n+                      valueStream, null);\n+                  logTypes.add(logFile);\n+                } catch (EOFException eof) {\n+                  break;\n+                }\n+              }\n+              if (!getAllContainers) {\n+                break;\n+              }\n+            }\n+            // Next container\n+            key \u003d new LogKey();\n+            valueStream \u003d reader.next(key);\n+          }\n+        } finally {\n+          reader.close();\n+        }\n+      }\n+    }\n+    return logTypes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e listContainerLogs(ContainerLogsRequest options)\n      throws IOException {\n    Set\u003cString\u003e logTypes \u003d new HashSet\u003cString\u003e();\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return logTypes;\n    }\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              while (true) {\n                try {\n                  String logFile \u003d LogReader.readContainerMetaDataAndSkipData(\n                      valueStream, null);\n                  logTypes.add(logFile);\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    return logTypes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java"
    }
  }
}