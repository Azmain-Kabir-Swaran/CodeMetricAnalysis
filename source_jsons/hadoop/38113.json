{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractPreemptableResourceCalculator.java",
  "functionName": "getMostUnderservedQueues",
  "functionId": "getMostUnderservedQueues___orderedByNeed-PriorityQueue__TempQueuePerPartition____tqComparator-TQComparator",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
  "functionStartLine": 299,
  "functionEndLine": 322,
  "numCommitsSeen": 48,
  "timeTaken": 5678,
  "changeHistory": [
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "4b130821995a3cfe20c71e38e0f63294085c0491"
  ],
  "changeHistoryShort": {
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ymovefromfile",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "4b130821995a3cfe20c71e38e0f63294085c0491": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n+  private Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n       PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed,\n       TQComparator tqComparator) {\n     ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n     while (!orderedByNeed.isEmpty()) {\n       TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n+\n+      // Add underserved queues in order for later uses\n+      context.addPartitionToUnderServedQueues(q1.queueName, q1.partition);\n       TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n-      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n+      if (q2 \u003d\u003d null || tqComparator.compare(q1, q2) \u003c 0) {\n+        if (null !\u003d q2) {\n+          context.addPartitionToUnderServedQueues(q2.queueName, q2.partition);\n+        }\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed,\n      TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n\n      // Add underserved queues in order for later uses\n      context.addPartitionToUnderServedQueues(q1.queueName, q1.partition);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1, q2) \u003c 0) {\n        if (null !\u003d q2) {\n          context.addPartitionToUnderServedQueues(q2.queueName, q2.partition);\n        }\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
            "oldMethodName": "getMostUnderservedQueues",
            "newMethodName": "getMostUnderservedQueues"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n+  private Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n       PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed,\n       TQComparator tqComparator) {\n     ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n     while (!orderedByNeed.isEmpty()) {\n       TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n+\n+      // Add underserved queues in order for later uses\n+      context.addPartitionToUnderServedQueues(q1.queueName, q1.partition);\n       TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n-      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n+      if (q2 \u003d\u003d null || tqComparator.compare(q1, q2) \u003c 0) {\n+        if (null !\u003d q2) {\n+          context.addPartitionToUnderServedQueues(q2.queueName, q2.partition);\n+        }\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed,\n      TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n\n      // Add underserved queues in order for later uses\n      context.addPartitionToUnderServedQueues(q1.queueName, q1.partition);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1, q2) \u003c 0) {\n        if (null !\u003d q2) {\n          context.addPartitionToUnderServedQueues(q2.queueName, q2.partition);\n        }\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n+  private Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n       PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed,\n       TQComparator tqComparator) {\n     ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n     while (!orderedByNeed.isEmpty()) {\n       TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n+\n+      // Add underserved queues in order for later uses\n+      context.addPartitionToUnderServedQueues(q1.queueName, q1.partition);\n       TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n-      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n+      if (q2 \u003d\u003d null || tqComparator.compare(q1, q2) \u003c 0) {\n+        if (null !\u003d q2) {\n+          context.addPartitionToUnderServedQueues(q2.queueName, q2.partition);\n+        }\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed,\n      TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n\n      // Add underserved queues in order for later uses\n      context.addPartitionToUnderServedQueues(q1.queueName, q1.partition);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1, q2) \u003c 0) {\n        if (null !\u003d q2) {\n          context.addPartitionToUnderServedQueues(q2.queueName, q2.partition);\n        }\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
          "extendedDetails": {}
        }
      ]
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/03/16 11:22 PM",
      "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
        "oldMethodName": "getMostUnderservedQueues",
        "newMethodName": "getMostUnderservedQueues"
      }
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n       PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n-    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n+    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n     while (!orderedByNeed.isEmpty()) {\n       TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n       TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n       if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n       PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n-    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n+    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n     while (!orderedByNeed.isEmpty()) {\n       TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n       TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n       if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 57.94,
      "commitsBetweenForRepo": 394,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n       PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n-    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n+    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n     while (!orderedByNeed.isEmpty()) {\n       TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n       TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n       if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003c\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  protected Collection\u003cTempQueue\u003e getMostUnderservedQueues(\n-      PriorityQueue\u003cTempQueue\u003e orderedByNeed, TQComparator tqComparator) {\n-    ArrayList\u003cTempQueue\u003e underserved \u003d new ArrayList\u003cTempQueue\u003e();\n+  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n+      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n+    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n     while (!orderedByNeed.isEmpty()) {\n-      TempQueue q1 \u003d orderedByNeed.remove();\n+      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n-      TempQueue q2 \u003d orderedByNeed.peek();\n+      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n       if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[orderedByNeed-PriorityQueue\u003cTempQueue\u003e, tqComparator-TQComparator]",
            "newValue": "[orderedByNeed-PriorityQueue\u003cTempQueuePerPartition\u003e, tqComparator-TQComparator]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  protected Collection\u003cTempQueue\u003e getMostUnderservedQueues(\n-      PriorityQueue\u003cTempQueue\u003e orderedByNeed, TQComparator tqComparator) {\n-    ArrayList\u003cTempQueue\u003e underserved \u003d new ArrayList\u003cTempQueue\u003e();\n+  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n+      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n+    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n     while (!orderedByNeed.isEmpty()) {\n-      TempQueue q1 \u003d orderedByNeed.remove();\n+      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n-      TempQueue q2 \u003d orderedByNeed.peek();\n+      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n       if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "Collection\u003cTempQueue\u003e",
            "newValue": "Collection\u003cTempQueuePerPartition\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  protected Collection\u003cTempQueue\u003e getMostUnderservedQueues(\n-      PriorityQueue\u003cTempQueue\u003e orderedByNeed, TQComparator tqComparator) {\n-    ArrayList\u003cTempQueue\u003e underserved \u003d new ArrayList\u003cTempQueue\u003e();\n+  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n+      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n+    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n     while (!orderedByNeed.isEmpty()) {\n-      TempQueue q1 \u003d orderedByNeed.remove();\n+      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n       underserved.add(q1);\n-      TempQueue q2 \u003d orderedByNeed.peek();\n+      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n       // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n       // return what has already been collected. Otherwise, q1\u0027s pct of\n       // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n       // next pass.\n       if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n         return underserved;\n       }\n     }\n     return underserved;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Collection\u003cTempQueuePerPartition\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueuePerPartition\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueuePerPartition\u003e underserved \u003d new ArrayList\u003cTempQueuePerPartition\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueuePerPartition q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueuePerPartition q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "4b130821995a3cfe20c71e38e0f63294085c0491": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2056. Disable preemption at Queue level. Contributed by Eric Payne\n",
      "commitDate": "05/12/14 1:06 PM",
      "commitName": "4b130821995a3cfe20c71e38e0f63294085c0491",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,17 @@\n+  protected Collection\u003cTempQueue\u003e getMostUnderservedQueues(\n+      PriorityQueue\u003cTempQueue\u003e orderedByNeed, TQComparator tqComparator) {\n+    ArrayList\u003cTempQueue\u003e underserved \u003d new ArrayList\u003cTempQueue\u003e();\n+    while (!orderedByNeed.isEmpty()) {\n+      TempQueue q1 \u003d orderedByNeed.remove();\n+      underserved.add(q1);\n+      TempQueue q2 \u003d orderedByNeed.peek();\n+      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n+      // return what has already been collected. Otherwise, q1\u0027s pct of\n+      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n+      // next pass.\n+      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n+        return underserved;\n+      }\n+    }\n+    return underserved;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Collection\u003cTempQueue\u003e getMostUnderservedQueues(\n      PriorityQueue\u003cTempQueue\u003e orderedByNeed, TQComparator tqComparator) {\n    ArrayList\u003cTempQueue\u003e underserved \u003d new ArrayList\u003cTempQueue\u003e();\n    while (!orderedByNeed.isEmpty()) {\n      TempQueue q1 \u003d orderedByNeed.remove();\n      underserved.add(q1);\n      TempQueue q2 \u003d orderedByNeed.peek();\n      // q1\u0027s pct of guaranteed won\u0027t be larger than q2\u0027s. If it\u0027s less, then\n      // return what has already been collected. Otherwise, q1\u0027s pct of\n      // guaranteed \u003d\u003d that of q2, so add q2 to underserved list during the\n      // next pass.\n      if (q2 \u003d\u003d null || tqComparator.compare(q1,q2) \u003c 0) {\n        return underserved;\n      }\n    }\n    return underserved;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}