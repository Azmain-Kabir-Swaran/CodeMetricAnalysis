{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CorruptReplicasMap.java",
  "functionName": "getCorruptBlockIdsForTesting",
  "functionId": "getCorruptBlockIdsForTesting___bim-BlockIdManager__blockType-BlockType__numExpectedBlocks-int__startingBlockId-Long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
  "functionStartLine": 218,
  "functionEndLine": 238,
  "numCommitsSeen": 74,
  "timeTaken": 8866,
  "changeHistory": [
    "d737bf99d44ce34cd01baad716d23df269267c95",
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
    "d6d58606b8adf94b208aed5fc2d054b9dd081db1",
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
    "d62b63d297bff12d93de560dd50ddd48743b851d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d737bf99d44ce34cd01baad716d23df269267c95": "Ymultichange(Yparameterchange,Ybodychange)",
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "d6d58606b8adf94b208aed5fc2d054b9dd081db1": "Ymultichange(Yrename,Ybodychange)",
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75": "Ybodychange",
    "d62b63d297bff12d93de560dd50ddd48743b851d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Yfilerename",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Yfilerename",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d737bf99d44ce34cd01baad716d23df269267c95": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13350. Negative legacy block ID will confuse Erasure Coding to be considered as striped block. (Contributed by Lei (Eddy) Xu).\n",
      "commitDate": "05/04/18 9:59 AM",
      "commitName": "d737bf99d44ce34cd01baad716d23df269267c95",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13350. Negative legacy block ID will confuse Erasure Coding to be considered as striped block. (Contributed by Lei (Eddy) Xu).\n",
          "commitDate": "05/04/18 9:59 AM",
          "commitName": "d737bf99d44ce34cd01baad716d23df269267c95",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "07/09/17 4:57 PM",
          "commitNameOld": "4e50dc976a92a9560630c87cfc4e4513916e5735",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 209.71,
          "commitsBetweenForRepo": 1606,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n+  long[] getCorruptBlockIdsForTesting(BlockIdManager bim, BlockType blockType,\n       int numExpectedBlocks, Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n     long cursorBlockId \u003d\n         startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n     return corruptReplicasMap.keySet()\n         .stream()\n         .filter(r -\u003e {\n           if (blockType \u003d\u003d BlockType.STRIPED) {\n-            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n-                r.getBlockId() \u003e\u003d cursorBlockId;\n+            return bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n           } else {\n-            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n-                r.getBlockId() \u003e\u003d cursorBlockId;\n+            return !bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n           }\n         })\n         .sorted()\n         .limit(numExpectedBlocks)\n         .mapToLong(Block::getBlockId)\n         .toArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptBlockIdsForTesting(BlockIdManager bim, BlockType blockType,\n      int numExpectedBlocks, Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    long cursorBlockId \u003d\n        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n    return corruptReplicasMap.keySet()\n        .stream()\n        .filter(r -\u003e {\n          if (blockType \u003d\u003d BlockType.STRIPED) {\n            return bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n          } else {\n            return !bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n          }\n        })\n        .sorted()\n        .limit(numExpectedBlocks)\n        .mapToLong(Block::getBlockId)\n        .toArray();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "[blockType-BlockType, numExpectedBlocks-int, startingBlockId-Long]",
            "newValue": "[bim-BlockIdManager, blockType-BlockType, numExpectedBlocks-int, startingBlockId-Long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13350. Negative legacy block ID will confuse Erasure Coding to be considered as striped block. (Contributed by Lei (Eddy) Xu).\n",
          "commitDate": "05/04/18 9:59 AM",
          "commitName": "d737bf99d44ce34cd01baad716d23df269267c95",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "07/09/17 4:57 PM",
          "commitNameOld": "4e50dc976a92a9560630c87cfc4e4513916e5735",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 209.71,
          "commitsBetweenForRepo": 1606,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n+  long[] getCorruptBlockIdsForTesting(BlockIdManager bim, BlockType blockType,\n       int numExpectedBlocks, Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n     long cursorBlockId \u003d\n         startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n     return corruptReplicasMap.keySet()\n         .stream()\n         .filter(r -\u003e {\n           if (blockType \u003d\u003d BlockType.STRIPED) {\n-            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n-                r.getBlockId() \u003e\u003d cursorBlockId;\n+            return bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n           } else {\n-            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n-                r.getBlockId() \u003e\u003d cursorBlockId;\n+            return !bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n           }\n         })\n         .sorted()\n         .limit(numExpectedBlocks)\n         .mapToLong(Block::getBlockId)\n         .toArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptBlockIdsForTesting(BlockIdManager bim, BlockType blockType,\n      int numExpectedBlocks, Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    long cursorBlockId \u003d\n        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n    return corruptReplicasMap.keySet()\n        .stream()\n        .filter(r -\u003e {\n          if (blockType \u003d\u003d BlockType.STRIPED) {\n            return bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n          } else {\n            return !bim.isStripedBlock(r) \u0026\u0026 r.getBlockId() \u003e\u003d cursorBlockId;\n          }\n        })\n        .sorted()\n        .limit(numExpectedBlocks)\n        .mapToLong(Block::getBlockId)\n        .toArray();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "999c8fcbefc876d9c26c23c5b87a64a81e4f113e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)\n",
      "commitDate": "14/06/17 10:44 AM",
      "commitName": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)\n",
          "commitDate": "14/06/17 10:44 AM",
          "commitName": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "31/05/17 8:09 AM",
          "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 14.11,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n-                                   Long startingBlockId) {\n+  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n+      int numExpectedBlocks, Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n-    \n-    Iterator\u003cBlock\u003e blockIt \u003d \n-        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n-    \n-    // if the starting block id was specified, iterate over keys until\n-    // we find the matching block. If we find a matching block, break\n-    // to leave the iterator on the next block after the specified block. \n-    if (startingBlockId !\u003d null) {\n-      boolean isBlockFound \u003d false;\n-      while (blockIt.hasNext()) {\n-        Block b \u003d blockIt.next();\n-        if (b.getBlockId() \u003d\u003d startingBlockId) {\n-          isBlockFound \u003d true;\n-          break; \n-        }\n-      }\n-      \n-      if (!isBlockFound) {\n-        return null;\n-      }\n-    }\n-\n-    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n-\n-    // append up to numExpectedBlocks blockIds to our list\n-    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n-      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n-    }\n-    \n-    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n-    for(int i\u003d0; i\u003cret.length; i++) {\n-      ret[i] \u003d corruptReplicaBlockIds.get(i);\n-    }\n-    \n-    return ret;\n+    long cursorBlockId \u003d\n+        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n+    return corruptReplicasMap.keySet()\n+        .stream()\n+        .filter(r -\u003e {\n+          if (blockType \u003d\u003d BlockType.STRIPED) {\n+            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n+                r.getBlockId() \u003e\u003d cursorBlockId;\n+          } else {\n+            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n+                r.getBlockId() \u003e\u003d cursorBlockId;\n+          }\n+        })\n+        .sorted()\n+        .limit(numExpectedBlocks)\n+        .mapToLong(Block::getBlockId)\n+        .toArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n      int numExpectedBlocks, Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    long cursorBlockId \u003d\n        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n    return corruptReplicasMap.keySet()\n        .stream()\n        .filter(r -\u003e {\n          if (blockType \u003d\u003d BlockType.STRIPED) {\n            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n                r.getBlockId() \u003e\u003d cursorBlockId;\n          } else {\n            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n                r.getBlockId() \u003e\u003d cursorBlockId;\n          }\n        })\n        .sorted()\n        .limit(numExpectedBlocks)\n        .mapToLong(Block::getBlockId)\n        .toArray();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "getCorruptReplicaBlockIdsForTesting",
            "newValue": "getCorruptBlockIdsForTesting"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)\n",
          "commitDate": "14/06/17 10:44 AM",
          "commitName": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "31/05/17 8:09 AM",
          "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 14.11,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n-                                   Long startingBlockId) {\n+  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n+      int numExpectedBlocks, Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n-    \n-    Iterator\u003cBlock\u003e blockIt \u003d \n-        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n-    \n-    // if the starting block id was specified, iterate over keys until\n-    // we find the matching block. If we find a matching block, break\n-    // to leave the iterator on the next block after the specified block. \n-    if (startingBlockId !\u003d null) {\n-      boolean isBlockFound \u003d false;\n-      while (blockIt.hasNext()) {\n-        Block b \u003d blockIt.next();\n-        if (b.getBlockId() \u003d\u003d startingBlockId) {\n-          isBlockFound \u003d true;\n-          break; \n-        }\n-      }\n-      \n-      if (!isBlockFound) {\n-        return null;\n-      }\n-    }\n-\n-    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n-\n-    // append up to numExpectedBlocks blockIds to our list\n-    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n-      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n-    }\n-    \n-    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n-    for(int i\u003d0; i\u003cret.length; i++) {\n-      ret[i] \u003d corruptReplicaBlockIds.get(i);\n-    }\n-    \n-    return ret;\n+    long cursorBlockId \u003d\n+        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n+    return corruptReplicasMap.keySet()\n+        .stream()\n+        .filter(r -\u003e {\n+          if (blockType \u003d\u003d BlockType.STRIPED) {\n+            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n+                r.getBlockId() \u003e\u003d cursorBlockId;\n+          } else {\n+            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n+                r.getBlockId() \u003e\u003d cursorBlockId;\n+          }\n+        })\n+        .sorted()\n+        .limit(numExpectedBlocks)\n+        .mapToLong(Block::getBlockId)\n+        .toArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n      int numExpectedBlocks, Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    long cursorBlockId \u003d\n        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n    return corruptReplicasMap.keySet()\n        .stream()\n        .filter(r -\u003e {\n          if (blockType \u003d\u003d BlockType.STRIPED) {\n            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n                r.getBlockId() \u003e\u003d cursorBlockId;\n          } else {\n            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n                r.getBlockId() \u003e\u003d cursorBlockId;\n          }\n        })\n        .sorted()\n        .limit(numExpectedBlocks)\n        .mapToLong(Block::getBlockId)\n        .toArray();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "[numExpectedBlocks-int, startingBlockId-Long]",
            "newValue": "[blockType-BlockType, numExpectedBlocks-int, startingBlockId-Long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10999. Introduce separate stats for Replicated and Erasure Coded Blocks apart from the current Aggregated stats. (Manoj Govindassamy via lei)\n",
          "commitDate": "14/06/17 10:44 AM",
          "commitName": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "31/05/17 8:09 AM",
          "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 14.11,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n-                                   Long startingBlockId) {\n+  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n+      int numExpectedBlocks, Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n-    \n-    Iterator\u003cBlock\u003e blockIt \u003d \n-        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n-    \n-    // if the starting block id was specified, iterate over keys until\n-    // we find the matching block. If we find a matching block, break\n-    // to leave the iterator on the next block after the specified block. \n-    if (startingBlockId !\u003d null) {\n-      boolean isBlockFound \u003d false;\n-      while (blockIt.hasNext()) {\n-        Block b \u003d blockIt.next();\n-        if (b.getBlockId() \u003d\u003d startingBlockId) {\n-          isBlockFound \u003d true;\n-          break; \n-        }\n-      }\n-      \n-      if (!isBlockFound) {\n-        return null;\n-      }\n-    }\n-\n-    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n-\n-    // append up to numExpectedBlocks blockIds to our list\n-    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n-      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n-    }\n-    \n-    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n-    for(int i\u003d0; i\u003cret.length; i++) {\n-      ret[i] \u003d corruptReplicaBlockIds.get(i);\n-    }\n-    \n-    return ret;\n+    long cursorBlockId \u003d\n+        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n+    return corruptReplicasMap.keySet()\n+        .stream()\n+        .filter(r -\u003e {\n+          if (blockType \u003d\u003d BlockType.STRIPED) {\n+            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n+                r.getBlockId() \u003e\u003d cursorBlockId;\n+          } else {\n+            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n+                r.getBlockId() \u003e\u003d cursorBlockId;\n+          }\n+        })\n+        .sorted()\n+        .limit(numExpectedBlocks)\n+        .mapToLong(Block::getBlockId)\n+        .toArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptBlockIdsForTesting(BlockType blockType,\n      int numExpectedBlocks, Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    long cursorBlockId \u003d\n        startingBlockId !\u003d null ? startingBlockId : Long.MIN_VALUE;\n    return corruptReplicasMap.keySet()\n        .stream()\n        .filter(r -\u003e {\n          if (blockType \u003d\u003d BlockType.STRIPED) {\n            return BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n                r.getBlockId() \u003e\u003d cursorBlockId;\n          } else {\n            return !BlockIdManager.isStripedBlockID(r.getBlockId()) \u0026\u0026\n                r.getBlockId() \u003e\u003d cursorBlockId;\n          }\n        })\n        .sorted()\n        .limit(numExpectedBlocks)\n        .mapToLong(Block::getBlockId)\n        .toArray();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "d6d58606b8adf94b208aed5fc2d054b9dd081db1": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-8794. Improve CorruptReplicasMap#corruptReplicasMap. (yliu)\n",
      "commitDate": "20/07/15 6:20 PM",
      "commitName": "d6d58606b8adf94b208aed5fc2d054b9dd081db1",
      "commitAuthor": "yliu",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-8794. Improve CorruptReplicasMap#corruptReplicasMap. (yliu)\n",
          "commitDate": "20/07/15 6:20 PM",
          "commitName": "d6d58606b8adf94b208aed5fc2d054b9dd081db1",
          "commitAuthor": "yliu",
          "commitDateOld": "07/07/15 10:13 AM",
          "commitNameOld": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 13.34,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n+  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n                                    Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n     \n-    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n+    Iterator\u003cBlock\u003e blockIt \u003d \n+        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n     \n     // if the starting block id was specified, iterate over keys until\n     // we find the matching block. If we find a matching block, break\n     // to leave the iterator on the next block after the specified block. \n     if (startingBlockId !\u003d null) {\n       boolean isBlockFound \u003d false;\n       while (blockIt.hasNext()) {\n         Block b \u003d blockIt.next();\n         if (b.getBlockId() \u003d\u003d startingBlockId) {\n           isBlockFound \u003d true;\n           break; \n         }\n       }\n       \n       if (!isBlockFound) {\n         return null;\n       }\n     }\n \n     ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n \n     // append up to numExpectedBlocks blockIds to our list\n     for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n       corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n     }\n     \n     long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n     for(int i\u003d0; i\u003cret.length; i++) {\n       ret[i] \u003d corruptReplicaBlockIds.get(i);\n     }\n     \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d \n        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {
            "oldValue": "getCorruptReplicaBlockIds",
            "newValue": "getCorruptReplicaBlockIdsForTesting"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8794. Improve CorruptReplicasMap#corruptReplicasMap. (yliu)\n",
          "commitDate": "20/07/15 6:20 PM",
          "commitName": "d6d58606b8adf94b208aed5fc2d054b9dd081db1",
          "commitAuthor": "yliu",
          "commitDateOld": "07/07/15 10:13 AM",
          "commitNameOld": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 13.34,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n+  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n                                    Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n     \n-    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n+    Iterator\u003cBlock\u003e blockIt \u003d \n+        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n     \n     // if the starting block id was specified, iterate over keys until\n     // we find the matching block. If we find a matching block, break\n     // to leave the iterator on the next block after the specified block. \n     if (startingBlockId !\u003d null) {\n       boolean isBlockFound \u003d false;\n       while (blockIt.hasNext()) {\n         Block b \u003d blockIt.next();\n         if (b.getBlockId() \u003d\u003d startingBlockId) {\n           isBlockFound \u003d true;\n           break; \n         }\n       }\n       \n       if (!isBlockFound) {\n         return null;\n       }\n     }\n \n     ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n \n     // append up to numExpectedBlocks blockIds to our list\n     for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n       corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n     }\n     \n     long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n     for(int i\u003d0; i\u003cret.length; i++) {\n       ret[i] \u003d corruptReplicaBlockIds.get(i);\n     }\n     \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  long[] getCorruptReplicaBlockIdsForTesting(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d \n        new TreeMap\u003c\u003e(corruptReplicasMap).keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
          "extendedDetails": {}
        }
      ]
    },
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\"\n\nThis reverts commit d62b63d297bff12d93de560dd50ddd48743b851d.\n",
      "commitDate": "07/07/15 10:13 AM",
      "commitName": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/07/15 3:54 PM",
      "commitNameOld": "d62b63d297bff12d93de560dd50ddd48743b851d",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,40 @@\n   long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                    Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n-    Iterator\u003cBlockInfo\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n+    \n+    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n+    \n     // if the starting block id was specified, iterate over keys until\n     // we find the matching block. If we find a matching block, break\n-    // to leave the iterator on the next block after the specified block.\n+    // to leave the iterator on the next block after the specified block. \n     if (startingBlockId !\u003d null) {\n       boolean isBlockFound \u003d false;\n       while (blockIt.hasNext()) {\n-        BlockInfo b \u003d blockIt.next();\n+        Block b \u003d blockIt.next();\n         if (b.getBlockId() \u003d\u003d startingBlockId) {\n           isBlockFound \u003d true;\n-          break;\n+          break; \n         }\n       }\n+      \n       if (!isBlockFound) {\n         return null;\n       }\n     }\n \n-    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003c\u003e();\n+    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n+\n     // append up to numExpectedBlocks blockIds to our list\n     for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n       corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n     }\n+    \n     long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n     for(int i\u003d0; i\u003cret.length; i++) {\n       ret[i] \u003d corruptReplicaBlockIds.get(i);\n     }\n+    \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {}
    },
    "d62b63d297bff12d93de560dd50ddd48743b851d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\n",
      "commitDate": "06/07/15 3:54 PM",
      "commitName": "d62b63d297bff12d93de560dd50ddd48743b851d",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "03/02/15 3:01 PM",
      "commitNameOld": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 153.0,
      "commitsBetweenForRepo": 1373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,34 @@\n   long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                    Long startingBlockId) {\n     if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n       return null;\n     }\n-    \n-    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n-    \n+    Iterator\u003cBlockInfo\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n     // if the starting block id was specified, iterate over keys until\n     // we find the matching block. If we find a matching block, break\n-    // to leave the iterator on the next block after the specified block. \n+    // to leave the iterator on the next block after the specified block.\n     if (startingBlockId !\u003d null) {\n       boolean isBlockFound \u003d false;\n       while (blockIt.hasNext()) {\n-        Block b \u003d blockIt.next();\n+        BlockInfo b \u003d blockIt.next();\n         if (b.getBlockId() \u003d\u003d startingBlockId) {\n           isBlockFound \u003d true;\n-          break; \n+          break;\n         }\n       }\n-      \n       if (!isBlockFound) {\n         return null;\n       }\n     }\n \n-    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n-\n+    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003c\u003e();\n     // append up to numExpectedBlocks blockIds to our list\n     for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n       corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n     }\n-    \n     long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n     for(int i\u003d0; i\u003cret.length; i++) {\n       ret[i] \u003d corruptReplicaBlockIds.get(i);\n     }\n-    \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    Iterator\u003cBlockInfo\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block.\n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        BlockInfo b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break;\n        }\n      }\n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003c\u003e();\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }  ",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }  ",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java"
      }
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 5:26 PM",
      "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }  ",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/CorruptReplicasMap.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java"
      }
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Yfilerename",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 4:57 PM",
      "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }  ",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/CorruptReplicasMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/CorruptReplicasMap.java"
      }
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 9:21 AM",
      "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }  ",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/CorruptReplicasMap.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/CorruptReplicasMap.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n+                                   Long startingBlockId) {\n+    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n+      return null;\n+    }\n+    \n+    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n+    \n+    // if the starting block id was specified, iterate over keys until\n+    // we find the matching block. If we find a matching block, break\n+    // to leave the iterator on the next block after the specified block. \n+    if (startingBlockId !\u003d null) {\n+      boolean isBlockFound \u003d false;\n+      while (blockIt.hasNext()) {\n+        Block b \u003d blockIt.next();\n+        if (b.getBlockId() \u003d\u003d startingBlockId) {\n+          isBlockFound \u003d true;\n+          break; \n+        }\n+      }\n+      \n+      if (!isBlockFound) {\n+        return null;\n+      }\n+    }\n+\n+    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n+\n+    // append up to numExpectedBlocks blockIds to our list\n+    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n+      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n+    }\n+    \n+    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n+    for(int i\u003d0; i\u003cret.length; i++) {\n+      ret[i] \u003d corruptReplicaBlockIds.get(i);\n+    }\n+    \n+    return ret;\n+  }  \n\\ No newline at end of file\n",
      "actualSource": "  long[] getCorruptReplicaBlockIds(int numExpectedBlocks,\n                                   Long startingBlockId) {\n    if (numExpectedBlocks \u003c 0 || numExpectedBlocks \u003e 100) {\n      return null;\n    }\n    \n    Iterator\u003cBlock\u003e blockIt \u003d corruptReplicasMap.keySet().iterator();\n    \n    // if the starting block id was specified, iterate over keys until\n    // we find the matching block. If we find a matching block, break\n    // to leave the iterator on the next block after the specified block. \n    if (startingBlockId !\u003d null) {\n      boolean isBlockFound \u003d false;\n      while (blockIt.hasNext()) {\n        Block b \u003d blockIt.next();\n        if (b.getBlockId() \u003d\u003d startingBlockId) {\n          isBlockFound \u003d true;\n          break; \n        }\n      }\n      \n      if (!isBlockFound) {\n        return null;\n      }\n    }\n\n    ArrayList\u003cLong\u003e corruptReplicaBlockIds \u003d new ArrayList\u003cLong\u003e();\n\n    // append up to numExpectedBlocks blockIds to our list\n    for(int i\u003d0; i\u003cnumExpectedBlocks \u0026\u0026 blockIt.hasNext(); i++) {\n      corruptReplicaBlockIds.add(blockIt.next().getBlockId());\n    }\n    \n    long[] ret \u003d new long[corruptReplicaBlockIds.size()];\n    for(int i\u003d0; i\u003cret.length; i++) {\n      ret[i] \u003d corruptReplicaBlockIds.get(i);\n    }\n    \n    return ret;\n  }  ",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/CorruptReplicasMap.java"
    }
  }
}