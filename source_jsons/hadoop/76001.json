{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BuiltInGzipDecompressor.java",
  "functionName": "decompress",
  "functionId": "decompress___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
  "functionStartLine": 181,
  "functionEndLine": 230,
  "numCommitsSeen": 10,
  "timeTaken": 988,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "2a248dfc32e5061c1f80295f448ca525ade764c6"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "2a248dfc32e5061c1f80295f448ca525ade764c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized int decompress(byte[] b, int off, int len)\n  throws IOException {\n    int numAvailBytes \u003d 0;\n\n    if (state !\u003d GzipStateLabel.DEFLATE_STREAM) {\n      executeHeaderState();\n\n      if (userBufLen \u003c\u003d 0) {\n        return numAvailBytes;\n      }\n    }\n\n    // \"executeDeflateStreamState()\"\n    if (state \u003d\u003d GzipStateLabel.DEFLATE_STREAM) {\n      // hand off user data (or what\u0027s left of it) to Inflater--but note that\n      // Inflater may not have consumed all of previous bufferload (e.g., if\n      // data highly compressed or output buffer very small), in which case\n      // userBufLen will be zero\n      if (userBufLen \u003e 0) {\n        inflater.setInput(userBuf, userBufOff, userBufLen);\n        userBufOff +\u003d userBufLen;\n        userBufLen \u003d 0;\n      }\n\n      // now decompress it into b[]\n      try {\n        numAvailBytes \u003d inflater.inflate(b, off, len);\n      } catch (DataFormatException dfe) {\n        throw new IOException(dfe.getMessage());\n      }\n      crc.update(b, off, numAvailBytes);  // CRC-32 is on _uncompressed_ data\n      if (inflater.finished()) {\n        state \u003d GzipStateLabel.TRAILER_CRC;\n        int bytesRemaining \u003d inflater.getRemaining();\n        assert (bytesRemaining \u003e\u003d 0) :\n          \"logic error: Inflater finished; byte-count is inconsistent\";\n          // could save a copy of userBufLen at call to inflater.setInput() and\n          // verify that bytesRemaining \u003c\u003d origUserBufLen, but would have to\n          // be a (class) member variable...seems excessive for a sanity check\n        userBufOff -\u003d bytesRemaining;\n        userBufLen \u003d bytesRemaining;   // or \"+\u003d\", but guaranteed 0 coming in\n      } else {\n        return numAvailBytes;  // minor optimization\n      }\n    }\n\n    executeTrailerState();\n\n    return numAvailBytes;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized int decompress(byte[] b, int off, int len)\n  throws IOException {\n    int numAvailBytes \u003d 0;\n\n    if (state !\u003d GzipStateLabel.DEFLATE_STREAM) {\n      executeHeaderState();\n\n      if (userBufLen \u003c\u003d 0) {\n        return numAvailBytes;\n      }\n    }\n\n    // \"executeDeflateStreamState()\"\n    if (state \u003d\u003d GzipStateLabel.DEFLATE_STREAM) {\n      // hand off user data (or what\u0027s left of it) to Inflater--but note that\n      // Inflater may not have consumed all of previous bufferload (e.g., if\n      // data highly compressed or output buffer very small), in which case\n      // userBufLen will be zero\n      if (userBufLen \u003e 0) {\n        inflater.setInput(userBuf, userBufOff, userBufLen);\n        userBufOff +\u003d userBufLen;\n        userBufLen \u003d 0;\n      }\n\n      // now decompress it into b[]\n      try {\n        numAvailBytes \u003d inflater.inflate(b, off, len);\n      } catch (DataFormatException dfe) {\n        throw new IOException(dfe.getMessage());\n      }\n      crc.update(b, off, numAvailBytes);  // CRC-32 is on _uncompressed_ data\n      if (inflater.finished()) {\n        state \u003d GzipStateLabel.TRAILER_CRC;\n        int bytesRemaining \u003d inflater.getRemaining();\n        assert (bytesRemaining \u003e\u003d 0) :\n          \"logic error: Inflater finished; byte-count is inconsistent\";\n          // could save a copy of userBufLen at call to inflater.setInput() and\n          // verify that bytesRemaining \u003c\u003d origUserBufLen, but would have to\n          // be a (class) member variable...seems excessive for a sanity check\n        userBufOff -\u003d bytesRemaining;\n        userBufLen \u003d bytesRemaining;   // or \"+\u003d\", but guaranteed 0 coming in\n      } else {\n        return numAvailBytes;  // minor optimization\n      }\n    }\n\n    executeTrailerState();\n\n    return numAvailBytes;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized int decompress(byte[] b, int off, int len)\n  throws IOException {\n    int numAvailBytes \u003d 0;\n\n    if (state !\u003d GzipStateLabel.DEFLATE_STREAM) {\n      executeHeaderState();\n\n      if (userBufLen \u003c\u003d 0) {\n        return numAvailBytes;\n      }\n    }\n\n    // \"executeDeflateStreamState()\"\n    if (state \u003d\u003d GzipStateLabel.DEFLATE_STREAM) {\n      // hand off user data (or what\u0027s left of it) to Inflater--but note that\n      // Inflater may not have consumed all of previous bufferload (e.g., if\n      // data highly compressed or output buffer very small), in which case\n      // userBufLen will be zero\n      if (userBufLen \u003e 0) {\n        inflater.setInput(userBuf, userBufOff, userBufLen);\n        userBufOff +\u003d userBufLen;\n        userBufLen \u003d 0;\n      }\n\n      // now decompress it into b[]\n      try {\n        numAvailBytes \u003d inflater.inflate(b, off, len);\n      } catch (DataFormatException dfe) {\n        throw new IOException(dfe.getMessage());\n      }\n      crc.update(b, off, numAvailBytes);  // CRC-32 is on _uncompressed_ data\n      if (inflater.finished()) {\n        state \u003d GzipStateLabel.TRAILER_CRC;\n        int bytesRemaining \u003d inflater.getRemaining();\n        assert (bytesRemaining \u003e\u003d 0) :\n          \"logic error: Inflater finished; byte-count is inconsistent\";\n          // could save a copy of userBufLen at call to inflater.setInput() and\n          // verify that bytesRemaining \u003c\u003d origUserBufLen, but would have to\n          // be a (class) member variable...seems excessive for a sanity check\n        userBufOff -\u003d bytesRemaining;\n        userBufLen \u003d bytesRemaining;   // or \"+\u003d\", but guaranteed 0 coming in\n      } else {\n        return numAvailBytes;  // minor optimization\n      }\n    }\n\n    executeTrailerState();\n\n    return numAvailBytes;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "2a248dfc32e5061c1f80295f448ca525ade764c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6835. Add support for concatenated gzip input. Contributed by Greg Roelofs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@961532 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/10 4:22 PM",
      "commitName": "2a248dfc32e5061c1f80295f448ca525ade764c6",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,50 @@\n+  public synchronized int decompress(byte[] b, int off, int len)\n+  throws IOException {\n+    int numAvailBytes \u003d 0;\n+\n+    if (state !\u003d GzipStateLabel.DEFLATE_STREAM) {\n+      executeHeaderState();\n+\n+      if (userBufLen \u003c\u003d 0) {\n+        return numAvailBytes;\n+      }\n+    }\n+\n+    // \"executeDeflateStreamState()\"\n+    if (state \u003d\u003d GzipStateLabel.DEFLATE_STREAM) {\n+      // hand off user data (or what\u0027s left of it) to Inflater--but note that\n+      // Inflater may not have consumed all of previous bufferload (e.g., if\n+      // data highly compressed or output buffer very small), in which case\n+      // userBufLen will be zero\n+      if (userBufLen \u003e 0) {\n+        inflater.setInput(userBuf, userBufOff, userBufLen);\n+        userBufOff +\u003d userBufLen;\n+        userBufLen \u003d 0;\n+      }\n+\n+      // now decompress it into b[]\n+      try {\n+        numAvailBytes \u003d inflater.inflate(b, off, len);\n+      } catch (DataFormatException dfe) {\n+        throw new IOException(dfe.getMessage());\n+      }\n+      crc.update(b, off, numAvailBytes);  // CRC-32 is on _uncompressed_ data\n+      if (inflater.finished()) {\n+        state \u003d GzipStateLabel.TRAILER_CRC;\n+        int bytesRemaining \u003d inflater.getRemaining();\n+        assert (bytesRemaining \u003e\u003d 0) :\n+          \"logic error: Inflater finished; byte-count is inconsistent\";\n+          // could save a copy of userBufLen at call to inflater.setInput() and\n+          // verify that bytesRemaining \u003c\u003d origUserBufLen, but would have to\n+          // be a (class) member variable...seems excessive for a sanity check\n+        userBufOff -\u003d bytesRemaining;\n+        userBufLen \u003d bytesRemaining;   // or \"+\u003d\", but guaranteed 0 coming in\n+      } else {\n+        return numAvailBytes;  // minor optimization\n+      }\n+    }\n+\n+    executeTrailerState();\n+\n+    return numAvailBytes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int decompress(byte[] b, int off, int len)\n  throws IOException {\n    int numAvailBytes \u003d 0;\n\n    if (state !\u003d GzipStateLabel.DEFLATE_STREAM) {\n      executeHeaderState();\n\n      if (userBufLen \u003c\u003d 0) {\n        return numAvailBytes;\n      }\n    }\n\n    // \"executeDeflateStreamState()\"\n    if (state \u003d\u003d GzipStateLabel.DEFLATE_STREAM) {\n      // hand off user data (or what\u0027s left of it) to Inflater--but note that\n      // Inflater may not have consumed all of previous bufferload (e.g., if\n      // data highly compressed or output buffer very small), in which case\n      // userBufLen will be zero\n      if (userBufLen \u003e 0) {\n        inflater.setInput(userBuf, userBufOff, userBufLen);\n        userBufOff +\u003d userBufLen;\n        userBufLen \u003d 0;\n      }\n\n      // now decompress it into b[]\n      try {\n        numAvailBytes \u003d inflater.inflate(b, off, len);\n      } catch (DataFormatException dfe) {\n        throw new IOException(dfe.getMessage());\n      }\n      crc.update(b, off, numAvailBytes);  // CRC-32 is on _uncompressed_ data\n      if (inflater.finished()) {\n        state \u003d GzipStateLabel.TRAILER_CRC;\n        int bytesRemaining \u003d inflater.getRemaining();\n        assert (bytesRemaining \u003e\u003d 0) :\n          \"logic error: Inflater finished; byte-count is inconsistent\";\n          // could save a copy of userBufLen at call to inflater.setInput() and\n          // verify that bytesRemaining \u003c\u003d origUserBufLen, but would have to\n          // be a (class) member variable...seems excessive for a sanity check\n        userBufOff -\u003d bytesRemaining;\n        userBufLen \u003d bytesRemaining;   // or \"+\u003d\", but guaranteed 0 coming in\n      } else {\n        return numAvailBytes;  // minor optimization\n      }\n    }\n\n    executeTrailerState();\n\n    return numAvailBytes;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
    }
  }
}