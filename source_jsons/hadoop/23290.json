{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataDrivenDBRecordReader.java",
  "functionName": "getSelectQuery",
  "functionId": "getSelectQuery",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java",
  "functionStartLine": 79,
  "functionEndLine": 137,
  "numCommitsSeen": 4,
  "timeTaken": 4279,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected String getSelectQuery() {\n    StringBuilder query \u003d new StringBuilder();\n    DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit \u003d\n        (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit();\n    DBConfiguration dbConf \u003d getDBConf();\n    String [] fieldNames \u003d getFieldNames();\n    String tableName \u003d getTableName();\n    String conditions \u003d getConditions();\n\n    // Build the WHERE clauses associated with the data split first.\n    // We need them in both branches of this function.\n    StringBuilder conditionClauses \u003d new StringBuilder();\n    conditionClauses.append(\"( \").append(dataSplit.getLowerClause());\n    conditionClauses.append(\" ) AND ( \").append(dataSplit.getUpperClause());\n    conditionClauses.append(\" )\");\n\n    if(dbConf.getInputQuery() \u003d\u003d null) {\n      // We need to generate the entire query.\n      query.append(\"SELECT \");\n\n      for (int i \u003d 0; i \u003c fieldNames.length; i++) {\n        query.append(fieldNames[i]);\n        if (i !\u003d fieldNames.length -1) {\n          query.append(\", \");\n        }\n      }\n\n      query.append(\" FROM \").append(tableName);\n      if (!dbProductName.startsWith(\"ORACLE\")) {\n        // Seems to be necessary for hsqldb? Oracle explicitly does *not*\n        // use this clause.\n        query.append(\" AS \").append(tableName);\n      }\n      query.append(\" WHERE \");\n      if (conditions !\u003d null \u0026\u0026 conditions.length() \u003e 0) {\n        // Put the user\u0027s conditions first.\n        query.append(\"( \").append(conditions).append(\" ) AND \");\n      }\n\n      // Now append the conditions associated with our split.\n      query.append(conditionClauses.toString());\n\n    } else {\n      // User provided the query. We replace the special token with our WHERE clause.\n      String inputQuery \u003d dbConf.getInputQuery();\n      if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) \u003d\u003d -1) {\n        LOG.error(\"Could not find the clause substitution token \"\n            + DataDrivenDBInputFormat.SUBSTITUTE_TOKEN + \" in the query: [\"\n            + inputQuery + \"]. Parallel splits may not work correctly.\");\n      }\n\n      query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN,\n          conditionClauses.toString()));\n    }\n\n    LOG.debug(\"Using query: \" + query.toString());\n\n    return query.toString();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected String getSelectQuery() {\n    StringBuilder query \u003d new StringBuilder();\n    DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit \u003d\n        (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit();\n    DBConfiguration dbConf \u003d getDBConf();\n    String [] fieldNames \u003d getFieldNames();\n    String tableName \u003d getTableName();\n    String conditions \u003d getConditions();\n\n    // Build the WHERE clauses associated with the data split first.\n    // We need them in both branches of this function.\n    StringBuilder conditionClauses \u003d new StringBuilder();\n    conditionClauses.append(\"( \").append(dataSplit.getLowerClause());\n    conditionClauses.append(\" ) AND ( \").append(dataSplit.getUpperClause());\n    conditionClauses.append(\" )\");\n\n    if(dbConf.getInputQuery() \u003d\u003d null) {\n      // We need to generate the entire query.\n      query.append(\"SELECT \");\n\n      for (int i \u003d 0; i \u003c fieldNames.length; i++) {\n        query.append(fieldNames[i]);\n        if (i !\u003d fieldNames.length -1) {\n          query.append(\", \");\n        }\n      }\n\n      query.append(\" FROM \").append(tableName);\n      if (!dbProductName.startsWith(\"ORACLE\")) {\n        // Seems to be necessary for hsqldb? Oracle explicitly does *not*\n        // use this clause.\n        query.append(\" AS \").append(tableName);\n      }\n      query.append(\" WHERE \");\n      if (conditions !\u003d null \u0026\u0026 conditions.length() \u003e 0) {\n        // Put the user\u0027s conditions first.\n        query.append(\"( \").append(conditions).append(\" ) AND \");\n      }\n\n      // Now append the conditions associated with our split.\n      query.append(conditionClauses.toString());\n\n    } else {\n      // User provided the query. We replace the special token with our WHERE clause.\n      String inputQuery \u003d dbConf.getInputQuery();\n      if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) \u003d\u003d -1) {\n        LOG.error(\"Could not find the clause substitution token \"\n            + DataDrivenDBInputFormat.SUBSTITUTE_TOKEN + \" in the query: [\"\n            + inputQuery + \"]. Parallel splits may not work correctly.\");\n      }\n\n      query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN,\n          conditionClauses.toString()));\n    }\n\n    LOG.debug(\"Using query: \" + query.toString());\n\n    return query.toString();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,59 @@\n+  protected String getSelectQuery() {\n+    StringBuilder query \u003d new StringBuilder();\n+    DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit \u003d\n+        (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit();\n+    DBConfiguration dbConf \u003d getDBConf();\n+    String [] fieldNames \u003d getFieldNames();\n+    String tableName \u003d getTableName();\n+    String conditions \u003d getConditions();\n+\n+    // Build the WHERE clauses associated with the data split first.\n+    // We need them in both branches of this function.\n+    StringBuilder conditionClauses \u003d new StringBuilder();\n+    conditionClauses.append(\"( \").append(dataSplit.getLowerClause());\n+    conditionClauses.append(\" ) AND ( \").append(dataSplit.getUpperClause());\n+    conditionClauses.append(\" )\");\n+\n+    if(dbConf.getInputQuery() \u003d\u003d null) {\n+      // We need to generate the entire query.\n+      query.append(\"SELECT \");\n+\n+      for (int i \u003d 0; i \u003c fieldNames.length; i++) {\n+        query.append(fieldNames[i]);\n+        if (i !\u003d fieldNames.length -1) {\n+          query.append(\", \");\n+        }\n+      }\n+\n+      query.append(\" FROM \").append(tableName);\n+      if (!dbProductName.startsWith(\"ORACLE\")) {\n+        // Seems to be necessary for hsqldb? Oracle explicitly does *not*\n+        // use this clause.\n+        query.append(\" AS \").append(tableName);\n+      }\n+      query.append(\" WHERE \");\n+      if (conditions !\u003d null \u0026\u0026 conditions.length() \u003e 0) {\n+        // Put the user\u0027s conditions first.\n+        query.append(\"( \").append(conditions).append(\" ) AND \");\n+      }\n+\n+      // Now append the conditions associated with our split.\n+      query.append(conditionClauses.toString());\n+\n+    } else {\n+      // User provided the query. We replace the special token with our WHERE clause.\n+      String inputQuery \u003d dbConf.getInputQuery();\n+      if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) \u003d\u003d -1) {\n+        LOG.error(\"Could not find the clause substitution token \"\n+            + DataDrivenDBInputFormat.SUBSTITUTE_TOKEN + \" in the query: [\"\n+            + inputQuery + \"]. Parallel splits may not work correctly.\");\n+      }\n+\n+      query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN,\n+          conditionClauses.toString()));\n+    }\n+\n+    LOG.debug(\"Using query: \" + query.toString());\n+\n+    return query.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected String getSelectQuery() {\n    StringBuilder query \u003d new StringBuilder();\n    DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit \u003d\n        (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit();\n    DBConfiguration dbConf \u003d getDBConf();\n    String [] fieldNames \u003d getFieldNames();\n    String tableName \u003d getTableName();\n    String conditions \u003d getConditions();\n\n    // Build the WHERE clauses associated with the data split first.\n    // We need them in both branches of this function.\n    StringBuilder conditionClauses \u003d new StringBuilder();\n    conditionClauses.append(\"( \").append(dataSplit.getLowerClause());\n    conditionClauses.append(\" ) AND ( \").append(dataSplit.getUpperClause());\n    conditionClauses.append(\" )\");\n\n    if(dbConf.getInputQuery() \u003d\u003d null) {\n      // We need to generate the entire query.\n      query.append(\"SELECT \");\n\n      for (int i \u003d 0; i \u003c fieldNames.length; i++) {\n        query.append(fieldNames[i]);\n        if (i !\u003d fieldNames.length -1) {\n          query.append(\", \");\n        }\n      }\n\n      query.append(\" FROM \").append(tableName);\n      if (!dbProductName.startsWith(\"ORACLE\")) {\n        // Seems to be necessary for hsqldb? Oracle explicitly does *not*\n        // use this clause.\n        query.append(\" AS \").append(tableName);\n      }\n      query.append(\" WHERE \");\n      if (conditions !\u003d null \u0026\u0026 conditions.length() \u003e 0) {\n        // Put the user\u0027s conditions first.\n        query.append(\"( \").append(conditions).append(\" ) AND \");\n      }\n\n      // Now append the conditions associated with our split.\n      query.append(conditionClauses.toString());\n\n    } else {\n      // User provided the query. We replace the special token with our WHERE clause.\n      String inputQuery \u003d dbConf.getInputQuery();\n      if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) \u003d\u003d -1) {\n        LOG.error(\"Could not find the clause substitution token \"\n            + DataDrivenDBInputFormat.SUBSTITUTE_TOKEN + \" in the query: [\"\n            + inputQuery + \"]. Parallel splits may not work correctly.\");\n      }\n\n      query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN,\n          conditionClauses.toString()));\n    }\n\n    LOG.debug(\"Using query: \" + query.toString());\n\n    return query.toString();\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBRecordReader.java"
    }
  }
}