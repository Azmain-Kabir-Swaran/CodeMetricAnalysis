{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineDataManager.java",
  "functionName": "doPostEntities",
  "functionId": "doPostEntities___entities-TimelineEntities__callerUGI-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
  "functionStartLine": 329,
  "functionEndLine": 395,
  "numCommitsSeen": 15,
  "timeTaken": 1352,
  "changeHistory": [
    "01a641bc447c464b2830d58addd482f47dbd92ae",
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0"
  ],
  "changeHistoryShort": {
    "01a641bc447c464b2830d58addd482f47dbd92ae": "Ybodychange",
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01a641bc447c464b2830d58addd482f47dbd92ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3456. Improve handling of incomplete TimelineEntities. (Varun Saxena via rohithsharmaks)\n",
      "commitDate": "07/12/15 1:46 AM",
      "commitName": "01a641bc447c464b2830d58addd482f47dbd92ae",
      "commitAuthor": "rohithsharmaks",
      "commitDateOld": "24/06/15 2:16 PM",
      "commitNameOld": "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 165.52,
      "commitsBetweenForRepo": 1143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,67 @@\n   private TimelinePutResponse doPostEntities(\n       TimelineEntities entities,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     if (entities \u003d\u003d null) {\n       return new TimelinePutResponse();\n     }\n     metrics.incrPostEntitiesTotal(entities.getEntities().size());\n     TimelineEntities entitiesToPut \u003d new TimelineEntities();\n     List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n         new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n     for (TimelineEntity entity : entities.getEntities()) {\n \n       // if the domain id is not specified, the entity will be put into\n       // the default domain\n       if (entity.getDomainId() \u003d\u003d null ||\n           entity.getDomainId().length() \u003d\u003d 0) {\n         entity.setDomainId(DEFAULT_DOMAIN_ID);\n       }\n-\n+      if (entity.getEntityId() \u003d\u003d null || entity.getEntityType() \u003d\u003d null) {\n+        throw new BadRequestException(\"Incomplete entity without entity\"\n+            + \" id/type\");\n+      }\n       // check if there is existing entity\n       TimelineEntity existingEntity \u003d null;\n       try {\n         existingEntity \u003d\n             store.getEntity(entity.getEntityId(), entity.getEntityType(),\n                 EnumSet.of(Field.PRIMARY_FILTERS));\n         if (existingEntity !\u003d null) {\n           addDefaultDomainIdIfAbsent(existingEntity);\n           if (!existingEntity.getDomainId().equals(entity.getDomainId())) {\n             throw new YarnException(\"The domain of the timeline entity \"\n               + \"{ id: \" + entity.getEntityId() + \", type: \"\n               + entity.getEntityType() + \" } is not allowed to be changed from \"\n               + existingEntity.getDomainId() + \" to \" + entity.getDomainId());\n           }\n         }\n         if (!timelineACLsManager.checkAccess(\n             callerUGI, ApplicationAccessType.MODIFY_APP, entity)) {\n           throw new YarnException(callerUGI\n               + \" is not allowed to put the timeline entity \"\n               + \"{ id: \" + entity.getEntityId() + \", type: \"\n               + entity.getEntityType() + \" } into the domain \"\n               + entity.getDomainId() + \".\");\n         }\n       } catch (Exception e) {\n         // Skip the entity which already exists and was put by others\n         LOG.warn(\"Skip the timeline entity: { id: \" + entity.getEntityId()\n             + \", type: \"+ entity.getEntityType() + \" }\", e);\n         TimelinePutResponse.TimelinePutError error \u003d\n             new TimelinePutResponse.TimelinePutError();\n         error.setEntityId(entity.getEntityId());\n         error.setEntityType(entity.getEntityType());\n         error.setErrorCode(\n             TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n         errors.add(error);\n         continue;\n       }\n \n       entitiesToPut.addEntity(entity);\n     }\n \n     TimelinePutResponse response \u003d store.put(entitiesToPut);\n     // add the errors of timeline system filter key conflict\n     response.addErrors(errors);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelinePutResponse doPostEntities(\n      TimelineEntities entities,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    metrics.incrPostEntitiesTotal(entities.getEntities().size());\n    TimelineEntities entitiesToPut \u003d new TimelineEntities();\n    List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n        new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n    for (TimelineEntity entity : entities.getEntities()) {\n\n      // if the domain id is not specified, the entity will be put into\n      // the default domain\n      if (entity.getDomainId() \u003d\u003d null ||\n          entity.getDomainId().length() \u003d\u003d 0) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n      if (entity.getEntityId() \u003d\u003d null || entity.getEntityType() \u003d\u003d null) {\n        throw new BadRequestException(\"Incomplete entity without entity\"\n            + \" id/type\");\n      }\n      // check if there is existing entity\n      TimelineEntity existingEntity \u003d null;\n      try {\n        existingEntity \u003d\n            store.getEntity(entity.getEntityId(), entity.getEntityType(),\n                EnumSet.of(Field.PRIMARY_FILTERS));\n        if (existingEntity !\u003d null) {\n          addDefaultDomainIdIfAbsent(existingEntity);\n          if (!existingEntity.getDomainId().equals(entity.getDomainId())) {\n            throw new YarnException(\"The domain of the timeline entity \"\n              + \"{ id: \" + entity.getEntityId() + \", type: \"\n              + entity.getEntityType() + \" } is not allowed to be changed from \"\n              + existingEntity.getDomainId() + \" to \" + entity.getDomainId());\n          }\n        }\n        if (!timelineACLsManager.checkAccess(\n            callerUGI, ApplicationAccessType.MODIFY_APP, entity)) {\n          throw new YarnException(callerUGI\n              + \" is not allowed to put the timeline entity \"\n              + \"{ id: \" + entity.getEntityId() + \", type: \"\n              + entity.getEntityType() + \" } into the domain \"\n              + entity.getDomainId() + \".\");\n        }\n      } catch (Exception e) {\n        // Skip the entity which already exists and was put by others\n        LOG.warn(\"Skip the timeline entity: { id: \" + entity.getEntityId()\n            + \", type: \"+ entity.getEntityType() + \" }\", e);\n        TimelinePutResponse.TimelinePutError error \u003d\n            new TimelinePutResponse.TimelinePutError();\n        error.setEntityId(entity.getEntityId());\n        error.setEntityType(entity.getEntityType());\n        error.setErrorCode(\n            TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n        errors.add(error);\n        continue;\n      }\n\n      entitiesToPut.addEntity(entity);\n    }\n\n    TimelinePutResponse response \u003d store.put(entitiesToPut);\n    // add the errors of timeline system filter key conflict\n    response.addErrors(errors);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3360. Add JMX metrics to TimelineDataManager (Jason Lowe via jeagles)\n",
      "commitDate": "24/06/15 2:16 PM",
      "commitName": "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
      "commitAuthor": "Jonathan Eagles",
      "diff": "@@ -0,0 +1,64 @@\n+  private TimelinePutResponse doPostEntities(\n+      TimelineEntities entities,\n+      UserGroupInformation callerUGI) throws YarnException, IOException {\n+    if (entities \u003d\u003d null) {\n+      return new TimelinePutResponse();\n+    }\n+    metrics.incrPostEntitiesTotal(entities.getEntities().size());\n+    TimelineEntities entitiesToPut \u003d new TimelineEntities();\n+    List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n+        new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n+    for (TimelineEntity entity : entities.getEntities()) {\n+\n+      // if the domain id is not specified, the entity will be put into\n+      // the default domain\n+      if (entity.getDomainId() \u003d\u003d null ||\n+          entity.getDomainId().length() \u003d\u003d 0) {\n+        entity.setDomainId(DEFAULT_DOMAIN_ID);\n+      }\n+\n+      // check if there is existing entity\n+      TimelineEntity existingEntity \u003d null;\n+      try {\n+        existingEntity \u003d\n+            store.getEntity(entity.getEntityId(), entity.getEntityType(),\n+                EnumSet.of(Field.PRIMARY_FILTERS));\n+        if (existingEntity !\u003d null) {\n+          addDefaultDomainIdIfAbsent(existingEntity);\n+          if (!existingEntity.getDomainId().equals(entity.getDomainId())) {\n+            throw new YarnException(\"The domain of the timeline entity \"\n+              + \"{ id: \" + entity.getEntityId() + \", type: \"\n+              + entity.getEntityType() + \" } is not allowed to be changed from \"\n+              + existingEntity.getDomainId() + \" to \" + entity.getDomainId());\n+          }\n+        }\n+        if (!timelineACLsManager.checkAccess(\n+            callerUGI, ApplicationAccessType.MODIFY_APP, entity)) {\n+          throw new YarnException(callerUGI\n+              + \" is not allowed to put the timeline entity \"\n+              + \"{ id: \" + entity.getEntityId() + \", type: \"\n+              + entity.getEntityType() + \" } into the domain \"\n+              + entity.getDomainId() + \".\");\n+        }\n+      } catch (Exception e) {\n+        // Skip the entity which already exists and was put by others\n+        LOG.warn(\"Skip the timeline entity: { id: \" + entity.getEntityId()\n+            + \", type: \"+ entity.getEntityType() + \" }\", e);\n+        TimelinePutResponse.TimelinePutError error \u003d\n+            new TimelinePutResponse.TimelinePutError();\n+        error.setEntityId(entity.getEntityId());\n+        error.setEntityType(entity.getEntityType());\n+        error.setErrorCode(\n+            TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n+        errors.add(error);\n+        continue;\n+      }\n+\n+      entitiesToPut.addEntity(entity);\n+    }\n+\n+    TimelinePutResponse response \u003d store.put(entitiesToPut);\n+    // add the errors of timeline system filter key conflict\n+    response.addErrors(errors);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelinePutResponse doPostEntities(\n      TimelineEntities entities,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    metrics.incrPostEntitiesTotal(entities.getEntities().size());\n    TimelineEntities entitiesToPut \u003d new TimelineEntities();\n    List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n        new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n    for (TimelineEntity entity : entities.getEntities()) {\n\n      // if the domain id is not specified, the entity will be put into\n      // the default domain\n      if (entity.getDomainId() \u003d\u003d null ||\n          entity.getDomainId().length() \u003d\u003d 0) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n\n      // check if there is existing entity\n      TimelineEntity existingEntity \u003d null;\n      try {\n        existingEntity \u003d\n            store.getEntity(entity.getEntityId(), entity.getEntityType(),\n                EnumSet.of(Field.PRIMARY_FILTERS));\n        if (existingEntity !\u003d null) {\n          addDefaultDomainIdIfAbsent(existingEntity);\n          if (!existingEntity.getDomainId().equals(entity.getDomainId())) {\n            throw new YarnException(\"The domain of the timeline entity \"\n              + \"{ id: \" + entity.getEntityId() + \", type: \"\n              + entity.getEntityType() + \" } is not allowed to be changed from \"\n              + existingEntity.getDomainId() + \" to \" + entity.getDomainId());\n          }\n        }\n        if (!timelineACLsManager.checkAccess(\n            callerUGI, ApplicationAccessType.MODIFY_APP, entity)) {\n          throw new YarnException(callerUGI\n              + \" is not allowed to put the timeline entity \"\n              + \"{ id: \" + entity.getEntityId() + \", type: \"\n              + entity.getEntityType() + \" } into the domain \"\n              + entity.getDomainId() + \".\");\n        }\n      } catch (Exception e) {\n        // Skip the entity which already exists and was put by others\n        LOG.warn(\"Skip the timeline entity: { id: \" + entity.getEntityId()\n            + \", type: \"+ entity.getEntityType() + \" }\", e);\n        TimelinePutResponse.TimelinePutError error \u003d\n            new TimelinePutResponse.TimelinePutError();\n        error.setEntityId(entity.getEntityId());\n        error.setEntityType(entity.getEntityType());\n        error.setErrorCode(\n            TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n        errors.add(error);\n        continue;\n      }\n\n      entitiesToPut.addEntity(entity);\n    }\n\n    TimelinePutResponse response \u003d store.put(entitiesToPut);\n    // add the errors of timeline system filter key conflict\n    response.addErrors(errors);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java"
    }
  }
}