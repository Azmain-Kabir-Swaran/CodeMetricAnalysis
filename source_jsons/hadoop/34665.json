{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "authorizeStartAndResourceIncreaseRequest",
  "functionId": "authorizeStartAndResourceIncreaseRequest___nmTokenIdentifier-NMTokenIdentifier__containerTokenIdentifier-ContainerTokenIdentifier__startRequest-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 864,
  "functionEndLine": 927,
  "numCommitsSeen": 301,
  "timeTaken": 9931,
  "changeHistory": [
    "ffd820c27a4f8cf4676ad8758696ed89fde80218",
    "bcf2890502fbd11dd394048fe30d67c92aeec4fa",
    "a41c314373bf92669e35ddfcbec1114826c437e7",
    "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f",
    "3ca3137179ef093e42cde06587c9ea785b10f32c",
    "8b9c1e68ab33b8d7720dbca9d9de9e92f9b6b447",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "2692675fc3b5046d2ec88542c30203c87e135b70",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2",
    "ca8024673178fa1c80224b390dfba932921693d9",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00"
  ],
  "changeHistoryShort": {
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "bcf2890502fbd11dd394048fe30d67c92aeec4fa": "Ybodychange",
    "a41c314373bf92669e35ddfcbec1114826c437e7": "Ybodychange",
    "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f": "Ybodychange",
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Ymultichange(Yparameterchange,Ybodychange)",
    "8b9c1e68ab33b8d7720dbca9d9de9e92f9b6b447": "Ybodychange",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "2692675fc3b5046d2ec88542c30203c87e135b70": "Ymultichange(Yparameterchange,Ybodychange)",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": "Ybodychange",
    "ca8024673178fa1c80224b390dfba932921693d9": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": "Ymultichange(Yparameterchange,Ybodychange)",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": "Ybodychange",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "83a18add10ee937a04e833a66e0a4642e776e510",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,64 @@\n-  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n+  protected void authorizeStartAndResourceIncreaseRequest(\n+      NMTokenIdentifier nmTokenIdentifier,\n+      ContainerTokenIdentifier containerTokenIdentifier,\n+      boolean startRequest)\n+      throws YarnException {\n     if (nmTokenIdentifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n     }\n     if (containerTokenIdentifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n     }\n+    /*\n+     * Check the following:\n+     * 1. The request comes from the same application attempt\n+     * 2. The request possess a container token that has not expired\n+     * 3. The request possess a container token that is granted by a known RM\n+     */\n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n-        new StringBuilder(\"Unauthorized request to start container. \");\n+        new StringBuilder(\"Unauthorized request to \" + (startRequest ?\n+            \"start container.\" : \"increase container resource.\"));\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n         equals(containerId.getApplicationAttemptId().getApplicationId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n-        .append(\" was used for starting container with container token\")\n+        .append(\" was used for \"\n+            + (startRequest ? \"starting \" : \"increasing resource of \")\n+            + \"container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n-    } else if (!this.context.getContainerTokenSecretManager()\n+    } else if (startRequest \u0026\u0026 !this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n       messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n         .append(\" Check system time and time zones.\");\n     }\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n+    if (containerTokenIdentifier.getRMIdentifier() !\u003d nodeStatusUpdater\n+        .getRMIdentifier()) {\n+      // Is the container coming from unknown RM\n+      StringBuilder sb \u003d new StringBuilder(\"\\nContainer \");\n+      sb.append(containerTokenIdentifier.getContainerID().toString())\n+        .append(\" rejected as it is allocated by a previous RM\");\n+      throw new InvalidContainerException(sb.toString());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartAndResourceIncreaseRequest(\n      NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      boolean startRequest)\n      throws YarnException {\n    if (nmTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    if (containerTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n    }\n    /*\n     * Check the following:\n     * 1. The request comes from the same application attempt\n     * 2. The request possess a container token that has not expired\n     * 3. The request possess a container token that is granted by a known RM\n     */\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to \" + (startRequest ?\n            \"start container.\" : \"increase container resource.\"));\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n        equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for \"\n            + (startRequest ? \"starting \" : \"increasing resource of \")\n            + \"container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (startRequest \u0026\u0026 !this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n      messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n        .append(\" Check system time and time zones.\");\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n    if (containerTokenIdentifier.getRMIdentifier() !\u003d nodeStatusUpdater\n        .getRMIdentifier()) {\n      // Is the container coming from unknown RM\n      StringBuilder sb \u003d new StringBuilder(\"\\nContainer \");\n      sb.append(containerTokenIdentifier.getContainerID().toString())\n        .append(\" rejected as it is allocated by a previous RM\");\n      throw new InvalidContainerException(sb.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "authorizeStartRequest",
            "newValue": "authorizeStartAndResourceIncreaseRequest"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "83a18add10ee937a04e833a66e0a4642e776e510",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,64 @@\n-  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n+  protected void authorizeStartAndResourceIncreaseRequest(\n+      NMTokenIdentifier nmTokenIdentifier,\n+      ContainerTokenIdentifier containerTokenIdentifier,\n+      boolean startRequest)\n+      throws YarnException {\n     if (nmTokenIdentifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n     }\n     if (containerTokenIdentifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n     }\n+    /*\n+     * Check the following:\n+     * 1. The request comes from the same application attempt\n+     * 2. The request possess a container token that has not expired\n+     * 3. The request possess a container token that is granted by a known RM\n+     */\n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n-        new StringBuilder(\"Unauthorized request to start container. \");\n+        new StringBuilder(\"Unauthorized request to \" + (startRequest ?\n+            \"start container.\" : \"increase container resource.\"));\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n         equals(containerId.getApplicationAttemptId().getApplicationId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n-        .append(\" was used for starting container with container token\")\n+        .append(\" was used for \"\n+            + (startRequest ? \"starting \" : \"increasing resource of \")\n+            + \"container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n-    } else if (!this.context.getContainerTokenSecretManager()\n+    } else if (startRequest \u0026\u0026 !this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n       messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n         .append(\" Check system time and time zones.\");\n     }\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n+    if (containerTokenIdentifier.getRMIdentifier() !\u003d nodeStatusUpdater\n+        .getRMIdentifier()) {\n+      // Is the container coming from unknown RM\n+      StringBuilder sb \u003d new StringBuilder(\"\\nContainer \");\n+      sb.append(containerTokenIdentifier.getContainerID().toString())\n+        .append(\" rejected as it is allocated by a previous RM\");\n+      throw new InvalidContainerException(sb.toString());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartAndResourceIncreaseRequest(\n      NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      boolean startRequest)\n      throws YarnException {\n    if (nmTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    if (containerTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n    }\n    /*\n     * Check the following:\n     * 1. The request comes from the same application attempt\n     * 2. The request possess a container token that has not expired\n     * 3. The request possess a container token that is granted by a known RM\n     */\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to \" + (startRequest ?\n            \"start container.\" : \"increase container resource.\"));\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n        equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for \"\n            + (startRequest ? \"starting \" : \"increasing resource of \")\n            + \"container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (startRequest \u0026\u0026 !this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n      messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n        .append(\" Check system time and time zones.\");\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n    if (containerTokenIdentifier.getRMIdentifier() !\u003d nodeStatusUpdater\n        .getRMIdentifier()) {\n      // Is the container coming from unknown RM\n      StringBuilder sb \u003d new StringBuilder(\"\\nContainer \");\n      sb.append(containerTokenIdentifier.getContainerID().toString())\n        .append(\" rejected as it is allocated by a previous RM\");\n      throw new InvalidContainerException(sb.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[nmTokenIdentifier-NMTokenIdentifier, containerTokenIdentifier-ContainerTokenIdentifier]",
            "newValue": "[nmTokenIdentifier-NMTokenIdentifier, containerTokenIdentifier-ContainerTokenIdentifier, startRequest-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "83a18add10ee937a04e833a66e0a4642e776e510",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,64 @@\n-  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n+  protected void authorizeStartAndResourceIncreaseRequest(\n+      NMTokenIdentifier nmTokenIdentifier,\n+      ContainerTokenIdentifier containerTokenIdentifier,\n+      boolean startRequest)\n+      throws YarnException {\n     if (nmTokenIdentifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n     }\n     if (containerTokenIdentifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n     }\n+    /*\n+     * Check the following:\n+     * 1. The request comes from the same application attempt\n+     * 2. The request possess a container token that has not expired\n+     * 3. The request possess a container token that is granted by a known RM\n+     */\n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n-        new StringBuilder(\"Unauthorized request to start container. \");\n+        new StringBuilder(\"Unauthorized request to \" + (startRequest ?\n+            \"start container.\" : \"increase container resource.\"));\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n         equals(containerId.getApplicationAttemptId().getApplicationId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n-        .append(\" was used for starting container with container token\")\n+        .append(\" was used for \"\n+            + (startRequest ? \"starting \" : \"increasing resource of \")\n+            + \"container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n-    } else if (!this.context.getContainerTokenSecretManager()\n+    } else if (startRequest \u0026\u0026 !this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n       messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n         .append(\" Check system time and time zones.\");\n     }\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n+    if (containerTokenIdentifier.getRMIdentifier() !\u003d nodeStatusUpdater\n+        .getRMIdentifier()) {\n+      // Is the container coming from unknown RM\n+      StringBuilder sb \u003d new StringBuilder(\"\\nContainer \");\n+      sb.append(containerTokenIdentifier.getContainerID().toString())\n+        .append(\" rejected as it is allocated by a previous RM\");\n+      throw new InvalidContainerException(sb.toString());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartAndResourceIncreaseRequest(\n      NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      boolean startRequest)\n      throws YarnException {\n    if (nmTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    if (containerTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n    }\n    /*\n     * Check the following:\n     * 1. The request comes from the same application attempt\n     * 2. The request possess a container token that has not expired\n     * 3. The request possess a container token that is granted by a known RM\n     */\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to \" + (startRequest ?\n            \"start container.\" : \"increase container resource.\"));\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n        equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for \"\n            + (startRequest ? \"starting \" : \"increasing resource of \")\n            + \"container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (startRequest \u0026\u0026 !this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n      messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n        .append(\" Check system time and time zones.\");\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n    if (containerTokenIdentifier.getRMIdentifier() !\u003d nodeStatusUpdater\n        .getRMIdentifier()) {\n      // Is the container coming from unknown RM\n      StringBuilder sb \u003d new StringBuilder(\"\\nContainer \");\n      sb.append(containerTokenIdentifier.getContainerID().toString())\n        .append(\" rejected as it is allocated by a previous RM\");\n      throw new InvalidContainerException(sb.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "bcf2890502fbd11dd394048fe30d67c92aeec4fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-644: Basic null check is not performed on passed in arguments before using them in ContainerManagerImpl.startContainer\n",
      "commitDate": "08/05/15 9:11 AM",
      "commitName": "bcf2890502fbd11dd394048fe30d67c92aeec4fa",
      "commitAuthor": "Robert (Bobby) Evans",
      "commitDateOld": "12/02/15 11:46 AM",
      "commitNameOld": "04f5ef18f7877ce30b12b1a3c1e851c420531b72",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 84.85,
      "commitsBetweenForRepo": 787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,44 @@\n   protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n       ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n-\n+    if (nmTokenIdentifier \u003d\u003d null) {\n+      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n+    }\n+    if (containerTokenIdentifier \u003d\u003d null) {\n+      throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n+    }\n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n         equals(containerId.getApplicationAttemptId().getApplicationId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n         .append(\" was used for starting container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n     } else if (!this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n       messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n         .append(\" Check system time and time zones.\");\n     }\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n    if (nmTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    if (containerTokenIdentifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);\n    }\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().\n        equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n      messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n        .append(\" Check system time and time zones.\");\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "a41c314373bf92669e35ddfcbec1114826c437e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2343. Improve NMToken expire exception message. Contributed by Li Lu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615270 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 4:44 PM",
      "commitName": "a41c314373bf92669e35ddfcbec1114826c437e7",
      "commitAuthor": "Jian He",
      "commitDateOld": "31/07/14 1:06 PM",
      "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n       ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n \n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(\n         containerId.getApplicationAttemptId().getApplicationId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n         .append(\" was used for starting container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n     } else if (!this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n+      messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n+        .append(\" Check system time and time zones.\");\n     }\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(\n        containerId.getApplicationAttemptId().getApplicationId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n      messageBuilder.append(\"\\nNote: System times on machines may be out of sync.\")\n        .append(\" Check system time and time zones.\");\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2065 AM cannot create new containers after restart\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607441 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/14 11:35 AM",
      "commitName": "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/06/14 1:08 PM",
      "commitNameOld": "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 21.94,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n       ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n \n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n-    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n-        containerId.getApplicationAttemptId())) {\n+    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(\n+        containerId.getApplicationAttemptId().getApplicationId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n         .append(\" was used for starting container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n     } else if (!this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(\n        containerId.getApplicationAttemptId().getApplicationId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n   protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerTokenIdentifier containerTokenIdentifier,\n-      UserGroupInformation ugi) throws YarnException {\n+      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n \n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n     if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n         containerId.getApplicationAttemptId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n         .append(\" was used for starting container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n-    } else if (!ugi.getUserName().equals(\n-        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n-      unauthorized \u003d true;\n-      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n-        .append(ugi.getUserName()).append(\" Found: \")\n-        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n     } else if (!this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n-\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n        containerId.getApplicationAttemptId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[nmTokenIdentifier-NMTokenIdentifier, containerTokenIdentifier-ContainerTokenIdentifier, ugi-UserGroupInformation]",
            "newValue": "[nmTokenIdentifier-NMTokenIdentifier, containerTokenIdentifier-ContainerTokenIdentifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n   protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerTokenIdentifier containerTokenIdentifier,\n-      UserGroupInformation ugi) throws YarnException {\n+      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n \n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n     if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n         containerId.getApplicationAttemptId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n         .append(\" was used for starting container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n-    } else if (!ugi.getUserName().equals(\n-        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n-      unauthorized \u003d true;\n-      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n-        .append(ugi.getUserName()).append(\" Found: \")\n-        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n     } else if (!this.context.getContainerTokenSecretManager()\n         .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n-\n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n        containerId.getApplicationAttemptId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "8b9c1e68ab33b8d7720dbca9d9de9e92f9b6b447": {
      "type": "Ybodychange",
      "commitMessage": "YARN-62. Modified NodeManagers to avoid AMs from abusing container tokens for repetitive container launches. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503986 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 9:24 PM",
      "commitName": "8b9c1e68ab33b8d7720dbca9d9de9e92f9b6b447",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/06/13 4:49 PM",
      "commitNameOld": "ab647cfcdb255c79e70d9254b5de7ee1acad7a6b",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 28.19,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n       ContainerTokenIdentifier containerTokenIdentifier,\n       UserGroupInformation ugi) throws YarnException {\n \n     ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n     String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n     if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n         containerId.getApplicationAttemptId())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nNMToken for application attempt : \")\n         .append(nmTokenIdentifier.getApplicationAttemptId())\n         .append(\" was used for starting container with container token\")\n         .append(\" issued for application attempt : \")\n         .append(containerId.getApplicationAttemptId());\n     } else if (!ugi.getUserName().equals(\n         nmTokenIdentifier.getApplicationAttemptId().toString())) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n         .append(ugi.getUserName()).append(\" Found: \")\n         .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n     } else if (!this.context.getContainerTokenSecretManager()\n-        .isValidStartContainerRequest(containerId)) {\n+        .isValidStartContainerRequest(containerTokenIdentifier)) {\n       // Is the container being relaunched? Or RPC layer let startCall with\n       // tokens generated off old-secret through?\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\n Attempt to relaunch the same \")\n         .append(\"container with id \").append(containerIDStr).append(\".\");\n     } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n       .currentTimeMillis()) {\n       // Ensure the token is not expired.\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nThis token is expired. current time is \")\n         .append(System.currentTimeMillis()).append(\" found \")\n         .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      UserGroupInformation ugi) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n        containerId.getApplicationAttemptId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!ugi.getUserName().equals(\n        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n        .append(ugi.getUserName()).append(\" Found: \")\n        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerTokenIdentifier)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,45 @@\n-  protected void authorizeRequest(String containerIDStr,\n-      ContainerLaunchContext launchContext,\n-      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n-      throws YarnException {\n+  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerTokenIdentifier containerTokenIdentifier,\n+      UserGroupInformation ugi) throws YarnException {\n \n+    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n+    String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n-\n-    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n+    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n+        containerId.getApplicationAttemptId())) {\n       unauthorized \u003d true;\n-      messageBuilder.append(\"\\nExpected containerId: \"\n-          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n-    } else if (launchContext !\u003d null) {\n-      // Verify other things also for startContainer() request.\n-\n-\n-      if (tokenId \u003d\u003d null) {\n-        unauthorized \u003d true;\n-        messageBuilder\n-          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n-      } else {\n-        \n-        // Is the container being relaunched? Or RPC layer let startCall with \n-      \t//  tokens generated off old-secret through?\n-        if (!this.context.getContainerTokenSecretManager()\n-          .isValidStartContainerRequest(tokenId.getContainerID())) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n-              + \"container with id \" + containerIDStr + \".\");\n-        }\n-\n-        // Ensure the token is not expired. \n-        // Token expiry is not checked for stopContainer/getContainerStatus\n-        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\nThis token is expired. current time is \"\n-              + System.currentTimeMillis() + \" found \"\n-              + tokenId.getExpiryTimeStamp());\n-        }\n-      }\n+      messageBuilder.append(\"\\nNMToken for application attempt : \")\n+        .append(nmTokenIdentifier.getApplicationAttemptId())\n+        .append(\" was used for starting container with container token\")\n+        .append(\" issued for application attempt : \")\n+        .append(containerId.getApplicationAttemptId());\n+    } else if (!ugi.getUserName().equals(\n+        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n+        .append(ugi.getUserName()).append(\" Found: \")\n+        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n+    } else if (!this.context.getContainerTokenSecretManager()\n+        .isValidStartContainerRequest(containerId)) {\n+      // Is the container being relaunched? Or RPC layer let startCall with\n+      // tokens generated off old-secret through?\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n+        .append(\"container with id \").append(containerIDStr).append(\".\");\n+    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n+      .currentTimeMillis()) {\n+      // Ensure the token is not expired.\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nThis token is expired. current time is \")\n+        .append(System.currentTimeMillis()).append(\" found \")\n+        .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      UserGroupInformation ugi) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n        containerId.getApplicationAttemptId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!ugi.getUserName().equals(\n        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n        .append(ugi.getUserName()).append(\" Found: \")\n        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerId)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "authorizeRequest",
            "newValue": "authorizeStartRequest"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,45 @@\n-  protected void authorizeRequest(String containerIDStr,\n-      ContainerLaunchContext launchContext,\n-      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n-      throws YarnException {\n+  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerTokenIdentifier containerTokenIdentifier,\n+      UserGroupInformation ugi) throws YarnException {\n \n+    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n+    String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n-\n-    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n+    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n+        containerId.getApplicationAttemptId())) {\n       unauthorized \u003d true;\n-      messageBuilder.append(\"\\nExpected containerId: \"\n-          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n-    } else if (launchContext !\u003d null) {\n-      // Verify other things also for startContainer() request.\n-\n-\n-      if (tokenId \u003d\u003d null) {\n-        unauthorized \u003d true;\n-        messageBuilder\n-          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n-      } else {\n-        \n-        // Is the container being relaunched? Or RPC layer let startCall with \n-      \t//  tokens generated off old-secret through?\n-        if (!this.context.getContainerTokenSecretManager()\n-          .isValidStartContainerRequest(tokenId.getContainerID())) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n-              + \"container with id \" + containerIDStr + \".\");\n-        }\n-\n-        // Ensure the token is not expired. \n-        // Token expiry is not checked for stopContainer/getContainerStatus\n-        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\nThis token is expired. current time is \"\n-              + System.currentTimeMillis() + \" found \"\n-              + tokenId.getExpiryTimeStamp());\n-        }\n-      }\n+      messageBuilder.append(\"\\nNMToken for application attempt : \")\n+        .append(nmTokenIdentifier.getApplicationAttemptId())\n+        .append(\" was used for starting container with container token\")\n+        .append(\" issued for application attempt : \")\n+        .append(containerId.getApplicationAttemptId());\n+    } else if (!ugi.getUserName().equals(\n+        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n+        .append(ugi.getUserName()).append(\" Found: \")\n+        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n+    } else if (!this.context.getContainerTokenSecretManager()\n+        .isValidStartContainerRequest(containerId)) {\n+      // Is the container being relaunched? Or RPC layer let startCall with\n+      // tokens generated off old-secret through?\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n+        .append(\"container with id \").append(containerIDStr).append(\".\");\n+    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n+      .currentTimeMillis()) {\n+      // Ensure the token is not expired.\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nThis token is expired. current time is \")\n+        .append(System.currentTimeMillis()).append(\" found \")\n+        .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      UserGroupInformation ugi) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n        containerId.getApplicationAttemptId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!ugi.getUserName().equals(\n        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n        .append(ugi.getUserName()).append(\" Found: \")\n        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerId)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, remoteUgi-UserGroupInformation, tokenId-ContainerTokenIdentifier]",
            "newValue": "[nmTokenIdentifier-NMTokenIdentifier, containerTokenIdentifier-ContainerTokenIdentifier, ugi-UserGroupInformation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,45 @@\n-  protected void authorizeRequest(String containerIDStr,\n-      ContainerLaunchContext launchContext,\n-      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n-      throws YarnException {\n+  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerTokenIdentifier containerTokenIdentifier,\n+      UserGroupInformation ugi) throws YarnException {\n \n+    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n+    String containerIDStr \u003d containerId.toString();\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n-\n-    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n+    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n+        containerId.getApplicationAttemptId())) {\n       unauthorized \u003d true;\n-      messageBuilder.append(\"\\nExpected containerId: \"\n-          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n-    } else if (launchContext !\u003d null) {\n-      // Verify other things also for startContainer() request.\n-\n-\n-      if (tokenId \u003d\u003d null) {\n-        unauthorized \u003d true;\n-        messageBuilder\n-          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n-      } else {\n-        \n-        // Is the container being relaunched? Or RPC layer let startCall with \n-      \t//  tokens generated off old-secret through?\n-        if (!this.context.getContainerTokenSecretManager()\n-          .isValidStartContainerRequest(tokenId.getContainerID())) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n-              + \"container with id \" + containerIDStr + \".\");\n-        }\n-\n-        // Ensure the token is not expired. \n-        // Token expiry is not checked for stopContainer/getContainerStatus\n-        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\nThis token is expired. current time is \"\n-              + System.currentTimeMillis() + \" found \"\n-              + tokenId.getExpiryTimeStamp());\n-        }\n-      }\n+      messageBuilder.append(\"\\nNMToken for application attempt : \")\n+        .append(nmTokenIdentifier.getApplicationAttemptId())\n+        .append(\" was used for starting container with container token\")\n+        .append(\" issued for application attempt : \")\n+        .append(containerId.getApplicationAttemptId());\n+    } else if (!ugi.getUserName().equals(\n+        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n+        .append(ugi.getUserName()).append(\" Found: \")\n+        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n+    } else if (!this.context.getContainerTokenSecretManager()\n+        .isValidStartContainerRequest(containerId)) {\n+      // Is the container being relaunched? Or RPC layer let startCall with\n+      // tokens generated off old-secret through?\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n+        .append(\"container with id \").append(containerIDStr).append(\".\");\n+    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n+      .currentTimeMillis()) {\n+      // Ensure the token is not expired.\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nThis token is expired. current time is \")\n+        .append(System.currentTimeMillis()).append(\" found \")\n+        .append(containerTokenIdentifier.getExpiryTimeStamp());\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeStartRequest(NMTokenIdentifier nmTokenIdentifier,\n      ContainerTokenIdentifier containerTokenIdentifier,\n      UserGroupInformation ugi) throws YarnException {\n\n    ContainerId containerId \u003d containerTokenIdentifier.getContainerID();\n    String containerIDStr \u003d containerId.toString();\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n    if (!nmTokenIdentifier.getApplicationAttemptId().equals(\n        containerId.getApplicationAttemptId())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nNMToken for application attempt : \")\n        .append(nmTokenIdentifier.getApplicationAttemptId())\n        .append(\" was used for starting container with container token\")\n        .append(\" issued for application attempt : \")\n        .append(containerId.getApplicationAttemptId());\n    } else if (!ugi.getUserName().equals(\n        nmTokenIdentifier.getApplicationAttemptId().toString())) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected applicationAttemptId: \")\n        .append(ugi.getUserName()).append(\" Found: \")\n        .append(nmTokenIdentifier.getApplicationAttemptId().toString());\n    } else if (!this.context.getContainerTokenSecretManager()\n        .isValidStartContainerRequest(containerId)) {\n      // Is the container being relaunched? Or RPC layer let startCall with\n      // tokens generated off old-secret through?\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\n Attempt to relaunch the same \")\n        .append(\"container with id \").append(containerIDStr).append(\".\");\n    } else if (containerTokenIdentifier.getExpiryTimeStamp() \u003c System\n      .currentTimeMillis()) {\n      // Ensure the token is not expired.\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nThis token is expired. current time is \")\n        .append(System.currentTimeMillis()).append(\" found \")\n        .append(containerTokenIdentifier.getExpiryTimeStamp());\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n       UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n-      throws YarnRemoteException {\n+      throws YarnException {\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n           .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n         \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \"\n               + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnException]"
      }
    },
    "2692675fc3b5046d2ec88542c30203c87e135b70": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 9:13 PM",
      "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/13 9:13 PM",
          "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "29/05/13 9:59 PM",
          "commitNameOld": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,49 @@\n   protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n-      org.apache.hadoop.yarn.api.records.Container container,\n       UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n       throws YarnRemoteException {\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n           .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n         \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \"\n               + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n-        \n-        Resource resource \u003d tokenId.getResource();\n-        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\nExpected resource \" + resource\n-              + \" but found \" + container.getResource());\n-        }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnRemoteException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, container-org.apache.hadoop.yarn.api.records.Container, remoteUgi-UserGroupInformation, tokenId-ContainerTokenIdentifier]",
            "newValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, remoteUgi-UserGroupInformation, tokenId-ContainerTokenIdentifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/13 9:13 PM",
          "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "29/05/13 9:59 PM",
          "commitNameOld": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,49 @@\n   protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n-      org.apache.hadoop.yarn.api.records.Container container,\n       UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n       throws YarnRemoteException {\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n           .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n         \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \"\n               + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n-        \n-        Resource resource \u003d tokenId.getResource();\n-        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\nExpected resource \" + resource\n-              + \" but found \" + container.getResource());\n-        }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnRemoteException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-571. Remove user from ContainerLaunchContext. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 8:22 PM",
      "commitName": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/05/13 11:36 PM",
      "commitNameOld": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.87,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,57 @@\n   protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n       org.apache.hadoop.yarn.api.records.Container container,\n       UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n       throws YarnRemoteException {\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n           .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n-\n-        // Is the container coming in with correct user-name?\n-        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n-          unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Expected user-name \"\n-              + tokenId.getApplicationSubmitter() + \" but found \"\n-              + launchContext.getUser());\n-        }\n-\n         \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \"\n               + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n         if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + container.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      org.apache.hadoop.yarn.api.records.Container container,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnRemoteException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + container.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ca8024673178fa1c80224b390dfba932921693d9": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/13 11:36 PM",
      "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/05/13 11:36 PM",
          "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/05/13 9:11 PM",
          "commitNameOld": "1a119f87b4f0a78d56e1bb998b1cbc081484fbd1",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 3.1,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,66 @@\n-  private void authorizeRequest(String containerIDStr,\n+  protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n       org.apache.hadoop.yarn.api.records.Container container,\n-      UserGroupInformation remoteUgi)\n+      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n       throws YarnRemoteException {\n \n-    if (!UserGroupInformation.isSecurityEnabled()) {\n-      return;\n-    }\n-\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n-            + remoteUgi.getTokenIdentifiers().size());\n-      }\n-\n-      // Get the tokenId from the remote user ugi\n-      ContainerTokenIdentifier tokenId \u003d\n-          selectContainerTokenIdentifier(remoteUgi);\n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n-            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n-                + containerIDStr);\n+          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n \n         // Is the container coming in with correct user-name?\n-        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n+        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Expected user-name \"\n               + tokenId.getApplicationSubmitter() + \" but found \"\n               + launchContext.getUser());\n         }\n \n+        \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n-          .isValidStartContainerRequest(tokenId)) {\n+          .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n-              \"container with id \" + containerIDStr + \".\");\n+          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n+              + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n-        if (!resource.equals(container.getResource())) {\n+        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + container.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      org.apache.hadoop.yarn.api.records.Container container,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnRemoteException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n\n        // Is the container coming in with correct user-name?\n        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Expected user-name \"\n              + tokenId.getApplicationSubmitter() + \" but found \"\n              + launchContext.getUser());\n        }\n\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + container.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, container-org.apache.hadoop.yarn.api.records.Container, remoteUgi-UserGroupInformation]",
            "newValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, container-org.apache.hadoop.yarn.api.records.Container, remoteUgi-UserGroupInformation, tokenId-ContainerTokenIdentifier]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/05/13 11:36 PM",
          "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/05/13 9:11 PM",
          "commitNameOld": "1a119f87b4f0a78d56e1bb998b1cbc081484fbd1",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 3.1,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,66 @@\n-  private void authorizeRequest(String containerIDStr,\n+  protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n       org.apache.hadoop.yarn.api.records.Container container,\n-      UserGroupInformation remoteUgi)\n+      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n       throws YarnRemoteException {\n \n-    if (!UserGroupInformation.isSecurityEnabled()) {\n-      return;\n-    }\n-\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n-            + remoteUgi.getTokenIdentifiers().size());\n-      }\n-\n-      // Get the tokenId from the remote user ugi\n-      ContainerTokenIdentifier tokenId \u003d\n-          selectContainerTokenIdentifier(remoteUgi);\n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n-            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n-                + containerIDStr);\n+          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n \n         // Is the container coming in with correct user-name?\n-        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n+        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Expected user-name \"\n               + tokenId.getApplicationSubmitter() + \" but found \"\n               + launchContext.getUser());\n         }\n \n+        \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n-          .isValidStartContainerRequest(tokenId)) {\n+          .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n-              \"container with id \" + containerIDStr + \".\");\n+          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n+              + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n-        if (!resource.equals(container.getResource())) {\n+        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + container.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      org.apache.hadoop.yarn.api.records.Container container,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnRemoteException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n\n        // Is the container coming in with correct user-name?\n        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Expected user-name \"\n              + tokenId.getApplicationSubmitter() + \" but found \"\n              + launchContext.getUser());\n        }\n\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + container.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/05/13 11:36 PM",
          "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/05/13 9:11 PM",
          "commitNameOld": "1a119f87b4f0a78d56e1bb998b1cbc081484fbd1",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 3.1,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,66 @@\n-  private void authorizeRequest(String containerIDStr,\n+  protected void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext,\n       org.apache.hadoop.yarn.api.records.Container container,\n-      UserGroupInformation remoteUgi)\n+      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n       throws YarnRemoteException {\n \n-    if (!UserGroupInformation.isSecurityEnabled()) {\n-      return;\n-    }\n-\n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n-            + remoteUgi.getTokenIdentifiers().size());\n-      }\n-\n-      // Get the tokenId from the remote user ugi\n-      ContainerTokenIdentifier tokenId \u003d\n-          selectContainerTokenIdentifier(remoteUgi);\n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n-            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n-                + containerIDStr);\n+          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n       } else {\n \n         // Is the container coming in with correct user-name?\n-        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n+        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Expected user-name \"\n               + tokenId.getApplicationSubmitter() + \" but found \"\n               + launchContext.getUser());\n         }\n \n+        \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n-          .isValidStartContainerRequest(tokenId)) {\n+          .isValidStartContainerRequest(tokenId.getContainerID())) {\n           unauthorized \u003d true;\n-          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n-              \"container with id \" + containerIDStr + \".\");\n+          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n+              + \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n-        if (!resource.equals(container.getResource())) {\n+        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + container.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      org.apache.hadoop.yarn.api.records.Container container,\n      UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)\n      throws YarnRemoteException {\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n          .append(\"\\nNo ContainerToken found for \" + containerIDStr);\n      } else {\n\n        // Is the container coming in with correct user-name?\n        if (!launchContext.getUser().equals(tokenId.getApplicationSubmitter())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Expected user-name \"\n              + tokenId.getApplicationSubmitter() + \" but found \"\n              + launchContext.getUser());\n        }\n\n        \n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId.getContainerID())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \"\n              + \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (resource \u003d\u003d null || !resource.equals(container.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + container.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/13 12:28 PM",
      "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/04/13 12:28 PM",
          "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/12/12 4:12 AM",
          "commitNameOld": "235749a8ab5f303b5b3a2993da8c5bea1818183b",
          "commitAuthorOld": "Thomas White",
          "daysBetweenCommits": 129.3,
          "commitsBetweenForRepo": 595,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,78 @@\n   private void authorizeRequest(String containerIDStr,\n-      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n+      ContainerLaunchContext launchContext,\n+      org.apache.hadoop.yarn.api.records.Container container,\n+      UserGroupInformation remoteUgi)\n       throws YarnRemoteException {\n \n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n             + remoteUgi.getTokenIdentifiers().size());\n       }\n \n       // Get the tokenId from the remote user ugi\n       ContainerTokenIdentifier tokenId \u003d\n           selectContainerTokenIdentifier(remoteUgi);\n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n             .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                 + containerIDStr);\n       } else {\n \n         // Is the container coming in with correct user-name?\n         if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Expected user-name \"\n               + tokenId.getApplicationSubmitter() + \" but found \"\n               + launchContext.getUser());\n         }\n \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId)) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n               \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n-        if (!resource.equals(launchContext.getResource())) {\n+        if (!resource.equals(container.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n-              + \" but found \" + launchContext.getResource());\n+              + \" but found \" + container.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      org.apache.hadoop.yarn.api.records.Container container,\n      UserGroupInformation remoteUgi)\n      throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n            + remoteUgi.getTokenIdentifiers().size());\n      }\n\n      // Get the tokenId from the remote user ugi\n      ContainerTokenIdentifier tokenId \u003d\n          selectContainerTokenIdentifier(remoteUgi);\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Is the container coming in with correct user-name?\n        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Expected user-name \"\n              + tokenId.getApplicationSubmitter() + \" but found \"\n              + launchContext.getUser());\n        }\n\n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId)) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n              \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(container.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + container.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, remoteUgi-UserGroupInformation]",
            "newValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, container-org.apache.hadoop.yarn.api.records.Container, remoteUgi-UserGroupInformation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/04/13 12:28 PM",
          "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/12/12 4:12 AM",
          "commitNameOld": "235749a8ab5f303b5b3a2993da8c5bea1818183b",
          "commitAuthorOld": "Thomas White",
          "daysBetweenCommits": 129.3,
          "commitsBetweenForRepo": 595,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,78 @@\n   private void authorizeRequest(String containerIDStr,\n-      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n+      ContainerLaunchContext launchContext,\n+      org.apache.hadoop.yarn.api.records.Container container,\n+      UserGroupInformation remoteUgi)\n       throws YarnRemoteException {\n \n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n             + remoteUgi.getTokenIdentifiers().size());\n       }\n \n       // Get the tokenId from the remote user ugi\n       ContainerTokenIdentifier tokenId \u003d\n           selectContainerTokenIdentifier(remoteUgi);\n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n             .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                 + containerIDStr);\n       } else {\n \n         // Is the container coming in with correct user-name?\n         if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Expected user-name \"\n               + tokenId.getApplicationSubmitter() + \" but found \"\n               + launchContext.getUser());\n         }\n \n         // Is the container being relaunched? Or RPC layer let startCall with \n       \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId)) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n               \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n-        if (!resource.equals(launchContext.getResource())) {\n+        if (!resource.equals(container.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n-              + \" but found \" + launchContext.getResource());\n+              + \" but found \" + container.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext,\n      org.apache.hadoop.yarn.api.records.Container container,\n      UserGroupInformation remoteUgi)\n      throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n            + remoteUgi.getTokenIdentifiers().size());\n      }\n\n      // Get the tokenId from the remote user ugi\n      ContainerTokenIdentifier tokenId \u003d\n          selectContainerTokenIdentifier(remoteUgi);\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Is the container coming in with correct user-name?\n        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Expected user-name \"\n              + tokenId.getApplicationSubmitter() + \" but found \"\n              + launchContext.getUser());\n        }\n\n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId)) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n              \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(container.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + container.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": {
      "type": "Ybodychange",
      "commitMessage": "Fix NodeManager to verify the application\u0027s user-name.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:43 PM",
      "commitName": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/12 7:18 PM",
      "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 33.06,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,76 @@\n   private void authorizeRequest(String containerIDStr,\n       ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n       throws YarnRemoteException {\n \n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d\n         new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     } else if (launchContext !\u003d null) {\n       // Verify other things also for startContainer() request.\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n             + remoteUgi.getTokenIdentifiers().size());\n       }\n \n-\n       // Get the tokenId from the remote user ugi\n       ContainerTokenIdentifier tokenId \u003d\n           selectContainerTokenIdentifier(remoteUgi);\n \n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n             .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                 + containerIDStr);\n       } else {\n \n+        // Is the container coming in with correct user-name?\n+        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n+          unauthorized \u003d true;\n+          messageBuilder.append(\"\\n Expected user-name \"\n+              + tokenId.getApplicationSubmitter() + \" but found \"\n+              + launchContext.getUser());\n+        }\n+\n         // Is the container being relaunched? Or RPC layer let startCall with \n-    \t//  tokens generated off old-secret through \n+      \t//  tokens generated off old-secret through?\n         if (!this.context.getContainerTokenSecretManager()\n           .isValidStartContainerRequest(tokenId)) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n               \"container with id \" + containerIDStr + \".\");\n         }\n \n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n         if (!resource.equals(launchContext.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + launchContext.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n      throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n            + remoteUgi.getTokenIdentifiers().size());\n      }\n\n      // Get the tokenId from the remote user ugi\n      ContainerTokenIdentifier tokenId \u003d\n          selectContainerTokenIdentifier(remoteUgi);\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Is the container coming in with correct user-name?\n        if (!tokenId.getApplicationSubmitter().equals(launchContext.getUser())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Expected user-name \"\n              + tokenId.getApplicationSubmitter() + \" but found \"\n              + launchContext.getUser());\n        }\n\n        // Is the container being relaunched? Or RPC layer let startCall with \n      \t//  tokens generated off old-secret through?\n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId)) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n              \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(launchContext.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + launchContext.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 16.87,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,69 @@\n-  private void authorizeRequest(ContainerId containerID,\n-      ContainerLaunchContext launchContext) throws YarnRemoteException {\n+  private void authorizeRequest(String containerIDStr,\n+      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n+      throws YarnRemoteException {\n \n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n \n-    String containerIDStr \u003d containerID.toString();\n-\n-    UserGroupInformation remoteUgi;\n-    try {\n-      remoteUgi \u003d UserGroupInformation.getCurrentUser();\n-    } catch (IOException e) {\n-      String msg \u003d \"Cannot obtain the user-name for containerId: \"\n-          + containerIDStr + \". Got exception: \"\n-          + StringUtils.stringifyException(e);\n-      LOG.warn(msg);\n-      throw RPCUtil.getRemoteException(msg);\n-    }\n-\n     boolean unauthorized \u003d false;\n-    StringBuilder messageBuilder \u003d new StringBuilder(\n-        \"Unauthorized request to start container. \");\n+    StringBuilder messageBuilder \u003d\n+        new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n-    }\n-\n-    if (launchContext !\u003d null) {\n-\n-      // Verify other things for startContainer() request.\n+    } else if (launchContext !\u003d null) {\n+      // Verify other things also for startContainer() request.\n \n       if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n-          + remoteUgi.getTokenIdentifiers().size());\n+        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n+            + remoteUgi.getTokenIdentifiers().size());\n       }\n-      // We must and should get only one TokenIdentifier from the RPC.\n-      ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n-          .getTokenIdentifiers().iterator().next();\n+\n+\n+      // Get the tokenId from the remote user ugi\n+      ContainerTokenIdentifier tokenId \u003d\n+          selectContainerTokenIdentifier(remoteUgi);\n+\n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n             .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                 + containerIDStr);\n       } else {\n \n+        // Is the container being relaunched? Or RPC layer let startCall with \n+    \t//  tokens generated off old-secret through \n+        if (!this.context.getContainerTokenSecretManager()\n+          .isValidStartContainerRequest(tokenId)) {\n+          unauthorized \u003d true;\n+          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n+              \"container with id \" + containerIDStr + \".\");\n+        }\n+\n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n         if (!resource.equals(launchContext.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + launchContext.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n      throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n            + remoteUgi.getTokenIdentifiers().size());\n      }\n\n\n      // Get the tokenId from the remote user ugi\n      ContainerTokenIdentifier tokenId \u003d\n          selectContainerTokenIdentifier(remoteUgi);\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Is the container being relaunched? Or RPC layer let startCall with \n    \t//  tokens generated off old-secret through \n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId)) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n              \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(launchContext.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + launchContext.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerID-ContainerId, launchContext-ContainerLaunchContext]",
            "newValue": "[containerIDStr-String, launchContext-ContainerLaunchContext, remoteUgi-UserGroupInformation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 16.87,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,69 @@\n-  private void authorizeRequest(ContainerId containerID,\n-      ContainerLaunchContext launchContext) throws YarnRemoteException {\n+  private void authorizeRequest(String containerIDStr,\n+      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n+      throws YarnRemoteException {\n \n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n \n-    String containerIDStr \u003d containerID.toString();\n-\n-    UserGroupInformation remoteUgi;\n-    try {\n-      remoteUgi \u003d UserGroupInformation.getCurrentUser();\n-    } catch (IOException e) {\n-      String msg \u003d \"Cannot obtain the user-name for containerId: \"\n-          + containerIDStr + \". Got exception: \"\n-          + StringUtils.stringifyException(e);\n-      LOG.warn(msg);\n-      throw RPCUtil.getRemoteException(msg);\n-    }\n-\n     boolean unauthorized \u003d false;\n-    StringBuilder messageBuilder \u003d new StringBuilder(\n-        \"Unauthorized request to start container. \");\n+    StringBuilder messageBuilder \u003d\n+        new StringBuilder(\"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n-    }\n-\n-    if (launchContext !\u003d null) {\n-\n-      // Verify other things for startContainer() request.\n+    } else if (launchContext !\u003d null) {\n+      // Verify other things also for startContainer() request.\n \n       if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n-          + remoteUgi.getTokenIdentifiers().size());\n+        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n+            + remoteUgi.getTokenIdentifiers().size());\n       }\n-      // We must and should get only one TokenIdentifier from the RPC.\n-      ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n-          .getTokenIdentifiers().iterator().next();\n+\n+\n+      // Get the tokenId from the remote user ugi\n+      ContainerTokenIdentifier tokenId \u003d\n+          selectContainerTokenIdentifier(remoteUgi);\n+\n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n             .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                 + containerIDStr);\n       } else {\n \n+        // Is the container being relaunched? Or RPC layer let startCall with \n+    \t//  tokens generated off old-secret through \n+        if (!this.context.getContainerTokenSecretManager()\n+          .isValidStartContainerRequest(tokenId)) {\n+          unauthorized \u003d true;\n+          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n+              \"container with id \" + containerIDStr + \".\");\n+        }\n+\n         // Ensure the token is not expired. \n         // Token expiry is not checked for stopContainer/getContainerStatus\n         if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nThis token is expired. current time is \"\n               + System.currentTimeMillis() + \" found \"\n               + tokenId.getExpiryTimeStamp());\n         }\n         \n         Resource resource \u003d tokenId.getResource();\n         if (!resource.equals(launchContext.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + launchContext.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void authorizeRequest(String containerIDStr,\n      ContainerLaunchContext launchContext, UserGroupInformation remoteUgi)\n      throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d\n        new StringBuilder(\"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    } else if (launchContext !\u003d null) {\n      // Verify other things also for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n            + remoteUgi.getTokenIdentifiers().size());\n      }\n\n\n      // Get the tokenId from the remote user ugi\n      ContainerTokenIdentifier tokenId \u003d\n          selectContainerTokenIdentifier(remoteUgi);\n\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Is the container being relaunched? Or RPC layer let startCall with \n    \t//  tokens generated off old-secret through \n        if (!this.context.getContainerTokenSecretManager()\n          .isValidStartContainerRequest(tokenId)) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\n Attempt to relaunch the same \" +\n              \"container with id \" + containerIDStr + \".\");\n        }\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(launchContext.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + launchContext.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void authorizeRequest(ContainerId containerID,\n      ContainerLaunchContext launchContext) throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    String containerIDStr \u003d containerID.toString();\n\n    UserGroupInformation remoteUgi;\n    try {\n      remoteUgi \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      String msg \u003d \"Cannot obtain the user-name for containerId: \"\n          + containerIDStr + \". Got exception: \"\n          + StringUtils.stringifyException(e);\n      LOG.warn(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d new StringBuilder(\n        \"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    }\n\n    if (launchContext !\u003d null) {\n\n      // Verify other things for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n          + remoteUgi.getTokenIdentifiers().size());\n      }\n      // We must and should get only one TokenIdentifier from the RPC.\n      ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n          .getTokenIdentifiers().iterator().next();\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(launchContext.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + launchContext.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3940. ContainerTokens should have an expiry interval. Contributed by Siddharth Seth and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359910 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 2:26 PM",
      "commitName": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/06/12 2:54 PM",
      "commitNameOld": "1cf60106758c482991f08caa136446885d5f8f27",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 38.98,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,72 @@\n   private void authorizeRequest(ContainerId containerID,\n       ContainerLaunchContext launchContext) throws YarnRemoteException {\n \n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n \n     String containerIDStr \u003d containerID.toString();\n \n     UserGroupInformation remoteUgi;\n     try {\n       remoteUgi \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       String msg \u003d \"Cannot obtain the user-name for containerId: \"\n           + containerIDStr + \". Got exception: \"\n           + StringUtils.stringifyException(e);\n       LOG.warn(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n \n     boolean unauthorized \u003d false;\n     StringBuilder messageBuilder \u003d new StringBuilder(\n         \"Unauthorized request to start container. \");\n \n     if (!remoteUgi.getUserName().equals(containerIDStr)) {\n       unauthorized \u003d true;\n       messageBuilder.append(\"\\nExpected containerId: \"\n           + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n     }\n \n     if (launchContext !\u003d null) {\n \n       // Verify other things for startContainer() request.\n \n       if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n           + remoteUgi.getTokenIdentifiers().size());\n       }\n       // We must and should get only one TokenIdentifier from the RPC.\n       ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n           .getTokenIdentifiers().iterator().next();\n       if (tokenId \u003d\u003d null) {\n         unauthorized \u003d true;\n         messageBuilder\n             .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                 + containerIDStr);\n       } else {\n \n+        // Ensure the token is not expired. \n+        // Token expiry is not checked for stopContainer/getContainerStatus\n+        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n+          unauthorized \u003d true;\n+          messageBuilder.append(\"\\nThis token is expired. current time is \"\n+              + System.currentTimeMillis() + \" found \"\n+              + tokenId.getExpiryTimeStamp());\n+        }\n+        \n         Resource resource \u003d tokenId.getResource();\n         if (!resource.equals(launchContext.getResource())) {\n           unauthorized \u003d true;\n           messageBuilder.append(\"\\nExpected resource \" + resource\n               + \" but found \" + launchContext.getResource());\n         }\n       }\n     }\n \n     if (unauthorized) {\n       String msg \u003d messageBuilder.toString();\n       LOG.error(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void authorizeRequest(ContainerId containerID,\n      ContainerLaunchContext launchContext) throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    String containerIDStr \u003d containerID.toString();\n\n    UserGroupInformation remoteUgi;\n    try {\n      remoteUgi \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      String msg \u003d \"Cannot obtain the user-name for containerId: \"\n          + containerIDStr + \". Got exception: \"\n          + StringUtils.stringifyException(e);\n      LOG.warn(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d new StringBuilder(\n        \"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    }\n\n    if (launchContext !\u003d null) {\n\n      // Verify other things for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n          + remoteUgi.getTokenIdentifiers().size());\n      }\n      // We must and should get only one TokenIdentifier from the RPC.\n      ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n          .getTokenIdentifiers().iterator().next();\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        // Ensure the token is not expired. \n        // Token expiry is not checked for stopContainer/getContainerStatus\n        if (tokenId.getExpiryTimeStamp() \u003c System.currentTimeMillis()) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nThis token is expired. current time is \"\n              + System.currentTimeMillis() + \" found \"\n              + tokenId.getExpiryTimeStamp());\n        }\n        \n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(launchContext.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + launchContext.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/11 2:35 AM",
      "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,63 @@\n+  private void authorizeRequest(ContainerId containerID,\n+      ContainerLaunchContext launchContext) throws YarnRemoteException {\n+\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      return;\n+    }\n+\n+    String containerIDStr \u003d containerID.toString();\n+\n+    UserGroupInformation remoteUgi;\n+    try {\n+      remoteUgi \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException e) {\n+      String msg \u003d \"Cannot obtain the user-name for containerId: \"\n+          + containerIDStr + \". Got exception: \"\n+          + StringUtils.stringifyException(e);\n+      LOG.warn(msg);\n+      throw RPCUtil.getRemoteException(msg);\n+    }\n+\n+    boolean unauthorized \u003d false;\n+    StringBuilder messageBuilder \u003d new StringBuilder(\n+        \"Unauthorized request to start container. \");\n+\n+    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n+      unauthorized \u003d true;\n+      messageBuilder.append(\"\\nExpected containerId: \"\n+          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n+    }\n+\n+    if (launchContext !\u003d null) {\n+\n+      // Verify other things for startContainer() request.\n+\n+      if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n+          + remoteUgi.getTokenIdentifiers().size());\n+      }\n+      // We must and should get only one TokenIdentifier from the RPC.\n+      ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n+          .getTokenIdentifiers().iterator().next();\n+      if (tokenId \u003d\u003d null) {\n+        unauthorized \u003d true;\n+        messageBuilder\n+            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n+                + containerIDStr);\n+      } else {\n+\n+        Resource resource \u003d tokenId.getResource();\n+        if (!resource.equals(launchContext.getResource())) {\n+          unauthorized \u003d true;\n+          messageBuilder.append(\"\\nExpected resource \" + resource\n+              + \" but found \" + launchContext.getResource());\n+        }\n+      }\n+    }\n+\n+    if (unauthorized) {\n+      String msg \u003d messageBuilder.toString();\n+      LOG.error(msg);\n+      throw RPCUtil.getRemoteException(msg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void authorizeRequest(ContainerId containerID,\n      ContainerLaunchContext launchContext) throws YarnRemoteException {\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n\n    String containerIDStr \u003d containerID.toString();\n\n    UserGroupInformation remoteUgi;\n    try {\n      remoteUgi \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      String msg \u003d \"Cannot obtain the user-name for containerId: \"\n          + containerIDStr + \". Got exception: \"\n          + StringUtils.stringifyException(e);\n      LOG.warn(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n\n    boolean unauthorized \u003d false;\n    StringBuilder messageBuilder \u003d new StringBuilder(\n        \"Unauthorized request to start container. \");\n\n    if (!remoteUgi.getUserName().equals(containerIDStr)) {\n      unauthorized \u003d true;\n      messageBuilder.append(\"\\nExpected containerId: \"\n          + remoteUgi.getUserName() + \" Found: \" + containerIDStr);\n    }\n\n    if (launchContext !\u003d null) {\n\n      // Verify other things for startContainer() request.\n\n      if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Number of TokenIdentifiers in the UGI from RPC: \"\n          + remoteUgi.getTokenIdentifiers().size());\n      }\n      // We must and should get only one TokenIdentifier from the RPC.\n      ContainerTokenIdentifier tokenId \u003d (ContainerTokenIdentifier) remoteUgi\n          .getTokenIdentifiers().iterator().next();\n      if (tokenId \u003d\u003d null) {\n        unauthorized \u003d true;\n        messageBuilder\n            .append(\"\\nContainerTokenIdentifier cannot be null! Null found for \"\n                + containerIDStr);\n      } else {\n\n        Resource resource \u003d tokenId.getResource();\n        if (!resource.equals(launchContext.getResource())) {\n          unauthorized \u003d true;\n          messageBuilder.append(\"\\nExpected resource \" + resource\n              + \" but found \" + launchContext.getResource());\n        }\n      }\n    }\n\n    if (unauthorized) {\n      String msg \u003d messageBuilder.toString();\n      LOG.error(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}