{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReceiver.java",
  "functionName": "sendOOBResponse",
  "functionId": "sendOOBResponse___ackStatus-Status(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
  "functionStartLine": 1293,
  "functionEndLine": 1326,
  "numCommitsSeen": 106,
  "timeTaken": 3310,
  "changeHistory": [
    "d16c4eee186492608ffeb1c2e83f437000cc64f6",
    "c4980a2f343778544ca20ebea1338651793ea0d9",
    "1c6b5d2b5841e5219a98937088cde4ae63869f80"
  ],
  "changeHistoryShort": {
    "d16c4eee186492608ffeb1c2e83f437000cc64f6": "Ybodychange",
    "c4980a2f343778544ca20ebea1338651793ea0d9": "Ybodychange",
    "1c6b5d2b5841e5219a98937088cde4ae63869f80": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d16c4eee186492608ffeb1c2e83f437000cc64f6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9012. Move o.a.h.hdfs.protocol.datatransfer.PipelineAck class to hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "04/09/15 10:41 AM",
      "commitName": "d16c4eee186492608ffeb1c2e83f437000cc64f6",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "31/07/15 3:01 PM",
      "commitNameOld": "21d10ccc6e463cf250414264c78acb4a6e7c83e3",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 34.82,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     void sendOOBResponse(final Status ackStatus) throws IOException,\n         InterruptedException {\n       if (!running) {\n         LOG.info(\"Cannot send OOB response \" + ackStatus + \n             \". Responder not running.\");\n         return;\n       }\n \n       synchronized(this) {\n         if (sending) {\n-          wait(PipelineAck.getOOBTimeout(ackStatus));\n+          wait(datanode.getOOBTimeout(ackStatus));\n           // Didn\u0027t get my turn in time. Give up.\n           if (sending) {\n             throw new IOException(\"Could not send OOB reponse in time: \"\n                 + ackStatus);\n           }\n         }\n         sending \u003d true;\n       }\n \n       LOG.info(\"Sending an out of band ack of type \" + ackStatus);\n       try {\n         sendAckUpstreamUnprotected(null, PipelineAck.UNKOWN_SEQNO, 0L, 0L,\n             PipelineAck.combineHeader(datanode.getECN(), ackStatus));\n       } finally {\n         // Let others send ack. Unless there are miltiple OOB send\n         // calls, there can be only one waiter, the responder thread.\n         // In any case, only one needs to be notified.\n         synchronized(this) {\n           sending \u003d false;\n           notify();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void sendOOBResponse(final Status ackStatus) throws IOException,\n        InterruptedException {\n      if (!running) {\n        LOG.info(\"Cannot send OOB response \" + ackStatus + \n            \". Responder not running.\");\n        return;\n      }\n\n      synchronized(this) {\n        if (sending) {\n          wait(datanode.getOOBTimeout(ackStatus));\n          // Didn\u0027t get my turn in time. Give up.\n          if (sending) {\n            throw new IOException(\"Could not send OOB reponse in time: \"\n                + ackStatus);\n          }\n        }\n        sending \u003d true;\n      }\n\n      LOG.info(\"Sending an out of band ack of type \" + ackStatus);\n      try {\n        sendAckUpstreamUnprotected(null, PipelineAck.UNKOWN_SEQNO, 0L, 0L,\n            PipelineAck.combineHeader(datanode.getECN(), ackStatus));\n      } finally {\n        // Let others send ack. Unless there are miltiple OOB send\n        // calls, there can be only one waiter, the responder thread.\n        // In any case, only one needs to be notified.\n        synchronized(this) {\n          sending \u003d false;\n          notify();\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "c4980a2f343778544ca20ebea1338651793ea0d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7270. Add congestion signaling capability to DataNode write protocol. Contributed by Haohui Mai.\n",
      "commitDate": "05/02/15 10:58 AM",
      "commitName": "c4980a2f343778544ca20ebea1338651793ea0d9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/01/15 10:37 AM",
      "commitNameOld": "5f124efb3e090f96f217bee22f3c8897f9772f14",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     void sendOOBResponse(final Status ackStatus) throws IOException,\n         InterruptedException {\n       if (!running) {\n         LOG.info(\"Cannot send OOB response \" + ackStatus + \n             \". Responder not running.\");\n         return;\n       }\n \n       synchronized(this) {\n         if (sending) {\n           wait(PipelineAck.getOOBTimeout(ackStatus));\n           // Didn\u0027t get my turn in time. Give up.\n           if (sending) {\n             throw new IOException(\"Could not send OOB reponse in time: \"\n                 + ackStatus);\n           }\n         }\n         sending \u003d true;\n       }\n \n       LOG.info(\"Sending an out of band ack of type \" + ackStatus);\n       try {\n         sendAckUpstreamUnprotected(null, PipelineAck.UNKOWN_SEQNO, 0L, 0L,\n-            ackStatus);\n+            PipelineAck.combineHeader(datanode.getECN(), ackStatus));\n       } finally {\n         // Let others send ack. Unless there are miltiple OOB send\n         // calls, there can be only one waiter, the responder thread.\n         // In any case, only one needs to be notified.\n         synchronized(this) {\n           sending \u003d false;\n           notify();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void sendOOBResponse(final Status ackStatus) throws IOException,\n        InterruptedException {\n      if (!running) {\n        LOG.info(\"Cannot send OOB response \" + ackStatus + \n            \". Responder not running.\");\n        return;\n      }\n\n      synchronized(this) {\n        if (sending) {\n          wait(PipelineAck.getOOBTimeout(ackStatus));\n          // Didn\u0027t get my turn in time. Give up.\n          if (sending) {\n            throw new IOException(\"Could not send OOB reponse in time: \"\n                + ackStatus);\n          }\n        }\n        sending \u003d true;\n      }\n\n      LOG.info(\"Sending an out of band ack of type \" + ackStatus);\n      try {\n        sendAckUpstreamUnprotected(null, PipelineAck.UNKOWN_SEQNO, 0L, 0L,\n            PipelineAck.combineHeader(datanode.getECN(), ackStatus));\n      } finally {\n        // Let others send ack. Unless there are miltiple OOB send\n        // calls, there can be only one waiter, the responder thread.\n        // In any case, only one needs to be notified.\n        synchronized(this) {\n          sending \u003d false;\n          notify();\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java",
      "extendedDetails": {}
    },
    "1c6b5d2b5841e5219a98937088cde4ae63869f80": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5583. Make DN send an OOB Ack on shutdown before restarting. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 3:38 PM",
      "commitName": "1c6b5d2b5841e5219a98937088cde4ae63869f80",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,34 @@\n+    void sendOOBResponse(final Status ackStatus) throws IOException,\n+        InterruptedException {\n+      if (!running) {\n+        LOG.info(\"Cannot send OOB response \" + ackStatus + \n+            \". Responder not running.\");\n+        return;\n+      }\n+\n+      synchronized(this) {\n+        if (sending) {\n+          wait(PipelineAck.getOOBTimeout(ackStatus));\n+          // Didn\u0027t get my turn in time. Give up.\n+          if (sending) {\n+            throw new IOException(\"Could not send OOB reponse in time: \"\n+                + ackStatus);\n+          }\n+        }\n+        sending \u003d true;\n+      }\n+\n+      LOG.info(\"Sending an out of band ack of type \" + ackStatus);\n+      try {\n+        sendAckUpstreamUnprotected(null, PipelineAck.UNKOWN_SEQNO, 0L, 0L,\n+            ackStatus);\n+      } finally {\n+        // Let others send ack. Unless there are miltiple OOB send\n+        // calls, there can be only one waiter, the responder thread.\n+        // In any case, only one needs to be notified.\n+        synchronized(this) {\n+          sending \u003d false;\n+          notify();\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void sendOOBResponse(final Status ackStatus) throws IOException,\n        InterruptedException {\n      if (!running) {\n        LOG.info(\"Cannot send OOB response \" + ackStatus + \n            \". Responder not running.\");\n        return;\n      }\n\n      synchronized(this) {\n        if (sending) {\n          wait(PipelineAck.getOOBTimeout(ackStatus));\n          // Didn\u0027t get my turn in time. Give up.\n          if (sending) {\n            throw new IOException(\"Could not send OOB reponse in time: \"\n                + ackStatus);\n          }\n        }\n        sending \u003d true;\n      }\n\n      LOG.info(\"Sending an out of band ack of type \" + ackStatus);\n      try {\n        sendAckUpstreamUnprotected(null, PipelineAck.UNKOWN_SEQNO, 0L, 0L,\n            ackStatus);\n      } finally {\n        // Let others send ack. Unless there are miltiple OOB send\n        // calls, there can be only one waiter, the responder thread.\n        // In any case, only one needs to be notified.\n        synchronized(this) {\n          sending \u003d false;\n          notify();\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java"
    }
  }
}