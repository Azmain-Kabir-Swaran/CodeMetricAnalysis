{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairCallQueue.java",
  "functionName": "take",
  "functionId": "take",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
  "functionStartLine": 279,
  "functionEndLine": 282,
  "numCommitsSeen": 14,
  "timeTaken": 1080,
  "changeHistory": [
    "0c01cf57987bcc7a17154a3538960b67f625a9e5",
    "4b3a6b87221076a6b5df2bf4243575018e5f1793"
  ],
  "changeHistoryShort": {
    "0c01cf57987bcc7a17154a3538960b67f625a9e5": "Ybodychange",
    "4b3a6b87221076a6b5df2bf4243575018e5f1793": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c01cf57987bcc7a17154a3538960b67f625a9e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14033. Reduce fair call queue lock contention. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 2:17 PM",
      "commitName": "0c01cf57987bcc7a17154a3538960b67f625a9e5",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/02/17 8:04 AM",
      "commitNameOld": "a0bfb4150464013a618f30c2e38d88fc6de11ad2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,4 @@\n   public E take() throws InterruptedException {\n-    int startIdx \u003d this.multiplexer.getAndAdvanceCurrentIndex();\n-\n-    takeLock.lockInterruptibly();\n-    try {\n-      // Wait while queue is empty\n-      for (;;) {\n-        BlockingQueue\u003cE\u003e q \u003d this.getFirstNonEmptyQueue(startIdx);\n-        if (q !\u003d null) {\n-          // Got queue, so return if we can poll out an object\n-          E e \u003d q.poll();\n-          if (e !\u003d null) {\n-            return e;\n-          }\n-        }\n-\n-        notEmpty.await();\n-      }\n-    } finally {\n-      takeLock.unlock();\n-    }\n+    semaphore.acquire();\n+    return removeNextElement();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public E take() throws InterruptedException {\n    semaphore.acquire();\n    return removeNextElement();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
      "extendedDetails": {}
    },
    "4b3a6b87221076a6b5df2bf4243575018e5f1793": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10282. Create a FairCallQueue: a multi-level call queue which schedules incoming calls and multiplexes outgoing calls. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619938 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/14 3:16 PM",
      "commitName": "4b3a6b87221076a6b5df2bf4243575018e5f1793",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,22 @@\n+  public E take() throws InterruptedException {\n+    int startIdx \u003d this.multiplexer.getAndAdvanceCurrentIndex();\n+\n+    takeLock.lockInterruptibly();\n+    try {\n+      // Wait while queue is empty\n+      for (;;) {\n+        BlockingQueue\u003cE\u003e q \u003d this.getFirstNonEmptyQueue(startIdx);\n+        if (q !\u003d null) {\n+          // Got queue, so return if we can poll out an object\n+          E e \u003d q.poll();\n+          if (e !\u003d null) {\n+            return e;\n+          }\n+        }\n+\n+        notEmpty.await();\n+      }\n+    } finally {\n+      takeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public E take() throws InterruptedException {\n    int startIdx \u003d this.multiplexer.getAndAdvanceCurrentIndex();\n\n    takeLock.lockInterruptibly();\n    try {\n      // Wait while queue is empty\n      for (;;) {\n        BlockingQueue\u003cE\u003e q \u003d this.getFirstNonEmptyQueue(startIdx);\n        if (q !\u003d null) {\n          // Got queue, so return if we can poll out an object\n          E e \u003d q.poll();\n          if (e !\u003d null) {\n            return e;\n          }\n        }\n\n        notEmpty.await();\n      }\n    } finally {\n      takeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java"
    }
  }
}