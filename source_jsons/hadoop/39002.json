{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActivitiesManager.java",
  "functionName": "getCurrentNodeAllocation",
  "functionId": "getCurrentNodeAllocation___nodeID-NodeId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
  "functionStartLine": 501,
  "functionEndLine": 530,
  "numCommitsSeen": 16,
  "timeTaken": 1750,
  "changeHistory": [
    "fc05b0e70e9bb556d6bdc00fa8735e18a6f90bc9",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188"
  ],
  "changeHistoryShort": {
    "fc05b0e70e9bb556d6bdc00fa8735e18a6f90bc9": "Ybodychange",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc05b0e70e9bb556d6bdc00fa8735e18a6f90bc9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9313. Support asynchronized scheduling mode and multi-node lookup mechanism for scheduler activities. Contributed by Tao Yang.\n",
      "commitDate": "07/04/19 10:40 PM",
      "commitName": "fc05b0e70e9bb556d6bdc00fa8735e18a6f90bc9",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 34.02,
      "commitsBetweenForRepo": 270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   private NodeAllocation getCurrentNodeAllocation(NodeId nodeID) {\n-    List\u003cNodeAllocation\u003e nodeAllocations \u003d recordingNodesAllocation.get(nodeID);\n+    NodeId recordingKey \u003d\n+        isRecordingMultiNodes() ? EMPTY_NODE_ID : nodeID;\n+    List\u003cNodeAllocation\u003e nodeAllocations \u003d\n+        recordingNodesAllocation.get().get(recordingKey);\n     NodeAllocation nodeAllocation;\n     // When this node has already stored allocation activities, get the\n     // last allocation for this node.\n     if (nodeAllocations.size() !\u003d 0) {\n       nodeAllocation \u003d nodeAllocations.get(nodeAllocations.size() - 1);\n       // When final state in last allocation is not DEFAULT, it means\n       // last allocation has finished. Create a new allocation for this node,\n       // and add it to the allocation list. Return this new allocation.\n       //\n       // When final state in last allocation is DEFAULT,\n       // it means last allocation has not finished. Just get last allocation.\n       if (nodeAllocation.getFinalAllocationState() !\u003d AllocationState.DEFAULT) {\n         nodeAllocation \u003d new NodeAllocation(nodeID);\n         nodeAllocations.add(nodeAllocation);\n       }\n     }\n     // When this node has not stored allocation activities,\n     // create a new allocation for this node, and add it to the allocation list.\n     // Return this new allocation.\n     else {\n       nodeAllocation \u003d new NodeAllocation(nodeID);\n       nodeAllocations.add(nodeAllocation);\n     }\n     return nodeAllocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeAllocation getCurrentNodeAllocation(NodeId nodeID) {\n    NodeId recordingKey \u003d\n        isRecordingMultiNodes() ? EMPTY_NODE_ID : nodeID;\n    List\u003cNodeAllocation\u003e nodeAllocations \u003d\n        recordingNodesAllocation.get().get(recordingKey);\n    NodeAllocation nodeAllocation;\n    // When this node has already stored allocation activities, get the\n    // last allocation for this node.\n    if (nodeAllocations.size() !\u003d 0) {\n      nodeAllocation \u003d nodeAllocations.get(nodeAllocations.size() - 1);\n      // When final state in last allocation is not DEFAULT, it means\n      // last allocation has finished. Create a new allocation for this node,\n      // and add it to the allocation list. Return this new allocation.\n      //\n      // When final state in last allocation is DEFAULT,\n      // it means last allocation has not finished. Just get last allocation.\n      if (nodeAllocation.getFinalAllocationState() !\u003d AllocationState.DEFAULT) {\n        nodeAllocation \u003d new NodeAllocation(nodeID);\n        nodeAllocations.add(nodeAllocation);\n      }\n    }\n    // When this node has not stored allocation activities,\n    // create a new allocation for this node, and add it to the allocation list.\n    // Return this new allocation.\n    else {\n      nodeAllocation \u003d new NodeAllocation(nodeID);\n      nodeAllocations.add(nodeAllocation);\n    }\n    return nodeAllocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
      "extendedDetails": {}
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,27 @@\n+  private NodeAllocation getCurrentNodeAllocation(NodeId nodeID) {\n+    List\u003cNodeAllocation\u003e nodeAllocations \u003d recordingNodesAllocation.get(nodeID);\n+    NodeAllocation nodeAllocation;\n+    // When this node has already stored allocation activities, get the\n+    // last allocation for this node.\n+    if (nodeAllocations.size() !\u003d 0) {\n+      nodeAllocation \u003d nodeAllocations.get(nodeAllocations.size() - 1);\n+      // When final state in last allocation is not DEFAULT, it means\n+      // last allocation has finished. Create a new allocation for this node,\n+      // and add it to the allocation list. Return this new allocation.\n+      //\n+      // When final state in last allocation is DEFAULT,\n+      // it means last allocation has not finished. Just get last allocation.\n+      if (nodeAllocation.getFinalAllocationState() !\u003d AllocationState.DEFAULT) {\n+        nodeAllocation \u003d new NodeAllocation(nodeID);\n+        nodeAllocations.add(nodeAllocation);\n+      }\n+    }\n+    // When this node has not stored allocation activities,\n+    // create a new allocation for this node, and add it to the allocation list.\n+    // Return this new allocation.\n+    else {\n+      nodeAllocation \u003d new NodeAllocation(nodeID);\n+      nodeAllocations.add(nodeAllocation);\n+    }\n+    return nodeAllocation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeAllocation getCurrentNodeAllocation(NodeId nodeID) {\n    List\u003cNodeAllocation\u003e nodeAllocations \u003d recordingNodesAllocation.get(nodeID);\n    NodeAllocation nodeAllocation;\n    // When this node has already stored allocation activities, get the\n    // last allocation for this node.\n    if (nodeAllocations.size() !\u003d 0) {\n      nodeAllocation \u003d nodeAllocations.get(nodeAllocations.size() - 1);\n      // When final state in last allocation is not DEFAULT, it means\n      // last allocation has finished. Create a new allocation for this node,\n      // and add it to the allocation list. Return this new allocation.\n      //\n      // When final state in last allocation is DEFAULT,\n      // it means last allocation has not finished. Just get last allocation.\n      if (nodeAllocation.getFinalAllocationState() !\u003d AllocationState.DEFAULT) {\n        nodeAllocation \u003d new NodeAllocation(nodeID);\n        nodeAllocations.add(nodeAllocation);\n      }\n    }\n    // When this node has not stored allocation activities,\n    // create a new allocation for this node, and add it to the allocation list.\n    // Return this new allocation.\n    else {\n      nodeAllocation \u003d new NodeAllocation(nodeID);\n      nodeAllocations.add(nodeAllocation);\n    }\n    return nodeAllocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java"
    }
  }
}