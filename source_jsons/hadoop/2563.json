{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientNamenodeProtocolTranslatorPB.java",
  "functionName": "create",
  "functionId": "create___src-String__masked-FsPermission__clientName-String__flag-EnumSetWritable__CreateFlag____createParent-boolean__replication-short__blockSize-long__supportedVersions-CryptoProtocolVersion[]__ecPolicyName-String__storagePolicy-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
  "functionStartLine": 354,
  "functionEndLine": 388,
  "numCommitsSeen": 314,
  "timeTaken": 5774,
  "changeHistory": [
    "0d7a5ac5f526801367a9ec963e6d72783b637d55",
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad"
  ],
  "changeHistoryShort": {
    "0d7a5ac5f526801367a9ec963e6d72783b637d55": "Ymultichange(Yparameterchange,Ybodychange)",
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Yexceptionschange",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": "Yfilerename",
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "0d7a5ac5f526801367a9ec963e6d72783b637d55": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
      "commitDate": "14/02/19 8:43 AM",
      "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
          "commitDate": "14/02/19 8:43 AM",
          "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "24/12/18 9:34 AM",
          "commitNameOld": "652b257478f723a9e119e5e9181f3c7450ac92b5",
          "commitAuthorOld": "Chen Liang",
          "daysBetweenCommits": 51.96,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,35 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize,\n-      CryptoProtocolVersion[] supportedVersions, String ecPolicyName)\n+      CryptoProtocolVersion[] supportedVersions, String ecPolicyName,\n+      String storagePolicy)\n       throws IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n     if (ecPolicyName !\u003d null) {\n       builder.setEcPolicyName(ecPolicyName);\n     }\n+    if (storagePolicy !\u003d null) {\n+      builder.setStoragePolicy(storagePolicy);\n+    }\n     FsPermission unmasked \u003d masked.getUnmasked();\n     if (unmasked !\u003d null) {\n       builder.setUnmasked(PBHelperClient.convert(unmasked));\n     }\n     builder.addAllCryptoProtocolVersion(\n         PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize,\n      CryptoProtocolVersion[] supportedVersions, String ecPolicyName,\n      String storagePolicy)\n      throws IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    if (ecPolicyName !\u003d null) {\n      builder.setEcPolicyName(ecPolicyName);\n    }\n    if (storagePolicy !\u003d null) {\n      builder.setStoragePolicy(storagePolicy);\n    }\n    FsPermission unmasked \u003d masked.getUnmasked();\n    if (unmasked !\u003d null) {\n      builder.setUnmasked(PBHelperClient.convert(unmasked));\n    }\n    builder.addAllCryptoProtocolVersion(\n        PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[src-String, masked-FsPermission, clientName-String, flag-EnumSetWritable\u003cCreateFlag\u003e, createParent-boolean, replication-short, blockSize-long, supportedVersions-CryptoProtocolVersion[], ecPolicyName-String]",
            "newValue": "[src-String, masked-FsPermission, clientName-String, flag-EnumSetWritable\u003cCreateFlag\u003e, createParent-boolean, replication-short, blockSize-long, supportedVersions-CryptoProtocolVersion[], ecPolicyName-String, storagePolicy-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
          "commitDate": "14/02/19 8:43 AM",
          "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "24/12/18 9:34 AM",
          "commitNameOld": "652b257478f723a9e119e5e9181f3c7450ac92b5",
          "commitAuthorOld": "Chen Liang",
          "daysBetweenCommits": 51.96,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,35 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize,\n-      CryptoProtocolVersion[] supportedVersions, String ecPolicyName)\n+      CryptoProtocolVersion[] supportedVersions, String ecPolicyName,\n+      String storagePolicy)\n       throws IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n     if (ecPolicyName !\u003d null) {\n       builder.setEcPolicyName(ecPolicyName);\n     }\n+    if (storagePolicy !\u003d null) {\n+      builder.setStoragePolicy(storagePolicy);\n+    }\n     FsPermission unmasked \u003d masked.getUnmasked();\n     if (unmasked !\u003d null) {\n       builder.setUnmasked(PBHelperClient.convert(unmasked));\n     }\n     builder.addAllCryptoProtocolVersion(\n         PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize,\n      CryptoProtocolVersion[] supportedVersions, String ecPolicyName,\n      String storagePolicy)\n      throws IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    if (ecPolicyName !\u003d null) {\n      builder.setEcPolicyName(ecPolicyName);\n    }\n    if (storagePolicy !\u003d null) {\n      builder.setStoragePolicy(storagePolicy);\n    }\n    FsPermission unmasked \u003d masked.getUnmasked();\n    if (unmasked !\u003d null) {\n      builder.setUnmasked(PBHelperClient.convert(unmasked));\n    }\n    builder.addAllCryptoProtocolVersion(\n        PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10996. Ability to specify per-file EC policy at create time. Contributed by SammiChen.\n",
      "commitDate": "12/04/17 12:27 PM",
      "commitName": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10996. Ability to specify per-file EC policy at create time. Contributed by SammiChen.\n",
          "commitDate": "12/04/17 12:27 PM",
          "commitName": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "01/03/17 2:36 AM",
          "commitNameOld": "82ef9accafe7318278efb169678e17065e082c8e",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 42.37,
          "commitsBetweenForRepo": 267,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,31 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize,\n-      CryptoProtocolVersion[] supportedVersions)\n+      CryptoProtocolVersion[] supportedVersions, String ecPolicyName)\n       throws IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n+    if (ecPolicyName !\u003d null) {\n+      builder.setEcPolicyName(ecPolicyName);\n+    }\n     FsPermission unmasked \u003d masked.getUnmasked();\n     if (unmasked !\u003d null) {\n       builder.setUnmasked(PBHelperClient.convert(unmasked));\n     }\n     builder.addAllCryptoProtocolVersion(\n         PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize,\n      CryptoProtocolVersion[] supportedVersions, String ecPolicyName)\n      throws IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    if (ecPolicyName !\u003d null) {\n      builder.setEcPolicyName(ecPolicyName);\n    }\n    FsPermission unmasked \u003d masked.getUnmasked();\n    if (unmasked !\u003d null) {\n      builder.setUnmasked(PBHelperClient.convert(unmasked));\n    }\n    builder.addAllCryptoProtocolVersion(\n        PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[src-String, masked-FsPermission, clientName-String, flag-EnumSetWritable\u003cCreateFlag\u003e, createParent-boolean, replication-short, blockSize-long, supportedVersions-CryptoProtocolVersion[]]",
            "newValue": "[src-String, masked-FsPermission, clientName-String, flag-EnumSetWritable\u003cCreateFlag\u003e, createParent-boolean, replication-short, blockSize-long, supportedVersions-CryptoProtocolVersion[], ecPolicyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10996. Ability to specify per-file EC policy at create time. Contributed by SammiChen.\n",
          "commitDate": "12/04/17 12:27 PM",
          "commitName": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "01/03/17 2:36 AM",
          "commitNameOld": "82ef9accafe7318278efb169678e17065e082c8e",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 42.37,
          "commitsBetweenForRepo": 267,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,31 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize,\n-      CryptoProtocolVersion[] supportedVersions)\n+      CryptoProtocolVersion[] supportedVersions, String ecPolicyName)\n       throws IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n+    if (ecPolicyName !\u003d null) {\n+      builder.setEcPolicyName(ecPolicyName);\n+    }\n     FsPermission unmasked \u003d masked.getUnmasked();\n     if (unmasked !\u003d null) {\n       builder.setUnmasked(PBHelperClient.convert(unmasked));\n     }\n     builder.addAllCryptoProtocolVersion(\n         PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize,\n      CryptoProtocolVersion[] supportedVersions, String ecPolicyName)\n      throws IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    if (ecPolicyName !\u003d null) {\n      builder.setEcPolicyName(ecPolicyName);\n    }\n    FsPermission unmasked \u003d masked.getUnmasked();\n    if (unmasked !\u003d null) {\n      builder.setUnmasked(PBHelperClient.convert(unmasked));\n    }\n    builder.addAllCryptoProtocolVersion(\n        PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 11:02 AM",
      "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "22/08/16 6:29 PM",
      "commitNameOld": "c49333becfa7652460976a61eb86522010bcfeed",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.69,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize,\n       CryptoProtocolVersion[] supportedVersions)\n       throws IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n+    FsPermission unmasked \u003d masked.getUnmasked();\n+    if (unmasked !\u003d null) {\n+      builder.setUnmasked(PBHelperClient.convert(unmasked));\n+    }\n     builder.addAllCryptoProtocolVersion(\n         PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize,\n      CryptoProtocolVersion[] supportedVersions)\n      throws IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    FsPermission unmasked \u003d masked.getUnmasked();\n    if (unmasked !\u003d null) {\n      builder.setUnmasked(PBHelperClient.convert(unmasked));\n    }\n    builder.addAllCryptoProtocolVersion(\n        PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 1:39 AM",
      "commitNameOld": "8fd55202468b28422b0df888641c9b08906fe4a7",
      "commitAuthorOld": "",
      "daysBetweenCommits": 4.42,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,24 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n-      boolean createParent, short replication, long blockSize, \n+      boolean createParent, short replication, long blockSize,\n       CryptoProtocolVersion[] supportedVersions)\n-      throws AccessControlException, AlreadyBeingCreatedException,\n-      DSQuotaExceededException, FileAlreadyExistsException,\n-      FileNotFoundException, NSQuotaExceededException,\n-      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n-      IOException {\n+      throws IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n-    builder.addAllCryptoProtocolVersion(PBHelperClient.convert(supportedVersions));\n+    builder.addAllCryptoProtocolVersion(\n+        PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize,\n      CryptoProtocolVersion[] supportedVersions)\n      throws IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    builder.addAllCryptoProtocolVersion(\n        PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
      "extendedDetails": {
        "oldValue": "[AccessControlException, AlreadyBeingCreatedException, DSQuotaExceededException, FileAlreadyExistsException, FileNotFoundException, NSQuotaExceededException, ParentNotDirectoryException, SafeModeException, UnresolvedLinkException, IOException]",
        "newValue": "[IOException]"
      }
    },
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
      "commitDate": "22/09/15 8:52 PM",
      "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/09/15 9:08 AM",
      "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize, \n      CryptoProtocolVersion[] supportedVersions)\n      throws AccessControlException, AlreadyBeingCreatedException,\n      DSQuotaExceededException, FileAlreadyExistsException,\n      FileNotFoundException, NSQuotaExceededException,\n      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n      IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    builder.addAllCryptoProtocolVersion(PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java"
      }
    },
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/08/15 1:31 PM",
      "commitNameOld": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 30.22,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize, \n       CryptoProtocolVersion[] supportedVersions)\n       throws AccessControlException, AlreadyBeingCreatedException,\n       DSQuotaExceededException, FileAlreadyExistsException,\n       FileNotFoundException, NSQuotaExceededException,\n       ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n       IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n-        .setMasked(PBHelper.convert(masked))\n+        .setMasked(PBHelperClient.convert(masked))\n         .setClientName(clientName)\n-        .setCreateFlag(PBHelper.convertCreateFlag(flag))\n+        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n-    builder.addAllCryptoProtocolVersion(PBHelper.convert(supportedVersions));\n+    builder.addAllCryptoProtocolVersion(PBHelperClient.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n-      return res.hasFs() ? PBHelper.convert(res.getFs()) : null;\n+      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize, \n      CryptoProtocolVersion[] supportedVersions)\n      throws AccessControlException, AlreadyBeingCreatedException,\n      DSQuotaExceededException, FileAlreadyExistsException,\n      FileNotFoundException, NSQuotaExceededException,\n      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n      IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelperClient.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelperClient.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    builder.addAllCryptoProtocolVersion(PBHelperClient.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelperClient.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
          "commitDate": "25/09/14 6:40 PM",
          "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "24/09/14 7:11 PM",
          "commitNameOld": "428a76663a0de5d0d74cc9525273ddc470760e44",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize, \n-      List\u003cCipherSuite\u003e cipherSuites)\n+      CryptoProtocolVersion[] supportedVersions)\n       throws AccessControlException, AlreadyBeingCreatedException,\n       DSQuotaExceededException, FileAlreadyExistsException,\n       FileNotFoundException, NSQuotaExceededException,\n       ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n       IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelper.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelper.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n-    if (cipherSuites !\u003d null) {\n-      builder.addAllCipherSuites(PBHelper.convertCipherSuites(cipherSuites));\n-    }\n+    builder.addAllCryptoProtocolVersion(PBHelper.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelper.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize, \n      CryptoProtocolVersion[] supportedVersions)\n      throws AccessControlException, AlreadyBeingCreatedException,\n      DSQuotaExceededException, FileAlreadyExistsException,\n      FileNotFoundException, NSQuotaExceededException,\n      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n      IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelper.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelper.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    builder.addAllCryptoProtocolVersion(PBHelper.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelper.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[src-String, masked-FsPermission, clientName-String, flag-EnumSetWritable\u003cCreateFlag\u003e, createParent-boolean, replication-short, blockSize-long, cipherSuites-List\u003cCipherSuite\u003e]",
            "newValue": "[src-String, masked-FsPermission, clientName-String, flag-EnumSetWritable\u003cCreateFlag\u003e, createParent-boolean, replication-short, blockSize-long, supportedVersions-CryptoProtocolVersion[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
          "commitDate": "25/09/14 6:40 PM",
          "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "24/09/14 7:11 PM",
          "commitNameOld": "428a76663a0de5d0d74cc9525273ddc470760e44",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n   public HdfsFileStatus create(String src, FsPermission masked,\n       String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n       boolean createParent, short replication, long blockSize, \n-      List\u003cCipherSuite\u003e cipherSuites)\n+      CryptoProtocolVersion[] supportedVersions)\n       throws AccessControlException, AlreadyBeingCreatedException,\n       DSQuotaExceededException, FileAlreadyExistsException,\n       FileNotFoundException, NSQuotaExceededException,\n       ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n       IOException {\n     CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n         .setSrc(src)\n         .setMasked(PBHelper.convert(masked))\n         .setClientName(clientName)\n         .setCreateFlag(PBHelper.convertCreateFlag(flag))\n         .setCreateParent(createParent)\n         .setReplication(replication)\n         .setBlockSize(blockSize);\n-    if (cipherSuites !\u003d null) {\n-      builder.addAllCipherSuites(PBHelper.convertCipherSuites(cipherSuites));\n-    }\n+    builder.addAllCryptoProtocolVersion(PBHelper.convert(supportedVersions));\n     CreateRequestProto req \u003d builder.build();\n     try {\n       CreateResponseProto res \u003d rpcProxy.create(null, req);\n       return res.hasFs() ? PBHelper.convert(res.getFs()) : null;\n     } catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsFileStatus create(String src, FsPermission masked,\n      String clientName, EnumSetWritable\u003cCreateFlag\u003e flag,\n      boolean createParent, short replication, long blockSize, \n      CryptoProtocolVersion[] supportedVersions)\n      throws AccessControlException, AlreadyBeingCreatedException,\n      DSQuotaExceededException, FileAlreadyExistsException,\n      FileNotFoundException, NSQuotaExceededException,\n      ParentNotDirectoryException, SafeModeException, UnresolvedLinkException,\n      IOException {\n    CreateRequestProto.Builder builder \u003d CreateRequestProto.newBuilder()\n        .setSrc(src)\n        .setMasked(PBHelper.convert(masked))\n        .setClientName(clientName)\n        .setCreateFlag(PBHelper.convertCreateFlag(flag))\n        .setCreateParent(createParent)\n        .setReplication(replication)\n        .setBlockSize(blockSize);\n    builder.addAllCryptoProtocolVersion(PBHelper.convert(supportedVersions));\n    CreateRequestProto req \u003d builder.build();\n    try {\n      CreateResponseProto res \u003d rpcProxy.create(null, req);\n      return res.hasFs() ? PBHelper.convert(res.getFs()) : null;\n    } catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}