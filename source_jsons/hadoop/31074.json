{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptorREST.java",
  "functionName": "createInterceptorForSubCluster",
  "functionId": "createInterceptorForSubCluster___subClusterId-SubClusterId__webAppAddress-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java",
  "functionStartLine": 202,
  "functionEndLine": 234,
  "numCommitsSeen": 20,
  "timeTaken": 1334,
  "changeHistory": [
    "8be5707067509b78bde5fcf60072ae988d5a9f32",
    "cc59b5fb26ccf58dffcd8850fa12ec65250f127d"
  ],
  "changeHistoryShort": {
    "8be5707067509b78bde5fcf60072ae988d5a9f32": "Ybodychange",
    "cc59b5fb26ccf58dffcd8850fa12ec65250f127d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8be5707067509b78bde5fcf60072ae988d5a9f32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7276. Federation Router Web Service fixes. Contributed by Inigo Goiri.\n",
      "commitDate": "27/10/17 4:46 PM",
      "commitName": "8be5707067509b78bde5fcf60072ae988d5a9f32",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "03/10/17 3:01 PM",
      "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.07,
      "commitsBetweenForRepo": 186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private DefaultRequestInterceptorREST createInterceptorForSubCluster(\n       SubClusterId subClusterId, String webAppAddress) {\n \n     final Configuration conf \u003d this.getConf();\n \n-    String interceptorClassName \u003d\n-        conf.get(YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS,\n-            YarnConfiguration.DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS);\n+    String interceptorClassName \u003d conf.get(\n+        YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS,\n+        YarnConfiguration.DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS);\n     DefaultRequestInterceptorREST interceptorInstance \u003d null;\n     try {\n       Class\u003c?\u003e interceptorClass \u003d conf.getClassByName(interceptorClassName);\n       if (DefaultRequestInterceptorREST.class\n           .isAssignableFrom(interceptorClass)) {\n         interceptorInstance \u003d (DefaultRequestInterceptorREST) ReflectionUtils\n             .newInstance(interceptorClass, conf);\n \n       } else {\n         throw new YarnRuntimeException(\n             \"Class: \" + interceptorClassName + \" not instance of \"\n                 + DefaultRequestInterceptorREST.class.getCanonicalName());\n       }\n     } catch (ClassNotFoundException e) {\n       throw new YarnRuntimeException(\n           \"Could not instantiate ApplicationMasterRequestInterceptor: \"\n               + interceptorClassName,\n           e);\n     }\n \n-    interceptorInstance.setWebAppAddress(webAppAddress);\n+    interceptorInstance.setWebAppAddress(\"http://\" + webAppAddress);\n     interceptorInstance.setSubClusterId(subClusterId);\n     interceptors.put(subClusterId, interceptorInstance);\n     return interceptorInstance;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DefaultRequestInterceptorREST createInterceptorForSubCluster(\n      SubClusterId subClusterId, String webAppAddress) {\n\n    final Configuration conf \u003d this.getConf();\n\n    String interceptorClassName \u003d conf.get(\n        YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS,\n        YarnConfiguration.DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS);\n    DefaultRequestInterceptorREST interceptorInstance \u003d null;\n    try {\n      Class\u003c?\u003e interceptorClass \u003d conf.getClassByName(interceptorClassName);\n      if (DefaultRequestInterceptorREST.class\n          .isAssignableFrom(interceptorClass)) {\n        interceptorInstance \u003d (DefaultRequestInterceptorREST) ReflectionUtils\n            .newInstance(interceptorClass, conf);\n\n      } else {\n        throw new YarnRuntimeException(\n            \"Class: \" + interceptorClassName + \" not instance of \"\n                + DefaultRequestInterceptorREST.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\n          \"Could not instantiate ApplicationMasterRequestInterceptor: \"\n              + interceptorClassName,\n          e);\n    }\n\n    interceptorInstance.setWebAppAddress(\"http://\" + webAppAddress);\n    interceptorInstance.setSubClusterId(subClusterId);\n    interceptors.put(subClusterId, interceptorInstance);\n    return interceptorInstance;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java",
      "extendedDetails": {}
    },
    "cc59b5fb26ccf58dffcd8850fa12ec65250f127d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6896. Federation: routing REST invocations transparently to multiple RMs (part 1 - basic execution). (Contributed by Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "11/08/17 3:58 PM",
      "commitName": "cc59b5fb26ccf58dffcd8850fa12ec65250f127d",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,33 @@\n+  private DefaultRequestInterceptorREST createInterceptorForSubCluster(\n+      SubClusterId subClusterId, String webAppAddress) {\n+\n+    final Configuration conf \u003d this.getConf();\n+\n+    String interceptorClassName \u003d\n+        conf.get(YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS,\n+            YarnConfiguration.DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS);\n+    DefaultRequestInterceptorREST interceptorInstance \u003d null;\n+    try {\n+      Class\u003c?\u003e interceptorClass \u003d conf.getClassByName(interceptorClassName);\n+      if (DefaultRequestInterceptorREST.class\n+          .isAssignableFrom(interceptorClass)) {\n+        interceptorInstance \u003d (DefaultRequestInterceptorREST) ReflectionUtils\n+            .newInstance(interceptorClass, conf);\n+\n+      } else {\n+        throw new YarnRuntimeException(\n+            \"Class: \" + interceptorClassName + \" not instance of \"\n+                + DefaultRequestInterceptorREST.class.getCanonicalName());\n+      }\n+    } catch (ClassNotFoundException e) {\n+      throw new YarnRuntimeException(\n+          \"Could not instantiate ApplicationMasterRequestInterceptor: \"\n+              + interceptorClassName,\n+          e);\n+    }\n+\n+    interceptorInstance.setWebAppAddress(webAppAddress);\n+    interceptorInstance.setSubClusterId(subClusterId);\n+    interceptors.put(subClusterId, interceptorInstance);\n+    return interceptorInstance;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private DefaultRequestInterceptorREST createInterceptorForSubCluster(\n      SubClusterId subClusterId, String webAppAddress) {\n\n    final Configuration conf \u003d this.getConf();\n\n    String interceptorClassName \u003d\n        conf.get(YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS,\n            YarnConfiguration.DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS);\n    DefaultRequestInterceptorREST interceptorInstance \u003d null;\n    try {\n      Class\u003c?\u003e interceptorClass \u003d conf.getClassByName(interceptorClassName);\n      if (DefaultRequestInterceptorREST.class\n          .isAssignableFrom(interceptorClass)) {\n        interceptorInstance \u003d (DefaultRequestInterceptorREST) ReflectionUtils\n            .newInstance(interceptorClass, conf);\n\n      } else {\n        throw new YarnRuntimeException(\n            \"Class: \" + interceptorClassName + \" not instance of \"\n                + DefaultRequestInterceptorREST.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\n          \"Could not instantiate ApplicationMasterRequestInterceptor: \"\n              + interceptorClassName,\n          e);\n    }\n\n    interceptorInstance.setWebAppAddress(webAppAddress);\n    interceptorInstance.setSubClusterId(subClusterId);\n    interceptors.put(subClusterId, interceptorInstance);\n    return interceptorInstance;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java"
    }
  }
}