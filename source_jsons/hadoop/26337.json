{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRAppMaster.java",
  "functionName": "handle",
  "functionId": "handle___event-JobFinishEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
  "functionStartLine": 740,
  "functionEndLine": 750,
  "numCommitsSeen": 126,
  "timeTaken": 8816,
  "changeHistory": [
    "614a743fea5ab5181b2b7989bba84146e81039de",
    "25e96e455b3473387df865fbc1c3ad7ebf9ff1e4",
    "cfafd8c29dc3679e503c6155bcbf26f377b0ea8f",
    "793746870b704a30fa0595d09da3d176ada75c35",
    "b2172c394e7ef40c4820abe6b830b64c7ceeec4e",
    "f73bd5402e49ae6ed712eea70bb3a76314f0a695",
    "cfbde6ac0f7e684314a8bfcb26affba6edc257db",
    "6288dfa873364d1bb735bdb811002f0080e9a1be",
    "51a667bef8300d6499c9867b50eee352311a4185",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "614a743fea5ab5181b2b7989bba84146e81039de": "Ybodychange",
    "25e96e455b3473387df865fbc1c3ad7ebf9ff1e4": "Ybodychange",
    "cfafd8c29dc3679e503c6155bcbf26f377b0ea8f": "Ybodychange",
    "793746870b704a30fa0595d09da3d176ada75c35": "Ybodychange",
    "b2172c394e7ef40c4820abe6b830b64c7ceeec4e": "Ybodychange",
    "f73bd5402e49ae6ed712eea70bb3a76314f0a695": "Ybodychange",
    "cfbde6ac0f7e684314a8bfcb26affba6edc257db": "Ybodychange",
    "6288dfa873364d1bb735bdb811002f0080e9a1be": "Ybodychange",
    "51a667bef8300d6499c9867b50eee352311a4185": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "614a743fea5ab5181b2b7989bba84146e81039de": {
      "type": "Ybodychange",
      "commitMessage": "YARN-139. Interrupted Exception within AsyncDispatcher leads to user confusion. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 8:20 AM",
      "commitName": "614a743fea5ab5181b2b7989bba84146e81039de",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "08/10/12 1:50 PM",
      "commitNameOld": "49b20c2ed1be55c90a057acea71b55a28a3f69fb",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 15.77,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,11 @@\n     public void handle(JobFinishEvent event) {\n-      // job has finished\n-      // this is the only job, so shut down the Appmaster\n-      // note in a workflow scenario, this may lead to creation of a new\n-      // job (FIXME?)\n-      // Send job-end notification\n-      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n-        try {\n-          LOG.info(\"Job end notification started for jobID : \"\n-              + job.getReport().getJobId());\n-          JobEndNotifier notifier \u003d new JobEndNotifier();\n-          notifier.setConf(getConfig());\n-          notifier.notify(job.getReport());\n-        } catch (InterruptedException ie) {\n-          LOG.warn(\"Job end notification interrupted for jobID : \"\n-              + job.getReport().getJobId(), ie);\n+      // Create a new thread to shutdown the AM. We should not do it in-line\n+      // to avoid blocking the dispatcher itself.\n+      new Thread() {\n+        \n+        @Override\n+        public void run() {\n+          shutDownJob();\n         }\n-      }\n-\n-      // TODO:currently just wait for some time so clients can know the\n-      // final states. Will be removed once RM come on.\n-      try {\n-        Thread.sleep(5000);\n-      } catch (InterruptedException e) {\n-        e.printStackTrace();\n-      }\n-\n-      try {\n-        //We are finishing cleanly so this is the last retry\n-        isLastAMRetry \u003d true;\n-        // Stop all services\n-        // This will also send the final report to the ResourceManager\n-        LOG.info(\"Calling stop for all the services\");\n-        stop();\n-\n-      } catch (Throwable t) {\n-        LOG.warn(\"Graceful stop failed \", t);\n-      }\n-\n-      //Bring the process down by force.\n-      //Not needed after HADOOP-7140\n-      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n-      sysexit();\n+      }.start();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // Create a new thread to shutdown the AM. We should not do it in-line\n      // to avoid blocking the dispatcher itself.\n      new Thread() {\n        \n        @Override\n        public void run() {\n          shutDownJob();\n        }\n      }.start();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "25e96e455b3473387df865fbc1c3ad7ebf9ff1e4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4611. MR AM dies badly when Node is decommissioned (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1379599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/12 1:43 PM",
      "commitName": "25e96e455b3473387df865fbc1c3ad7ebf9ff1e4",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "30/08/12 12:58 PM",
      "commitNameOld": "6f6e170325d39f9f7b543a39791b2cb54692f83d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n       // Send job-end notification\n       if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n         try {\n           LOG.info(\"Job end notification started for jobID : \"\n               + job.getReport().getJobId());\n           JobEndNotifier notifier \u003d new JobEndNotifier();\n           notifier.setConf(getConfig());\n           notifier.notify(job.getReport());\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Job end notification interrupted for jobID : \"\n               + job.getReport().getJobId(), ie);\n         }\n       }\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n \n       try {\n+        //We are finishing cleanly so this is the last retry\n+        isLastAMRetry \u003d true;\n         // Stop all services\n         // This will also send the final report to the ResourceManager\n         LOG.info(\"Calling stop for all the services\");\n         stop();\n \n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n \n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n      // Send job-end notification\n      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n        try {\n          LOG.info(\"Job end notification started for jobID : \"\n              + job.getReport().getJobId());\n          JobEndNotifier notifier \u003d new JobEndNotifier();\n          notifier.setConf(getConfig());\n          notifier.notify(job.getReport());\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Job end notification interrupted for jobID : \"\n              + job.getReport().getJobId(), ie);\n        }\n      }\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n\n      try {\n        //We are finishing cleanly so this is the last retry\n        isLastAMRetry \u003d true;\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "cfafd8c29dc3679e503c6155bcbf26f377b0ea8f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4099 amendment. ApplicationMaster will remove staging directory after the history service is stopped. (Contributed by Jason Lowe)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1324866 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/12 10:09 AM",
      "commitName": "cfafd8c29dc3679e503c6155bcbf26f377b0ea8f",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "10/04/12 11:57 AM",
      "commitNameOld": "793746870b704a30fa0595d09da3d176ada75c35",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,42 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n       // Send job-end notification\n       if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n         try {\n           LOG.info(\"Job end notification started for jobID : \"\n               + job.getReport().getJobId());\n           JobEndNotifier notifier \u003d new JobEndNotifier();\n           notifier.setConf(getConfig());\n           notifier.notify(job.getReport());\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Job end notification interrupted for jobID : \"\n               + job.getReport().getJobId(), ie);\n         }\n       }\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n \n-      // Cleanup staging directory\n-      try {\n-        cleanupStagingDir();\n-      } catch(IOException io) {\n-        LOG.warn(\"Failed to delete staging dir\", io);\n-      }\n-\n       try {\n         // Stop all services\n         // This will also send the final report to the ResourceManager\n         LOG.info(\"Calling stop for all the services\");\n         stop();\n \n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n \n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n      // Send job-end notification\n      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n        try {\n          LOG.info(\"Job end notification started for jobID : \"\n              + job.getReport().getJobId());\n          JobEndNotifier notifier \u003d new JobEndNotifier();\n          notifier.setConf(getConfig());\n          notifier.notify(job.getReport());\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Job end notification interrupted for jobID : \"\n              + job.getReport().getJobId(), ie);\n        }\n      }\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n\n      try {\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "793746870b704a30fa0595d09da3d176ada75c35": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4099. ApplicationMaster may fail to remove staging directory (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311926 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 11:57 AM",
      "commitName": "793746870b704a30fa0595d09da3d176ada75c35",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "04/04/12 8:08 AM",
      "commitNameOld": "4e44259cbda1d5c5e923f979c6f6f8bdb3056198",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n       // Send job-end notification\n       if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n         try {\n           LOG.info(\"Job end notification started for jobID : \"\n               + job.getReport().getJobId());\n           JobEndNotifier notifier \u003d new JobEndNotifier();\n           notifier.setConf(getConfig());\n           notifier.notify(job.getReport());\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Job end notification interrupted for jobID : \"\n               + job.getReport().getJobId(), ie);\n         }\n       }\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n+\n+      // Cleanup staging directory\n+      try {\n+        cleanupStagingDir();\n+      } catch(IOException io) {\n+        LOG.warn(\"Failed to delete staging dir\", io);\n+      }\n+\n       try {\n         // Stop all services\n         // This will also send the final report to the ResourceManager\n         LOG.info(\"Calling stop for all the services\");\n         stop();\n \n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n \n-      // Cleanup staging directory\n-      try {\n-        cleanupStagingDir();\n-      } catch(IOException io) {\n-        LOG.warn(\"Failed to delete staging dir\");\n-      }\n-\n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n      // Send job-end notification\n      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n        try {\n          LOG.info(\"Job end notification started for jobID : \"\n              + job.getReport().getJobId());\n          JobEndNotifier notifier \u003d new JobEndNotifier();\n          notifier.setConf(getConfig());\n          notifier.notify(job.getReport());\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Job end notification interrupted for jobID : \"\n              + job.getReport().getJobId(), ie);\n        }\n      }\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n\n      // Cleanup staging directory\n      try {\n        cleanupStagingDir();\n      } catch(IOException io) {\n        LOG.warn(\"Failed to delete staging dir\", io);\n      }\n\n      try {\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "b2172c394e7ef40c4820abe6b830b64c7ceeec4e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3798. Fixed failing TestJobCleanup.testCusomCleanup() and moved it to the maven build. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291606 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/12 9:30 PM",
      "commitName": "b2172c394e7ef40c4820abe6b830b64c7ceeec4e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/02/12 9:08 PM",
      "commitNameOld": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n+      // Send job-end notification\n       if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n         try {\n           LOG.info(\"Job end notification started for jobID : \"\n               + job.getReport().getJobId());\n           JobEndNotifier notifier \u003d new JobEndNotifier();\n           notifier.setConf(getConfig());\n           notifier.notify(job.getReport());\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Job end notification interrupted for jobID : \"\n               + job.getReport().getJobId(), ie);\n         }\n       }\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       try {\n         // Stop all services\n         // This will also send the final report to the ResourceManager\n         LOG.info(\"Calling stop for all the services\");\n         stop();\n \n-        // Send job-end notification\n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n \n       // Cleanup staging directory\n       try {\n         cleanupStagingDir();\n       } catch(IOException io) {\n         LOG.warn(\"Failed to delete staging dir\");\n       }\n \n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n      // Send job-end notification\n      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n        try {\n          LOG.info(\"Job end notification started for jobID : \"\n              + job.getReport().getJobId());\n          JobEndNotifier notifier \u003d new JobEndNotifier();\n          notifier.setConf(getConfig());\n          notifier.notify(job.getReport());\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Job end notification interrupted for jobID : \"\n              + job.getReport().getJobId(), ie);\n        }\n      }\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      try {\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n\n      // Cleanup staging directory\n      try {\n        cleanupStagingDir();\n      } catch(IOException io) {\n        LOG.warn(\"Failed to delete staging dir\");\n      }\n\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "f73bd5402e49ae6ed712eea70bb3a76314f0a695": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3564. Fixed failures in TestStagingCleanup and TestJobEndNotifier tests. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1215022 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/12/11 6:09 PM",
      "commitName": "f73bd5402e49ae6ed712eea70bb3a76314f0a695",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/12/11 3:58 PM",
      "commitNameOld": "cfbde6ac0f7e684314a8bfcb26affba6edc257db",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n-      try {\n-        LOG.info(\"Job end notification started for jobID : \"\n-          + job.getReport().getJobId());\n-        JobEndNotifier notifier \u003d new JobEndNotifier();\n-        notifier.setConf(getConfig());\n-        notifier.notify(job.getReport());\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"Job end notification interrupted for jobID : \"\n-          + job.getReport().getJobId(), ie );\n+      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n+        try {\n+          LOG.info(\"Job end notification started for jobID : \"\n+              + job.getReport().getJobId());\n+          JobEndNotifier notifier \u003d new JobEndNotifier();\n+          notifier.setConf(getConfig());\n+          notifier.notify(job.getReport());\n+        } catch (InterruptedException ie) {\n+          LOG.warn(\"Job end notification interrupted for jobID : \"\n+              + job.getReport().getJobId(), ie);\n+        }\n       }\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       try {\n         // Stop all services\n         // This will also send the final report to the ResourceManager\n         LOG.info(\"Calling stop for all the services\");\n         stop();\n \n         // Send job-end notification\n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n \n       // Cleanup staging directory\n       try {\n         cleanupStagingDir();\n       } catch(IOException io) {\n         LOG.warn(\"Failed to delete staging dir\");\n       }\n \n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n      if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n        try {\n          LOG.info(\"Job end notification started for jobID : \"\n              + job.getReport().getJobId());\n          JobEndNotifier notifier \u003d new JobEndNotifier();\n          notifier.setConf(getConfig());\n          notifier.notify(job.getReport());\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Job end notification interrupted for jobID : \"\n              + job.getReport().getJobId(), ie);\n        }\n      }\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      try {\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n\n        // Send job-end notification\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n\n      // Cleanup staging directory\n      try {\n        cleanupStagingDir();\n      } catch(IOException io) {\n        LOG.warn(\"Failed to delete staging dir\");\n      }\n\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "cfbde6ac0f7e684314a8bfcb26affba6edc257db": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3484. Fixed JobEndNotifier to not get interrupted before completing all its retries. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/11 3:58 PM",
      "commitName": "cfbde6ac0f7e684314a8bfcb26affba6edc257db",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/12/11 3:35 PM",
      "commitNameOld": "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n+      try {\n+        LOG.info(\"Job end notification started for jobID : \"\n+          + job.getReport().getJobId());\n+        JobEndNotifier notifier \u003d new JobEndNotifier();\n+        notifier.setConf(getConfig());\n+        notifier.notify(job.getReport());\n+      } catch (InterruptedException ie) {\n+        LOG.warn(\"Job end notification interrupted for jobID : \"\n+          + job.getReport().getJobId(), ie );\n+      }\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       try {\n         // Stop all services\n         // This will also send the final report to the ResourceManager\n         LOG.info(\"Calling stop for all the services\");\n         stop();\n \n         // Send job-end notification\n-        try {\n-          LOG.info(\"Job end notification started for jobID : \"\n-            + job.getReport().getJobId());\n-          JobEndNotifier notifier \u003d new JobEndNotifier();\n-          notifier.setConf(getConfig());\n-          notifier.notify(job.getReport());\n-        } catch (InterruptedException ie) {\n-          LOG.warn(\"Job end notification interrupted for jobID : \"\n-            + job.getReport().getJobId(), ie );\n-        }\n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n \n       // Cleanup staging directory\n       try {\n         cleanupStagingDir();\n       } catch(IOException io) {\n         LOG.warn(\"Failed to delete staging dir\");\n       }\n \n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n      try {\n        LOG.info(\"Job end notification started for jobID : \"\n          + job.getReport().getJobId());\n        JobEndNotifier notifier \u003d new JobEndNotifier();\n        notifier.setConf(getConfig());\n        notifier.notify(job.getReport());\n      } catch (InterruptedException ie) {\n        LOG.warn(\"Job end notification interrupted for jobID : \"\n          + job.getReport().getJobId(), ie );\n      }\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      try {\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n\n        // Send job-end notification\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n\n      // Cleanup staging directory\n      try {\n        cleanupStagingDir();\n      } catch(IOException io) {\n        LOG.warn(\"Failed to delete staging dir\");\n      }\n\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "6288dfa873364d1bb735bdb811002f0080e9a1be": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3028. Added job-end notification support. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188377 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 2:02 PM",
      "commitName": "6288dfa873364d1bb735bdb811002f0080e9a1be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/10/11 1:41 AM",
      "commitNameOld": "408656614495674992349fbda3981559ada3de0b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,46 @@\n     public void handle(JobFinishEvent event) {\n       // job has finished\n       // this is the only job, so shut down the Appmaster\n       // note in a workflow scenario, this may lead to creation of a new\n       // job (FIXME?)\n \n       // TODO:currently just wait for some time so clients can know the\n       // final states. Will be removed once RM come on.\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n-      LOG.info(\"Calling stop for all the services\");\n       try {\n+        // Stop all services\n+        // This will also send the final report to the ResourceManager\n+        LOG.info(\"Calling stop for all the services\");\n         stop();\n+        \n+        // Send job-end notification\n+        try {\n+          LOG.info(\"Job end notification started for jobID : \"\n+            + job.getReport().getJobId());\n+          JobEndNotifier notifier \u003d new JobEndNotifier();\n+          notifier.setConf(getConfig());\n+          notifier.notify(job.getReport());\n+        } catch (InterruptedException ie) {\n+          LOG.warn(\"Job end notification interrupted for jobID : \"\n+            + job.getReport().getJobId(), ie );\n+        }\n       } catch (Throwable t) {\n         LOG.warn(\"Graceful stop failed \", t);\n       }\n+      \n+      // Cleanup staging directory\n       try {\n         cleanupStagingDir();\n       } catch(IOException io) {\n         LOG.warn(\"Failed to delete staging dir\");\n       }\n-      //TODO: this is required because rpc server does not shut down\n-      // in spite of calling server.stop().\n+      \n       //Bring the process down by force.\n       //Not needed after HADOOP-7140\n       LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n       sysexit();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      try {\n        // Stop all services\n        // This will also send the final report to the ResourceManager\n        LOG.info(\"Calling stop for all the services\");\n        stop();\n        \n        // Send job-end notification\n        try {\n          LOG.info(\"Job end notification started for jobID : \"\n            + job.getReport().getJobId());\n          JobEndNotifier notifier \u003d new JobEndNotifier();\n          notifier.setConf(getConfig());\n          notifier.notify(job.getReport());\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Job end notification interrupted for jobID : \"\n            + job.getReport().getJobId(), ie );\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n      \n      // Cleanup staging directory\n      try {\n        cleanupStagingDir();\n      } catch(IOException io) {\n        LOG.warn(\"Failed to delete staging dir\");\n      }\n      \n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "51a667bef8300d6499c9867b50eee352311a4185": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2762. Cleanup MR staging directory on completion. Contributed by Mahadev Konar.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185880 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 2:37 PM",
      "commitName": "51a667bef8300d6499c9867b50eee352311a4185",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/10/11 4:35 AM",
      "commitNameOld": "fa2529c9317b2f27dec16411b99f296904ea095d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.42,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n-          public void handle(JobFinishEvent event) {\n-            // job has finished\n-            // this is the only job, so shut down the Appmaster\n-            // note in a workflow scenario, this may lead to creation of a new\n-            // job (FIXME?)\n+    public void handle(JobFinishEvent event) {\n+      // job has finished\n+      // this is the only job, so shut down the Appmaster\n+      // note in a workflow scenario, this may lead to creation of a new\n+      // job (FIXME?)\n \n-            // TODO:currently just wait for some time so clients can know the\n-            // final states. Will be removed once RM come on.\n-            try {\n-              Thread.sleep(5000);\n-            } catch (InterruptedException e) {\n-              e.printStackTrace();\n-            }\n-            LOG.info(\"Calling stop for all the services\");\n-            try {\n-              stop();\n-            } catch (Throwable t) {\n-              LOG.warn(\"Graceful stop failed \", t);\n-            }\n-            //TODO: this is required because rpc server does not shut down\n-            // in spite of calling server.stop().\n-            //Bring the process down by force.\n-            //Not needed after HADOOP-7140\n-            LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n-            System.exit(0);\n-          }\n\\ No newline at end of file\n+      // TODO:currently just wait for some time so clients can know the\n+      // final states. Will be removed once RM come on.\n+      try {\n+        Thread.sleep(5000);\n+      } catch (InterruptedException e) {\n+        e.printStackTrace();\n+      }\n+      LOG.info(\"Calling stop for all the services\");\n+      try {\n+        stop();\n+      } catch (Throwable t) {\n+        LOG.warn(\"Graceful stop failed \", t);\n+      }\n+      try {\n+        cleanupStagingDir();\n+      } catch(IOException io) {\n+        LOG.warn(\"Failed to delete staging dir\");\n+      }\n+      //TODO: this is required because rpc server does not shut down\n+      // in spite of calling server.stop().\n+      //Bring the process down by force.\n+      //Not needed after HADOOP-7140\n+      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n+      sysexit();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(JobFinishEvent event) {\n      // job has finished\n      // this is the only job, so shut down the Appmaster\n      // note in a workflow scenario, this may lead to creation of a new\n      // job (FIXME?)\n\n      // TODO:currently just wait for some time so clients can know the\n      // final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      LOG.info(\"Calling stop for all the services\");\n      try {\n        stop();\n      } catch (Throwable t) {\n        LOG.warn(\"Graceful stop failed \", t);\n      }\n      try {\n        cleanupStagingDir();\n      } catch(IOException io) {\n        LOG.warn(\"Failed to delete staging dir\");\n      }\n      //TODO: this is required because rpc server does not shut down\n      // in spite of calling server.stop().\n      //Bring the process down by force.\n      //Not needed after HADOOP-7140\n      LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n      sysexit();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public void handle(JobFinishEvent event) {\n            // job has finished\n            // this is the only job, so shut down the Appmaster\n            // note in a workflow scenario, this may lead to creation of a new\n            // job (FIXME?)\n\n            // TODO:currently just wait for some time so clients can know the\n            // final states. Will be removed once RM come on.\n            try {\n              Thread.sleep(5000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            LOG.info(\"Calling stop for all the services\");\n            try {\n              stop();\n            } catch (Throwable t) {\n              LOG.warn(\"Graceful stop failed \", t);\n            }\n            //TODO: this is required because rpc server does not shut down\n            // in spite of calling server.stop().\n            //Bring the process down by force.\n            //Not needed after HADOOP-7140\n            LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n            System.exit(0);\n          }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,26 @@\n+          public void handle(JobFinishEvent event) {\n+            // job has finished\n+            // this is the only job, so shut down the Appmaster\n+            // note in a workflow scenario, this may lead to creation of a new\n+            // job (FIXME?)\n+\n+            // TODO:currently just wait for some time so clients can know the\n+            // final states. Will be removed once RM come on.\n+            try {\n+              Thread.sleep(5000);\n+            } catch (InterruptedException e) {\n+              e.printStackTrace();\n+            }\n+            LOG.info(\"Calling stop for all the services\");\n+            try {\n+              stop();\n+            } catch (Throwable t) {\n+              LOG.warn(\"Graceful stop failed \", t);\n+            }\n+            //TODO: this is required because rpc server does not shut down\n+            // in spite of calling server.stop().\n+            //Bring the process down by force.\n+            //Not needed after HADOOP-7140\n+            LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n+            System.exit(0);\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public void handle(JobFinishEvent event) {\n            // job has finished\n            // this is the only job, so shut down the Appmaster\n            // note in a workflow scenario, this may lead to creation of a new\n            // job (FIXME?)\n\n            // TODO:currently just wait for some time so clients can know the\n            // final states. Will be removed once RM come on.\n            try {\n              Thread.sleep(5000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            LOG.info(\"Calling stop for all the services\");\n            try {\n              stop();\n            } catch (Throwable t) {\n              LOG.warn(\"Graceful stop failed \", t);\n            }\n            //TODO: this is required because rpc server does not shut down\n            // in spite of calling server.stop().\n            //Bring the process down by force.\n            //Not needed after HADOOP-7140\n            LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n            System.exit(0);\n          }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java"
    }
  }
}