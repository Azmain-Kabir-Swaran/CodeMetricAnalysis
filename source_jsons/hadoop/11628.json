{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPoolSlice.java",
  "functionName": "moveLazyPersistReplicasToFinalized",
  "functionId": "moveLazyPersistReplicasToFinalized___source-File",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
  "functionStartLine": 524,
  "functionEndLine": 578,
  "numCommitsSeen": 58,
  "timeTaken": 3230,
  "changeHistory": [
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
    "df983b524ab68ea0c70cee9033bfff2d28052cbf",
    "dcedb72af468128458e597f08d22f5c34b744ae5",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
    "feda4733a8279485fc0ff1271f9c22bc44f333f6"
  ],
  "changeHistoryShort": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": "Ybodychange",
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": "Ybodychange",
    "dcedb72af468128458e597f08d22f5c34b744ae5": "Ybodychange",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": "Ybodychange",
    "feda4733a8279485fc0ff1271f9c22bc44f333f6": "Ybodychange"
  },
  "changeHistoryDetails": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
      "commitDate": "14/12/16 11:18 AM",
      "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "06/12/16 11:05 AM",
      "commitNameOld": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 8.01,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   private int moveLazyPersistReplicasToFinalized(File source)\n       throws IOException {\n-    File files[] \u003d FileUtil.listFiles(source);\n+    File[] files \u003d fileIoProvider.listFiles(volume, source);\n     int numRecovered \u003d 0;\n     for (File file : files) {\n       if (file.isDirectory()) {\n         numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n       }\n \n       if (Block.isMetaFilename(file.getName())) {\n         File metaFile \u003d file;\n         File blockFile \u003d Block.metaToBlockFile(metaFile);\n         long blockId \u003d Block.filename2id(blockFile.getName());\n         File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n \n         if (blockFile.exists()) {\n \n-          if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n+          try {\n+            fileIoProvider.mkdirsWithExistsCheck(volume, targetDir);\n+          } catch(IOException ioe) {\n             LOG.warn(\"Failed to mkdirs \" + targetDir);\n             continue;\n           }\n \n           final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n           try {\n-            LocalReplica.rename(metaFile, targetMetaFile);\n+            fileIoProvider.rename(volume, metaFile, targetMetaFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move meta file from \"\n                 + metaFile + \" to \" + targetMetaFile, e);\n             continue;\n-\n           }\n \n           final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n           try {\n-            LocalReplica.rename(blockFile, targetBlockFile);\n+            fileIoProvider.rename(volume, blockFile, targetBlockFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move block file from \"\n                 + blockFile + \" to \" + targetBlockFile, e);\n             continue;\n           }\n \n           if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n             ++numRecovered;\n           } else {\n             // Failure should be rare.\n             LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n           }\n         }\n       }\n     }\n \n-    FileUtil.fullyDelete(source);\n+    fileIoProvider.fullyDelete(volume, source);\n     return numRecovered;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File[] files \u003d fileIoProvider.listFiles(volume, source);\n    int numRecovered \u003d 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile \u003d file;\n        File blockFile \u003d Block.metaToBlockFile(metaFile);\n        long blockId \u003d Block.filename2id(blockFile.getName());\n        File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          try {\n            fileIoProvider.mkdirsWithExistsCheck(volume, targetDir);\n          } catch(IOException ioe) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n          try {\n            fileIoProvider.rename(volume, metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n          }\n\n          final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n          try {\n            fileIoProvider.rename(volume, blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    fileIoProvider.fullyDelete(volume, source);\n    return numRecovered;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
      "extendedDetails": {}
    },
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "06/12/16 11:05 AM",
      "commitName": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "05/12/16 12:44 PM",
      "commitNameOld": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private int moveLazyPersistReplicasToFinalized(File source)\n       throws IOException {\n     File files[] \u003d FileUtil.listFiles(source);\n     int numRecovered \u003d 0;\n     for (File file : files) {\n       if (file.isDirectory()) {\n         numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n       }\n \n       if (Block.isMetaFilename(file.getName())) {\n         File metaFile \u003d file;\n         File blockFile \u003d Block.metaToBlockFile(metaFile);\n         long blockId \u003d Block.filename2id(blockFile.getName());\n         File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n \n         if (blockFile.exists()) {\n \n           if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n             LOG.warn(\"Failed to mkdirs \" + targetDir);\n             continue;\n           }\n \n           final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n           try {\n-            NativeIO.renameTo(metaFile, targetMetaFile);\n+            LocalReplica.rename(metaFile, targetMetaFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move meta file from \"\n                 + metaFile + \" to \" + targetMetaFile, e);\n             continue;\n \n           }\n \n           final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n           try {\n-            NativeIO.renameTo(blockFile, targetBlockFile);\n+            LocalReplica.rename(blockFile, targetBlockFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move block file from \"\n                 + blockFile + \" to \" + targetBlockFile, e);\n             continue;\n           }\n \n           if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n             ++numRecovered;\n           } else {\n             // Failure should be rare.\n             LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n           }\n         }\n       }\n     }\n \n     FileUtil.fullyDelete(source);\n     return numRecovered;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File files[] \u003d FileUtil.listFiles(source);\n    int numRecovered \u003d 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile \u003d file;\n        File blockFile \u003d Block.metaToBlockFile(metaFile);\n        long blockId \u003d Block.filename2id(blockFile.getName());\n        File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n          try {\n            LocalReplica.rename(metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n\n          }\n\n          final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n          try {\n            LocalReplica.rename(blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    FileUtil.fullyDelete(source);\n    return numRecovered;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
      "extendedDetails": {}
    },
    "dcedb72af468128458e597f08d22f5c34b744ae5": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.\n",
      "commitDate": "05/12/16 12:44 PM",
      "commitName": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "05/12/16 10:54 AM",
      "commitNameOld": "1b5cceaffbdde50a87ede81552dc380832db8e79",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private int moveLazyPersistReplicasToFinalized(File source)\n       throws IOException {\n     File files[] \u003d FileUtil.listFiles(source);\n     int numRecovered \u003d 0;\n     for (File file : files) {\n       if (file.isDirectory()) {\n         numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n       }\n \n       if (Block.isMetaFilename(file.getName())) {\n         File metaFile \u003d file;\n         File blockFile \u003d Block.metaToBlockFile(metaFile);\n         long blockId \u003d Block.filename2id(blockFile.getName());\n         File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n \n         if (blockFile.exists()) {\n \n           if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n             LOG.warn(\"Failed to mkdirs \" + targetDir);\n             continue;\n           }\n \n           final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n           try {\n-            LocalReplica.rename(metaFile, targetMetaFile);\n+            NativeIO.renameTo(metaFile, targetMetaFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move meta file from \"\n                 + metaFile + \" to \" + targetMetaFile, e);\n             continue;\n \n           }\n \n           final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n           try {\n-            LocalReplica.rename(blockFile, targetBlockFile);\n+            NativeIO.renameTo(blockFile, targetBlockFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move block file from \"\n                 + blockFile + \" to \" + targetBlockFile, e);\n             continue;\n           }\n \n           if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n             ++numRecovered;\n           } else {\n             // Failure should be rare.\n             LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n           }\n         }\n       }\n     }\n \n     FileUtil.fullyDelete(source);\n     return numRecovered;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File files[] \u003d FileUtil.listFiles(source);\n    int numRecovered \u003d 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile \u003d file;\n        File blockFile \u003d Block.metaToBlockFile(metaFile);\n        long blockId \u003d Block.filename2id(blockFile.getName());\n        File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n          try {\n            NativeIO.renameTo(metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n\n          }\n\n          final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n          try {\n            NativeIO.renameTo(blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    FileUtil.fullyDelete(source);\n    return numRecovered;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
      "extendedDetails": {}
    },
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "29/11/16 8:52 PM",
      "commitName": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "27/09/16 10:02 AM",
      "commitNameOld": "8ae4729107d33c6001cf1fdc8837afb71ea6c0d3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 63.49,
      "commitsBetweenForRepo": 518,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private int moveLazyPersistReplicasToFinalized(File source)\n       throws IOException {\n     File files[] \u003d FileUtil.listFiles(source);\n     int numRecovered \u003d 0;\n     for (File file : files) {\n       if (file.isDirectory()) {\n         numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n       }\n \n       if (Block.isMetaFilename(file.getName())) {\n         File metaFile \u003d file;\n         File blockFile \u003d Block.metaToBlockFile(metaFile);\n         long blockId \u003d Block.filename2id(blockFile.getName());\n         File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n \n         if (blockFile.exists()) {\n \n           if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n             LOG.warn(\"Failed to mkdirs \" + targetDir);\n             continue;\n           }\n \n           final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n           try {\n-            NativeIO.renameTo(metaFile, targetMetaFile);\n+            LocalReplica.rename(metaFile, targetMetaFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move meta file from \"\n                 + metaFile + \" to \" + targetMetaFile, e);\n             continue;\n \n           }\n \n           final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n           try {\n-            NativeIO.renameTo(blockFile, targetBlockFile);\n+            LocalReplica.rename(blockFile, targetBlockFile);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to move block file from \"\n                 + blockFile + \" to \" + targetBlockFile, e);\n             continue;\n           }\n \n           if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n             ++numRecovered;\n           } else {\n             // Failure should be rare.\n             LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n           }\n         }\n       }\n     }\n \n     FileUtil.fullyDelete(source);\n     return numRecovered;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File files[] \u003d FileUtil.listFiles(source);\n    int numRecovered \u003d 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile \u003d file;\n        File blockFile \u003d Block.metaToBlockFile(metaFile);\n        long blockId \u003d Block.filename2id(blockFile.getName());\n        File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n          try {\n            LocalReplica.rename(metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n\n          }\n\n          final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n          try {\n            LocalReplica.rename(blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    FileUtil.fullyDelete(source);\n    return numRecovered;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
      "extendedDetails": {}
    },
    "feda4733a8279485fc0ff1271f9c22bc44f333f6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7143. Fix findbugs warnings in HDFS-6581 branch. (Contributed by Tsz Wo Nicholas Sze)\n",
      "commitDate": "24/09/14 9:06 PM",
      "commitName": "feda4733a8279485fc0ff1271f9c22bc44f333f6",
      "commitAuthor": "arp",
      "commitDateOld": "20/09/14 1:25 PM",
      "commitNameOld": "b2d5ed36bcb80e2581191dcdc3976e825c959142",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 4.32,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,54 @@\n   private int moveLazyPersistReplicasToFinalized(File source)\n       throws IOException {\n     File files[] \u003d FileUtil.listFiles(source);\n     int numRecovered \u003d 0;\n     for (File file : files) {\n       if (file.isDirectory()) {\n         numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n       }\n \n       if (Block.isMetaFilename(file.getName())) {\n         File metaFile \u003d file;\n         File blockFile \u003d Block.metaToBlockFile(metaFile);\n         long blockId \u003d Block.filename2id(blockFile.getName());\n         File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n \n         if (blockFile.exists()) {\n-          File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n-          File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n \n           if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n-            FsDatasetImpl.LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n+            LOG.warn(\"Failed to mkdirs \" + targetDir);\n             continue;\n           }\n \n-          metaFile.renameTo(targetMetaFile);\n-          blockFile.renameTo(targetBlockFile);\n+          final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n+          try {\n+            NativeIO.renameTo(metaFile, targetMetaFile);\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to move meta file from \"\n+                + metaFile + \" to \" + targetMetaFile, e);\n+            continue;\n+\n+          }\n+\n+          final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n+          try {\n+            NativeIO.renameTo(blockFile, targetBlockFile);\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to move block file from \"\n+                + blockFile + \" to \" + targetBlockFile, e);\n+            continue;\n+          }\n \n           if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n             ++numRecovered;\n           } else {\n             // Failure should be rare.\n-            FsDatasetImpl.LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n+            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n           }\n         }\n       }\n     }\n \n     FileUtil.fullyDelete(source);\n     return numRecovered;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File files[] \u003d FileUtil.listFiles(source);\n    int numRecovered \u003d 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered +\u003d moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile \u003d file;\n        File blockFile \u003d Block.metaToBlockFile(metaFile);\n        long blockId \u003d Block.filename2id(blockFile.getName());\n        File targetDir \u003d DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          if (!targetDir.exists() \u0026\u0026 !targetDir.mkdirs()) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile \u003d new File(targetDir, metaFile.getName());\n          try {\n            NativeIO.renameTo(metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n\n          }\n\n          final File targetBlockFile \u003d new File(targetDir, blockFile.getName());\n          try {\n            NativeIO.renameTo(blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() \u0026\u0026 targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    FileUtil.fullyDelete(source);\n    return numRecovered;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
      "extendedDetails": {}
    }
  }
}