{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "performContainerPreStartChecks",
  "functionId": "performContainerPreStartChecks___nmTokenIdentifier-NMTokenIdentifier__request-StartContainerRequest__containerTokenIdentifier-ContainerTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 989,
  "functionEndLine": 1023,
  "numCommitsSeen": 139,
  "timeTaken": 3588,
  "changeHistory": [
    "c8172f5f143d2fefafa5a412899ab7cd081b406d"
  ],
  "changeHistoryShort": {
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,35 @@\n+  private void performContainerPreStartChecks(\n+      NMTokenIdentifier nmTokenIdentifier, StartContainerRequest request,\n+      ContainerTokenIdentifier containerTokenIdentifier)\n+      throws YarnException, InvalidToken {\n+  /*\n+   * 1) It should save the NMToken into NMTokenSecretManager. This is done\n+   * here instead of RPC layer because at the time of opening/authenticating\n+   * the connection it doesn\u0027t know what all RPC calls user will make on it.\n+   * Also new NMToken is issued only at startContainer (once it gets\n+   * renewed).\n+   *\n+   * 2) It should validate containerToken. Need to check below things. a) It\n+   * is signed by correct master key (part of retrieve password). b) It\n+   * belongs to correct Node Manager (part of retrieve password). c) It has\n+   * correct RMIdentifier. d) It is not expired.\n+   */\n+    authorizeStartAndResourceIncreaseRequest(\n+        nmTokenIdentifier, containerTokenIdentifier, true);\n+    // update NMToken\n+    updateNMTokenIdentifier(nmTokenIdentifier);\n+\n+    ContainerLaunchContext launchContext \u003d request.getContainerLaunchContext();\n+\n+    Map\u003cString, ByteBuffer\u003e serviceData \u003d getAuxServiceMetaData();\n+    if (launchContext.getServiceData()!\u003dnull \u0026\u0026\n+        !launchContext.getServiceData().isEmpty()) {\n+      for (Entry\u003cString, ByteBuffer\u003e meta : launchContext.getServiceData()\n+          .entrySet()) {\n+        if (null \u003d\u003d serviceData.get(meta.getKey())) {\n+          throw new InvalidAuxServiceException(\"The auxService:\" + meta.getKey()\n+              + \" does not exist\");\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void performContainerPreStartChecks(\n      NMTokenIdentifier nmTokenIdentifier, StartContainerRequest request,\n      ContainerTokenIdentifier containerTokenIdentifier)\n      throws YarnException, InvalidToken {\n  /*\n   * 1) It should save the NMToken into NMTokenSecretManager. This is done\n   * here instead of RPC layer because at the time of opening/authenticating\n   * the connection it doesn\u0027t know what all RPC calls user will make on it.\n   * Also new NMToken is issued only at startContainer (once it gets\n   * renewed).\n   *\n   * 2) It should validate containerToken. Need to check below things. a) It\n   * is signed by correct master key (part of retrieve password). b) It\n   * belongs to correct Node Manager (part of retrieve password). c) It has\n   * correct RMIdentifier. d) It is not expired.\n   */\n    authorizeStartAndResourceIncreaseRequest(\n        nmTokenIdentifier, containerTokenIdentifier, true);\n    // update NMToken\n    updateNMTokenIdentifier(nmTokenIdentifier);\n\n    ContainerLaunchContext launchContext \u003d request.getContainerLaunchContext();\n\n    Map\u003cString, ByteBuffer\u003e serviceData \u003d getAuxServiceMetaData();\n    if (launchContext.getServiceData()!\u003dnull \u0026\u0026\n        !launchContext.getServiceData().isEmpty()) {\n      for (Entry\u003cString, ByteBuffer\u003e meta : launchContext.getServiceData()\n          .entrySet()) {\n        if (null \u003d\u003d serviceData.get(meta.getKey())) {\n          throw new InvalidAuxServiceException(\"The auxService:\" + meta.getKey()\n              + \" does not exist\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}