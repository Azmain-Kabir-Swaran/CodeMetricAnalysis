{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMProxyService.java",
  "functionName": "recover",
  "functionId": "recover",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
  "functionStartLine": 209,
  "functionEndLine": 285,
  "numCommitsSeen": 17,
  "timeTaken": 3096,
  "changeHistory": [
    "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "00905efab22edd9857e0a3828c201bf70f03cb96",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da"
  ],
  "changeHistoryShort": {
    "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "00905efab22edd9857e0a3828c201bf70f03cb96": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6924. Metrics for Federation AMRMProxy. Contributed by Young Chen\n",
      "commitDate": "06/03/20 8:04 PM",
      "commitName": "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 357.2,
      "commitsBetweenForRepo": 2130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,77 @@\n   public void recover() throws IOException {\n     LOG.info(\"Recovering AMRMProxyService\");\n \n     RecoveredAMRMProxyState state \u003d\n         this.nmContext.getNMStateStore().loadAMRMProxyState();\n \n     this.secretManager.recover(state);\n \n     LOG.info(\"Recovering {} running applications for AMRMProxy\",\n         state.getAppContexts().size());\n     for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n         .getAppContexts().entrySet()) {\n       ApplicationAttemptId attemptId \u003d entry.getKey();\n       LOG.info(\"Recovering app attempt {}\", attemptId);\n \n       // Try recover for the running application attempt\n       try {\n         String user \u003d null;\n         Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n         for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n             .entrySet()) {\n           if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n             user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n           } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n             amrmToken \u003d new Token\u003c\u003e();\n             amrmToken.decodeFromUrlString(\n                 new String(contextEntry.getValue(), \"UTF-8\"));\n             // Clear the service field, as if RM just issued the token\n             amrmToken.setService(new Text());\n           }\n         }\n \n         if (amrmToken \u003d\u003d null) {\n           throw new IOException(\n               \"No amrmToken found for app attempt \" + attemptId);\n         }\n         if (user \u003d\u003d null) {\n           throw new IOException(\"No user found for app attempt \" + attemptId);\n         }\n \n         // Regenerate the local AMRMToken for the AM\n         Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n             this.secretManager.createAndGetAMRMToken(attemptId);\n \n         // Retrieve the AM container credentials from NM context\n         Credentials amCred \u003d null;\n         for (Container container : this.nmContext.getContainers().values()) {\n           LOG.debug(\"From NM Context container {}\", container.getContainerId());\n           if (container.getContainerId().getApplicationAttemptId().equals(\n               attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n             LOG.debug(\"Container type {}\",\n                 container.getContainerTokenIdentifier().getContainerType());\n             if (container.getContainerTokenIdentifier()\n                 .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n               LOG.info(\"AM container {} found in context, has credentials: {}\",\n                   container.getContainerId(),\n                   (container.getCredentials() !\u003d null));\n               amCred \u003d container.getCredentials();\n             }\n           }\n         }\n         if (amCred \u003d\u003d null) {\n           LOG.error(\"No credentials found for AM container of {}. \"\n               + \"Yarn registry access might not work\", attemptId);\n         }\n \n         // Create the intercepter pipeline for the AM\n         initializePipeline(attemptId, user, amrmToken, localToken,\n             entry.getValue(), true, amCred);\n       } catch (Throwable e) {\n         LOG.error(\"Exception when recovering \" + attemptId\n             + \", removing it from NMStateStore and move on\", e);\n+        this.metrics.incrFailedAppRecoveryCount();\n         this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover() throws IOException {\n    LOG.info(\"Recovering AMRMProxyService\");\n\n    RecoveredAMRMProxyState state \u003d\n        this.nmContext.getNMStateStore().loadAMRMProxyState();\n\n    this.secretManager.recover(state);\n\n    LOG.info(\"Recovering {} running applications for AMRMProxy\",\n        state.getAppContexts().size());\n    for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n        .getAppContexts().entrySet()) {\n      ApplicationAttemptId attemptId \u003d entry.getKey();\n      LOG.info(\"Recovering app attempt {}\", attemptId);\n\n      // Try recover for the running application attempt\n      try {\n        String user \u003d null;\n        Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n        for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n            .entrySet()) {\n          if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n            user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n          } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n            amrmToken \u003d new Token\u003c\u003e();\n            amrmToken.decodeFromUrlString(\n                new String(contextEntry.getValue(), \"UTF-8\"));\n            // Clear the service field, as if RM just issued the token\n            amrmToken.setService(new Text());\n          }\n        }\n\n        if (amrmToken \u003d\u003d null) {\n          throw new IOException(\n              \"No amrmToken found for app attempt \" + attemptId);\n        }\n        if (user \u003d\u003d null) {\n          throw new IOException(\"No user found for app attempt \" + attemptId);\n        }\n\n        // Regenerate the local AMRMToken for the AM\n        Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n            this.secretManager.createAndGetAMRMToken(attemptId);\n\n        // Retrieve the AM container credentials from NM context\n        Credentials amCred \u003d null;\n        for (Container container : this.nmContext.getContainers().values()) {\n          LOG.debug(\"From NM Context container {}\", container.getContainerId());\n          if (container.getContainerId().getApplicationAttemptId().equals(\n              attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n            LOG.debug(\"Container type {}\",\n                container.getContainerTokenIdentifier().getContainerType());\n            if (container.getContainerTokenIdentifier()\n                .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n              LOG.info(\"AM container {} found in context, has credentials: {}\",\n                  container.getContainerId(),\n                  (container.getCredentials() !\u003d null));\n              amCred \u003d container.getCredentials();\n            }\n          }\n        }\n        if (amCred \u003d\u003d null) {\n          LOG.error(\"No credentials found for AM container of {}. \"\n              + \"Yarn registry access might not work\", attemptId);\n        }\n\n        // Create the intercepter pipeline for the AM\n        initializePipeline(attemptId, user, amrmToken, localToken,\n            entry.getValue(), true, amCred);\n      } catch (Throwable e) {\n        LOG.error(\"Exception when recovering \" + attemptId\n            + \", removing it from NMStateStore and move on\", e);\n        this.metrics.incrFailedAppRecoveryCount();\n        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/07/18 12:39 AM",
      "commitNameOld": "84612788339392fcda1aef0e27c43f5c6b2a19e5",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 234.65,
      "commitsBetweenForRepo": 1909,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   public void recover() throws IOException {\n     LOG.info(\"Recovering AMRMProxyService\");\n \n     RecoveredAMRMProxyState state \u003d\n         this.nmContext.getNMStateStore().loadAMRMProxyState();\n \n     this.secretManager.recover(state);\n \n     LOG.info(\"Recovering {} running applications for AMRMProxy\",\n         state.getAppContexts().size());\n     for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n         .getAppContexts().entrySet()) {\n       ApplicationAttemptId attemptId \u003d entry.getKey();\n       LOG.info(\"Recovering app attempt {}\", attemptId);\n \n       // Try recover for the running application attempt\n       try {\n         String user \u003d null;\n         Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n         for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n             .entrySet()) {\n           if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n             user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n           } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n             amrmToken \u003d new Token\u003c\u003e();\n             amrmToken.decodeFromUrlString(\n                 new String(contextEntry.getValue(), \"UTF-8\"));\n             // Clear the service field, as if RM just issued the token\n             amrmToken.setService(new Text());\n           }\n         }\n \n         if (amrmToken \u003d\u003d null) {\n           throw new IOException(\n               \"No amrmToken found for app attempt \" + attemptId);\n         }\n         if (user \u003d\u003d null) {\n           throw new IOException(\"No user found for app attempt \" + attemptId);\n         }\n \n         // Regenerate the local AMRMToken for the AM\n         Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n             this.secretManager.createAndGetAMRMToken(attemptId);\n \n         // Retrieve the AM container credentials from NM context\n         Credentials amCred \u003d null;\n         for (Container container : this.nmContext.getContainers().values()) {\n-          LOG.debug(\"From NM Context container \" + container.getContainerId());\n+          LOG.debug(\"From NM Context container {}\", container.getContainerId());\n           if (container.getContainerId().getApplicationAttemptId().equals(\n               attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n-            LOG.debug(\"Container type \"\n-                + container.getContainerTokenIdentifier().getContainerType());\n+            LOG.debug(\"Container type {}\",\n+                container.getContainerTokenIdentifier().getContainerType());\n             if (container.getContainerTokenIdentifier()\n                 .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n               LOG.info(\"AM container {} found in context, has credentials: {}\",\n                   container.getContainerId(),\n                   (container.getCredentials() !\u003d null));\n               amCred \u003d container.getCredentials();\n             }\n           }\n         }\n         if (amCred \u003d\u003d null) {\n           LOG.error(\"No credentials found for AM container of {}. \"\n               + \"Yarn registry access might not work\", attemptId);\n         }\n \n         // Create the intercepter pipeline for the AM\n         initializePipeline(attemptId, user, amrmToken, localToken,\n             entry.getValue(), true, amCred);\n       } catch (Throwable e) {\n         LOG.error(\"Exception when recovering \" + attemptId\n             + \", removing it from NMStateStore and move on\", e);\n         this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover() throws IOException {\n    LOG.info(\"Recovering AMRMProxyService\");\n\n    RecoveredAMRMProxyState state \u003d\n        this.nmContext.getNMStateStore().loadAMRMProxyState();\n\n    this.secretManager.recover(state);\n\n    LOG.info(\"Recovering {} running applications for AMRMProxy\",\n        state.getAppContexts().size());\n    for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n        .getAppContexts().entrySet()) {\n      ApplicationAttemptId attemptId \u003d entry.getKey();\n      LOG.info(\"Recovering app attempt {}\", attemptId);\n\n      // Try recover for the running application attempt\n      try {\n        String user \u003d null;\n        Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n        for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n            .entrySet()) {\n          if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n            user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n          } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n            amrmToken \u003d new Token\u003c\u003e();\n            amrmToken.decodeFromUrlString(\n                new String(contextEntry.getValue(), \"UTF-8\"));\n            // Clear the service field, as if RM just issued the token\n            amrmToken.setService(new Text());\n          }\n        }\n\n        if (amrmToken \u003d\u003d null) {\n          throw new IOException(\n              \"No amrmToken found for app attempt \" + attemptId);\n        }\n        if (user \u003d\u003d null) {\n          throw new IOException(\"No user found for app attempt \" + attemptId);\n        }\n\n        // Regenerate the local AMRMToken for the AM\n        Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n            this.secretManager.createAndGetAMRMToken(attemptId);\n\n        // Retrieve the AM container credentials from NM context\n        Credentials amCred \u003d null;\n        for (Container container : this.nmContext.getContainers().values()) {\n          LOG.debug(\"From NM Context container {}\", container.getContainerId());\n          if (container.getContainerId().getApplicationAttemptId().equals(\n              attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n            LOG.debug(\"Container type {}\",\n                container.getContainerTokenIdentifier().getContainerType());\n            if (container.getContainerTokenIdentifier()\n                .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n              LOG.info(\"AM container {} found in context, has credentials: {}\",\n                  container.getContainerId(),\n                  (container.getCredentials() !\u003d null));\n              amCred \u003d container.getCredentials();\n            }\n          }\n        }\n        if (amCred \u003d\u003d null) {\n          LOG.error(\"No credentials found for AM container of {}. \"\n              + \"Yarn registry access might not work\", attemptId);\n        }\n\n        // Create the intercepter pipeline for the AM\n        initializePipeline(attemptId, user, amrmToken, localToken,\n            entry.getValue(), true, amCred);\n      } catch (Throwable e) {\n        LOG.error(\"Exception when recovering \" + attemptId\n            + \", removing it from NMStateStore and move on\", e);\n        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "00905efab22edd9857e0a3828c201bf70f03cb96": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8110. AMRMProxy recover should catch for all throwable to avoid premature exit. (Botong Huang via Subru).\n",
      "commitDate": "06/04/18 4:31 PM",
      "commitName": "00905efab22edd9857e0a3828c201bf70f03cb96",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "08/12/17 3:39 PM",
      "commitNameOld": "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 118.99,
      "commitsBetweenForRepo": 847,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   public void recover() throws IOException {\n     LOG.info(\"Recovering AMRMProxyService\");\n \n     RecoveredAMRMProxyState state \u003d\n         this.nmContext.getNMStateStore().loadAMRMProxyState();\n \n     this.secretManager.recover(state);\n \n     LOG.info(\"Recovering {} running applications for AMRMProxy\",\n         state.getAppContexts().size());\n     for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n         .getAppContexts().entrySet()) {\n       ApplicationAttemptId attemptId \u003d entry.getKey();\n       LOG.info(\"Recovering app attempt {}\", attemptId);\n \n       // Try recover for the running application attempt\n       try {\n         String user \u003d null;\n         Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n         for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n             .entrySet()) {\n           if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n             user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n           } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n             amrmToken \u003d new Token\u003c\u003e();\n             amrmToken.decodeFromUrlString(\n                 new String(contextEntry.getValue(), \"UTF-8\"));\n             // Clear the service field, as if RM just issued the token\n             amrmToken.setService(new Text());\n           }\n         }\n \n         if (amrmToken \u003d\u003d null) {\n           throw new IOException(\n               \"No amrmToken found for app attempt \" + attemptId);\n         }\n         if (user \u003d\u003d null) {\n           throw new IOException(\"No user found for app attempt \" + attemptId);\n         }\n \n         // Regenerate the local AMRMToken for the AM\n         Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n             this.secretManager.createAndGetAMRMToken(attemptId);\n \n         // Retrieve the AM container credentials from NM context\n         Credentials amCred \u003d null;\n         for (Container container : this.nmContext.getContainers().values()) {\n           LOG.debug(\"From NM Context container \" + container.getContainerId());\n           if (container.getContainerId().getApplicationAttemptId().equals(\n               attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n             LOG.debug(\"Container type \"\n                 + container.getContainerTokenIdentifier().getContainerType());\n             if (container.getContainerTokenIdentifier()\n                 .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n               LOG.info(\"AM container {} found in context, has credentials: {}\",\n                   container.getContainerId(),\n                   (container.getCredentials() !\u003d null));\n               amCred \u003d container.getCredentials();\n             }\n           }\n         }\n         if (amCred \u003d\u003d null) {\n           LOG.error(\"No credentials found for AM container of {}. \"\n               + \"Yarn registry access might not work\", attemptId);\n         }\n \n         // Create the intercepter pipeline for the AM\n         initializePipeline(attemptId, user, amrmToken, localToken,\n             entry.getValue(), true, amCred);\n-      } catch (IOException e) {\n+      } catch (Throwable e) {\n         LOG.error(\"Exception when recovering \" + attemptId\n             + \", removing it from NMStateStore and move on\", e);\n         this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover() throws IOException {\n    LOG.info(\"Recovering AMRMProxyService\");\n\n    RecoveredAMRMProxyState state \u003d\n        this.nmContext.getNMStateStore().loadAMRMProxyState();\n\n    this.secretManager.recover(state);\n\n    LOG.info(\"Recovering {} running applications for AMRMProxy\",\n        state.getAppContexts().size());\n    for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n        .getAppContexts().entrySet()) {\n      ApplicationAttemptId attemptId \u003d entry.getKey();\n      LOG.info(\"Recovering app attempt {}\", attemptId);\n\n      // Try recover for the running application attempt\n      try {\n        String user \u003d null;\n        Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n        for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n            .entrySet()) {\n          if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n            user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n          } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n            amrmToken \u003d new Token\u003c\u003e();\n            amrmToken.decodeFromUrlString(\n                new String(contextEntry.getValue(), \"UTF-8\"));\n            // Clear the service field, as if RM just issued the token\n            amrmToken.setService(new Text());\n          }\n        }\n\n        if (amrmToken \u003d\u003d null) {\n          throw new IOException(\n              \"No amrmToken found for app attempt \" + attemptId);\n        }\n        if (user \u003d\u003d null) {\n          throw new IOException(\"No user found for app attempt \" + attemptId);\n        }\n\n        // Regenerate the local AMRMToken for the AM\n        Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n            this.secretManager.createAndGetAMRMToken(attemptId);\n\n        // Retrieve the AM container credentials from NM context\n        Credentials amCred \u003d null;\n        for (Container container : this.nmContext.getContainers().values()) {\n          LOG.debug(\"From NM Context container \" + container.getContainerId());\n          if (container.getContainerId().getApplicationAttemptId().equals(\n              attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n            LOG.debug(\"Container type \"\n                + container.getContainerTokenIdentifier().getContainerType());\n            if (container.getContainerTokenIdentifier()\n                .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n              LOG.info(\"AM container {} found in context, has credentials: {}\",\n                  container.getContainerId(),\n                  (container.getCredentials() !\u003d null));\n              amCred \u003d container.getCredentials();\n            }\n          }\n        }\n        if (amCred \u003d\u003d null) {\n          LOG.error(\"No credentials found for AM container of {}. \"\n              + \"Yarn registry access might not work\", attemptId);\n        }\n\n        // Create the intercepter pipeline for the AM\n        initializePipeline(attemptId, user, amrmToken, localToken,\n            entry.getValue(), true, amCred);\n      } catch (Throwable e) {\n        LOG.error(\"Exception when recovering \" + attemptId\n            + \", removing it from NMStateStore and move on\", e);\n        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "22/06/17 11:27 AM",
      "commitNameOld": "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 148.3,
      "commitsBetweenForRepo": 1203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,76 @@\n   public void recover() throws IOException {\n     LOG.info(\"Recovering AMRMProxyService\");\n \n     RecoveredAMRMProxyState state \u003d\n         this.nmContext.getNMStateStore().loadAMRMProxyState();\n \n     this.secretManager.recover(state);\n \n     LOG.info(\"Recovering {} running applications for AMRMProxy\",\n         state.getAppContexts().size());\n     for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n         .getAppContexts().entrySet()) {\n       ApplicationAttemptId attemptId \u003d entry.getKey();\n       LOG.info(\"Recovering app attempt {}\", attemptId);\n \n       // Try recover for the running application attempt\n       try {\n         String user \u003d null;\n         Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n         for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n             .entrySet()) {\n           if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n             user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n           } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n             amrmToken \u003d new Token\u003c\u003e();\n             amrmToken.decodeFromUrlString(\n                 new String(contextEntry.getValue(), \"UTF-8\"));\n+            // Clear the service field, as if RM just issued the token\n+            amrmToken.setService(new Text());\n           }\n         }\n \n         if (amrmToken \u003d\u003d null) {\n           throw new IOException(\n               \"No amrmToken found for app attempt \" + attemptId);\n         }\n         if (user \u003d\u003d null) {\n           throw new IOException(\"No user found for app attempt \" + attemptId);\n         }\n \n+        // Regenerate the local AMRMToken for the AM\n         Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n             this.secretManager.createAndGetAMRMToken(attemptId);\n \n+        // Retrieve the AM container credentials from NM context\n+        Credentials amCred \u003d null;\n+        for (Container container : this.nmContext.getContainers().values()) {\n+          LOG.debug(\"From NM Context container \" + container.getContainerId());\n+          if (container.getContainerId().getApplicationAttemptId().equals(\n+              attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n+            LOG.debug(\"Container type \"\n+                + container.getContainerTokenIdentifier().getContainerType());\n+            if (container.getContainerTokenIdentifier()\n+                .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n+              LOG.info(\"AM container {} found in context, has credentials: {}\",\n+                  container.getContainerId(),\n+                  (container.getCredentials() !\u003d null));\n+              amCred \u003d container.getCredentials();\n+            }\n+          }\n+        }\n+        if (amCred \u003d\u003d null) {\n+          LOG.error(\"No credentials found for AM container of {}. \"\n+              + \"Yarn registry access might not work\", attemptId);\n+        }\n+\n+        // Create the intercepter pipeline for the AM\n         initializePipeline(attemptId, user, amrmToken, localToken,\n-            entry.getValue(), true);\n-      } catch (Exception e) {\n+            entry.getValue(), true, amCred);\n+      } catch (IOException e) {\n         LOG.error(\"Exception when recovering \" + attemptId\n             + \", removing it from NMStateStore and move on\", e);\n         this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover() throws IOException {\n    LOG.info(\"Recovering AMRMProxyService\");\n\n    RecoveredAMRMProxyState state \u003d\n        this.nmContext.getNMStateStore().loadAMRMProxyState();\n\n    this.secretManager.recover(state);\n\n    LOG.info(\"Recovering {} running applications for AMRMProxy\",\n        state.getAppContexts().size());\n    for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n        .getAppContexts().entrySet()) {\n      ApplicationAttemptId attemptId \u003d entry.getKey();\n      LOG.info(\"Recovering app attempt {}\", attemptId);\n\n      // Try recover for the running application attempt\n      try {\n        String user \u003d null;\n        Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n        for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n            .entrySet()) {\n          if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n            user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n          } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n            amrmToken \u003d new Token\u003c\u003e();\n            amrmToken.decodeFromUrlString(\n                new String(contextEntry.getValue(), \"UTF-8\"));\n            // Clear the service field, as if RM just issued the token\n            amrmToken.setService(new Text());\n          }\n        }\n\n        if (amrmToken \u003d\u003d null) {\n          throw new IOException(\n              \"No amrmToken found for app attempt \" + attemptId);\n        }\n        if (user \u003d\u003d null) {\n          throw new IOException(\"No user found for app attempt \" + attemptId);\n        }\n\n        // Regenerate the local AMRMToken for the AM\n        Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n            this.secretManager.createAndGetAMRMToken(attemptId);\n\n        // Retrieve the AM container credentials from NM context\n        Credentials amCred \u003d null;\n        for (Container container : this.nmContext.getContainers().values()) {\n          LOG.debug(\"From NM Context container \" + container.getContainerId());\n          if (container.getContainerId().getApplicationAttemptId().equals(\n              attemptId) \u0026\u0026 container.getContainerTokenIdentifier() !\u003d null) {\n            LOG.debug(\"Container type \"\n                + container.getContainerTokenIdentifier().getContainerType());\n            if (container.getContainerTokenIdentifier()\n                .getContainerType() \u003d\u003d ContainerType.APPLICATION_MASTER) {\n              LOG.info(\"AM container {} found in context, has credentials: {}\",\n                  container.getContainerId(),\n                  (container.getCredentials() !\u003d null));\n              amCred \u003d container.getCredentials();\n            }\n          }\n        }\n        if (amCred \u003d\u003d null) {\n          LOG.error(\"No credentials found for AM container of {}. \"\n              + \"Yarn registry access might not work\", attemptId);\n        }\n\n        // Create the intercepter pipeline for the AM\n        initializePipeline(attemptId, user, amrmToken, localToken,\n            entry.getValue(), true, amCred);\n      } catch (IOException e) {\n        LOG.error(\"Exception when recovering \" + attemptId\n            + \", removing it from NMStateStore and move on\", e);\n        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6127. Add support for work preserving NM restart when AMRMProxy is enabled. (Botong Huang via asuresh).\n",
      "commitDate": "22/06/17 11:27 AM",
      "commitName": "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,50 @@\n+  public void recover() throws IOException {\n+    LOG.info(\"Recovering AMRMProxyService\");\n+\n+    RecoveredAMRMProxyState state \u003d\n+        this.nmContext.getNMStateStore().loadAMRMProxyState();\n+\n+    this.secretManager.recover(state);\n+\n+    LOG.info(\"Recovering {} running applications for AMRMProxy\",\n+        state.getAppContexts().size());\n+    for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n+        .getAppContexts().entrySet()) {\n+      ApplicationAttemptId attemptId \u003d entry.getKey();\n+      LOG.info(\"Recovering app attempt {}\", attemptId);\n+\n+      // Try recover for the running application attempt\n+      try {\n+        String user \u003d null;\n+        Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n+        for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n+            .entrySet()) {\n+          if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n+            user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n+          } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n+            amrmToken \u003d new Token\u003c\u003e();\n+            amrmToken.decodeFromUrlString(\n+                new String(contextEntry.getValue(), \"UTF-8\"));\n+          }\n+        }\n+\n+        if (amrmToken \u003d\u003d null) {\n+          throw new IOException(\n+              \"No amrmToken found for app attempt \" + attemptId);\n+        }\n+        if (user \u003d\u003d null) {\n+          throw new IOException(\"No user found for app attempt \" + attemptId);\n+        }\n+\n+        Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n+            this.secretManager.createAndGetAMRMToken(attemptId);\n+\n+        initializePipeline(attemptId, user, amrmToken, localToken,\n+            entry.getValue(), true);\n+      } catch (Exception e) {\n+        LOG.error(\"Exception when recovering \" + attemptId\n+            + \", removing it from NMStateStore and move on\", e);\n+        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover() throws IOException {\n    LOG.info(\"Recovering AMRMProxyService\");\n\n    RecoveredAMRMProxyState state \u003d\n        this.nmContext.getNMStateStore().loadAMRMProxyState();\n\n    this.secretManager.recover(state);\n\n    LOG.info(\"Recovering {} running applications for AMRMProxy\",\n        state.getAppContexts().size());\n    for (Map.Entry\u003cApplicationAttemptId, Map\u003cString, byte[]\u003e\u003e entry : state\n        .getAppContexts().entrySet()) {\n      ApplicationAttemptId attemptId \u003d entry.getKey();\n      LOG.info(\"Recovering app attempt {}\", attemptId);\n\n      // Try recover for the running application attempt\n      try {\n        String user \u003d null;\n        Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d null;\n        for (Map.Entry\u003cString, byte[]\u003e contextEntry : entry.getValue()\n            .entrySet()) {\n          if (contextEntry.getKey().equals(NMSS_USER_KEY)) {\n            user \u003d new String(contextEntry.getValue(), \"UTF-8\");\n          } else if (contextEntry.getKey().equals(NMSS_AMRMTOKEN_KEY)) {\n            amrmToken \u003d new Token\u003c\u003e();\n            amrmToken.decodeFromUrlString(\n                new String(contextEntry.getValue(), \"UTF-8\"));\n          }\n        }\n\n        if (amrmToken \u003d\u003d null) {\n          throw new IOException(\n              \"No amrmToken found for app attempt \" + attemptId);\n        }\n        if (user \u003d\u003d null) {\n          throw new IOException(\"No user found for app attempt \" + attemptId);\n        }\n\n        Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n            this.secretManager.createAndGetAMRMToken(attemptId);\n\n        initializePipeline(attemptId, user, amrmToken, localToken,\n            entry.getValue(), true);\n      } catch (Exception e) {\n        LOG.error(\"Exception when recovering \" + attemptId\n            + \", removing it from NMStateStore and move on\", e);\n        this.nmContext.getNMStateStore().removeAMRMProxyAppContext(attemptId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java"
    }
  }
}