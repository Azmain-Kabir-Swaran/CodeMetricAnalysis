{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSFairScheduler.java",
  "functionName": "updateQueueWithNodeUpdate",
  "functionId": "updateQueueWithNodeUpdate___eventWrapper-NodeUpdateSchedulerEventWrapper",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
  "functionStartLine": 189,
  "functionEndLine": 231,
  "numCommitsSeen": 38,
  "timeTaken": 2247,
  "changeHistory": [
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void updateQueueWithNodeUpdate(\n-          NodeUpdateSchedulerEventWrapper eventWrapper) {\n+      NodeUpdateSchedulerEventWrapper eventWrapper) {\n     RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n     List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n     for (UpdatedContainerInfo info : containerList) {\n       for (ContainerStatus status : info.getCompletedContainers()) {\n         ContainerId containerId \u003d status.getContainerId();\n-        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n-                containerId.getApplicationAttemptId());\n+        SchedulerAppReport app \u003d super.getSchedulerAppInfo(\n+            containerId.getApplicationAttemptId());\n \n         if (app \u003d\u003d null) {\n           // this happens for the AM container\n           // The app have already removed when the NM sends the release\n           // information.\n           continue;\n         }\n \n-        String queue \u003d\n-            appQueueMap.get(containerId.getApplicationAttemptId()\n-              .getApplicationId());\n         int releasedMemory \u003d 0, releasedVCores \u003d 0;\n         if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n           for (RMContainer rmc : app.getLiveContainers()) {\n             if (rmc.getContainerId() \u003d\u003d containerId) {\n-              releasedMemory +\u003d rmc.getContainer().getResource().getMemorySize();\n-              releasedVCores +\u003d rmc.getContainer()\n-                      .getResource().getVirtualCores();\n+              Resource resource \u003d rmc.getContainer().getResource();\n+              releasedMemory +\u003d resource.getMemorySize();\n+              releasedVCores +\u003d resource.getVirtualCores();\n               break;\n             }\n           }\n         } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n           if (preemptionContainerMap.containsKey(containerId)) {\n             Resource preResource \u003d preemptionContainerMap.get(containerId);\n             releasedMemory +\u003d preResource.getMemorySize();\n             releasedVCores +\u003d preResource.getVirtualCores();\n             preemptionContainerMap.remove(containerId);\n           }\n         }\n         // update queue counters\n-        updateQueueMetrics(queue, releasedMemory, releasedVCores);\n+        String queue \u003d getSchedulerApp(containerId.getApplicationAttemptId()).\n+            getQueueName();\n+        schedulerMetrics.updateQueueMetricsByRelease(\n+            Resource.newInstance(releasedMemory, releasedVCores), queue);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateQueueWithNodeUpdate(\n      NodeUpdateSchedulerEventWrapper eventWrapper) {\n    RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n    List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n    for (UpdatedContainerInfo info : containerList) {\n      for (ContainerStatus status : info.getCompletedContainers()) {\n        ContainerId containerId \u003d status.getContainerId();\n        SchedulerAppReport app \u003d super.getSchedulerAppInfo(\n            containerId.getApplicationAttemptId());\n\n        if (app \u003d\u003d null) {\n          // this happens for the AM container\n          // The app have already removed when the NM sends the release\n          // information.\n          continue;\n        }\n\n        int releasedMemory \u003d 0, releasedVCores \u003d 0;\n        if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n          for (RMContainer rmc : app.getLiveContainers()) {\n            if (rmc.getContainerId() \u003d\u003d containerId) {\n              Resource resource \u003d rmc.getContainer().getResource();\n              releasedMemory +\u003d resource.getMemorySize();\n              releasedVCores +\u003d resource.getVirtualCores();\n              break;\n            }\n          }\n        } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n          if (preemptionContainerMap.containsKey(containerId)) {\n            Resource preResource \u003d preemptionContainerMap.get(containerId);\n            releasedMemory +\u003d preResource.getMemorySize();\n            releasedVCores +\u003d preResource.getVirtualCores();\n            preemptionContainerMap.remove(containerId);\n          }\n        }\n        // update queue counters\n        String queue \u003d getSchedulerApp(containerId.getApplicationAttemptId()).\n            getQueueName();\n        schedulerMetrics.updateQueueMetricsByRelease(\n            Resource.newInstance(releasedMemory, releasedVCores), queue);\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
            "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
            "oldMethodName": "updateQueueWithNodeUpdate",
            "newMethodName": "updateQueueWithNodeUpdate"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void updateQueueWithNodeUpdate(\n-          NodeUpdateSchedulerEventWrapper eventWrapper) {\n+      NodeUpdateSchedulerEventWrapper eventWrapper) {\n     RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n     List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n     for (UpdatedContainerInfo info : containerList) {\n       for (ContainerStatus status : info.getCompletedContainers()) {\n         ContainerId containerId \u003d status.getContainerId();\n-        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n-                containerId.getApplicationAttemptId());\n+        SchedulerAppReport app \u003d super.getSchedulerAppInfo(\n+            containerId.getApplicationAttemptId());\n \n         if (app \u003d\u003d null) {\n           // this happens for the AM container\n           // The app have already removed when the NM sends the release\n           // information.\n           continue;\n         }\n \n-        String queue \u003d\n-            appQueueMap.get(containerId.getApplicationAttemptId()\n-              .getApplicationId());\n         int releasedMemory \u003d 0, releasedVCores \u003d 0;\n         if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n           for (RMContainer rmc : app.getLiveContainers()) {\n             if (rmc.getContainerId() \u003d\u003d containerId) {\n-              releasedMemory +\u003d rmc.getContainer().getResource().getMemorySize();\n-              releasedVCores +\u003d rmc.getContainer()\n-                      .getResource().getVirtualCores();\n+              Resource resource \u003d rmc.getContainer().getResource();\n+              releasedMemory +\u003d resource.getMemorySize();\n+              releasedVCores +\u003d resource.getVirtualCores();\n               break;\n             }\n           }\n         } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n           if (preemptionContainerMap.containsKey(containerId)) {\n             Resource preResource \u003d preemptionContainerMap.get(containerId);\n             releasedMemory +\u003d preResource.getMemorySize();\n             releasedVCores +\u003d preResource.getVirtualCores();\n             preemptionContainerMap.remove(containerId);\n           }\n         }\n         // update queue counters\n-        updateQueueMetrics(queue, releasedMemory, releasedVCores);\n+        String queue \u003d getSchedulerApp(containerId.getApplicationAttemptId()).\n+            getQueueName();\n+        schedulerMetrics.updateQueueMetricsByRelease(\n+            Resource.newInstance(releasedMemory, releasedVCores), queue);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateQueueWithNodeUpdate(\n      NodeUpdateSchedulerEventWrapper eventWrapper) {\n    RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n    List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n    for (UpdatedContainerInfo info : containerList) {\n      for (ContainerStatus status : info.getCompletedContainers()) {\n        ContainerId containerId \u003d status.getContainerId();\n        SchedulerAppReport app \u003d super.getSchedulerAppInfo(\n            containerId.getApplicationAttemptId());\n\n        if (app \u003d\u003d null) {\n          // this happens for the AM container\n          // The app have already removed when the NM sends the release\n          // information.\n          continue;\n        }\n\n        int releasedMemory \u003d 0, releasedVCores \u003d 0;\n        if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n          for (RMContainer rmc : app.getLiveContainers()) {\n            if (rmc.getContainerId() \u003d\u003d containerId) {\n              Resource resource \u003d rmc.getContainer().getResource();\n              releasedMemory +\u003d resource.getMemorySize();\n              releasedVCores +\u003d resource.getVirtualCores();\n              break;\n            }\n          }\n        } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n          if (preemptionContainerMap.containsKey(containerId)) {\n            Resource preResource \u003d preemptionContainerMap.get(containerId);\n            releasedMemory +\u003d preResource.getMemorySize();\n            releasedVCores +\u003d preResource.getVirtualCores();\n            preemptionContainerMap.remove(containerId);\n          }\n        }\n        // update queue counters\n        String queue \u003d getSchedulerApp(containerId.getApplicationAttemptId()).\n            getQueueName();\n        schedulerMetrics.updateQueueMetricsByRelease(\n            Resource.newInstance(releasedMemory, releasedVCores), queue);\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 131.6,
      "commitsBetweenForRepo": 863,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private void updateQueueWithNodeUpdate(\n           NodeUpdateSchedulerEventWrapper eventWrapper) {\n     RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n     List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n     for (UpdatedContainerInfo info : containerList) {\n       for (ContainerStatus status : info.getCompletedContainers()) {\n         ContainerId containerId \u003d status.getContainerId();\n         SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n                 containerId.getApplicationAttemptId());\n \n         if (app \u003d\u003d null) {\n           // this happens for the AM container\n           // The app have already removed when the NM sends the release\n           // information.\n           continue;\n         }\n \n         String queue \u003d\n             appQueueMap.get(containerId.getApplicationAttemptId()\n               .getApplicationId());\n         int releasedMemory \u003d 0, releasedVCores \u003d 0;\n         if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n           for (RMContainer rmc : app.getLiveContainers()) {\n             if (rmc.getContainerId() \u003d\u003d containerId) {\n-              releasedMemory +\u003d rmc.getContainer().getResource().getMemory();\n+              releasedMemory +\u003d rmc.getContainer().getResource().getMemorySize();\n               releasedVCores +\u003d rmc.getContainer()\n                       .getResource().getVirtualCores();\n               break;\n             }\n           }\n         } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n           if (preemptionContainerMap.containsKey(containerId)) {\n             Resource preResource \u003d preemptionContainerMap.get(containerId);\n-            releasedMemory +\u003d preResource.getMemory();\n+            releasedMemory +\u003d preResource.getMemorySize();\n             releasedVCores +\u003d preResource.getVirtualCores();\n             preemptionContainerMap.remove(containerId);\n           }\n         }\n         // update queue counters\n         updateQueueMetrics(queue, releasedMemory, releasedVCores);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateQueueWithNodeUpdate(\n          NodeUpdateSchedulerEventWrapper eventWrapper) {\n    RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n    List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n    for (UpdatedContainerInfo info : containerList) {\n      for (ContainerStatus status : info.getCompletedContainers()) {\n        ContainerId containerId \u003d status.getContainerId();\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n                containerId.getApplicationAttemptId());\n\n        if (app \u003d\u003d null) {\n          // this happens for the AM container\n          // The app have already removed when the NM sends the release\n          // information.\n          continue;\n        }\n\n        String queue \u003d\n            appQueueMap.get(containerId.getApplicationAttemptId()\n              .getApplicationId());\n        int releasedMemory \u003d 0, releasedVCores \u003d 0;\n        if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n          for (RMContainer rmc : app.getLiveContainers()) {\n            if (rmc.getContainerId() \u003d\u003d containerId) {\n              releasedMemory +\u003d rmc.getContainer().getResource().getMemorySize();\n              releasedVCores +\u003d rmc.getContainer()\n                      .getResource().getVirtualCores();\n              break;\n            }\n          }\n        } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n          if (preemptionContainerMap.containsKey(containerId)) {\n            Resource preResource \u003d preemptionContainerMap.get(containerId);\n            releasedMemory +\u003d preResource.getMemorySize();\n            releasedVCores +\u003d preResource.getVirtualCores();\n            preemptionContainerMap.remove(containerId);\n          }\n        }\n        // update queue counters\n        updateQueueMetrics(queue, releasedMemory, releasedVCores);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/12/13 4:07 PM",
      "commitNameOld": "e07f3c87cd3542760efcf713f909375b69eec00f",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 14.84,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   private void updateQueueWithNodeUpdate(\n           NodeUpdateSchedulerEventWrapper eventWrapper) {\n     RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n     List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n     for (UpdatedContainerInfo info : containerList) {\n       for (ContainerStatus status : info.getCompletedContainers()) {\n         ContainerId containerId \u003d status.getContainerId();\n         SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n                 containerId.getApplicationAttemptId());\n \n         if (app \u003d\u003d null) {\n           // this happens for the AM container\n           // The app have already removed when the NM sends the release\n           // information.\n           continue;\n         }\n \n-        String queue \u003d appQueueMap.get(containerId.getApplicationAttemptId());\n+        String queue \u003d\n+            appQueueMap.get(containerId.getApplicationAttemptId()\n+              .getApplicationId());\n         int releasedMemory \u003d 0, releasedVCores \u003d 0;\n         if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n           for (RMContainer rmc : app.getLiveContainers()) {\n             if (rmc.getContainerId() \u003d\u003d containerId) {\n               releasedMemory +\u003d rmc.getContainer().getResource().getMemory();\n               releasedVCores +\u003d rmc.getContainer()\n                       .getResource().getVirtualCores();\n               break;\n             }\n           }\n         } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n           if (preemptionContainerMap.containsKey(containerId)) {\n             Resource preResource \u003d preemptionContainerMap.get(containerId);\n             releasedMemory +\u003d preResource.getMemory();\n             releasedVCores +\u003d preResource.getVirtualCores();\n             preemptionContainerMap.remove(containerId);\n           }\n         }\n         // update queue counters\n         updateQueueMetrics(queue, releasedMemory, releasedVCores);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateQueueWithNodeUpdate(\n          NodeUpdateSchedulerEventWrapper eventWrapper) {\n    RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n    List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n    for (UpdatedContainerInfo info : containerList) {\n      for (ContainerStatus status : info.getCompletedContainers()) {\n        ContainerId containerId \u003d status.getContainerId();\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n                containerId.getApplicationAttemptId());\n\n        if (app \u003d\u003d null) {\n          // this happens for the AM container\n          // The app have already removed when the NM sends the release\n          // information.\n          continue;\n        }\n\n        String queue \u003d\n            appQueueMap.get(containerId.getApplicationAttemptId()\n              .getApplicationId());\n        int releasedMemory \u003d 0, releasedVCores \u003d 0;\n        if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n          for (RMContainer rmc : app.getLiveContainers()) {\n            if (rmc.getContainerId() \u003d\u003d containerId) {\n              releasedMemory +\u003d rmc.getContainer().getResource().getMemory();\n              releasedVCores +\u003d rmc.getContainer()\n                      .getResource().getVirtualCores();\n              break;\n            }\n          }\n        } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n          if (preemptionContainerMap.containsKey(containerId)) {\n            Resource preResource \u003d preemptionContainerMap.get(containerId);\n            releasedMemory +\u003d preResource.getMemory();\n            releasedVCores +\u003d preResource.getVirtualCores();\n            preemptionContainerMap.remove(containerId);\n          }\n        }\n        // update queue counters\n        updateQueueMetrics(queue, releasedMemory, releasedVCores);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,41 @@\n+  private void updateQueueWithNodeUpdate(\n+          NodeUpdateSchedulerEventWrapper eventWrapper) {\n+    RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n+    List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n+    for (UpdatedContainerInfo info : containerList) {\n+      for (ContainerStatus status : info.getCompletedContainers()) {\n+        ContainerId containerId \u003d status.getContainerId();\n+        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n+                containerId.getApplicationAttemptId());\n+\n+        if (app \u003d\u003d null) {\n+          // this happens for the AM container\n+          // The app have already removed when the NM sends the release\n+          // information.\n+          continue;\n+        }\n+\n+        String queue \u003d appQueueMap.get(containerId.getApplicationAttemptId());\n+        int releasedMemory \u003d 0, releasedVCores \u003d 0;\n+        if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n+          for (RMContainer rmc : app.getLiveContainers()) {\n+            if (rmc.getContainerId() \u003d\u003d containerId) {\n+              releasedMemory +\u003d rmc.getContainer().getResource().getMemory();\n+              releasedVCores +\u003d rmc.getContainer()\n+                      .getResource().getVirtualCores();\n+              break;\n+            }\n+          }\n+        } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n+          if (preemptionContainerMap.containsKey(containerId)) {\n+            Resource preResource \u003d preemptionContainerMap.get(containerId);\n+            releasedMemory +\u003d preResource.getMemory();\n+            releasedVCores +\u003d preResource.getVirtualCores();\n+            preemptionContainerMap.remove(containerId);\n+          }\n+        }\n+        // update queue counters\n+        updateQueueMetrics(queue, releasedMemory, releasedVCores);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateQueueWithNodeUpdate(\n          NodeUpdateSchedulerEventWrapper eventWrapper) {\n    RMNodeWrapper node \u003d (RMNodeWrapper) eventWrapper.getRMNode();\n    List\u003cUpdatedContainerInfo\u003e containerList \u003d node.getContainerUpdates();\n    for (UpdatedContainerInfo info : containerList) {\n      for (ContainerStatus status : info.getCompletedContainers()) {\n        ContainerId containerId \u003d status.getContainerId();\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(\n                containerId.getApplicationAttemptId());\n\n        if (app \u003d\u003d null) {\n          // this happens for the AM container\n          // The app have already removed when the NM sends the release\n          // information.\n          continue;\n        }\n\n        String queue \u003d appQueueMap.get(containerId.getApplicationAttemptId());\n        int releasedMemory \u003d 0, releasedVCores \u003d 0;\n        if (status.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n          for (RMContainer rmc : app.getLiveContainers()) {\n            if (rmc.getContainerId() \u003d\u003d containerId) {\n              releasedMemory +\u003d rmc.getContainer().getResource().getMemory();\n              releasedVCores +\u003d rmc.getContainer()\n                      .getResource().getVirtualCores();\n              break;\n            }\n          }\n        } else if (status.getExitStatus() \u003d\u003d ContainerExitStatus.ABORTED) {\n          if (preemptionContainerMap.containsKey(containerId)) {\n            Resource preResource \u003d preemptionContainerMap.get(containerId);\n            releasedMemory +\u003d preResource.getMemory();\n            releasedVCores +\u003d preResource.getVirtualCores();\n            preemptionContainerMap.remove(containerId);\n          }\n        }\n        // update queue counters\n        updateQueueMetrics(queue, releasedMemory, releasedVCores);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java"
    }
  }
}