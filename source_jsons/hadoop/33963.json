{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrafficController.java",
  "functionName": "reacquireContainerClasses",
  "functionId": "reacquireContainerClasses___state-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java",
  "functionStartLine": 290,
  "functionEndLine": 319,
  "numCommitsSeen": 5,
  "timeTaken": 744,
  "changeHistory": [
    "a100be685cc4521e9949589948219231aa5d2733"
  ],
  "changeHistoryShort": {
    "a100be685cc4521e9949589948219231aa5d2733": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a100be685cc4521e9949589948219231aa5d2733": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3366. Enhanced NodeManager to support classifying/shaping outgoing network bandwidth traffic originating from YARN containers Contributed by Sidharta Seethana.\n",
      "commitDate": "22/04/15 5:26 PM",
      "commitName": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  private void reacquireContainerClasses(String state) {\n+    //At this point we already have already successfully passed\n+    //checkIfAlreadyBootstrapped() - so we know that at least the\n+    //root classes are in place.\n+    String tcClassesStr \u003d state.substring(state.indexOf(\"class\"));\n+    //one class per line - the results of the split will need to trimmed\n+    String[] tcClasses \u003d Pattern.compile(\"$\", Pattern.MULTILINE)\n+        .split(tcClassesStr);\n+    Pattern tcClassPattern \u003d Pattern.compile(String.format(\n+        \"class htb %d:(\\\\d+) .*\", ROOT_QDISC_HANDLE));\n+\n+    synchronized (classIdSet) {\n+      for (String tcClassSplit : tcClasses) {\n+        String tcClass \u003d tcClassSplit.trim();\n+\n+        if (!tcClass.isEmpty()) {\n+          Matcher classMatcher \u003d tcClassPattern.matcher(tcClass);\n+          if (classMatcher.matches()) {\n+            int classId \u003d Integer.parseInt(classMatcher.group(1));\n+            if (classId \u003e\u003d MIN_CONTAINER_CLASS_ID) {\n+              classIdSet.set(classId - MIN_CONTAINER_CLASS_ID);\n+              LOG.info(\"Reacquired container classid: \" + classId);\n+            }\n+          } else {\n+            LOG.warn(\"Unable to match classid in string:\" + tcClass);\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void reacquireContainerClasses(String state) {\n    //At this point we already have already successfully passed\n    //checkIfAlreadyBootstrapped() - so we know that at least the\n    //root classes are in place.\n    String tcClassesStr \u003d state.substring(state.indexOf(\"class\"));\n    //one class per line - the results of the split will need to trimmed\n    String[] tcClasses \u003d Pattern.compile(\"$\", Pattern.MULTILINE)\n        .split(tcClassesStr);\n    Pattern tcClassPattern \u003d Pattern.compile(String.format(\n        \"class htb %d:(\\\\d+) .*\", ROOT_QDISC_HANDLE));\n\n    synchronized (classIdSet) {\n      for (String tcClassSplit : tcClasses) {\n        String tcClass \u003d tcClassSplit.trim();\n\n        if (!tcClass.isEmpty()) {\n          Matcher classMatcher \u003d tcClassPattern.matcher(tcClass);\n          if (classMatcher.matches()) {\n            int classId \u003d Integer.parseInt(classMatcher.group(1));\n            if (classId \u003e\u003d MIN_CONTAINER_CLASS_ID) {\n              classIdSet.set(classId - MIN_CONTAINER_CLASS_ID);\n              LOG.info(\"Reacquired container classid: \" + classId);\n            }\n          } else {\n            LOG.warn(\"Unable to match classid in string:\" + tcClass);\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java"
    }
  }
}