{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebAppUtil.java",
  "functionName": "createContainerLaunchContext",
  "functionId": "createContainerLaunchContext___newApp-ApplicationSubmissionContextInfo",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
  "functionStartLine": 271,
  "functionEndLine": 308,
  "numCommitsSeen": 70,
  "timeTaken": 4338,
  "changeHistory": [
    "bcde66bed1e41b5644811fe90bfbf3d56827db36",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "075ff276ca9e8c192717a50b0e18485afc8571a6"
  ],
  "changeHistoryShort": {
    "bcde66bed1e41b5644811fe90bfbf3d56827db36": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "075ff276ca9e8c192717a50b0e18485afc8571a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bcde66bed1e41b5644811fe90bfbf3d56827db36": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6897. Refactoring RMWebServices by moving some util methods to RMWebAppUtil. (Giovanni Matteo Fumarola via Subru).\n",
      "commitDate": "28/07/17 3:44 PM",
      "commitName": "bcde66bed1e41b5644811fe90bfbf3d56827db36",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6897. Refactoring RMWebServices by moving some util methods to RMWebAppUtil. (Giovanni Matteo Fumarola via Subru).\n",
          "commitDate": "28/07/17 3:44 PM",
          "commitName": "bcde66bed1e41b5644811fe90bfbf3d56827db36",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "28/07/17 2:21 PM",
          "commitNameOld": "713349a9af4654dad4d4c372454552bfd063ca5f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  protected ContainerLaunchContext createContainerLaunchContext(\n+  private static ContainerLaunchContext createContainerLaunchContext(\n       ApplicationSubmissionContextInfo newApp)\n       throws BadRequestException, IOException {\n \n     // create container launch context\n \n     HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n     for (Map.Entry\u003cString, String\u003e entry : newApp\n         .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n-      if (entry.getValue().isEmpty() \u003d\u003d false) {\n+      if (!entry.getValue().isEmpty()) {\n         Base64 decoder \u003d new Base64(0, null, true);\n         byte[] data \u003d decoder.decode(entry.getValue());\n         hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n       }\n     }\n \n     HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n     for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n         .getContainerLaunchContextInfo().getResources().entrySet()) {\n       LocalResourceInfo l \u003d entry.getValue();\n       LocalResource lr \u003d LocalResource.newInstance(URL.fromURI(l.getUrl()),\n           l.getType(), l.getVisibility(), l.getSize(), l.getTimestamp());\n       hlr.put(entry.getKey(), lr);\n     }\n \n     DataOutputBuffer out \u003d new DataOutputBuffer();\n     Credentials cs \u003d createCredentials(\n         newApp.getContainerLaunchContextInfo().getCredentials());\n     cs.writeTokenStorageToStream(out);\n     ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n \n     ContainerLaunchContext ctx \u003d ContainerLaunchContext.newInstance(hlr,\n         newApp.getContainerLaunchContextInfo().getEnvironment(),\n         newApp.getContainerLaunchContextInfo().getCommands(), hmap, tokens,\n         newApp.getContainerLaunchContextInfo().getAcls());\n \n     return ctx;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ContainerLaunchContext createContainerLaunchContext(\n      ApplicationSubmissionContextInfo newApp)\n      throws BadRequestException, IOException {\n\n    // create container launch context\n\n    HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n    for (Map.Entry\u003cString, String\u003e entry : newApp\n        .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n      if (!entry.getValue().isEmpty()) {\n        Base64 decoder \u003d new Base64(0, null, true);\n        byte[] data \u003d decoder.decode(entry.getValue());\n        hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n      }\n    }\n\n    HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n    for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n        .getContainerLaunchContextInfo().getResources().entrySet()) {\n      LocalResourceInfo l \u003d entry.getValue();\n      LocalResource lr \u003d LocalResource.newInstance(URL.fromURI(l.getUrl()),\n          l.getType(), l.getVisibility(), l.getSize(), l.getTimestamp());\n      hlr.put(entry.getKey(), lr);\n    }\n\n    DataOutputBuffer out \u003d new DataOutputBuffer();\n    Credentials cs \u003d createCredentials(\n        newApp.getContainerLaunchContextInfo().getCredentials());\n    cs.writeTokenStorageToStream(out);\n    ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n\n    ContainerLaunchContext ctx \u003d ContainerLaunchContext.newInstance(hlr,\n        newApp.getContainerLaunchContextInfo().getEnvironment(),\n        newApp.getContainerLaunchContextInfo().getCommands(), hmap, tokens,\n        newApp.getContainerLaunchContextInfo().getAcls());\n\n    return ctx;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
            "oldMethodName": "createContainerLaunchContext",
            "newMethodName": "createContainerLaunchContext"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6897. Refactoring RMWebServices by moving some util methods to RMWebAppUtil. (Giovanni Matteo Fumarola via Subru).\n",
          "commitDate": "28/07/17 3:44 PM",
          "commitName": "bcde66bed1e41b5644811fe90bfbf3d56827db36",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "28/07/17 2:21 PM",
          "commitNameOld": "713349a9af4654dad4d4c372454552bfd063ca5f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  protected ContainerLaunchContext createContainerLaunchContext(\n+  private static ContainerLaunchContext createContainerLaunchContext(\n       ApplicationSubmissionContextInfo newApp)\n       throws BadRequestException, IOException {\n \n     // create container launch context\n \n     HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n     for (Map.Entry\u003cString, String\u003e entry : newApp\n         .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n-      if (entry.getValue().isEmpty() \u003d\u003d false) {\n+      if (!entry.getValue().isEmpty()) {\n         Base64 decoder \u003d new Base64(0, null, true);\n         byte[] data \u003d decoder.decode(entry.getValue());\n         hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n       }\n     }\n \n     HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n     for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n         .getContainerLaunchContextInfo().getResources().entrySet()) {\n       LocalResourceInfo l \u003d entry.getValue();\n       LocalResource lr \u003d LocalResource.newInstance(URL.fromURI(l.getUrl()),\n           l.getType(), l.getVisibility(), l.getSize(), l.getTimestamp());\n       hlr.put(entry.getKey(), lr);\n     }\n \n     DataOutputBuffer out \u003d new DataOutputBuffer();\n     Credentials cs \u003d createCredentials(\n         newApp.getContainerLaunchContextInfo().getCredentials());\n     cs.writeTokenStorageToStream(out);\n     ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n \n     ContainerLaunchContext ctx \u003d ContainerLaunchContext.newInstance(hlr,\n         newApp.getContainerLaunchContextInfo().getEnvironment(),\n         newApp.getContainerLaunchContextInfo().getCommands(), hmap, tokens,\n         newApp.getContainerLaunchContextInfo().getAcls());\n \n     return ctx;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ContainerLaunchContext createContainerLaunchContext(\n      ApplicationSubmissionContextInfo newApp)\n      throws BadRequestException, IOException {\n\n    // create container launch context\n\n    HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n    for (Map.Entry\u003cString, String\u003e entry : newApp\n        .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n      if (!entry.getValue().isEmpty()) {\n        Base64 decoder \u003d new Base64(0, null, true);\n        byte[] data \u003d decoder.decode(entry.getValue());\n        hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n      }\n    }\n\n    HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n    for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n        .getContainerLaunchContextInfo().getResources().entrySet()) {\n      LocalResourceInfo l \u003d entry.getValue();\n      LocalResource lr \u003d LocalResource.newInstance(URL.fromURI(l.getUrl()),\n          l.getType(), l.getVisibility(), l.getSize(), l.getTimestamp());\n      hlr.put(entry.getKey(), lr);\n    }\n\n    DataOutputBuffer out \u003d new DataOutputBuffer();\n    Credentials cs \u003d createCredentials(\n        newApp.getContainerLaunchContextInfo().getCredentials());\n    cs.writeTokenStorageToStream(out);\n    ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n\n    ContainerLaunchContext ctx \u003d ContainerLaunchContext.newInstance(hlr,\n        newApp.getContainerLaunchContextInfo().getEnvironment(),\n        newApp.getContainerLaunchContextInfo().getCommands(), hmap, tokens,\n        newApp.getContainerLaunchContextInfo().getAcls());\n\n    return ctx;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6897. Refactoring RMWebServices by moving some util methods to RMWebAppUtil. (Giovanni Matteo Fumarola via Subru).\n",
          "commitDate": "28/07/17 3:44 PM",
          "commitName": "bcde66bed1e41b5644811fe90bfbf3d56827db36",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "28/07/17 2:21 PM",
          "commitNameOld": "713349a9af4654dad4d4c372454552bfd063ca5f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  protected ContainerLaunchContext createContainerLaunchContext(\n+  private static ContainerLaunchContext createContainerLaunchContext(\n       ApplicationSubmissionContextInfo newApp)\n       throws BadRequestException, IOException {\n \n     // create container launch context\n \n     HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n     for (Map.Entry\u003cString, String\u003e entry : newApp\n         .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n-      if (entry.getValue().isEmpty() \u003d\u003d false) {\n+      if (!entry.getValue().isEmpty()) {\n         Base64 decoder \u003d new Base64(0, null, true);\n         byte[] data \u003d decoder.decode(entry.getValue());\n         hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n       }\n     }\n \n     HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n     for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n         .getContainerLaunchContextInfo().getResources().entrySet()) {\n       LocalResourceInfo l \u003d entry.getValue();\n       LocalResource lr \u003d LocalResource.newInstance(URL.fromURI(l.getUrl()),\n           l.getType(), l.getVisibility(), l.getSize(), l.getTimestamp());\n       hlr.put(entry.getKey(), lr);\n     }\n \n     DataOutputBuffer out \u003d new DataOutputBuffer();\n     Credentials cs \u003d createCredentials(\n         newApp.getContainerLaunchContextInfo().getCredentials());\n     cs.writeTokenStorageToStream(out);\n     ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n \n     ContainerLaunchContext ctx \u003d ContainerLaunchContext.newInstance(hlr,\n         newApp.getContainerLaunchContextInfo().getEnvironment(),\n         newApp.getContainerLaunchContextInfo().getCommands(), hmap, tokens,\n         newApp.getContainerLaunchContextInfo().getAcls());\n \n     return ctx;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ContainerLaunchContext createContainerLaunchContext(\n      ApplicationSubmissionContextInfo newApp)\n      throws BadRequestException, IOException {\n\n    // create container launch context\n\n    HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n    for (Map.Entry\u003cString, String\u003e entry : newApp\n        .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n      if (!entry.getValue().isEmpty()) {\n        Base64 decoder \u003d new Base64(0, null, true);\n        byte[] data \u003d decoder.decode(entry.getValue());\n        hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n      }\n    }\n\n    HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n    for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n        .getContainerLaunchContextInfo().getResources().entrySet()) {\n      LocalResourceInfo l \u003d entry.getValue();\n      LocalResource lr \u003d LocalResource.newInstance(URL.fromURI(l.getUrl()),\n          l.getType(), l.getVisibility(), l.getSize(), l.getTimestamp());\n      hlr.put(entry.getKey(), lr);\n    }\n\n    DataOutputBuffer out \u003d new DataOutputBuffer();\n    Credentials cs \u003d createCredentials(\n        newApp.getContainerLaunchContextInfo().getCredentials());\n    cs.writeTokenStorageToStream(out);\n    ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n\n    ContainerLaunchContext ctx \u003d ContainerLaunchContext.newInstance(hlr,\n        newApp.getContainerLaunchContextInfo().getEnvironment(),\n        newApp.getContainerLaunchContextInfo().getCommands(), hmap, tokens,\n        newApp.getContainerLaunchContextInfo().getAcls());\n\n    return ctx;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   protected ContainerLaunchContext createContainerLaunchContext(\n       ApplicationSubmissionContextInfo newApp) throws BadRequestException,\n       IOException {\n \n     // create container launch context\n \n     HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n     for (Map.Entry\u003cString, String\u003e entry : newApp\n       .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n       if (entry.getValue().isEmpty() \u003d\u003d false) {\n         Base64 decoder \u003d new Base64(0, null, true);\n         byte[] data \u003d decoder.decode(entry.getValue());\n         hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n       }\n     }\n \n     HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n     for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n       .getContainerLaunchContextInfo().getResources().entrySet()) {\n       LocalResourceInfo l \u003d entry.getValue();\n       LocalResource lr \u003d\n           LocalResource.newInstance(\n-            ConverterUtils.getYarnUrlFromURI(l.getUrl()), l.getType(),\n+              URL.fromURI(l.getUrl()), l.getType(),\n             l.getVisibility(), l.getSize(), l.getTimestamp());\n       hlr.put(entry.getKey(), lr);\n     }\n \n     DataOutputBuffer out \u003d new DataOutputBuffer();\n     Credentials cs \u003d\n         createCredentials(newApp.getContainerLaunchContextInfo()\n           .getCredentials());\n     cs.writeTokenStorageToStream(out);\n     ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n \n     ContainerLaunchContext ctx \u003d\n         ContainerLaunchContext.newInstance(hlr, newApp\n           .getContainerLaunchContextInfo().getEnvironment(), newApp\n           .getContainerLaunchContextInfo().getCommands(), hmap, tokens, newApp\n           .getContainerLaunchContextInfo().getAcls());\n \n     return ctx;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerLaunchContext createContainerLaunchContext(\n      ApplicationSubmissionContextInfo newApp) throws BadRequestException,\n      IOException {\n\n    // create container launch context\n\n    HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n    for (Map.Entry\u003cString, String\u003e entry : newApp\n      .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n      if (entry.getValue().isEmpty() \u003d\u003d false) {\n        Base64 decoder \u003d new Base64(0, null, true);\n        byte[] data \u003d decoder.decode(entry.getValue());\n        hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n      }\n    }\n\n    HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n    for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n      .getContainerLaunchContextInfo().getResources().entrySet()) {\n      LocalResourceInfo l \u003d entry.getValue();\n      LocalResource lr \u003d\n          LocalResource.newInstance(\n              URL.fromURI(l.getUrl()), l.getType(),\n            l.getVisibility(), l.getSize(), l.getTimestamp());\n      hlr.put(entry.getKey(), lr);\n    }\n\n    DataOutputBuffer out \u003d new DataOutputBuffer();\n    Credentials cs \u003d\n        createCredentials(newApp.getContainerLaunchContextInfo()\n          .getCredentials());\n    cs.writeTokenStorageToStream(out);\n    ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n\n    ContainerLaunchContext ctx \u003d\n        ContainerLaunchContext.newInstance(hlr, newApp\n          .getContainerLaunchContextInfo().getEnvironment(), newApp\n          .getContainerLaunchContextInfo().getCommands(), hmap, tokens, newApp\n          .getContainerLaunchContextInfo().getAcls());\n\n    return ctx;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "075ff276ca9e8c192717a50b0e18485afc8571a6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1713. Added get-new-app and submit-app functionality to RM web services. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/14 5:23 PM",
      "commitName": "075ff276ca9e8c192717a50b0e18485afc8571a6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,41 @@\n+  protected ContainerLaunchContext createContainerLaunchContext(\n+      ApplicationSubmissionContextInfo newApp) throws BadRequestException, IOException {\n+\n+    // create container launch context\n+\n+    HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n+    for (Map.Entry\u003cString, String\u003e entry : newApp\n+      .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n+      if (entry.getValue().isEmpty() \u003d\u003d false) {\n+        Base64 decoder \u003d new Base64(0, null, true);\n+        byte[] data \u003d decoder.decode(entry.getValue());\n+        hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n+      }\n+    }\n+\n+    HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n+    for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n+      .getContainerLaunchContextInfo().getResources().entrySet()) {\n+      LocalResourceInfo l \u003d entry.getValue();\n+      LocalResource lr \u003d\n+          LocalResource.newInstance(\n+            ConverterUtils.getYarnUrlFromURI(l.getUrl()), l.getType(),\n+            l.getVisibility(), l.getSize(), l.getTimestamp());\n+      hlr.put(entry.getKey(), lr);\n+    }\n+\n+    DataOutputBuffer out \u003d new DataOutputBuffer();\n+    Credentials cs \u003d\n+        createCredentials(newApp.getContainerLaunchContextInfo()\n+          .getCredentials());\n+    cs.writeTokenStorageToStream(out);\n+    ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n+\n+    ContainerLaunchContext ctx \u003d\n+        ContainerLaunchContext.newInstance(hlr, newApp\n+          .getContainerLaunchContextInfo().getEnvironment(), newApp\n+          .getContainerLaunchContextInfo().getCommands(), hmap, tokens, newApp\n+          .getContainerLaunchContextInfo().getAcls());\n+\n+    return ctx;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerLaunchContext createContainerLaunchContext(\n      ApplicationSubmissionContextInfo newApp) throws BadRequestException, IOException {\n\n    // create container launch context\n\n    HashMap\u003cString, ByteBuffer\u003e hmap \u003d new HashMap\u003cString, ByteBuffer\u003e();\n    for (Map.Entry\u003cString, String\u003e entry : newApp\n      .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {\n      if (entry.getValue().isEmpty() \u003d\u003d false) {\n        Base64 decoder \u003d new Base64(0, null, true);\n        byte[] data \u003d decoder.decode(entry.getValue());\n        hmap.put(entry.getKey(), ByteBuffer.wrap(data));\n      }\n    }\n\n    HashMap\u003cString, LocalResource\u003e hlr \u003d new HashMap\u003cString, LocalResource\u003e();\n    for (Map.Entry\u003cString, LocalResourceInfo\u003e entry : newApp\n      .getContainerLaunchContextInfo().getResources().entrySet()) {\n      LocalResourceInfo l \u003d entry.getValue();\n      LocalResource lr \u003d\n          LocalResource.newInstance(\n            ConverterUtils.getYarnUrlFromURI(l.getUrl()), l.getType(),\n            l.getVisibility(), l.getSize(), l.getTimestamp());\n      hlr.put(entry.getKey(), lr);\n    }\n\n    DataOutputBuffer out \u003d new DataOutputBuffer();\n    Credentials cs \u003d\n        createCredentials(newApp.getContainerLaunchContextInfo()\n          .getCredentials());\n    cs.writeTokenStorageToStream(out);\n    ByteBuffer tokens \u003d ByteBuffer.wrap(out.getData());\n\n    ContainerLaunchContext ctx \u003d\n        ContainerLaunchContext.newInstance(hlr, newApp\n          .getContainerLaunchContextInfo().getEnvironment(), newApp\n          .getContainerLaunchContextInfo().getCommands(), hmap, tokens, newApp\n          .getContainerLaunchContextInfo().getAcls());\n\n    return ctx;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}