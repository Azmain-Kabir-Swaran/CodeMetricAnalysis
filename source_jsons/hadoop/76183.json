{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2InputStream.java",
  "functionName": "read",
  "functionId": "read___dest-byte[](modifiers-final)__offs-int(modifiers-final)__len-int(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
  "functionStartLine": 387,
  "functionEndLine": 434,
  "numCommitsSeen": 10,
  "timeTaken": 1514,
  "changeHistory": [
    "2fae63aa60c43b62bd908a9499562fe528603185",
    "1e4e98aa350bc1fe76db57b7a04f899bdaba3afd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "86724941c5144a06113090d40c50c289e7ebd290",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "2fae63aa60c43b62bd908a9499562fe528603185": "Ybodychange",
    "1e4e98aa350bc1fe76db57b7a04f899bdaba3afd": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "86724941c5144a06113090d40c50c289e7ebd290": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fae63aa60c43b62bd908a9499562fe528603185": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14919. BZip2 drops records when reading data in splits. Contributed by Jason Lowe\n",
      "commitDate": "31/10/17 7:30 AM",
      "commitName": "2fae63aa60c43b62bd908a9499562fe528603185",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/04/15 1:48 PM",
      "commitNameOld": "e54a3e1f4f3ea4dbba14f3fab0c395a235763c54",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 922.74,
      "commitsBetweenForRepo": 6477,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,48 @@\n   public int read(final byte[] dest, final int offs, final int len)\n       throws IOException {\n     if (offs \u003c 0) {\n       throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n     }\n     if (len \u003c 0) {\n       throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n     }\n     if (offs + len \u003e dest.length) {\n       throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n           + len + \") \u003e dest.length(\" + dest.length + \").\");\n     }\n     if (this.in \u003d\u003d null) {\n       throw new IOException(\"stream closed\");\n     }\n \n     if(lazyInitialization){\n       this.init();\n       this.lazyInitialization \u003d false;\n     }\n \n     if(skipDecompression){\n       changeStateToProcessABlock();\n       skipDecompression \u003d false;\n     }\n \n     final int hi \u003d offs + len;\n     int destOffs \u003d offs;\n     int b \u003d 0;\n \n \n \n     for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n       dest[destOffs++] \u003d (byte) b;\n \n     }\n \n     int result \u003d destOffs - offs;\n     if (result \u003d\u003d 0) {\n       //report \u0027end of block\u0027 or \u0027end of stream\u0027\n       result \u003d b;\n \n       skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n-      //Exactly when we are about to start a new block, we advertise the stream position.\n-      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n \n       changeStateToProcessABlock();\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    if(lazyInitialization){\n      this.init();\n      this.lazyInitialization \u003d false;\n    }\n\n    if(skipDecompression){\n      changeStateToProcessABlock();\n      skipDecompression \u003d false;\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    int b \u003d 0;\n\n\n\n    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n\n    }\n\n    int result \u003d destOffs - offs;\n    if (result \u003d\u003d 0) {\n      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n      result \u003d b;\n\n      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n\n      changeStateToProcessABlock();\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {}
    },
    "1e4e98aa350bc1fe76db57b7a04f899bdaba3afd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10614. CBZip2InputStream is not threadsafe (Xiangrui Meng via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595521 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/14 11:04 AM",
      "commitName": "1e4e98aa350bc1fe76db57b7a04f899bdaba3afd",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 630.71,
      "commitsBetweenForRepo": 3926,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public int read(final byte[] dest, final int offs, final int len)\n       throws IOException {\n     if (offs \u003c 0) {\n       throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n     }\n     if (len \u003c 0) {\n       throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n     }\n     if (offs + len \u003e dest.length) {\n       throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n           + len + \") \u003e dest.length(\" + dest.length + \").\");\n     }\n     if (this.in \u003d\u003d null) {\n       throw new IOException(\"stream closed\");\n     }\n \n     if(lazyInitialization){\n       this.init();\n       this.lazyInitialization \u003d false;\n     }\n \n     if(skipDecompression){\n       changeStateToProcessABlock();\n-      CBZip2InputStream.skipDecompression \u003d false;\n+      skipDecompression \u003d false;\n     }\n \n     final int hi \u003d offs + len;\n     int destOffs \u003d offs;\n     int b \u003d 0;\n \n \n \n     for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n       dest[destOffs++] \u003d (byte) b;\n \n     }\n \n     int result \u003d destOffs - offs;\n     if (result \u003d\u003d 0) {\n       //report \u0027end of block\u0027 or \u0027end of stream\u0027\n       result \u003d b;\n \n       skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n       //Exactly when we are about to start a new block, we advertise the stream position.\n       this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n \n       changeStateToProcessABlock();\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    if(lazyInitialization){\n      this.init();\n      this.lazyInitialization \u003d false;\n    }\n\n    if(skipDecompression){\n      changeStateToProcessABlock();\n      skipDecompression \u003d false;\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    int b \u003d 0;\n\n\n\n    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n\n    }\n\n    int result \u003d destOffs - offs;\n    if (result \u003d\u003d 0) {\n      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n      result \u003d b;\n\n      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n      //Exactly when we are about to start a new block, we advertise the stream position.\n      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n\n      changeStateToProcessABlock();\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    if(lazyInitialization){\n      this.init();\n      this.lazyInitialization \u003d false;\n    }\n\n    if(skipDecompression){\n      changeStateToProcessABlock();\n      CBZip2InputStream.skipDecompression \u003d false;\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    int b \u003d 0;\n\n\n\n    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n\n    }\n\n    int result \u003d destOffs - offs;\n    if (result \u003d\u003d 0) {\n      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n      result \u003d b;\n\n      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n      //Exactly when we are about to start a new block, we advertise the stream position.\n      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n\n      changeStateToProcessABlock();\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    if(lazyInitialization){\n      this.init();\n      this.lazyInitialization \u003d false;\n    }\n\n    if(skipDecompression){\n      changeStateToProcessABlock();\n      CBZip2InputStream.skipDecompression \u003d false;\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    int b \u003d 0;\n\n\n\n    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n\n    }\n\n    int result \u003d destOffs - offs;\n    if (result \u003d\u003d 0) {\n      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n      result \u003d b;\n\n      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n      //Exactly when we are about to start a new block, we advertise the stream position.\n      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n\n      changeStateToProcessABlock();\n    }\n    return result;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    if(lazyInitialization){\n      this.init();\n      this.lazyInitialization \u003d false;\n    }\n\n    if(skipDecompression){\n      changeStateToProcessABlock();\n      CBZip2InputStream.skipDecompression \u003d false;\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    int b \u003d 0;\n\n\n\n    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n\n    }\n\n    int result \u003d destOffs - offs;\n    if (result \u003d\u003d 0) {\n      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n      result \u003d b;\n\n      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n      //Exactly when we are about to start a new block, we advertise the stream position.\n      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n\n      changeStateToProcessABlock();\n    }\n    return result;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "86724941c5144a06113090d40c50c289e7ebd290": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-4012. Provide splitting support for bzip2 compressed files. Contributed by Abdul Qadeer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@813581 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/09 1:51 PM",
      "commitName": "86724941c5144a06113090d40c50c289e7ebd290",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 114.69,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,50 @@\n   public int read(final byte[] dest, final int offs, final int len)\n       throws IOException {\n     if (offs \u003c 0) {\n       throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n     }\n     if (len \u003c 0) {\n       throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n     }\n     if (offs + len \u003e dest.length) {\n       throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n           + len + \") \u003e dest.length(\" + dest.length + \").\");\n     }\n     if (this.in \u003d\u003d null) {\n       throw new IOException(\"stream closed\");\n     }\n \n-    final int hi \u003d offs + len;\n-    int destOffs \u003d offs;\n-    for (int b; (destOffs \u003c hi) \u0026\u0026 ((b \u003d read0()) \u003e\u003d 0);) {\n-      dest[destOffs++] \u003d (byte) b;\n+    if(lazyInitialization){\n+      this.init();\n+      this.lazyInitialization \u003d false;\n     }\n \n-    return (destOffs \u003d\u003d offs) ? -1 : (destOffs - offs);\n+    if(skipDecompression){\n+      changeStateToProcessABlock();\n+      CBZip2InputStream.skipDecompression \u003d false;\n+    }\n+\n+    final int hi \u003d offs + len;\n+    int destOffs \u003d offs;\n+    int b \u003d 0;\n+\n+\n+\n+    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n+      dest[destOffs++] \u003d (byte) b;\n+\n+    }\n+\n+    int result \u003d destOffs - offs;\n+    if (result \u003d\u003d 0) {\n+      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n+      result \u003d b;\n+\n+      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n+      //Exactly when we are about to start a new block, we advertise the stream position.\n+      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n+\n+      changeStateToProcessABlock();\n+    }\n+    return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    if(lazyInitialization){\n      this.init();\n      this.lazyInitialization \u003d false;\n    }\n\n    if(skipDecompression){\n      changeStateToProcessABlock();\n      CBZip2InputStream.skipDecompression \u003d false;\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    int b \u003d 0;\n\n\n\n    for (; ((destOffs \u003c hi) \u0026\u0026 ((b \u003d read0())) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n\n    }\n\n    int result \u003d destOffs - offs;\n    if (result \u003d\u003d 0) {\n      //report \u0027end of block\u0027 or \u0027end of stream\u0027\n      result \u003d b;\n\n      skipResult \u003d this.skipToNextMarker(CBZip2InputStream.BLOCK_DELIMITER, DELIMITER_BIT_LENGTH);\n      //Exactly when we are about to start a new block, we advertise the stream position.\n      this.reportedBytesReadFromCompressedStream \u003d this.bytesReadFromCompressedStream;\n\n      changeStateToProcessABlock();\n    }\n    return result;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,24 @@\n+  public int read(final byte[] dest, final int offs, final int len)\n+      throws IOException {\n+    if (offs \u003c 0) {\n+      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n+    }\n+    if (len \u003c 0) {\n+      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n+    }\n+    if (offs + len \u003e dest.length) {\n+      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n+          + len + \") \u003e dest.length(\" + dest.length + \").\");\n+    }\n+    if (this.in \u003d\u003d null) {\n+      throw new IOException(\"stream closed\");\n+    }\n+\n+    final int hi \u003d offs + len;\n+    int destOffs \u003d offs;\n+    for (int b; (destOffs \u003c hi) \u0026\u0026 ((b \u003d read0()) \u003e\u003d 0);) {\n+      dest[destOffs++] \u003d (byte) b;\n+    }\n+\n+    return (destOffs \u003d\u003d offs) ? -1 : (destOffs - offs);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(final byte[] dest, final int offs, final int len)\n      throws IOException {\n    if (offs \u003c 0) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") \u003c 0.\");\n    }\n    if (len \u003c 0) {\n      throw new IndexOutOfBoundsException(\"len(\" + len + \") \u003c 0.\");\n    }\n    if (offs + len \u003e dest.length) {\n      throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n          + len + \") \u003e dest.length(\" + dest.length + \").\");\n    }\n    if (this.in \u003d\u003d null) {\n      throw new IOException(\"stream closed\");\n    }\n\n    final int hi \u003d offs + len;\n    int destOffs \u003d offs;\n    for (int b; (destOffs \u003c hi) \u0026\u0026 ((b \u003d read0()) \u003e\u003d 0);) {\n      dest[destOffs++] \u003d (byte) b;\n    }\n\n    return (destOffs \u003d\u003d offs) ? -1 : (destOffs - offs);\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
    }
  }
}