{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GaloisField.java",
  "functionName": "solveVandermondeSystem",
  "functionId": "solveVandermondeSystem___x-int[]__y-ByteBuffer[]__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GaloisField.java",
  "functionStartLine": 273,
  "functionEndLine": 304,
  "numCommitsSeen": 8,
  "timeTaken": 1350,
  "changeHistory": [
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
    "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf"
  ],
  "changeHistoryShort": {
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": "Ymultichange(Yparameterchange,Ybodychange)",
    "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.\n",
          "commitDate": "26/05/15 12:02 PM",
          "commitName": "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "26/05/15 11:07 AM",
          "commitNameOld": "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf",
          "commitAuthorOld": "drankye",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 111,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,32 @@\n-  public void solveVandermondeSystem(int[] x, ByteBuffer[] y,\n-                                     int len, int dataLen) {\n+  public void solveVandermondeSystem(int[] x, ByteBuffer[] y, int len) {\n+    ByteBuffer p;\n+    int idx1, idx2;\n     for (int i \u003d 0; i \u003c len - 1; i++) {\n       for (int j \u003d len - 1; j \u003e i; j--) {\n-        for (int k \u003d 0; k \u003c dataLen; k++) {\n-          y[j].put(k, (byte) (y[j].get(k) ^ mulTable[x[i]][y[j - 1].get(k) \u0026\n+        p \u003d y[j];\n+        for (idx1 \u003d p.position(), idx2 \u003d y[j-1].position();\n+             idx1 \u003c p.limit(); idx1++, idx2++) {\n+          p.put(idx1, (byte) (p.get(idx1) ^ mulTable[x[i]][y[j-1].get(idx2) \u0026\n               0x000000FF]));\n         }\n       }\n     }\n+\n     for (int i \u003d len - 1; i \u003e\u003d 0; i--) {\n       for (int j \u003d i + 1; j \u003c len; j++) {\n-        for (int k \u003d 0; k \u003c dataLen; k++) {\n-          y[j].put(k, (byte) (divTable[y[j].get(k) \u0026 0x000000FF][x[j] ^\n-              x[j - i - 1]]));\n+        p \u003d y[j];\n+        for (idx1 \u003d p.position(); idx1 \u003c p.limit(); idx1++) {\n+          p.put(idx1, (byte) (divTable[p.get(idx1) \u0026\n+              0x000000FF][x[j] ^ x[j - i - 1]]));\n         }\n       }\n+\n       for (int j \u003d i; j \u003c len - 1; j++) {\n-        for (int k \u003d 0; k \u003c dataLen; k++) {\n-          y[j].put(k, (byte) (y[j].get(k) ^ y[j + 1].get(k)));\n+        p \u003d y[j];\n+        for (idx1 \u003d p.position(), idx2 \u003d y[j+1].position();\n+             idx1 \u003c p.limit(); idx1++, idx2++) {\n+          p.put(idx1, (byte) (p.get(idx1) ^ y[j+1].get(idx2)));\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void solveVandermondeSystem(int[] x, ByteBuffer[] y, int len) {\n    ByteBuffer p;\n    int idx1, idx2;\n    for (int i \u003d 0; i \u003c len - 1; i++) {\n      for (int j \u003d len - 1; j \u003e i; j--) {\n        p \u003d y[j];\n        for (idx1 \u003d p.position(), idx2 \u003d y[j-1].position();\n             idx1 \u003c p.limit(); idx1++, idx2++) {\n          p.put(idx1, (byte) (p.get(idx1) ^ mulTable[x[i]][y[j-1].get(idx2) \u0026\n              0x000000FF]));\n        }\n      }\n    }\n\n    for (int i \u003d len - 1; i \u003e\u003d 0; i--) {\n      for (int j \u003d i + 1; j \u003c len; j++) {\n        p \u003d y[j];\n        for (idx1 \u003d p.position(); idx1 \u003c p.limit(); idx1++) {\n          p.put(idx1, (byte) (divTable[p.get(idx1) \u0026\n              0x000000FF][x[j] ^ x[j - i - 1]]));\n        }\n      }\n\n      for (int j \u003d i; j \u003c len - 1; j++) {\n        p \u003d y[j];\n        for (idx1 \u003d p.position(), idx2 \u003d y[j+1].position();\n             idx1 \u003c p.limit(); idx1++, idx2++) {\n          p.put(idx1, (byte) (p.get(idx1) ^ y[j+1].get(idx2)));\n        }\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GaloisField.java",
          "extendedDetails": {
            "oldValue": "[x-int[], y-ByteBuffer[], len-int, dataLen-int]",
            "newValue": "[x-int[], y-ByteBuffer[], len-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.\n",
          "commitDate": "26/05/15 12:02 PM",
          "commitName": "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "26/05/15 11:07 AM",
          "commitNameOld": "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf",
          "commitAuthorOld": "drankye",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 111,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,32 @@\n-  public void solveVandermondeSystem(int[] x, ByteBuffer[] y,\n-                                     int len, int dataLen) {\n+  public void solveVandermondeSystem(int[] x, ByteBuffer[] y, int len) {\n+    ByteBuffer p;\n+    int idx1, idx2;\n     for (int i \u003d 0; i \u003c len - 1; i++) {\n       for (int j \u003d len - 1; j \u003e i; j--) {\n-        for (int k \u003d 0; k \u003c dataLen; k++) {\n-          y[j].put(k, (byte) (y[j].get(k) ^ mulTable[x[i]][y[j - 1].get(k) \u0026\n+        p \u003d y[j];\n+        for (idx1 \u003d p.position(), idx2 \u003d y[j-1].position();\n+             idx1 \u003c p.limit(); idx1++, idx2++) {\n+          p.put(idx1, (byte) (p.get(idx1) ^ mulTable[x[i]][y[j-1].get(idx2) \u0026\n               0x000000FF]));\n         }\n       }\n     }\n+\n     for (int i \u003d len - 1; i \u003e\u003d 0; i--) {\n       for (int j \u003d i + 1; j \u003c len; j++) {\n-        for (int k \u003d 0; k \u003c dataLen; k++) {\n-          y[j].put(k, (byte) (divTable[y[j].get(k) \u0026 0x000000FF][x[j] ^\n-              x[j - i - 1]]));\n+        p \u003d y[j];\n+        for (idx1 \u003d p.position(); idx1 \u003c p.limit(); idx1++) {\n+          p.put(idx1, (byte) (divTable[p.get(idx1) \u0026\n+              0x000000FF][x[j] ^ x[j - i - 1]]));\n         }\n       }\n+\n       for (int j \u003d i; j \u003c len - 1; j++) {\n-        for (int k \u003d 0; k \u003c dataLen; k++) {\n-          y[j].put(k, (byte) (y[j].get(k) ^ y[j + 1].get(k)));\n+        p \u003d y[j];\n+        for (idx1 \u003d p.position(), idx2 \u003d y[j+1].position();\n+             idx1 \u003c p.limit(); idx1++, idx2++) {\n+          p.put(idx1, (byte) (p.get(idx1) ^ y[j+1].get(idx2)));\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void solveVandermondeSystem(int[] x, ByteBuffer[] y, int len) {\n    ByteBuffer p;\n    int idx1, idx2;\n    for (int i \u003d 0; i \u003c len - 1; i++) {\n      for (int j \u003d len - 1; j \u003e i; j--) {\n        p \u003d y[j];\n        for (idx1 \u003d p.position(), idx2 \u003d y[j-1].position();\n             idx1 \u003c p.limit(); idx1++, idx2++) {\n          p.put(idx1, (byte) (p.get(idx1) ^ mulTable[x[i]][y[j-1].get(idx2) \u0026\n              0x000000FF]));\n        }\n      }\n    }\n\n    for (int i \u003d len - 1; i \u003e\u003d 0; i--) {\n      for (int j \u003d i + 1; j \u003c len; j++) {\n        p \u003d y[j];\n        for (idx1 \u003d p.position(); idx1 \u003c p.limit(); idx1++) {\n          p.put(idx1, (byte) (divTable[p.get(idx1) \u0026\n              0x000000FF][x[j] ^ x[j - i - 1]]));\n        }\n      }\n\n      for (int j \u003d i; j \u003c len - 1; j++) {\n        p \u003d y[j];\n        for (idx1 \u003d p.position(), idx2 \u003d y[j+1].position();\n             idx1 \u003c p.limit(); idx1++, idx2++) {\n          p.put(idx1, (byte) (p.get(idx1) ^ y[j+1].get(idx2)));\n        }\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GaloisField.java",
          "extendedDetails": {}
        }
      ]
    },
    "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11542. Raw Reed-Solomon coder in pure Java. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf",
      "commitAuthor": "drankye",
      "diff": "@@ -0,0 +1,24 @@\n+  public void solveVandermondeSystem(int[] x, ByteBuffer[] y,\n+                                     int len, int dataLen) {\n+    for (int i \u003d 0; i \u003c len - 1; i++) {\n+      for (int j \u003d len - 1; j \u003e i; j--) {\n+        for (int k \u003d 0; k \u003c dataLen; k++) {\n+          y[j].put(k, (byte) (y[j].get(k) ^ mulTable[x[i]][y[j - 1].get(k) \u0026\n+              0x000000FF]));\n+        }\n+      }\n+    }\n+    for (int i \u003d len - 1; i \u003e\u003d 0; i--) {\n+      for (int j \u003d i + 1; j \u003c len; j++) {\n+        for (int k \u003d 0; k \u003c dataLen; k++) {\n+          y[j].put(k, (byte) (divTable[y[j].get(k) \u0026 0x000000FF][x[j] ^\n+              x[j - i - 1]]));\n+        }\n+      }\n+      for (int j \u003d i; j \u003c len - 1; j++) {\n+        for (int k \u003d 0; k \u003c dataLen; k++) {\n+          y[j].put(k, (byte) (y[j].get(k) ^ y[j + 1].get(k)));\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void solveVandermondeSystem(int[] x, ByteBuffer[] y,\n                                     int len, int dataLen) {\n    for (int i \u003d 0; i \u003c len - 1; i++) {\n      for (int j \u003d len - 1; j \u003e i; j--) {\n        for (int k \u003d 0; k \u003c dataLen; k++) {\n          y[j].put(k, (byte) (y[j].get(k) ^ mulTable[x[i]][y[j - 1].get(k) \u0026\n              0x000000FF]));\n        }\n      }\n    }\n    for (int i \u003d len - 1; i \u003e\u003d 0; i--) {\n      for (int j \u003d i + 1; j \u003c len; j++) {\n        for (int k \u003d 0; k \u003c dataLen; k++) {\n          y[j].put(k, (byte) (divTable[y[j].get(k) \u0026 0x000000FF][x[j] ^\n              x[j - i - 1]]));\n        }\n      }\n      for (int j \u003d i; j \u003c len - 1; j++) {\n        for (int k \u003d 0; k \u003c dataLen; k++) {\n          y[j].put(k, (byte) (y[j].get(k) ^ y[j + 1].get(k)));\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GaloisField.java"
    }
  }
}