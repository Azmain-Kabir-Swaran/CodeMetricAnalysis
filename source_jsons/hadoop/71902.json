{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSAudit.java",
  "functionName": "op",
  "functionId": "op___opStatus-OpStatus(modifiers-final)__op-Object(modifiers-final)__ugi-UserGroupInformation(modifiers-final)__key-String(modifiers-final)__remoteHost-String(modifiers-final)__extraMsg-String(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
  "functionStartLine": 191,
  "functionEndLine": 223,
  "numCommitsSeen": 26,
  "timeTaken": 2971,
  "changeHistory": [
    "be529dade182dd2f3718fc52133f43e83dce191f",
    "3476156807733505746951f0c9346592742bbbb2",
    "021ae471153ce2566924b0f6d29809669074c06d",
    "bda9c584c828fdd18e9c066747d58dbf751a585d",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "be529dade182dd2f3718fc52133f43e83dce191f": "Yparameterchange",
    "3476156807733505746951f0c9346592742bbbb2": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "021ae471153ce2566924b0f6d29809669074c06d": "Ymultichange(Yparameterchange,Ybodychange)",
    "bda9c584c828fdd18e9c066747d58dbf751a585d": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Yparametermetachange)",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "be529dade182dd2f3718fc52133f43e83dce191f": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13903. Improvements to KMS logging to help debug authorization errors. (Tristan Stevens via asuresh)\n",
      "commitDate": "11/01/17 12:26 AM",
      "commitName": "be529dade182dd2f3718fc52133f43e83dce191f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "06/12/16 12:04 PM",
      "commitNameOld": "79d90b810c14d5e3abab75235f587663834ce36c",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 35.52,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n-  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n+  private void op(final OpStatus opStatus, final Object op,\n       final UserGroupInformation ugi, final String key, final String remoteHost,\n       final String extraMsg) {\n     final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n     if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n         \u0026\u0026 (op !\u003d null)\n         \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n       String cacheKey \u003d createCacheKey(user, key, op);\n       if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n         cache.invalidate(cacheKey);\n         logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n       } else {\n         try {\n           AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n             @Override\n             public AuditEvent call() throws Exception {\n               return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n             }\n           });\n           // Log first access (initialized as -1 so\n           // incrementAndGet() \u003d\u003d 0 implies first access)\n           if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n             event.getAccessCount().incrementAndGet();\n             logEvent(opStatus, event);\n           }\n         } catch (ExecutionException ex) {\n           throw new RuntimeException(ex);\n         }\n       }\n     } else {\n       logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void op(final OpStatus opStatus, final Object op,\n      final UserGroupInformation ugi, final String key, final String remoteHost,\n      final String extraMsg) {\n    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 (op !\u003d null)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(opStatus, event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
      "extendedDetails": {
        "oldValue": "[opStatus-OpStatus(modifiers-final), op-KMS.KMSOp(modifiers-final), ugi-UserGroupInformation(modifiers-final), key-String(modifiers-final), remoteHost-String(modifiers-final), extraMsg-String(modifiers-final)]",
        "newValue": "[opStatus-OpStatus(modifiers-final), op-Object(modifiers-final), ugi-UserGroupInformation(modifiers-final), key-String(modifiers-final), remoteHost-String(modifiers-final), extraMsg-String(modifiers-final)]"
      }
    },
    "3476156807733505746951f0c9346592742bbbb2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-13396. Allow pluggable audit loggers in KMS. Contributed by Xiao Chen\n",
      "commitDate": "24/08/16 10:14 AM",
      "commitName": "3476156807733505746951f0c9346592742bbbb2",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13396. Allow pluggable audit loggers in KMS. Contributed by Xiao Chen\n",
          "commitDate": "24/08/16 10:14 AM",
          "commitName": "3476156807733505746951f0c9346592742bbbb2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/08/16 3:11 PM",
          "commitNameOld": "070548943a16370a74277d1b1d10b713e2ca81d0",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 15.79,
          "commitsBetweenForRepo": 116,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,33 @@\n-  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n-      final String key, final String extraMsg) {\n+  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n+      final UserGroupInformation ugi, final String key, final String remoteHost,\n+      final String extraMsg) {\n+    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n     if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n         \u0026\u0026 (op !\u003d null)\n         \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n       String cacheKey \u003d createCacheKey(user, key, op);\n       if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n         cache.invalidate(cacheKey);\n-        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n-            extraMsg);\n+        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n       } else {\n         try {\n           AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n             @Override\n             public AuditEvent call() throws Exception {\n-              return new AuditEvent(key, user, op, extraMsg);\n+              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n             }\n           });\n           // Log first access (initialized as -1 so\n           // incrementAndGet() \u003d\u003d 0 implies first access)\n           if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n             event.getAccessCount().incrementAndGet();\n-            logEvent(event);\n+            logEvent(opStatus, event);\n           }\n         } catch (ExecutionException ex) {\n           throw new RuntimeException(ex);\n         }\n       }\n     } else {\n-      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n-      if (op !\u003d null) {\n-        kvs.add(\"op\u003d\" + op);\n-      }\n-      if (!Strings.isNullOrEmpty(key)) {\n-        kvs.add(\"key\u003d\" + key);\n-      }\n-      if (!Strings.isNullOrEmpty(user)) {\n-        kvs.add(\"user\u003d\" + user);\n-      }\n-      if (kvs.size() \u003d\u003d 0) {\n-        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n-      } else {\n-        String join \u003d Joiner.on(\", \").join(kvs);\n-        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n-      }\n+      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n      final UserGroupInformation ugi, final String key, final String remoteHost,\n      final String extraMsg) {\n    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 (op !\u003d null)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(opStatus, event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {
            "oldValue": "[opStatus-OpStatus, op-KMS.KMSOp(modifiers-final), user-String(modifiers-final), key-String(modifiers-final), extraMsg-String(modifiers-final)]",
            "newValue": "[opStatus-OpStatus(modifiers-final), op-KMS.KMSOp(modifiers-final), ugi-UserGroupInformation(modifiers-final), key-String(modifiers-final), remoteHost-String(modifiers-final), extraMsg-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13396. Allow pluggable audit loggers in KMS. Contributed by Xiao Chen\n",
          "commitDate": "24/08/16 10:14 AM",
          "commitName": "3476156807733505746951f0c9346592742bbbb2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/08/16 3:11 PM",
          "commitNameOld": "070548943a16370a74277d1b1d10b713e2ca81d0",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 15.79,
          "commitsBetweenForRepo": 116,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,33 @@\n-  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n-      final String key, final String extraMsg) {\n+  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n+      final UserGroupInformation ugi, final String key, final String remoteHost,\n+      final String extraMsg) {\n+    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n     if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n         \u0026\u0026 (op !\u003d null)\n         \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n       String cacheKey \u003d createCacheKey(user, key, op);\n       if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n         cache.invalidate(cacheKey);\n-        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n-            extraMsg);\n+        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n       } else {\n         try {\n           AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n             @Override\n             public AuditEvent call() throws Exception {\n-              return new AuditEvent(key, user, op, extraMsg);\n+              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n             }\n           });\n           // Log first access (initialized as -1 so\n           // incrementAndGet() \u003d\u003d 0 implies first access)\n           if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n             event.getAccessCount().incrementAndGet();\n-            logEvent(event);\n+            logEvent(opStatus, event);\n           }\n         } catch (ExecutionException ex) {\n           throw new RuntimeException(ex);\n         }\n       }\n     } else {\n-      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n-      if (op !\u003d null) {\n-        kvs.add(\"op\u003d\" + op);\n-      }\n-      if (!Strings.isNullOrEmpty(key)) {\n-        kvs.add(\"key\u003d\" + key);\n-      }\n-      if (!Strings.isNullOrEmpty(user)) {\n-        kvs.add(\"user\u003d\" + user);\n-      }\n-      if (kvs.size() \u003d\u003d 0) {\n-        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n-      } else {\n-        String join \u003d Joiner.on(\", \").join(kvs);\n-        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n-      }\n+      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n      final UserGroupInformation ugi, final String key, final String remoteHost,\n      final String extraMsg) {\n    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 (op !\u003d null)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(opStatus, event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-13396. Allow pluggable audit loggers in KMS. Contributed by Xiao Chen\n",
          "commitDate": "24/08/16 10:14 AM",
          "commitName": "3476156807733505746951f0c9346592742bbbb2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/08/16 3:11 PM",
          "commitNameOld": "070548943a16370a74277d1b1d10b713e2ca81d0",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 15.79,
          "commitsBetweenForRepo": 116,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,33 @@\n-  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n-      final String key, final String extraMsg) {\n+  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n+      final UserGroupInformation ugi, final String key, final String remoteHost,\n+      final String extraMsg) {\n+    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n     if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n         \u0026\u0026 (op !\u003d null)\n         \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n       String cacheKey \u003d createCacheKey(user, key, op);\n       if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n         cache.invalidate(cacheKey);\n-        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n-            extraMsg);\n+        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n       } else {\n         try {\n           AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n             @Override\n             public AuditEvent call() throws Exception {\n-              return new AuditEvent(key, user, op, extraMsg);\n+              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n             }\n           });\n           // Log first access (initialized as -1 so\n           // incrementAndGet() \u003d\u003d 0 implies first access)\n           if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n             event.getAccessCount().incrementAndGet();\n-            logEvent(event);\n+            logEvent(opStatus, event);\n           }\n         } catch (ExecutionException ex) {\n           throw new RuntimeException(ex);\n         }\n       }\n     } else {\n-      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n-      if (op !\u003d null) {\n-        kvs.add(\"op\u003d\" + op);\n-      }\n-      if (!Strings.isNullOrEmpty(key)) {\n-        kvs.add(\"key\u003d\" + key);\n-      }\n-      if (!Strings.isNullOrEmpty(user)) {\n-        kvs.add(\"user\u003d\" + user);\n-      }\n-      if (kvs.size() \u003d\u003d 0) {\n-        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n-      } else {\n-        String join \u003d Joiner.on(\", \").join(kvs);\n-        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n-      }\n+      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(final OpStatus opStatus, final KMS.KMSOp op,\n      final UserGroupInformation ugi, final String key, final String remoteHost,\n      final String extraMsg) {\n    final String user \u003d ugi \u003d\u003d null ? null: ugi.getShortUserName();\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 (op !\u003d null)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(opStatus, event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {
            "oldValue": "[opStatus-OpStatus, op-KMS.KMSOp(modifiers-final), user-String(modifiers-final), key-String(modifiers-final), extraMsg-String(modifiers-final)]",
            "newValue": "[opStatus-OpStatus(modifiers-final), op-KMS.KMSOp(modifiers-final), ugi-UserGroupInformation(modifiers-final), key-String(modifiers-final), remoteHost-String(modifiers-final), extraMsg-String(modifiers-final)]"
          }
        }
      ]
    },
    "021ae471153ce2566924b0f6d29809669074c06d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10862. Miscellaneous trivial corrections to KMS classes. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616903 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 4:10 PM",
      "commitName": "021ae471153ce2566924b0f6d29809669074c06d",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10862. Miscellaneous trivial corrections to KMS classes. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616903 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 4:10 PM",
          "commitName": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "30/07/14 10:54 AM",
          "commitNameOld": "bda9c584c828fdd18e9c066747d58dbf751a585d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-  private void op(OpStatus opStatus, final String op, final String user,\n+  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n       final String key, final String extraMsg) {\n     if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n-        \u0026\u0026 !Strings.isNullOrEmpty(op)\n+        \u0026\u0026 (op !\u003d null)\n         \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n       String cacheKey \u003d createCacheKey(user, key, op);\n       if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n         cache.invalidate(cacheKey);\n         AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n             extraMsg);\n       } else {\n         try {\n           AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n             @Override\n             public AuditEvent call() throws Exception {\n               return new AuditEvent(key, user, op, extraMsg);\n             }\n           });\n           // Log first access (initialized as -1 so\n           // incrementAndGet() \u003d\u003d 0 implies first access)\n           if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n             event.getAccessCount().incrementAndGet();\n             logEvent(event);\n           }\n         } catch (ExecutionException ex) {\n           throw new RuntimeException(ex);\n         }\n       }\n     } else {\n       List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n-      if (!Strings.isNullOrEmpty(op)) {\n+      if (op !\u003d null) {\n         kvs.add(\"op\u003d\" + op);\n       }\n       if (!Strings.isNullOrEmpty(key)) {\n         kvs.add(\"key\u003d\" + key);\n       }\n       if (!Strings.isNullOrEmpty(user)) {\n         kvs.add(\"user\u003d\" + user);\n       }\n       if (kvs.size() \u003d\u003d 0) {\n         AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n       } else {\n         String join \u003d Joiner.on(\", \").join(kvs);\n         AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n      final String key, final String extraMsg) {\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 (op !\u003d null)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n            extraMsg);\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(key, user, op, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n      if (op !\u003d null) {\n        kvs.add(\"op\u003d\" + op);\n      }\n      if (!Strings.isNullOrEmpty(key)) {\n        kvs.add(\"key\u003d\" + key);\n      }\n      if (!Strings.isNullOrEmpty(user)) {\n        kvs.add(\"user\u003d\" + user);\n      }\n      if (kvs.size() \u003d\u003d 0) {\n        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n      } else {\n        String join \u003d Joiner.on(\", \").join(kvs);\n        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {
            "oldValue": "[opStatus-OpStatus, op-String(modifiers-final), user-String(modifiers-final), key-String(modifiers-final), extraMsg-String(modifiers-final)]",
            "newValue": "[opStatus-OpStatus, op-KMS.KMSOp(modifiers-final), user-String(modifiers-final), key-String(modifiers-final), extraMsg-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10862. Miscellaneous trivial corrections to KMS classes. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616903 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 4:10 PM",
          "commitName": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "30/07/14 10:54 AM",
          "commitNameOld": "bda9c584c828fdd18e9c066747d58dbf751a585d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-  private void op(OpStatus opStatus, final String op, final String user,\n+  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n       final String key, final String extraMsg) {\n     if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n-        \u0026\u0026 !Strings.isNullOrEmpty(op)\n+        \u0026\u0026 (op !\u003d null)\n         \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n       String cacheKey \u003d createCacheKey(user, key, op);\n       if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n         cache.invalidate(cacheKey);\n         AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n             extraMsg);\n       } else {\n         try {\n           AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n             @Override\n             public AuditEvent call() throws Exception {\n               return new AuditEvent(key, user, op, extraMsg);\n             }\n           });\n           // Log first access (initialized as -1 so\n           // incrementAndGet() \u003d\u003d 0 implies first access)\n           if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n             event.getAccessCount().incrementAndGet();\n             logEvent(event);\n           }\n         } catch (ExecutionException ex) {\n           throw new RuntimeException(ex);\n         }\n       }\n     } else {\n       List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n-      if (!Strings.isNullOrEmpty(op)) {\n+      if (op !\u003d null) {\n         kvs.add(\"op\u003d\" + op);\n       }\n       if (!Strings.isNullOrEmpty(key)) {\n         kvs.add(\"key\u003d\" + key);\n       }\n       if (!Strings.isNullOrEmpty(user)) {\n         kvs.add(\"user\u003d\" + user);\n       }\n       if (kvs.size() \u003d\u003d 0) {\n         AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n       } else {\n         String join \u003d Joiner.on(\", \").join(kvs);\n         AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,\n      final String key, final String extraMsg) {\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 (op !\u003d null)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n            extraMsg);\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(key, user, op, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n      if (op !\u003d null) {\n        kvs.add(\"op\u003d\" + op);\n      }\n      if (!Strings.isNullOrEmpty(key)) {\n        kvs.add(\"key\u003d\" + key);\n      }\n      if (!Strings.isNullOrEmpty(user)) {\n        kvs.add(\"user\u003d\" + user);\n      }\n      if (kvs.size() \u003d\u003d 0) {\n        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n      } else {\n        String join \u003d Joiner.on(\", \").join(kvs);\n        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {}
        }
      ]
    },
    "bda9c584c828fdd18e9c066747d58dbf751a585d": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 10:54 AM",
      "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/07/14 10:54 AM",
          "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "05/05/14 2:43 PM",
          "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 85.84,
          "commitsBetweenForRepo": 553,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,47 @@\n-  private static void op(String status, String op, Principal user, String key,\n-      String extraMsg) {\n-    AUDIT_LOG.info(\"Status:{} User:{} Op:{} Name:{}{}\", status, user.getName(),\n-        op, key, extraMsg);\n+  private void op(OpStatus opStatus, final String op, final String user,\n+      final String key, final String extraMsg) {\n+    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n+        \u0026\u0026 !Strings.isNullOrEmpty(op)\n+        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n+      String cacheKey \u003d createCacheKey(user, key, op);\n+      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n+        cache.invalidate(cacheKey);\n+        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n+            extraMsg);\n+      } else {\n+        try {\n+          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n+            @Override\n+            public AuditEvent call() throws Exception {\n+              return new AuditEvent(key, user, op, extraMsg);\n+            }\n+          });\n+          // Log first access (initialized as -1 so\n+          // incrementAndGet() \u003d\u003d 0 implies first access)\n+          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n+            event.getAccessCount().incrementAndGet();\n+            logEvent(event);\n+          }\n+        } catch (ExecutionException ex) {\n+          throw new RuntimeException(ex);\n+        }\n+      }\n+    } else {\n+      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n+      if (!Strings.isNullOrEmpty(op)) {\n+        kvs.add(\"op\u003d\" + op);\n+      }\n+      if (!Strings.isNullOrEmpty(key)) {\n+        kvs.add(\"key\u003d\" + key);\n+      }\n+      if (!Strings.isNullOrEmpty(user)) {\n+        kvs.add(\"user\u003d\" + user);\n+      }\n+      if (kvs.size() \u003d\u003d 0) {\n+        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n+      } else {\n+        String join \u003d Joiner.on(\", \").join(kvs);\n+        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(OpStatus opStatus, final String op, final String user,\n      final String key, final String extraMsg) {\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 !Strings.isNullOrEmpty(op)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n            extraMsg);\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(key, user, op, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n      if (!Strings.isNullOrEmpty(op)) {\n        kvs.add(\"op\u003d\" + op);\n      }\n      if (!Strings.isNullOrEmpty(key)) {\n        kvs.add(\"key\u003d\" + key);\n      }\n      if (!Strings.isNullOrEmpty(user)) {\n        kvs.add(\"user\u003d\" + user);\n      }\n      if (kvs.size() \u003d\u003d 0) {\n        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n      } else {\n        String join \u003d Joiner.on(\", \").join(kvs);\n        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {
            "oldValue": "[status-String, op-String, user-Principal, key-String, extraMsg-String]",
            "newValue": "[opStatus-OpStatus, op-String(modifiers-final), user-String(modifiers-final), key-String(modifiers-final), extraMsg-String(modifiers-final)]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/07/14 10:54 AM",
          "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "05/05/14 2:43 PM",
          "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 85.84,
          "commitsBetweenForRepo": 553,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,47 @@\n-  private static void op(String status, String op, Principal user, String key,\n-      String extraMsg) {\n-    AUDIT_LOG.info(\"Status:{} User:{} Op:{} Name:{}{}\", status, user.getName(),\n-        op, key, extraMsg);\n+  private void op(OpStatus opStatus, final String op, final String user,\n+      final String key, final String extraMsg) {\n+    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n+        \u0026\u0026 !Strings.isNullOrEmpty(op)\n+        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n+      String cacheKey \u003d createCacheKey(user, key, op);\n+      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n+        cache.invalidate(cacheKey);\n+        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n+            extraMsg);\n+      } else {\n+        try {\n+          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n+            @Override\n+            public AuditEvent call() throws Exception {\n+              return new AuditEvent(key, user, op, extraMsg);\n+            }\n+          });\n+          // Log first access (initialized as -1 so\n+          // incrementAndGet() \u003d\u003d 0 implies first access)\n+          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n+            event.getAccessCount().incrementAndGet();\n+            logEvent(event);\n+          }\n+        } catch (ExecutionException ex) {\n+          throw new RuntimeException(ex);\n+        }\n+      }\n+    } else {\n+      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n+      if (!Strings.isNullOrEmpty(op)) {\n+        kvs.add(\"op\u003d\" + op);\n+      }\n+      if (!Strings.isNullOrEmpty(key)) {\n+        kvs.add(\"key\u003d\" + key);\n+      }\n+      if (!Strings.isNullOrEmpty(user)) {\n+        kvs.add(\"user\u003d\" + user);\n+      }\n+      if (kvs.size() \u003d\u003d 0) {\n+        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n+      } else {\n+        String join \u003d Joiner.on(\", \").join(kvs);\n+        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(OpStatus opStatus, final String op, final String user,\n      final String key, final String extraMsg) {\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 !Strings.isNullOrEmpty(op)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n            extraMsg);\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(key, user, op, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n      if (!Strings.isNullOrEmpty(op)) {\n        kvs.add(\"op\u003d\" + op);\n      }\n      if (!Strings.isNullOrEmpty(key)) {\n        kvs.add(\"key\u003d\" + key);\n      }\n      if (!Strings.isNullOrEmpty(user)) {\n        kvs.add(\"user\u003d\" + user);\n      }\n      if (kvs.size() \u003d\u003d 0) {\n        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n      } else {\n        String join \u003d Joiner.on(\", \").join(kvs);\n        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/07/14 10:54 AM",
          "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "05/05/14 2:43 PM",
          "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 85.84,
          "commitsBetweenForRepo": 553,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,47 @@\n-  private static void op(String status, String op, Principal user, String key,\n-      String extraMsg) {\n-    AUDIT_LOG.info(\"Status:{} User:{} Op:{} Name:{}{}\", status, user.getName(),\n-        op, key, extraMsg);\n+  private void op(OpStatus opStatus, final String op, final String user,\n+      final String key, final String extraMsg) {\n+    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n+        \u0026\u0026 !Strings.isNullOrEmpty(op)\n+        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n+      String cacheKey \u003d createCacheKey(user, key, op);\n+      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n+        cache.invalidate(cacheKey);\n+        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n+            extraMsg);\n+      } else {\n+        try {\n+          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n+            @Override\n+            public AuditEvent call() throws Exception {\n+              return new AuditEvent(key, user, op, extraMsg);\n+            }\n+          });\n+          // Log first access (initialized as -1 so\n+          // incrementAndGet() \u003d\u003d 0 implies first access)\n+          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n+            event.getAccessCount().incrementAndGet();\n+            logEvent(event);\n+          }\n+        } catch (ExecutionException ex) {\n+          throw new RuntimeException(ex);\n+        }\n+      }\n+    } else {\n+      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n+      if (!Strings.isNullOrEmpty(op)) {\n+        kvs.add(\"op\u003d\" + op);\n+      }\n+      if (!Strings.isNullOrEmpty(key)) {\n+        kvs.add(\"key\u003d\" + key);\n+      }\n+      if (!Strings.isNullOrEmpty(user)) {\n+        kvs.add(\"user\u003d\" + user);\n+      }\n+      if (kvs.size() \u003d\u003d 0) {\n+        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n+      } else {\n+        String join \u003d Joiner.on(\", \").join(kvs);\n+        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(OpStatus opStatus, final String op, final String user,\n      final String key, final String extraMsg) {\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 !Strings.isNullOrEmpty(op)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n            extraMsg);\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(key, user, op, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n      if (!Strings.isNullOrEmpty(op)) {\n        kvs.add(\"op\u003d\" + op);\n      }\n      if (!Strings.isNullOrEmpty(key)) {\n        kvs.add(\"key\u003d\" + key);\n      }\n      if (!Strings.isNullOrEmpty(user)) {\n        kvs.add(\"user\u003d\" + user);\n      }\n      if (kvs.size() \u003d\u003d 0) {\n        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n      } else {\n        String join \u003d Joiner.on(\", \").join(kvs);\n        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/07/14 10:54 AM",
          "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "05/05/14 2:43 PM",
          "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 85.84,
          "commitsBetweenForRepo": 553,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,47 @@\n-  private static void op(String status, String op, Principal user, String key,\n-      String extraMsg) {\n-    AUDIT_LOG.info(\"Status:{} User:{} Op:{} Name:{}{}\", status, user.getName(),\n-        op, key, extraMsg);\n+  private void op(OpStatus opStatus, final String op, final String user,\n+      final String key, final String extraMsg) {\n+    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n+        \u0026\u0026 !Strings.isNullOrEmpty(op)\n+        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n+      String cacheKey \u003d createCacheKey(user, key, op);\n+      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n+        cache.invalidate(cacheKey);\n+        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n+            extraMsg);\n+      } else {\n+        try {\n+          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n+            @Override\n+            public AuditEvent call() throws Exception {\n+              return new AuditEvent(key, user, op, extraMsg);\n+            }\n+          });\n+          // Log first access (initialized as -1 so\n+          // incrementAndGet() \u003d\u003d 0 implies first access)\n+          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n+            event.getAccessCount().incrementAndGet();\n+            logEvent(event);\n+          }\n+        } catch (ExecutionException ex) {\n+          throw new RuntimeException(ex);\n+        }\n+      }\n+    } else {\n+      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n+      if (!Strings.isNullOrEmpty(op)) {\n+        kvs.add(\"op\u003d\" + op);\n+      }\n+      if (!Strings.isNullOrEmpty(key)) {\n+        kvs.add(\"key\u003d\" + key);\n+      }\n+      if (!Strings.isNullOrEmpty(user)) {\n+        kvs.add(\"user\u003d\" + user);\n+      }\n+      if (kvs.size() \u003d\u003d 0) {\n+        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n+      } else {\n+        String join \u003d Joiner.on(\", \").join(kvs);\n+        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void op(OpStatus opStatus, final String op, final String user,\n      final String key, final String extraMsg) {\n    if (!Strings.isNullOrEmpty(user) \u0026\u0026 !Strings.isNullOrEmpty(key)\n        \u0026\u0026 !Strings.isNullOrEmpty(op)\n        \u0026\u0026 AGGREGATE_OPS_WHITELIST.contains(op)) {\n      String cacheKey \u003d createCacheKey(user, key, op);\n      if (opStatus \u003d\u003d OpStatus.UNAUTHORIZED) {\n        cache.invalidate(cacheKey);\n        AUDIT_LOG.info(\"UNAUTHORIZED[op\u003d{}, key\u003d{}, user\u003d{}] {}\", op, key, user,\n            extraMsg);\n      } else {\n        try {\n          AuditEvent event \u003d cache.get(cacheKey, new Callable\u003cAuditEvent\u003e() {\n            @Override\n            public AuditEvent call() throws Exception {\n              return new AuditEvent(key, user, op, extraMsg);\n            }\n          });\n          // Log first access (initialized as -1 so\n          // incrementAndGet() \u003d\u003d 0 implies first access)\n          if (event.getAccessCount().incrementAndGet() \u003d\u003d 0) {\n            event.getAccessCount().incrementAndGet();\n            logEvent(event);\n          }\n        } catch (ExecutionException ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n    } else {\n      List\u003cString\u003e kvs \u003d new LinkedList\u003cString\u003e();\n      if (!Strings.isNullOrEmpty(op)) {\n        kvs.add(\"op\u003d\" + op);\n      }\n      if (!Strings.isNullOrEmpty(key)) {\n        kvs.add(\"key\u003d\" + key);\n      }\n      if (!Strings.isNullOrEmpty(user)) {\n        kvs.add(\"user\u003d\" + user);\n      }\n      if (kvs.size() \u003d\u003d 0) {\n        AUDIT_LOG.info(\"{} {}\", opStatus.toString(), extraMsg);\n      } else {\n        String join \u003d Joiner.on(\", \").join(kvs);\n        AUDIT_LOG.info(\"{}[{}] {}\", opStatus.toString(), join, extraMsg);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java",
          "extendedDetails": {
            "oldValue": "[status-String, op-String, user-Principal, key-String, extraMsg-String]",
            "newValue": "[opStatus-OpStatus, op-String(modifiers-final), user-String(modifiers-final), key-String(modifiers-final), extraMsg-String(modifiers-final)]"
          }
        }
      ]
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,5 @@\n+  private static void op(String status, String op, Principal user, String key,\n+      String extraMsg) {\n+    AUDIT_LOG.info(\"Status:{} User:{} Op:{} Name:{}{}\", status, user.getName(),\n+        op, key, extraMsg);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void op(String status, String op, Principal user, String key,\n      String extraMsg) {\n    AUDIT_LOG.info(\"Status:{} User:{} Op:{} Name:{}{}\", status, user.getName(),\n        op, key, extraMsg);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java"
    }
  }
}