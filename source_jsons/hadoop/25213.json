{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YARNRunner.java",
  "functionName": "createApplicationResource",
  "functionId": "createApplicationResource___fs-FileContext__p-Path__fileSymlink-String__type-LocalResourceType__viz-LocalResourceVisibility__uploadToSharedCache-Boolean",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
  "functionStartLine": 356,
  "functionEndLine": 386,
  "numCommitsSeen": 181,
  "timeTaken": 9830,
  "changeHistory": [
    "e46d5bb962b0c942f993afc505b165b1cd96e51b",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "dc33a0765cd27255021911c4abb435b5850387aa",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": "Ymultichange(Yparameterchange,Ybodychange)",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "dc33a0765cd27255021911c4abb435b5850387aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
      "commitDate": "12/10/17 10:59 AM",
      "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
      "commitAuthor": "Chris Trezzo",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
          "commitDate": "12/10/17 10:59 AM",
          "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "21/04/17 4:12 PM",
          "commitNameOld": "3721cfe1fbd98c5b6aa46aefdfcf62276c28c4a4",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 173.78,
          "commitsBetweenForRepo": 1195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,31 @@\n-  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n-      throws IOException {\n+  private LocalResource createApplicationResource(FileContext fs, Path p,\n+      String fileSymlink, LocalResourceType type, LocalResourceVisibility viz,\n+      Boolean uploadToSharedCache) throws IOException {\n     LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n     FileStatus rsrcStat \u003d fs.getFileStatus(p);\n-    rsrc.setResource(URL.fromPath(fs\n-        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n+    // We need to be careful when converting from path to URL to add a fragment\n+    // so that the symlink name when localized will be correct.\n+    Path qualifiedPath \u003d\n+        fs.getDefaultFileSystem().resolvePath(rsrcStat.getPath());\n+    URI uriWithFragment \u003d null;\n+    boolean useFragment \u003d fileSymlink !\u003d null \u0026\u0026 !fileSymlink.equals(\"\");\n+    try {\n+      if (useFragment) {\n+        uriWithFragment \u003d new URI(qualifiedPath.toUri() + \"#\" + fileSymlink);\n+      } else {\n+        uriWithFragment \u003d qualifiedPath.toUri();\n+      }\n+    } catch (URISyntaxException e) {\n+      throw new IOException(\n+          \"Error parsing local resource path.\"\n+              + \" Path was not able to be converted to a URI: \" + qualifiedPath,\n+          e);\n+    }\n+    rsrc.setResource(URL.fromURI(uriWithFragment));\n     rsrc.setSize(rsrcStat.getLen());\n     rsrc.setTimestamp(rsrcStat.getModificationTime());\n     rsrc.setType(type);\n-    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n+    rsrc.setVisibility(viz);\n+    rsrc.setShouldBeUploadedToSharedCache(uploadToSharedCache);\n     return rsrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p,\n      String fileSymlink, LocalResourceType type, LocalResourceVisibility viz,\n      Boolean uploadToSharedCache) throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    // We need to be careful when converting from path to URL to add a fragment\n    // so that the symlink name when localized will be correct.\n    Path qualifiedPath \u003d\n        fs.getDefaultFileSystem().resolvePath(rsrcStat.getPath());\n    URI uriWithFragment \u003d null;\n    boolean useFragment \u003d fileSymlink !\u003d null \u0026\u0026 !fileSymlink.equals(\"\");\n    try {\n      if (useFragment) {\n        uriWithFragment \u003d new URI(qualifiedPath.toUri() + \"#\" + fileSymlink);\n      } else {\n        uriWithFragment \u003d qualifiedPath.toUri();\n      }\n    } catch (URISyntaxException e) {\n      throw new IOException(\n          \"Error parsing local resource path.\"\n              + \" Path was not able to be converted to a URI: \" + qualifiedPath,\n          e);\n    }\n    rsrc.setResource(URL.fromURI(uriWithFragment));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(type);\n    rsrc.setVisibility(viz);\n    rsrc.setShouldBeUploadedToSharedCache(uploadToSharedCache);\n    return rsrc;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
          "extendedDetails": {
            "oldValue": "[fs-FileContext, p-Path, type-LocalResourceType]",
            "newValue": "[fs-FileContext, p-Path, fileSymlink-String, type-LocalResourceType, viz-LocalResourceVisibility, uploadToSharedCache-Boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
          "commitDate": "12/10/17 10:59 AM",
          "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "21/04/17 4:12 PM",
          "commitNameOld": "3721cfe1fbd98c5b6aa46aefdfcf62276c28c4a4",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 173.78,
          "commitsBetweenForRepo": 1195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,31 @@\n-  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n-      throws IOException {\n+  private LocalResource createApplicationResource(FileContext fs, Path p,\n+      String fileSymlink, LocalResourceType type, LocalResourceVisibility viz,\n+      Boolean uploadToSharedCache) throws IOException {\n     LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n     FileStatus rsrcStat \u003d fs.getFileStatus(p);\n-    rsrc.setResource(URL.fromPath(fs\n-        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n+    // We need to be careful when converting from path to URL to add a fragment\n+    // so that the symlink name when localized will be correct.\n+    Path qualifiedPath \u003d\n+        fs.getDefaultFileSystem().resolvePath(rsrcStat.getPath());\n+    URI uriWithFragment \u003d null;\n+    boolean useFragment \u003d fileSymlink !\u003d null \u0026\u0026 !fileSymlink.equals(\"\");\n+    try {\n+      if (useFragment) {\n+        uriWithFragment \u003d new URI(qualifiedPath.toUri() + \"#\" + fileSymlink);\n+      } else {\n+        uriWithFragment \u003d qualifiedPath.toUri();\n+      }\n+    } catch (URISyntaxException e) {\n+      throw new IOException(\n+          \"Error parsing local resource path.\"\n+              + \" Path was not able to be converted to a URI: \" + qualifiedPath,\n+          e);\n+    }\n+    rsrc.setResource(URL.fromURI(uriWithFragment));\n     rsrc.setSize(rsrcStat.getLen());\n     rsrc.setTimestamp(rsrcStat.getModificationTime());\n     rsrc.setType(type);\n-    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n+    rsrc.setVisibility(viz);\n+    rsrc.setShouldBeUploadedToSharedCache(uploadToSharedCache);\n     return rsrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p,\n      String fileSymlink, LocalResourceType type, LocalResourceVisibility viz,\n      Boolean uploadToSharedCache) throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    // We need to be careful when converting from path to URL to add a fragment\n    // so that the symlink name when localized will be correct.\n    Path qualifiedPath \u003d\n        fs.getDefaultFileSystem().resolvePath(rsrcStat.getPath());\n    URI uriWithFragment \u003d null;\n    boolean useFragment \u003d fileSymlink !\u003d null \u0026\u0026 !fileSymlink.equals(\"\");\n    try {\n      if (useFragment) {\n        uriWithFragment \u003d new URI(qualifiedPath.toUri() + \"#\" + fileSymlink);\n      } else {\n        uriWithFragment \u003d qualifiedPath.toUri();\n      }\n    } catch (URISyntaxException e) {\n      throw new IOException(\n          \"Error parsing local resource path.\"\n              + \" Path was not able to be converted to a URI: \" + qualifiedPath,\n          e);\n    }\n    rsrc.setResource(URL.fromURI(uriWithFragment));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(type);\n    rsrc.setVisibility(viz);\n    rsrc.setShouldBeUploadedToSharedCache(uploadToSharedCache);\n    return rsrc;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "01/02/16 8:05 AM",
      "commitNameOld": "59a212b6e1265adfa9b55c71b65a22157dfccf77",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 134.25,
      "commitsBetweenForRepo": 866,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n       throws IOException {\n     LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n     FileStatus rsrcStat \u003d fs.getFileStatus(p);\n-    rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n+    rsrc.setResource(URL.fromPath(fs\n         .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n     rsrc.setSize(rsrcStat.getLen());\n     rsrc.setTimestamp(rsrcStat.getModificationTime());\n     rsrc.setType(type);\n     rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n     return rsrc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n      throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    rsrc.setResource(URL.fromPath(fs\n        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(type);\n    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n    return rsrc;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "dc33a0765cd27255021911c4abb435b5850387aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4068. Jars in lib subdirectory of the submittable JAR are not added to the classpath (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376253 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/12 2:18 PM",
      "commitName": "dc33a0765cd27255021911c4abb435b5850387aa",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4068. Jars in lib subdirectory of the submittable JAR are not added to the classpath (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376253 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/08/12 2:18 PM",
          "commitName": "dc33a0765cd27255021911c4abb435b5850387aa",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/05/12 8:07 AM",
          "commitNameOld": "aa60da6c2ec049cc70897afee6c368cb70493773",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 106.26,
          "commitsBetweenForRepo": 559,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  private LocalResource createApplicationResource(FileContext fs, Path p)\n+  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n       throws IOException {\n     LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n     FileStatus rsrcStat \u003d fs.getFileStatus(p);\n     rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n         .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n     rsrc.setSize(rsrcStat.getLen());\n     rsrc.setTimestamp(rsrcStat.getModificationTime());\n-    rsrc.setType(LocalResourceType.FILE);\n+    rsrc.setType(type);\n     rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n     return rsrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n      throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(type);\n    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n    return rsrc;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
          "extendedDetails": {
            "oldValue": "[fs-FileContext, p-Path]",
            "newValue": "[fs-FileContext, p-Path, type-LocalResourceType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4068. Jars in lib subdirectory of the submittable JAR are not added to the classpath (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376253 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/08/12 2:18 PM",
          "commitName": "dc33a0765cd27255021911c4abb435b5850387aa",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/05/12 8:07 AM",
          "commitNameOld": "aa60da6c2ec049cc70897afee6c368cb70493773",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 106.26,
          "commitsBetweenForRepo": 559,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  private LocalResource createApplicationResource(FileContext fs, Path p)\n+  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n       throws IOException {\n     LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n     FileStatus rsrcStat \u003d fs.getFileStatus(p);\n     rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n         .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n     rsrc.setSize(rsrcStat.getLen());\n     rsrc.setTimestamp(rsrcStat.getModificationTime());\n-    rsrc.setType(LocalResourceType.FILE);\n+    rsrc.setType(type);\n     rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n     return rsrc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p, LocalResourceType type)\n      throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(type);\n    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n    return rsrc;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p)\n      throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(LocalResourceType.FILE);\n    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n    return rsrc;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,12 @@\n+  private LocalResource createApplicationResource(FileContext fs, Path p)\n+      throws IOException {\n+    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n+    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n+    rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n+        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n+    rsrc.setSize(rsrcStat.getLen());\n+    rsrc.setTimestamp(rsrcStat.getModificationTime());\n+    rsrc.setType(LocalResourceType.FILE);\n+    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n+    return rsrc;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalResource createApplicationResource(FileContext fs, Path p)\n      throws IOException {\n    LocalResource rsrc \u003d recordFactory.newRecordInstance(LocalResource.class);\n    FileStatus rsrcStat \u003d fs.getFileStatus(p);\n    rsrc.setResource(ConverterUtils.getYarnUrlFromPath(fs\n        .getDefaultFileSystem().resolvePath(rsrcStat.getPath())));\n    rsrc.setSize(rsrcStat.getLen());\n    rsrc.setTimestamp(rsrcStat.getModificationTime());\n    rsrc.setType(LocalResourceType.FILE);\n    rsrc.setVisibility(LocalResourceVisibility.APPLICATION);\n    return rsrc;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
    }
  }
}