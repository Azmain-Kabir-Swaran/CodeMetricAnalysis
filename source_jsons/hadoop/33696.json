{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegatingLinuxContainerRuntime.java",
  "functionName": "pickContainerRuntime",
  "functionId": "pickContainerRuntime___environment-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
  "functionStartLine": 118,
  "functionEndLine": 148,
  "numCommitsSeen": 29,
  "timeTaken": 5935,
  "changeHistory": [
    "0e22e9ab83438af37d821cb2f96e31f9a19ace2c",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
    "b0b535d9d5727cd84fd6368c6d1b38363616504e",
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
    "6f6dfe0202249c129b36edfd145a2224140139cc",
    "d848184e905d70835293ceac7a01b5a0ca21cc0a",
    "3e6fce91a471b4a5099de109582e7c6417e8a822"
  ],
  "changeHistoryShort": {
    "0e22e9ab83438af37d821cb2f96e31f9a19ace2c": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "dffb7bfe6cd2292162f08ec0bded736bc5194c3f": "Ybodychange",
    "b0b535d9d5727cd84fd6368c6d1b38363616504e": "Ymultichange(Ymodifierchange,Yexceptionschange,Ybodychange)",
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716": "Ybodychange",
    "6f6dfe0202249c129b36edfd145a2224140139cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "d848184e905d70835293ceac7a01b5a0ca21cc0a": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e22e9ab83438af37d821cb2f96e31f9a19ace2c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9562. Add Java changes for the new RuncContainerRuntime. Contributed by Eric Badger\n",
      "commitDate": "18/11/19 1:56 PM",
      "commitName": "0e22e9ab83438af37d821cb2f96e31f9a19ace2c",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 247.94,
      "commitsBetweenForRepo": 1753,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   LinuxContainerRuntime pickContainerRuntime(\n       Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n     LinuxContainerRuntime runtime;\n     //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n     if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n         javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){\n       runtime \u003d javaSandboxLinuxContainerRuntime;\n     } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n         dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\n       runtime \u003d dockerLinuxContainerRuntime;\n+    } else if (runcContainerRuntime !\u003d null \u0026\u0026\n+        runcContainerRuntime.isRuntimeRequested(environment)) {\n+      runtime \u003d runcContainerRuntime;\n     } else {\n       LinuxContainerRuntime pluggableRuntime \u003d pickPluggableRuntime(\n           environment);\n       if (pluggableRuntime !\u003d null) {\n         runtime \u003d pluggableRuntime;\n       } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n           defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\n         runtime \u003d defaultLinuxContainerRuntime;\n       } else {\n         throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n       }\n     }\n \n     LOG.debug(\"Using container runtime: {}\", runtime.getClass()\n           .getSimpleName());\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n        javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n        dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else if (runcContainerRuntime !\u003d null \u0026\u0026\n        runcContainerRuntime.isRuntimeRequested(environment)) {\n      runtime \u003d runcContainerRuntime;\n    } else {\n      LinuxContainerRuntime pluggableRuntime \u003d pickPluggableRuntime(\n          environment);\n      if (pluggableRuntime !\u003d null) {\n        runtime \u003d pluggableRuntime;\n      } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n          defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\n        runtime \u003d defaultLinuxContainerRuntime;\n      } else {\n        throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n      }\n    }\n\n    LOG.debug(\"Using container runtime: {}\", runtime.getClass()\n          .getSimpleName());\n\n    return runtime;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 83.94,
      "commitsBetweenForRepo": 649,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   LinuxContainerRuntime pickContainerRuntime(\n       Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n     LinuxContainerRuntime runtime;\n     //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n     if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n         javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){\n       runtime \u003d javaSandboxLinuxContainerRuntime;\n     } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n         dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\n       runtime \u003d dockerLinuxContainerRuntime;\n     } else {\n       LinuxContainerRuntime pluggableRuntime \u003d pickPluggableRuntime(\n           environment);\n       if (pluggableRuntime !\u003d null) {\n         runtime \u003d pluggableRuntime;\n       } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n           defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\n         runtime \u003d defaultLinuxContainerRuntime;\n       } else {\n         throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n       }\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n+    LOG.debug(\"Using container runtime: {}\", runtime.getClass()\n           .getSimpleName());\n-    }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n        javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n        dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else {\n      LinuxContainerRuntime pluggableRuntime \u003d pickPluggableRuntime(\n          environment);\n      if (pluggableRuntime !\u003d null) {\n        runtime \u003d pluggableRuntime;\n      } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n          defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\n        runtime \u003d defaultLinuxContainerRuntime;\n      } else {\n        throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n      }\n    }\n\n    LOG.debug(\"Using container runtime: {}\", runtime.getClass()\n          .getSimpleName());\n\n    return runtime;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "dffb7bfe6cd2292162f08ec0bded736bc5194c3f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8638. Allow linux container runtimes to be pluggable. Contributed by Craig Condit\n",
      "commitDate": "05/09/18 5:47 AM",
      "commitName": "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
      "commitAuthor": "Shane Kumpf",
      "commitDateOld": "10/04/18 4:25 PM",
      "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 147.56,
      "commitsBetweenForRepo": 1582,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,30 @@\n   LinuxContainerRuntime pickContainerRuntime(\n       Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n     LinuxContainerRuntime runtime;\n     //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n     if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n-        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n+        javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){\n       runtime \u003d javaSandboxLinuxContainerRuntime;\n     } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n-        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n+        dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n-        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n-      runtime \u003d defaultLinuxContainerRuntime;\n     } else {\n-      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n+      LinuxContainerRuntime pluggableRuntime \u003d pickPluggableRuntime(\n+          environment);\n+      if (pluggableRuntime !\u003d null) {\n+        runtime \u003d pluggableRuntime;\n+      } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n+          defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\n+        runtime \u003d defaultLinuxContainerRuntime;\n+      } else {\n+        throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n+      }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n        javaSandboxLinuxContainerRuntime.isRuntimeRequested(environment)){\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n        dockerLinuxContainerRuntime.isRuntimeRequested(environment)) {\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else {\n      LinuxContainerRuntime pluggableRuntime \u003d pickPluggableRuntime(\n          environment);\n      if (pluggableRuntime !\u003d null) {\n        runtime \u003d pluggableRuntime;\n      } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n          defaultLinuxContainerRuntime.isRuntimeRequested(environment)) {\n        runtime \u003d defaultLinuxContainerRuntime;\n      } else {\n        throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "b0b535d9d5727cd84fd6368c6d1b38363616504e": {
      "type": "Ymultichange(Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6930. Admins should be able to explicitly enable specific LinuxContainerRuntime in the NodeManager. Contributed by Shane Kumpf\n",
      "commitDate": "07/09/17 2:17 PM",
      "commitName": "b0b535d9d5727cd84fd6368c6d1b38363616504e",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6930. Admins should be able to explicitly enable specific LinuxContainerRuntime in the NodeManager. Contributed by Shane Kumpf\n",
          "commitDate": "07/09/17 2:17 PM",
          "commitName": "b0b535d9d5727cd84fd6368c6d1b38363616504e",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/08/17 1:14 AM",
          "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 16.54,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n-  private LinuxContainerRuntime pickContainerRuntime(\n-      Map\u003cString, String\u003e environment){\n+  LinuxContainerRuntime pickContainerRuntime(\n+      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n     LinuxContainerRuntime runtime;\n     //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n-    if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n-        runtime \u003d javaSandboxLinuxContainerRuntime;\n-    } else if (DockerLinuxContainerRuntime\n-        .isDockerContainerRequested(environment)){\n+    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n+        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n+      runtime \u003d javaSandboxLinuxContainerRuntime;\n+    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n+        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else {\n+    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n+        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n       runtime \u003d defaultLinuxContainerRuntime;\n+    } else {\n+      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n      runtime \u003d defaultLinuxContainerRuntime;\n    } else {\n      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6930. Admins should be able to explicitly enable specific LinuxContainerRuntime in the NodeManager. Contributed by Shane Kumpf\n",
          "commitDate": "07/09/17 2:17 PM",
          "commitName": "b0b535d9d5727cd84fd6368c6d1b38363616504e",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/08/17 1:14 AM",
          "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 16.54,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n-  private LinuxContainerRuntime pickContainerRuntime(\n-      Map\u003cString, String\u003e environment){\n+  LinuxContainerRuntime pickContainerRuntime(\n+      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n     LinuxContainerRuntime runtime;\n     //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n-    if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n-        runtime \u003d javaSandboxLinuxContainerRuntime;\n-    } else if (DockerLinuxContainerRuntime\n-        .isDockerContainerRequested(environment)){\n+    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n+        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n+      runtime \u003d javaSandboxLinuxContainerRuntime;\n+    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n+        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else {\n+    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n+        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n       runtime \u003d defaultLinuxContainerRuntime;\n+    } else {\n+      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n      runtime \u003d defaultLinuxContainerRuntime;\n    } else {\n      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ContainerExecutionException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6930. Admins should be able to explicitly enable specific LinuxContainerRuntime in the NodeManager. Contributed by Shane Kumpf\n",
          "commitDate": "07/09/17 2:17 PM",
          "commitName": "b0b535d9d5727cd84fd6368c6d1b38363616504e",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/08/17 1:14 AM",
          "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 16.54,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,24 @@\n-  private LinuxContainerRuntime pickContainerRuntime(\n-      Map\u003cString, String\u003e environment){\n+  LinuxContainerRuntime pickContainerRuntime(\n+      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n     LinuxContainerRuntime runtime;\n     //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n-    if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n-        runtime \u003d javaSandboxLinuxContainerRuntime;\n-    } else if (DockerLinuxContainerRuntime\n-        .isDockerContainerRequested(environment)){\n+    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n+        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n+      runtime \u003d javaSandboxLinuxContainerRuntime;\n+    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n+        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else {\n+    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n+        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n       runtime \u003d defaultLinuxContainerRuntime;\n+    } else {\n+      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment) throws ContainerExecutionException {\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime !\u003d null \u0026\u0026\n        javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (dockerLinuxContainerRuntime !\u003d null \u0026\u0026\n        DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else if (defaultLinuxContainerRuntime !\u003d null \u0026\u0026\n        !DockerLinuxContainerRuntime.isDockerContainerRequested(environment)) {\n      runtime \u003d defaultLinuxContainerRuntime;\n    } else {\n      throw new ContainerExecutionException(\"Requested runtime not allowed.\");\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6472. Improve Java sandbox regex (gphillips via rkanter)\n",
      "commitDate": "28/04/17 11:01 AM",
      "commitName": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/03/17 2:53 PM",
      "commitNameOld": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 57.8,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private LinuxContainerRuntime pickContainerRuntime(\n       Map\u003cString, String\u003e environment){\n     LinuxContainerRuntime runtime;\n-\n-    if (DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n+    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n+    if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n+        runtime \u003d javaSandboxLinuxContainerRuntime;\n+    } else if (DockerLinuxContainerRuntime\n+        .isDockerContainerRequested(environment)){\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()) {\n-      runtime \u003d javaSandboxLinuxContainerRuntime;\n     } else {\n       runtime \u003d defaultLinuxContainerRuntime;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment){\n    LinuxContainerRuntime runtime;\n    //Sandbox checked first to ensure DockerRuntime doesn\u0027t circumvent controls\n    if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()){\n        runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else if (DockerLinuxContainerRuntime\n        .isDockerContainerRequested(environment)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else {\n      runtime \u003d defaultLinuxContainerRuntime;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "6f6dfe0202249c129b36edfd145a2224140139cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
      "commitDate": "01/03/17 2:53 PM",
      "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
          "commitDate": "01/03/17 2:53 PM",
          "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "26/08/16 4:00 AM",
          "commitNameOld": "bfb4d950596d6198e473045dac6eb36c685b0319",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 187.5,
          "commitsBetweenForRepo": 1158,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-  private LinuxContainerRuntime pickContainerRuntime(Container container) {\n-    Map\u003cString, String\u003e env \u003d container.getLaunchContext().getEnvironment();\n+  private LinuxContainerRuntime pickContainerRuntime(\n+      Map\u003cString, String\u003e environment){\n     LinuxContainerRuntime runtime;\n \n-    if (DockerLinuxContainerRuntime.isDockerContainerRequested(env)){\n+    if (DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else  {\n+    } else if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()) {\n+      runtime \u003d javaSandboxLinuxContainerRuntime;\n+    } else {\n       runtime \u003d defaultLinuxContainerRuntime;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment){\n    LinuxContainerRuntime runtime;\n\n    if (DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()) {\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else {\n      runtime \u003d defaultLinuxContainerRuntime;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[container-Container]",
            "newValue": "[environment-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
          "commitDate": "01/03/17 2:53 PM",
          "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "26/08/16 4:00 AM",
          "commitNameOld": "bfb4d950596d6198e473045dac6eb36c685b0319",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 187.5,
          "commitsBetweenForRepo": 1158,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-  private LinuxContainerRuntime pickContainerRuntime(Container container) {\n-    Map\u003cString, String\u003e env \u003d container.getLaunchContext().getEnvironment();\n+  private LinuxContainerRuntime pickContainerRuntime(\n+      Map\u003cString, String\u003e environment){\n     LinuxContainerRuntime runtime;\n \n-    if (DockerLinuxContainerRuntime.isDockerContainerRequested(env)){\n+    if (DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n       runtime \u003d dockerLinuxContainerRuntime;\n-    } else  {\n+    } else if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()) {\n+      runtime \u003d javaSandboxLinuxContainerRuntime;\n+    } else {\n       runtime \u003d defaultLinuxContainerRuntime;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LinuxContainerRuntime pickContainerRuntime(\n      Map\u003cString, String\u003e environment){\n    LinuxContainerRuntime runtime;\n\n    if (DockerLinuxContainerRuntime.isDockerContainerRequested(environment)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else if (javaSandboxLinuxContainerRuntime.isSandboxContainerRequested()) {\n      runtime \u003d javaSandboxLinuxContainerRuntime;\n    } else {\n      runtime \u003d defaultLinuxContainerRuntime;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "d848184e905d70835293ceac7a01b5a0ca21cc0a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5460. Change container runtime type logging in DelegatingLinuxContainerRuntime to debug. Contributed by Shane Kumpf.\n",
      "commitDate": "02/08/16 11:32 PM",
      "commitName": "d848184e905d70835293ceac7a01b5a0ca21cc0a",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/03/16 11:08 AM",
      "commitNameOld": "b2661765a5a48392a5691cee15904ed2de147b00",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 148.48,
      "commitsBetweenForRepo": 1070,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private LinuxContainerRuntime pickContainerRuntime(Container container) {\n     Map\u003cString, String\u003e env \u003d container.getLaunchContext().getEnvironment();\n     LinuxContainerRuntime runtime;\n \n     if (DockerLinuxContainerRuntime.isDockerContainerRequested(env)){\n       runtime \u003d dockerLinuxContainerRuntime;\n     } else  {\n       runtime \u003d defaultLinuxContainerRuntime;\n     }\n \n-    if (LOG.isInfoEnabled()) {\n-      LOG.info(\"Using container runtime: \" + runtime.getClass()\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n           .getSimpleName());\n     }\n \n     return runtime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LinuxContainerRuntime pickContainerRuntime(Container container) {\n    Map\u003cString, String\u003e env \u003d container.getLaunchContext().getEnvironment();\n    LinuxContainerRuntime runtime;\n\n    if (DockerLinuxContainerRuntime.isDockerContainerRequested(env)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else  {\n      runtime \u003d defaultLinuxContainerRuntime;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,17 @@\n+  private LinuxContainerRuntime pickContainerRuntime(Container container) {\n+    Map\u003cString, String\u003e env \u003d container.getLaunchContext().getEnvironment();\n+    LinuxContainerRuntime runtime;\n+\n+    if (DockerLinuxContainerRuntime.isDockerContainerRequested(env)){\n+      runtime \u003d dockerLinuxContainerRuntime;\n+    } else  {\n+      runtime \u003d defaultLinuxContainerRuntime;\n+    }\n+\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"Using container runtime: \" + runtime.getClass()\n+          .getSimpleName());\n+    }\n+\n+    return runtime;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private LinuxContainerRuntime pickContainerRuntime(Container container) {\n    Map\u003cString, String\u003e env \u003d container.getLaunchContext().getEnvironment();\n    LinuxContainerRuntime runtime;\n\n    if (DockerLinuxContainerRuntime.isDockerContainerRequested(env)){\n      runtime \u003d dockerLinuxContainerRuntime;\n    } else  {\n      runtime \u003d defaultLinuxContainerRuntime;\n    }\n\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Using container runtime: \" + runtime.getClass()\n          .getSimpleName());\n    }\n\n    return runtime;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java"
    }
  }
}