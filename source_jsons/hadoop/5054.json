{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryWithSnapshotFeature.java",
  "functionName": "cleanDeletedINode",
  "functionId": "cleanDeletedINode___reclaimContext-INode.ReclaimContext__inode-INode__post-int(modifiers-final)__prior-int(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
  "functionStartLine": 443,
  "functionEndLine": 491,
  "numCommitsSeen": 252,
  "timeTaken": 9326,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "34ab50ea92370cc7440a8f7649286b148c2fde65",
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "4536399d47f6c061e149e2504600804a0f1e093d",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
    "8df119da214babde03e73243c7ca4cfe6d0ca562",
    "d46e1608626c64400d2b6c7693a4c035783c55b4",
    "0aab1ef9962314eb7a44140f35eb04c5f847765b",
    "72d783374c1e302492d7ce537222b563241038bb",
    "0fa5cad0b27780c27a284c23101b1099d4886506",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b",
    "9602869d19a323cdb9396cb52ba9bd818d21a7a9"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "34ab50ea92370cc7440a8f7649286b148c2fde65": "Ybodychange",
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "4536399d47f6c061e149e2504600804a0f1e093d": "Ymultichange(Yparameterchange,Ybodychange)",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ymultichange(Yfilerename,Ybodychange)",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": "Ybodychange",
    "8df119da214babde03e73243c7ca4cfe6d0ca562": "Ybodychange",
    "d46e1608626c64400d2b6c7693a4c035783c55b4": "Ymultichange(Yparameterchange,Ybodychange)",
    "0aab1ef9962314eb7a44140f35eb04c5f847765b": "Ybodychange",
    "72d783374c1e302492d7ce537222b563241038bb": "Ymultichange(Ybodychange,Yparametermetachange)",
    "0fa5cad0b27780c27a284c23101b1099d4886506": "Ymultichange(Ymodifierchange,Yexceptionschange,Ybodychange)",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": "Ymultichange(Yparameterchange,Ybodychange)",
    "9602869d19a323cdb9396cb52ba9bd818d21a7a9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/03/18 1:35 PM",
      "commitNameOld": "346caa209571dedf1331b2658d5702b45dd40bfe",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.09,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n       INode inode, final int post, final int prior) {\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n           INodeReference.WithCount wc \u003d\n               (INodeReference.WithCount) wn.getReferredINode();\n           if (wc.getLastWithName() \u003d\u003d wn \u0026\u0026 wc.getParentReference() \u003d\u003d null) {\n             // this wn is the last wn inside of the wc, also the dstRef node has\n             // been deleted. In this case, we should treat the referred file/dir\n             // as normal case\n             queue.add(wc.getReferredINode());\n           } else {\n             wn.cleanSubtree(reclaimContext, post, prior);\n           }\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n           }\n         }\n \n         for (INode child : dir.getChildrenList(prior)) {\n-          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n-              ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n+          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.getDeleted(\n+              child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n      INode inode, final int post, final int prior) {\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          INodeReference.WithCount wc \u003d\n              (INodeReference.WithCount) wn.getReferredINode();\n          if (wc.getLastWithName() \u003d\u003d wn \u0026\u0026 wc.getParentReference() \u003d\u003d null) {\n            // this wn is the last wn inside of the wc, also the dstRef node has\n            // been deleted. In this case, we should treat the referred file/dir\n            // as normal case\n            queue.add(wc.getReferredINode());\n          } else {\n            wn.cleanSubtree(reclaimContext, post, prior);\n          }\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n          }\n        }\n\n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.getDeleted(\n              child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "34ab50ea92370cc7440a8f7649286b148c2fde65": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9406. FSImage may get corrupted after deleting snapshot. (Contributed by Jing Zhao, Stanislav Antic, Vinayakumar B, Yongjun Zhang)\n",
      "commitDate": "01/02/16 1:56 PM",
      "commitName": "34ab50ea92370cc7440a8f7649286b148c2fde65",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "18/09/15 9:26 AM",
      "commitNameOld": "3f4275310203de4ccfb15337f3c503e25408a265",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 136.23,
      "commitsBetweenForRepo": 937,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,49 @@\n   private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n       INode inode, final int post, final int prior) {\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(reclaimContext, post, prior);\n+          INodeReference.WithCount wc \u003d\n+              (INodeReference.WithCount) wn.getReferredINode();\n+          if (wc.getLastWithName() \u003d\u003d wn \u0026\u0026 wc.getParentReference() \u003d\u003d null) {\n+            // this wn is the last wn inside of the wc, also the dstRef node has\n+            // been deleted. In this case, we should treat the referred file/dir\n+            // as normal case\n+            queue.add(wc.getReferredINode());\n+          } else {\n+            wn.cleanSubtree(reclaimContext, post, prior);\n+          }\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n           }\n         }\n \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n               ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n      INode inode, final int post, final int prior) {\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          INodeReference.WithCount wc \u003d\n              (INodeReference.WithCount) wn.getReferredINode();\n          if (wc.getLastWithName() \u003d\u003d wn \u0026\u0026 wc.getParentReference() \u003d\u003d null) {\n            // this wn is the last wn inside of the wc, also the dstRef node has\n            // been deleted. In this case, we should treat the referred file/dir\n            // as normal case\n            queue.add(wc.getReferredINode());\n          } else {\n            wn.cleanSubtree(reclaimContext, post, prior);\n          }\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n          }\n        }\n\n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n              ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,40 @@\n-  private static QuotaCounts cleanDeletedINode(\n-      INode.ReclaimContext reclaimContext, INode inode, final int post,\n-      final int prior) {\n-    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n-    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n+  private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n+      INode inode, final int post, final int prior) {\n+    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n           wn.cleanSubtree(reclaimContext, post, prior);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));\n+        file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,\n-                dir));\n+            priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n           }\n         }\n-        \n+\n         for (INode child : dir.getChildrenList(prior)) {\n-          if (priorChildrenDiff !\u003d null\n-              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n-                  child.getLocalNameBytes()) !\u003d null) {\n+          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n+              ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n-    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n      INode inode, final int post, final int prior) {\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(reclaimContext, post, prior);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n          }\n        }\n\n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n              ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "QuotaCounts",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,40 @@\n-  private static QuotaCounts cleanDeletedINode(\n-      INode.ReclaimContext reclaimContext, INode inode, final int post,\n-      final int prior) {\n-    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n-    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n+  private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n+      INode inode, final int post, final int prior) {\n+    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n           wn.cleanSubtree(reclaimContext, post, prior);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));\n+        file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,\n-                dir));\n+            priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n           }\n         }\n-        \n+\n         for (INode child : dir.getChildrenList(prior)) {\n-          if (priorChildrenDiff !\u003d null\n-              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n-                  child.getLocalNameBytes()) !\u003d null) {\n+          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n+              ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n-    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void cleanDeletedINode(INode.ReclaimContext reclaimContext,\n      INode inode, final int post, final int prior) {\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(reclaimContext, post, prior);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file);\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            priorChildrenDiff.destroyCreatedList(reclaimContext, dir);\n          }\n        }\n\n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null \u0026\u0026 priorChildrenDiff.search(\n              ListType.DELETED, child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "4536399d47f6c061e149e2504600804a0f1e093d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
      "commitDate": "09/05/15 10:51 PM",
      "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,45 @@\n   private static QuotaCounts cleanDeletedINode(\n-      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,\n-      final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n+      INode.ReclaimContext reclaimContext, INode inode, final int post,\n+      final int prior) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,\n-                          removedUCFiles);\n+          wn.cleanSubtree(reclaimContext, post, prior);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n-            collectedBlocks, removedINodes));\n+        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n-                collectedBlocks, removedINodes, removedUCFiles));\n+            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,\n+                dir));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      INode.ReclaimContext reclaimContext, INode inode, final int post,\n      final int prior) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(reclaimContext, post, prior);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,\n                dir));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e]",
            "newValue": "[reclaimContext-INode.ReclaimContext, inode-INode, post-int(modifiers-final), prior-int(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,45 @@\n   private static QuotaCounts cleanDeletedINode(\n-      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,\n-      final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n+      INode.ReclaimContext reclaimContext, INode inode, final int post,\n+      final int prior) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,\n-                          removedUCFiles);\n+          wn.cleanSubtree(reclaimContext, post, prior);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n-            collectedBlocks, removedINodes));\n+        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n-                collectedBlocks, removedINodes, removedUCFiles));\n+            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,\n+                dir));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      INode.ReclaimContext reclaimContext, INode inode, final int post,\n      final int prior) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(reclaimContext, post, prior);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,\n                dir));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
      "commitDate": "08/05/15 11:04 PM",
      "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/04/15 9:20 PM",
          "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 36.07,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   private static QuotaCounts cleanDeletedINode(\n-      final BlockStoragePolicySuite bsps, INode inode,\n-      final int post, final int prior,\n+      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,\n+                          removedUCFiles);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n             collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n-                collectedBlocks, removedINodes));\n+                collectedBlocks, removedINodes, removedUCFiles));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,\n                          removedUCFiles);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                collectedBlocks, removedINodes, removedUCFiles));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/04/15 9:20 PM",
          "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 36.07,
          "commitsBetweenForRepo": 375,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   private static QuotaCounts cleanDeletedINode(\n-      final BlockStoragePolicySuite bsps, INode inode,\n-      final int post, final int prior,\n+      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,\n+                          removedUCFiles);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n             collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n-                collectedBlocks, removedINodes));\n+                collectedBlocks, removedINodes, removedUCFiles));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,\n                          removedUCFiles);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                collectedBlocks, removedINodes, removedUCFiles));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode,\n+  private static QuotaCounts cleanDeletedINode(\n+      final BlockStoragePolicySuite bsps, INode inode,\n       final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) {\n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n+        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n             collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n+            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      final BlockStoragePolicySuite bsps, INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite(modifiers-final), inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode,\n+  private static QuotaCounts cleanDeletedINode(\n+      final BlockStoragePolicySuite bsps, INode inode,\n       final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) {\n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n+        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n             collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n+            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      final BlockStoragePolicySuite bsps, INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "Quota.Counts",
            "newValue": "QuotaCounts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode,\n+  private static QuotaCounts cleanDeletedINode(\n+      final BlockStoragePolicySuite bsps, INode inode,\n       final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) {\n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n-        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n+        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n             collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n+            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static QuotaCounts cleanDeletedINode(\n      final BlockStoragePolicySuite bsps, INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/12/14 11:05 PM",
          "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 41.73,
          "commitsBetweenForRepo": 229,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,47 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n-      throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n-              countDiffChange);\n+          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n-            collectedBlocks, removedINodes, countDiffChange));\n+            collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]",
            "newValue": "[inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/12/14 11:05 PM",
          "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 41.73,
          "commitsBetweenForRepo": 229,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,47 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n-      throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n-              countDiffChange);\n+          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n-            collectedBlocks, removedINodes, countDiffChange));\n+            collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/12/14 11:05 PM",
          "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 41.73,
          "commitsBetweenForRepo": 229,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,47 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n-      throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n-              countDiffChange);\n+          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n-            collectedBlocks, removedINodes, countDiffChange));\n+            collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n-      final Snapshot post, final Snapshot prior,\n+      final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n+      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n       throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n-        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n+        if (wn.getLastSnapshotId() \u003e\u003d post) {\n           wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n               countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n             collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n-          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiff(prior);\n-          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n+          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, post-Snapshot(modifiers-final), prior-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]",
            "newValue": "[inode-INode, post-int(modifiers-final), prior-int(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n-      final Snapshot post, final Snapshot prior,\n+      final int post, final int prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n+      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n       throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n-        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n+        if (wn.getLastSnapshotId() \u003e\u003d post) {\n           wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n               countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n             collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n-          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiff(prior);\n-          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n+          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n+          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final int post, final int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange)\n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiffById(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshotId() \u003d\u003d prior) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final Snapshot post, final Snapshot prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n       throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n           wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n               countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n             collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n-        if (dir instanceof INodeDirectoryWithSnapshot) {\n+        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n+        if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n-          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n-          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n+          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n+            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final Snapshot post, final Snapshot prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final Snapshot post, final Snapshot prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n       throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n           wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n               countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n         INodeFile file \u003d topNode.asFile();\n         counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n             collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n-        if (dir instanceof INodeDirectoryWithSnapshot) {\n+        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n+        if (sf !\u003d null) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n-          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n-          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n+          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n-            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n+            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final Snapshot post, final Snapshot prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          DirectoryDiff priorDiff \u003d sf.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(dir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5554. Flatten INodeFile hierarchy: Replace INodeFileWithSnapshot with FileWithSnapshotFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:17 PM",
      "commitName": "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/11/13 12:32 PM",
      "commitNameOld": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final Snapshot post, final Snapshot prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n       throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n           wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n               countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n-      } else if (topNode.isFile()\n-          \u0026\u0026 topNode.asFile() instanceof INodeFileWithSnapshot) {\n-        INodeFileWithSnapshot fs \u003d (INodeFileWithSnapshot) topNode.asFile();\n-        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior, fs,\n+      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n+        INodeFile file \u003d topNode.asFile();\n+        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n             collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final Snapshot post, final Snapshot prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile() \u0026\u0026 topNode.asFile().isWithSnapshot()) {\n        INodeFile file \u003d topNode.asFile();\n        counts.add(file.getDiffs().deleteSnapshotDiff(post, prior, file,\n            collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "8df119da214babde03e73243c7ca4cfe6d0ca562": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5537. Remove FileWithSnapshot interface.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 12:32 PM",
      "commitName": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/11/13 10:33 AM",
      "commitNameOld": "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private static Quota.Counts cleanDeletedINode(INode inode,\n       final Snapshot post, final Snapshot prior,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n       throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n           wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n               countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile()\n-          \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n-        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n-        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n-            topNode.asFile(), collectedBlocks, removedINodes, countDiffChange));\n+          \u0026\u0026 topNode.asFile() instanceof INodeFileWithSnapshot) {\n+        INodeFileWithSnapshot fs \u003d (INodeFileWithSnapshot) topNode.asFile();\n+        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior, fs,\n+            collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         ChildrenDiff priorChildrenDiff \u003d null;\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n             counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         \n         for (INode child : dir.getChildrenList(prior)) {\n           if (priorChildrenDiff !\u003d null\n               \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                   child.getLocalNameBytes()) !\u003d null) {\n             continue;\n           }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final Snapshot post, final Snapshot prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile()\n          \u0026\u0026 topNode.asFile() instanceof INodeFileWithSnapshot) {\n        INodeFileWithSnapshot fs \u003d (INodeFileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior, fs,\n            collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "d46e1608626c64400d2b6c7693a4c035783c55b4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 1:15 PM",
      "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 1:15 PM",
          "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/05/13 5:23 PM",
          "commitNameOld": "59801391400f3fa0ed1f029b7af75627d3288f22",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 28.83,
          "commitsBetweenForRepo": 171,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,50 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n-      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n-      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+  private static Quota.Counts cleanDeletedINode(INode inode,\n+      final Snapshot post, final Snapshot prior,\n+      final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n+      throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n+              countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile()\n           \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n-            topNode.asFile(), collectedBlocks, removedINodes));\n+            topNode.asFile(), collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n+        ChildrenDiff priorChildrenDiff \u003d null;\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n-            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n+            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n+            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n+        \n         for (INode child : dir.getChildrenList(prior)) {\n+          if (priorChildrenDiff !\u003d null\n+              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n+                  child.getLocalNameBytes()) !\u003d null) {\n+            continue;\n+          }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final Snapshot post, final Snapshot prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile()\n          \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, post-Snapshot(modifiers-final), prior-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[inode-INode, post-Snapshot(modifiers-final), prior-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 1:15 PM",
          "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/05/13 5:23 PM",
          "commitNameOld": "59801391400f3fa0ed1f029b7af75627d3288f22",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 28.83,
          "commitsBetweenForRepo": 171,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,50 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n-      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n-      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+  private static Quota.Counts cleanDeletedINode(INode inode,\n+      final Snapshot post, final Snapshot prior,\n+      final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n+      throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof INodeReference.WithName) {\n         INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n         if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n-          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n+          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n+              countDiffChange);\n         }\n         // For DstReference node, since the node is not in the created list of\n         // prior, we should treat it as regular file/dir\n       } else if (topNode.isFile()\n           \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n-            topNode.asFile(), collectedBlocks, removedINodes));\n+            topNode.asFile(), collectedBlocks, removedINodes, countDiffChange));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n+        ChildrenDiff priorChildrenDiff \u003d null;\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n-            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n+            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n+            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n+        \n         for (INode child : dir.getChildrenList(prior)) {\n+          if (priorChildrenDiff !\u003d null\n+              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n+                  child.getLocalNameBytes()) !\u003d null) {\n+            continue;\n+          }\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode,\n      final Snapshot post, final Snapshot prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final boolean countDiffChange) \n      throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes,\n              countDiffChange);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile()\n          \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes, countDiffChange));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        ChildrenDiff priorChildrenDiff \u003d null;\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            priorChildrenDiff \u003d priorDiff.getChildrenDiff();\n            counts.add(priorChildrenDiff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        \n        for (INode child : dir.getChildrenList(prior)) {\n          if (priorChildrenDiff !\u003d null\n              \u0026\u0026 priorChildrenDiff.search(ListType.DELETED,\n                  child.getLocalNameBytes()) !\u003d null) {\n            continue;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "0aab1ef9962314eb7a44140f35eb04c5f847765b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4800. Fix INodeDirectoryWithSnapshot#cleanDeletedINode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/13 3:45 PM",
      "commitName": "0aab1ef9962314eb7a44140f35eb04c5f847765b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/05/13 11:48 AM",
      "commitNameOld": "424b270c94297b00a850e7a821163b9802edc7ae",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n       final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n-      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n+      if (topNode instanceof INodeReference.WithName) {\n+        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n+        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n+          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n+        }\n+        // For DstReference node, since the node is not in the created list of\n+        // prior, we should treat it as regular file/dir\n+      } else if (topNode.isFile()\n+          \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n             topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof INodeReference.WithName) {\n        INodeReference.WithName wn \u003d (INodeReference.WithName) topNode;\n        if (wn.getLastSnapshotId() \u003e\u003d post.getId()) {\n          wn.cleanSubtree(post, prior, collectedBlocks, removedINodes);\n        }\n        // For DstReference node, since the node is not in the created list of\n        // prior, we should treat it as regular file/dir\n      } else if (topNode.isFile()\n          \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "72d783374c1e302492d7ce537222b563241038bb": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 3:10 PM",
      "commitName": "72d783374c1e302492d7ce537222b563241038bb",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 3:10 PM",
          "commitName": "72d783374c1e302492d7ce537222b563241038bb",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/04/13 2:05 PM",
          "commitNameOld": "3a3e0f573129c8308332d4b301a9319ee579d85a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 4.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n+      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n             topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n-          if (priorDiff !\u003d null) {\n+          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 3:10 PM",
          "commitName": "72d783374c1e302492d7ce537222b563241038bb",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/04/13 2:05 PM",
          "commitNameOld": "3a3e0f573129c8308332d4b301a9319ee579d85a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 4.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n+      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n       final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n             topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n-          if (priorDiff !\u003d null) {\n+          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode, final Snapshot post, \n      final Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, \n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null \u0026\u0026 priorDiff.getSnapshot().equals(prior)) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, post-Snapshot, prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[inode-INode, post-Snapshot(modifiers-final), prior-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "0fa5cad0b27780c27a284c23101b1099d4886506": {
      "type": "Ymultichange(Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/13 1:31 PM",
      "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n+  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n       Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n-      if (topNode instanceof FileWithSnapshot) {\n-        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n+      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n+        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n             topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n+  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n       Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n-      if (topNode instanceof FileWithSnapshot) {\n-        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n+      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n+        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n             topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[QuotaExceededException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n+  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n       Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n-      if (topNode instanceof FileWithSnapshot) {\n-        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n+      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n+        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n             topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                 collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode.isFile() \u0026\u0026 topNode.asFile() instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode.asFile();\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 5:00 PM",
      "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/04/13 3:13 PM",
          "commitNameOld": "43bdc22e9207a74678665de5f109dd7e56fe979a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n   private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks) {\n+      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n-            topNode.asFile(), collectedBlocks));\n+            topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n-                collectedBlocks));\n+                collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[inode-INode, post-Snapshot, prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]",
            "newValue": "[inode-INode, post-Snapshot, prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/04/13 3:13 PM",
          "commitNameOld": "43bdc22e9207a74678665de5f109dd7e56fe979a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n   private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks) {\n+      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n     queue.addLast(inode);\n     while (!queue.isEmpty()) {\n       INode topNode \u003d queue.pollFirst();\n       if (topNode instanceof FileWithSnapshot) {\n         FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n         counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n-            topNode.asFile(), collectedBlocks));\n+            topNode.asFile(), collectedBlocks, removedINodes));\n       } else if (topNode.isDirectory()) {\n         INodeDirectory dir \u003d topNode.asDirectory();\n         if (dir instanceof INodeDirectoryWithSnapshot) {\n           // delete files/dirs created after prior. Note that these\n           // files/dirs, along with inode, were deleted right after post.\n           INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n           DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n           if (priorDiff !\u003d null) {\n             counts.add(priorDiff.diff.destroyCreatedList(sdir,\n-                collectedBlocks));\n+                collectedBlocks, removedINodes));\n           }\n         }\n         for (INode child : dir.getChildrenList(prior)) {\n           queue.addLast(child);\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks, removedINodes));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks, removedINodes));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "9602869d19a323cdb9396cb52ba9bd818d21a7a9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4648. For snapshot deletion, when merging the diff from to-delete snapshot to the prior snapshot, make sure files/directories created after the prior snapshot get deleted.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1462865 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/03/13 4:57 PM",
      "commitName": "9602869d19a323cdb9396cb52ba9bd818d21a7a9",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,30 @@\n+  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n+      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks) {\n+    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n+    queue.addLast(inode);\n+    while (!queue.isEmpty()) {\n+      INode topNode \u003d queue.pollFirst();\n+      if (topNode instanceof FileWithSnapshot) {\n+        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n+        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n+            topNode.asFile(), collectedBlocks));\n+      } else if (topNode.isDirectory()) {\n+        INodeDirectory dir \u003d topNode.asDirectory();\n+        if (dir instanceof INodeDirectoryWithSnapshot) {\n+          // delete files/dirs created after prior. Note that these\n+          // files/dirs, along with inode, were deleted right after post.\n+          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n+          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n+          if (priorDiff !\u003d null) {\n+            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n+                collectedBlocks));\n+          }\n+        }\n+        for (INode child : dir.getChildrenList(prior)) {\n+          queue.addLast(child);\n+        }\n+      }\n+    }\n+    return counts;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Quota.Counts cleanDeletedINode(INode inode, Snapshot post,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    Deque\u003cINode\u003e queue \u003d new ArrayDeque\u003cINode\u003e();\n    queue.addLast(inode);\n    while (!queue.isEmpty()) {\n      INode topNode \u003d queue.pollFirst();\n      if (topNode instanceof FileWithSnapshot) {\n        FileWithSnapshot fs \u003d (FileWithSnapshot) topNode;\n        counts.add(fs.getDiffs().deleteSnapshotDiff(post, prior,\n            topNode.asFile(), collectedBlocks));\n      } else if (topNode.isDirectory()) {\n        INodeDirectory dir \u003d topNode.asDirectory();\n        if (dir instanceof INodeDirectoryWithSnapshot) {\n          // delete files/dirs created after prior. Note that these\n          // files/dirs, along with inode, were deleted right after post.\n          INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n          DirectoryDiff priorDiff \u003d sdir.getDiffs().getDiff(prior);\n          if (priorDiff !\u003d null) {\n            counts.add(priorDiff.diff.destroyCreatedList(sdir,\n                collectedBlocks));\n          }\n        }\n        for (INode child : dir.getChildrenList(prior)) {\n          queue.addLast(child);\n        }\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}