{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatProtobuf.java",
  "functionName": "commitSubSection",
  "functionId": "commitSubSection___summary-FileSummary.Builder__name-SectionName",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
  "functionStartLine": 679,
  "functionEndLine": 698,
  "numCommitsSeen": 38,
  "timeTaken": 1289,
  "changeHistory": [
    "b67812ea2111fa11bdd76096b923c93e1bdf2923"
  ],
  "changeHistoryShort": {
    "b67812ea2111fa11bdd76096b923c93e1bdf2923": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b67812ea2111fa11bdd76096b923c93e1bdf2923": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14617. Improve fsimage load time by writing sub-sections to the fsimage index (#1028). Contributed by  Stephen O\u0027Donnell.\n\nReviewed-by: He Xiaoqiao \u003chexiaoqiao@apache.org\u003e",
      "commitDate": "22/08/19 5:09 PM",
      "commitName": "b67812ea2111fa11bdd76096b923c93e1bdf2923",
      "commitAuthor": "Stephen O\u0027Donnell",
      "diff": "@@ -0,0 +1,20 @@\n+    public void commitSubSection(FileSummary.Builder summary, SectionName name)\n+        throws IOException {\n+      if (!writeSubSections) {\n+        return;\n+      }\n+\n+      LOG.debug(\"Saving a subsection for {}\", name.toString());\n+      // The output stream must be flushed before the length is obtained\n+      // as the flush can move the length forward.\n+      sectionOutputStream.flush();\n+      long length \u003d fileChannel.position() - subSectionOffset;\n+      if (length \u003d\u003d 0) {\n+        LOG.warn(\"The requested section for {} is empty. It will not be \" +\n+            \"output to the image\", name.toString());\n+        return;\n+      }\n+      summary.addSections(FileSummary.Section.newBuilder().setName(name.name)\n+          .setLength(length).setOffset(subSectionOffset));\n+      subSectionOffset +\u003d length;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void commitSubSection(FileSummary.Builder summary, SectionName name)\n        throws IOException {\n      if (!writeSubSections) {\n        return;\n      }\n\n      LOG.debug(\"Saving a subsection for {}\", name.toString());\n      // The output stream must be flushed before the length is obtained\n      // as the flush can move the length forward.\n      sectionOutputStream.flush();\n      long length \u003d fileChannel.position() - subSectionOffset;\n      if (length \u003d\u003d 0) {\n        LOG.warn(\"The requested section for {} is empty. It will not be \" +\n            \"output to the image\", name.toString());\n        return;\n      }\n      summary.addSections(FileSummary.Section.newBuilder().setName(name.name)\n          .setLength(length).setOffset(subSectionOffset));\n      subSectionOffset +\u003d length;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java"
    }
  }
}