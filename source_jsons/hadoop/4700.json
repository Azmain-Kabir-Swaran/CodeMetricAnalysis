{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeProxies.java",
  "functionName": "createNonHAProxy",
  "functionId": "createNonHAProxy___conf-Configuration__nnAddr-InetSocketAddress__xface-Class__T____ugi-UserGroupInformation__withRetries-boolean__fallbackToSimpleAuth-AtomicBoolean__alignmentContext-AlignmentContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
  "functionStartLine": 170,
  "functionEndLine": 215,
  "numCommitsSeen": 85,
  "timeTaken": 4013,
  "changeHistory": [
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
    "1804a31515e541b3371925aa895589919b54d443",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5"
  ],
  "changeHistoryShort": {
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed": "Ymultichange(Yparameterchange,Ybodychange)",
    "1804a31515e541b3371925aa895589919b54d443": "Ybodychange",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": "Ybodychange",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
      "commitDate": "14/02/19 11:22 AM",
      "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
          "commitDate": "14/02/19 11:22 AM",
          "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "06/09/18 2:48 PM",
          "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 160.9,
          "commitsBetweenForRepo": 1283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,46 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries,\n-      AtomicBoolean fallbackToSimpleAuth) throws IOException {\n+      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n+      throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      proxy \u003d (T) NameNodeProxiesClient.createNonHAProxyWithClientProtocol(\n-          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth);\n+      proxy \u003d (T) NameNodeProxiesClient.createProxyWithAlignmentContext(\n+          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth,\n+          alignmentContext);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n-          withRetries);\n+          withRetries, alignmentContext);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf,\n+          ugi, alignmentContext);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n-          conf, ugi);\n+          conf, ugi, alignmentContext);\n     } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n     } else if (xface \u003d\u003d InMemoryAliasMapProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n+    } else if (xface \u003d\u003d BalancerProtocols.class) {\n+      proxy \u003d (T) createNNProxyWithBalancerProtocol(nnAddr, conf, ugi,\n+          withRetries, fallbackToSimpleAuth, alignmentContext);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to NameNode: \" +\n           ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n \n     return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries,\n      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n      throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) NameNodeProxiesClient.createProxyWithAlignmentContext(\n          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth,\n          alignmentContext);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries, alignmentContext);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf,\n          ugi, alignmentContext);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi, alignmentContext);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d InMemoryAliasMapProtocol.class) {\n      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d BalancerProtocols.class) {\n      proxy \u003d (T) createNNProxyWithBalancerProtocol(nnAddr, conf, ugi,\n          withRetries, fallbackToSimpleAuth, alignmentContext);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, nnAddr-InetSocketAddress, xface-Class\u003cT\u003e, ugi-UserGroupInformation, withRetries-boolean, fallbackToSimpleAuth-AtomicBoolean]",
            "newValue": "[conf-Configuration, nnAddr-InetSocketAddress, xface-Class\u003cT\u003e, ugi-UserGroupInformation, withRetries-boolean, fallbackToSimpleAuth-AtomicBoolean, alignmentContext-AlignmentContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
          "commitDate": "14/02/19 11:22 AM",
          "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "06/09/18 2:48 PM",
          "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 160.9,
          "commitsBetweenForRepo": 1283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,46 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries,\n-      AtomicBoolean fallbackToSimpleAuth) throws IOException {\n+      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n+      throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      proxy \u003d (T) NameNodeProxiesClient.createNonHAProxyWithClientProtocol(\n-          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth);\n+      proxy \u003d (T) NameNodeProxiesClient.createProxyWithAlignmentContext(\n+          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth,\n+          alignmentContext);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n-          withRetries);\n+          withRetries, alignmentContext);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf,\n+          ugi, alignmentContext);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n-          conf, ugi);\n+          conf, ugi, alignmentContext);\n     } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n     } else if (xface \u003d\u003d InMemoryAliasMapProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi);\n+      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi,\n+          alignmentContext);\n+    } else if (xface \u003d\u003d BalancerProtocols.class) {\n+      proxy \u003d (T) createNNProxyWithBalancerProtocol(nnAddr, conf, ugi,\n+          withRetries, fallbackToSimpleAuth, alignmentContext);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to NameNode: \" +\n           ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n \n     return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries,\n      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n      throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) NameNodeProxiesClient.createProxyWithAlignmentContext(\n          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth,\n          alignmentContext);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries, alignmentContext);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf,\n          ugi, alignmentContext);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi, alignmentContext);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d InMemoryAliasMapProtocol.class) {\n      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi,\n          alignmentContext);\n    } else if (xface \u003d\u003d BalancerProtocols.class) {\n      proxy \u003d (T) createNNProxyWithBalancerProtocol(nnAddr, conf, ugi,\n          withRetries, fallbackToSimpleAuth, alignmentContext);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {}
        }
      ]
    },
    "1804a31515e541b3371925aa895589919b54d443": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13536. [PROVIDED Storage] HA for InMemoryAliasMap. Contributed by Virajith Jalaparti.\n",
      "commitDate": "02/07/18 10:48 AM",
      "commitName": "1804a31515e541b3371925aa895589919b54d443",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "04/04/17 11:05 PM",
      "commitNameOld": "9e0e430f18d45cfe125dda8d85916edddf79e8d6",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 453.49,
      "commitsBetweenForRepo": 3691,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries,\n       AtomicBoolean fallbackToSimpleAuth) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n       proxy \u003d (T) NameNodeProxiesClient.createNonHAProxyWithClientProtocol(\n           nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n       proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n           conf, ugi);\n     } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d InMemoryAliasMapProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to NameNode: \" +\n           ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n \n     return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries,\n      AtomicBoolean fallbackToSimpleAuth) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) NameNodeProxiesClient.createNonHAProxyWithClientProtocol(\n          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d InMemoryAliasMapProtocol.class) {\n      proxy \u003d (T) createNNProxyWithInMemoryAliasMapProtocol(nnAddr, conf, ugi);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
      "commitDate": "22/09/15 8:52 PM",
      "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/09/15 2:18 PM",
      "commitNameOld": "9eee97508f350ed4629abb04e7781514ffa04070",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 5.27,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries,\n       AtomicBoolean fallbackToSimpleAuth) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n-          withRetries, fallbackToSimpleAuth);\n+      proxy \u003d (T) NameNodeProxiesClient.createNonHAProxyWithClientProtocol(\n+          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n       proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n           conf, ugi);\n     } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to NameNode: \" +\n           ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n \n     return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries,\n      AtomicBoolean fallbackToSimpleAuth) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) NameNodeProxiesClient.createNonHAProxyWithClientProtocol(\n          nnAddr, conf, ugi, withRetries, fallbackToSimpleAuth);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,34 @@\n+  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n+      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n+      UserGroupInformation ugi, boolean withRetries,\n+      AtomicBoolean fallbackToSimpleAuth) throws IOException {\n+    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+  \n+    T proxy;\n+    if (xface \u003d\u003d ClientProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n+          withRetries, fallbackToSimpleAuth);\n+    } else if (xface \u003d\u003d JournalProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n+          conf, ugi);\n+    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n+    } else {\n+      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n+          \"connection to NameNode: \" +\n+          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n+    }\n+\n+    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries,\n      AtomicBoolean fallbackToSimpleAuth) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries, fallbackToSimpleAuth);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java"
    }
  }
}