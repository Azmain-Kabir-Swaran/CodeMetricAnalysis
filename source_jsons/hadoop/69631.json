{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystem.java",
  "functionName": "getFileBlockLocations",
  "functionId": "getFileBlockLocations___file-FileStatus__start-long__len-long",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
  "functionStartLine": 499,
  "functionEndLine": 532,
  "numCommitsSeen": 34,
  "timeTaken": 2001,
  "changeHistory": [
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Yexceptionschange",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public BlockLocation[] getFileBlockLocations(FileStatus file,\n       long start, long len) {\n     if (file \u003d\u003d null) {\n       return null;\n     }\n \n     if ((start \u003c 0) || (len \u003c 0)) {\n       throw new IllegalArgumentException(\"Invalid start or len parameter\");\n     }\n \n     if (file.getLen() \u003c start) {\n       return new BlockLocation[0];\n     }\n-    final String blobLocationHost \u003d this.abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n+    final String blobLocationHost \u003d abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n \n     final String[] name \u003d { blobLocationHost };\n     final String[] host \u003d { blobLocationHost };\n     long blockSize \u003d file.getBlockSize();\n     if (blockSize \u003c\u003d 0) {\n       throw new IllegalArgumentException(\n           \"The block size for the given file is not a positive number: \"\n               + blockSize);\n     }\n     int numberOfLocations \u003d (int) (len / blockSize)\n         + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n     BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n     for (int i \u003d 0; i \u003c locations.length; i++) {\n       long currentOffset \u003d start + (i * blockSize);\n       long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n       locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n     }\n \n     return locations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockLocation[] getFileBlockLocations(FileStatus file,\n      long start, long len) {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n\n    if ((start \u003c 0) || (len \u003c 0)) {\n      throw new IllegalArgumentException(\"Invalid start or len parameter\");\n    }\n\n    if (file.getLen() \u003c start) {\n      return new BlockLocation[0];\n    }\n    final String blobLocationHost \u003d abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n\n    final String[] name \u003d { blobLocationHost };\n    final String[] host \u003d { blobLocationHost };\n    long blockSize \u003d file.getBlockSize();\n    if (blockSize \u003c\u003d 0) {\n      throw new IllegalArgumentException(\n          \"The block size for the given file is not a positive number: \"\n              + blockSize);\n    }\n    int numberOfLocations \u003d (int) (len / blockSize)\n        + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n    BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n    for (int i \u003d 0; i \u003c locations.length; i++) {\n      long currentOffset \u003d start + (i * blockSize);\n      long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n      locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n    }\n\n    return locations;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public BlockLocation[] getFileBlockLocations(FileStatus file,\n-      long start, long len) throws IOException {\n+      long start, long len) {\n     if (file \u003d\u003d null) {\n       return null;\n     }\n \n     if ((start \u003c 0) || (len \u003c 0)) {\n       throw new IllegalArgumentException(\"Invalid start or len parameter\");\n     }\n \n     if (file.getLen() \u003c start) {\n       return new BlockLocation[0];\n     }\n     final String blobLocationHost \u003d this.abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n \n     final String[] name \u003d { blobLocationHost };\n     final String[] host \u003d { blobLocationHost };\n     long blockSize \u003d file.getBlockSize();\n     if (blockSize \u003c\u003d 0) {\n       throw new IllegalArgumentException(\n           \"The block size for the given file is not a positive number: \"\n               + blockSize);\n     }\n     int numberOfLocations \u003d (int) (len / blockSize)\n         + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n     BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n     for (int i \u003d 0; i \u003c locations.length; i++) {\n       long currentOffset \u003d start + (i * blockSize);\n       long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n       locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n     }\n \n     return locations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockLocation[] getFileBlockLocations(FileStatus file,\n      long start, long len) {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n\n    if ((start \u003c 0) || (len \u003c 0)) {\n      throw new IllegalArgumentException(\"Invalid start or len parameter\");\n    }\n\n    if (file.getLen() \u003c start) {\n      return new BlockLocation[0];\n    }\n    final String blobLocationHost \u003d this.abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n\n    final String[] name \u003d { blobLocationHost };\n    final String[] host \u003d { blobLocationHost };\n    long blockSize \u003d file.getBlockSize();\n    if (blockSize \u003c\u003d 0) {\n      throw new IllegalArgumentException(\n          \"The block size for the given file is not a positive number: \"\n              + blockSize);\n    }\n    int numberOfLocations \u003d (int) (len / blockSize)\n        + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n    BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n    for (int i \u003d 0; i \u003c locations.length; i++) {\n      long currentOffset \u003d start + (i * blockSize);\n      long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n      locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n    }\n\n    return locations;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[]"
      }
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public BlockLocation[] getFileBlockLocations(FileStatus file,\n       long start, long len) throws IOException {\n     if (file \u003d\u003d null) {\n       return null;\n     }\n \n     if ((start \u003c 0) || (len \u003c 0)) {\n       throw new IllegalArgumentException(\"Invalid start or len parameter\");\n     }\n \n     if (file.getLen() \u003c start) {\n       return new BlockLocation[0];\n     }\n-    final String blobLocationHost \u003d this.configurationService.getAzureBlockLocationHost();\n+    final String blobLocationHost \u003d this.abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n \n     final String[] name \u003d { blobLocationHost };\n     final String[] host \u003d { blobLocationHost };\n     long blockSize \u003d file.getBlockSize();\n     if (blockSize \u003c\u003d 0) {\n       throw new IllegalArgumentException(\n           \"The block size for the given file is not a positive number: \"\n               + blockSize);\n     }\n     int numberOfLocations \u003d (int) (len / blockSize)\n         + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n     BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n     for (int i \u003d 0; i \u003c locations.length; i++) {\n       long currentOffset \u003d start + (i * blockSize);\n       long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n       locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n     }\n \n     return locations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockLocation[] getFileBlockLocations(FileStatus file,\n      long start, long len) throws IOException {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n\n    if ((start \u003c 0) || (len \u003c 0)) {\n      throw new IllegalArgumentException(\"Invalid start or len parameter\");\n    }\n\n    if (file.getLen() \u003c start) {\n      return new BlockLocation[0];\n    }\n    final String blobLocationHost \u003d this.abfsStore.getAbfsConfiguration().getAzureBlockLocationHost();\n\n    final String[] name \u003d { blobLocationHost };\n    final String[] host \u003d { blobLocationHost };\n    long blockSize \u003d file.getBlockSize();\n    if (blockSize \u003c\u003d 0) {\n      throw new IllegalArgumentException(\n          \"The block size for the given file is not a positive number: \"\n              + blockSize);\n    }\n    int numberOfLocations \u003d (int) (len / blockSize)\n        + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n    BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n    for (int i \u003d 0; i \u003c locations.length; i++) {\n      long currentOffset \u003d start + (i * blockSize);\n      long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n      locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n    }\n\n    return locations;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,34 @@\n+  public BlockLocation[] getFileBlockLocations(FileStatus file,\n+      long start, long len) throws IOException {\n+    if (file \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    if ((start \u003c 0) || (len \u003c 0)) {\n+      throw new IllegalArgumentException(\"Invalid start or len parameter\");\n+    }\n+\n+    if (file.getLen() \u003c start) {\n+      return new BlockLocation[0];\n+    }\n+    final String blobLocationHost \u003d this.configurationService.getAzureBlockLocationHost();\n+\n+    final String[] name \u003d { blobLocationHost };\n+    final String[] host \u003d { blobLocationHost };\n+    long blockSize \u003d file.getBlockSize();\n+    if (blockSize \u003c\u003d 0) {\n+      throw new IllegalArgumentException(\n+          \"The block size for the given file is not a positive number: \"\n+              + blockSize);\n+    }\n+    int numberOfLocations \u003d (int) (len / blockSize)\n+        + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n+    BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n+    for (int i \u003d 0; i \u003c locations.length; i++) {\n+      long currentOffset \u003d start + (i * blockSize);\n+      long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n+      locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n+    }\n+\n+    return locations;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockLocation[] getFileBlockLocations(FileStatus file,\n      long start, long len) throws IOException {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n\n    if ((start \u003c 0) || (len \u003c 0)) {\n      throw new IllegalArgumentException(\"Invalid start or len parameter\");\n    }\n\n    if (file.getLen() \u003c start) {\n      return new BlockLocation[0];\n    }\n    final String blobLocationHost \u003d this.configurationService.getAzureBlockLocationHost();\n\n    final String[] name \u003d { blobLocationHost };\n    final String[] host \u003d { blobLocationHost };\n    long blockSize \u003d file.getBlockSize();\n    if (blockSize \u003c\u003d 0) {\n      throw new IllegalArgumentException(\n          \"The block size for the given file is not a positive number: \"\n              + blockSize);\n    }\n    int numberOfLocations \u003d (int) (len / blockSize)\n        + ((len % blockSize \u003d\u003d 0) ? 0 : 1);\n    BlockLocation[] locations \u003d new BlockLocation[numberOfLocations];\n    for (int i \u003d 0; i \u003c locations.length; i++) {\n      long currentOffset \u003d start + (i * blockSize);\n      long currentLength \u003d Math.min(blockSize, start + len - currentOffset);\n      locations[i] \u003d new BlockLocation(name, host, currentOffset, currentLength);\n    }\n\n    return locations;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java"
    }
  }
}