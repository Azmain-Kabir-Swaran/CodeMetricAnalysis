{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheManager.java",
  "functionName": "removeDirective",
  "functionId": "removeDirective___id-long__pc-FSPermissionChecker",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
  "functionStartLine": 696,
  "functionEndLine": 708,
  "numCommitsSeen": 90,
  "timeTaken": 5320,
  "changeHistory": [
    "991c453ca3ac141a3f286f74af8401f83c38b230",
    "13edb391d06c479720202eb5ac81f1c71fe64748",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
    "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
    "f79b3e6b17450e9d34c483046b7437b09dd72016",
    "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
    "af1ac9a5e8d8d97a855940d853dd59ab4666f6e2",
    "a0d9a155a4a4258f628e927e096ecf6673f788ec",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
    "40eb94ade3161d93e7a762a839004748f6d0ae89",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be",
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
    "d56d0b46e1b82ae068083ddb99872d314684dc82",
    "97b7267977ef42201e5844df49bc37ec3d10ce16",
    "920b4cc06f1bc15809902bdd1968cc434a694a08"
  ],
  "changeHistoryShort": {
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Ybodychange",
    "13edb391d06c479720202eb5ac81f1c71fe64748": "Ybodychange",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": "Ybodychange",
    "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92": "Ybodychange",
    "f79b3e6b17450e9d34c483046b7437b09dd72016": "Ymultichange(Yrename,Ybodychange)",
    "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a": "Ymultichange(Ymodifierchange,Ybodychange)",
    "af1ac9a5e8d8d97a855940d853dd59ab4666f6e2": "Ybodychange",
    "a0d9a155a4a4258f628e927e096ecf6673f788ec": "Ymultichange(Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "40eb94ade3161d93e7a762a839004748f6d0ae89": "Ybodychange",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": "Ybodychange",
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "d56d0b46e1b82ae068083ddb99872d314684dc82": "Ymultichange(Yparameterchange,Ybodychange)",
    "97b7267977ef42201e5844df49bc37ec3d10ce16": "Ymultichange(Yparameterchange,Ybodychange)",
    "920b4cc06f1bc15809902bdd1968cc434a694a08": "Yintroduced"
  },
  "changeHistoryDetails": {
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "05/12/13 1:09 PM",
      "commitNameOld": "55e5b0653c34a5f4146ce5a97a5b4a88a976d88a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 11.9,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,13 @@\n   public void removeDirective(long id, FSPermissionChecker pc)\n       throws IOException {\n     assert namesystem.hasWriteLock();\n     try {\n       CacheDirective directive \u003d getById(id);\n       checkWritePermission(pc, directive.getPool());\n       removeInternal(directive);\n     } catch (IOException e) {\n       LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n       throw e;\n     }\n-    if (monitor !\u003d null) {\n-      monitor.kick();\n-    }\n     LOG.info(\"removeDirective of \" + id + \" successful.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeDirective(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    try {\n      CacheDirective directive \u003d getById(id);\n      checkWritePermission(pc, directive.getPool());\n      removeInternal(directive);\n    } catch (IOException e) {\n      LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n      throw e;\n    }\n    LOG.info(\"removeDirective of \" + id + \" successful.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "13edb391d06c479720202eb5ac81f1c71fe64748": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5556. Add some more NameNode cache statistics, cache pool stats (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 9:55 AM",
      "commitName": "13edb391d06c479720202eb5ac81f1c71fe64748",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "21/11/13 9:12 AM",
      "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 6.03,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public void removeDirective(long id, FSPermissionChecker pc)\n       throws IOException {\n     assert namesystem.hasWriteLock();\n     try {\n-      CacheDirective existing \u003d getById(id);\n-      checkWritePermission(pc, existing.getPool());\n-      removeInternal(existing);\n+      CacheDirective directive \u003d getById(id);\n+      checkWritePermission(pc, directive.getPool());\n+      removeInternal(directive);\n     } catch (IOException e) {\n       LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n       throw e;\n     }\n     if (monitor !\u003d null) {\n       monitor.kick();\n     }\n     LOG.info(\"removeDirective of \" + id + \" successful.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeDirective(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    try {\n      CacheDirective directive \u003d getById(id);\n      checkWritePermission(pc, directive.getPool());\n      removeInternal(directive);\n    } catch (IOException e) {\n      LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n      throw e;\n    }\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDirective of \" + id + \" successful.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 9:12 AM",
      "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "18/11/13 6:01 PM",
      "commitNameOld": "4f15d0af4f3633bfa35f7cb7c1cc15ef545597d0",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.63,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public void removeDirective(long id, FSPermissionChecker pc)\n       throws IOException {\n     assert namesystem.hasWriteLock();\n     try {\n-      PathBasedCacheEntry existing \u003d getById(id);\n+      CacheDirective existing \u003d getById(id);\n       checkWritePermission(pc, existing.getPool());\n       removeInternal(existing);\n     } catch (IOException e) {\n       LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n       throw e;\n     }\n     if (monitor !\u003d null) {\n       monitor.kick();\n     }\n     LOG.info(\"removeDirective of \" + id + \" successful.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeDirective(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    try {\n      CacheDirective existing \u003d getById(id);\n      checkWritePermission(pc, existing.getPool());\n      removeInternal(existing);\n    } catch (IOException e) {\n      LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n      throw e;\n    }\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDirective of \" + id + \" successful.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5471. CacheAdmin -listPools fails when user lacks permissions to view all pools (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541323 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/13 3:52 PM",
      "commitName": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "07/11/13 2:07 PM",
      "commitNameOld": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 5.07,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,16 @@\n   public void removeDirective(long id, FSPermissionChecker pc)\n       throws IOException {\n     assert namesystem.hasWriteLock();\n     try {\n-      // Check for invalid IDs.\n-      if (id \u003c\u003d 0) {\n-        throw new IdNotFoundException(\"removeDirective \" + id + \": invalid \" +\n-            \"non-positive directive ID.\");\n-      }\n-      // Find the entry.\n-      PathBasedCacheEntry existing \u003d entriesById.get(id);\n-      if (existing \u003d\u003d null) {\n-        throw new IdNotFoundException(\"removeDirective \" + id +\n-            \": id not found.\");\n-      }\n-      if ((pc !\u003d null) \u0026\u0026\n-          (!pc.checkPermission(existing.getPool(), FsAction.WRITE))) {\n-        throw new AccessControlException(\"removeDirective \" + id +\n-            \": write permission denied on pool \" +\n-            existing.getPool().getPoolName());\n-      }\n+      PathBasedCacheEntry existing \u003d getById(id);\n+      checkWritePermission(pc, existing.getPool());\n       removeInternal(existing);\n     } catch (IOException e) {\n-      LOG.warn(\"removeDirective \" + id + \" failed.\", e);\n+      LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n       throw e;\n     }\n     if (monitor !\u003d null) {\n       monitor.kick();\n     }\n-    LOG.info(\"removeDirective \" + id + \": succeeded.\");\n+    LOG.info(\"removeDirective of \" + id + \" successful.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeDirective(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    try {\n      PathBasedCacheEntry existing \u003d getById(id);\n      checkWritePermission(pc, existing.getPool());\n      removeInternal(existing);\n    } catch (IOException e) {\n      LOG.warn(\"removeDirective of \" + id + \" failed: \", e);\n      throw e;\n    }\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDirective of \" + id + \" successful.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "f79b3e6b17450e9d34c483046b7437b09dd72016": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 2:07 PM",
      "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "21/10/13 12:29 PM",
          "commitNameOld": "f9c08d02ebe4a5477cf5d753f0d9d48fc6f9fa48",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 17.11,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-  public void removeDescriptor(long id, FSPermissionChecker pc)\n+  public void removeDirective(long id, FSPermissionChecker pc)\n       throws IOException {\n     assert namesystem.hasWriteLock();\n-    // Check for invalid IDs.\n-    if (id \u003c\u003d 0) {\n-      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n-          \"descriptor ID.\");\n-      throw new InvalidIdException(id);\n+    try {\n+      // Check for invalid IDs.\n+      if (id \u003c\u003d 0) {\n+        throw new IdNotFoundException(\"removeDirective \" + id + \": invalid \" +\n+            \"non-positive directive ID.\");\n+      }\n+      // Find the entry.\n+      PathBasedCacheEntry existing \u003d entriesById.get(id);\n+      if (existing \u003d\u003d null) {\n+        throw new IdNotFoundException(\"removeDirective \" + id +\n+            \": id not found.\");\n+      }\n+      if ((pc !\u003d null) \u0026\u0026\n+          (!pc.checkPermission(existing.getPool(), FsAction.WRITE))) {\n+        throw new AccessControlException(\"removeDirective \" + id +\n+            \": write permission denied on pool \" +\n+            existing.getPool().getPoolName());\n+      }\n+      removeInternal(existing);\n+    } catch (IOException e) {\n+      LOG.warn(\"removeDirective \" + id + \" failed.\", e);\n+      throw e;\n     }\n-    // Find the entry.\n-    PathBasedCacheEntry existing \u003d entriesById.get(id);\n-    if (existing \u003d\u003d null) {\n-      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n-      throw new NoSuchIdException(id);\n-    }\n-    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n-    if (pool \u003d\u003d null) {\n-      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n-        existing.getDescriptor());\n-      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n-    }\n-    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n-      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n-          \"pool \" + pool + \" for entry \" + existing);\n-      throw new RemovePermissionDeniedException(id);\n-    }\n-    \n-    // Remove the corresponding entry in entriesByPath.\n-    String path \u003d existing.getDescriptor().getPath().toUri().getPath();\n-    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n-    if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n-    }\n-    if (entries.size() \u003d\u003d 0) {\n-      entriesByPath.remove(path);\n-    }\n-    entriesById.remove(id);\n     if (monitor !\u003d null) {\n       monitor.kick();\n     }\n-    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n+    LOG.info(\"removeDirective \" + id + \": succeeded.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void removeDirective(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    try {\n      // Check for invalid IDs.\n      if (id \u003c\u003d 0) {\n        throw new IdNotFoundException(\"removeDirective \" + id + \": invalid \" +\n            \"non-positive directive ID.\");\n      }\n      // Find the entry.\n      PathBasedCacheEntry existing \u003d entriesById.get(id);\n      if (existing \u003d\u003d null) {\n        throw new IdNotFoundException(\"removeDirective \" + id +\n            \": id not found.\");\n      }\n      if ((pc !\u003d null) \u0026\u0026\n          (!pc.checkPermission(existing.getPool(), FsAction.WRITE))) {\n        throw new AccessControlException(\"removeDirective \" + id +\n            \": write permission denied on pool \" +\n            existing.getPool().getPoolName());\n      }\n      removeInternal(existing);\n    } catch (IOException e) {\n      LOG.warn(\"removeDirective \" + id + \" failed.\", e);\n      throw e;\n    }\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDirective \" + id + \": succeeded.\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "removeDescriptor",
            "newValue": "removeDirective"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "21/10/13 12:29 PM",
          "commitNameOld": "f9c08d02ebe4a5477cf5d753f0d9d48fc6f9fa48",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 17.11,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-  public void removeDescriptor(long id, FSPermissionChecker pc)\n+  public void removeDirective(long id, FSPermissionChecker pc)\n       throws IOException {\n     assert namesystem.hasWriteLock();\n-    // Check for invalid IDs.\n-    if (id \u003c\u003d 0) {\n-      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n-          \"descriptor ID.\");\n-      throw new InvalidIdException(id);\n+    try {\n+      // Check for invalid IDs.\n+      if (id \u003c\u003d 0) {\n+        throw new IdNotFoundException(\"removeDirective \" + id + \": invalid \" +\n+            \"non-positive directive ID.\");\n+      }\n+      // Find the entry.\n+      PathBasedCacheEntry existing \u003d entriesById.get(id);\n+      if (existing \u003d\u003d null) {\n+        throw new IdNotFoundException(\"removeDirective \" + id +\n+            \": id not found.\");\n+      }\n+      if ((pc !\u003d null) \u0026\u0026\n+          (!pc.checkPermission(existing.getPool(), FsAction.WRITE))) {\n+        throw new AccessControlException(\"removeDirective \" + id +\n+            \": write permission denied on pool \" +\n+            existing.getPool().getPoolName());\n+      }\n+      removeInternal(existing);\n+    } catch (IOException e) {\n+      LOG.warn(\"removeDirective \" + id + \" failed.\", e);\n+      throw e;\n     }\n-    // Find the entry.\n-    PathBasedCacheEntry existing \u003d entriesById.get(id);\n-    if (existing \u003d\u003d null) {\n-      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n-      throw new NoSuchIdException(id);\n-    }\n-    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n-    if (pool \u003d\u003d null) {\n-      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n-        existing.getDescriptor());\n-      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n-    }\n-    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n-      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n-          \"pool \" + pool + \" for entry \" + existing);\n-      throw new RemovePermissionDeniedException(id);\n-    }\n-    \n-    // Remove the corresponding entry in entriesByPath.\n-    String path \u003d existing.getDescriptor().getPath().toUri().getPath();\n-    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n-    if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n-    }\n-    if (entries.size() \u003d\u003d 0) {\n-      entriesByPath.remove(path);\n-    }\n-    entriesById.remove(id);\n     if (monitor !\u003d null) {\n       monitor.kick();\n     }\n-    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n+    LOG.info(\"removeDirective \" + id + \": succeeded.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void removeDirective(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    try {\n      // Check for invalid IDs.\n      if (id \u003c\u003d 0) {\n        throw new IdNotFoundException(\"removeDirective \" + id + \": invalid \" +\n            \"non-positive directive ID.\");\n      }\n      // Find the entry.\n      PathBasedCacheEntry existing \u003d entriesById.get(id);\n      if (existing \u003d\u003d null) {\n        throw new IdNotFoundException(\"removeDirective \" + id +\n            \": id not found.\");\n      }\n      if ((pc !\u003d null) \u0026\u0026\n          (!pc.checkPermission(existing.getPool(), FsAction.WRITE))) {\n        throw new AccessControlException(\"removeDirective \" + id +\n            \": write permission denied on pool \" +\n            existing.getPool().getPoolName());\n      }\n      removeInternal(existing);\n    } catch (IOException e) {\n      LOG.warn(\"removeDirective \" + id + \" failed.\", e);\n      throw e;\n    }\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDirective \" + id + \": succeeded.\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5096. Automatically cache new data added to a cached path (contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532924 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 3:15 PM",
      "commitName": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5096. Automatically cache new data added to a cached path (contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532924 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/10/13 3:15 PM",
          "commitName": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "14/10/13 3:56 PM",
          "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.97,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,42 @@\n-  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n+  public void removeDescriptor(long id, FSPermissionChecker pc)\n       throws IOException {\n+    assert namesystem.hasWriteLock();\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n       throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n       throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n       throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       throw new RemovePermissionDeniedException(id);\n     }\n     \n-    unprotectedRemoveDescriptor(id);\n+    // Remove the corresponding entry in entriesByPath.\n+    String path \u003d existing.getDescriptor().getPath().toUri().getPath();\n+    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n+    if (entries \u003d\u003d null || !entries.remove(existing)) {\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n+    }\n+    if (entries.size() \u003d\u003d 0) {\n+      entriesByPath.remove(path);\n+    }\n+    entriesById.remove(id);\n+    if (monitor !\u003d null) {\n+      monitor.kick();\n+    }\n+    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath().toUri().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5096. Automatically cache new data added to a cached path (contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532924 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/10/13 3:15 PM",
          "commitName": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "14/10/13 3:56 PM",
          "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.97,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,42 @@\n-  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n+  public void removeDescriptor(long id, FSPermissionChecker pc)\n       throws IOException {\n+    assert namesystem.hasWriteLock();\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n       throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n       throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n       throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       throw new RemovePermissionDeniedException(id);\n     }\n     \n-    unprotectedRemoveDescriptor(id);\n+    // Remove the corresponding entry in entriesByPath.\n+    String path \u003d existing.getDescriptor().getPath().toUri().getPath();\n+    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n+    if (entries \u003d\u003d null || !entries.remove(existing)) {\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n+    }\n+    if (entries.size() \u003d\u003d 0) {\n+      entriesByPath.remove(path);\n+    }\n+    entriesById.remove(id);\n+    if (monitor !\u003d null) {\n+      monitor.kick();\n+    }\n+    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    assert namesystem.hasWriteLock();\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath().toUri().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n    if (monitor !\u003d null) {\n      monitor.kick();\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "af1ac9a5e8d8d97a855940d853dd59ab4666f6e2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5119. Persist CacheManager state in the edit log. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 10:46 AM",
      "commitName": "af1ac9a5e8d8d97a855940d853dd59ab4666f6e2",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "20/09/13 5:20 PM",
      "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 13.73,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,28 @@\n   public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n       throws IOException {\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n       throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n       throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n       throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       throw new RemovePermissionDeniedException(id);\n     }\n     \n-    // Remove the corresponding entry in entriesByPath.\n-    String path \u003d existing.getDescriptor().getPath();\n-    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n-    if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n-    }\n-    if (entries.size() \u003d\u003d 0) {\n-      entriesByPath.remove(path);\n-    }\n-    entriesById.remove(id);\n-\n-    // Set the path as uncached in the namesystem\n-    try {\n-      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n-      if (node !\u003d null \u0026\u0026 node.isFile()) {\n-        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n-            (short) 0);\n-      }\n-    } catch (IOException e) {\n-      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n-          + \" replication factor\", e);\n-      throw e;\n-    }\n-    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n+    unprotectedRemoveDescriptor(id);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    unprotectedRemoveDescriptor(id);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "a0d9a155a4a4258f628e927e096ecf6673f788ec": {
      "type": "Ymultichange(Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/09/13 5:20 PM",
      "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,51 @@\n-  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n-        FSPermissionChecker pc) {\n+  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n+      throws IOException {\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n+      throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n+      throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n-      return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(id));\n+      throw new RemovePermissionDeniedException(id);\n     }\n     \n     // Remove the corresponding entry in entriesByPath.\n     String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n     entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n       INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n       if (node !\u003d null \u0026\u0026 node.isFile()) {\n         namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n       LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n-      return new Fallible\u003cLong\u003e(e);\n+      throw e;\n     }\n     LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n-    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      throw e;\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "Fallible\u003cLong\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,51 @@\n-  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n-        FSPermissionChecker pc) {\n+  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n+      throws IOException {\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n+      throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n+      throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n-      return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(id));\n+      throw new RemovePermissionDeniedException(id);\n     }\n     \n     // Remove the corresponding entry in entriesByPath.\n     String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n     entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n       INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n       if (node !\u003d null \u0026\u0026 node.isFile()) {\n         namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n       LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n-      return new Fallible\u003cLong\u003e(e);\n+      throw e;\n     }\n     LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n-    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      throw e;\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,51 @@\n-  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n-        FSPermissionChecker pc) {\n+  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n+      throws IOException {\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n+      throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n+      throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n-      return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(id));\n+      throw new RemovePermissionDeniedException(id);\n     }\n     \n     // Remove the corresponding entry in entriesByPath.\n     String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n     entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n       INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n       if (node !\u003d null \u0026\u0026 node.isFile()) {\n         namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n       LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n-      return new Fallible\u003cLong\u003e(e);\n+      throw e;\n     }\n     LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n-    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      throw e;\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,51 @@\n-  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n-        FSPermissionChecker pc) {\n+  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n+      throws IOException {\n     // Check for invalid IDs.\n     if (id \u003c\u003d 0) {\n       LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n           \"descriptor ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n+      throw new InvalidIdException(id);\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n+      throw new NoSuchIdException(id);\n     }\n     CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n         existing.getDescriptor());\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n-      return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(id));\n+      throw new RemovePermissionDeniedException(id);\n     }\n     \n     // Remove the corresponding entry in entriesByPath.\n     String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n+      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n     entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n       INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n       if (node !\u003d null \u0026\u0026 node.isFile()) {\n         namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n       LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n-      return new Fallible\u003cLong\u003e(e);\n+      throw e;\n     }\n     LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n-    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void removeDescriptor(long id, FSPermissionChecker pc)\n      throws IOException {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      throw new InvalidIdException(id);\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      throw new NoSuchIdException(id);\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      throw new RemovePermissionDeniedException(id);\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      throw new UnexpectedRemovePathBasedCacheDescriptorException(id);\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      throw e;\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 1:43 PM",
      "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "16/09/13 11:41 AM",
          "commitNameOld": "85c203602993a946fb5f41eadf1cf1484a0ce686",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,55 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n         FSPermissionChecker pc) {\n     // Check for invalid IDs.\n-    if (entryId \u003c\u003d 0) {\n-      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n+    if (id \u003c\u003d 0) {\n+      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n+          \"descriptor ID.\");\n+      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n     }\n     // Find the entry.\n-    PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n+    PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n-      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n+      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n+      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n     }\n-    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n-      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n-        existing.getDirective());\n+      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n+        existing.getDescriptor());\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n-      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(entryId));\n+          new RemovePermissionDeniedException(id));\n     }\n     \n-    // Remove the corresponding entry in entriesByDirective.\n-    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n-      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n-          existing + \" in entriesByDirective\");\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n-    }\n     // Remove the corresponding entry in entriesByPath.\n-    String path \u003d existing.getDirective().getPath();\n+    String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n-    entriesById.remove(entryId);\n+    entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n-      INode node \u003d dir.getINode(existing.getDirective().getPath());\n-      if (node.isFile()) {\n-        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),\n+      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n+      if (node !\u003d null \u0026\u0026 node.isFile()) {\n+        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n-      LOG.warn(\"removeEntry \" + entryId + \": failure while setting cache\"\n+      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n       return new Fallible\u003cLong\u003e(e);\n     }\n-    LOG.info(\"removeEntry successful for PathCacheEntry id \" + entryId);\n-    return new Fallible\u003cLong\u003e(entryId);\n+    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n+    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(id));\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      return new Fallible\u003cLong\u003e(e);\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n    return new Fallible\u003cLong\u003e(id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "removeEntry",
            "newValue": "removeDescriptor"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "16/09/13 11:41 AM",
          "commitNameOld": "85c203602993a946fb5f41eadf1cf1484a0ce686",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,55 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n         FSPermissionChecker pc) {\n     // Check for invalid IDs.\n-    if (entryId \u003c\u003d 0) {\n-      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n+    if (id \u003c\u003d 0) {\n+      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n+          \"descriptor ID.\");\n+      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n     }\n     // Find the entry.\n-    PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n+    PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n-      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n+      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n+      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n     }\n-    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n-      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n-        existing.getDirective());\n+      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n+        existing.getDescriptor());\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n-      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(entryId));\n+          new RemovePermissionDeniedException(id));\n     }\n     \n-    // Remove the corresponding entry in entriesByDirective.\n-    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n-      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n-          existing + \" in entriesByDirective\");\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n-    }\n     // Remove the corresponding entry in entriesByPath.\n-    String path \u003d existing.getDirective().getPath();\n+    String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n-    entriesById.remove(entryId);\n+    entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n-      INode node \u003d dir.getINode(existing.getDirective().getPath());\n-      if (node.isFile()) {\n-        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),\n+      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n+      if (node !\u003d null \u0026\u0026 node.isFile()) {\n+        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n-      LOG.warn(\"removeEntry \" + entryId + \": failure while setting cache\"\n+      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n       return new Fallible\u003cLong\u003e(e);\n     }\n-    LOG.info(\"removeEntry successful for PathCacheEntry id \" + entryId);\n-    return new Fallible\u003cLong\u003e(entryId);\n+    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n+    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(id));\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      return new Fallible\u003cLong\u003e(e);\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n    return new Fallible\u003cLong\u003e(id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[entryId-long, pc-FSPermissionChecker]",
            "newValue": "[id-long, pc-FSPermissionChecker]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "16/09/13 11:41 AM",
          "commitNameOld": "85c203602993a946fb5f41eadf1cf1484a0ce686",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,55 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n         FSPermissionChecker pc) {\n     // Check for invalid IDs.\n-    if (entryId \u003c\u003d 0) {\n-      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n-      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n+    if (id \u003c\u003d 0) {\n+      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n+          \"descriptor ID.\");\n+      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n     }\n     // Find the entry.\n-    PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n+    PathBasedCacheEntry existing \u003d entriesById.get(id);\n     if (existing \u003d\u003d null) {\n-      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n-      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n+      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n+      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n     }\n-    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n     if (pool \u003d\u003d null) {\n-      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n-        existing.getDirective());\n+      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n+        existing.getDescriptor());\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n-      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n-          new RemovePermissionDeniedException(entryId));\n+          new RemovePermissionDeniedException(id));\n     }\n     \n-    // Remove the corresponding entry in entriesByDirective.\n-    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n-      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n-          existing + \" in entriesByDirective\");\n-      return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n-    }\n     // Remove the corresponding entry in entriesByPath.\n-    String path \u003d existing.getDirective().getPath();\n+    String path \u003d existing.getDescriptor().getPath();\n     List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n     if (entries \u003d\u003d null || !entries.remove(existing)) {\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n     }\n     if (entries.size() \u003d\u003d 0) {\n       entriesByPath.remove(path);\n     }\n-    entriesById.remove(entryId);\n+    entriesById.remove(id);\n \n     // Set the path as uncached in the namesystem\n     try {\n-      INode node \u003d dir.getINode(existing.getDirective().getPath());\n-      if (node.isFile()) {\n-        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),\n+      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n+      if (node !\u003d null \u0026\u0026 node.isFile()) {\n+        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n             (short) 0);\n       }\n     } catch (IOException e) {\n-      LOG.warn(\"removeEntry \" + entryId + \": failure while setting cache\"\n+      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n           + \" replication factor\", e);\n       return new Fallible\u003cLong\u003e(e);\n     }\n-    LOG.info(\"removeEntry successful for PathCacheEntry id \" + entryId);\n-    return new Fallible\u003cLong\u003e(entryId);\n+    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n+    return new Fallible\u003cLong\u003e(id);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeDescriptor(long id,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (id \u003c\u003d 0) {\n      LOG.info(\"removeDescriptor \" + id + \": invalid non-positive \" +\n          \"descriptor ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(id));\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(id);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(id));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDescriptor().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeDescriptor \" + id + \": pool not found for directive \" +\n        existing.getDescriptor());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeDescriptor \" + id + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(id));\n    }\n    \n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDescriptor().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheDescriptorException(id));\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(id);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDescriptor().getPath());\n      if (node !\u003d null \u0026\u0026 node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDescriptor().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeDescriptor \" + id + \": failure while setting cache\"\n          + \" replication factor\", e);\n      return new Fallible\u003cLong\u003e(e);\n    }\n    LOG.info(\"removeDescriptor successful for PathCacheEntry id \" + id);\n    return new Fallible\u003cLong\u003e(id);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "40eb94ade3161d93e7a762a839004748f6d0ae89": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5053. NameNode should invoke DataNode APIs to coordinate caching. (Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:27 PM",
      "commitName": "40eb94ade3161d93e7a762a839004748f6d0ae89",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/09/13 8:55 PM",
      "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,61 @@\n   private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n         FSPermissionChecker pc) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n       LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n     CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n         existing.getDirective());\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathBasedCacheEntryException(entryId));\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n           new RemovePermissionDeniedException(entryId));\n     }\n     \n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n       LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n           existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathBasedCacheEntryException(entryId));\n     }\n+    // Remove the corresponding entry in entriesByPath.\n+    String path \u003d existing.getDirective().getPath();\n+    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n+    if (entries \u003d\u003d null || !entries.remove(existing)) {\n+      return new Fallible\u003cLong\u003e(\n+          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n+    }\n+    if (entries.size() \u003d\u003d 0) {\n+      entriesByPath.remove(path);\n+    }\n     entriesById.remove(entryId);\n+\n+    // Set the path as uncached in the namesystem\n+    try {\n+      INode node \u003d dir.getINode(existing.getDirective().getPath());\n+      if (node.isFile()) {\n+        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),\n+            (short) 0);\n+      }\n+    } catch (IOException e) {\n+      LOG.warn(\"removeEntry \" + entryId + \": failure while setting cache\"\n+          + \" replication factor\", e);\n+      return new Fallible\u003cLong\u003e(e);\n+    }\n+    LOG.info(\"removeEntry successful for PathCacheEntry id \" + entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(entryId));\n    }\n    \n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n    }\n    // Remove the corresponding entry in entriesByPath.\n    String path \u003d existing.getDirective().getPath();\n    List\u003cPathBasedCacheEntry\u003e entries \u003d entriesByPath.get(path);\n    if (entries \u003d\u003d null || !entries.remove(existing)) {\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n    }\n    if (entries.size() \u003d\u003d 0) {\n      entriesByPath.remove(path);\n    }\n    entriesById.remove(entryId);\n\n    // Set the path as uncached in the namesystem\n    try {\n      INode node \u003d dir.getINode(existing.getDirective().getPath());\n      if (node.isFile()) {\n        namesystem.setCacheReplicationInt(existing.getDirective().getPath(),\n            (short) 0);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"removeEntry \" + entryId + \": failure while setting cache\"\n          + \" replication factor\", e);\n      return new Fallible\u003cLong\u003e(e);\n    }\n    LOG.info(\"removeEntry successful for PathCacheEntry id \" + entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 8:55 PM",
      "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "09/09/13 11:53 AM",
      "commitNameOld": "3a9cd79e9ddd5a9499e28633ccccdc9eef22b813",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n         FSPermissionChecker pc) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n       LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n-    PathCacheEntry existing \u003d entriesById.get(entryId);\n+    PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n     CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n         existing.getDirective());\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n     }\n     if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n           new RemovePermissionDeniedException(entryId));\n     }\n     \n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n       LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n           existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n-          new UnexpectedRemovePathCacheEntryException(entryId));\n+          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathBasedCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(entryId));\n    }\n    \n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathBasedCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 11:52 AM",
      "commitName": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/13 11:52 AM",
          "commitName": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "04/09/13 11:23 AM",
          "commitNameOld": "d56d0b46e1b82ae068083ddb99872d314684dc82",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 2.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(FSPermissionChecker pc,\n-        long entryId) {\n+  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+        FSPermissionChecker pc) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n       LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n-    CachePool pool \u003d cachePoolsById.get(existing.getDirective().getPoolId());\n+    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n         existing.getDirective());\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n-    if (!pc.checkPermission(pool, FsAction.WRITE)) {\n+    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n           new RemovePermissionDeniedException(entryId));\n     }\n-\n+    \n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n       LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n           existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(entryId));\n    }\n    \n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[pc-FSPermissionChecker, entryId-long]",
            "newValue": "[entryId-long, pc-FSPermissionChecker]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/13 11:52 AM",
          "commitName": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "04/09/13 11:23 AM",
          "commitNameOld": "d56d0b46e1b82ae068083ddb99872d314684dc82",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 2.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(FSPermissionChecker pc,\n-        long entryId) {\n+  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+        FSPermissionChecker pc) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n       LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n-    CachePool pool \u003d cachePoolsById.get(existing.getDirective().getPoolId());\n+    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n         existing.getDirective());\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n-    if (!pc.checkPermission(pool, FsAction.WRITE)) {\n+    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n       LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n           \"pool \" + pool + \" for entry \" + existing);\n       return new Fallible\u003cLong\u003e(\n           new RemovePermissionDeniedException(entryId));\n     }\n-\n+    \n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n       LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n           existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    if ((pc !\u003d null) \u0026\u0026 (!pc.checkPermission(pool, FsAction.WRITE))) {\n      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(entryId));\n    }\n    \n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d56d0b46e1b82ae068083ddb99872d314684dc82": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "commit correct version of HDFS-5121\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/13 11:23 AM",
      "commitName": "d56d0b46e1b82ae068083ddb99872d314684dc82",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "commit correct version of HDFS-5121\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/09/13 11:23 AM",
          "commitName": "d56d0b46e1b82ae068083ddb99872d314684dc82",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "03/09/13 1:38 PM",
          "commitNameOld": "97b7267977ef42201e5844df49bc37ec3d10ce16",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,37 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n-        FSPermissionChecker pc) {\n+  private synchronized Fallible\u003cLong\u003e removeEntry(FSPermissionChecker pc,\n+        long entryId) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n       LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n-    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    CachePool pool \u003d cachePoolsById.get(existing.getDirective().getPoolId());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n         existing.getDirective());\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n-    if (!pc.isSuperUser()) {\n-      if (!pc.checkWritePermission(pool.getOwnerName(),\n-          pool.getGroupName(), pool.getMode())) {\n-        LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n-            \"pool \" + pool + \" for entry \" + existing);\n-        return new Fallible\u003cLong\u003e(\n-            new RemovePermissionDeniedException(entryId));\n-      }\n+    if (!pc.checkPermission(pool, FsAction.WRITE)) {\n+      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+          \"pool \" + pool + \" for entry \" + existing);\n+      return new Fallible\u003cLong\u003e(\n+          new RemovePermissionDeniedException(entryId));\n     }\n-    \n+\n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n       LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n           existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(FSPermissionChecker pc,\n        long entryId) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePoolsById.get(existing.getDirective().getPoolId());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    if (!pc.checkPermission(pool, FsAction.WRITE)) {\n      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(entryId));\n    }\n\n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[entryId-long, pc-FSPermissionChecker]",
            "newValue": "[pc-FSPermissionChecker, entryId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "commit correct version of HDFS-5121\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/09/13 11:23 AM",
          "commitName": "d56d0b46e1b82ae068083ddb99872d314684dc82",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "03/09/13 1:38 PM",
          "commitNameOld": "97b7267977ef42201e5844df49bc37ec3d10ce16",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,37 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n-        FSPermissionChecker pc) {\n+  private synchronized Fallible\u003cLong\u003e removeEntry(FSPermissionChecker pc,\n+        long entryId) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n       LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n-    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    CachePool pool \u003d cachePoolsById.get(existing.getDirective().getPoolId());\n     if (pool \u003d\u003d null) {\n       LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n         existing.getDirective());\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n-    if (!pc.isSuperUser()) {\n-      if (!pc.checkWritePermission(pool.getOwnerName(),\n-          pool.getGroupName(), pool.getMode())) {\n-        LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n-            \"pool \" + pool + \" for entry \" + existing);\n-        return new Fallible\u003cLong\u003e(\n-            new RemovePermissionDeniedException(entryId));\n-      }\n+    if (!pc.checkPermission(pool, FsAction.WRITE)) {\n+      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+          \"pool \" + pool + \" for entry \" + existing);\n+      return new Fallible\u003cLong\u003e(\n+          new RemovePermissionDeniedException(entryId));\n     }\n-    \n+\n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n       LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n           existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(FSPermissionChecker pc,\n        long entryId) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePoolsById.get(existing.getDirective().getPoolId());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    if (!pc.checkPermission(pool, FsAction.WRITE)) {\n      LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n          \"pool \" + pool + \" for entry \" + existing);\n      return new Fallible\u003cLong\u003e(\n          new RemovePermissionDeniedException(entryId));\n    }\n\n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "97b7267977ef42201e5844df49bc37ec3d10ce16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/09/13 1:38 PM",
      "commitName": "97b7267977ef42201e5844df49bc37ec3d10ce16",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/09/13 1:38 PM",
          "commitName": "97b7267977ef42201e5844df49bc37ec3d10ce16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "22/08/13 4:37 PM",
          "commitNameOld": "920b4cc06f1bc15809902bdd1968cc434a694a08",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 11.88,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,40 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId) {\n+  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+        FSPermissionChecker pc) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n+      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n+      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n+    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    if (pool \u003d\u003d null) {\n+      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n+        existing.getDirective());\n+      return new Fallible\u003cLong\u003e(\n+          new UnexpectedRemovePathCacheEntryException(entryId));\n+    }\n+    if (!pc.isSuperUser()) {\n+      if (!pc.checkWritePermission(pool.getOwnerName(),\n+          pool.getGroupName(), pool.getMode())) {\n+        LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+            \"pool \" + pool + \" for entry \" + existing);\n+        return new Fallible\u003cLong\u003e(\n+            new RemovePermissionDeniedException(entryId));\n+      }\n+    }\n+    \n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n+      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n+          existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    if (!pc.isSuperUser()) {\n      if (!pc.checkWritePermission(pool.getOwnerName(),\n          pool.getGroupName(), pool.getMode())) {\n        LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n            \"pool \" + pool + \" for entry \" + existing);\n        return new Fallible\u003cLong\u003e(\n            new RemovePermissionDeniedException(entryId));\n      }\n    }\n    \n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[entryId-long]",
            "newValue": "[entryId-long, pc-FSPermissionChecker]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/09/13 1:38 PM",
          "commitName": "97b7267977ef42201e5844df49bc37ec3d10ce16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "22/08/13 4:37 PM",
          "commitNameOld": "920b4cc06f1bc15809902bdd1968cc434a694a08",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 11.88,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,40 @@\n-  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId) {\n+  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n+        FSPermissionChecker pc) {\n     // Check for invalid IDs.\n     if (entryId \u003c\u003d 0) {\n+      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n       return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n     }\n     // Find the entry.\n     PathCacheEntry existing \u003d entriesById.get(entryId);\n     if (existing \u003d\u003d null) {\n+      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n       return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n     }\n+    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n+    if (pool \u003d\u003d null) {\n+      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n+        existing.getDirective());\n+      return new Fallible\u003cLong\u003e(\n+          new UnexpectedRemovePathCacheEntryException(entryId));\n+    }\n+    if (!pc.isSuperUser()) {\n+      if (!pc.checkWritePermission(pool.getOwnerName(),\n+          pool.getGroupName(), pool.getMode())) {\n+        LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n+            \"pool \" + pool + \" for entry \" + existing);\n+        return new Fallible\u003cLong\u003e(\n+            new RemovePermissionDeniedException(entryId));\n+      }\n+    }\n+    \n     // Remove the corresponding entry in entriesByDirective.\n     if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n+      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n+          existing + \" in entriesByDirective\");\n       return new Fallible\u003cLong\u003e(\n           new UnexpectedRemovePathCacheEntryException(entryId));\n     }\n     entriesById.remove(entryId);\n     return new Fallible\u003cLong\u003e(entryId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId,\n        FSPermissionChecker pc) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      LOG.info(\"removeEntry \" + entryId + \": invalid non-positive entry ID.\");\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": entry not found.\");\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    CachePool pool \u003d cachePools.get(existing.getDirective().getPool());\n    if (pool \u003d\u003d null) {\n      LOG.info(\"removeEntry \" + entryId + \": pool not found for directive \" +\n        existing.getDirective());\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    if (!pc.isSuperUser()) {\n      if (!pc.checkWritePermission(pool.getOwnerName(),\n          pool.getGroupName(), pool.getMode())) {\n        LOG.info(\"removeEntry \" + entryId + \": write permission denied to \" +\n            \"pool \" + pool + \" for entry \" + existing);\n        return new Fallible\u003cLong\u003e(\n            new RemovePermissionDeniedException(entryId));\n      }\n    }\n    \n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      LOG.warn(\"removeEntry \" + entryId + \": failed to find existing entry \" +\n          existing + \" in entriesByDirective\");\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "920b4cc06f1bc15809902bdd1968cc434a694a08": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5052. Add cacheRequest/uncacheRequest support to NameNode.  (Contributed by Colin Patrick McCabe.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1516669 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/13 4:37 PM",
      "commitName": "920b4cc06f1bc15809902bdd1968cc434a694a08",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,18 @@\n+  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId) {\n+    // Check for invalid IDs.\n+    if (entryId \u003c\u003d 0) {\n+      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n+    }\n+    // Find the entry.\n+    PathCacheEntry existing \u003d entriesById.get(entryId);\n+    if (existing \u003d\u003d null) {\n+      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n+    }\n+    // Remove the corresponding entry in entriesByDirective.\n+    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n+      return new Fallible\u003cLong\u003e(\n+          new UnexpectedRemovePathCacheEntryException(entryId));\n+    }\n+    entriesById.remove(entryId);\n+    return new Fallible\u003cLong\u003e(entryId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Fallible\u003cLong\u003e removeEntry(long entryId) {\n    // Check for invalid IDs.\n    if (entryId \u003c\u003d 0) {\n      return new Fallible\u003cLong\u003e(new InvalidIdException(entryId));\n    }\n    // Find the entry.\n    PathCacheEntry existing \u003d entriesById.get(entryId);\n    if (existing \u003d\u003d null) {\n      return new Fallible\u003cLong\u003e(new NoSuchIdException(entryId));\n    }\n    // Remove the corresponding entry in entriesByDirective.\n    if (entriesByDirective.remove(existing.getDirective()) \u003d\u003d null) {\n      return new Fallible\u003cLong\u003e(\n          new UnexpectedRemovePathCacheEntryException(entryId));\n    }\n    entriesById.remove(entryId);\n    return new Fallible\u003cLong\u003e(entryId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java"
    }
  }
}