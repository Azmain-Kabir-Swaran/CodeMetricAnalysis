{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryCollection.java",
  "functionName": "checkDirs",
  "functionId": "checkDirs",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
  "functionStartLine": 417,
  "functionEndLine": 508,
  "numCommitsSeen": 20,
  "timeTaken": 3348,
  "changeHistory": [
    "f9a0e2338150f1bd3ba2c29f76979183fd3ed80c",
    "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692",
    "8d226225d030253152494bda32708377ad0f7af7",
    "b72507810aece08e17ab4b5aae1f7eae1fe98609",
    "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
    "0b1304d098169bda3c7eadf9a07dd0b9e87ab150",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "719b719e3dd622ebc5cea46c63e2dbfdc397863c",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb"
  ],
  "changeHistoryShort": {
    "f9a0e2338150f1bd3ba2c29f76979183fd3ed80c": "Ybodychange",
    "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692": "Ymultichange(Ymodifierchange,Ybodychange)",
    "8d226225d030253152494bda32708377ad0f7af7": "Ybodychange",
    "b72507810aece08e17ab4b5aae1f7eae1fe98609": "Ybodychange",
    "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c": "Ybodychange",
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": "Ybodychange",
    "0b1304d098169bda3c7eadf9a07dd0b9e87ab150": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "719b719e3dd622ebc5cea46c63e2dbfdc397863c": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f9a0e2338150f1bd3ba2c29f76979183fd3ed80c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3254. HealthReport should include disk full information. Contributed by Suma Shivaprasad.\n",
      "commitDate": "17/08/17 2:37 AM",
      "commitName": "f9a0e2338150f1bd3ba2c29f76979183fd3ed80c",
      "commitAuthor": "Sunil G",
      "commitDateOld": "10/04/17 2:56 PM",
      "commitNameOld": "e9ac61cc0e55d1a0b132c795047e959c761dc3be",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 128.49,
      "commitsBetweenForRepo": 732,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,92 @@\n   boolean checkDirs() {\n     boolean setChanged \u003d false;\n     Set\u003cString\u003e preCheckGoodDirs \u003d null;\n     Set\u003cString\u003e preCheckFullDirs \u003d null;\n     Set\u003cString\u003e preCheckOtherErrorDirs \u003d null;\n     List\u003cString\u003e failedDirs \u003d null;\n     List\u003cString\u003e allLocalDirs \u003d null;\n     this.readLock.lock();\n     try {\n       preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n       preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n       preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n       failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n       allLocalDirs \u003d DirectoryCollection.concat(localDirs, failedDirs);\n     } finally {\n       this.readLock.unlock();\n     }\n \n     // move testDirs out of any lock as it could wait for very long time in\n     // case of busy IO\n     Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n         preCheckGoodDirs);\n \n     this.writeLock.lock();\n     try {\n       localDirs.clear();\n       errorDirs.clear();\n       fullDirs.clear();\n+      directoryErrorInfo.clear();\n \n       for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n           .entrySet()) {\n         String dir \u003d entry.getKey();\n         DiskErrorInformation errorInformation \u003d entry.getValue();\n+\n         switch (entry.getValue().cause) {\n         case DISK_FULL:\n           fullDirs.add(entry.getKey());\n           break;\n         case OTHER:\n           errorDirs.add(entry.getKey());\n           break;\n         default:\n           LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\n           break;\n         }\n+        directoryErrorInfo.put(entry.getKey(), errorInformation);\n+\n         if (preCheckGoodDirs.contains(dir)) {\n           LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n               + \", removing from list of valid directories\");\n           setChanged \u003d true;\n           numFailures++;\n         }\n       }\n       for (String dir : allLocalDirs) {\n         if (!dirsFailedCheck.containsKey(dir)) {\n           localDirs.add(dir);\n           if (preCheckFullDirs.contains(dir)\n               || preCheckOtherErrorDirs.contains(dir)) {\n             setChanged \u003d true;\n             LOG.info(\"Directory \" + dir\n                 + \" passed disk check, adding to list of valid directories.\");\n           }\n         }\n       }\n       Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n       Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n       for (String dir : preCheckFullDirs) {\n         if (postCheckOtherDirs.contains(dir)) {\n           LOG.warn(\"Directory \" + dir + \" error \"\n               + dirsFailedCheck.get(dir).message);\n         }\n       }\n \n       for (String dir : preCheckOtherErrorDirs) {\n         if (postCheckFullDirs.contains(dir)) {\n           LOG.warn(\"Directory \" + dir + \" error \"\n               + dirsFailedCheck.get(dir).message);\n         }\n       }\n       setGoodDirsDiskUtilizationPercentage();\n       if (setChanged) {\n         for (DirsChangeListener listener : dirsChangeListeners) {\n           listener.onDirsChanged();\n         }\n       }\n       return setChanged;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d null;\n    Set\u003cString\u003e preCheckFullDirs \u003d null;\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d null;\n    List\u003cString\u003e failedDirs \u003d null;\n    List\u003cString\u003e allLocalDirs \u003d null;\n    this.readLock.lock();\n    try {\n      preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n      preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n      preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n      failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n      allLocalDirs \u003d DirectoryCollection.concat(localDirs, failedDirs);\n    } finally {\n      this.readLock.unlock();\n    }\n\n    // move testDirs out of any lock as it could wait for very long time in\n    // case of busy IO\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n        preCheckGoodDirs);\n\n    this.writeLock.lock();\n    try {\n      localDirs.clear();\n      errorDirs.clear();\n      fullDirs.clear();\n      directoryErrorInfo.clear();\n\n      for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n          .entrySet()) {\n        String dir \u003d entry.getKey();\n        DiskErrorInformation errorInformation \u003d entry.getValue();\n\n        switch (entry.getValue().cause) {\n        case DISK_FULL:\n          fullDirs.add(entry.getKey());\n          break;\n        case OTHER:\n          errorDirs.add(entry.getKey());\n          break;\n        default:\n          LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\n          break;\n        }\n        directoryErrorInfo.put(entry.getKey(), errorInformation);\n\n        if (preCheckGoodDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n              + \", removing from list of valid directories\");\n          setChanged \u003d true;\n          numFailures++;\n        }\n      }\n      for (String dir : allLocalDirs) {\n        if (!dirsFailedCheck.containsKey(dir)) {\n          localDirs.add(dir);\n          if (preCheckFullDirs.contains(dir)\n              || preCheckOtherErrorDirs.contains(dir)) {\n            setChanged \u003d true;\n            LOG.info(\"Directory \" + dir\n                + \" passed disk check, adding to list of valid directories.\");\n          }\n        }\n      }\n      Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n      Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n      for (String dir : preCheckFullDirs) {\n        if (postCheckOtherDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error \"\n              + dirsFailedCheck.get(dir).message);\n        }\n      }\n\n      for (String dir : preCheckOtherErrorDirs) {\n        if (postCheckFullDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error \"\n              + dirsFailedCheck.get(dir).message);\n        }\n      }\n      setGoodDirsDiskUtilizationPercentage();\n      if (setChanged) {\n        for (DirsChangeListener listener : dirsChangeListeners) {\n          listener.onDirsChanged();\n        }\n      }\n      return setChanged;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5214. Fixed locking in DirectoryCollection to avoid hanging NMs when various code-paths hit slow disks. Contributed by Junping Du.\n",
      "commitDate": "05/07/16 4:07 PM",
      "commitName": "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5214. Fixed locking in DirectoryCollection to avoid hanging NMs when various code-paths hit slow disks. Contributed by Junping Du.\n",
          "commitDate": "05/07/16 4:07 PM",
          "commitName": "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/10/15 3:25 PM",
          "commitNameOld": "8d226225d030253152494bda32708377ad0f7af7",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 271.03,
          "commitsBetweenForRepo": 1805,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,88 @@\n-  synchronized boolean checkDirs() {\n+  boolean checkDirs() {\n     boolean setChanged \u003d false;\n-    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n-    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n-    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n-    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n-    List\u003cString\u003e allLocalDirs \u003d\n-        DirectoryCollection.concat(localDirs, failedDirs);\n+    Set\u003cString\u003e preCheckGoodDirs \u003d null;\n+    Set\u003cString\u003e preCheckFullDirs \u003d null;\n+    Set\u003cString\u003e preCheckOtherErrorDirs \u003d null;\n+    List\u003cString\u003e failedDirs \u003d null;\n+    List\u003cString\u003e allLocalDirs \u003d null;\n+    this.readLock.lock();\n+    try {\n+      preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n+      preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n+      preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n+      failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n+      allLocalDirs \u003d DirectoryCollection.concat(localDirs, failedDirs);\n+    } finally {\n+      this.readLock.unlock();\n+    }\n \n+    // move testDirs out of any lock as it could wait for very long time in\n+    // case of busy IO\n     Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n         preCheckGoodDirs);\n \n-    localDirs.clear();\n-    errorDirs.clear();\n-    fullDirs.clear();\n+    this.writeLock.lock();\n+    try {\n+      localDirs.clear();\n+      errorDirs.clear();\n+      fullDirs.clear();\n \n-    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n-      .entrySet()) {\n-      String dir \u003d entry.getKey();\n-      DiskErrorInformation errorInformation \u003d entry.getValue();\n-      switch (entry.getValue().cause) {\n-      case DISK_FULL:\n-        fullDirs.add(entry.getKey());\n-        break;\n-      case OTHER:\n-        errorDirs.add(entry.getKey());\n-        break;\n-      }\n-      if (preCheckGoodDirs.contains(dir)) {\n-        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n-            + \", removing from list of valid directories\");\n-        setChanged \u003d true;\n-        numFailures++;\n-      }\n-    }\n-    for (String dir : allLocalDirs) {\n-      if (!dirsFailedCheck.containsKey(dir)) {\n-        localDirs.add(dir);\n-        if (preCheckFullDirs.contains(dir)\n-            || preCheckOtherErrorDirs.contains(dir)) {\n+      for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n+          .entrySet()) {\n+        String dir \u003d entry.getKey();\n+        DiskErrorInformation errorInformation \u003d entry.getValue();\n+        switch (entry.getValue().cause) {\n+        case DISK_FULL:\n+          fullDirs.add(entry.getKey());\n+          break;\n+        case OTHER:\n+          errorDirs.add(entry.getKey());\n+          break;\n+        default:\n+          LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\n+          break;\n+        }\n+        if (preCheckGoodDirs.contains(dir)) {\n+          LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n+              + \", removing from list of valid directories\");\n           setChanged \u003d true;\n-          LOG.info(\"Directory \" + dir\n-              + \" passed disk check, adding to list of valid directories.\");\n+          numFailures++;\n         }\n       }\n-    }\n-    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n-    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n-    for (String dir : preCheckFullDirs) {\n-      if (postCheckOtherDirs.contains(dir)) {\n-        LOG.warn(\"Directory \" + dir + \" error \"\n-            + dirsFailedCheck.get(dir).message);\n+      for (String dir : allLocalDirs) {\n+        if (!dirsFailedCheck.containsKey(dir)) {\n+          localDirs.add(dir);\n+          if (preCheckFullDirs.contains(dir)\n+              || preCheckOtherErrorDirs.contains(dir)) {\n+            setChanged \u003d true;\n+            LOG.info(\"Directory \" + dir\n+                + \" passed disk check, adding to list of valid directories.\");\n+          }\n+        }\n       }\n-    }\n+      Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n+      Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n+      for (String dir : preCheckFullDirs) {\n+        if (postCheckOtherDirs.contains(dir)) {\n+          LOG.warn(\"Directory \" + dir + \" error \"\n+              + dirsFailedCheck.get(dir).message);\n+        }\n+      }\n \n-    for (String dir : preCheckOtherErrorDirs) {\n-      if (postCheckFullDirs.contains(dir)) {\n-        LOG.warn(\"Directory \" + dir + \" error \"\n-            + dirsFailedCheck.get(dir).message);\n+      for (String dir : preCheckOtherErrorDirs) {\n+        if (postCheckFullDirs.contains(dir)) {\n+          LOG.warn(\"Directory \" + dir + \" error \"\n+              + dirsFailedCheck.get(dir).message);\n+        }\n       }\n-    }\n-    setGoodDirsDiskUtilizationPercentage();\n-    if (setChanged) {\n-      for (DirsChangeListener listener : dirsChangeListeners) {\n-        listener.onDirsChanged();\n+      setGoodDirsDiskUtilizationPercentage();\n+      if (setChanged) {\n+        for (DirsChangeListener listener : dirsChangeListeners) {\n+          listener.onDirsChanged();\n+        }\n       }\n+      return setChanged;\n+    } finally {\n+      this.writeLock.unlock();\n     }\n-    return setChanged;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d null;\n    Set\u003cString\u003e preCheckFullDirs \u003d null;\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d null;\n    List\u003cString\u003e failedDirs \u003d null;\n    List\u003cString\u003e allLocalDirs \u003d null;\n    this.readLock.lock();\n    try {\n      preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n      preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n      preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n      failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n      allLocalDirs \u003d DirectoryCollection.concat(localDirs, failedDirs);\n    } finally {\n      this.readLock.unlock();\n    }\n\n    // move testDirs out of any lock as it could wait for very long time in\n    // case of busy IO\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n        preCheckGoodDirs);\n\n    this.writeLock.lock();\n    try {\n      localDirs.clear();\n      errorDirs.clear();\n      fullDirs.clear();\n\n      for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n          .entrySet()) {\n        String dir \u003d entry.getKey();\n        DiskErrorInformation errorInformation \u003d entry.getValue();\n        switch (entry.getValue().cause) {\n        case DISK_FULL:\n          fullDirs.add(entry.getKey());\n          break;\n        case OTHER:\n          errorDirs.add(entry.getKey());\n          break;\n        default:\n          LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\n          break;\n        }\n        if (preCheckGoodDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n              + \", removing from list of valid directories\");\n          setChanged \u003d true;\n          numFailures++;\n        }\n      }\n      for (String dir : allLocalDirs) {\n        if (!dirsFailedCheck.containsKey(dir)) {\n          localDirs.add(dir);\n          if (preCheckFullDirs.contains(dir)\n              || preCheckOtherErrorDirs.contains(dir)) {\n            setChanged \u003d true;\n            LOG.info(\"Directory \" + dir\n                + \" passed disk check, adding to list of valid directories.\");\n          }\n        }\n      }\n      Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n      Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n      for (String dir : preCheckFullDirs) {\n        if (postCheckOtherDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error \"\n              + dirsFailedCheck.get(dir).message);\n        }\n      }\n\n      for (String dir : preCheckOtherErrorDirs) {\n        if (postCheckFullDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error \"\n              + dirsFailedCheck.get(dir).message);\n        }\n      }\n      setGoodDirsDiskUtilizationPercentage();\n      if (setChanged) {\n        for (DirsChangeListener listener : dirsChangeListeners) {\n          listener.onDirsChanged();\n        }\n      }\n      return setChanged;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5214. Fixed locking in DirectoryCollection to avoid hanging NMs when various code-paths hit slow disks. Contributed by Junping Du.\n",
          "commitDate": "05/07/16 4:07 PM",
          "commitName": "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/10/15 3:25 PM",
          "commitNameOld": "8d226225d030253152494bda32708377ad0f7af7",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 271.03,
          "commitsBetweenForRepo": 1805,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,88 @@\n-  synchronized boolean checkDirs() {\n+  boolean checkDirs() {\n     boolean setChanged \u003d false;\n-    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n-    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n-    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n-    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n-    List\u003cString\u003e allLocalDirs \u003d\n-        DirectoryCollection.concat(localDirs, failedDirs);\n+    Set\u003cString\u003e preCheckGoodDirs \u003d null;\n+    Set\u003cString\u003e preCheckFullDirs \u003d null;\n+    Set\u003cString\u003e preCheckOtherErrorDirs \u003d null;\n+    List\u003cString\u003e failedDirs \u003d null;\n+    List\u003cString\u003e allLocalDirs \u003d null;\n+    this.readLock.lock();\n+    try {\n+      preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n+      preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n+      preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n+      failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n+      allLocalDirs \u003d DirectoryCollection.concat(localDirs, failedDirs);\n+    } finally {\n+      this.readLock.unlock();\n+    }\n \n+    // move testDirs out of any lock as it could wait for very long time in\n+    // case of busy IO\n     Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n         preCheckGoodDirs);\n \n-    localDirs.clear();\n-    errorDirs.clear();\n-    fullDirs.clear();\n+    this.writeLock.lock();\n+    try {\n+      localDirs.clear();\n+      errorDirs.clear();\n+      fullDirs.clear();\n \n-    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n-      .entrySet()) {\n-      String dir \u003d entry.getKey();\n-      DiskErrorInformation errorInformation \u003d entry.getValue();\n-      switch (entry.getValue().cause) {\n-      case DISK_FULL:\n-        fullDirs.add(entry.getKey());\n-        break;\n-      case OTHER:\n-        errorDirs.add(entry.getKey());\n-        break;\n-      }\n-      if (preCheckGoodDirs.contains(dir)) {\n-        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n-            + \", removing from list of valid directories\");\n-        setChanged \u003d true;\n-        numFailures++;\n-      }\n-    }\n-    for (String dir : allLocalDirs) {\n-      if (!dirsFailedCheck.containsKey(dir)) {\n-        localDirs.add(dir);\n-        if (preCheckFullDirs.contains(dir)\n-            || preCheckOtherErrorDirs.contains(dir)) {\n+      for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n+          .entrySet()) {\n+        String dir \u003d entry.getKey();\n+        DiskErrorInformation errorInformation \u003d entry.getValue();\n+        switch (entry.getValue().cause) {\n+        case DISK_FULL:\n+          fullDirs.add(entry.getKey());\n+          break;\n+        case OTHER:\n+          errorDirs.add(entry.getKey());\n+          break;\n+        default:\n+          LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\n+          break;\n+        }\n+        if (preCheckGoodDirs.contains(dir)) {\n+          LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n+              + \", removing from list of valid directories\");\n           setChanged \u003d true;\n-          LOG.info(\"Directory \" + dir\n-              + \" passed disk check, adding to list of valid directories.\");\n+          numFailures++;\n         }\n       }\n-    }\n-    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n-    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n-    for (String dir : preCheckFullDirs) {\n-      if (postCheckOtherDirs.contains(dir)) {\n-        LOG.warn(\"Directory \" + dir + \" error \"\n-            + dirsFailedCheck.get(dir).message);\n+      for (String dir : allLocalDirs) {\n+        if (!dirsFailedCheck.containsKey(dir)) {\n+          localDirs.add(dir);\n+          if (preCheckFullDirs.contains(dir)\n+              || preCheckOtherErrorDirs.contains(dir)) {\n+            setChanged \u003d true;\n+            LOG.info(\"Directory \" + dir\n+                + \" passed disk check, adding to list of valid directories.\");\n+          }\n+        }\n       }\n-    }\n+      Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n+      Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n+      for (String dir : preCheckFullDirs) {\n+        if (postCheckOtherDirs.contains(dir)) {\n+          LOG.warn(\"Directory \" + dir + \" error \"\n+              + dirsFailedCheck.get(dir).message);\n+        }\n+      }\n \n-    for (String dir : preCheckOtherErrorDirs) {\n-      if (postCheckFullDirs.contains(dir)) {\n-        LOG.warn(\"Directory \" + dir + \" error \"\n-            + dirsFailedCheck.get(dir).message);\n+      for (String dir : preCheckOtherErrorDirs) {\n+        if (postCheckFullDirs.contains(dir)) {\n+          LOG.warn(\"Directory \" + dir + \" error \"\n+              + dirsFailedCheck.get(dir).message);\n+        }\n       }\n-    }\n-    setGoodDirsDiskUtilizationPercentage();\n-    if (setChanged) {\n-      for (DirsChangeListener listener : dirsChangeListeners) {\n-        listener.onDirsChanged();\n+      setGoodDirsDiskUtilizationPercentage();\n+      if (setChanged) {\n+        for (DirsChangeListener listener : dirsChangeListeners) {\n+          listener.onDirsChanged();\n+        }\n       }\n+      return setChanged;\n+    } finally {\n+      this.writeLock.unlock();\n     }\n-    return setChanged;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d null;\n    Set\u003cString\u003e preCheckFullDirs \u003d null;\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d null;\n    List\u003cString\u003e failedDirs \u003d null;\n    List\u003cString\u003e allLocalDirs \u003d null;\n    this.readLock.lock();\n    try {\n      preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n      preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n      preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n      failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n      allLocalDirs \u003d DirectoryCollection.concat(localDirs, failedDirs);\n    } finally {\n      this.readLock.unlock();\n    }\n\n    // move testDirs out of any lock as it could wait for very long time in\n    // case of busy IO\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n        preCheckGoodDirs);\n\n    this.writeLock.lock();\n    try {\n      localDirs.clear();\n      errorDirs.clear();\n      fullDirs.clear();\n\n      for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n          .entrySet()) {\n        String dir \u003d entry.getKey();\n        DiskErrorInformation errorInformation \u003d entry.getValue();\n        switch (entry.getValue().cause) {\n        case DISK_FULL:\n          fullDirs.add(entry.getKey());\n          break;\n        case OTHER:\n          errorDirs.add(entry.getKey());\n          break;\n        default:\n          LOG.warn(entry.getValue().cause + \" is unknown for disk error.\");\n          break;\n        }\n        if (preCheckGoodDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n              + \", removing from list of valid directories\");\n          setChanged \u003d true;\n          numFailures++;\n        }\n      }\n      for (String dir : allLocalDirs) {\n        if (!dirsFailedCheck.containsKey(dir)) {\n          localDirs.add(dir);\n          if (preCheckFullDirs.contains(dir)\n              || preCheckOtherErrorDirs.contains(dir)) {\n            setChanged \u003d true;\n            LOG.info(\"Directory \" + dir\n                + \" passed disk check, adding to list of valid directories.\");\n          }\n        }\n      }\n      Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n      Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n      for (String dir : preCheckFullDirs) {\n        if (postCheckOtherDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error \"\n              + dirsFailedCheck.get(dir).message);\n        }\n      }\n\n      for (String dir : preCheckOtherErrorDirs) {\n        if (postCheckFullDirs.contains(dir)) {\n          LOG.warn(\"Directory \" + dir + \" error \"\n              + dirsFailedCheck.get(dir).message);\n        }\n      }\n      setGoodDirsDiskUtilizationPercentage();\n      if (setChanged) {\n        for (DirsChangeListener listener : dirsChangeListeners) {\n          listener.onDirsChanged();\n        }\n      }\n      return setChanged;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
          "extendedDetails": {}
        }
      ]
    },
    "8d226225d030253152494bda32708377ad0f7af7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3943. Use separate threshold configurations for disk-full detection and disk-not-full detection. Contributed by Zhihai Xu\n",
      "commitDate": "08/10/15 3:25 PM",
      "commitName": "8d226225d030253152494bda32708377ad0f7af7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "06/05/15 2:19 PM",
      "commitNameOld": "b72507810aece08e17ab4b5aae1f7eae1fe98609",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 155.05,
      "commitsBetweenForRepo": 1293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n   synchronized boolean checkDirs() {\n     boolean setChanged \u003d false;\n     Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n     Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n     Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n     List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n     List\u003cString\u003e allLocalDirs \u003d\n         DirectoryCollection.concat(localDirs, failedDirs);\n \n-    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n+    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n+        preCheckGoodDirs);\n \n     localDirs.clear();\n     errorDirs.clear();\n     fullDirs.clear();\n \n     for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n       .entrySet()) {\n       String dir \u003d entry.getKey();\n       DiskErrorInformation errorInformation \u003d entry.getValue();\n       switch (entry.getValue().cause) {\n       case DISK_FULL:\n         fullDirs.add(entry.getKey());\n         break;\n       case OTHER:\n         errorDirs.add(entry.getKey());\n         break;\n       }\n       if (preCheckGoodDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n             + \", removing from list of valid directories\");\n         setChanged \u003d true;\n         numFailures++;\n       }\n     }\n     for (String dir : allLocalDirs) {\n       if (!dirsFailedCheck.containsKey(dir)) {\n         localDirs.add(dir);\n         if (preCheckFullDirs.contains(dir)\n             || preCheckOtherErrorDirs.contains(dir)) {\n           setChanged \u003d true;\n           LOG.info(\"Directory \" + dir\n               + \" passed disk check, adding to list of valid directories.\");\n         }\n       }\n     }\n     Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n     Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n     for (String dir : preCheckFullDirs) {\n       if (postCheckOtherDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error \"\n             + dirsFailedCheck.get(dir).message);\n       }\n     }\n \n     for (String dir : preCheckOtherErrorDirs) {\n       if (postCheckFullDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error \"\n             + dirsFailedCheck.get(dir).message);\n       }\n     }\n     setGoodDirsDiskUtilizationPercentage();\n     if (setChanged) {\n       for (DirsChangeListener listener : dirsChangeListeners) {\n         listener.onDirsChanged();\n       }\n     }\n     return setChanged;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n    List\u003cString\u003e allLocalDirs \u003d\n        DirectoryCollection.concat(localDirs, failedDirs);\n\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs,\n        preCheckGoodDirs);\n\n    localDirs.clear();\n    errorDirs.clear();\n    fullDirs.clear();\n\n    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n      .entrySet()) {\n      String dir \u003d entry.getKey();\n      DiskErrorInformation errorInformation \u003d entry.getValue();\n      switch (entry.getValue().cause) {\n      case DISK_FULL:\n        fullDirs.add(entry.getKey());\n        break;\n      case OTHER:\n        errorDirs.add(entry.getKey());\n        break;\n      }\n      if (preCheckGoodDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n            + \", removing from list of valid directories\");\n        setChanged \u003d true;\n        numFailures++;\n      }\n    }\n    for (String dir : allLocalDirs) {\n      if (!dirsFailedCheck.containsKey(dir)) {\n        localDirs.add(dir);\n        if (preCheckFullDirs.contains(dir)\n            || preCheckOtherErrorDirs.contains(dir)) {\n          setChanged \u003d true;\n          LOG.info(\"Directory \" + dir\n              + \" passed disk check, adding to list of valid directories.\");\n        }\n      }\n    }\n    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    for (String dir : preCheckFullDirs) {\n      if (postCheckOtherDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n\n    for (String dir : preCheckOtherErrorDirs) {\n      if (postCheckFullDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n    setGoodDirsDiskUtilizationPercentage();\n    if (setChanged) {\n      for (DirsChangeListener listener : dirsChangeListeners) {\n        listener.onDirsChanged();\n      }\n    }\n    return setChanged;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "b72507810aece08e17ab4b5aae1f7eae1fe98609": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3491. PublicLocalizer#addResource is too slow. (zxu via rkanter)\n",
      "commitDate": "06/05/15 2:19 PM",
      "commitName": "b72507810aece08e17ab4b5aae1f7eae1fe98609",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "21/04/15 8:57 PM",
      "commitNameOld": "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.72,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,68 @@\n   synchronized boolean checkDirs() {\n     boolean setChanged \u003d false;\n     Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n     Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n     Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n     List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n     List\u003cString\u003e allLocalDirs \u003d\n         DirectoryCollection.concat(localDirs, failedDirs);\n \n     Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n \n     localDirs.clear();\n     errorDirs.clear();\n     fullDirs.clear();\n \n     for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n       .entrySet()) {\n       String dir \u003d entry.getKey();\n       DiskErrorInformation errorInformation \u003d entry.getValue();\n       switch (entry.getValue().cause) {\n       case DISK_FULL:\n         fullDirs.add(entry.getKey());\n         break;\n       case OTHER:\n         errorDirs.add(entry.getKey());\n         break;\n       }\n       if (preCheckGoodDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n             + \", removing from list of valid directories\");\n         setChanged \u003d true;\n         numFailures++;\n       }\n     }\n     for (String dir : allLocalDirs) {\n       if (!dirsFailedCheck.containsKey(dir)) {\n         localDirs.add(dir);\n         if (preCheckFullDirs.contains(dir)\n             || preCheckOtherErrorDirs.contains(dir)) {\n           setChanged \u003d true;\n           LOG.info(\"Directory \" + dir\n               + \" passed disk check, adding to list of valid directories.\");\n         }\n       }\n     }\n     Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n     Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n     for (String dir : preCheckFullDirs) {\n       if (postCheckOtherDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error \"\n             + dirsFailedCheck.get(dir).message);\n       }\n     }\n \n     for (String dir : preCheckOtherErrorDirs) {\n       if (postCheckFullDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error \"\n             + dirsFailedCheck.get(dir).message);\n       }\n     }\n     setGoodDirsDiskUtilizationPercentage();\n+    if (setChanged) {\n+      for (DirsChangeListener listener : dirsChangeListeners) {\n+        listener.onDirsChanged();\n+      }\n+    }\n     return setChanged;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n    List\u003cString\u003e allLocalDirs \u003d\n        DirectoryCollection.concat(localDirs, failedDirs);\n\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n\n    localDirs.clear();\n    errorDirs.clear();\n    fullDirs.clear();\n\n    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n      .entrySet()) {\n      String dir \u003d entry.getKey();\n      DiskErrorInformation errorInformation \u003d entry.getValue();\n      switch (entry.getValue().cause) {\n      case DISK_FULL:\n        fullDirs.add(entry.getKey());\n        break;\n      case OTHER:\n        errorDirs.add(entry.getKey());\n        break;\n      }\n      if (preCheckGoodDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n            + \", removing from list of valid directories\");\n        setChanged \u003d true;\n        numFailures++;\n      }\n    }\n    for (String dir : allLocalDirs) {\n      if (!dirsFailedCheck.containsKey(dir)) {\n        localDirs.add(dir);\n        if (preCheckFullDirs.contains(dir)\n            || preCheckOtherErrorDirs.contains(dir)) {\n          setChanged \u003d true;\n          LOG.info(\"Directory \" + dir\n              + \" passed disk check, adding to list of valid directories.\");\n        }\n      }\n    }\n    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    for (String dir : preCheckFullDirs) {\n      if (postCheckOtherDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n\n    for (String dir : preCheckOtherErrorDirs) {\n      if (postCheckFullDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n    setGoodDirsDiskUtilizationPercentage();\n    if (setChanged) {\n      for (DirsChangeListener listener : dirsChangeListeners) {\n        listener.onDirsChanged();\n      }\n    }\n    return setChanged;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3503. Expose disk utilization percentage and bad local and log dir counts in NM metrics. Contributed by Varun Vasudev\n",
      "commitDate": "21/04/15 8:57 PM",
      "commitName": "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/11/14 10:31 AM",
      "commitNameOld": "061bc293c8dd3e2605cf150568988bde18407af6",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 161.39,
      "commitsBetweenForRepo": 1256,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,63 @@\n   synchronized boolean checkDirs() {\n     boolean setChanged \u003d false;\n     Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n     Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n     Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n     List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n     List\u003cString\u003e allLocalDirs \u003d\n         DirectoryCollection.concat(localDirs, failedDirs);\n \n     Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n \n     localDirs.clear();\n     errorDirs.clear();\n     fullDirs.clear();\n \n     for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n       .entrySet()) {\n       String dir \u003d entry.getKey();\n       DiskErrorInformation errorInformation \u003d entry.getValue();\n       switch (entry.getValue().cause) {\n       case DISK_FULL:\n         fullDirs.add(entry.getKey());\n         break;\n       case OTHER:\n         errorDirs.add(entry.getKey());\n         break;\n       }\n       if (preCheckGoodDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n             + \", removing from list of valid directories\");\n         setChanged \u003d true;\n         numFailures++;\n       }\n     }\n     for (String dir : allLocalDirs) {\n       if (!dirsFailedCheck.containsKey(dir)) {\n         localDirs.add(dir);\n         if (preCheckFullDirs.contains(dir)\n             || preCheckOtherErrorDirs.contains(dir)) {\n           setChanged \u003d true;\n           LOG.info(\"Directory \" + dir\n               + \" passed disk check, adding to list of valid directories.\");\n         }\n       }\n     }\n     Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n     Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n     for (String dir : preCheckFullDirs) {\n       if (postCheckOtherDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error \"\n             + dirsFailedCheck.get(dir).message);\n       }\n     }\n \n     for (String dir : preCheckOtherErrorDirs) {\n       if (postCheckFullDirs.contains(dir)) {\n         LOG.warn(\"Directory \" + dir + \" error \"\n             + dirsFailedCheck.get(dir).message);\n       }\n     }\n+    setGoodDirsDiskUtilizationPercentage();\n     return setChanged;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n    List\u003cString\u003e allLocalDirs \u003d\n        DirectoryCollection.concat(localDirs, failedDirs);\n\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n\n    localDirs.clear();\n    errorDirs.clear();\n    fullDirs.clear();\n\n    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n      .entrySet()) {\n      String dir \u003d entry.getKey();\n      DiskErrorInformation errorInformation \u003d entry.getValue();\n      switch (entry.getValue().cause) {\n      case DISK_FULL:\n        fullDirs.add(entry.getKey());\n        break;\n      case OTHER:\n        errorDirs.add(entry.getKey());\n        break;\n      }\n      if (preCheckGoodDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n            + \", removing from list of valid directories\");\n        setChanged \u003d true;\n        numFailures++;\n      }\n    }\n    for (String dir : allLocalDirs) {\n      if (!dirsFailedCheck.containsKey(dir)) {\n        localDirs.add(dir);\n        if (preCheckFullDirs.contains(dir)\n            || preCheckOtherErrorDirs.contains(dir)) {\n          setChanged \u003d true;\n          LOG.info(\"Directory \" + dir\n              + \" passed disk check, adding to list of valid directories.\");\n        }\n      }\n    }\n    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    for (String dir : preCheckFullDirs) {\n      if (postCheckOtherDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n\n    for (String dir : preCheckOtherErrorDirs) {\n      if (postCheckFullDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n    setGoodDirsDiskUtilizationPercentage();\n    return setChanged;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": {
      "type": "Ybodychange",
      "commitMessage": "YARN-90. NodeManager should identify failed disks becoming good again. Contributed by Varun Vasudev\n",
      "commitDate": "21/10/14 10:31 AM",
      "commitName": "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/03/14 4:52 PM",
      "commitNameOld": "0b1304d098169bda3c7eadf9a07dd0b9e87ab150",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 227.69,
      "commitsBetweenForRepo": 1802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,62 @@\n   synchronized boolean checkDirs() {\n-    int oldNumFailures \u003d numFailures;\n-    HashSet\u003cString\u003e checkFailedDirs \u003d new HashSet\u003cString\u003e();\n-    for (final String dir : localDirs) {\n-      try {\n-        File testDir \u003d new File(dir);\n-        DiskChecker.checkDir(testDir);\n-        if (isDiskUsageUnderPercentageLimit(testDir)) {\n-          LOG.warn(\"Directory \" + dir\n-              + \" error, used space above threshold of \"\n-              + diskUtilizationPercentageCutoff\n-              + \"%, removing from the list of valid directories.\");\n-          checkFailedDirs.add(dir);\n-        } else if (isDiskFreeSpaceWithinLimit(testDir)) {\n-          LOG.warn(\"Directory \" + dir + \" error, free space below limit of \"\n-              + diskUtilizationSpaceCutoff\n-              + \"MB, removing from the list of valid directories.\");\n-          checkFailedDirs.add(dir);\n-        }\n-      } catch (DiskErrorException de) {\n-        LOG.warn(\"Directory \" + dir + \" error \" + de.getMessage()\n-            + \", removing from the list of valid directories.\");\n-        checkFailedDirs.add(dir);\n+    boolean setChanged \u003d false;\n+    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n+    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n+    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n+    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n+    List\u003cString\u003e allLocalDirs \u003d\n+        DirectoryCollection.concat(localDirs, failedDirs);\n+\n+    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n+\n+    localDirs.clear();\n+    errorDirs.clear();\n+    fullDirs.clear();\n+\n+    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n+      .entrySet()) {\n+      String dir \u003d entry.getKey();\n+      DiskErrorInformation errorInformation \u003d entry.getValue();\n+      switch (entry.getValue().cause) {\n+      case DISK_FULL:\n+        fullDirs.add(entry.getKey());\n+        break;\n+      case OTHER:\n+        errorDirs.add(entry.getKey());\n+        break;\n+      }\n+      if (preCheckGoodDirs.contains(dir)) {\n+        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n+            + \", removing from list of valid directories\");\n+        setChanged \u003d true;\n+        numFailures++;\n       }\n     }\n-    for (String dir : checkFailedDirs) {\n-      localDirs.remove(dir);\n-      failedDirs.add(dir);\n-      numFailures++;\n+    for (String dir : allLocalDirs) {\n+      if (!dirsFailedCheck.containsKey(dir)) {\n+        localDirs.add(dir);\n+        if (preCheckFullDirs.contains(dir)\n+            || preCheckOtherErrorDirs.contains(dir)) {\n+          setChanged \u003d true;\n+          LOG.info(\"Directory \" + dir\n+              + \" passed disk check, adding to list of valid directories.\");\n+        }\n+      }\n     }\n-    return numFailures \u003e oldNumFailures;\n+    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n+    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n+    for (String dir : preCheckFullDirs) {\n+      if (postCheckOtherDirs.contains(dir)) {\n+        LOG.warn(\"Directory \" + dir + \" error \"\n+            + dirsFailedCheck.get(dir).message);\n+      }\n+    }\n+\n+    for (String dir : preCheckOtherErrorDirs) {\n+      if (postCheckFullDirs.contains(dir)) {\n+        LOG.warn(\"Directory \" + dir + \" error \"\n+            + dirsFailedCheck.get(dir).message);\n+      }\n+    }\n+    return setChanged;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    boolean setChanged \u003d false;\n    Set\u003cString\u003e preCheckGoodDirs \u003d new HashSet\u003cString\u003e(localDirs);\n    Set\u003cString\u003e preCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e preCheckOtherErrorDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    List\u003cString\u003e failedDirs \u003d DirectoryCollection.concat(errorDirs, fullDirs);\n    List\u003cString\u003e allLocalDirs \u003d\n        DirectoryCollection.concat(localDirs, failedDirs);\n\n    Map\u003cString, DiskErrorInformation\u003e dirsFailedCheck \u003d testDirs(allLocalDirs);\n\n    localDirs.clear();\n    errorDirs.clear();\n    fullDirs.clear();\n\n    for (Map.Entry\u003cString, DiskErrorInformation\u003e entry : dirsFailedCheck\n      .entrySet()) {\n      String dir \u003d entry.getKey();\n      DiskErrorInformation errorInformation \u003d entry.getValue();\n      switch (entry.getValue().cause) {\n      case DISK_FULL:\n        fullDirs.add(entry.getKey());\n        break;\n      case OTHER:\n        errorDirs.add(entry.getKey());\n        break;\n      }\n      if (preCheckGoodDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error, \" + errorInformation.message\n            + \", removing from list of valid directories\");\n        setChanged \u003d true;\n        numFailures++;\n      }\n    }\n    for (String dir : allLocalDirs) {\n      if (!dirsFailedCheck.containsKey(dir)) {\n        localDirs.add(dir);\n        if (preCheckFullDirs.contains(dir)\n            || preCheckOtherErrorDirs.contains(dir)) {\n          setChanged \u003d true;\n          LOG.info(\"Directory \" + dir\n              + \" passed disk check, adding to list of valid directories.\");\n        }\n      }\n    }\n    Set\u003cString\u003e postCheckFullDirs \u003d new HashSet\u003cString\u003e(fullDirs);\n    Set\u003cString\u003e postCheckOtherDirs \u003d new HashSet\u003cString\u003e(errorDirs);\n    for (String dir : preCheckFullDirs) {\n      if (postCheckOtherDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n\n    for (String dir : preCheckOtherErrorDirs) {\n      if (postCheckFullDirs.contains(dir)) {\n        LOG.warn(\"Directory \" + dir + \" error \"\n            + dirsFailedCheck.get(dir).message);\n      }\n    }\n    return setChanged;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "0b1304d098169bda3c7eadf9a07dd0b9e87ab150": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1781. Modified NodeManagers to allow admins to specify max disk utilization for local disks so as to be able to offline full disks. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575463 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 4:52 PM",
      "commitName": "0b1304d098169bda3c7eadf9a07dd0b9e87ab150",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/09/12 1:50 PM",
      "commitNameOld": "41ebf4fb24241e9b09bf29965630a7a73af129f3",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 525.17,
      "commitsBetweenForRepo": 3256,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,32 @@\n   synchronized boolean checkDirs() {\n     int oldNumFailures \u003d numFailures;\n+    HashSet\u003cString\u003e checkFailedDirs \u003d new HashSet\u003cString\u003e();\n     for (final String dir : localDirs) {\n       try {\n-        DiskChecker.checkDir(new File(dir));\n+        File testDir \u003d new File(dir);\n+        DiskChecker.checkDir(testDir);\n+        if (isDiskUsageUnderPercentageLimit(testDir)) {\n+          LOG.warn(\"Directory \" + dir\n+              + \" error, used space above threshold of \"\n+              + diskUtilizationPercentageCutoff\n+              + \"%, removing from the list of valid directories.\");\n+          checkFailedDirs.add(dir);\n+        } else if (isDiskFreeSpaceWithinLimit(testDir)) {\n+          LOG.warn(\"Directory \" + dir + \" error, free space below limit of \"\n+              + diskUtilizationSpaceCutoff\n+              + \"MB, removing from the list of valid directories.\");\n+          checkFailedDirs.add(dir);\n+        }\n       } catch (DiskErrorException de) {\n-        LOG.warn(\"Directory \" + dir + \" error \" +\n-            de.getMessage() + \", removing from the list of valid directories.\");\n-        localDirs.remove(dir);\n-        failedDirs.add(dir);\n-        numFailures++;\n+        LOG.warn(\"Directory \" + dir + \" error \" + de.getMessage()\n+            + \", removing from the list of valid directories.\");\n+        checkFailedDirs.add(dir);\n       }\n     }\n+    for (String dir : checkFailedDirs) {\n+      localDirs.remove(dir);\n+      failedDirs.add(dir);\n+      numFailures++;\n+    }\n     return numFailures \u003e oldNumFailures;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    int oldNumFailures \u003d numFailures;\n    HashSet\u003cString\u003e checkFailedDirs \u003d new HashSet\u003cString\u003e();\n    for (final String dir : localDirs) {\n      try {\n        File testDir \u003d new File(dir);\n        DiskChecker.checkDir(testDir);\n        if (isDiskUsageUnderPercentageLimit(testDir)) {\n          LOG.warn(\"Directory \" + dir\n              + \" error, used space above threshold of \"\n              + diskUtilizationPercentageCutoff\n              + \"%, removing from the list of valid directories.\");\n          checkFailedDirs.add(dir);\n        } else if (isDiskFreeSpaceWithinLimit(testDir)) {\n          LOG.warn(\"Directory \" + dir + \" error, free space below limit of \"\n              + diskUtilizationSpaceCutoff\n              + \"MB, removing from the list of valid directories.\");\n          checkFailedDirs.add(dir);\n        }\n      } catch (DiskErrorException de) {\n        LOG.warn(\"Directory \" + dir + \" error \" + de.getMessage()\n            + \", removing from the list of valid directories.\");\n        checkFailedDirs.add(dir);\n      }\n    }\n    for (String dir : checkFailedDirs) {\n      localDirs.remove(dir);\n      failedDirs.add(dir);\n      numFailures++;\n    }\n    return numFailures \u003e oldNumFailures;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized boolean checkDirs() {\n    int oldNumFailures \u003d numFailures;\n    for (final String dir : localDirs) {\n      try {\n        DiskChecker.checkDir(new File(dir));\n      } catch (DiskErrorException de) {\n        LOG.warn(\"Directory \" + dir + \" error \" +\n            de.getMessage() + \", removing from the list of valid directories.\");\n        localDirs.remove(dir);\n        failedDirs.add(dir);\n        numFailures++;\n      }\n    }\n    return numFailures \u003e oldNumFailures;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java"
      }
    },
    "719b719e3dd622ebc5cea46c63e2dbfdc397863c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4194. ConcurrentModificationError in DirectoryCollection (Jonathan Eagles via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1330552 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/12 1:49 PM",
      "commitName": "719b719e3dd622ebc5cea46c63e2dbfdc397863c",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 147.9,
      "commitsBetweenForRepo": 1077,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,15 @@\n   synchronized boolean checkDirs() {\n     int oldNumFailures \u003d numFailures;\n-    ListIterator\u003cString\u003e it \u003d localDirs.listIterator();\n-    while (it.hasNext()) {\n-      final String dir \u003d it.next();\n+    for (final String dir : localDirs) {\n       try {\n         DiskChecker.checkDir(new File(dir));\n       } catch (DiskErrorException de) {\n         LOG.warn(\"Directory \" + dir + \" error \" +\n             de.getMessage() + \", removing from the list of valid directories.\");\n-        it.remove();\n+        localDirs.remove(dir);\n         failedDirs.add(dir);\n         numFailures++;\n       }\n     }\n-    if (numFailures \u003e oldNumFailures) {\n-      return true;\n-    }\n-    return false;\n+    return numFailures \u003e oldNumFailures;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    int oldNumFailures \u003d numFailures;\n    for (final String dir : localDirs) {\n      try {\n        DiskChecker.checkDir(new File(dir));\n      } catch (DiskErrorException de) {\n        LOG.warn(\"Directory \" + dir + \" error \" +\n            de.getMessage() + \", removing from the list of valid directories.\");\n        localDirs.remove(dir);\n        failedDirs.add(dir);\n        numFailures++;\n      }\n    }\n    return numFailures \u003e oldNumFailures;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,20 @@\n+  synchronized boolean checkDirs() {\n+    int oldNumFailures \u003d numFailures;\n+    ListIterator\u003cString\u003e it \u003d localDirs.listIterator();\n+    while (it.hasNext()) {\n+      final String dir \u003d it.next();\n+      try {\n+        DiskChecker.checkDir(new File(dir));\n+      } catch (DiskErrorException de) {\n+        LOG.warn(\"Directory \" + dir + \" error \" +\n+            de.getMessage() + \", removing from the list of valid directories.\");\n+        it.remove();\n+        failedDirs.add(dir);\n+        numFailures++;\n+      }\n+    }\n+    if (numFailures \u003e oldNumFailures) {\n+      return true;\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized boolean checkDirs() {\n    int oldNumFailures \u003d numFailures;\n    ListIterator\u003cString\u003e it \u003d localDirs.listIterator();\n    while (it.hasNext()) {\n      final String dir \u003d it.next();\n      try {\n        DiskChecker.checkDir(new File(dir));\n      } catch (DiskErrorException de) {\n        LOG.warn(\"Directory \" + dir + \" error \" +\n            de.getMessage() + \", removing from the list of valid directories.\");\n        it.remove();\n        failedDirs.add(dir);\n        numFailures++;\n      }\n    }\n    if (numFailures \u003e oldNumFailures) {\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java"
    }
  }
}