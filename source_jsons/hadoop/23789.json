{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HSAdminServer.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
  "functionStartLine": 82,
  "functionEndLine": 126,
  "numCommitsSeen": 14,
  "timeTaken": 2350,
  "changeHistory": [
    "ea0c2b8b051a2d14927e8f314245442f30748dc8",
    "d355573f5681f43e760a1bc23ebed553bd35fca5",
    "62a9667136ebd8a048f556b534fcff4fdaf8e2ec",
    "93d8a7f2a2d72a1719d02b1ed90678397900b6ed",
    "a6c79f92d503c664f2d109355b719124f29a30e5",
    "09b3dee122ad20fae22ae8de74886dbf11c39343",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "cc536fe4da7b462d40f36ca7fc5109d297b08a2b"
  ],
  "changeHistoryShort": {
    "ea0c2b8b051a2d14927e8f314245442f30748dc8": "Ybodychange",
    "d355573f5681f43e760a1bc23ebed553bd35fca5": "Ybodychange",
    "62a9667136ebd8a048f556b534fcff4fdaf8e2ec": "Ybodychange",
    "93d8a7f2a2d72a1719d02b1ed90678397900b6ed": "Ybodychange",
    "a6c79f92d503c664f2d109355b719124f29a30e5": "Ybodychange",
    "09b3dee122ad20fae22ae8de74886dbf11c39343": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "cc536fe4da7b462d40f36ca7fc5109d297b08a2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea0c2b8b051a2d14927e8f314245442f30748dc8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13218. Migrate other Hadoop side tests to prepare for removing WritableRPCEngine. Contributed by Wei Zhou and Kai Zheng\n",
      "commitDate": "14/09/16 7:46 PM",
      "commitName": "ea0c2b8b051a2d14927e8f314245442f30748dc8",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "07/09/16 2:50 PM",
      "commitNameOld": "d355573f5681f43e760a1bc23ebed553bd35fca5",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 7.21,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n-    WritableRpcEngine.ensureInitialized();\n-\n     clientRpcAddress \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n \n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "d355573f5681f43e760a1bc23ebed553bd35fca5": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13218. Migrate other Hadoop side tests to prepare for removing WritableRPCEngine. Contributed by Wei Zhou and Kai Zheng\"\n\nThis reverts commit 62a9667136ebd8a048f556b534fcff4fdaf8e2ec\n",
      "commitDate": "07/09/16 2:50 PM",
      "commitName": "d355573f5681f43e760a1bc23ebed553bd35fca5",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "07/09/16 2:05 AM",
      "commitNameOld": "62a9667136ebd8a048f556b534fcff4fdaf8e2ec",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.53,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n+    WritableRpcEngine.ensureInitialized();\n+\n     clientRpcAddress \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n \n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    WritableRpcEngine.ensureInitialized();\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "62a9667136ebd8a048f556b534fcff4fdaf8e2ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13218. Migrate other Hadoop side tests to prepare for removing WritableRPCEngine. Contributed by Wei Zhou and Kai Zheng\n",
      "commitDate": "07/09/16 2:05 AM",
      "commitName": "62a9667136ebd8a048f556b534fcff4fdaf8e2ec",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "31/05/16 5:41 PM",
      "commitNameOld": "93d8a7f2a2d72a1719d02b1ed90678397900b6ed",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 98.35,
      "commitsBetweenForRepo": 765,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n-    WritableRpcEngine.ensureInitialized();\n-\n     clientRpcAddress \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n \n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "93d8a7f2a2d72a1719d02b1ed90678397900b6ed": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-12579. Deprecate and remove WriteableRPCEngine. Contributed by Kai Zheng\"\n\nThis reverts commit a6c79f92d503c664f2d109355b719124f29a30e5.\n",
      "commitDate": "31/05/16 5:41 PM",
      "commitName": "93d8a7f2a2d72a1719d02b1ed90678397900b6ed",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "26/05/16 1:29 PM",
      "commitNameOld": "a6c79f92d503c664f2d109355b719124f29a30e5",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 5.17,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n+    WritableRpcEngine.ensureInitialized();\n+\n     clientRpcAddress \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n \n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    WritableRpcEngine.ensureInitialized();\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "a6c79f92d503c664f2d109355b719124f29a30e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12579. Deprecate and remove WriteableRPCEngine. Contributed by Kai Zheng\n",
      "commitDate": "26/05/16 1:29 PM",
      "commitName": "a6c79f92d503c664f2d109355b719124f29a30e5",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "23/06/15 11:39 AM",
      "commitNameOld": "d481684c7c9293a94f54ef622a92753531c6acc7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 338.08,
      "commitsBetweenForRepo": 2233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n-    WritableRpcEngine.ensureInitialized();\n-\n     clientRpcAddress \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n     }\n \n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "09b3dee122ad20fae22ae8de74886dbf11c39343": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6162. mapred hsadmin fails on a secure cluster. Contributed by Jason Lowe\n",
      "commitDate": "17/11/14 2:59 PM",
      "commitName": "09b3dee122ad20fae22ae8de74886dbf11c39343",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "31/07/14 1:06 PM",
      "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 109.12,
      "commitsBetweenForRepo": 1081,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,47 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n     WritableRpcEngine.ensureInitialized();\n \n     clientRpcAddress \u003d conf.getSocketAddr(\n         JHAdminConfig.MR_HISTORY_BIND_HOST,\n         JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n+        false)) {\n+      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n+    }\n+\n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    WritableRpcEngine.ensureInitialized();\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      clientRpcServer.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "29/07/13 3:33 PM",
      "commitNameOld": "8bb035509ea195ec03b8295a7abd11ce675a4d85",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 366.9,
      "commitsBetweenForRepo": 2452,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n         ProtobufRpcEngine.class);\n \n     RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n         .newReflectiveBlockingService(refreshUserMappingXlator);\n \n     GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n         this);\n     BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n         .newReflectiveBlockingService(getUserMappingXlator);\n \n     HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n         this);\n     BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n         .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n \n     WritableRpcEngine.ensureInitialized();\n \n-    clientRpcAddress \u003d conf.getSocketAddr(JHAdminConfig.JHS_ADMIN_ADDRESS,\n+    clientRpcAddress \u003d conf.getSocketAddr(\n+        JHAdminConfig.MR_HISTORY_BIND_HOST,\n+        JHAdminConfig.JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n     clientRpcServer \u003d new RPC.Builder(conf)\n         .setProtocol(RefreshUserMappingsProtocolPB.class)\n         .setInstance(refreshUserMappingService)\n         .setBindAddress(clientRpcAddress.getHostName())\n         .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n \n     addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n     addProtocol(conf, HSAdminRefreshProtocolPB.class,\n         refreshHSAdminProtocolService);\n \n     adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n         JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    WritableRpcEngine.ensureInitialized();\n\n    clientRpcAddress \u003d conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class,\n        refreshHSAdminProtocolService);\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java",
      "extendedDetails": {}
    },
    "cc536fe4da7b462d40f36ca7fc5109d297b08a2b": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5265. History server admin service to refresh user and superuser group mappings. Contributed by Ashwin Shankar\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504645 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 1:41 PM",
      "commitName": "cc536fe4da7b462d40f36ca7fc5109d297b08a2b",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,36 @@\n+  public void serviceInit(Configuration conf) throws Exception {\n+    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n+        ProtobufRpcEngine.class);\n+\n+    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n+        this);\n+    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n+        .newReflectiveBlockingService(refreshUserMappingXlator);\n+\n+    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n+        this);\n+    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n+        .newReflectiveBlockingService(getUserMappingXlator);\n+\n+    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n+        this);\n+    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n+        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n+\n+    WritableRpcEngine.ensureInitialized();\n+\n+    clientRpcAddress \u003d conf.getSocketAddr(JHAdminConfig.JHS_ADMIN_ADDRESS,\n+        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n+        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n+    clientRpcServer \u003d new RPC.Builder(conf)\n+        .setProtocol(RefreshUserMappingsProtocolPB.class)\n+        .setInstance(refreshUserMappingService)\n+        .setBindAddress(clientRpcAddress.getHostName())\n+        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n+\n+    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n+    addProtocol(conf, HSAdminRefreshProtocolPB.class, refreshHSAdminProtocolService);\n+\n+    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n+        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    RPC.setProtocolEngine(conf, RefreshUserMappingsProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator \u003d new RefreshUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshUserMappingService \u003d RefreshUserMappingsProtocolService\n        .newReflectiveBlockingService(refreshUserMappingXlator);\n\n    GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator \u003d new GetUserMappingsProtocolServerSideTranslatorPB(\n        this);\n    BlockingService getUserMappingService \u003d GetUserMappingsProtocolService\n        .newReflectiveBlockingService(getUserMappingXlator);\n\n    HSAdminRefreshProtocolServerSideTranslatorPB refreshHSAdminProtocolXlator \u003d new HSAdminRefreshProtocolServerSideTranslatorPB(\n        this);\n    BlockingService refreshHSAdminProtocolService \u003d HSAdminRefreshProtocolService\n        .newReflectiveBlockingService(refreshHSAdminProtocolXlator);\n\n    WritableRpcEngine.ensureInitialized();\n\n    clientRpcAddress \u003d conf.getSocketAddr(JHAdminConfig.JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ADDRESS,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_PORT);\n    clientRpcServer \u003d new RPC.Builder(conf)\n        .setProtocol(RefreshUserMappingsProtocolPB.class)\n        .setInstance(refreshUserMappingService)\n        .setBindAddress(clientRpcAddress.getHostName())\n        .setPort(clientRpcAddress.getPort()).setVerbose(false).build();\n\n    addProtocol(conf, GetUserMappingsProtocolPB.class, getUserMappingService);\n    addProtocol(conf, HSAdminRefreshProtocolPB.class, refreshHSAdminProtocolService);\n\n    adminAcl \u003d new AccessControlList(conf.get(JHAdminConfig.JHS_ADMIN_ACL,\n        JHAdminConfig.DEFAULT_JHS_ADMIN_ACL));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/server/HSAdminServer.java"
    }
  }
}