{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GetApplicationsRequestPBImpl.java",
  "functionName": "mergeLocalToBuilder",
  "functionId": "mergeLocalToBuilder",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
  "functionStartLine": 84,
  "functionEndLine": 128,
  "numCommitsSeen": 16,
  "timeTaken": 2536,
  "changeHistory": [
    "768ee22e9e73543d2fb193d9b6ec34a247cb0411",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "50be8561a7c8eabfae54e5e39c5babb3392f381b",
    "461ded8bd47b4d880b7a8136b5d4656a456f1258",
    "4f6493bcf9a3664c63e870ea4913662bf395d14d",
    "ebe0c17a95ae37d4768f2928ea193e89db34ead5",
    "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68",
    "e2cce7bd26cb943225a0d4ffb6f674e1b8ee39ae"
  ],
  "changeHistoryShort": {
    "768ee22e9e73543d2fb193d9b6ec34a247cb0411": "Ybodychange",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "50be8561a7c8eabfae54e5e39c5babb3392f381b": "Ybodychange",
    "461ded8bd47b4d880b7a8136b5d4656a456f1258": "Ybodychange",
    "4f6493bcf9a3664c63e870ea4913662bf395d14d": "Ybodychange",
    "ebe0c17a95ae37d4768f2928ea193e89db34ead5": "Ybodychange",
    "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68": "Ybodychange",
    "e2cce7bd26cb943225a0d4ffb6f674e1b8ee39ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "768ee22e9e73543d2fb193d9b6ec34a247cb0411": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10035. Add ability to filter the Cluster Applications API request by name. Contributed by Adam Antal\n",
      "commitDate": "06/01/20 7:26 AM",
      "commitName": "768ee22e9e73543d2fb193d9b6ec34a247cb0411",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "09/07/18 11:30 AM",
      "commitNameOld": "83cd84b70bac7b613eb4b2901d5ffe40098692eb",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 545.87,
      "commitsBetweenForRepo": 3914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   private void mergeLocalToBuilder() {\n     if (applicationTypes !\u003d null \u0026\u0026 !applicationTypes.isEmpty()) {\n       builder.clearApplicationTypes();\n       builder.addAllApplicationTypes(applicationTypes);\n     }\n     if (applicationStates !\u003d null \u0026\u0026 !applicationStates.isEmpty()) {\n       builder.clearApplicationStates();\n       builder.addAllApplicationStates(Iterables.transform(applicationStates,\n           new Function\u003cYarnApplicationState, YarnApplicationStateProto\u003e() {\n             @Override\n             public YarnApplicationStateProto apply(YarnApplicationState input) {\n               return ProtoUtils.convertToProtoFormat(input);\n             }\n           }));\n     }\n     if (applicationTags !\u003d null \u0026\u0026 !applicationTags.isEmpty()) {\n       builder.clearApplicationTags();\n       builder.addAllApplicationTags(this.applicationTags);\n     }\n     if (scope !\u003d null) {\n       builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n     }\n     if (start !\u003d null) {\n       builder.setStartBegin(start.getMinimum());\n       builder.setStartEnd(start.getMaximum());\n     }\n     if (finish !\u003d null) {\n       builder.setFinishBegin(finish.getMinimum());\n       builder.setFinishEnd(finish.getMaximum());\n     }\n     if (limit !\u003d Long.MAX_VALUE) {\n       builder.setLimit(limit);\n     }\n     if (users !\u003d null \u0026\u0026 !users.isEmpty()) {\n       builder.clearUsers();\n       builder.addAllUsers(users);\n     }\n     if (queues !\u003d null \u0026\u0026 !queues.isEmpty()) {\n       builder.clearQueues();\n       builder.addAllQueues(queues);\n     }\n+    if (name !\u003d null) {\n+      builder.setName(name);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (applicationTypes !\u003d null \u0026\u0026 !applicationTypes.isEmpty()) {\n      builder.clearApplicationTypes();\n      builder.addAllApplicationTypes(applicationTypes);\n    }\n    if (applicationStates !\u003d null \u0026\u0026 !applicationStates.isEmpty()) {\n      builder.clearApplicationStates();\n      builder.addAllApplicationStates(Iterables.transform(applicationStates,\n          new Function\u003cYarnApplicationState, YarnApplicationStateProto\u003e() {\n            @Override\n            public YarnApplicationStateProto apply(YarnApplicationState input) {\n              return ProtoUtils.convertToProtoFormat(input);\n            }\n          }));\n    }\n    if (applicationTags !\u003d null \u0026\u0026 !applicationTags.isEmpty()) {\n      builder.clearApplicationTags();\n      builder.addAllApplicationTags(this.applicationTags);\n    }\n    if (scope !\u003d null) {\n      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n    }\n    if (start !\u003d null) {\n      builder.setStartBegin(start.getMinimum());\n      builder.setStartEnd(start.getMaximum());\n    }\n    if (finish !\u003d null) {\n      builder.setFinishBegin(finish.getMinimum());\n      builder.setFinishEnd(finish.getMaximum());\n    }\n    if (limit !\u003d Long.MAX_VALUE) {\n      builder.setLimit(limit);\n    }\n    if (users !\u003d null \u0026\u0026 !users.isEmpty()) {\n      builder.clearUsers();\n      builder.addAllUsers(users);\n    }\n    if (queues !\u003d null \u0026\u0026 !queues.isEmpty()) {\n      builder.clearQueues();\n      builder.addAllQueues(queues);\n    }\n    if (name !\u003d null) {\n      builder.setName(name);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 1197.43,
      "commitsBetweenForRepo": 9097,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void mergeLocalToBuilder() {\n     if (applicationTypes !\u003d null \u0026\u0026 !applicationTypes.isEmpty()) {\n       builder.clearApplicationTypes();\n       builder.addAllApplicationTypes(applicationTypes);\n     }\n     if (applicationStates !\u003d null \u0026\u0026 !applicationStates.isEmpty()) {\n       builder.clearApplicationStates();\n       builder.addAllApplicationStates(Iterables.transform(applicationStates,\n           new Function\u003cYarnApplicationState, YarnApplicationStateProto\u003e() {\n             @Override\n             public YarnApplicationStateProto apply(YarnApplicationState input) {\n               return ProtoUtils.convertToProtoFormat(input);\n             }\n           }));\n     }\n     if (applicationTags !\u003d null \u0026\u0026 !applicationTags.isEmpty()) {\n       builder.clearApplicationTags();\n       builder.addAllApplicationTags(this.applicationTags);\n     }\n     if (scope !\u003d null) {\n       builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n     }\n     if (start !\u003d null) {\n-      builder.setStartBegin(start.getMinimumLong());\n-      builder.setStartEnd(start.getMaximumLong());\n+      builder.setStartBegin(start.getMinimum());\n+      builder.setStartEnd(start.getMaximum());\n     }\n     if (finish !\u003d null) {\n-      builder.setFinishBegin(finish.getMinimumLong());\n-      builder.setFinishEnd(finish.getMaximumLong());\n+      builder.setFinishBegin(finish.getMinimum());\n+      builder.setFinishEnd(finish.getMaximum());\n     }\n     if (limit !\u003d Long.MAX_VALUE) {\n       builder.setLimit(limit);\n     }\n     if (users !\u003d null \u0026\u0026 !users.isEmpty()) {\n       builder.clearUsers();\n       builder.addAllUsers(users);\n     }\n     if (queues !\u003d null \u0026\u0026 !queues.isEmpty()) {\n       builder.clearQueues();\n       builder.addAllQueues(queues);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (applicationTypes !\u003d null \u0026\u0026 !applicationTypes.isEmpty()) {\n      builder.clearApplicationTypes();\n      builder.addAllApplicationTypes(applicationTypes);\n    }\n    if (applicationStates !\u003d null \u0026\u0026 !applicationStates.isEmpty()) {\n      builder.clearApplicationStates();\n      builder.addAllApplicationStates(Iterables.transform(applicationStates,\n          new Function\u003cYarnApplicationState, YarnApplicationStateProto\u003e() {\n            @Override\n            public YarnApplicationStateProto apply(YarnApplicationState input) {\n              return ProtoUtils.convertToProtoFormat(input);\n            }\n          }));\n    }\n    if (applicationTags !\u003d null \u0026\u0026 !applicationTags.isEmpty()) {\n      builder.clearApplicationTags();\n      builder.addAllApplicationTags(this.applicationTags);\n    }\n    if (scope !\u003d null) {\n      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n    }\n    if (start !\u003d null) {\n      builder.setStartBegin(start.getMinimum());\n      builder.setStartEnd(start.getMaximum());\n    }\n    if (finish !\u003d null) {\n      builder.setFinishBegin(finish.getMinimum());\n      builder.setFinishEnd(finish.getMaximum());\n    }\n    if (limit !\u003d Long.MAX_VALUE) {\n      builder.setLimit(limit);\n    }\n    if (users !\u003d null \u0026\u0026 !users.isEmpty()) {\n      builder.clearUsers();\n      builder.addAllUsers(users);\n    }\n    if (queues !\u003d null \u0026\u0026 !queues.isEmpty()) {\n      builder.clearQueues();\n      builder.addAllQueues(queues);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "50be8561a7c8eabfae54e5e39c5babb3392f381b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2088. Fixed a bug in GetApplicationsRequestPBImpl#mergeLocalToBuilder. Contributed by Binglin Chang\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609584 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 3:36 PM",
      "commitName": "50be8561a7c8eabfae54e5e39c5babb3392f381b",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/05/14 6:43 PM",
      "commitNameOld": "461ded8bd47b4d880b7a8136b5d4656a456f1258",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 54.87,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,42 @@\n   private void mergeLocalToBuilder() {\n-    if (this.applicationTypes !\u003d null) {\n-      addLocalApplicationTypesToProto();\n+    if (applicationTypes !\u003d null \u0026\u0026 !applicationTypes.isEmpty()) {\n+      builder.clearApplicationTypes();\n+      builder.addAllApplicationTypes(applicationTypes);\n     }\n-    if (this.applicationStates !\u003d null) {\n-      maybeInitBuilder();\n+    if (applicationStates !\u003d null \u0026\u0026 !applicationStates.isEmpty()) {\n       builder.clearApplicationStates();\n-      Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n-          new Iterable\u003cYarnApplicationStateProto\u003e() {\n-\n+      builder.addAllApplicationStates(Iterables.transform(applicationStates,\n+          new Function\u003cYarnApplicationState, YarnApplicationStateProto\u003e() {\n             @Override\n-            public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n-              return new Iterator\u003cYarnApplicationStateProto\u003e() {\n-\n-                Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n-                    .iterator();\n-\n-                @Override\n-                public boolean hasNext() {\n-                  return iter.hasNext();\n-                }\n-\n-                @Override\n-                public YarnApplicationStateProto next() {\n-                  return ProtoUtils.convertToProtoFormat(iter.next());\n-                }\n-\n-                @Override\n-                public void remove() {\n-                  throw new UnsupportedOperationException();\n-\n-                }\n-              };\n-\n+            public YarnApplicationStateProto apply(YarnApplicationState input) {\n+              return ProtoUtils.convertToProtoFormat(input);\n             }\n-          };\n-      builder.addAllApplicationStates(iterable);\n+          }));\n     }\n-    if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n+    if (applicationTags !\u003d null \u0026\u0026 !applicationTags.isEmpty()) {\n+      builder.clearApplicationTags();\n       builder.addAllApplicationTags(this.applicationTags);\n     }\n-    if (this.scope !\u003d null) {\n+    if (scope !\u003d null) {\n       builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n     }\n-    if (this.start !\u003d null) {\n+    if (start !\u003d null) {\n       builder.setStartBegin(start.getMinimumLong());\n       builder.setStartEnd(start.getMaximumLong());\n     }\n-    \n-    if (this.finish !\u003d null) {\n+    if (finish !\u003d null) {\n       builder.setFinishBegin(finish.getMinimumLong());\n       builder.setFinishEnd(finish.getMaximumLong());\n     }\n-    \n-    builder.setLimit(limit);\n-    \n-    if (this.users !\u003d null \u0026\u0026 !this.users.isEmpty()) {\n-      builder.addAllUsers(this.users);\n+    if (limit !\u003d Long.MAX_VALUE) {\n+      builder.setLimit(limit);\n     }\n-    \n-    if (this.queues !\u003d null \u0026\u0026 !this.queues.isEmpty()) {\n-      builder.addAllQueues(this.queues);\n+    if (users !\u003d null \u0026\u0026 !users.isEmpty()) {\n+      builder.clearUsers();\n+      builder.addAllUsers(users);\n+    }\n+    if (queues !\u003d null \u0026\u0026 !queues.isEmpty()) {\n+      builder.clearQueues();\n+      builder.addAllQueues(queues);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (applicationTypes !\u003d null \u0026\u0026 !applicationTypes.isEmpty()) {\n      builder.clearApplicationTypes();\n      builder.addAllApplicationTypes(applicationTypes);\n    }\n    if (applicationStates !\u003d null \u0026\u0026 !applicationStates.isEmpty()) {\n      builder.clearApplicationStates();\n      builder.addAllApplicationStates(Iterables.transform(applicationStates,\n          new Function\u003cYarnApplicationState, YarnApplicationStateProto\u003e() {\n            @Override\n            public YarnApplicationStateProto apply(YarnApplicationState input) {\n              return ProtoUtils.convertToProtoFormat(input);\n            }\n          }));\n    }\n    if (applicationTags !\u003d null \u0026\u0026 !applicationTags.isEmpty()) {\n      builder.clearApplicationTags();\n      builder.addAllApplicationTags(this.applicationTags);\n    }\n    if (scope !\u003d null) {\n      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n    }\n    if (start !\u003d null) {\n      builder.setStartBegin(start.getMinimumLong());\n      builder.setStartEnd(start.getMaximumLong());\n    }\n    if (finish !\u003d null) {\n      builder.setFinishBegin(finish.getMinimumLong());\n      builder.setFinishEnd(finish.getMaximumLong());\n    }\n    if (limit !\u003d Long.MAX_VALUE) {\n      builder.setLimit(limit);\n    }\n    if (users !\u003d null \u0026\u0026 !users.isEmpty()) {\n      builder.clearUsers();\n      builder.addAllUsers(users);\n    }\n    if (queues !\u003d null \u0026\u0026 !queues.isEmpty()) {\n      builder.clearQueues();\n      builder.addAllQueues(queues);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "461ded8bd47b4d880b7a8136b5d4656a456f1258": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2066. Wrong field is referenced in GetApplicationsRequestPBImpl#mergeLocalToBuilder (Contributed by Hong Zhiguo)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 6:43 PM",
      "commitName": "461ded8bd47b4d880b7a8136b5d4656a456f1258",
      "commitAuthor": "Junping Du",
      "commitDateOld": "12/05/14 1:45 PM",
      "commitNameOld": "4f6493bcf9a3664c63e870ea4913662bf395d14d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.21,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private void mergeLocalToBuilder() {\n     if (this.applicationTypes !\u003d null) {\n       addLocalApplicationTypesToProto();\n     }\n     if (this.applicationStates !\u003d null) {\n       maybeInitBuilder();\n       builder.clearApplicationStates();\n       Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n           new Iterable\u003cYarnApplicationStateProto\u003e() {\n \n             @Override\n             public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n               return new Iterator\u003cYarnApplicationStateProto\u003e() {\n \n                 Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                     .iterator();\n \n                 @Override\n                 public boolean hasNext() {\n                   return iter.hasNext();\n                 }\n \n                 @Override\n                 public YarnApplicationStateProto next() {\n                   return ProtoUtils.convertToProtoFormat(iter.next());\n                 }\n \n                 @Override\n                 public void remove() {\n                   throw new UnsupportedOperationException();\n \n                 }\n               };\n \n             }\n           };\n       builder.addAllApplicationStates(iterable);\n     }\n     if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n       builder.addAllApplicationTags(this.applicationTags);\n     }\n     if (this.scope !\u003d null) {\n       builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n     }\n     if (this.start !\u003d null) {\n       builder.setStartBegin(start.getMinimumLong());\n       builder.setStartEnd(start.getMaximumLong());\n     }\n     \n     if (this.finish !\u003d null) {\n-      builder.setFinishBegin(start.getMinimumLong());\n-      builder.setFinishEnd(start.getMaximumLong());\n+      builder.setFinishBegin(finish.getMinimumLong());\n+      builder.setFinishEnd(finish.getMaximumLong());\n     }\n     \n     builder.setLimit(limit);\n     \n     if (this.users !\u003d null \u0026\u0026 !this.users.isEmpty()) {\n       builder.addAllUsers(this.users);\n     }\n     \n     if (this.queues !\u003d null \u0026\u0026 !this.queues.isEmpty()) {\n       builder.addAllQueues(this.queues);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (this.applicationTypes !\u003d null) {\n      addLocalApplicationTypesToProto();\n    }\n    if (this.applicationStates !\u003d null) {\n      maybeInitBuilder();\n      builder.clearApplicationStates();\n      Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n          new Iterable\u003cYarnApplicationStateProto\u003e() {\n\n            @Override\n            public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n              return new Iterator\u003cYarnApplicationStateProto\u003e() {\n\n                Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                    .iterator();\n\n                @Override\n                public boolean hasNext() {\n                  return iter.hasNext();\n                }\n\n                @Override\n                public YarnApplicationStateProto next() {\n                  return ProtoUtils.convertToProtoFormat(iter.next());\n                }\n\n                @Override\n                public void remove() {\n                  throw new UnsupportedOperationException();\n\n                }\n              };\n\n            }\n          };\n      builder.addAllApplicationStates(iterable);\n    }\n    if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n      builder.addAllApplicationTags(this.applicationTags);\n    }\n    if (this.scope !\u003d null) {\n      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n    }\n    if (this.start !\u003d null) {\n      builder.setStartBegin(start.getMinimumLong());\n      builder.setStartEnd(start.getMaximumLong());\n    }\n    \n    if (this.finish !\u003d null) {\n      builder.setFinishBegin(finish.getMinimumLong());\n      builder.setFinishEnd(finish.getMaximumLong());\n    }\n    \n    builder.setLimit(limit);\n    \n    if (this.users !\u003d null \u0026\u0026 !this.users.isEmpty()) {\n      builder.addAllUsers(this.users);\n    }\n    \n    if (this.queues !\u003d null \u0026\u0026 !this.queues.isEmpty()) {\n      builder.addAllQueues(this.queues);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "4f6493bcf9a3664c63e870ea4913662bf395d14d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2016. Fix a bug in GetApplicationsRequestPBImpl to add the missed fields to proto. Contributed by Junping Du\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/05/14 1:45 PM",
      "commitName": "4f6493bcf9a3664c63e870ea4913662bf395d14d",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/02/14 8:55 PM",
      "commitNameOld": "ebe0c17a95ae37d4768f2928ea193e89db34ead5",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 96.66,
      "commitsBetweenForRepo": 720,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,64 @@\n   private void mergeLocalToBuilder() {\n     if (this.applicationTypes !\u003d null) {\n       addLocalApplicationTypesToProto();\n     }\n     if (this.applicationStates !\u003d null) {\n       maybeInitBuilder();\n       builder.clearApplicationStates();\n       Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n           new Iterable\u003cYarnApplicationStateProto\u003e() {\n \n             @Override\n             public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n               return new Iterator\u003cYarnApplicationStateProto\u003e() {\n \n                 Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                     .iterator();\n \n                 @Override\n                 public boolean hasNext() {\n                   return iter.hasNext();\n                 }\n \n                 @Override\n                 public YarnApplicationStateProto next() {\n                   return ProtoUtils.convertToProtoFormat(iter.next());\n                 }\n \n                 @Override\n                 public void remove() {\n                   throw new UnsupportedOperationException();\n \n                 }\n               };\n \n             }\n           };\n       builder.addAllApplicationStates(iterable);\n     }\n     if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n       builder.addAllApplicationTags(this.applicationTags);\n     }\n     if (this.scope !\u003d null) {\n       builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n     }\n+    if (this.start !\u003d null) {\n+      builder.setStartBegin(start.getMinimumLong());\n+      builder.setStartEnd(start.getMaximumLong());\n+    }\n+    \n+    if (this.finish !\u003d null) {\n+      builder.setFinishBegin(start.getMinimumLong());\n+      builder.setFinishEnd(start.getMaximumLong());\n+    }\n+    \n+    builder.setLimit(limit);\n+    \n+    if (this.users !\u003d null \u0026\u0026 !this.users.isEmpty()) {\n+      builder.addAllUsers(this.users);\n+    }\n+    \n+    if (this.queues !\u003d null \u0026\u0026 !this.queues.isEmpty()) {\n+      builder.addAllQueues(this.queues);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (this.applicationTypes !\u003d null) {\n      addLocalApplicationTypesToProto();\n    }\n    if (this.applicationStates !\u003d null) {\n      maybeInitBuilder();\n      builder.clearApplicationStates();\n      Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n          new Iterable\u003cYarnApplicationStateProto\u003e() {\n\n            @Override\n            public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n              return new Iterator\u003cYarnApplicationStateProto\u003e() {\n\n                Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                    .iterator();\n\n                @Override\n                public boolean hasNext() {\n                  return iter.hasNext();\n                }\n\n                @Override\n                public YarnApplicationStateProto next() {\n                  return ProtoUtils.convertToProtoFormat(iter.next());\n                }\n\n                @Override\n                public void remove() {\n                  throw new UnsupportedOperationException();\n\n                }\n              };\n\n            }\n          };\n      builder.addAllApplicationStates(iterable);\n    }\n    if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n      builder.addAllApplicationTags(this.applicationTags);\n    }\n    if (this.scope !\u003d null) {\n      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n    }\n    if (this.start !\u003d null) {\n      builder.setStartBegin(start.getMinimumLong());\n      builder.setStartEnd(start.getMaximumLong());\n    }\n    \n    if (this.finish !\u003d null) {\n      builder.setFinishBegin(start.getMinimumLong());\n      builder.setFinishEnd(start.getMaximumLong());\n    }\n    \n    builder.setLimit(limit);\n    \n    if (this.users !\u003d null \u0026\u0026 !this.users.isEmpty()) {\n      builder.addAllUsers(this.users);\n    }\n    \n    if (this.queues !\u003d null \u0026\u0026 !this.queues.isEmpty()) {\n      builder.addAllQueues(this.queues);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "ebe0c17a95ae37d4768f2928ea193e89db34ead5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1461. Added tags for YARN applications and changed RM to handle them. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564633 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 8:55 PM",
      "commitName": "ebe0c17a95ae37d4768f2928ea193e89db34ead5",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "11/11/13 1:49 PM",
      "commitNameOld": "72c6d6255a86225ae1771fcc15e46aff7a4cc384",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 85.3,
      "commitsBetweenForRepo": 484,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,45 @@\n   private void mergeLocalToBuilder() {\n     if (this.applicationTypes !\u003d null) {\n       addLocalApplicationTypesToProto();\n     }\n     if (this.applicationStates !\u003d null) {\n       maybeInitBuilder();\n       builder.clearApplicationStates();\n       Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n           new Iterable\u003cYarnApplicationStateProto\u003e() {\n \n             @Override\n             public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n               return new Iterator\u003cYarnApplicationStateProto\u003e() {\n \n                 Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                     .iterator();\n \n                 @Override\n                 public boolean hasNext() {\n                   return iter.hasNext();\n                 }\n \n                 @Override\n                 public YarnApplicationStateProto next() {\n                   return ProtoUtils.convertToProtoFormat(iter.next());\n                 }\n \n                 @Override\n                 public void remove() {\n                   throw new UnsupportedOperationException();\n \n                 }\n               };\n \n             }\n           };\n       builder.addAllApplicationStates(iterable);\n     }\n+    if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n+      builder.addAllApplicationTags(this.applicationTags);\n+    }\n+    if (this.scope !\u003d null) {\n+      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (this.applicationTypes !\u003d null) {\n      addLocalApplicationTypesToProto();\n    }\n    if (this.applicationStates !\u003d null) {\n      maybeInitBuilder();\n      builder.clearApplicationStates();\n      Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n          new Iterable\u003cYarnApplicationStateProto\u003e() {\n\n            @Override\n            public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n              return new Iterator\u003cYarnApplicationStateProto\u003e() {\n\n                Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                    .iterator();\n\n                @Override\n                public boolean hasNext() {\n                  return iter.hasNext();\n                }\n\n                @Override\n                public YarnApplicationStateProto next() {\n                  return ProtoUtils.convertToProtoFormat(iter.next());\n                }\n\n                @Override\n                public void remove() {\n                  throw new UnsupportedOperationException();\n\n                }\n              };\n\n            }\n          };\n      builder.addAllApplicationStates(iterable);\n    }\n    if (this.applicationTags !\u003d null \u0026\u0026 !this.applicationTags.isEmpty()) {\n      builder.addAllApplicationTags(this.applicationTags);\n    }\n    if (this.scope !\u003d null) {\n      builder.setScope(ProtoUtils.convertToProtoFormat(scope));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1074. Cleaned up YARN CLI application list to only display running applications by default. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517196 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/13 2:16 PM",
      "commitName": "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "15/08/13 12:20 AM",
      "commitNameOld": "b776bd46aed2f5b3aa226af36c0081a7d1f69eda",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 9.58,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,39 @@\n   private void mergeLocalToBuilder() {\n     if (this.applicationTypes !\u003d null) {\n       addLocalApplicationTypesToProto();\n     }\n+    if (this.applicationStates !\u003d null) {\n+      maybeInitBuilder();\n+      builder.clearApplicationStates();\n+      Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n+          new Iterable\u003cYarnApplicationStateProto\u003e() {\n+\n+            @Override\n+            public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n+              return new Iterator\u003cYarnApplicationStateProto\u003e() {\n+\n+                Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n+                    .iterator();\n+\n+                @Override\n+                public boolean hasNext() {\n+                  return iter.hasNext();\n+                }\n+\n+                @Override\n+                public YarnApplicationStateProto next() {\n+                  return ProtoUtils.convertToProtoFormat(iter.next());\n+                }\n+\n+                @Override\n+                public void remove() {\n+                  throw new UnsupportedOperationException();\n+\n+                }\n+              };\n+\n+            }\n+          };\n+      builder.addAllApplicationStates(iterable);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (this.applicationTypes !\u003d null) {\n      addLocalApplicationTypesToProto();\n    }\n    if (this.applicationStates !\u003d null) {\n      maybeInitBuilder();\n      builder.clearApplicationStates();\n      Iterable\u003cYarnApplicationStateProto\u003e iterable \u003d\n          new Iterable\u003cYarnApplicationStateProto\u003e() {\n\n            @Override\n            public Iterator\u003cYarnApplicationStateProto\u003e iterator() {\n              return new Iterator\u003cYarnApplicationStateProto\u003e() {\n\n                Iterator\u003cYarnApplicationState\u003e iter \u003d applicationStates\n                    .iterator();\n\n                @Override\n                public boolean hasNext() {\n                  return iter.hasNext();\n                }\n\n                @Override\n                public YarnApplicationStateProto next() {\n                  return ProtoUtils.convertToProtoFormat(iter.next());\n                }\n\n                @Override\n                public void remove() {\n                  throw new UnsupportedOperationException();\n\n                }\n              };\n\n            }\n          };\n      builder.addAllApplicationStates(iterable);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java",
      "extendedDetails": {}
    },
    "e2cce7bd26cb943225a0d4ffb6f674e1b8ee39ae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-727, MAPREDUCE-5325. ClientRMProtocol.getAllApplications should accept ApplicationType as a parameter. Contributed by Xuan Gong.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1501599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/07/13 4:01 PM",
      "commitName": "e2cce7bd26cb943225a0d4ffb6f674e1b8ee39ae",
      "commitAuthor": "Hitesh Shah",
      "diff": "@@ -0,0 +1,5 @@\n+  private void mergeLocalToBuilder() {\n+    if (this.applicationTypes !\u003d null) {\n+      addLocalApplicationTypesToProto();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void mergeLocalToBuilder() {\n    if (this.applicationTypes !\u003d null) {\n      addLocalApplicationTypesToProto();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetApplicationsRequestPBImpl.java"
    }
  }
}