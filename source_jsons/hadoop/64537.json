{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "bindAWSClient",
  "functionId": "bindAWSClient___name-URI__dtEnabled-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 598,
  "functionEndLine": 645,
  "numCommitsSeen": 141,
  "timeTaken": 3415,
  "changeHistory": [
    "2bbf73f1df96ebe7e6fcf64a724ae846230a8487",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502"
  ],
  "changeHistoryShort": {
    "2bbf73f1df96ebe7e6fcf64a724ae846230a8487": "Ybodychange",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2bbf73f1df96ebe7e6fcf64a724ae846230a8487": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16645. S3A Delegation Token extension point to use StoreContext.\n\nContributed by Steve Loughran.\n\nThis is part of the ongoing refactoring of the S3A codebase, with the\ndelegation token support (HADOOP-14556) no longer given a direct reference\nto the owning S3AFileSystem. Instead it gets a StoreContext and a new\ninterface, DelegationOperations, to access those operations offered by S3AFS\nwhich are specifically needed by the DT bindings.\n\nThe sole operation needed is listAWSPolicyRules(), which is used to allow\nS3A FS and the S3Guard metastore to return the AWS policy rules needed to\naccess their specific services/buckets/tables, allowing the AssumedRole\ndelegation token to be locked down.\n\nAs further restructuring takes place, that interface\u0027s implementation\ncan be moved to wherever the new home for those operations ends up.\n\nAlthough it changes the API of an extension point, that feature (S3\nDelegation Tokens) has not shipped; backwards compatibility is not a\nproblem except for anyone who has implemented DT support against trunk.\nTo those developers: sorry.\n\nChange-Id: I770f58b49ff7634a34875ba37b7d51c94d7c21da\n",
      "commitDate": "07/01/20 3:17 AM",
      "commitName": "2bbf73f1df96ebe7e6fcf64a724ae846230a8487",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "26/11/19 7:36 AM",
      "commitNameOld": "ea25f4de236611d388e14a710ebe5d6872c421b6",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 41.82,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   private void bindAWSClient(URI name, boolean dtEnabled) throws IOException {\n     Configuration conf \u003d getConf();\n     credentials \u003d null;\n     String uaSuffix \u003d \"\";\n \n     if (dtEnabled) {\n       // Delegation support.\n       // Create and start the DT integration.\n       // Then look for an existing DT for this bucket, switch to authenticating\n       // with it if so.\n \n       LOG.debug(\"Using delegation tokens\");\n       S3ADelegationTokens tokens \u003d new S3ADelegationTokens();\n       this.delegationTokens \u003d Optional.of(tokens);\n-      tokens.bindToFileSystem(getCanonicalUri(), this);\n+      tokens.bindToFileSystem(getCanonicalUri(),\n+          createStoreContext(),\n+          createDelegationOperations());\n       tokens.init(conf);\n       tokens.start();\n       // switch to the DT provider and bypass all other configured\n       // providers.\n       if (tokens.isBoundToDT()) {\n         // A DT was retrieved.\n         LOG.debug(\"Using existing delegation token\");\n         // and use the encryption settings from that client, whatever they were\n       } else {\n         LOG.debug(\"No delegation token for this instance\");\n       }\n       // Get new credential chain\n       credentials \u003d tokens.getCredentialProviders();\n       // and any encryption secrets which came from a DT\n       tokens.getEncryptionSecrets()\n           .ifPresent(this::setEncryptionSecrets);\n       // and update the UA field with any diagnostics provided by\n       // the DT binding.\n       uaSuffix \u003d tokens.getUserAgentField();\n     } else {\n       // DT support is disabled, so create the normal credential chain\n       credentials \u003d createAWSCredentialProviderSet(name, conf);\n     }\n     LOG.debug(\"Using credential provider {}\", credentials);\n     Class\u003c? extends S3ClientFactory\u003e s3ClientFactoryClass \u003d conf.getClass(\n         S3_CLIENT_FACTORY_IMPL, DEFAULT_S3_CLIENT_FACTORY_IMPL,\n         S3ClientFactory.class);\n \n     s3 \u003d ReflectionUtils.newInstance(s3ClientFactoryClass, conf)\n         .createS3Client(getUri(), bucket, credentials, uaSuffix);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void bindAWSClient(URI name, boolean dtEnabled) throws IOException {\n    Configuration conf \u003d getConf();\n    credentials \u003d null;\n    String uaSuffix \u003d \"\";\n\n    if (dtEnabled) {\n      // Delegation support.\n      // Create and start the DT integration.\n      // Then look for an existing DT for this bucket, switch to authenticating\n      // with it if so.\n\n      LOG.debug(\"Using delegation tokens\");\n      S3ADelegationTokens tokens \u003d new S3ADelegationTokens();\n      this.delegationTokens \u003d Optional.of(tokens);\n      tokens.bindToFileSystem(getCanonicalUri(),\n          createStoreContext(),\n          createDelegationOperations());\n      tokens.init(conf);\n      tokens.start();\n      // switch to the DT provider and bypass all other configured\n      // providers.\n      if (tokens.isBoundToDT()) {\n        // A DT was retrieved.\n        LOG.debug(\"Using existing delegation token\");\n        // and use the encryption settings from that client, whatever they were\n      } else {\n        LOG.debug(\"No delegation token for this instance\");\n      }\n      // Get new credential chain\n      credentials \u003d tokens.getCredentialProviders();\n      // and any encryption secrets which came from a DT\n      tokens.getEncryptionSecrets()\n          .ifPresent(this::setEncryptionSecrets);\n      // and update the UA field with any diagnostics provided by\n      // the DT binding.\n      uaSuffix \u003d tokens.getUserAgentField();\n    } else {\n      // DT support is disabled, so create the normal credential chain\n      credentials \u003d createAWSCredentialProviderSet(name, conf);\n    }\n    LOG.debug(\"Using credential provider {}\", credentials);\n    Class\u003c? extends S3ClientFactory\u003e s3ClientFactoryClass \u003d conf.getClass(\n        S3_CLIENT_FACTORY_IMPL, DEFAULT_S3_CLIENT_FACTORY_IMPL,\n        S3ClientFactory.class);\n\n    s3 \u003d ReflectionUtils.newInstance(s3ClientFactoryClass, conf)\n        .createS3Client(getUri(), bucket, credentials, uaSuffix);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,46 @@\n+  private void bindAWSClient(URI name, boolean dtEnabled) throws IOException {\n+    Configuration conf \u003d getConf();\n+    credentials \u003d null;\n+    String uaSuffix \u003d \"\";\n+\n+    if (dtEnabled) {\n+      // Delegation support.\n+      // Create and start the DT integration.\n+      // Then look for an existing DT for this bucket, switch to authenticating\n+      // with it if so.\n+\n+      LOG.debug(\"Using delegation tokens\");\n+      S3ADelegationTokens tokens \u003d new S3ADelegationTokens();\n+      this.delegationTokens \u003d Optional.of(tokens);\n+      tokens.bindToFileSystem(getCanonicalUri(), this);\n+      tokens.init(conf);\n+      tokens.start();\n+      // switch to the DT provider and bypass all other configured\n+      // providers.\n+      if (tokens.isBoundToDT()) {\n+        // A DT was retrieved.\n+        LOG.debug(\"Using existing delegation token\");\n+        // and use the encryption settings from that client, whatever they were\n+      } else {\n+        LOG.debug(\"No delegation token for this instance\");\n+      }\n+      // Get new credential chain\n+      credentials \u003d tokens.getCredentialProviders();\n+      // and any encryption secrets which came from a DT\n+      tokens.getEncryptionSecrets()\n+          .ifPresent(this::setEncryptionSecrets);\n+      // and update the UA field with any diagnostics provided by\n+      // the DT binding.\n+      uaSuffix \u003d tokens.getUserAgentField();\n+    } else {\n+      // DT support is disabled, so create the normal credential chain\n+      credentials \u003d createAWSCredentialProviderSet(name, conf);\n+    }\n+    LOG.debug(\"Using credential provider {}\", credentials);\n+    Class\u003c? extends S3ClientFactory\u003e s3ClientFactoryClass \u003d conf.getClass(\n+        S3_CLIENT_FACTORY_IMPL, DEFAULT_S3_CLIENT_FACTORY_IMPL,\n+        S3ClientFactory.class);\n+\n+    s3 \u003d ReflectionUtils.newInstance(s3ClientFactoryClass, conf)\n+        .createS3Client(getUri(), bucket, credentials, uaSuffix);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void bindAWSClient(URI name, boolean dtEnabled) throws IOException {\n    Configuration conf \u003d getConf();\n    credentials \u003d null;\n    String uaSuffix \u003d \"\";\n\n    if (dtEnabled) {\n      // Delegation support.\n      // Create and start the DT integration.\n      // Then look for an existing DT for this bucket, switch to authenticating\n      // with it if so.\n\n      LOG.debug(\"Using delegation tokens\");\n      S3ADelegationTokens tokens \u003d new S3ADelegationTokens();\n      this.delegationTokens \u003d Optional.of(tokens);\n      tokens.bindToFileSystem(getCanonicalUri(), this);\n      tokens.init(conf);\n      tokens.start();\n      // switch to the DT provider and bypass all other configured\n      // providers.\n      if (tokens.isBoundToDT()) {\n        // A DT was retrieved.\n        LOG.debug(\"Using existing delegation token\");\n        // and use the encryption settings from that client, whatever they were\n      } else {\n        LOG.debug(\"No delegation token for this instance\");\n      }\n      // Get new credential chain\n      credentials \u003d tokens.getCredentialProviders();\n      // and any encryption secrets which came from a DT\n      tokens.getEncryptionSecrets()\n          .ifPresent(this::setEncryptionSecrets);\n      // and update the UA field with any diagnostics provided by\n      // the DT binding.\n      uaSuffix \u003d tokens.getUserAgentField();\n    } else {\n      // DT support is disabled, so create the normal credential chain\n      credentials \u003d createAWSCredentialProviderSet(name, conf);\n    }\n    LOG.debug(\"Using credential provider {}\", credentials);\n    Class\u003c? extends S3ClientFactory\u003e s3ClientFactoryClass \u003d conf.getClass(\n        S3_CLIENT_FACTORY_IMPL, DEFAULT_S3_CLIENT_FACTORY_IMPL,\n        S3ClientFactory.class);\n\n    s3 \u003d ReflectionUtils.newInstance(s3ClientFactoryClass, conf)\n        .createS3Client(getUri(), bucket, credentials, uaSuffix);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}