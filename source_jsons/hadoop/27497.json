{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineCollectorWebService.java",
  "functionName": "processTimelineEntities",
  "functionId": "processTimelineEntities___entities-TimelineEntities__appId-String__isSubAppWrite-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
  "functionStartLine": 294,
  "functionEndLine": 341,
  "numCommitsSeen": 27,
  "timeTaken": 2529,
  "changeHistory": [
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9",
    "2bdefbc4a070df2932a66e580d70239c132299d2"
  ],
  "changeHistoryShort": {
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": "Ybodychange",
    "2bdefbc4a070df2932a66e580d70239c132299d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "05/04/18 10:23 AM",
      "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
          "commitDate": "05/04/18 10:23 AM",
          "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "09/08/17 7:58 AM",
          "commitNameOld": "63cfcb90ac6fbb79ba9ed6b3044cd999fc74e58c",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 239.1,
          "commitsBetweenForRepo": 1846,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,48 @@\n   private static TimelineEntities processTimelineEntities(\n-      TimelineEntities entities) {\n+      TimelineEntities entities, String appId, boolean isSubAppWrite) {\n     TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n     for (TimelineEntity entity : entities.getEntities()) {\n       TimelineEntityType type \u003d null;\n       try {\n         type \u003d TimelineEntityType.valueOf(entity.getType());\n       } catch (IllegalArgumentException e) {\n         type \u003d null;\n       }\n       if (type !\u003d null) {\n         switch (type) {\n         case YARN_CLUSTER:\n           entitiesToReturn.addEntity(new ClusterEntity(entity));\n           break;\n         case YARN_FLOW_RUN:\n           entitiesToReturn.addEntity(new FlowRunEntity(entity));\n           break;\n         case YARN_APPLICATION:\n           entitiesToReturn.addEntity(new ApplicationEntity(entity));\n           break;\n         case YARN_APPLICATION_ATTEMPT:\n           entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n           break;\n         case YARN_CONTAINER:\n           entitiesToReturn.addEntity(new ContainerEntity(entity));\n           break;\n         case YARN_QUEUE:\n           entitiesToReturn.addEntity(new QueueEntity(entity));\n           break;\n         case YARN_USER:\n           entitiesToReturn.addEntity(new UserEntity(entity));\n           break;\n         default:\n           break;\n         }\n       } else {\n-        entitiesToReturn.addEntity(entity);\n+        if (isSubAppWrite) {\n+          SubApplicationEntity se \u003d new SubApplicationEntity(entity);\n+          se.setApplicationId(appId);\n+          entitiesToReturn.addEntity(se);\n+        } else {\n+          entitiesToReturn.addEntity(entity);\n+        }\n       }\n     }\n     return entitiesToReturn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static TimelineEntities processTimelineEntities(\n      TimelineEntities entities, String appId, boolean isSubAppWrite) {\n    TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n    for (TimelineEntity entity : entities.getEntities()) {\n      TimelineEntityType type \u003d null;\n      try {\n        type \u003d TimelineEntityType.valueOf(entity.getType());\n      } catch (IllegalArgumentException e) {\n        type \u003d null;\n      }\n      if (type !\u003d null) {\n        switch (type) {\n        case YARN_CLUSTER:\n          entitiesToReturn.addEntity(new ClusterEntity(entity));\n          break;\n        case YARN_FLOW_RUN:\n          entitiesToReturn.addEntity(new FlowRunEntity(entity));\n          break;\n        case YARN_APPLICATION:\n          entitiesToReturn.addEntity(new ApplicationEntity(entity));\n          break;\n        case YARN_APPLICATION_ATTEMPT:\n          entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n          break;\n        case YARN_CONTAINER:\n          entitiesToReturn.addEntity(new ContainerEntity(entity));\n          break;\n        case YARN_QUEUE:\n          entitiesToReturn.addEntity(new QueueEntity(entity));\n          break;\n        case YARN_USER:\n          entitiesToReturn.addEntity(new UserEntity(entity));\n          break;\n        default:\n          break;\n        }\n      } else {\n        if (isSubAppWrite) {\n          SubApplicationEntity se \u003d new SubApplicationEntity(entity);\n          se.setApplicationId(appId);\n          entitiesToReturn.addEntity(se);\n        } else {\n          entitiesToReturn.addEntity(entity);\n        }\n      }\n    }\n    return entitiesToReturn;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
          "extendedDetails": {
            "oldValue": "[entities-TimelineEntities]",
            "newValue": "[entities-TimelineEntities, appId-String, isSubAppWrite-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
          "commitDate": "05/04/18 10:23 AM",
          "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "09/08/17 7:58 AM",
          "commitNameOld": "63cfcb90ac6fbb79ba9ed6b3044cd999fc74e58c",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 239.1,
          "commitsBetweenForRepo": 1846,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,48 @@\n   private static TimelineEntities processTimelineEntities(\n-      TimelineEntities entities) {\n+      TimelineEntities entities, String appId, boolean isSubAppWrite) {\n     TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n     for (TimelineEntity entity : entities.getEntities()) {\n       TimelineEntityType type \u003d null;\n       try {\n         type \u003d TimelineEntityType.valueOf(entity.getType());\n       } catch (IllegalArgumentException e) {\n         type \u003d null;\n       }\n       if (type !\u003d null) {\n         switch (type) {\n         case YARN_CLUSTER:\n           entitiesToReturn.addEntity(new ClusterEntity(entity));\n           break;\n         case YARN_FLOW_RUN:\n           entitiesToReturn.addEntity(new FlowRunEntity(entity));\n           break;\n         case YARN_APPLICATION:\n           entitiesToReturn.addEntity(new ApplicationEntity(entity));\n           break;\n         case YARN_APPLICATION_ATTEMPT:\n           entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n           break;\n         case YARN_CONTAINER:\n           entitiesToReturn.addEntity(new ContainerEntity(entity));\n           break;\n         case YARN_QUEUE:\n           entitiesToReturn.addEntity(new QueueEntity(entity));\n           break;\n         case YARN_USER:\n           entitiesToReturn.addEntity(new UserEntity(entity));\n           break;\n         default:\n           break;\n         }\n       } else {\n-        entitiesToReturn.addEntity(entity);\n+        if (isSubAppWrite) {\n+          SubApplicationEntity se \u003d new SubApplicationEntity(entity);\n+          se.setApplicationId(appId);\n+          entitiesToReturn.addEntity(se);\n+        } else {\n+          entitiesToReturn.addEntity(entity);\n+        }\n       }\n     }\n     return entitiesToReturn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static TimelineEntities processTimelineEntities(\n      TimelineEntities entities, String appId, boolean isSubAppWrite) {\n    TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n    for (TimelineEntity entity : entities.getEntities()) {\n      TimelineEntityType type \u003d null;\n      try {\n        type \u003d TimelineEntityType.valueOf(entity.getType());\n      } catch (IllegalArgumentException e) {\n        type \u003d null;\n      }\n      if (type !\u003d null) {\n        switch (type) {\n        case YARN_CLUSTER:\n          entitiesToReturn.addEntity(new ClusterEntity(entity));\n          break;\n        case YARN_FLOW_RUN:\n          entitiesToReturn.addEntity(new FlowRunEntity(entity));\n          break;\n        case YARN_APPLICATION:\n          entitiesToReturn.addEntity(new ApplicationEntity(entity));\n          break;\n        case YARN_APPLICATION_ATTEMPT:\n          entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n          break;\n        case YARN_CONTAINER:\n          entitiesToReturn.addEntity(new ContainerEntity(entity));\n          break;\n        case YARN_QUEUE:\n          entitiesToReturn.addEntity(new QueueEntity(entity));\n          break;\n        case YARN_USER:\n          entitiesToReturn.addEntity(new UserEntity(entity));\n          break;\n        default:\n          break;\n        }\n      } else {\n        if (isSubAppWrite) {\n          SubApplicationEntity se \u003d new SubApplicationEntity(entity);\n          se.setApplicationId(appId);\n          entitiesToReturn.addEntity(se);\n        } else {\n          entitiesToReturn.addEntity(entity);\n        }\n      }\n    }\n    return entitiesToReturn;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthor": "Vrushali",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2bdefbc4a070df2932a66e580d70239c132299d2",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private static TimelineEntities processTimelineEntities(\n       TimelineEntities entities) {\n     TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n     for (TimelineEntity entity : entities.getEntities()) {\n       TimelineEntityType type \u003d null;\n       try {\n         type \u003d TimelineEntityType.valueOf(entity.getType());\n       } catch (IllegalArgumentException e) {\n         type \u003d null;\n       }\n       if (type !\u003d null) {\n         switch (type) {\n           case YARN_CLUSTER:\n             entitiesToReturn.addEntity(new ClusterEntity(entity));\n             break;\n-          case YARN_FLOW:\n-            entitiesToReturn.addEntity(new FlowEntity(entity));\n+          case YARN_FLOW_RUN:\n+            entitiesToReturn.addEntity(new FlowRunEntity(entity));\n             break;\n           case YARN_APPLICATION:\n             entitiesToReturn.addEntity(new ApplicationEntity(entity));\n             break;\n           case YARN_APPLICATION_ATTEMPT:\n             entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n             break;\n           case YARN_CONTAINER:\n             entitiesToReturn.addEntity(new ContainerEntity(entity));\n             break;\n           case YARN_QUEUE:\n             entitiesToReturn.addEntity(new QueueEntity(entity));\n             break;\n           case YARN_USER:\n             entitiesToReturn.addEntity(new UserEntity(entity));\n             break;\n           default:\n             break;\n         }\n       } else {\n         entitiesToReturn.addEntity(entity);\n       }\n     }\n     return entitiesToReturn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static TimelineEntities processTimelineEntities(\n      TimelineEntities entities) {\n    TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n    for (TimelineEntity entity : entities.getEntities()) {\n      TimelineEntityType type \u003d null;\n      try {\n        type \u003d TimelineEntityType.valueOf(entity.getType());\n      } catch (IllegalArgumentException e) {\n        type \u003d null;\n      }\n      if (type !\u003d null) {\n        switch (type) {\n          case YARN_CLUSTER:\n            entitiesToReturn.addEntity(new ClusterEntity(entity));\n            break;\n          case YARN_FLOW_RUN:\n            entitiesToReturn.addEntity(new FlowRunEntity(entity));\n            break;\n          case YARN_APPLICATION:\n            entitiesToReturn.addEntity(new ApplicationEntity(entity));\n            break;\n          case YARN_APPLICATION_ATTEMPT:\n            entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n            break;\n          case YARN_CONTAINER:\n            entitiesToReturn.addEntity(new ContainerEntity(entity));\n            break;\n          case YARN_QUEUE:\n            entitiesToReturn.addEntity(new QueueEntity(entity));\n            break;\n          case YARN_USER:\n            entitiesToReturn.addEntity(new UserEntity(entity));\n            break;\n          default:\n            break;\n        }\n      } else {\n        entitiesToReturn.addEntity(entity);\n      }\n    }\n    return entitiesToReturn;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "2bdefbc4a070df2932a66e580d70239c132299d2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3431. Sub resources of timeline entity needs to be passed to a separate endpoint. Contributed By Zhijie Shen.\n\n(cherry picked from commit fa5cc75245a6dba549620a8b26c7b4a8aed9838e)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2bdefbc4a070df2932a66e580d70239c132299d2",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,42 @@\n+  private static TimelineEntities processTimelineEntities(\n+      TimelineEntities entities) {\n+    TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n+    for (TimelineEntity entity : entities.getEntities()) {\n+      TimelineEntityType type \u003d null;\n+      try {\n+        type \u003d TimelineEntityType.valueOf(entity.getType());\n+      } catch (IllegalArgumentException e) {\n+        type \u003d null;\n+      }\n+      if (type !\u003d null) {\n+        switch (type) {\n+          case YARN_CLUSTER:\n+            entitiesToReturn.addEntity(new ClusterEntity(entity));\n+            break;\n+          case YARN_FLOW:\n+            entitiesToReturn.addEntity(new FlowEntity(entity));\n+            break;\n+          case YARN_APPLICATION:\n+            entitiesToReturn.addEntity(new ApplicationEntity(entity));\n+            break;\n+          case YARN_APPLICATION_ATTEMPT:\n+            entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n+            break;\n+          case YARN_CONTAINER:\n+            entitiesToReturn.addEntity(new ContainerEntity(entity));\n+            break;\n+          case YARN_QUEUE:\n+            entitiesToReturn.addEntity(new QueueEntity(entity));\n+            break;\n+          case YARN_USER:\n+            entitiesToReturn.addEntity(new UserEntity(entity));\n+            break;\n+          default:\n+            break;\n+        }\n+      } else {\n+        entitiesToReturn.addEntity(entity);\n+      }\n+    }\n+    return entitiesToReturn;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static TimelineEntities processTimelineEntities(\n      TimelineEntities entities) {\n    TimelineEntities entitiesToReturn \u003d new TimelineEntities();\n    for (TimelineEntity entity : entities.getEntities()) {\n      TimelineEntityType type \u003d null;\n      try {\n        type \u003d TimelineEntityType.valueOf(entity.getType());\n      } catch (IllegalArgumentException e) {\n        type \u003d null;\n      }\n      if (type !\u003d null) {\n        switch (type) {\n          case YARN_CLUSTER:\n            entitiesToReturn.addEntity(new ClusterEntity(entity));\n            break;\n          case YARN_FLOW:\n            entitiesToReturn.addEntity(new FlowEntity(entity));\n            break;\n          case YARN_APPLICATION:\n            entitiesToReturn.addEntity(new ApplicationEntity(entity));\n            break;\n          case YARN_APPLICATION_ATTEMPT:\n            entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\n            break;\n          case YARN_CONTAINER:\n            entitiesToReturn.addEntity(new ContainerEntity(entity));\n            break;\n          case YARN_QUEUE:\n            entitiesToReturn.addEntity(new QueueEntity(entity));\n            break;\n          case YARN_USER:\n            entitiesToReturn.addEntity(new UserEntity(entity));\n            break;\n          default:\n            break;\n        }\n      } else {\n        entitiesToReturn.addEntity(entity);\n      }\n    }\n    return entitiesToReturn;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java"
    }
  }
}