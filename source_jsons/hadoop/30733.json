{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "getDomains",
  "functionId": "getDomains___owner-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 1739,
  "functionEndLine": 1778,
  "numCommitsSeen": 12,
  "timeTaken": 1390,
  "changeHistory": [
    "01aca54a22c8586d232a8f79fe9977aeb8d09b83",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "01aca54a22c8586d232a8f79fe9977aeb8d09b83": "Ybodychange",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01aca54a22c8586d232a8f79fe9977aeb8d09b83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5368. Memory leak in timeline server (Jonathan Eagles via Varun Saxena)\n",
      "commitDate": "28/03/17 1:23 PM",
      "commitName": "01aca54a22c8586d232a8f79fe9977aeb8d09b83",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "20/07/16 8:36 AM",
      "commitNameOld": "1c9d2ab503ea5a3f16757351af9603041059b390",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 251.2,
      "commitsBetweenForRepo": 1583,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,40 @@\n   public TimelineDomains getDomains(String owner) throws IOException {\n-    DBIterator iterator \u003d null;\n-    try {\n+    try (DBIterator iterator \u003d ownerdb.iterator()) {\n       byte[] prefix \u003d KeyBuilder.newInstance().add(owner).getBytesForLookup();\n+      iterator.seek(prefix);\n       List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n-      for (iterator \u003d ownerdb.iterator(), iterator.seek(prefix); iterator\n-          .hasNext();) {\n+      while (iterator.hasNext()) {\n         byte[] key \u003d iterator.peekNext().getKey();\n         if (!prefixMatches(prefix, prefix.length, key)) {\n           break;\n         }\n         // Iterator to parse the rows of an individual domain\n         KeyParser kp \u003d new KeyParser(key, prefix.length);\n         String domainId \u003d kp.getNextString();\n         byte[] prefixExt \u003d KeyBuilder.newInstance().add(owner).add(domainId)\n             .getBytesForLookup();\n         TimelineDomain domainToReturn \u003d getTimelineDomain(iterator, domainId,\n             prefixExt);\n         if (domainToReturn !\u003d null) {\n           domains.add(domainToReturn);\n         }\n       }\n       // Sort the domains to return\n       Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n         @Override\n         public int compare(TimelineDomain domain1, TimelineDomain domain2) {\n           int result \u003d domain2.getCreatedTime().compareTo(\n               domain1.getCreatedTime());\n           if (result \u003d\u003d 0) {\n             return domain2.getModifiedTime().compareTo(\n                 domain1.getModifiedTime());\n           } else {\n             return result;\n           }\n         }\n       });\n       TimelineDomains domainsToReturn \u003d new TimelineDomains();\n       domainsToReturn.addDomains(domains);\n       return domainsToReturn;\n-    } finally {\n-      IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner) throws IOException {\n    try (DBIterator iterator \u003d ownerdb.iterator()) {\n      byte[] prefix \u003d KeyBuilder.newInstance().add(owner).getBytesForLookup();\n      iterator.seek(prefix);\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      while (iterator.hasNext()) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(owner).add(domainId)\n            .getBytesForLookup();\n        TimelineDomain domainToReturn \u003d getTimelineDomain(iterator, domainId,\n            prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(TimelineDomain domain1, TimelineDomain domain2) {\n          int result \u003d domain2.getCreatedTime().compareTo(\n              domain1.getCreatedTime());\n          if (result \u003d\u003d 0) {\n            return domain2.getModifiedTime().compareTo(\n                domain1.getModifiedTime());\n          } else {\n            return result;\n          }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
      "extendedDetails": {}
    },
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,43 @@\n+  public TimelineDomains getDomains(String owner) throws IOException {\n+    DBIterator iterator \u003d null;\n+    try {\n+      byte[] prefix \u003d KeyBuilder.newInstance().add(owner).getBytesForLookup();\n+      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n+      for (iterator \u003d ownerdb.iterator(), iterator.seek(prefix); iterator\n+          .hasNext();) {\n+        byte[] key \u003d iterator.peekNext().getKey();\n+        if (!prefixMatches(prefix, prefix.length, key)) {\n+          break;\n+        }\n+        // Iterator to parse the rows of an individual domain\n+        KeyParser kp \u003d new KeyParser(key, prefix.length);\n+        String domainId \u003d kp.getNextString();\n+        byte[] prefixExt \u003d KeyBuilder.newInstance().add(owner).add(domainId)\n+            .getBytesForLookup();\n+        TimelineDomain domainToReturn \u003d getTimelineDomain(iterator, domainId,\n+            prefixExt);\n+        if (domainToReturn !\u003d null) {\n+          domains.add(domainToReturn);\n+        }\n+      }\n+      // Sort the domains to return\n+      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n+        @Override\n+        public int compare(TimelineDomain domain1, TimelineDomain domain2) {\n+          int result \u003d domain2.getCreatedTime().compareTo(\n+              domain1.getCreatedTime());\n+          if (result \u003d\u003d 0) {\n+            return domain2.getModifiedTime().compareTo(\n+                domain1.getModifiedTime());\n+          } else {\n+            return result;\n+          }\n+        }\n+      });\n+      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n+      domainsToReturn.addDomains(domains);\n+      return domainsToReturn;\n+    } finally {\n+      IOUtils.cleanup(LOG, iterator);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineDomains getDomains(String owner) throws IOException {\n    DBIterator iterator \u003d null;\n    try {\n      byte[] prefix \u003d KeyBuilder.newInstance().add(owner).getBytesForLookup();\n      List\u003cTimelineDomain\u003e domains \u003d new ArrayList\u003cTimelineDomain\u003e();\n      for (iterator \u003d ownerdb.iterator(), iterator.seek(prefix); iterator\n          .hasNext();) {\n        byte[] key \u003d iterator.peekNext().getKey();\n        if (!prefixMatches(prefix, prefix.length, key)) {\n          break;\n        }\n        // Iterator to parse the rows of an individual domain\n        KeyParser kp \u003d new KeyParser(key, prefix.length);\n        String domainId \u003d kp.getNextString();\n        byte[] prefixExt \u003d KeyBuilder.newInstance().add(owner).add(domainId)\n            .getBytesForLookup();\n        TimelineDomain domainToReturn \u003d getTimelineDomain(iterator, domainId,\n            prefixExt);\n        if (domainToReturn !\u003d null) {\n          domains.add(domainToReturn);\n        }\n      }\n      // Sort the domains to return\n      Collections.sort(domains, new Comparator\u003cTimelineDomain\u003e() {\n        @Override\n        public int compare(TimelineDomain domain1, TimelineDomain domain2) {\n          int result \u003d domain2.getCreatedTime().compareTo(\n              domain1.getCreatedTime());\n          if (result \u003d\u003d 0) {\n            return domain2.getModifiedTime().compareTo(\n                domain1.getModifiedTime());\n          } else {\n            return result;\n          }\n        }\n      });\n      TimelineDomains domainsToReturn \u003d new TimelineDomains();\n      domainsToReturn.addDomains(domains);\n      return domainsToReturn;\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}