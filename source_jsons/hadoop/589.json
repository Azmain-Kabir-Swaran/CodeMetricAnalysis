{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DfsClientConf.java",
  "functionName": "confAsString",
  "functionId": "confAsString",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
  "functionStartLine": 925,
  "functionEndLine": 955,
  "numCommitsSeen": 32,
  "timeTaken": 4494,
  "changeHistory": [
    "2e7331ca264dd366b975f3c8e610cf84eb8cc155",
    "7e971b7315fa2942b4db7ba11ed513766957b777",
    "3aac4758b007a56e3d66998d457b2156effca528",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "2e7331ca264dd366b975f3c8e610cf84eb8cc155": "Ybodychange",
    "7e971b7315fa2942b4db7ba11ed513766957b777": "Ybodychange",
    "3aac4758b007a56e3d66998d457b2156effca528": "Yfilerename",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb": "Ybodychange",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Ybodychange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e7331ca264dd366b975f3c8e610cf84eb8cc155": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12528. Add an option to not disable short-circuit reads on failures. Contributed by Xiao Chen.\n",
      "commitDate": "30/01/18 3:25 PM",
      "commitName": "2e7331ca264dd366b975f3c8e610cf84eb8cc155",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "22/06/17 1:35 PM",
      "commitNameOld": "6d116ffad23b470f8e9ca131d8e89cbbbb4378d7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 222.12,
      "commitsBetweenForRepo": 1588,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n     public String confAsString() {\n \n       return \"shortCircuitStreamsCacheSize \u003d \"\n           + shortCircuitStreamsCacheSize\n           + \", shortCircuitStreamsCacheExpiryMs \u003d \"\n           + shortCircuitStreamsCacheExpiryMs\n           + \", shortCircuitMmapCacheSize \u003d \"\n           + shortCircuitMmapCacheSize\n           + \", shortCircuitMmapCacheExpiryMs \u003d \"\n           + shortCircuitMmapCacheExpiryMs\n           + \", shortCircuitMmapCacheRetryTimeout \u003d \"\n           + shortCircuitMmapCacheRetryTimeout\n           + \", shortCircuitCacheStaleThresholdMs \u003d \"\n           + shortCircuitCacheStaleThresholdMs\n           + \", socketCacheCapacity \u003d \"\n           + socketCacheCapacity\n           + \", socketCacheExpiry \u003d \"\n           + socketCacheExpiry\n           + \", shortCircuitLocalReads \u003d \"\n           + shortCircuitLocalReads\n           + \", useLegacyBlockReaderLocal \u003d \"\n           + useLegacyBlockReaderLocal\n           + \", domainSocketDataTraffic \u003d \"\n           + domainSocketDataTraffic\n           + \", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \"\n           + shortCircuitSharedMemoryWatcherInterruptCheckMs\n           + \", keyProviderCacheExpiryMs \u003d \"\n-          + keyProviderCacheExpiryMs;\n+          + keyProviderCacheExpiryMs\n+          + \", domainSocketDisableIntervalSeconds \u003d \"\n+          + domainSocketDisableIntervalSeconds;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String confAsString() {\n\n      return \"shortCircuitStreamsCacheSize \u003d \"\n          + shortCircuitStreamsCacheSize\n          + \", shortCircuitStreamsCacheExpiryMs \u003d \"\n          + shortCircuitStreamsCacheExpiryMs\n          + \", shortCircuitMmapCacheSize \u003d \"\n          + shortCircuitMmapCacheSize\n          + \", shortCircuitMmapCacheExpiryMs \u003d \"\n          + shortCircuitMmapCacheExpiryMs\n          + \", shortCircuitMmapCacheRetryTimeout \u003d \"\n          + shortCircuitMmapCacheRetryTimeout\n          + \", shortCircuitCacheStaleThresholdMs \u003d \"\n          + shortCircuitCacheStaleThresholdMs\n          + \", socketCacheCapacity \u003d \"\n          + socketCacheCapacity\n          + \", socketCacheExpiry \u003d \"\n          + socketCacheExpiry\n          + \", shortCircuitLocalReads \u003d \"\n          + shortCircuitLocalReads\n          + \", useLegacyBlockReaderLocal \u003d \"\n          + useLegacyBlockReaderLocal\n          + \", domainSocketDataTraffic \u003d \"\n          + domainSocketDataTraffic\n          + \", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \"\n          + shortCircuitSharedMemoryWatcherInterruptCheckMs\n          + \", keyProviderCacheExpiryMs \u003d \"\n          + keyProviderCacheExpiryMs\n          + \", domainSocketDisableIntervalSeconds \u003d \"\n          + domainSocketDisableIntervalSeconds;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
      "extendedDetails": {}
    },
    "7e971b7315fa2942b4db7ba11ed513766957b777": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8962. Clean up checkstyle warnings in o.a.h.hdfs.DfsClientConf. Contributed by Mingliang Liu.\n",
      "commitDate": "27/08/15 9:02 AM",
      "commitName": "7e971b7315fa2942b4db7ba11ed513766957b777",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/08/15 5:02 PM",
      "commitNameOld": "7087e700e032dabc174ecc12b62c12e7d49b995f",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 5.67,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n     public String confAsString() {\n-      StringBuilder builder \u003d new StringBuilder();\n-      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n-        append(shortCircuitStreamsCacheSize).\n-        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n-        append(shortCircuitStreamsCacheExpiryMs).\n-        append(\", shortCircuitMmapCacheSize \u003d \").\n-        append(shortCircuitMmapCacheSize).\n-        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n-        append(shortCircuitMmapCacheExpiryMs).\n-        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n-        append(shortCircuitMmapCacheRetryTimeout).\n-        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n-        append(shortCircuitCacheStaleThresholdMs).\n-        append(\", socketCacheCapacity \u003d \").\n-        append(socketCacheCapacity).\n-        append(\", socketCacheExpiry \u003d \").\n-        append(socketCacheExpiry).\n-        append(\", shortCircuitLocalReads \u003d \").\n-        append(shortCircuitLocalReads).\n-        append(\", useLegacyBlockReaderLocal \u003d \").\n-        append(useLegacyBlockReaderLocal).\n-        append(\", domainSocketDataTraffic \u003d \").\n-        append(domainSocketDataTraffic).\n-        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n-        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n-        append(\", keyProviderCacheExpiryMs \u003d \").\n-        append(keyProviderCacheExpiryMs);\n \n-      return builder.toString();\n+      return \"shortCircuitStreamsCacheSize \u003d \"\n+          + shortCircuitStreamsCacheSize\n+          + \", shortCircuitStreamsCacheExpiryMs \u003d \"\n+          + shortCircuitStreamsCacheExpiryMs\n+          + \", shortCircuitMmapCacheSize \u003d \"\n+          + shortCircuitMmapCacheSize\n+          + \", shortCircuitMmapCacheExpiryMs \u003d \"\n+          + shortCircuitMmapCacheExpiryMs\n+          + \", shortCircuitMmapCacheRetryTimeout \u003d \"\n+          + shortCircuitMmapCacheRetryTimeout\n+          + \", shortCircuitCacheStaleThresholdMs \u003d \"\n+          + shortCircuitCacheStaleThresholdMs\n+          + \", socketCacheCapacity \u003d \"\n+          + socketCacheCapacity\n+          + \", socketCacheExpiry \u003d \"\n+          + socketCacheExpiry\n+          + \", shortCircuitLocalReads \u003d \"\n+          + shortCircuitLocalReads\n+          + \", useLegacyBlockReaderLocal \u003d \"\n+          + useLegacyBlockReaderLocal\n+          + \", domainSocketDataTraffic \u003d \"\n+          + domainSocketDataTraffic\n+          + \", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \"\n+          + shortCircuitSharedMemoryWatcherInterruptCheckMs\n+          + \", keyProviderCacheExpiryMs \u003d \"\n+          + keyProviderCacheExpiryMs;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String confAsString() {\n\n      return \"shortCircuitStreamsCacheSize \u003d \"\n          + shortCircuitStreamsCacheSize\n          + \", shortCircuitStreamsCacheExpiryMs \u003d \"\n          + shortCircuitStreamsCacheExpiryMs\n          + \", shortCircuitMmapCacheSize \u003d \"\n          + shortCircuitMmapCacheSize\n          + \", shortCircuitMmapCacheExpiryMs \u003d \"\n          + shortCircuitMmapCacheExpiryMs\n          + \", shortCircuitMmapCacheRetryTimeout \u003d \"\n          + shortCircuitMmapCacheRetryTimeout\n          + \", shortCircuitCacheStaleThresholdMs \u003d \"\n          + shortCircuitCacheStaleThresholdMs\n          + \", socketCacheCapacity \u003d \"\n          + socketCacheCapacity\n          + \", socketCacheExpiry \u003d \"\n          + socketCacheExpiry\n          + \", shortCircuitLocalReads \u003d \"\n          + shortCircuitLocalReads\n          + \", useLegacyBlockReaderLocal \u003d \"\n          + useLegacyBlockReaderLocal\n          + \", domainSocketDataTraffic \u003d \"\n          + domainSocketDataTraffic\n          + \", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \"\n          + shortCircuitSharedMemoryWatcherInterruptCheckMs\n          + \", keyProviderCacheExpiryMs \u003d \"\n          + keyProviderCacheExpiryMs;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
      "extendedDetails": {}
    },
    "3aac4758b007a56e3d66998d457b2156effca528": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8803. Move DfsClientConf to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "19/08/15 11:28 AM",
      "commitName": "3aac4758b007a56e3d66998d457b2156effca528",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "19/08/15 10:36 AM",
      "commitNameOld": "f61120d964a609ae5eabeb5c4d6c9afe0a15cad8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public String confAsString() {\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n        append(shortCircuitStreamsCacheSize).\n        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n        append(shortCircuitStreamsCacheExpiryMs).\n        append(\", shortCircuitMmapCacheSize \u003d \").\n        append(shortCircuitMmapCacheSize).\n        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n        append(shortCircuitMmapCacheExpiryMs).\n        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n        append(shortCircuitMmapCacheRetryTimeout).\n        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n        append(shortCircuitCacheStaleThresholdMs).\n        append(\", socketCacheCapacity \u003d \").\n        append(socketCacheCapacity).\n        append(\", socketCacheExpiry \u003d \").\n        append(socketCacheExpiry).\n        append(\", shortCircuitLocalReads \u003d \").\n        append(shortCircuitLocalReads).\n        append(\", useLegacyBlockReaderLocal \u003d \").\n        append(useLegacyBlockReaderLocal).\n        append(\", domainSocketDataTraffic \u003d \").\n        append(domainSocketDataTraffic).\n        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n        append(\", keyProviderCacheExpiryMs \u003d \").\n        append(keyProviderCacheExpiryMs);\n\n      return builder.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java"
      }
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
          "commitDate": "10/04/15 2:48 PM",
          "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "10/04/15 11:40 AM",
          "commitNameOld": "7660da95cb67cbfe034aa8fa2a5bf0f8c9fdf41a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public static String confAsString(Conf conf) {\n-    StringBuilder builder \u003d new StringBuilder();\n-    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n-      append(conf.shortCircuitStreamsCacheSize).\n-      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitStreamsCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheSize \u003d \").\n-      append(conf.shortCircuitMmapCacheSize).\n-      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitMmapCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n-      append(conf.shortCircuitMmapCacheRetryTimeout).\n-      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n-      append(conf.shortCircuitCacheStaleThresholdMs).\n-      append(\", socketCacheCapacity \u003d \").\n-      append(conf.socketCacheCapacity).\n-      append(\", socketCacheExpiry \u003d \").\n-      append(conf.socketCacheExpiry).\n-      append(\", shortCircuitLocalReads \u003d \").\n-      append(conf.shortCircuitLocalReads).\n-      append(\", useLegacyBlockReaderLocal \u003d \").\n-      append(conf.useLegacyBlockReaderLocal).\n-      append(\", domainSocketDataTraffic \u003d \").\n-      append(conf.domainSocketDataTraffic).\n-      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n-      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs).\n-      append(\", keyProviderCacheExpiryMs \u003d \").\n-      append(conf.keyProviderCacheExpiryMs);\n+    public String confAsString() {\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n+        append(shortCircuitStreamsCacheSize).\n+        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n+        append(shortCircuitStreamsCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheSize \u003d \").\n+        append(shortCircuitMmapCacheSize).\n+        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n+        append(shortCircuitMmapCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n+        append(shortCircuitMmapCacheRetryTimeout).\n+        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n+        append(shortCircuitCacheStaleThresholdMs).\n+        append(\", socketCacheCapacity \u003d \").\n+        append(socketCacheCapacity).\n+        append(\", socketCacheExpiry \u003d \").\n+        append(socketCacheExpiry).\n+        append(\", shortCircuitLocalReads \u003d \").\n+        append(shortCircuitLocalReads).\n+        append(\", useLegacyBlockReaderLocal \u003d \").\n+        append(useLegacyBlockReaderLocal).\n+        append(\", domainSocketDataTraffic \u003d \").\n+        append(domainSocketDataTraffic).\n+        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n+        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n+        append(\", keyProviderCacheExpiryMs \u003d \").\n+        append(keyProviderCacheExpiryMs);\n \n-    return builder.toString();\n-  }\n\\ No newline at end of file\n+      return builder.toString();\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public String confAsString() {\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n        append(shortCircuitStreamsCacheSize).\n        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n        append(shortCircuitStreamsCacheExpiryMs).\n        append(\", shortCircuitMmapCacheSize \u003d \").\n        append(shortCircuitMmapCacheSize).\n        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n        append(shortCircuitMmapCacheExpiryMs).\n        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n        append(shortCircuitMmapCacheRetryTimeout).\n        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n        append(shortCircuitCacheStaleThresholdMs).\n        append(\", socketCacheCapacity \u003d \").\n        append(socketCacheCapacity).\n        append(\", socketCacheExpiry \u003d \").\n        append(socketCacheExpiry).\n        append(\", shortCircuitLocalReads \u003d \").\n        append(shortCircuitLocalReads).\n        append(\", useLegacyBlockReaderLocal \u003d \").\n        append(useLegacyBlockReaderLocal).\n        append(\", domainSocketDataTraffic \u003d \").\n        append(domainSocketDataTraffic).\n        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n        append(\", keyProviderCacheExpiryMs \u003d \").\n        append(keyProviderCacheExpiryMs);\n\n      return builder.toString();\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
            "oldMethodName": "confAsString",
            "newMethodName": "confAsString"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
          "commitDate": "10/04/15 2:48 PM",
          "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "10/04/15 11:40 AM",
          "commitNameOld": "7660da95cb67cbfe034aa8fa2a5bf0f8c9fdf41a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public static String confAsString(Conf conf) {\n-    StringBuilder builder \u003d new StringBuilder();\n-    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n-      append(conf.shortCircuitStreamsCacheSize).\n-      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitStreamsCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheSize \u003d \").\n-      append(conf.shortCircuitMmapCacheSize).\n-      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitMmapCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n-      append(conf.shortCircuitMmapCacheRetryTimeout).\n-      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n-      append(conf.shortCircuitCacheStaleThresholdMs).\n-      append(\", socketCacheCapacity \u003d \").\n-      append(conf.socketCacheCapacity).\n-      append(\", socketCacheExpiry \u003d \").\n-      append(conf.socketCacheExpiry).\n-      append(\", shortCircuitLocalReads \u003d \").\n-      append(conf.shortCircuitLocalReads).\n-      append(\", useLegacyBlockReaderLocal \u003d \").\n-      append(conf.useLegacyBlockReaderLocal).\n-      append(\", domainSocketDataTraffic \u003d \").\n-      append(conf.domainSocketDataTraffic).\n-      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n-      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs).\n-      append(\", keyProviderCacheExpiryMs \u003d \").\n-      append(conf.keyProviderCacheExpiryMs);\n+    public String confAsString() {\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n+        append(shortCircuitStreamsCacheSize).\n+        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n+        append(shortCircuitStreamsCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheSize \u003d \").\n+        append(shortCircuitMmapCacheSize).\n+        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n+        append(shortCircuitMmapCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n+        append(shortCircuitMmapCacheRetryTimeout).\n+        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n+        append(shortCircuitCacheStaleThresholdMs).\n+        append(\", socketCacheCapacity \u003d \").\n+        append(socketCacheCapacity).\n+        append(\", socketCacheExpiry \u003d \").\n+        append(socketCacheExpiry).\n+        append(\", shortCircuitLocalReads \u003d \").\n+        append(shortCircuitLocalReads).\n+        append(\", useLegacyBlockReaderLocal \u003d \").\n+        append(useLegacyBlockReaderLocal).\n+        append(\", domainSocketDataTraffic \u003d \").\n+        append(domainSocketDataTraffic).\n+        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n+        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n+        append(\", keyProviderCacheExpiryMs \u003d \").\n+        append(keyProviderCacheExpiryMs);\n \n-    return builder.toString();\n-  }\n\\ No newline at end of file\n+      return builder.toString();\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public String confAsString() {\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n        append(shortCircuitStreamsCacheSize).\n        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n        append(shortCircuitStreamsCacheExpiryMs).\n        append(\", shortCircuitMmapCacheSize \u003d \").\n        append(shortCircuitMmapCacheSize).\n        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n        append(shortCircuitMmapCacheExpiryMs).\n        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n        append(shortCircuitMmapCacheRetryTimeout).\n        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n        append(shortCircuitCacheStaleThresholdMs).\n        append(\", socketCacheCapacity \u003d \").\n        append(socketCacheCapacity).\n        append(\", socketCacheExpiry \u003d \").\n        append(socketCacheExpiry).\n        append(\", shortCircuitLocalReads \u003d \").\n        append(shortCircuitLocalReads).\n        append(\", useLegacyBlockReaderLocal \u003d \").\n        append(useLegacyBlockReaderLocal).\n        append(\", domainSocketDataTraffic \u003d \").\n        append(domainSocketDataTraffic).\n        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n        append(\", keyProviderCacheExpiryMs \u003d \").\n        append(keyProviderCacheExpiryMs);\n\n      return builder.toString();\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
          "commitDate": "10/04/15 2:48 PM",
          "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "10/04/15 11:40 AM",
          "commitNameOld": "7660da95cb67cbfe034aa8fa2a5bf0f8c9fdf41a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public static String confAsString(Conf conf) {\n-    StringBuilder builder \u003d new StringBuilder();\n-    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n-      append(conf.shortCircuitStreamsCacheSize).\n-      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitStreamsCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheSize \u003d \").\n-      append(conf.shortCircuitMmapCacheSize).\n-      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitMmapCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n-      append(conf.shortCircuitMmapCacheRetryTimeout).\n-      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n-      append(conf.shortCircuitCacheStaleThresholdMs).\n-      append(\", socketCacheCapacity \u003d \").\n-      append(conf.socketCacheCapacity).\n-      append(\", socketCacheExpiry \u003d \").\n-      append(conf.socketCacheExpiry).\n-      append(\", shortCircuitLocalReads \u003d \").\n-      append(conf.shortCircuitLocalReads).\n-      append(\", useLegacyBlockReaderLocal \u003d \").\n-      append(conf.useLegacyBlockReaderLocal).\n-      append(\", domainSocketDataTraffic \u003d \").\n-      append(conf.domainSocketDataTraffic).\n-      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n-      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs).\n-      append(\", keyProviderCacheExpiryMs \u003d \").\n-      append(conf.keyProviderCacheExpiryMs);\n+    public String confAsString() {\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n+        append(shortCircuitStreamsCacheSize).\n+        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n+        append(shortCircuitStreamsCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheSize \u003d \").\n+        append(shortCircuitMmapCacheSize).\n+        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n+        append(shortCircuitMmapCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n+        append(shortCircuitMmapCacheRetryTimeout).\n+        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n+        append(shortCircuitCacheStaleThresholdMs).\n+        append(\", socketCacheCapacity \u003d \").\n+        append(socketCacheCapacity).\n+        append(\", socketCacheExpiry \u003d \").\n+        append(socketCacheExpiry).\n+        append(\", shortCircuitLocalReads \u003d \").\n+        append(shortCircuitLocalReads).\n+        append(\", useLegacyBlockReaderLocal \u003d \").\n+        append(useLegacyBlockReaderLocal).\n+        append(\", domainSocketDataTraffic \u003d \").\n+        append(domainSocketDataTraffic).\n+        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n+        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n+        append(\", keyProviderCacheExpiryMs \u003d \").\n+        append(keyProviderCacheExpiryMs);\n \n-    return builder.toString();\n-  }\n\\ No newline at end of file\n+      return builder.toString();\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public String confAsString() {\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n        append(shortCircuitStreamsCacheSize).\n        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n        append(shortCircuitStreamsCacheExpiryMs).\n        append(\", shortCircuitMmapCacheSize \u003d \").\n        append(shortCircuitMmapCacheSize).\n        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n        append(shortCircuitMmapCacheExpiryMs).\n        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n        append(shortCircuitMmapCacheRetryTimeout).\n        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n        append(shortCircuitCacheStaleThresholdMs).\n        append(\", socketCacheCapacity \u003d \").\n        append(socketCacheCapacity).\n        append(\", socketCacheExpiry \u003d \").\n        append(socketCacheExpiry).\n        append(\", shortCircuitLocalReads \u003d \").\n        append(shortCircuitLocalReads).\n        append(\", useLegacyBlockReaderLocal \u003d \").\n        append(useLegacyBlockReaderLocal).\n        append(\", domainSocketDataTraffic \u003d \").\n        append(domainSocketDataTraffic).\n        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n        append(\", keyProviderCacheExpiryMs \u003d \").\n        append(keyProviderCacheExpiryMs);\n\n      return builder.toString();\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
          "commitDate": "10/04/15 2:48 PM",
          "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "10/04/15 11:40 AM",
          "commitNameOld": "7660da95cb67cbfe034aa8fa2a5bf0f8c9fdf41a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public static String confAsString(Conf conf) {\n-    StringBuilder builder \u003d new StringBuilder();\n-    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n-      append(conf.shortCircuitStreamsCacheSize).\n-      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitStreamsCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheSize \u003d \").\n-      append(conf.shortCircuitMmapCacheSize).\n-      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n-      append(conf.shortCircuitMmapCacheExpiryMs).\n-      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n-      append(conf.shortCircuitMmapCacheRetryTimeout).\n-      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n-      append(conf.shortCircuitCacheStaleThresholdMs).\n-      append(\", socketCacheCapacity \u003d \").\n-      append(conf.socketCacheCapacity).\n-      append(\", socketCacheExpiry \u003d \").\n-      append(conf.socketCacheExpiry).\n-      append(\", shortCircuitLocalReads \u003d \").\n-      append(conf.shortCircuitLocalReads).\n-      append(\", useLegacyBlockReaderLocal \u003d \").\n-      append(conf.useLegacyBlockReaderLocal).\n-      append(\", domainSocketDataTraffic \u003d \").\n-      append(conf.domainSocketDataTraffic).\n-      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n-      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs).\n-      append(\", keyProviderCacheExpiryMs \u003d \").\n-      append(conf.keyProviderCacheExpiryMs);\n+    public String confAsString() {\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n+        append(shortCircuitStreamsCacheSize).\n+        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n+        append(shortCircuitStreamsCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheSize \u003d \").\n+        append(shortCircuitMmapCacheSize).\n+        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n+        append(shortCircuitMmapCacheExpiryMs).\n+        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n+        append(shortCircuitMmapCacheRetryTimeout).\n+        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n+        append(shortCircuitCacheStaleThresholdMs).\n+        append(\", socketCacheCapacity \u003d \").\n+        append(socketCacheCapacity).\n+        append(\", socketCacheExpiry \u003d \").\n+        append(socketCacheExpiry).\n+        append(\", shortCircuitLocalReads \u003d \").\n+        append(shortCircuitLocalReads).\n+        append(\", useLegacyBlockReaderLocal \u003d \").\n+        append(useLegacyBlockReaderLocal).\n+        append(\", domainSocketDataTraffic \u003d \").\n+        append(domainSocketDataTraffic).\n+        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n+        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n+        append(\", keyProviderCacheExpiryMs \u003d \").\n+        append(keyProviderCacheExpiryMs);\n \n-    return builder.toString();\n-  }\n\\ No newline at end of file\n+      return builder.toString();\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public String confAsString() {\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n        append(shortCircuitStreamsCacheSize).\n        append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n        append(shortCircuitStreamsCacheExpiryMs).\n        append(\", shortCircuitMmapCacheSize \u003d \").\n        append(shortCircuitMmapCacheSize).\n        append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n        append(shortCircuitMmapCacheExpiryMs).\n        append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n        append(shortCircuitMmapCacheRetryTimeout).\n        append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n        append(shortCircuitCacheStaleThresholdMs).\n        append(\", socketCacheCapacity \u003d \").\n        append(socketCacheCapacity).\n        append(\", socketCacheExpiry \u003d \").\n        append(socketCacheExpiry).\n        append(\", shortCircuitLocalReads \u003d \").\n        append(shortCircuitLocalReads).\n        append(\", useLegacyBlockReaderLocal \u003d \").\n        append(useLegacyBlockReaderLocal).\n        append(\", domainSocketDataTraffic \u003d \").\n        append(domainSocketDataTraffic).\n        append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n        append(shortCircuitSharedMemoryWatcherInterruptCheckMs).\n        append(\", keyProviderCacheExpiryMs \u003d \").\n        append(keyProviderCacheExpiryMs);\n\n      return builder.toString();\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java",
          "extendedDetails": {
            "oldValue": "[conf-Conf]",
            "newValue": "[]"
          }
        }
      ]
    },
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7718. Store KeyProvider in ClientContext to avoid leaking key provider threads when using FileContext (Arun Suresh via Colin P. McCabe)\n",
      "commitDate": "09/02/15 8:23 PM",
      "commitName": "02340a24f211212b91dc7380c1e5b54ddb5e82eb",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "01/11/14 11:22 AM",
      "commitNameOld": "36ccf097a95eae0761de7b657752e4808a86c094",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 100.42,
      "commitsBetweenForRepo": 711,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public static String confAsString(Conf conf) {\n     StringBuilder builder \u003d new StringBuilder();\n     builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n       append(conf.shortCircuitStreamsCacheSize).\n       append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n       append(conf.shortCircuitStreamsCacheExpiryMs).\n       append(\", shortCircuitMmapCacheSize \u003d \").\n       append(conf.shortCircuitMmapCacheSize).\n       append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n       append(conf.shortCircuitMmapCacheExpiryMs).\n       append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n       append(conf.shortCircuitMmapCacheRetryTimeout).\n       append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n       append(conf.shortCircuitCacheStaleThresholdMs).\n       append(\", socketCacheCapacity \u003d \").\n       append(conf.socketCacheCapacity).\n       append(\", socketCacheExpiry \u003d \").\n       append(conf.socketCacheExpiry).\n       append(\", shortCircuitLocalReads \u003d \").\n       append(conf.shortCircuitLocalReads).\n       append(\", useLegacyBlockReaderLocal \u003d \").\n       append(conf.useLegacyBlockReaderLocal).\n       append(\", domainSocketDataTraffic \u003d \").\n       append(conf.domainSocketDataTraffic).\n       append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n-      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs);\n+      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs).\n+      append(\", keyProviderCacheExpiryMs \u003d \").\n+      append(conf.keyProviderCacheExpiryMs);\n \n     return builder.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String confAsString(Conf conf) {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n      append(conf.shortCircuitStreamsCacheSize).\n      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n      append(conf.shortCircuitStreamsCacheExpiryMs).\n      append(\", shortCircuitMmapCacheSize \u003d \").\n      append(conf.shortCircuitMmapCacheSize).\n      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n      append(conf.shortCircuitMmapCacheExpiryMs).\n      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n      append(conf.shortCircuitMmapCacheRetryTimeout).\n      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n      append(conf.shortCircuitCacheStaleThresholdMs).\n      append(\", socketCacheCapacity \u003d \").\n      append(conf.socketCacheCapacity).\n      append(\", socketCacheExpiry \u003d \").\n      append(conf.socketCacheExpiry).\n      append(\", shortCircuitLocalReads \u003d \").\n      append(conf.shortCircuitLocalReads).\n      append(\", useLegacyBlockReaderLocal \u003d \").\n      append(conf.useLegacyBlockReaderLocal).\n      append(\", domainSocketDataTraffic \u003d \").\n      append(conf.domainSocketDataTraffic).\n      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs).\n      append(\", keyProviderCacheExpiryMs \u003d \").\n      append(conf.keyProviderCacheExpiryMs);\n\n    return builder.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
      "extendedDetails": {}
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 11:08 AM",
      "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 18.37,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public static String confAsString(Conf conf) {\n     StringBuilder builder \u003d new StringBuilder();\n     builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n       append(conf.shortCircuitStreamsCacheSize).\n       append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n       append(conf.shortCircuitStreamsCacheExpiryMs).\n       append(\", shortCircuitMmapCacheSize \u003d \").\n       append(conf.shortCircuitMmapCacheSize).\n       append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n       append(conf.shortCircuitMmapCacheExpiryMs).\n       append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n       append(conf.shortCircuitMmapCacheRetryTimeout).\n       append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n       append(conf.shortCircuitCacheStaleThresholdMs).\n       append(\", socketCacheCapacity \u003d \").\n       append(conf.socketCacheCapacity).\n       append(\", socketCacheExpiry \u003d \").\n       append(conf.socketCacheExpiry).\n       append(\", shortCircuitLocalReads \u003d \").\n       append(conf.shortCircuitLocalReads).\n       append(\", useLegacyBlockReaderLocal \u003d \").\n       append(conf.useLegacyBlockReaderLocal).\n       append(\", domainSocketDataTraffic \u003d \").\n-      append(conf.domainSocketDataTraffic);\n+      append(conf.domainSocketDataTraffic).\n+      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n+      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs);\n \n     return builder.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String confAsString(Conf conf) {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n      append(conf.shortCircuitStreamsCacheSize).\n      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n      append(conf.shortCircuitStreamsCacheExpiryMs).\n      append(\", shortCircuitMmapCacheSize \u003d \").\n      append(conf.shortCircuitMmapCacheSize).\n      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n      append(conf.shortCircuitMmapCacheExpiryMs).\n      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n      append(conf.shortCircuitMmapCacheRetryTimeout).\n      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n      append(conf.shortCircuitCacheStaleThresholdMs).\n      append(\", socketCacheCapacity \u003d \").\n      append(conf.socketCacheCapacity).\n      append(\", socketCacheExpiry \u003d \").\n      append(conf.socketCacheExpiry).\n      append(\", shortCircuitLocalReads \u003d \").\n      append(conf.shortCircuitLocalReads).\n      append(\", useLegacyBlockReaderLocal \u003d \").\n      append(conf.useLegacyBlockReaderLocal).\n      append(\", domainSocketDataTraffic \u003d \").\n      append(conf.domainSocketDataTraffic).\n      append(\", shortCircuitSharedMemoryWatcherInterruptCheckMs \u003d \").\n      append(conf.shortCircuitSharedMemoryWatcherInterruptCheckMs);\n\n    return builder.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
      "extendedDetails": {}
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,27 @@\n+  public static String confAsString(Conf conf) {\n+    StringBuilder builder \u003d new StringBuilder();\n+    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n+      append(conf.shortCircuitStreamsCacheSize).\n+      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n+      append(conf.shortCircuitStreamsCacheExpiryMs).\n+      append(\", shortCircuitMmapCacheSize \u003d \").\n+      append(conf.shortCircuitMmapCacheSize).\n+      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n+      append(conf.shortCircuitMmapCacheExpiryMs).\n+      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n+      append(conf.shortCircuitMmapCacheRetryTimeout).\n+      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n+      append(conf.shortCircuitCacheStaleThresholdMs).\n+      append(\", socketCacheCapacity \u003d \").\n+      append(conf.socketCacheCapacity).\n+      append(\", socketCacheExpiry \u003d \").\n+      append(conf.socketCacheExpiry).\n+      append(\", shortCircuitLocalReads \u003d \").\n+      append(conf.shortCircuitLocalReads).\n+      append(\", useLegacyBlockReaderLocal \u003d \").\n+      append(conf.useLegacyBlockReaderLocal).\n+      append(\", domainSocketDataTraffic \u003d \").\n+      append(conf.domainSocketDataTraffic);\n+\n+    return builder.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String confAsString(Conf conf) {\n    StringBuilder builder \u003d new StringBuilder();\n    builder.append(\"shortCircuitStreamsCacheSize \u003d \").\n      append(conf.shortCircuitStreamsCacheSize).\n      append(\", shortCircuitStreamsCacheExpiryMs \u003d \").\n      append(conf.shortCircuitStreamsCacheExpiryMs).\n      append(\", shortCircuitMmapCacheSize \u003d \").\n      append(conf.shortCircuitMmapCacheSize).\n      append(\", shortCircuitMmapCacheExpiryMs \u003d \").\n      append(conf.shortCircuitMmapCacheExpiryMs).\n      append(\", shortCircuitMmapCacheRetryTimeout \u003d \").\n      append(conf.shortCircuitMmapCacheRetryTimeout).\n      append(\", shortCircuitCacheStaleThresholdMs \u003d \").\n      append(conf.shortCircuitCacheStaleThresholdMs).\n      append(\", socketCacheCapacity \u003d \").\n      append(conf.socketCacheCapacity).\n      append(\", socketCacheExpiry \u003d \").\n      append(conf.socketCacheExpiry).\n      append(\", shortCircuitLocalReads \u003d \").\n      append(conf.shortCircuitLocalReads).\n      append(\", useLegacyBlockReaderLocal \u003d \").\n      append(conf.useLegacyBlockReaderLocal).\n      append(\", domainSocketDataTraffic \u003d \").\n      append(conf.domainSocketDataTraffic);\n\n    return builder.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ClientContext.java"
    }
  }
}