{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "getStartTimeLong",
  "functionId": "getStartTimeLong___entityId-String__entityType-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 1233,
  "functionEndLine": 1254,
  "numCommitsSeen": 12,
  "timeTaken": 979,
  "changeHistory": [
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,22 @@\n+  private Long getStartTimeLong(String entityId, String entityType)\n+      throws IOException {\n+    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n+    // start time is not provided, so try to look it up\n+    if (startTimeReadCache.containsKey(entity)) {\n+      // found the start time in the cache\n+      return startTimeReadCache.get(entity);\n+    } else {\n+      // try to look up the start time in the db\n+      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+      byte[] v \u003d starttimedb.get(b);\n+      if (v \u003d\u003d null) {\n+        // did not find the start time in the db\n+        return null;\n+      } else {\n+        // found the start time in the db\n+        Long l \u003d readReverseOrderedLong(v, 0);\n+        startTimeReadCache.put(entity, l);\n+        return l;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Long getStartTimeLong(String entityId, String entityType)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    // start time is not provided, so try to look it up\n    if (startTimeReadCache.containsKey(entity)) {\n      // found the start time in the cache\n      return startTimeReadCache.get(entity);\n    } else {\n      // try to look up the start time in the db\n      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n      byte[] v \u003d starttimedb.get(b);\n      if (v \u003d\u003d null) {\n        // did not find the start time in the db\n        return null;\n      } else {\n        // found the start time in the db\n        Long l \u003d readReverseOrderedLong(v, 0);\n        startTimeReadCache.put(entity, l);\n        return l;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}