{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "failApplicationAttempt",
  "functionId": "failApplicationAttempt___request-FailApplicationAttemptRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 718,
  "functionEndLine": 755,
  "numCommitsSeen": 128,
  "timeTaken": 3259,
  "changeHistory": [
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "a0bca2b5ad2344fda5411d910a3730c85f12a0df"
  ],
  "changeHistoryShort": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "a0bca2b5ad2344fda5411d910a3730c85f12a0df": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,38 @@\n   public FailApplicationAttemptResponse failApplicationAttempt(\n       FailApplicationAttemptRequest request) throws YarnException {\n \n     ApplicationAttemptId attemptId \u003d request.getApplicationAttemptId();\n     ApplicationId applicationId \u003d attemptId.getApplicationId();\n \n-    UserGroupInformation callerUGI;\n-    try {\n-      callerUGI \u003d UserGroupInformation.getCurrentUser();\n-    } catch (IOException ie) {\n-      LOG.info(\"Error getting UGI \", ie);\n-      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.FAIL_ATTEMPT_REQUEST,\n-          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n-          applicationId, attemptId);\n-      throw RPCUtil.getRemoteException(ie);\n-    }\n-\n-    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n-    if (application \u003d\u003d null) {\n-      RMAuditLogger.logFailure(callerUGI.getUserName(),\n-          AuditConstants.FAIL_ATTEMPT_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n-          \"Trying to fail an attempt of an absent application\", applicationId,\n-          attemptId);\n-      throw new ApplicationNotFoundException(\"Trying to fail an attempt \"\n-          + attemptId + \" of an absent application \" + applicationId);\n-    }\n+    UserGroupInformation callerUGI \u003d getCallerUgi(applicationId,\n+        AuditConstants.FAIL_ATTEMPT_REQUEST);\n+    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n+        AuditConstants.FAIL_ATTEMPT_REQUEST, ApplicationAccessType.MODIFY_APP,\n+        true);\n \n     RMAppAttempt appAttempt \u003d application.getAppAttempts().get(attemptId);\n     if (appAttempt \u003d\u003d null) {\n       throw new ApplicationAttemptNotFoundException(\n           \"ApplicationAttempt with id \u0027\" + attemptId + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n \n-    if (!checkAccess(callerUGI, application.getUser(),\n-        ApplicationAccessType.MODIFY_APP, application)) {\n-      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n-          AuditConstants.FAIL_ATTEMPT_REQUEST,\n-          \"User doesn\u0027t have permissions to \"\n-              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n-          AuditConstants.UNAUTHORIZED_USER, applicationId);\n-      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n-          + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n-    }\n-\n     FailApplicationAttemptResponse response \u003d\n         recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);\n \n-    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n-      if (COMPLETED_APP_STATES.contains(application.getState())) {\n-        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n-            AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n-            applicationId);\n-        return response;\n-      }\n+    if (application.isAppInCompletedStates()) {\n+      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+          AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n+          applicationId);\n+      return response;\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(attemptId, RMAppAttemptEventType.FAIL,\n         \"Attempt failed by user.\"));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\", applicationId,\n         attemptId);\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FailApplicationAttemptResponse failApplicationAttempt(\n      FailApplicationAttemptRequest request) throws YarnException {\n\n    ApplicationAttemptId attemptId \u003d request.getApplicationAttemptId();\n    ApplicationId applicationId \u003d attemptId.getApplicationId();\n\n    UserGroupInformation callerUGI \u003d getCallerUgi(applicationId,\n        AuditConstants.FAIL_ATTEMPT_REQUEST);\n    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n        AuditConstants.FAIL_ATTEMPT_REQUEST, ApplicationAccessType.MODIFY_APP,\n        true);\n\n    RMAppAttempt appAttempt \u003d application.getAppAttempts().get(attemptId);\n    if (appAttempt \u003d\u003d null) {\n      throw new ApplicationAttemptNotFoundException(\n          \"ApplicationAttempt with id \u0027\" + attemptId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    FailApplicationAttemptResponse response \u003d\n        recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);\n\n    if (application.isAppInCompletedStates()) {\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n          applicationId);\n      return response;\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(attemptId, RMAppAttemptEventType.FAIL,\n        \"Attempt failed by user.\"));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\", applicationId,\n        attemptId);\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/10/15 7:17 AM",
      "commitNameOld": "a0bca2b5ad2344fda5411d910a3730c85f12a0df",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.41,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,67 @@\n   public FailApplicationAttemptResponse failApplicationAttempt(\n       FailApplicationAttemptRequest request) throws YarnException {\n \n     ApplicationAttemptId attemptId \u003d request.getApplicationAttemptId();\n     ApplicationId applicationId \u003d attemptId.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.FAIL_ATTEMPT_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId, attemptId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.FAIL_ATTEMPT_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to fail an attempt of an absent application\", applicationId,\n           attemptId);\n       throw new ApplicationNotFoundException(\"Trying to fail an attempt \"\n           + attemptId + \" of an absent application \" + applicationId);\n     }\n \n     RMAppAttempt appAttempt \u003d application.getAppAttempts().get(attemptId);\n     if (appAttempt \u003d\u003d null) {\n       throw new ApplicationAttemptNotFoundException(\n           \"ApplicationAttempt with id \u0027\" + attemptId + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.FAIL_ATTEMPT_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     FailApplicationAttemptResponse response \u003d\n         recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);\n \n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n       if (COMPLETED_APP_STATES.contains(application.getState())) {\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n             applicationId);\n         return response;\n       }\n     }\n \n-    this.rmContext\n-        .getDispatcher()\n-        .getEventHandler()\n-        .handle(\n-            new RMAppAttemptFailedEvent(attemptId,\n+    this.rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppAttemptEvent(attemptId, RMAppAttemptEventType.FAIL,\n         \"Attempt failed by user.\"));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\", applicationId,\n         attemptId);\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FailApplicationAttemptResponse failApplicationAttempt(\n      FailApplicationAttemptRequest request) throws YarnException {\n\n    ApplicationAttemptId attemptId \u003d request.getApplicationAttemptId();\n    ApplicationId applicationId \u003d attemptId.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.FAIL_ATTEMPT_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId, attemptId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.FAIL_ATTEMPT_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to fail an attempt of an absent application\", applicationId,\n          attemptId);\n      throw new ApplicationNotFoundException(\"Trying to fail an attempt \"\n          + attemptId + \" of an absent application \" + applicationId);\n    }\n\n    RMAppAttempt appAttempt \u003d application.getAppAttempts().get(attemptId);\n    if (appAttempt \u003d\u003d null) {\n      throw new ApplicationAttemptNotFoundException(\n          \"ApplicationAttempt with id \u0027\" + attemptId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.FAIL_ATTEMPT_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    FailApplicationAttemptResponse response \u003d\n        recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);\n\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (COMPLETED_APP_STATES.contains(application.getState())) {\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n            applicationId);\n        return response;\n      }\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(attemptId, RMAppAttemptEventType.FAIL,\n        \"Attempt failed by user.\"));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\", applicationId,\n        attemptId);\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a0bca2b5ad2344fda5411d910a3730c85f12a0df": {
      "type": "Yintroduced",
      "commitMessage": "YARN-261. Ability to fail AM attempts. Contributed by Andrey Klochkov and Rohith Sharma K S\n",
      "commitDate": "09/10/15 7:17 AM",
      "commitName": "a0bca2b5ad2344fda5411d910a3730c85f12a0df",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,70 @@\n+  public FailApplicationAttemptResponse failApplicationAttempt(\n+      FailApplicationAttemptRequest request) throws YarnException {\n+\n+    ApplicationAttemptId attemptId \u003d request.getApplicationAttemptId();\n+    ApplicationId applicationId \u003d attemptId.getApplicationId();\n+\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.FAIL_ATTEMPT_REQUEST,\n+          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n+          applicationId, attemptId);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n+    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n+    if (application \u003d\u003d null) {\n+      RMAuditLogger.logFailure(callerUGI.getUserName(),\n+          AuditConstants.FAIL_ATTEMPT_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n+          \"Trying to fail an attempt of an absent application\", applicationId,\n+          attemptId);\n+      throw new ApplicationNotFoundException(\"Trying to fail an attempt \"\n+          + attemptId + \" of an absent application \" + applicationId);\n+    }\n+\n+    RMAppAttempt appAttempt \u003d application.getAppAttempts().get(attemptId);\n+    if (appAttempt \u003d\u003d null) {\n+      throw new ApplicationAttemptNotFoundException(\n+          \"ApplicationAttempt with id \u0027\" + attemptId + \"\u0027 doesn\u0027t exist in RM.\");\n+    }\n+\n+    if (!checkAccess(callerUGI, application.getUser(),\n+        ApplicationAccessType.MODIFY_APP, application)) {\n+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n+          AuditConstants.FAIL_ATTEMPT_REQUEST,\n+          \"User doesn\u0027t have permissions to \"\n+              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n+          AuditConstants.UNAUTHORIZED_USER, applicationId);\n+      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n+          + callerUGI.getShortUserName() + \" cannot perform operation \"\n+          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n+    }\n+\n+    FailApplicationAttemptResponse response \u003d\n+        recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);\n+\n+    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n+      if (COMPLETED_APP_STATES.contains(application.getState())) {\n+        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+            AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n+            applicationId);\n+        return response;\n+      }\n+    }\n+\n+    this.rmContext\n+        .getDispatcher()\n+        .getEventHandler()\n+        .handle(\n+            new RMAppAttemptFailedEvent(attemptId,\n+        \"Attempt failed by user.\"));\n+\n+    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+        AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\", applicationId,\n+        attemptId);\n+\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FailApplicationAttemptResponse failApplicationAttempt(\n      FailApplicationAttemptRequest request) throws YarnException {\n\n    ApplicationAttemptId attemptId \u003d request.getApplicationAttemptId();\n    ApplicationId applicationId \u003d attemptId.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.FAIL_ATTEMPT_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId, attemptId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.FAIL_ATTEMPT_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to fail an attempt of an absent application\", applicationId,\n          attemptId);\n      throw new ApplicationNotFoundException(\"Trying to fail an attempt \"\n          + attemptId + \" of an absent application \" + applicationId);\n    }\n\n    RMAppAttempt appAttempt \u003d application.getAppAttempts().get(attemptId);\n    if (appAttempt \u003d\u003d null) {\n      throw new ApplicationAttemptNotFoundException(\n          \"ApplicationAttempt with id \u0027\" + attemptId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.FAIL_ATTEMPT_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    FailApplicationAttemptResponse response \u003d\n        recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);\n\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (COMPLETED_APP_STATES.contains(application.getState())) {\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\",\n            applicationId);\n        return response;\n      }\n    }\n\n    this.rmContext\n        .getDispatcher()\n        .getEventHandler()\n        .handle(\n            new RMAppAttemptFailedEvent(attemptId,\n        \"Attempt failed by user.\"));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.FAIL_ATTEMPT_REQUEST, \"ClientRMService\", applicationId,\n        attemptId);\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}