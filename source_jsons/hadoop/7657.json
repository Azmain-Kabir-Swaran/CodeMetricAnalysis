{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionHandler.java",
  "functionName": "processFileInode",
  "functionId": "processFileInode___inode-INode__traverseInfo-TraverseInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
  "functionStartLine": 641,
  "functionEndLine": 668,
  "numCommitsSeen": 10,
  "timeTaken": 1249,
  "changeHistory": [
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3"
  ],
  "changeHistoryShort": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "10/04/18 11:05 AM",
      "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,28 @@\n+    public boolean processFileInode(INode inode, TraverseInfo traverseInfo)\n+        throws IOException, InterruptedException {\n+      assert dir.hasReadLock();\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Processing {} for re-encryption\", inode.getFullPathName());\n+      }\n+      if (!inode.isFile()) {\n+        return false;\n+      }\n+      FileEncryptionInfo feInfo \u003d FSDirEncryptionZoneOp.getFileEncryptionInfo(\n+          dir, INodesInPath.fromINode(inode));\n+      if (feInfo \u003d\u003d null) {\n+        LOG.warn(\"File {} skipped re-encryption because it is not encrypted! \"\n+            + \"This is very likely a bug.\", inode.getId());\n+        return false;\n+      }\n+      if (traverseInfo instanceof ZoneTraverseInfo\n+          \u0026\u0026 ((ZoneTraverseInfo) traverseInfo).getEzKeyVerName().equals(\n+              feInfo.getEzKeyVersionName())) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"File {} skipped re-encryption because edek\u0027s key version\"\n+              + \" name is not changed.\", inode.getFullPathName());\n+        }\n+        return false;\n+      }\n+      currentBatch.add(inode.asFile());\n+      return true;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean processFileInode(INode inode, TraverseInfo traverseInfo)\n        throws IOException, InterruptedException {\n      assert dir.hasReadLock();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Processing {} for re-encryption\", inode.getFullPathName());\n      }\n      if (!inode.isFile()) {\n        return false;\n      }\n      FileEncryptionInfo feInfo \u003d FSDirEncryptionZoneOp.getFileEncryptionInfo(\n          dir, INodesInPath.fromINode(inode));\n      if (feInfo \u003d\u003d null) {\n        LOG.warn(\"File {} skipped re-encryption because it is not encrypted! \"\n            + \"This is very likely a bug.\", inode.getId());\n        return false;\n      }\n      if (traverseInfo instanceof ZoneTraverseInfo\n          \u0026\u0026 ((ZoneTraverseInfo) traverseInfo).getEzKeyVerName().equals(\n              feInfo.getEzKeyVersionName())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"File {} skipped re-encryption because edek\u0027s key version\"\n              + \" name is not changed.\", inode.getFullPathName());\n        }\n        return false;\n      }\n      currentBatch.add(inode.asFile());\n      return true;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java"
    }
  }
}