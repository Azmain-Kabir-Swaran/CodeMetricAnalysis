{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TopCLI.java",
  "functionName": "getPrintableAppInformation",
  "functionId": "getPrintableAppInformation___appsInfo-List__ApplicationInformation__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
  "functionStartLine": 920,
  "functionEndLine": 948,
  "numCommitsSeen": 12,
  "timeTaken": 1323,
  "changeHistory": [
    "154c9d2e421390c808dea3b2826cdaae492ea337",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0"
  ],
  "changeHistoryShort": {
    "154c9d2e421390c808dea3b2826cdaae492ea337": "Ybodychange",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "154c9d2e421390c808dea3b2826cdaae492ea337": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3961. Expose pending, running and reserved containers of a queue in REST api and yarn top (adhoot via asuresh)\n",
      "commitDate": "05/08/15 11:14 PM",
      "commitName": "154c9d2e421390c808dea3b2826cdaae492ea337",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "10/04/15 9:57 AM",
      "commitNameOld": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 117.55,
      "commitsBetweenForRepo": 914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   String getPrintableAppInformation(List\u003cApplicationInformation\u003e appsInfo) {\n     StringBuilder ret \u003d new StringBuilder();\n-    int limit \u003d terminalHeight - 8;\n+    int limit \u003d terminalHeight - 9;\n     List\u003cString\u003e columns \u003d new ArrayList\u003c\u003e();\n     for (int i \u003d 0; i \u003c limit; ++i) {\n       ret.append(CLEAR_LINE);\n       if(i \u003c appsInfo.size()) {\n         ApplicationInformation appInfo \u003d appsInfo.get(i);\n         columns.clear();\n         for (EnumMap.Entry\u003cColumns, ColumnInformation\u003e entry :\n             columnInformationEnumMap.entrySet()) {\n           if (entry.getValue().display) {\n             String value \u003d \"\";\n             if (appInfo.displayStringsMap.containsKey(entry.getKey())) {\n               value \u003d appInfo.displayStringsMap.get(entry.getKey());\n             }\n             columns.add(String.format(entry.getValue().format, value));\n           }\n         }\n         ret.append(limitLineLength(\n             (StringUtils.join(columns.toArray(), \" \") + System.lineSeparator()),\n             terminalWidth, true));\n       }\n       else {\n         ret.append(System.lineSeparator());\n       }\n     }\n     return ret.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getPrintableAppInformation(List\u003cApplicationInformation\u003e appsInfo) {\n    StringBuilder ret \u003d new StringBuilder();\n    int limit \u003d terminalHeight - 9;\n    List\u003cString\u003e columns \u003d new ArrayList\u003c\u003e();\n    for (int i \u003d 0; i \u003c limit; ++i) {\n      ret.append(CLEAR_LINE);\n      if(i \u003c appsInfo.size()) {\n        ApplicationInformation appInfo \u003d appsInfo.get(i);\n        columns.clear();\n        for (EnumMap.Entry\u003cColumns, ColumnInformation\u003e entry :\n            columnInformationEnumMap.entrySet()) {\n          if (entry.getValue().display) {\n            String value \u003d \"\";\n            if (appInfo.displayStringsMap.containsKey(entry.getKey())) {\n              value \u003d appInfo.displayStringsMap.get(entry.getKey());\n            }\n            columns.add(String.format(entry.getValue().format, value));\n          }\n        }\n        ret.append(limitLineLength(\n            (StringUtils.join(columns.toArray(), \" \") + System.lineSeparator()),\n            terminalWidth, true));\n      }\n      else {\n        ret.append(System.lineSeparator());\n      }\n    }\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
      "extendedDetails": {}
    },
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3348. Add a \u0027yarn top\u0027 tool to help understand cluster usage. Contributed by Varun Vasudev\n",
      "commitDate": "10/04/15 9:57 AM",
      "commitName": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,29 @@\n+  String getPrintableAppInformation(List\u003cApplicationInformation\u003e appsInfo) {\n+    StringBuilder ret \u003d new StringBuilder();\n+    int limit \u003d terminalHeight - 8;\n+    List\u003cString\u003e columns \u003d new ArrayList\u003c\u003e();\n+    for (int i \u003d 0; i \u003c limit; ++i) {\n+      ret.append(CLEAR_LINE);\n+      if(i \u003c appsInfo.size()) {\n+        ApplicationInformation appInfo \u003d appsInfo.get(i);\n+        columns.clear();\n+        for (EnumMap.Entry\u003cColumns, ColumnInformation\u003e entry :\n+            columnInformationEnumMap.entrySet()) {\n+          if (entry.getValue().display) {\n+            String value \u003d \"\";\n+            if (appInfo.displayStringsMap.containsKey(entry.getKey())) {\n+              value \u003d appInfo.displayStringsMap.get(entry.getKey());\n+            }\n+            columns.add(String.format(entry.getValue().format, value));\n+          }\n+        }\n+        ret.append(limitLineLength(\n+            (StringUtils.join(columns.toArray(), \" \") + System.lineSeparator()),\n+            terminalWidth, true));\n+      }\n+      else {\n+        ret.append(System.lineSeparator());\n+      }\n+    }\n+    return ret.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  String getPrintableAppInformation(List\u003cApplicationInformation\u003e appsInfo) {\n    StringBuilder ret \u003d new StringBuilder();\n    int limit \u003d terminalHeight - 8;\n    List\u003cString\u003e columns \u003d new ArrayList\u003c\u003e();\n    for (int i \u003d 0; i \u003c limit; ++i) {\n      ret.append(CLEAR_LINE);\n      if(i \u003c appsInfo.size()) {\n        ApplicationInformation appInfo \u003d appsInfo.get(i);\n        columns.clear();\n        for (EnumMap.Entry\u003cColumns, ColumnInformation\u003e entry :\n            columnInformationEnumMap.entrySet()) {\n          if (entry.getValue().display) {\n            String value \u003d \"\";\n            if (appInfo.displayStringsMap.containsKey(entry.getKey())) {\n              value \u003d appInfo.displayStringsMap.get(entry.getKey());\n            }\n            columns.add(String.format(entry.getValue().format, value));\n          }\n        }\n        ret.append(limitLineLength(\n            (StringUtils.join(columns.toArray(), \" \") + System.lineSeparator()),\n            terminalWidth, true));\n      }\n      else {\n        ret.append(System.lineSeparator());\n      }\n    }\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java"
    }
  }
}