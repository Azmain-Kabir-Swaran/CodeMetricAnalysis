{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleBlacklistManager.java",
  "functionName": "getBlacklistUpdates",
  "functionId": "getBlacklistUpdates",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/blacklist/SimpleBlacklistManager.java",
  "functionStartLine": 63,
  "functionEndLine": 84,
  "numCommitsSeen": 6,
  "timeTaken": 2812,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "620325e81696fca140195b74929ed9eda2d5eb16",
    "308d63f382e1992ea2b8ccf3130edaaa751c644d",
    "81df7b586a16f8226c7b01c139c1c70c060399c3"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "620325e81696fca140195b74929ed9eda2d5eb16": "Ymultichange(Yreturntypechange,Ybodychange)",
    "308d63f382e1992ea2b8ccf3130edaaa751c644d": "Ybodychange",
    "81df7b586a16f8226c7b01c139c1c70c060399c3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   public ResourceBlacklistRequest getBlacklistUpdates() {\n     ResourceBlacklistRequest ret;\n     List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n     final int currentBlacklistSize \u003d blacklist.size();\n     final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n         numberOfNodeManagerHosts;\n     if (currentBlacklistSize \u003c failureThreshold) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n-            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n-            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n-      }\n+      LOG.debug(\"blacklist size {} is less than failure threshold ratio {}\"\n+          + \" out of total usable nodes {}\", currentBlacklistSize,\n+          blacklistDisableFailureThreshold, numberOfNodeManagerHosts);\n       ret \u003d ResourceBlacklistRequest.newInstance(blacklist, EMPTY_LIST);\n     } else {\n       LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n           + \" is more than failure threshold ratio \"\n           + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n           + numberOfNodeManagerHosts);\n       // TODO: After the threshold hits, we will keep sending a long list\n       // every time a new AM is to be scheduled.\n       ret \u003d ResourceBlacklistRequest.newInstance(EMPTY_LIST, blacklist);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ResourceBlacklistRequest getBlacklistUpdates() {\n    ResourceBlacklistRequest ret;\n    List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n    final int currentBlacklistSize \u003d blacklist.size();\n    final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n        numberOfNodeManagerHosts;\n    if (currentBlacklistSize \u003c failureThreshold) {\n      LOG.debug(\"blacklist size {} is less than failure threshold ratio {}\"\n          + \" out of total usable nodes {}\", currentBlacklistSize,\n          blacklistDisableFailureThreshold, numberOfNodeManagerHosts);\n      ret \u003d ResourceBlacklistRequest.newInstance(blacklist, EMPTY_LIST);\n    } else {\n      LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n          + \" is more than failure threshold ratio \"\n          + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n          + numberOfNodeManagerHosts);\n      // TODO: After the threshold hits, we will keep sending a long list\n      // every time a new AM is to be scheduled.\n      ret \u003d ResourceBlacklistRequest.newInstance(EMPTY_LIST, blacklist);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/blacklist/SimpleBlacklistManager.java",
      "extendedDetails": {}
    },
    "620325e81696fca140195b74929ed9eda2d5eb16": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
      "commitDate": "07/06/16 3:06 PM",
      "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
          "commitDate": "07/06/16 3:06 PM",
          "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "04/02/16 12:02 AM",
          "commitNameOld": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 124.59,
          "commitsBetweenForRepo": 794,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  public BlacklistUpdates getBlacklistUpdates() {\n-    BlacklistUpdates ret;\n+  public ResourceBlacklistRequest getBlacklistUpdates() {\n+    ResourceBlacklistRequest ret;\n     List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n     final int currentBlacklistSize \u003d blacklist.size();\n     final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n         numberOfNodeManagerHosts;\n     if (currentBlacklistSize \u003c failureThreshold) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n             \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n             \" out of total usable nodes \" + numberOfNodeManagerHosts);\n       }\n-      ret \u003d new BlacklistUpdates(blacklist, EMPTY_LIST);\n+      ret \u003d ResourceBlacklistRequest.newInstance(blacklist, EMPTY_LIST);\n     } else {\n       LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n           + \" is more than failure threshold ratio \"\n           + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n           + numberOfNodeManagerHosts);\n-      ret \u003d new BlacklistUpdates(EMPTY_LIST, blacklist);\n+      // TODO: After the threshold hits, we will keep sending a long list\n+      // every time a new AM is to be scheduled.\n+      ret \u003d ResourceBlacklistRequest.newInstance(EMPTY_LIST, blacklist);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ResourceBlacklistRequest getBlacklistUpdates() {\n    ResourceBlacklistRequest ret;\n    List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n    final int currentBlacklistSize \u003d blacklist.size();\n    final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n        numberOfNodeManagerHosts;\n    if (currentBlacklistSize \u003c failureThreshold) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n      }\n      ret \u003d ResourceBlacklistRequest.newInstance(blacklist, EMPTY_LIST);\n    } else {\n      LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n          + \" is more than failure threshold ratio \"\n          + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n          + numberOfNodeManagerHosts);\n      // TODO: After the threshold hits, we will keep sending a long list\n      // every time a new AM is to be scheduled.\n      ret \u003d ResourceBlacklistRequest.newInstance(EMPTY_LIST, blacklist);\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/blacklist/SimpleBlacklistManager.java",
          "extendedDetails": {
            "oldValue": "BlacklistUpdates",
            "newValue": "ResourceBlacklistRequest"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
          "commitDate": "07/06/16 3:06 PM",
          "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "04/02/16 12:02 AM",
          "commitNameOld": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 124.59,
          "commitsBetweenForRepo": 794,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  public BlacklistUpdates getBlacklistUpdates() {\n-    BlacklistUpdates ret;\n+  public ResourceBlacklistRequest getBlacklistUpdates() {\n+    ResourceBlacklistRequest ret;\n     List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n     final int currentBlacklistSize \u003d blacklist.size();\n     final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n         numberOfNodeManagerHosts;\n     if (currentBlacklistSize \u003c failureThreshold) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n             \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n             \" out of total usable nodes \" + numberOfNodeManagerHosts);\n       }\n-      ret \u003d new BlacklistUpdates(blacklist, EMPTY_LIST);\n+      ret \u003d ResourceBlacklistRequest.newInstance(blacklist, EMPTY_LIST);\n     } else {\n       LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n           + \" is more than failure threshold ratio \"\n           + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n           + numberOfNodeManagerHosts);\n-      ret \u003d new BlacklistUpdates(EMPTY_LIST, blacklist);\n+      // TODO: After the threshold hits, we will keep sending a long list\n+      // every time a new AM is to be scheduled.\n+      ret \u003d ResourceBlacklistRequest.newInstance(EMPTY_LIST, blacklist);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ResourceBlacklistRequest getBlacklistUpdates() {\n    ResourceBlacklistRequest ret;\n    List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n    final int currentBlacklistSize \u003d blacklist.size();\n    final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n        numberOfNodeManagerHosts;\n    if (currentBlacklistSize \u003c failureThreshold) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n      }\n      ret \u003d ResourceBlacklistRequest.newInstance(blacklist, EMPTY_LIST);\n    } else {\n      LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n          + \" is more than failure threshold ratio \"\n          + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n          + numberOfNodeManagerHosts);\n      // TODO: After the threshold hits, we will keep sending a long list\n      // every time a new AM is to be scheduled.\n      ret \u003d ResourceBlacklistRequest.newInstance(EMPTY_LIST, blacklist);\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/blacklist/SimpleBlacklistManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "308d63f382e1992ea2b8ccf3130edaaa751c644d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4307. Display blacklisted nodes for AM container in the RM web UI. Contributed by Naganarasimha G R.\n",
      "commitDate": "04/02/16 12:02 AM",
      "commitName": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 143.33,
      "commitsBetweenForRepo": 1012,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,22 @@\n   public BlacklistUpdates getBlacklistUpdates() {\n     BlacklistUpdates ret;\n     List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n     final int currentBlacklistSize \u003d blacklist.size();\n     final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n         numberOfNodeManagerHosts;\n     if (currentBlacklistSize \u003c failureThreshold) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n             \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n             \" out of total usable nodes \" + numberOfNodeManagerHosts);\n       }\n       ret \u003d new BlacklistUpdates(blacklist, EMPTY_LIST);\n     } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is more than \" +\n-            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n-            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n-      }\n+      LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n+          + \" is more than failure threshold ratio \"\n+          + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n+          + numberOfNodeManagerHosts);\n       ret \u003d new BlacklistUpdates(EMPTY_LIST, blacklist);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public BlacklistUpdates getBlacklistUpdates() {\n    BlacklistUpdates ret;\n    List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n    final int currentBlacklistSize \u003d blacklist.size();\n    final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n        numberOfNodeManagerHosts;\n    if (currentBlacklistSize \u003c failureThreshold) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n      }\n      ret \u003d new BlacklistUpdates(blacklist, EMPTY_LIST);\n    } else {\n      LOG.warn(\"Ignoring Blacklists, blacklist size \" + currentBlacklistSize\n          + \" is more than failure threshold ratio \"\n          + blacklistDisableFailureThreshold + \" out of total usable nodes \"\n          + numberOfNodeManagerHosts);\n      ret \u003d new BlacklistUpdates(EMPTY_LIST, blacklist);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/blacklist/SimpleBlacklistManager.java",
      "extendedDetails": {}
    },
    "81df7b586a16f8226c7b01c139c1c70c060399c3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2005. Blacklisting support for scheduling AMs. (Anubhav Dhoot via kasha)\n",
      "commitDate": "13/09/15 5:03 PM",
      "commitName": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,23 @@\n+  public BlacklistUpdates getBlacklistUpdates() {\n+    BlacklistUpdates ret;\n+    List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n+    final int currentBlacklistSize \u003d blacklist.size();\n+    final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n+        numberOfNodeManagerHosts;\n+    if (currentBlacklistSize \u003c failureThreshold) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n+            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n+            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n+      }\n+      ret \u003d new BlacklistUpdates(blacklist, EMPTY_LIST);\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is more than \" +\n+            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n+            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n+      }\n+      ret \u003d new BlacklistUpdates(EMPTY_LIST, blacklist);\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public BlacklistUpdates getBlacklistUpdates() {\n    BlacklistUpdates ret;\n    List\u003cString\u003e blacklist \u003d new ArrayList\u003c\u003e(blacklistNodes);\n    final int currentBlacklistSize \u003d blacklist.size();\n    final double failureThreshold \u003d this.blacklistDisableFailureThreshold *\n        numberOfNodeManagerHosts;\n    if (currentBlacklistSize \u003c failureThreshold) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is less than \" +\n            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n      }\n      ret \u003d new BlacklistUpdates(blacklist, EMPTY_LIST);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blacklist size \" + currentBlacklistSize + \" is more than \" +\n            \"failure threshold ratio \" + blacklistDisableFailureThreshold +\n            \" out of total usable nodes \" + numberOfNodeManagerHosts);\n      }\n      ret \u003d new BlacklistUpdates(EMPTY_LIST, blacklist);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/blacklist/SimpleBlacklistManager.java"
    }
  }
}