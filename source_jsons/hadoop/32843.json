{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "orderEnvByDependencies",
  "functionId": "orderEnvByDependencies___envs-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 1208,
  "functionEndLine": 1258,
  "numCommitsSeen": 95,
  "timeTaken": 1447,
  "changeHistory": [
    "8e728f39c961f034369b43e087d68d01aa4a0e7d"
  ],
  "changeHistoryShort": {
    "8e728f39c961f034369b43e087d68d01aa4a0e7d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e728f39c961f034369b43e087d68d01aa4a0e7d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5714. ContainerExecutor does not order environment map. Contributed by Remi Catherinot and Jim Brennan\n",
      "commitDate": "23/02/18 1:46 PM",
      "commitName": "8e728f39c961f034369b43e087d68d01aa4a0e7d",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,51 @@\n+    public final Map\u003cString, String\u003e orderEnvByDependencies(\n+        Map\u003cString, String\u003e envs) {\n+      if (envs \u003d\u003d null || envs.size() \u003c 2) {\n+        return envs;\n+      }\n+      final Map\u003cString, String\u003e ordered \u003d new LinkedHashMap\u003cString, String\u003e();\n+      class Env {\n+        private boolean resolved \u003d false;\n+        private final Collection\u003cEnv\u003e deps \u003d new ArrayList\u003c\u003e();\n+        private final String name;\n+        private final String value;\n+        Env(String name, String value) {\n+          this.name \u003d name;\n+          this.value \u003d value;\n+        }\n+        void resolve() {\n+          resolved \u003d true;\n+          for (Env dep : deps) {\n+            if (!dep.resolved) {\n+              dep.resolve();\n+            }\n+          }\n+          ordered.put(name, value);\n+        }\n+      }\n+      final Map\u003cString, Env\u003e singletons \u003d new HashMap\u003c\u003e();\n+      for (Map.Entry\u003cString, String\u003e e : envs.entrySet()) {\n+        Env env \u003d singletons.get(e.getKey());\n+        if (env \u003d\u003d null) {\n+          env \u003d new Env(e.getKey(), e.getValue());\n+          singletons.put(env.name, env);\n+        }\n+        for (String depStr : getEnvDependencies(env.value)) {\n+          if (!envs.containsKey(depStr)) {\n+            continue;\n+          }\n+          Env depEnv \u003d singletons.get(depStr);\n+          if (depEnv \u003d\u003d null) {\n+            depEnv \u003d new Env(depStr, envs.get(depStr));\n+            singletons.put(depStr, depEnv);\n+          }\n+          env.deps.add(depEnv);\n+        }\n+      }\n+      for (Env env : singletons.values()) {\n+        if (!env.resolved) {\n+          env.resolve();\n+        }\n+      }\n+      return ordered;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public final Map\u003cString, String\u003e orderEnvByDependencies(\n        Map\u003cString, String\u003e envs) {\n      if (envs \u003d\u003d null || envs.size() \u003c 2) {\n        return envs;\n      }\n      final Map\u003cString, String\u003e ordered \u003d new LinkedHashMap\u003cString, String\u003e();\n      class Env {\n        private boolean resolved \u003d false;\n        private final Collection\u003cEnv\u003e deps \u003d new ArrayList\u003c\u003e();\n        private final String name;\n        private final String value;\n        Env(String name, String value) {\n          this.name \u003d name;\n          this.value \u003d value;\n        }\n        void resolve() {\n          resolved \u003d true;\n          for (Env dep : deps) {\n            if (!dep.resolved) {\n              dep.resolve();\n            }\n          }\n          ordered.put(name, value);\n        }\n      }\n      final Map\u003cString, Env\u003e singletons \u003d new HashMap\u003c\u003e();\n      for (Map.Entry\u003cString, String\u003e e : envs.entrySet()) {\n        Env env \u003d singletons.get(e.getKey());\n        if (env \u003d\u003d null) {\n          env \u003d new Env(e.getKey(), e.getValue());\n          singletons.put(env.name, env);\n        }\n        for (String depStr : getEnvDependencies(env.value)) {\n          if (!envs.containsKey(depStr)) {\n            continue;\n          }\n          Env depEnv \u003d singletons.get(depStr);\n          if (depEnv \u003d\u003d null) {\n            depEnv \u003d new Env(depStr, envs.get(depStr));\n            singletons.put(depStr, depEnv);\n          }\n          env.deps.add(depEnv);\n        }\n      }\n      for (Env env : singletons.values()) {\n        if (!env.resolved) {\n          env.resolve();\n        }\n      }\n      return ordered;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}