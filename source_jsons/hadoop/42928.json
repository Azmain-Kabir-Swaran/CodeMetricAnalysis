{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppLogAggregation.java",
  "functionName": "updateLogAggregationDiagnosticMessages",
  "functionId": "updateLogAggregationDiagnosticMessages___nodeId-NodeId__report-LogAggregationReport",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
  "functionStartLine": 260,
  "functionEndLine": 295,
  "numCommitsSeen": 164,
  "timeTaken": 4720,
  "changeHistory": [
    "4456ea67b949553b85e101e866b4b3f4b335f1f0",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a"
  ],
  "changeHistoryShort": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": "Ymultichange(Ymovefromfile,Ybodychange)",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
      "commitDate": "16/08/19 2:36 AM",
      "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
          "commitDate": "16/08/19 2:36 AM",
          "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "16/08/19 12:13 AM",
          "commitNameOld": "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   private void updateLogAggregationDiagnosticMessages(NodeId nodeId,\n       LogAggregationReport report) {\n     if (report.getDiagnosticMessage() !\u003d null\n         \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n       if (report.getLogAggregationStatus()\n           \u003d\u003d LogAggregationStatus.RUNNING ) {\n         List\u003cString\u003e diagnostics \u003d logAggregationDiagnosticsForNMs.get(nodeId);\n         if (diagnostics \u003d\u003d null) {\n-          diagnostics \u003d new ArrayList\u003cString\u003e();\n+          diagnostics \u003d new ArrayList\u003c\u003e();\n           logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);\n         } else {\n           if (diagnostics.size()\n               \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n             diagnostics.remove(0);\n           }\n         }\n         diagnostics.add(report.getDiagnosticMessage());\n         this.logAggregationStatus.get(nodeId).setDiagnosticMessage(\n-          StringUtils.join(diagnostics, \"\\n\"));\n+            StringUtils.join(diagnostics, \"\\n\"));\n       } else if (report.getLogAggregationStatus()\n           \u003d\u003d LogAggregationStatus.RUNNING_WITH_FAILURE) {\n         List\u003cString\u003e failureMessages \u003d\n             logAggregationFailureMessagesForNMs.get(nodeId);\n         if (failureMessages \u003d\u003d null) {\n-          failureMessages \u003d new ArrayList\u003cString\u003e();\n+          failureMessages \u003d new ArrayList\u003c\u003e();\n           logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);\n         } else {\n           if (failureMessages.size()\n               \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n             failureMessages.remove(0);\n           }\n         }\n         failureMessages.add(report.getDiagnosticMessage());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateLogAggregationDiagnosticMessages(NodeId nodeId,\n      LogAggregationReport report) {\n    if (report.getDiagnosticMessage() !\u003d null\n        \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n      if (report.getLogAggregationStatus()\n          \u003d\u003d LogAggregationStatus.RUNNING ) {\n        List\u003cString\u003e diagnostics \u003d logAggregationDiagnosticsForNMs.get(nodeId);\n        if (diagnostics \u003d\u003d null) {\n          diagnostics \u003d new ArrayList\u003c\u003e();\n          logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);\n        } else {\n          if (diagnostics.size()\n              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n            diagnostics.remove(0);\n          }\n        }\n        diagnostics.add(report.getDiagnosticMessage());\n        this.logAggregationStatus.get(nodeId).setDiagnosticMessage(\n            StringUtils.join(diagnostics, \"\\n\"));\n      } else if (report.getLogAggregationStatus()\n          \u003d\u003d LogAggregationStatus.RUNNING_WITH_FAILURE) {\n        List\u003cString\u003e failureMessages \u003d\n            logAggregationFailureMessagesForNMs.get(nodeId);\n        if (failureMessages \u003d\u003d null) {\n          failureMessages \u003d new ArrayList\u003c\u003e();\n          logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);\n        } else {\n          if (failureMessages.size()\n              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n            failureMessages.remove(0);\n          }\n        }\n        failureMessages.add(report.getDiagnosticMessage());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
            "oldMethodName": "updateLogAggregationDiagnosticMessages",
            "newMethodName": "updateLogAggregationDiagnosticMessages"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
          "commitDate": "16/08/19 2:36 AM",
          "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "16/08/19 12:13 AM",
          "commitNameOld": "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   private void updateLogAggregationDiagnosticMessages(NodeId nodeId,\n       LogAggregationReport report) {\n     if (report.getDiagnosticMessage() !\u003d null\n         \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n       if (report.getLogAggregationStatus()\n           \u003d\u003d LogAggregationStatus.RUNNING ) {\n         List\u003cString\u003e diagnostics \u003d logAggregationDiagnosticsForNMs.get(nodeId);\n         if (diagnostics \u003d\u003d null) {\n-          diagnostics \u003d new ArrayList\u003cString\u003e();\n+          diagnostics \u003d new ArrayList\u003c\u003e();\n           logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);\n         } else {\n           if (diagnostics.size()\n               \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n             diagnostics.remove(0);\n           }\n         }\n         diagnostics.add(report.getDiagnosticMessage());\n         this.logAggregationStatus.get(nodeId).setDiagnosticMessage(\n-          StringUtils.join(diagnostics, \"\\n\"));\n+            StringUtils.join(diagnostics, \"\\n\"));\n       } else if (report.getLogAggregationStatus()\n           \u003d\u003d LogAggregationStatus.RUNNING_WITH_FAILURE) {\n         List\u003cString\u003e failureMessages \u003d\n             logAggregationFailureMessagesForNMs.get(nodeId);\n         if (failureMessages \u003d\u003d null) {\n-          failureMessages \u003d new ArrayList\u003cString\u003e();\n+          failureMessages \u003d new ArrayList\u003c\u003e();\n           logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);\n         } else {\n           if (failureMessages.size()\n               \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n             failureMessages.remove(0);\n           }\n         }\n         failureMessages.add(report.getDiagnosticMessage());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateLogAggregationDiagnosticMessages(NodeId nodeId,\n      LogAggregationReport report) {\n    if (report.getDiagnosticMessage() !\u003d null\n        \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n      if (report.getLogAggregationStatus()\n          \u003d\u003d LogAggregationStatus.RUNNING ) {\n        List\u003cString\u003e diagnostics \u003d logAggregationDiagnosticsForNMs.get(nodeId);\n        if (diagnostics \u003d\u003d null) {\n          diagnostics \u003d new ArrayList\u003c\u003e();\n          logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);\n        } else {\n          if (diagnostics.size()\n              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n            diagnostics.remove(0);\n          }\n        }\n        diagnostics.add(report.getDiagnosticMessage());\n        this.logAggregationStatus.get(nodeId).setDiagnosticMessage(\n            StringUtils.join(diagnostics, \"\\n\"));\n      } else if (report.getLogAggregationStatus()\n          \u003d\u003d LogAggregationStatus.RUNNING_WITH_FAILURE) {\n        List\u003cString\u003e failureMessages \u003d\n            logAggregationFailureMessagesForNMs.get(nodeId);\n        if (failureMessages \u003d\u003d null) {\n          failureMessages \u003d new ArrayList\u003c\u003e();\n          logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);\n        } else {\n          if (failureMessages.size()\n              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n            failureMessages.remove(0);\n          }\n        }\n        failureMessages.add(report.getDiagnosticMessage());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
          "extendedDetails": {}
        }
      ]
    },
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,36 @@\n+  private void updateLogAggregationDiagnosticMessages(NodeId nodeId,\n+      LogAggregationReport report) {\n+    if (report.getDiagnosticMessage() !\u003d null\n+        \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n+      if (report.getLogAggregationStatus()\n+          \u003d\u003d LogAggregationStatus.RUNNING ) {\n+        List\u003cString\u003e diagnostics \u003d logAggregationDiagnosticsForNMs.get(nodeId);\n+        if (diagnostics \u003d\u003d null) {\n+          diagnostics \u003d new ArrayList\u003cString\u003e();\n+          logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);\n+        } else {\n+          if (diagnostics.size()\n+              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n+            diagnostics.remove(0);\n+          }\n+        }\n+        diagnostics.add(report.getDiagnosticMessage());\n+        this.logAggregationStatus.get(nodeId).setDiagnosticMessage(\n+          StringUtils.join(diagnostics, \"\\n\"));\n+      } else if (report.getLogAggregationStatus()\n+          \u003d\u003d LogAggregationStatus.RUNNING_WITH_FAILURE) {\n+        List\u003cString\u003e failureMessages \u003d\n+            logAggregationFailureMessagesForNMs.get(nodeId);\n+        if (failureMessages \u003d\u003d null) {\n+          failureMessages \u003d new ArrayList\u003cString\u003e();\n+          logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);\n+        } else {\n+          if (failureMessages.size()\n+              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n+            failureMessages.remove(0);\n+          }\n+        }\n+        failureMessages.add(report.getDiagnosticMessage());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateLogAggregationDiagnosticMessages(NodeId nodeId,\n      LogAggregationReport report) {\n    if (report.getDiagnosticMessage() !\u003d null\n        \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n      if (report.getLogAggregationStatus()\n          \u003d\u003d LogAggregationStatus.RUNNING ) {\n        List\u003cString\u003e diagnostics \u003d logAggregationDiagnosticsForNMs.get(nodeId);\n        if (diagnostics \u003d\u003d null) {\n          diagnostics \u003d new ArrayList\u003cString\u003e();\n          logAggregationDiagnosticsForNMs.put(nodeId, diagnostics);\n        } else {\n          if (diagnostics.size()\n              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n            diagnostics.remove(0);\n          }\n        }\n        diagnostics.add(report.getDiagnosticMessage());\n        this.logAggregationStatus.get(nodeId).setDiagnosticMessage(\n          StringUtils.join(diagnostics, \"\\n\"));\n      } else if (report.getLogAggregationStatus()\n          \u003d\u003d LogAggregationStatus.RUNNING_WITH_FAILURE) {\n        List\u003cString\u003e failureMessages \u003d\n            logAggregationFailureMessagesForNMs.get(nodeId);\n        if (failureMessages \u003d\u003d null) {\n          failureMessages \u003d new ArrayList\u003cString\u003e();\n          logAggregationFailureMessagesForNMs.put(nodeId, failureMessages);\n        } else {\n          if (failureMessages.size()\n              \u003d\u003d maxLogAggregationDiagnosticsInMemory) {\n            failureMessages.remove(0);\n          }\n        }\n        failureMessages.add(report.getDiagnosticMessage());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}