{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerClient.java",
  "functionName": "writeCommandToTempFile",
  "functionId": "writeCommandToTempFile___cmd-DockerCommand__containerId-ContainerId__nmContext-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java",
  "functionStartLine": 70,
  "functionEndLine": 129,
  "numCommitsSeen": 13,
  "timeTaken": 4383,
  "changeHistory": [
    "b2d7204ed0b64405a0adbe07e3eaf385e046efa1",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
    "af4fc2e62805a5bd392214521a93650085b8d020",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d"
  ],
  "changeHistoryShort": {
    "b2d7204ed0b64405a0adbe07e3eaf385e046efa1": "Ybodychange",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": "Ybodychange",
    "af4fc2e62805a5bd392214521a93650085b8d020": "Ybodychange",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": "Ymultichange(Yparameterchange,Ybodychange)",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2d7204ed0b64405a0adbe07e3eaf385e046efa1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9125.  Fixed Carriage Return detection in Docker container launch command.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "14/12/18 2:52 PM",
      "commitName": "b2d7204ed0b64405a0adbe07e3eaf385e046efa1",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/08/18 8:43 AM",
      "commitNameOld": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 134.3,
      "commitsBetweenForRepo": 1143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public String writeCommandToTempFile(DockerCommand cmd,\n       ContainerId containerId, Context nmContext)\n       throws ContainerExecutionException {\n     String filePrefix \u003d containerId.toString();\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     File dockerCommandFile;\n     File cmdDir \u003d null;\n \n     if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n       throw new ContainerExecutionException(\n           \"Unable to write temporary docker command\");\n     }\n \n     try {\n       String cmdDirPath \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n           ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n           appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n       cmdDir \u003d new File(cmdDirPath);\n       if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n         throw new IOException(\"Cannot create container private directory \"\n             + cmdDir);\n       }\n       dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n           TMP_FILE_SUFFIX, cmdDir);\n       try (\n         Writer writer \u003d new OutputStreamWriter(\n             new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n         PrintWriter printWriter \u003d new PrintWriter(writer);\n       ) {\n         printWriter.println(\"[docker-command-execution]\");\n         for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n             cmd.getDockerCommandWithArguments().entrySet()) {\n           if (entry.getKey().contains(\"\u003d\")) {\n             throw new ContainerExecutionException(\n                 \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                     .getKey() + \"; value \u003d \" + entry.getValue());\n           }\n-          if (entry.getValue().contains(\"\\n\")) {\n+          String value \u003d StringUtils.join(\",\", entry.getValue());\n+          if (value.contains(\"\\n\")) {\n             throw new ContainerExecutionException(\n                 \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n-                    .getKey() + \"; value \u003d \" + entry.getValue());\n+                    .getKey() + \"; value \u003d \" + value);\n           }\n-          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n-              .join(\",\", entry.getValue()));\n+          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + value);\n         }\n         if (cmd instanceof DockerRunCommand) {\n           DockerRunCommand runCommand \u003d (DockerRunCommand) cmd;\n           if (runCommand.containsEnv()) {\n             String path \u003d writeEnvFile(runCommand, filePrefix, cmdDir);\n             printWriter.println(\"  environ\u003d\" + path);\n           }\n         }\n         return dockerCommandFile.toString();\n       }\n     } catch (IOException e) {\n       LOG.warn(\"Unable to write docker command to \" + cmdDir);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String writeCommandToTempFile(DockerCommand cmd,\n      ContainerId containerId, Context nmContext)\n      throws ContainerExecutionException {\n    String filePrefix \u003d containerId.toString();\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    File dockerCommandFile;\n    File cmdDir \u003d null;\n\n    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n      throw new ContainerExecutionException(\n          \"Unable to write temporary docker command\");\n    }\n\n    try {\n      String cmdDirPath \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n      cmdDir \u003d new File(cmdDirPath);\n      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n        throw new IOException(\"Cannot create container private directory \"\n            + cmdDir);\n      }\n      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, cmdDir);\n      try (\n        Writer writer \u003d new OutputStreamWriter(\n            new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n        PrintWriter printWriter \u003d new PrintWriter(writer);\n      ) {\n        printWriter.println(\"[docker-command-execution]\");\n        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n            cmd.getDockerCommandWithArguments().entrySet()) {\n          if (entry.getKey().contains(\"\u003d\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          String value \u003d StringUtils.join(\",\", entry.getValue());\n          if (value.contains(\"\\n\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + value);\n          }\n          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + value);\n        }\n        if (cmd instanceof DockerRunCommand) {\n          DockerRunCommand runCommand \u003d (DockerRunCommand) cmd;\n          if (runCommand.containsEnv()) {\n            String path \u003d writeEnvFile(runCommand, filePrefix, cmdDir);\n            printWriter.println(\"  environ\u003d\" + path);\n          }\n        }\n        return dockerCommandFile.toString();\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java",
      "extendedDetails": {}
    },
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7654. Support ENTRY_POINT for docker container. Contributed by Eric Yang\n",
      "commitDate": "11/05/18 4:56 PM",
      "commitName": "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "09/05/18 10:32 AM",
      "commitNameOld": "af4fc2e62805a5bd392214521a93650085b8d020",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.27,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,60 @@\n   public String writeCommandToTempFile(DockerCommand cmd,\n       ContainerId containerId, Context nmContext)\n       throws ContainerExecutionException {\n     String filePrefix \u003d containerId.toString();\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     File dockerCommandFile;\n     File cmdDir \u003d null;\n \n     if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n       throw new ContainerExecutionException(\n           \"Unable to write temporary docker command\");\n     }\n \n     try {\n       String cmdDirPath \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n           ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n           appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n       cmdDir \u003d new File(cmdDirPath);\n       if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n         throw new IOException(\"Cannot create container private directory \"\n             + cmdDir);\n       }\n-\n       dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n           TMP_FILE_SUFFIX, cmdDir);\n-\n-      Writer writer \u003d new OutputStreamWriter(\n-          new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n-      PrintWriter printWriter \u003d new PrintWriter(writer);\n-      printWriter.println(\"[docker-command-execution]\");\n-      for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n-          cmd.getDockerCommandWithArguments().entrySet()) {\n-        if (entry.getKey().contains(\"\u003d\")) {\n-          throw new ContainerExecutionException(\n-              \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n-                  .getKey() + \"; value \u003d \" + entry.getValue());\n+      try (\n+        Writer writer \u003d new OutputStreamWriter(\n+            new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n+        PrintWriter printWriter \u003d new PrintWriter(writer);\n+      ) {\n+        printWriter.println(\"[docker-command-execution]\");\n+        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n+            cmd.getDockerCommandWithArguments().entrySet()) {\n+          if (entry.getKey().contains(\"\u003d\")) {\n+            throw new ContainerExecutionException(\n+                \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n+                    .getKey() + \"; value \u003d \" + entry.getValue());\n+          }\n+          if (entry.getValue().contains(\"\\n\")) {\n+            throw new ContainerExecutionException(\n+                \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n+                    .getKey() + \"; value \u003d \" + entry.getValue());\n+          }\n+          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n+              .join(\",\", entry.getValue()));\n         }\n-        if (entry.getValue().contains(\"\\n\")) {\n-          throw new ContainerExecutionException(\n-              \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n-                  .getKey() + \"; value \u003d \" + entry.getValue());\n+        if (cmd instanceof DockerRunCommand) {\n+          DockerRunCommand runCommand \u003d (DockerRunCommand) cmd;\n+          if (runCommand.containsEnv()) {\n+            String path \u003d writeEnvFile(runCommand, filePrefix, cmdDir);\n+            printWriter.println(\"  environ\u003d\" + path);\n+          }\n         }\n-        printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n-            .join(\",\", entry.getValue()));\n+        return dockerCommandFile.toString();\n       }\n-      printWriter.close();\n-\n-      return dockerCommandFile.toString();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to write docker command to \" + cmdDir);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String writeCommandToTempFile(DockerCommand cmd,\n      ContainerId containerId, Context nmContext)\n      throws ContainerExecutionException {\n    String filePrefix \u003d containerId.toString();\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    File dockerCommandFile;\n    File cmdDir \u003d null;\n\n    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n      throw new ContainerExecutionException(\n          \"Unable to write temporary docker command\");\n    }\n\n    try {\n      String cmdDirPath \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n      cmdDir \u003d new File(cmdDirPath);\n      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n        throw new IOException(\"Cannot create container private directory \"\n            + cmdDir);\n      }\n      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, cmdDir);\n      try (\n        Writer writer \u003d new OutputStreamWriter(\n            new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n        PrintWriter printWriter \u003d new PrintWriter(writer);\n      ) {\n        printWriter.println(\"[docker-command-execution]\");\n        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n            cmd.getDockerCommandWithArguments().entrySet()) {\n          if (entry.getKey().contains(\"\u003d\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          if (entry.getValue().contains(\"\\n\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n              .join(\",\", entry.getValue()));\n        }\n        if (cmd instanceof DockerRunCommand) {\n          DockerRunCommand runCommand \u003d (DockerRunCommand) cmd;\n          if (runCommand.containsEnv()) {\n            String path \u003d writeEnvFile(runCommand, filePrefix, cmdDir);\n            printWriter.println(\"  environ\u003d\" + path);\n          }\n        }\n        return dockerCommandFile.toString();\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java",
      "extendedDetails": {}
    },
    "af4fc2e62805a5bd392214521a93650085b8d020": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8261.  Fixed a bug in creation of localized container directory.\n            Contributed by Jason Lowe\n",
      "commitDate": "09/05/18 10:32 AM",
      "commitName": "af4fc2e62805a5bd392214521a93650085b8d020",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/05/18 11:33 AM",
      "commitNameOld": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.96,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,54 @@\n   public String writeCommandToTempFile(DockerCommand cmd,\n       ContainerId containerId, Context nmContext)\n       throws ContainerExecutionException {\n     String filePrefix \u003d containerId.toString();\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     File dockerCommandFile;\n-    String cmdDir \u003d null;\n+    File cmdDir \u003d null;\n \n     if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n       throw new ContainerExecutionException(\n           \"Unable to write temporary docker command\");\n     }\n \n     try {\n-      cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n+      String cmdDirPath \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n           ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n           appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n+      cmdDir \u003d new File(cmdDirPath);\n+      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n+        throw new IOException(\"Cannot create container private directory \"\n+            + cmdDir);\n+      }\n \n       dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n-          TMP_FILE_SUFFIX, new File(cmdDir));\n+          TMP_FILE_SUFFIX, cmdDir);\n \n       Writer writer \u003d new OutputStreamWriter(\n           new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n       PrintWriter printWriter \u003d new PrintWriter(writer);\n       printWriter.println(\"[docker-command-execution]\");\n       for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n           cmd.getDockerCommandWithArguments().entrySet()) {\n         if (entry.getKey().contains(\"\u003d\")) {\n           throw new ContainerExecutionException(\n               \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                   .getKey() + \"; value \u003d \" + entry.getValue());\n         }\n         if (entry.getValue().contains(\"\\n\")) {\n           throw new ContainerExecutionException(\n               \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                   .getKey() + \"; value \u003d \" + entry.getValue());\n         }\n         printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n             .join(\",\", entry.getValue()));\n       }\n       printWriter.close();\n \n       return dockerCommandFile.toString();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to write docker command to \" + cmdDir);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String writeCommandToTempFile(DockerCommand cmd,\n      ContainerId containerId, Context nmContext)\n      throws ContainerExecutionException {\n    String filePrefix \u003d containerId.toString();\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    File dockerCommandFile;\n    File cmdDir \u003d null;\n\n    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n      throw new ContainerExecutionException(\n          \"Unable to write temporary docker command\");\n    }\n\n    try {\n      String cmdDirPath \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n      cmdDir \u003d new File(cmdDirPath);\n      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n        throw new IOException(\"Cannot create container private directory \"\n            + cmdDir);\n      }\n\n      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, cmdDir);\n\n      Writer writer \u003d new OutputStreamWriter(\n          new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n      PrintWriter printWriter \u003d new PrintWriter(writer);\n      printWriter.println(\"[docker-command-execution]\");\n      for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n          cmd.getDockerCommandWithArguments().entrySet()) {\n        if (entry.getKey().contains(\"\u003d\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        if (entry.getValue().contains(\"\\n\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n            .join(\",\", entry.getValue()));\n      }\n      printWriter.close();\n\n      return dockerCommandFile.toString();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java",
      "extendedDetails": {}
    },
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
      "commitDate": "02/05/18 11:33 AM",
      "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
          "commitDate": "02/05/18 11:33 AM",
          "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "20/04/18 10:49 AM",
          "commitNameOld": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.03,
          "commitsBetweenForRepo": 584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n-  public String writeCommandToTempFile(DockerCommand cmd, Container container,\n-      Context nmContext) throws ContainerExecutionException {\n-    ContainerId containerId \u003d container.getContainerId();\n+  public String writeCommandToTempFile(DockerCommand cmd,\n+      ContainerId containerId, Context nmContext)\n+      throws ContainerExecutionException {\n     String filePrefix \u003d containerId.toString();\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     File dockerCommandFile;\n     String cmdDir \u003d null;\n \n     if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n       throw new ContainerExecutionException(\n           \"Unable to write temporary docker command\");\n     }\n \n     try {\n       cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n           ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n           appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n \n       dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n           TMP_FILE_SUFFIX, new File(cmdDir));\n \n       Writer writer \u003d new OutputStreamWriter(\n           new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n       PrintWriter printWriter \u003d new PrintWriter(writer);\n       printWriter.println(\"[docker-command-execution]\");\n       for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n           cmd.getDockerCommandWithArguments().entrySet()) {\n         if (entry.getKey().contains(\"\u003d\")) {\n           throw new ContainerExecutionException(\n               \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                   .getKey() + \"; value \u003d \" + entry.getValue());\n         }\n         if (entry.getValue().contains(\"\\n\")) {\n           throw new ContainerExecutionException(\n               \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                   .getKey() + \"; value \u003d \" + entry.getValue());\n         }\n         printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n             .join(\",\", entry.getValue()));\n       }\n       printWriter.close();\n \n       return dockerCommandFile.toString();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to write docker command to \" + cmdDir);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String writeCommandToTempFile(DockerCommand cmd,\n      ContainerId containerId, Context nmContext)\n      throws ContainerExecutionException {\n    String filePrefix \u003d containerId.toString();\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    File dockerCommandFile;\n    String cmdDir \u003d null;\n\n    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n      throw new ContainerExecutionException(\n          \"Unable to write temporary docker command\");\n    }\n\n    try {\n      cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n\n      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, new File(cmdDir));\n\n      Writer writer \u003d new OutputStreamWriter(\n          new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n      PrintWriter printWriter \u003d new PrintWriter(writer);\n      printWriter.println(\"[docker-command-execution]\");\n      for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n          cmd.getDockerCommandWithArguments().entrySet()) {\n        if (entry.getKey().contains(\"\u003d\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        if (entry.getValue().contains(\"\\n\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n            .join(\",\", entry.getValue()));\n      }\n      printWriter.close();\n\n      return dockerCommandFile.toString();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java",
          "extendedDetails": {
            "oldValue": "[cmd-DockerCommand, container-Container, nmContext-Context]",
            "newValue": "[cmd-DockerCommand, containerId-ContainerId, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
          "commitDate": "02/05/18 11:33 AM",
          "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "20/04/18 10:49 AM",
          "commitNameOld": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.03,
          "commitsBetweenForRepo": 584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n-  public String writeCommandToTempFile(DockerCommand cmd, Container container,\n-      Context nmContext) throws ContainerExecutionException {\n-    ContainerId containerId \u003d container.getContainerId();\n+  public String writeCommandToTempFile(DockerCommand cmd,\n+      ContainerId containerId, Context nmContext)\n+      throws ContainerExecutionException {\n     String filePrefix \u003d containerId.toString();\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     File dockerCommandFile;\n     String cmdDir \u003d null;\n \n     if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n       throw new ContainerExecutionException(\n           \"Unable to write temporary docker command\");\n     }\n \n     try {\n       cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n           ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n           appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n \n       dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n           TMP_FILE_SUFFIX, new File(cmdDir));\n \n       Writer writer \u003d new OutputStreamWriter(\n           new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n       PrintWriter printWriter \u003d new PrintWriter(writer);\n       printWriter.println(\"[docker-command-execution]\");\n       for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n           cmd.getDockerCommandWithArguments().entrySet()) {\n         if (entry.getKey().contains(\"\u003d\")) {\n           throw new ContainerExecutionException(\n               \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                   .getKey() + \"; value \u003d \" + entry.getValue());\n         }\n         if (entry.getValue().contains(\"\\n\")) {\n           throw new ContainerExecutionException(\n               \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                   .getKey() + \"; value \u003d \" + entry.getValue());\n         }\n         printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n             .join(\",\", entry.getValue()));\n       }\n       printWriter.close();\n \n       return dockerCommandFile.toString();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to write docker command to \" + cmdDir);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String writeCommandToTempFile(DockerCommand cmd,\n      ContainerId containerId, Context nmContext)\n      throws ContainerExecutionException {\n    String filePrefix \u003d containerId.toString();\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    File dockerCommandFile;\n    String cmdDir \u003d null;\n\n    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n      throw new ContainerExecutionException(\n          \"Unable to write temporary docker command\");\n    }\n\n    try {\n      cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n\n      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, new File(cmdDir));\n\n      Writer writer \u003d new OutputStreamWriter(\n          new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n      PrintWriter printWriter \u003d new PrintWriter(writer);\n      printWriter.println(\"[docker-command-execution]\");\n      for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n          cmd.getDockerCommandWithArguments().entrySet()) {\n        if (entry.getKey().contains(\"\u003d\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        if (entry.getValue().contains(\"\\n\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n            .join(\",\", entry.getValue()));\n      }\n      printWriter.close();\n\n      return dockerCommandFile.toString();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,49 @@\n+  public String writeCommandToTempFile(DockerCommand cmd, Container container,\n+      Context nmContext) throws ContainerExecutionException {\n+    ContainerId containerId \u003d container.getContainerId();\n+    String filePrefix \u003d containerId.toString();\n+    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n+        .getApplicationId();\n+    File dockerCommandFile;\n+    String cmdDir \u003d null;\n+\n+    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n+      throw new ContainerExecutionException(\n+          \"Unable to write temporary docker command\");\n+    }\n+\n+    try {\n+      cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n+          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n+          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n+\n+      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n+          TMP_FILE_SUFFIX, new File(cmdDir));\n+\n+      Writer writer \u003d new OutputStreamWriter(\n+          new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n+      PrintWriter printWriter \u003d new PrintWriter(writer);\n+      printWriter.println(\"[docker-command-execution]\");\n+      for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n+          cmd.getDockerCommandWithArguments().entrySet()) {\n+        if (entry.getKey().contains(\"\u003d\")) {\n+          throw new ContainerExecutionException(\n+              \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n+                  .getKey() + \"; value \u003d \" + entry.getValue());\n+        }\n+        if (entry.getValue().contains(\"\\n\")) {\n+          throw new ContainerExecutionException(\n+              \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n+                  .getKey() + \"; value \u003d \" + entry.getValue());\n+        }\n+        printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n+            .join(\",\", entry.getValue()));\n+      }\n+      printWriter.close();\n+\n+      return dockerCommandFile.toString();\n+    } catch (IOException e) {\n+      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n+      throw new ContainerExecutionException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String writeCommandToTempFile(DockerCommand cmd, Container container,\n      Context nmContext) throws ContainerExecutionException {\n    ContainerId containerId \u003d container.getContainerId();\n    String filePrefix \u003d containerId.toString();\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    File dockerCommandFile;\n    String cmdDir \u003d null;\n\n    if(nmContext \u003d\u003d null || nmContext.getLocalDirsHandler() \u003d\u003d null) {\n      throw new ContainerExecutionException(\n          \"Unable to write temporary docker command\");\n    }\n\n    try {\n      cmdDir \u003d nmContext.getLocalDirsHandler().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n\n      dockerCommandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, new File(cmdDir));\n\n      Writer writer \u003d new OutputStreamWriter(\n          new FileOutputStream(dockerCommandFile.toString()), \"UTF-8\");\n      PrintWriter printWriter \u003d new PrintWriter(writer);\n      printWriter.println(\"[docker-command-execution]\");\n      for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n          cmd.getDockerCommandWithArguments().entrySet()) {\n        if (entry.getKey().contains(\"\u003d\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        if (entry.getValue().contains(\"\\n\")) {\n          throw new ContainerExecutionException(\n              \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                  .getKey() + \"; value \u003d \" + entry.getValue());\n        }\n        printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n            .join(\",\", entry.getValue()));\n      }\n      printWriter.close();\n\n      return dockerCommandFile.toString();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write docker command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerClient.java"
    }
  }
}