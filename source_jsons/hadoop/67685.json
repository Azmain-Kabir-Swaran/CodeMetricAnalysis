{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyMapper.java",
  "functionName": "handleFailures",
  "functionId": "handleFailures___exception-IOException__sourceFileStatus-CopyListingFileStatus__target-Path__context-Context",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
  "functionStartLine": 300,
  "functionEndLine": 319,
  "numCommitsSeen": 39,
  "timeTaken": 2853,
  "changeHistory": [
    "bf3fb585aaf2b179836e139c041fc87920a3c886",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03",
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
    "af942585a108d70e0946f6dd4c465a54d068eabf",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "bf3fb585aaf2b179836e139c041fc87920a3c886": "Ybodychange",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": "Ybodychange",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": "Ybodychange",
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea": "Yparameterchange",
    "af942585a108d70e0946f6dd4c465a54d068eabf": "Ybodychange",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf3fb585aaf2b179836e139c041fc87920a3c886": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,20 @@\n   private void handleFailures(IOException exception,\n       CopyListingFileStatus sourceFileStatus, Path target, Context context)\n       throws IOException, InterruptedException {\n-    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n-                target, exception);\n+    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() +\n+        (sourceFileStatus.isSplit()? \",\"\n+            + \" offset\u003d\" + sourceFileStatus.getChunkOffset()\n+            + \" chunkLength\u003d\" + sourceFileStatus.getChunkLength()\n+            : \"\") +\n+        \" to \" + target, exception);\n \n     if (ignoreFailures \u0026\u0026\n         ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n       incrementCounter(context, Counter.FAIL, 1);\n       incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n       context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n           StringUtils.stringifyException(exception)));\n     }\n     else\n       throw exception;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleFailures(IOException exception,\n      CopyListingFileStatus sourceFileStatus, Path target, Context context)\n      throws IOException, InterruptedException {\n    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() +\n        (sourceFileStatus.isSplit()? \",\"\n            + \" offset\u003d\" + sourceFileStatus.getChunkOffset()\n            + \" chunkLength\u003d\" + sourceFileStatus.getChunkLength()\n            : \"\") +\n        \" to \" + target, exception);\n\n    if (ignoreFailures \u0026\u0026\n        ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n      incrementCounter(context, Counter.FAIL, 1);\n      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n          StringUtils.stringifyException(exception)));\n    }\n    else\n      throw exception;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:01 PM",
      "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,16 @@\n   private void handleFailures(IOException exception,\n       CopyListingFileStatus sourceFileStatus, Path target, Context context)\n       throws IOException, InterruptedException {\n-    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() +\n-        (sourceFileStatus.isSplit()? \",\"\n-            + \" offset\u003d\" + sourceFileStatus.getChunkOffset()\n-            + \" chunkLength\u003d\" + sourceFileStatus.getChunkLength()\n-            : \"\") +\n-        \" to \" + target, exception);\n+    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n+                target, exception);\n \n     if (ignoreFailures \u0026\u0026\n         ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n       incrementCounter(context, Counter.FAIL, 1);\n       incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n       context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n           StringUtils.stringifyException(exception)));\n     }\n     else\n       throw exception;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleFailures(IOException exception,\n      CopyListingFileStatus sourceFileStatus, Path target, Context context)\n      throws IOException, InterruptedException {\n    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n                target, exception);\n\n    if (ignoreFailures \u0026\u0026\n        ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n      incrementCounter(context, Counter.FAIL, 1);\n      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n          StringUtils.stringifyException(exception)));\n    }\n    else\n      throw exception;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
      "commitDate": "30/03/17 5:01 PM",
      "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 135.21,
      "commitsBetweenForRepo": 732,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,20 @@\n   private void handleFailures(IOException exception,\n       CopyListingFileStatus sourceFileStatus, Path target, Context context)\n       throws IOException, InterruptedException {\n-    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n-                target, exception);\n+    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() +\n+        (sourceFileStatus.isSplit()? \",\"\n+            + \" offset\u003d\" + sourceFileStatus.getChunkOffset()\n+            + \" chunkLength\u003d\" + sourceFileStatus.getChunkLength()\n+            : \"\") +\n+        \" to \" + target, exception);\n \n     if (ignoreFailures \u0026\u0026\n         ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n       incrementCounter(context, Counter.FAIL, 1);\n       incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n       context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n           StringUtils.stringifyException(exception)));\n     }\n     else\n       throw exception;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleFailures(IOException exception,\n      CopyListingFileStatus sourceFileStatus, Path target, Context context)\n      throws IOException, InterruptedException {\n    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() +\n        (sourceFileStatus.isSplit()? \",\"\n            + \" offset\u003d\" + sourceFileStatus.getChunkOffset()\n            + \" chunkLength\u003d\" + sourceFileStatus.getChunkLength()\n            : \"\") +\n        \" to \" + target, exception);\n\n    if (ignoreFailures \u0026\u0026\n        ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n      incrementCounter(context, Counter.FAIL, 1);\n      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n          StringUtils.stringifyException(exception)));\n    }\n    else\n      throw exception;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13626. Remove distcp dependency on FileStatus serialization\n",
      "commitDate": "24/10/16 12:46 PM",
      "commitName": "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "17/05/16 5:00 AM",
      "commitNameOld": "c69a649257a331da55c1a1bf61c819e289015a6b",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 160.32,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private void handleFailures(IOException exception,\n-                                     FileStatus sourceFileStatus, Path target,\n-                                     Context context) throws IOException, InterruptedException {\n+      CopyListingFileStatus sourceFileStatus, Path target, Context context)\n+      throws IOException, InterruptedException {\n     LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n                 target, exception);\n \n     if (ignoreFailures \u0026\u0026\n         ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n       incrementCounter(context, Counter.FAIL, 1);\n       incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n       context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n           StringUtils.stringifyException(exception)));\n     }\n     else\n       throw exception;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleFailures(IOException exception,\n      CopyListingFileStatus sourceFileStatus, Path target, Context context)\n      throws IOException, InterruptedException {\n    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n                target, exception);\n\n    if (ignoreFailures \u0026\u0026\n        ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n      incrementCounter(context, Counter.FAIL, 1);\n      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n          StringUtils.stringifyException(exception)));\n    }\n    else\n      throw exception;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {
        "oldValue": "[exception-IOException, sourceFileStatus-FileStatus, target-Path, context-Context]",
        "newValue": "[exception-IOException, sourceFileStatus-CopyListingFileStatus, target-Path, context-Context]"
      }
    },
    "af942585a108d70e0946f6dd4c465a54d068eabf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12469. distcp should not ignore the ignoreFailures option. Contributed by Mingliang Liu.\n",
      "commitDate": "04/05/16 10:23 AM",
      "commitName": "af942585a108d70e0946f6dd4c465a54d068eabf",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/03/16 11:32 PM",
      "commitNameOld": "18c7e582839ea0b550463569b18b5827d23f8849",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 37.45,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private void handleFailures(IOException exception,\n                                      FileStatus sourceFileStatus, Path target,\n                                      Context context) throws IOException, InterruptedException {\n     LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n                 target, exception);\n \n-    if (ignoreFailures \u0026\u0026 exception.getCause() instanceof\n-            RetriableFileCopyCommand.CopyReadException) {\n+    if (ignoreFailures \u0026\u0026\n+        ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n       incrementCounter(context, Counter.FAIL, 1);\n       incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n       context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n           StringUtils.stringifyException(exception)));\n     }\n     else\n       throw exception;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleFailures(IOException exception,\n                                     FileStatus sourceFileStatus, Path target,\n                                     Context context) throws IOException, InterruptedException {\n    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n                target, exception);\n\n    if (ignoreFailures \u0026\u0026\n        ExceptionUtils.indexOfType(exception, CopyReadException.class) !\u003d -1) {\n      incrementCounter(context, Counter.FAIL, 1);\n      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" +\n          StringUtils.stringifyException(exception)));\n    }\n    else\n      throw exception;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,16 @@\n+  private void handleFailures(IOException exception,\n+                                     FileStatus sourceFileStatus, Path target,\n+                                     Context context) throws IOException, InterruptedException {\n+    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n+                target, exception);\n+\n+    if (ignoreFailures \u0026\u0026 exception.getCause() instanceof\n+            RetriableFileCopyCommand.CopyReadException) {\n+      incrementCounter(context, Counter.FAIL, 1);\n+      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n+      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" + \n+          StringUtils.stringifyException(exception)));\n+    }\n+    else\n+      throw exception;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleFailures(IOException exception,\n                                     FileStatus sourceFileStatus, Path target,\n                                     Context context) throws IOException, InterruptedException {\n    LOG.error(\"Failure in copying \" + sourceFileStatus.getPath() + \" to \" +\n                target, exception);\n\n    if (ignoreFailures \u0026\u0026 exception.getCause() instanceof\n            RetriableFileCopyCommand.CopyReadException) {\n      incrementCounter(context, Counter.FAIL, 1);\n      incrementCounter(context, Counter.BYTESFAILED, sourceFileStatus.getLen());\n      context.write(null, new Text(\"FAIL: \" + sourceFileStatus.getPath() + \" - \" + \n          StringUtils.stringifyException(exception)));\n    }\n    else\n      throw exception;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java"
    }
  }
}