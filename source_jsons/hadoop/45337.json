{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequestHedgingRMFailoverProxyProvider.java",
  "functionName": "createRetriableProxy",
  "functionId": "createRetriableProxy",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
  "functionStartLine": 93,
  "functionEndLine": 105,
  "numCommitsSeen": 19,
  "timeTaken": 3243,
  "changeHistory": [
    "9855225a790e66835c79816712f432ffa8c599b4",
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d"
  ],
  "changeHistoryShort": {
    "9855225a790e66835c79816712f432ffa8c599b4": "Ybodychange",
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9855225a790e66835c79816712f432ffa8c599b4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6602. Impersonation does not work if standby RM is contacted first (rkanter)\n",
      "commitDate": "19/05/17 3:43 PM",
      "commitName": "9855225a790e66835c79816712f432ffa8c599b4",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "08/02/17 2:11 AM",
      "commitNameOld": "eec52e158b7bc14b2d3d53512323ba05e15e09e3",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 100.52,
      "commitsBetweenForRepo": 584,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   protected T createRetriableProxy() {\n     try {\n       // Create proxy that can retry exceptions properly.\n       RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n       InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n-      T proxy \u003d RMProxy.\u003cT\u003e getProxy(conf, protocol, rmAddress);\n+      T proxy \u003d rmProxy.getProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n     } catch (IOException ioe) {\n       LOG.error(\"Unable to create proxy to the ResourceManager \"\n           + HAUtil.getRMHAId(conf), ioe);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d rmProxy.getProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \"\n          + HAUtil.getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
      "commitDate": "22/01/16 6:20 PM",
      "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "22/01/16 1:55 PM",
          "commitNameOld": "46e5ea81e0e41646ba02391aea31481ead28aaf8",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n-      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n-          throws IOException{\n-    if (HAUtil.isHAEnabled(conf)) {\n-      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n-          instance.createRMFailoverProxyProvider(conf, protocol);\n-      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n-    } else {\n-      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+  protected T createRetriableProxy() {\n+    try {\n+      // Create proxy that can retry exceptions properly.\n+      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n+      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n       T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n+          .getRMHAId(conf), ioe);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n          .getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
            "oldMethodName": "createRMProxy",
            "newMethodName": "createRetriableProxy"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "22/01/16 1:55 PM",
          "commitNameOld": "46e5ea81e0e41646ba02391aea31481ead28aaf8",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n-      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n-          throws IOException{\n-    if (HAUtil.isHAEnabled(conf)) {\n-      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n-          instance.createRMFailoverProxyProvider(conf, protocol);\n-      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n-    } else {\n-      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+  protected T createRetriableProxy() {\n+    try {\n+      // Create proxy that can retry exceptions properly.\n+      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n+      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n       T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n+          .getRMHAId(conf), ioe);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n          .getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "22/01/16 1:55 PM",
          "commitNameOld": "46e5ea81e0e41646ba02391aea31481ead28aaf8",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n-      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n-          throws IOException{\n-    if (HAUtil.isHAEnabled(conf)) {\n-      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n-          instance.createRMFailoverProxyProvider(conf, protocol);\n-      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n-    } else {\n-      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+  protected T createRetriableProxy() {\n+    try {\n+      // Create proxy that can retry exceptions properly.\n+      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n+      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n       T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n+          .getRMHAId(conf), ioe);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n          .getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "22/01/16 1:55 PM",
          "commitNameOld": "46e5ea81e0e41646ba02391aea31481ead28aaf8",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n-      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n-          throws IOException{\n-    if (HAUtil.isHAEnabled(conf)) {\n-      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n-          instance.createRMFailoverProxyProvider(conf, protocol);\n-      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n-    } else {\n-      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+  protected T createRetriableProxy() {\n+    try {\n+      // Create proxy that can retry exceptions properly.\n+      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n+      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n       T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n+          .getRMHAId(conf), ioe);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n          .getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "22/01/16 1:55 PM",
          "commitNameOld": "46e5ea81e0e41646ba02391aea31481ead28aaf8",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n-      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n-          throws IOException{\n-    if (HAUtil.isHAEnabled(conf)) {\n-      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n-          instance.createRMFailoverProxyProvider(conf, protocol);\n-      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n-    } else {\n-      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+  protected T createRetriableProxy() {\n+    try {\n+      // Create proxy that can retry exceptions properly.\n+      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n+      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n       T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n+          .getRMHAId(conf), ioe);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n          .getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
          "extendedDetails": {
            "oldValue": "createRMProxy",
            "newValue": "createRetriableProxy"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "22/01/16 1:55 PM",
          "commitNameOld": "46e5ea81e0e41646ba02391aea31481ead28aaf8",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n-      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n-          throws IOException{\n-    if (HAUtil.isHAEnabled(conf)) {\n-      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n-          instance.createRMFailoverProxyProvider(conf, protocol);\n-      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n-    } else {\n-      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+  protected T createRetriableProxy() {\n+    try {\n+      // Create proxy that can retry exceptions properly.\n+      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n+      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n       T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n       return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n+          .getRMHAId(conf), ioe);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected T createRetriableProxy() {\n    try {\n      // Create proxy that can retry exceptions properly.\n      RetryPolicy retryPolicy \u003d RMProxy.createRetryPolicy(conf, false);\n      InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    } catch (IOException ioe) {\n      LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil\n          .getRMHAId(conf), ioe);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RequestHedgingRMFailoverProxyProvider.java",
          "extendedDetails": {
            "oldValue": "[conf-YarnConfiguration(modifiers-final), protocol-Class\u003cT\u003e(modifiers-final), instance-RMProxy, retryPolicy-RetryPolicy]",
            "newValue": "[]"
          }
        }
      ]
    },
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4132. Separate configs for nodemanager to resourcemanager connection timeout and retries. Contributed by Chang Li\n",
      "commitDate": "24/11/15 2:35 PM",
      "commitName": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,14 @@\n+  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n+      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n+          throws IOException{\n+    if (HAUtil.isHAEnabled(conf)) {\n+      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n+          instance.createRMFailoverProxyProvider(conf, protocol);\n+      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n+    } else {\n+      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n+      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n+      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n+      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static \u003cT\u003e T createRMProxy(final YarnConfiguration conf,\n      final Class\u003cT\u003e protocol, RMProxy instance, RetryPolicy retryPolicy)\n          throws IOException{\n    if (HAUtil.isHAEnabled(conf)) {\n      RMFailoverProxyProvider\u003cT\u003e provider \u003d\n          instance.createRMFailoverProxyProvider(conf, protocol);\n      return (T) RetryProxy.create(protocol, provider, retryPolicy);\n    } else {\n      InetSocketAddress rmAddress \u003d instance.getRMAddress(conf, protocol);\n      LOG.info(\"Connecting to ResourceManager at \" + rmAddress);\n      T proxy \u003d RMProxy.\u003cT\u003egetProxy(conf, protocol, rmAddress);\n      return (T) RetryProxy.create(protocol, proxy, retryPolicy);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java"
    }
  }
}