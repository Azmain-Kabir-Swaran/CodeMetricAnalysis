{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "canAssign",
  "functionId": "canAssign___clusterResource-Resource__node-FiCaSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 719,
  "functionEndLine": 746,
  "numCommitsSeen": 129,
  "timeTaken": 11539,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 209.05,
      "commitsBetweenForRepo": 935,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n     // When node \u003d\u003d null means global scheduling is enabled, always return true\n     if (null \u003d\u003d node) {\n       return true;\n     }\n \n     // Two conditions need to meet when trying to allocate:\n     // 1) Node doesn\u0027t have reserved container\n     // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n     boolean accept \u003d node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources\n         .greaterThanOrEqual(resourceCalculator, clusterResource, Resources\n             .add(node.getUnallocatedResource(),\n                 node.getTotalKillableResources()), minimumAllocation);\n     if (!accept) {\n       ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, node,\n-          getParentName(), getQueueName(), ActivityState.REJECTED,\n+          getParentName(), getQueuePath(), ActivityState.REJECTED,\n           () -\u003e node.getReservedContainer() !\u003d null ?\n               ActivityDiagnosticConstant.\n                   QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESERVED :\n               ActivityDiagnosticConstant.\n                   QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESOURCE_INSUFFICIENT);\n       if (rootQueue) {\n         ActivitiesLogger.NODE.finishSkippedNodeAllocation(activitiesManager,\n             node);\n       }\n     }\n     return accept;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    // When node \u003d\u003d null means global scheduling is enabled, always return true\n    if (null \u003d\u003d node) {\n      return true;\n    }\n\n    // Two conditions need to meet when trying to allocate:\n    // 1) Node doesn\u0027t have reserved container\n    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n    boolean accept \u003d node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources\n        .greaterThanOrEqual(resourceCalculator, clusterResource, Resources\n            .add(node.getUnallocatedResource(),\n                node.getTotalKillableResources()), minimumAllocation);\n    if (!accept) {\n      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, node,\n          getParentName(), getQueuePath(), ActivityState.REJECTED,\n          () -\u003e node.getReservedContainer() !\u003d null ?\n              ActivityDiagnosticConstant.\n                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESERVED :\n              ActivityDiagnosticConstant.\n                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESOURCE_INSUFFICIENT);\n      if (rootQueue) {\n        ActivitiesLogger.NODE.finishSkippedNodeAllocation(activitiesManager,\n            node);\n      }\n    }\n    return accept;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "26/08/19 8:36 AM",
      "commitNameOld": "689d2e61058b5f719c6cbe9897a72b19b44a29a3",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,28 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n     // When node \u003d\u003d null means global scheduling is enabled, always return true\n     if (null \u003d\u003d node) {\n       return true;\n     }\n \n     // Two conditions need to meet when trying to allocate:\n     // 1) Node doesn\u0027t have reserved container\n     // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n-    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n-        resourceCalculator, clusterResource, Resources\n+    boolean accept \u003d node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources\n+        .greaterThanOrEqual(resourceCalculator, clusterResource, Resources\n             .add(node.getUnallocatedResource(),\n                 node.getTotalKillableResources()), minimumAllocation);\n+    if (!accept) {\n+      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, node,\n+          getParentName(), getQueueName(), ActivityState.REJECTED,\n+          () -\u003e node.getReservedContainer() !\u003d null ?\n+              ActivityDiagnosticConstant.\n+                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESERVED :\n+              ActivityDiagnosticConstant.\n+                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESOURCE_INSUFFICIENT);\n+      if (rootQueue) {\n+        ActivitiesLogger.NODE.finishSkippedNodeAllocation(activitiesManager,\n+            node);\n+      }\n+    }\n+    return accept;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    // When node \u003d\u003d null means global scheduling is enabled, always return true\n    if (null \u003d\u003d node) {\n      return true;\n    }\n\n    // Two conditions need to meet when trying to allocate:\n    // 1) Node doesn\u0027t have reserved container\n    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n    boolean accept \u003d node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources\n        .greaterThanOrEqual(resourceCalculator, clusterResource, Resources\n            .add(node.getUnallocatedResource(),\n                node.getTotalKillableResources()), minimumAllocation);\n    if (!accept) {\n      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, node,\n          getParentName(), getQueueName(), ActivityState.REJECTED,\n          () -\u003e node.getReservedContainer() !\u003d null ?\n              ActivityDiagnosticConstant.\n                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESERVED :\n              ActivityDiagnosticConstant.\n                  QUEUE_SKIPPED_BECAUSE_SINGLE_NODE_RESOURCE_INSUFFICIENT);\n      if (rootQueue) {\n        ActivitiesLogger.NODE.finishSkippedNodeAllocation(activitiesManager,\n            node);\n      }\n    }\n    return accept;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/10/16 10:30 AM",
      "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 10.03,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,14 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n+    // When node \u003d\u003d null means global scheduling is enabled, always return true\n+    if (null \u003d\u003d node) {\n+      return true;\n+    }\n+\n     // Two conditions need to meet when trying to allocate:\n     // 1) Node doesn\u0027t have reserved container\n     // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n     return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n         resourceCalculator, clusterResource, Resources\n-            .add(node.getUnallocatedResource(), node.getTotalKillableResources()),\n-        minimumAllocation);\n+            .add(node.getUnallocatedResource(),\n+                node.getTotalKillableResources()), minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    // When node \u003d\u003d null means global scheduling is enabled, always return true\n    if (null \u003d\u003d node) {\n      return true;\n    }\n\n    // Two conditions need to meet when trying to allocate:\n    // 1) Node doesn\u0027t have reserved container\n    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n        resourceCalculator, clusterResource, Resources\n            .add(node.getUnallocatedResource(),\n                node.getTotalKillableResources()), minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,9 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n-    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n-        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n-            node.getUnallocatedResource(), minimumAllocation);\n+    // Two conditions need to meet when trying to allocate:\n+    // 1) Node doesn\u0027t have reserved container\n+    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n+    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n+        resourceCalculator, clusterResource, Resources\n+            .add(node.getUnallocatedResource(), node.getTotalKillableResources()),\n+        minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    // Two conditions need to meet when trying to allocate:\n    // 1) Node doesn\u0027t have reserved container\n    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n        resourceCalculator, clusterResource, Resources\n            .add(node.getUnallocatedResource(), node.getTotalKillableResources()),\n        minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,5 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n-    // Two conditions need to meet when trying to allocate:\n-    // 1) Node doesn\u0027t have reserved container\n-    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n-    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n-        resourceCalculator, clusterResource, Resources\n-            .add(node.getUnallocatedResource(), node.getTotalKillableResources()),\n-        minimumAllocation);\n+    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n+        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n+            node.getUnallocatedResource(), minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n            node.getUnallocatedResource(), minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.27,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,9 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n-    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n-        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n-            node.getUnallocatedResource(), minimumAllocation);\n+    // Two conditions need to meet when trying to allocate:\n+    // 1) Node doesn\u0027t have reserved container\n+    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n+    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n+        resourceCalculator, clusterResource, Resources\n+            .add(node.getUnallocatedResource(), node.getTotalKillableResources()),\n+        minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    // Two conditions need to meet when trying to allocate:\n    // 1) Node doesn\u0027t have reserved container\n    // 2) Node\u0027s available-resource + killable-resource should \u003e 0\n    return node.getReservedContainer() \u003d\u003d null \u0026\u0026 Resources.greaterThanOrEqual(\n        resourceCalculator, clusterResource, Resources\n            .add(node.getUnallocatedResource(), node.getTotalKillableResources()),\n        minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "28/01/16 2:51 PM",
      "commitNameOld": "7f46636495e23693d588b0915f464fa7afd9102e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.78,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n     return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n         Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n-            node.getAvailableResource(), minimumAllocation);\n+            node.getUnallocatedResource(), minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n            node.getUnallocatedResource(), minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/01/13 9:08 PM",
          "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "31/10/12 9:56 AM",
          "commitNameOld": "ab8fa651f736525c8e40229ee99859cee9c1ba33",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 69.51,
          "commitsBetweenForRepo": 290,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  private boolean canAssign(FiCaSchedulerNode node) {\n+  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n     return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n-        Resources.greaterThanOrEqual(node.getAvailableResource(), \n-                                     minimumAllocation);\n+        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n+            node.getAvailableResource(), minimumAllocation);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n            node.getAvailableResource(), minimumAllocation);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[node-FiCaSchedulerNode]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/01/13 9:08 PM",
          "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "31/10/12 9:56 AM",
          "commitNameOld": "ab8fa651f736525c8e40229ee99859cee9c1ba33",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 69.51,
          "commitsBetweenForRepo": 290,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  private boolean canAssign(FiCaSchedulerNode node) {\n+  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n     return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n-        Resources.greaterThanOrEqual(node.getAvailableResource(), \n-                                     minimumAllocation);\n+        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n+            node.getAvailableResource(), minimumAllocation);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean canAssign(Resource clusterResource, FiCaSchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(resourceCalculator, clusterResource, \n            node.getAvailableResource(), minimumAllocation);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean canAssign(FiCaSchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(node.getAvailableResource(), \n                                     minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "19/06/12 6:06 AM",
      "commitNameOld": "01b61c76a85858a0bc0cba24cc00f961affa4922",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 27.53,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n-  private boolean canAssign(SchedulerNode node) {\n+  private boolean canAssign(FiCaSchedulerNode node) {\n     return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n         Resources.greaterThanOrEqual(node.getAvailableResource(), \n                                      minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(FiCaSchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(node.getAvailableResource(), \n                                     minimumAllocation);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldValue": "[node-SchedulerNode]",
        "newValue": "[node-FiCaSchedulerNode]"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean canAssign(SchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(node.getAvailableResource(), \n                                     minimumAllocation);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,5 @@\n+  private boolean canAssign(SchedulerNode node) {\n+    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n+        Resources.greaterThanOrEqual(node.getAvailableResource(), \n+                                     minimumAllocation);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean canAssign(SchedulerNode node) {\n    return (node.getReservedContainer() \u003d\u003d null) \u0026\u0026 \n        Resources.greaterThanOrEqual(node.getAvailableResource(), \n                                     minimumAllocation);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}