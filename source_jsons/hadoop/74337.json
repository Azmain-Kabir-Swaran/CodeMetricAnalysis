{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslRpcClient.java",
  "functionName": "selectSaslClient",
  "functionId": "selectSaslClient___authTypes-List__SaslAuth__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
  "functionStartLine": 154,
  "functionEndLine": 187,
  "numCommitsSeen": 30,
  "timeTaken": 1375,
  "changeHistory": [
    "ff2b2bea9143c6299cad4bb7d1d049e415d2d7f3",
    "65be21267587f04a2c33af65b951211cc9085b15"
  ],
  "changeHistoryShort": {
    "ff2b2bea9143c6299cad4bb7d1d049e415d2d7f3": "Ybodychange",
    "65be21267587f04a2c33af65b951211cc9085b15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ff2b2bea9143c6299cad4bb7d1d049e415d2d7f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12385. Include nested stack trace in SaslRpcClient.getServerToken() (stevel)\n",
      "commitDate": "28/10/15 3:25 AM",
      "commitName": "ff2b2bea9143c6299cad4bb7d1d049e415d2d7f3",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "22/10/15 8:19 AM",
      "commitNameOld": "4c0bae240bea9a475e8ee9a0b081bfce6d1cd1e5",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private SaslAuth selectSaslClient(List\u003cSaslAuth\u003e authTypes)\n       throws SaslException, AccessControlException, IOException {\n     SaslAuth selectedAuthType \u003d null;\n     boolean switchToSimple \u003d false;\n     for (SaslAuth authType : authTypes) {\n       if (!isValidAuthType(authType)) {\n         continue; // don\u0027t know what it is, try next\n       }\n       AuthMethod authMethod \u003d AuthMethod.valueOf(authType.getMethod());\n       if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n         switchToSimple \u003d true;\n       } else {\n         saslClient \u003d createSaslClient(authType);\n         if (saslClient \u003d\u003d null) { // client lacks credentials, try next\n           continue;\n         }\n       }\n       selectedAuthType \u003d authType;\n       break;\n     }\n     if (saslClient \u003d\u003d null \u0026\u0026 !switchToSimple) {\n       List\u003cString\u003e serverAuthMethods \u003d new ArrayList\u003cString\u003e();\n       for (SaslAuth authType : authTypes) {\n         serverAuthMethods.add(authType.getMethod());\n       }\n       throw new AccessControlException(\n           \"Client cannot authenticate via:\" + serverAuthMethods);\n     }\n-    if (LOG.isDebugEnabled()) {\n+    if (LOG.isDebugEnabled() \u0026\u0026 selectedAuthType !\u003d null) {\n       LOG.debug(\"Use \" + selectedAuthType.getMethod() +\n           \" authentication for protocol \" + protocol.getSimpleName());\n     }\n     return selectedAuthType;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private SaslAuth selectSaslClient(List\u003cSaslAuth\u003e authTypes)\n      throws SaslException, AccessControlException, IOException {\n    SaslAuth selectedAuthType \u003d null;\n    boolean switchToSimple \u003d false;\n    for (SaslAuth authType : authTypes) {\n      if (!isValidAuthType(authType)) {\n        continue; // don\u0027t know what it is, try next\n      }\n      AuthMethod authMethod \u003d AuthMethod.valueOf(authType.getMethod());\n      if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n        switchToSimple \u003d true;\n      } else {\n        saslClient \u003d createSaslClient(authType);\n        if (saslClient \u003d\u003d null) { // client lacks credentials, try next\n          continue;\n        }\n      }\n      selectedAuthType \u003d authType;\n      break;\n    }\n    if (saslClient \u003d\u003d null \u0026\u0026 !switchToSimple) {\n      List\u003cString\u003e serverAuthMethods \u003d new ArrayList\u003cString\u003e();\n      for (SaslAuth authType : authTypes) {\n        serverAuthMethods.add(authType.getMethod());\n      }\n      throw new AccessControlException(\n          \"Client cannot authenticate via:\" + serverAuthMethods);\n    }\n    if (LOG.isDebugEnabled() \u0026\u0026 selectedAuthType !\u003d null) {\n      LOG.debug(\"Use \" + selectedAuthType.getMethod() +\n          \" authentication for protocol \" + protocol.getSimpleName());\n    }\n    return selectedAuthType;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
      "extendedDetails": {}
    },
    "65be21267587f04a2c33af65b951211cc9085b15": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9698. [RPC v9] Client must honor server\u0027s SASL negotiate response (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 7:44 AM",
      "commitName": "65be21267587f04a2c33af65b951211cc9085b15",
      "commitAuthor": "Daryn Sharp",
      "diff": "@@ -0,0 +1,34 @@\n+  private SaslAuth selectSaslClient(List\u003cSaslAuth\u003e authTypes)\n+      throws SaslException, AccessControlException, IOException {\n+    SaslAuth selectedAuthType \u003d null;\n+    boolean switchToSimple \u003d false;\n+    for (SaslAuth authType : authTypes) {\n+      if (!isValidAuthType(authType)) {\n+        continue; // don\u0027t know what it is, try next\n+      }\n+      AuthMethod authMethod \u003d AuthMethod.valueOf(authType.getMethod());\n+      if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n+        switchToSimple \u003d true;\n+      } else {\n+        saslClient \u003d createSaslClient(authType);\n+        if (saslClient \u003d\u003d null) { // client lacks credentials, try next\n+          continue;\n+        }\n+      }\n+      selectedAuthType \u003d authType;\n+      break;\n+    }\n+    if (saslClient \u003d\u003d null \u0026\u0026 !switchToSimple) {\n+      List\u003cString\u003e serverAuthMethods \u003d new ArrayList\u003cString\u003e();\n+      for (SaslAuth authType : authTypes) {\n+        serverAuthMethods.add(authType.getMethod());\n+      }\n+      throw new AccessControlException(\n+          \"Client cannot authenticate via:\" + serverAuthMethods);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Use \" + selectedAuthType.getMethod() +\n+          \" authentication for protocol \" + protocol.getSimpleName());\n+    }\n+    return selectedAuthType;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private SaslAuth selectSaslClient(List\u003cSaslAuth\u003e authTypes)\n      throws SaslException, AccessControlException, IOException {\n    SaslAuth selectedAuthType \u003d null;\n    boolean switchToSimple \u003d false;\n    for (SaslAuth authType : authTypes) {\n      if (!isValidAuthType(authType)) {\n        continue; // don\u0027t know what it is, try next\n      }\n      AuthMethod authMethod \u003d AuthMethod.valueOf(authType.getMethod());\n      if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n        switchToSimple \u003d true;\n      } else {\n        saslClient \u003d createSaslClient(authType);\n        if (saslClient \u003d\u003d null) { // client lacks credentials, try next\n          continue;\n        }\n      }\n      selectedAuthType \u003d authType;\n      break;\n    }\n    if (saslClient \u003d\u003d null \u0026\u0026 !switchToSimple) {\n      List\u003cString\u003e serverAuthMethods \u003d new ArrayList\u003cString\u003e();\n      for (SaslAuth authType : authTypes) {\n        serverAuthMethods.add(authType.getMethod());\n      }\n      throw new AccessControlException(\n          \"Client cannot authenticate via:\" + serverAuthMethods);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Use \" + selectedAuthType.getMethod() +\n          \" authentication for protocol \" + protocol.getSimpleName());\n    }\n    return selectedAuthType;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java"
    }
  }
}