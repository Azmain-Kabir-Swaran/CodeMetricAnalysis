{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "execContainer",
  "functionId": "execContainer___ctx-ContainerExecContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 1010,
  "functionEndLine": 1046,
  "numCommitsSeen": 91,
  "timeTaken": 1787,
  "changeHistory": [
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
    "1f9c4f32e842529be5980e395587f135452372bb"
  ],
  "changeHistoryShort": {
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d": "Ybodychange",
    "1f9c4f32e842529be5980e395587f135452372bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9032. Support sh shell for interactive container shell at command line. Contributed by Eric Yang\n",
      "commitDate": "14/12/18 2:08 PM",
      "commitName": "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "28/11/18 3:03 PM",
      "commitNameOld": "fe7dab8ef55f08cf18c2d62c782c1ab8930a5a15",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.96,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,37 @@\n   public IOStreamPair execContainer(ContainerExecContext ctx)\n       throws ContainerExecutionException {\n     String containerId \u003d ctx.getContainer().getContainerId().toString();\n     DockerExecCommand dockerExecCommand \u003d new DockerExecCommand(containerId);\n     dockerExecCommand.setInteractive();\n     dockerExecCommand.setTTY();\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n-    command.add(\"bash\");\n+    StringBuilder sb \u003d new StringBuilder();\n+    sb.append(\"/bin/\");\n+    sb.append(ctx.getShell());\n+    command.add(sb.toString());\n+    command.add(\"-i\");\n     dockerExecCommand.setOverrideCommandWithArgs(command);\n     String commandFile \u003d dockerClient.writeCommandToTempFile(dockerExecCommand,\n         ContainerId.fromString(containerId), nmContext);\n     PrivilegedOperation privOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.EXEC_CONTAINER);\n     privOp.appendArgs(commandFile);\n     privOp.disableFailureLogging();\n \n     IOStreamPair output;\n     try {\n       output \u003d\n           privilegedOperationExecutor.executePrivilegedInteractiveOperation(\n               null, privOp);\n       LOG.info(\"ContainerId\u003d\" + containerId + \", docker exec output for \"\n           + dockerExecCommand + \": \" + output);\n     } catch (PrivilegedOperationException e) {\n       throw new ContainerExecutionException(\n           \"Execute container interactive shell failed\", e.getExitCode(),\n           e.getOutput(), e.getErrorOutput());\n     } catch (InterruptedException ie) {\n       LOG.warn(\"InterruptedException executing command: \", ie);\n       throw new ContainerExecutionException(ie.getMessage());\n     }\n     return output;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IOStreamPair execContainer(ContainerExecContext ctx)\n      throws ContainerExecutionException {\n    String containerId \u003d ctx.getContainer().getContainerId().toString();\n    DockerExecCommand dockerExecCommand \u003d new DockerExecCommand(containerId);\n    dockerExecCommand.setInteractive();\n    dockerExecCommand.setTTY();\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(\"/bin/\");\n    sb.append(ctx.getShell());\n    command.add(sb.toString());\n    command.add(\"-i\");\n    dockerExecCommand.setOverrideCommandWithArgs(command);\n    String commandFile \u003d dockerClient.writeCommandToTempFile(dockerExecCommand,\n        ContainerId.fromString(containerId), nmContext);\n    PrivilegedOperation privOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.EXEC_CONTAINER);\n    privOp.appendArgs(commandFile);\n    privOp.disableFailureLogging();\n\n    IOStreamPair output;\n    try {\n      output \u003d\n          privilegedOperationExecutor.executePrivilegedInteractiveOperation(\n              null, privOp);\n      LOG.info(\"ContainerId\u003d\" + containerId + \", docker exec output for \"\n          + dockerExecCommand + \": \" + output);\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\n          \"Execute container interactive shell failed\", e.getExitCode(),\n          e.getOutput(), e.getErrorOutput());\n    } catch (InterruptedException ie) {\n      LOG.warn(\"InterruptedException executing command: \", ie);\n      throw new ContainerExecutionException(ie.getMessage());\n    }\n    return output;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "1f9c4f32e842529be5980e395587f135452372bb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8776. Implement Container Exec feature in LinuxContainerExecutor. Contributed by Eric Yang\n",
      "commitDate": "12/11/18 10:42 AM",
      "commitName": "1f9c4f32e842529be5980e395587f135452372bb",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,33 @@\n+  public IOStreamPair execContainer(ContainerExecContext ctx)\n+      throws ContainerExecutionException {\n+    String containerId \u003d ctx.getContainer().getContainerId().toString();\n+    DockerExecCommand dockerExecCommand \u003d new DockerExecCommand(containerId);\n+    dockerExecCommand.setInteractive();\n+    dockerExecCommand.setTTY();\n+    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n+    command.add(\"bash\");\n+    dockerExecCommand.setOverrideCommandWithArgs(command);\n+    String commandFile \u003d dockerClient.writeCommandToTempFile(dockerExecCommand,\n+        ContainerId.fromString(containerId), nmContext);\n+    PrivilegedOperation privOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.EXEC_CONTAINER);\n+    privOp.appendArgs(commandFile);\n+    privOp.disableFailureLogging();\n+\n+    IOStreamPair output;\n+    try {\n+      output \u003d\n+          privilegedOperationExecutor.executePrivilegedInteractiveOperation(\n+              null, privOp);\n+      LOG.info(\"ContainerId\u003d\" + containerId + \", docker exec output for \"\n+          + dockerExecCommand + \": \" + output);\n+    } catch (PrivilegedOperationException e) {\n+      throw new ContainerExecutionException(\n+          \"Execute container interactive shell failed\", e.getExitCode(),\n+          e.getOutput(), e.getErrorOutput());\n+    } catch (InterruptedException ie) {\n+      LOG.warn(\"InterruptedException executing command: \", ie);\n+      throw new ContainerExecutionException(ie.getMessage());\n+    }\n+    return output;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public IOStreamPair execContainer(ContainerExecContext ctx)\n      throws ContainerExecutionException {\n    String containerId \u003d ctx.getContainer().getContainerId().toString();\n    DockerExecCommand dockerExecCommand \u003d new DockerExecCommand(containerId);\n    dockerExecCommand.setInteractive();\n    dockerExecCommand.setTTY();\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    command.add(\"bash\");\n    dockerExecCommand.setOverrideCommandWithArgs(command);\n    String commandFile \u003d dockerClient.writeCommandToTempFile(dockerExecCommand,\n        ContainerId.fromString(containerId), nmContext);\n    PrivilegedOperation privOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.EXEC_CONTAINER);\n    privOp.appendArgs(commandFile);\n    privOp.disableFailureLogging();\n\n    IOStreamPair output;\n    try {\n      output \u003d\n          privilegedOperationExecutor.executePrivilegedInteractiveOperation(\n              null, privOp);\n      LOG.info(\"ContainerId\u003d\" + containerId + \", docker exec output for \"\n          + dockerExecCommand + \": \" + output);\n    } catch (PrivilegedOperationException e) {\n      throw new ContainerExecutionException(\n          \"Execute container interactive shell failed\", e.getExitCode(),\n          e.getOutput(), e.getErrorOutput());\n    } catch (InterruptedException ie) {\n      LOG.warn(\"InterruptedException executing command: \", ie);\n      throw new ContainerExecutionException(ie.getMessage());\n    }\n    return output;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}