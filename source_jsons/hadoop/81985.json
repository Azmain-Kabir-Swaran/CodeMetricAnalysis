{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationClassLoader.java",
  "functionName": "loadClass",
  "functionId": "loadClass___name-String__resolve-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java",
  "functionStartLine": 161,
  "functionEndLine": 204,
  "numCommitsSeen": 11,
  "timeTaken": 1606,
  "changeHistory": [
    "ccaf036662e22da14583942054898c99fa51dae5",
    "da4ba50269254456650c08c739f2b394d1182ee4",
    "d6143a5b3177e81056a319cb605e4a90063b1401"
  ],
  "changeHistoryShort": {
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "da4ba50269254456650c08c739f2b394d1182ee4": "Ymovefromfile",
    "d6143a5b3177e81056a319cb605e4a90063b1401": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/08/16 5:34 PM",
      "commitNameOld": "0ad48aa2c8f41196743305c711ea19cc48f186da",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 343.17,
      "commitsBetweenForRepo": 2025,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   protected synchronized Class\u003c?\u003e loadClass(String name, boolean resolve)\n       throws ClassNotFoundException {\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Loading class: \" + name);\n     }\n \n     Class\u003c?\u003e c \u003d findLoadedClass(name);\n     ClassNotFoundException ex \u003d null;\n \n     if (c \u003d\u003d null \u0026\u0026 !isSystemClass(name, systemClasses)) {\n       // Try to load class from this classloader\u0027s URLs. Note that this is like\n       // the servlet spec, not the usual Java 2 behaviour where we ask the\n       // parent to attempt to load first.\n       try {\n         c \u003d findClass(name);\n         if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n           LOG.debug(\"Loaded class: \" + name + \" \");\n         }\n       } catch (ClassNotFoundException e) {\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(e);\n+          LOG.debug(e.toString());\n         }\n         ex \u003d e;\n       }\n     }\n \n     if (c \u003d\u003d null) { // try parent\n       c \u003d parent.loadClass(name);\n       if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n         LOG.debug(\"Loaded class from parent: \" + name + \" \");\n       }\n     }\n \n     if (c \u003d\u003d null) {\n       throw ex !\u003d null ? ex : new ClassNotFoundException(name);\n     }\n \n     if (resolve) {\n       resolveClass(c);\n     }\n \n     return c;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Class\u003c?\u003e loadClass(String name, boolean resolve)\n      throws ClassNotFoundException {\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Loading class: \" + name);\n    }\n\n    Class\u003c?\u003e c \u003d findLoadedClass(name);\n    ClassNotFoundException ex \u003d null;\n\n    if (c \u003d\u003d null \u0026\u0026 !isSystemClass(name, systemClasses)) {\n      // Try to load class from this classloader\u0027s URLs. Note that this is like\n      // the servlet spec, not the usual Java 2 behaviour where we ask the\n      // parent to attempt to load first.\n      try {\n        c \u003d findClass(name);\n        if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n          LOG.debug(\"Loaded class: \" + name + \" \");\n        }\n      } catch (ClassNotFoundException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(e.toString());\n        }\n        ex \u003d e;\n      }\n    }\n\n    if (c \u003d\u003d null) { // try parent\n      c \u003d parent.loadClass(name);\n      if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n        LOG.debug(\"Loaded class from parent: \" + name + \" \");\n      }\n    }\n\n    if (c \u003d\u003d null) {\n      throw ex !\u003d null ? ex : new ClassNotFoundException(name);\n    }\n\n    if (resolve) {\n      resolveClass(c);\n    }\n\n    return c;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java",
      "extendedDetails": {}
    },
    "da4ba50269254456650c08c739f2b394d1182ee4": {
      "type": "Ymovefromfile",
      "commitMessage": "HADOOP-10893. isolated classloader on the client side. Contributed by Sangjin Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619604 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/14 2:38 PM",
      "commitName": "da4ba50269254456650c08c739f2b394d1182ee4",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "21/08/14 2:33 PM",
      "commitNameOld": "cbbb899aedacd59040f55ac5ed911c1e62bf3879",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected synchronized Class\u003c?\u003e loadClass(String name, boolean resolve)\n      throws ClassNotFoundException {\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Loading class: \" + name);\n    }\n\n    Class\u003c?\u003e c \u003d findLoadedClass(name);\n    ClassNotFoundException ex \u003d null;\n\n    if (c \u003d\u003d null \u0026\u0026 !isSystemClass(name, systemClasses)) {\n      // Try to load class from this classloader\u0027s URLs. Note that this is like\n      // the servlet spec, not the usual Java 2 behaviour where we ask the\n      // parent to attempt to load first.\n      try {\n        c \u003d findClass(name);\n        if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n          LOG.debug(\"Loaded class: \" + name + \" \");\n        }\n      } catch (ClassNotFoundException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(e);\n        }\n        ex \u003d e;\n      }\n    }\n\n    if (c \u003d\u003d null) { // try parent\n      c \u003d parent.loadClass(name);\n      if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n        LOG.debug(\"Loaded class from parent: \" + name + \" \");\n      }\n    }\n\n    if (c \u003d\u003d null) {\n      throw ex !\u003d null ? ex : new ClassNotFoundException(name);\n    }\n\n    if (resolve) {\n      resolveClass(c);\n    }\n\n    return c;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ApplicationClassLoader.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java",
        "oldMethodName": "loadClass",
        "newMethodName": "loadClass"
      }
    },
    "d6143a5b3177e81056a319cb605e4a90063b1401": {
      "type": "Yintroduced",
      "commitMessage": "YARN-286. Add a YARN ApplicationClassLoader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1428781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 3:00 AM",
      "commitName": "d6143a5b3177e81056a319cb605e4a90063b1401",
      "commitAuthor": "Thomas White",
      "diff": "@@ -0,0 +1,44 @@\n+  protected synchronized Class\u003c?\u003e loadClass(String name, boolean resolve)\n+      throws ClassNotFoundException {\n+    \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Loading class: \" + name);\n+    }\n+\n+    Class\u003c?\u003e c \u003d findLoadedClass(name);\n+    ClassNotFoundException ex \u003d null;\n+\n+    if (c \u003d\u003d null \u0026\u0026 !isSystemClass(name, systemClasses)) {\n+      // Try to load class from this classloader\u0027s URLs. Note that this is like\n+      // the servlet spec, not the usual Java 2 behaviour where we ask the\n+      // parent to attempt to load first.\n+      try {\n+        c \u003d findClass(name);\n+        if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n+          LOG.debug(\"Loaded class: \" + name + \" \");\n+        }\n+      } catch (ClassNotFoundException e) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(e);\n+        }\n+        ex \u003d e;\n+      }\n+    }\n+\n+    if (c \u003d\u003d null) { // try parent\n+      c \u003d parent.loadClass(name);\n+      if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n+        LOG.debug(\"Loaded class from parent: \" + name + \" \");\n+      }\n+    }\n+\n+    if (c \u003d\u003d null) {\n+      throw ex !\u003d null ? ex : new ClassNotFoundException(name);\n+    }\n+\n+    if (resolve) {\n+      resolveClass(c);\n+    }\n+\n+    return c;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Class\u003c?\u003e loadClass(String name, boolean resolve)\n      throws ClassNotFoundException {\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Loading class: \" + name);\n    }\n\n    Class\u003c?\u003e c \u003d findLoadedClass(name);\n    ClassNotFoundException ex \u003d null;\n\n    if (c \u003d\u003d null \u0026\u0026 !isSystemClass(name, systemClasses)) {\n      // Try to load class from this classloader\u0027s URLs. Note that this is like\n      // the servlet spec, not the usual Java 2 behaviour where we ask the\n      // parent to attempt to load first.\n      try {\n        c \u003d findClass(name);\n        if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n          LOG.debug(\"Loaded class: \" + name + \" \");\n        }\n      } catch (ClassNotFoundException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(e);\n        }\n        ex \u003d e;\n      }\n    }\n\n    if (c \u003d\u003d null) { // try parent\n      c \u003d parent.loadClass(name);\n      if (LOG.isDebugEnabled() \u0026\u0026 c !\u003d null) {\n        LOG.debug(\"Loaded class from parent: \" + name + \" \");\n      }\n    }\n\n    if (c \u003d\u003d null) {\n      throw ex !\u003d null ? ex : new ClassNotFoundException(name);\n    }\n\n    if (resolve) {\n      resolveClass(c);\n    }\n\n    return c;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ApplicationClassLoader.java"
    }
  }
}