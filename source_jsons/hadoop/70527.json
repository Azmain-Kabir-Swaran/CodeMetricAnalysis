{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PageBlobInputStream.java",
  "functionName": "skipWithinBuffer",
  "functionId": "skipWithinBuffer___n-long",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java",
  "functionStartLine": 404,
  "functionEndLine": 442,
  "numCommitsSeen": 5,
  "timeTaken": 1572,
  "changeHistory": [
    "5b11b9fd413470e134ecdc7c50468f8c7b39fa50",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40"
  ],
  "changeHistoryShort": {
    "5b11b9fd413470e134ecdc7c50468f8c7b39fa50": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5b11b9fd413470e134ecdc7c50468f8c7b39fa50": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. WASB: PageBlobInputStream.skip breaks HBASE replication.\nContributed by Thomas Marquardt\n",
      "commitDate": "07/05/18 3:54 AM",
      "commitName": "5b11b9fd413470e134ecdc7c50468f8c7b39fa50",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/11/17 3:52 AM",
      "commitNameOld": "0ea182d0faa35c726dcb37249d48786bfc8ca04c",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 159.96,
      "commitsBetweenForRepo": 1638,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private long skipWithinBuffer(long n) throws IOException {\n     if (!dataAvailableInBuffer()) {\n       return 0;\n     }\n     long skipped \u003d 0;\n     // First skip within the current page.\n     skipped \u003d skipWithinCurrentPage(n);\n     if (skipped \u003e n) {\n       throw new AssertionError(String.format(\n           \"Bug in skipWithinCurrentPage: it skipped over %d bytes when asked\" \n           + \" to skip %d bytes.\", skipped, n));\n     }\n     n -\u003d skipped;\n     if (n \u003d\u003d 0 || !dataAvailableInBuffer()) {\n       return skipped;\n     }\n \n     // Calculate how many whole pages (pages before the possibly partially\n     // filled last page) remain.\n-    int currentPageIndex \u003d currentOffsetInBuffer / PAGE_SIZE;\n+    int currentPageIndex \u003d currentBufferOffset / PAGE_SIZE;\n     int numberOfPagesInBuffer \u003d currentBuffer.length / PAGE_SIZE;\n     int wholePagesRemaining \u003d numberOfPagesInBuffer - currentPageIndex - 1;\n \n     if (n \u003c (PAGE_DATA_SIZE * wholePagesRemaining)) {\n       // I\u0027m within one of the whole pages remaining, skip in there.\n       advancePagesInBuffer((int) (n / PAGE_DATA_SIZE));\n-      currentOffsetInBuffer +\u003d n % PAGE_DATA_SIZE;\n+      currentBufferOffset +\u003d n % PAGE_DATA_SIZE;\n       return n + skipped;\n     }\n \n     // Skip over the whole pages.\n     advancePagesInBuffer(wholePagesRemaining);\n     skipped +\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n     n -\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n \n     // At this point we know we need to skip to somewhere in the last page,\n     // or just go to the end.\n     return skipWithinCurrentPage(n) + skipped;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long skipWithinBuffer(long n) throws IOException {\n    if (!dataAvailableInBuffer()) {\n      return 0;\n    }\n    long skipped \u003d 0;\n    // First skip within the current page.\n    skipped \u003d skipWithinCurrentPage(n);\n    if (skipped \u003e n) {\n      throw new AssertionError(String.format(\n          \"Bug in skipWithinCurrentPage: it skipped over %d bytes when asked\" \n          + \" to skip %d bytes.\", skipped, n));\n    }\n    n -\u003d skipped;\n    if (n \u003d\u003d 0 || !dataAvailableInBuffer()) {\n      return skipped;\n    }\n\n    // Calculate how many whole pages (pages before the possibly partially\n    // filled last page) remain.\n    int currentPageIndex \u003d currentBufferOffset / PAGE_SIZE;\n    int numberOfPagesInBuffer \u003d currentBuffer.length / PAGE_SIZE;\n    int wholePagesRemaining \u003d numberOfPagesInBuffer - currentPageIndex - 1;\n\n    if (n \u003c (PAGE_DATA_SIZE * wholePagesRemaining)) {\n      // I\u0027m within one of the whole pages remaining, skip in there.\n      advancePagesInBuffer((int) (n / PAGE_DATA_SIZE));\n      currentBufferOffset +\u003d n % PAGE_DATA_SIZE;\n      return n + skipped;\n    }\n\n    // Skip over the whole pages.\n    advancePagesInBuffer(wholePagesRemaining);\n    skipped +\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n    n -\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n\n    // At this point we know we need to skip to somewhere in the last page,\n    // or just go to the end.\n    return skipWithinCurrentPage(n) + skipped;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,39 @@\n+  private long skipWithinBuffer(long n) throws IOException {\n+    if (!dataAvailableInBuffer()) {\n+      return 0;\n+    }\n+    long skipped \u003d 0;\n+    // First skip within the current page.\n+    skipped \u003d skipWithinCurrentPage(n);\n+    if (skipped \u003e n) {\n+      throw new AssertionError(String.format(\n+          \"Bug in skipWithinCurrentPage: it skipped over %d bytes when asked\" \n+          + \" to skip %d bytes.\", skipped, n));\n+    }\n+    n -\u003d skipped;\n+    if (n \u003d\u003d 0 || !dataAvailableInBuffer()) {\n+      return skipped;\n+    }\n+\n+    // Calculate how many whole pages (pages before the possibly partially\n+    // filled last page) remain.\n+    int currentPageIndex \u003d currentOffsetInBuffer / PAGE_SIZE;\n+    int numberOfPagesInBuffer \u003d currentBuffer.length / PAGE_SIZE;\n+    int wholePagesRemaining \u003d numberOfPagesInBuffer - currentPageIndex - 1;\n+\n+    if (n \u003c (PAGE_DATA_SIZE * wholePagesRemaining)) {\n+      // I\u0027m within one of the whole pages remaining, skip in there.\n+      advancePagesInBuffer((int) (n / PAGE_DATA_SIZE));\n+      currentOffsetInBuffer +\u003d n % PAGE_DATA_SIZE;\n+      return n + skipped;\n+    }\n+\n+    // Skip over the whole pages.\n+    advancePagesInBuffer(wholePagesRemaining);\n+    skipped +\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n+    n -\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n+\n+    // At this point we know we need to skip to somewhere in the last page,\n+    // or just go to the end.\n+    return skipWithinCurrentPage(n) + skipped;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long skipWithinBuffer(long n) throws IOException {\n    if (!dataAvailableInBuffer()) {\n      return 0;\n    }\n    long skipped \u003d 0;\n    // First skip within the current page.\n    skipped \u003d skipWithinCurrentPage(n);\n    if (skipped \u003e n) {\n      throw new AssertionError(String.format(\n          \"Bug in skipWithinCurrentPage: it skipped over %d bytes when asked\" \n          + \" to skip %d bytes.\", skipped, n));\n    }\n    n -\u003d skipped;\n    if (n \u003d\u003d 0 || !dataAvailableInBuffer()) {\n      return skipped;\n    }\n\n    // Calculate how many whole pages (pages before the possibly partially\n    // filled last page) remain.\n    int currentPageIndex \u003d currentOffsetInBuffer / PAGE_SIZE;\n    int numberOfPagesInBuffer \u003d currentBuffer.length / PAGE_SIZE;\n    int wholePagesRemaining \u003d numberOfPagesInBuffer - currentPageIndex - 1;\n\n    if (n \u003c (PAGE_DATA_SIZE * wholePagesRemaining)) {\n      // I\u0027m within one of the whole pages remaining, skip in there.\n      advancePagesInBuffer((int) (n / PAGE_DATA_SIZE));\n      currentOffsetInBuffer +\u003d n % PAGE_DATA_SIZE;\n      return n + skipped;\n    }\n\n    // Skip over the whole pages.\n    advancePagesInBuffer(wholePagesRemaining);\n    skipped +\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n    n -\u003d wholePagesRemaining * PAGE_DATA_SIZE;\n\n    // At this point we know we need to skip to somewhere in the last page,\n    // or just go to the end.\n    return skipWithinCurrentPage(n) + skipped;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java"
    }
  }
}