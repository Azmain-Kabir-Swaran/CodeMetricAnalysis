{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BaileyBorweinPlouffe.java",
  "functionName": "compute",
  "functionId": "compute___startDigit-int__nDigits-int__nMaps-int__workingDir-String__conf-Configuration__out-PrintStream",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
  "functionStartLine": 348,
  "functionEndLine": 397,
  "numCommitsSeen": 11,
  "timeTaken": 5814,
  "changeHistory": [
    "b9db0afa1e65d0343ad4e5760c36e042a3e704b0",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b9db0afa1e65d0343ad4e5760c36e042a3e704b0": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b9db0afa1e65d0343ad4e5760c36e042a3e704b0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6964. BaileyBorweinPlouffe should use Time.monotonicNow for measuring durations. Contributed by Chetna Chaudhari\n",
      "commitDate": "21/09/17 7:37 AM",
      "commitName": "b9db0afa1e65d0343ad4e5760c36e042a3e704b0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "20/09/17 7:16 PM",
      "commitNameOld": "53047f934e3f81237ac9f0d75dddfc44862ef2d9",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private static void compute(int startDigit, int nDigits, int nMaps,\n       String workingDir, Configuration conf, PrintStream out\n       ) throws IOException {\n     final String name \u003d startDigit + \"_\" + nDigits;\n \n     //setup wroking directory\n     out.println(\"Working Directory \u003d \" + workingDir);\n     out.println();\n     final FileSystem fs \u003d FileSystem.get(conf);\n     final Path dir \u003d fs.makeQualified(new Path(workingDir));\n     if (fs.exists(dir)) {\n       throw new IOException(\"Working directory \" + dir\n           + \" already exists.  Please remove it first.\");\n     } else if (!fs.mkdirs(dir)) {\n       throw new IOException(\"Cannot create working directory \" + dir);\n     }\n \n     out.println(\"Start Digit      \u003d \" + startDigit);\n     out.println(\"Number of Digits \u003d \" + nDigits);\n     out.println(\"Number of Maps   \u003d \" + nMaps);\n \n     // setup a job\n     final Job job \u003d createJob(name, conf);\n     final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n     FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n \n     // setup custom properties\n     job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n     job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n \n     job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n     job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n     job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n \n     // start a map/reduce job\n     out.println(\"\\nStarting Job ...\");\n-    final long startTime \u003d System.currentTimeMillis();\n+    final long startTime \u003d Time.monotonicNow();\n     try {\n       if (!job.waitForCompletion(true)) {\n         out.println(\"Job failed.\");\n         System.exit(1);\n       }\n     } catch (Exception e) {\n       throw new RuntimeException(e);\n     } finally {\n-      final double duration \u003d (System.currentTimeMillis() - startTime)/1000.0;\n+      final double duration \u003d (Time.monotonicNow() - startTime)/1000.0;\n       out.println(\"Duration is \" + duration + \" seconds.\");\n     }\n     out.println(\"Output file: \" + hexfile);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void compute(int startDigit, int nDigits, int nMaps,\n      String workingDir, Configuration conf, PrintStream out\n      ) throws IOException {\n    final String name \u003d startDigit + \"_\" + nDigits;\n\n    //setup wroking directory\n    out.println(\"Working Directory \u003d \" + workingDir);\n    out.println();\n    final FileSystem fs \u003d FileSystem.get(conf);\n    final Path dir \u003d fs.makeQualified(new Path(workingDir));\n    if (fs.exists(dir)) {\n      throw new IOException(\"Working directory \" + dir\n          + \" already exists.  Please remove it first.\");\n    } else if (!fs.mkdirs(dir)) {\n      throw new IOException(\"Cannot create working directory \" + dir);\n    }\n\n    out.println(\"Start Digit      \u003d \" + startDigit);\n    out.println(\"Number of Digits \u003d \" + nDigits);\n    out.println(\"Number of Maps   \u003d \" + nMaps);\n\n    // setup a job\n    final Job job \u003d createJob(name, conf);\n    final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n    FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n\n    // setup custom properties\n    job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n    job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n\n    job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n    job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n    job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n\n    // start a map/reduce job\n    out.println(\"\\nStarting Job ...\");\n    final long startTime \u003d Time.monotonicNow();\n    try {\n      if (!job.waitForCompletion(true)) {\n        out.println(\"Job failed.\");\n        System.exit(1);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      final double duration \u003d (Time.monotonicNow() - startTime)/1000.0;\n      out.println(\"Duration is \" + duration + \" seconds.\");\n    }\n    out.println(\"Output file: \" + hexfile);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void compute(int startDigit, int nDigits, int nMaps,\n      String workingDir, Configuration conf, PrintStream out\n      ) throws IOException {\n    final String name \u003d startDigit + \"_\" + nDigits;\n\n    //setup wroking directory\n    out.println(\"Working Directory \u003d \" + workingDir);\n    out.println();\n    final FileSystem fs \u003d FileSystem.get(conf);\n    final Path dir \u003d fs.makeQualified(new Path(workingDir));\n    if (fs.exists(dir)) {\n      throw new IOException(\"Working directory \" + dir\n          + \" already exists.  Please remove it first.\");\n    } else if (!fs.mkdirs(dir)) {\n      throw new IOException(\"Cannot create working directory \" + dir);\n    }\n\n    out.println(\"Start Digit      \u003d \" + startDigit);\n    out.println(\"Number of Digits \u003d \" + nDigits);\n    out.println(\"Number of Maps   \u003d \" + nMaps);\n\n    // setup a job\n    final Job job \u003d createJob(name, conf);\n    final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n    FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n\n    // setup custom properties\n    job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n    job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n\n    job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n    job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n    job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n\n    // start a map/reduce job\n    out.println(\"\\nStarting Job ...\");\n    final long startTime \u003d System.currentTimeMillis();\n    try {\n      if (!job.waitForCompletion(true)) {\n        out.println(\"Job failed.\");\n        System.exit(1);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      final double duration \u003d (System.currentTimeMillis() - startTime)/1000.0;\n      out.println(\"Duration is \" + duration + \" seconds.\");\n    }\n    out.println(\"Output file: \" + hexfile);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void compute(int startDigit, int nDigits, int nMaps,\n      String workingDir, Configuration conf, PrintStream out\n      ) throws IOException {\n    final String name \u003d startDigit + \"_\" + nDigits;\n\n    //setup wroking directory\n    out.println(\"Working Directory \u003d \" + workingDir);\n    out.println();\n    final FileSystem fs \u003d FileSystem.get(conf);\n    final Path dir \u003d fs.makeQualified(new Path(workingDir));\n    if (fs.exists(dir)) {\n      throw new IOException(\"Working directory \" + dir\n          + \" already exists.  Please remove it first.\");\n    } else if (!fs.mkdirs(dir)) {\n      throw new IOException(\"Cannot create working directory \" + dir);\n    }\n\n    out.println(\"Start Digit      \u003d \" + startDigit);\n    out.println(\"Number of Digits \u003d \" + nDigits);\n    out.println(\"Number of Maps   \u003d \" + nMaps);\n\n    // setup a job\n    final Job job \u003d createJob(name, conf);\n    final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n    FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n\n    // setup custom properties\n    job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n    job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n\n    job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n    job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n    job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n\n    // start a map/reduce job\n    out.println(\"\\nStarting Job ...\");\n    final long startTime \u003d System.currentTimeMillis();\n    try {\n      if (!job.waitForCompletion(true)) {\n        out.println(\"Job failed.\");\n        System.exit(1);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      final double duration \u003d (System.currentTimeMillis() - startTime)/1000.0;\n      out.println(\"Duration is \" + duration + \" seconds.\");\n    }\n    out.println(\"Output file: \" + hexfile);\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void compute(int startDigit, int nDigits, int nMaps,\n      String workingDir, Configuration conf, PrintStream out\n      ) throws IOException {\n    final String name \u003d startDigit + \"_\" + nDigits;\n\n    //setup wroking directory\n    out.println(\"Working Directory \u003d \" + workingDir);\n    out.println();\n    final FileSystem fs \u003d FileSystem.get(conf);\n    final Path dir \u003d fs.makeQualified(new Path(workingDir));\n    if (fs.exists(dir)) {\n      throw new IOException(\"Working directory \" + dir\n          + \" already exists.  Please remove it first.\");\n    } else if (!fs.mkdirs(dir)) {\n      throw new IOException(\"Cannot create working directory \" + dir);\n    }\n\n    out.println(\"Start Digit      \u003d \" + startDigit);\n    out.println(\"Number of Digits \u003d \" + nDigits);\n    out.println(\"Number of Maps   \u003d \" + nMaps);\n\n    // setup a job\n    final Job job \u003d createJob(name, conf);\n    final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n    FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n\n    // setup custom properties\n    job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n    job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n\n    job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n    job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n    job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n\n    // start a map/reduce job\n    out.println(\"\\nStarting Job ...\");\n    final long startTime \u003d System.currentTimeMillis();\n    try {\n      if (!job.waitForCompletion(true)) {\n        out.println(\"Job failed.\");\n        System.exit(1);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      final double duration \u003d (System.currentTimeMillis() - startTime)/1000.0;\n      out.println(\"Duration is \" + duration + \" seconds.\");\n    }\n    out.println(\"Output file: \" + hexfile);\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,50 @@\n+  private static void compute(int startDigit, int nDigits, int nMaps,\n+      String workingDir, Configuration conf, PrintStream out\n+      ) throws IOException {\n+    final String name \u003d startDigit + \"_\" + nDigits;\n+\n+    //setup wroking directory\n+    out.println(\"Working Directory \u003d \" + workingDir);\n+    out.println();\n+    final FileSystem fs \u003d FileSystem.get(conf);\n+    final Path dir \u003d fs.makeQualified(new Path(workingDir));\n+    if (fs.exists(dir)) {\n+      throw new IOException(\"Working directory \" + dir\n+          + \" already exists.  Please remove it first.\");\n+    } else if (!fs.mkdirs(dir)) {\n+      throw new IOException(\"Cannot create working directory \" + dir);\n+    }\n+\n+    out.println(\"Start Digit      \u003d \" + startDigit);\n+    out.println(\"Number of Digits \u003d \" + nDigits);\n+    out.println(\"Number of Maps   \u003d \" + nMaps);\n+\n+    // setup a job\n+    final Job job \u003d createJob(name, conf);\n+    final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n+    FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n+\n+    // setup custom properties\n+    job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n+    job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n+\n+    job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n+    job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n+    job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n+\n+    // start a map/reduce job\n+    out.println(\"\\nStarting Job ...\");\n+    final long startTime \u003d System.currentTimeMillis();\n+    try {\n+      if (!job.waitForCompletion(true)) {\n+        out.println(\"Job failed.\");\n+        System.exit(1);\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    } finally {\n+      final double duration \u003d (System.currentTimeMillis() - startTime)/1000.0;\n+      out.println(\"Duration is \" + duration + \" seconds.\");\n+    }\n+    out.println(\"Output file: \" + hexfile);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void compute(int startDigit, int nDigits, int nMaps,\n      String workingDir, Configuration conf, PrintStream out\n      ) throws IOException {\n    final String name \u003d startDigit + \"_\" + nDigits;\n\n    //setup wroking directory\n    out.println(\"Working Directory \u003d \" + workingDir);\n    out.println();\n    final FileSystem fs \u003d FileSystem.get(conf);\n    final Path dir \u003d fs.makeQualified(new Path(workingDir));\n    if (fs.exists(dir)) {\n      throw new IOException(\"Working directory \" + dir\n          + \" already exists.  Please remove it first.\");\n    } else if (!fs.mkdirs(dir)) {\n      throw new IOException(\"Cannot create working directory \" + dir);\n    }\n\n    out.println(\"Start Digit      \u003d \" + startDigit);\n    out.println(\"Number of Digits \u003d \" + nDigits);\n    out.println(\"Number of Maps   \u003d \" + nMaps);\n\n    // setup a job\n    final Job job \u003d createJob(name, conf);\n    final Path hexfile \u003d new Path(dir, \"pi_\" + name + \".hex\");\n    FileOutputFormat.setOutputPath(job, new Path(dir, \"out\"));\n\n    // setup custom properties\n    job.getConfiguration().set(WORKING_DIR_PROPERTY, dir.toString());\n    job.getConfiguration().set(HEX_FILE_PROPERTY, hexfile.toString());\n\n    job.getConfiguration().setInt(DIGIT_START_PROPERTY, startDigit);\n    job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY, nDigits);\n    job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY, nMaps);\n\n    // start a map/reduce job\n    out.println(\"\\nStarting Job ...\");\n    final long startTime \u003d System.currentTimeMillis();\n    try {\n      if (!job.waitForCompletion(true)) {\n        out.println(\"Job failed.\");\n        System.exit(1);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      final double duration \u003d (System.currentTimeMillis() - startTime)/1000.0;\n      out.println(\"Duration is \" + duration + \" seconds.\");\n    }\n    out.println(\"Output file: \" + hexfile);\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
    }
  }
}