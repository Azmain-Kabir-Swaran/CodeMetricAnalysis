{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "getHeadroom",
  "functionId": "getHeadroom",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 234,
  "functionEndLine": 261,
  "numCommitsSeen": 76,
  "timeTaken": 3882,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "90cb5b4635b7a0849912458afad052f569131a59",
    "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65",
    "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718",
    "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "90cb5b4635b7a0849912458afad052f569131a59": "Ybodychange",
    "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65": "Ybodychange",
    "8f82970e0c247b37b2bf33aa21f6a39afa07efde": "Ybodychange",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": "Ymodifierchange",
    "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   public Resource getHeadroom() {\n     final FSQueue fsQueue \u003d getQueue();\n     SchedulingPolicy policy \u003d fsQueue.getPolicy();\n \n     Resource queueFairShare \u003d fsQueue.getFairShare();\n     Resource queueUsage \u003d fsQueue.getResourceUsage();\n     Resource clusterResource \u003d this.scheduler.getClusterResource();\n     Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n         .getAllocatedResources();\n \n     Resource clusterAvailableResources \u003d\n         Resources.subtract(clusterResource, clusterUsage);\n     subtractResourcesOnBlacklistedNodes(clusterAvailableResources);\n \n     Resource queueMaxAvailableResources \u003d\n         Resources.subtract(fsQueue.getMaxShare(), queueUsage);\n     Resource maxAvailableResource \u003d Resources.componentwiseMin(\n         clusterAvailableResources, queueMaxAvailableResources);\n \n     Resource headroom \u003d policy.getHeadroom(queueFairShare,\n         queueUsage, maxAvailableResource);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n-          \"Min(\" +\n-          \"(queueFairShare\u003d\" + queueFairShare +\n-          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n-          \" maxAvailableResource\u003d\" + maxAvailableResource +\n-          \"Headroom\u003d\" + headroom);\n-    }\n+    LOG.debug(\"Headroom calculation for {}:Min((queueFairShare\u003d{} -\"\n+        + \" queueUsage\u003d{}), maxAvailableResource\u003d{} Headroom\u003d{}\",\n+        this.getName(), queueFairShare, queueUsage, maxAvailableResource,\n+        headroom);\n+\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    final FSQueue fsQueue \u003d getQueue();\n    SchedulingPolicy policy \u003d fsQueue.getPolicy();\n\n    Resource queueFairShare \u003d fsQueue.getFairShare();\n    Resource queueUsage \u003d fsQueue.getResourceUsage();\n    Resource clusterResource \u003d this.scheduler.getClusterResource();\n    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n        .getAllocatedResources();\n\n    Resource clusterAvailableResources \u003d\n        Resources.subtract(clusterResource, clusterUsage);\n    subtractResourcesOnBlacklistedNodes(clusterAvailableResources);\n\n    Resource queueMaxAvailableResources \u003d\n        Resources.subtract(fsQueue.getMaxShare(), queueUsage);\n    Resource maxAvailableResource \u003d Resources.componentwiseMin(\n        clusterAvailableResources, queueMaxAvailableResources);\n\n    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n        queueUsage, maxAvailableResource);\n    LOG.debug(\"Headroom calculation for {}:Min((queueFairShare\u003d{} -\"\n        + \" queueUsage\u003d{}), maxAvailableResource\u003d{} Headroom\u003d{}\",\n        this.getName(), queueFairShare, queueUsage, maxAvailableResource,\n        headroom);\n\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "90cb5b4635b7a0849912458afad052f569131a59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6380. FSAppAttempt keeps redundant copy of the queue\n",
      "commitDate": "11/05/17 1:47 PM",
      "commitName": "90cb5b4635b7a0849912458afad052f569131a59",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/04/17 2:21 PM",
      "commitNameOld": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 28.98,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public Resource getHeadroom() {\n-    final FSQueue queue \u003d (FSQueue) this.queue;\n-    SchedulingPolicy policy \u003d queue.getPolicy();\n+    final FSQueue fsQueue \u003d getQueue();\n+    SchedulingPolicy policy \u003d fsQueue.getPolicy();\n \n-    Resource queueFairShare \u003d queue.getFairShare();\n-    Resource queueUsage \u003d queue.getResourceUsage();\n+    Resource queueFairShare \u003d fsQueue.getFairShare();\n+    Resource queueUsage \u003d fsQueue.getResourceUsage();\n     Resource clusterResource \u003d this.scheduler.getClusterResource();\n     Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n         .getAllocatedResources();\n \n     Resource clusterAvailableResources \u003d\n         Resources.subtract(clusterResource, clusterUsage);\n     subtractResourcesOnBlacklistedNodes(clusterAvailableResources);\n \n     Resource queueMaxAvailableResources \u003d\n-        Resources.subtract(queue.getMaxShare(), queueUsage);\n+        Resources.subtract(fsQueue.getMaxShare(), queueUsage);\n     Resource maxAvailableResource \u003d Resources.componentwiseMin(\n         clusterAvailableResources, queueMaxAvailableResources);\n \n     Resource headroom \u003d policy.getHeadroom(queueFairShare,\n         queueUsage, maxAvailableResource);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n           \"Min(\" +\n           \"(queueFairShare\u003d\" + queueFairShare +\n           \" - queueUsage\u003d\" + queueUsage + \"),\" +\n           \" maxAvailableResource\u003d\" + maxAvailableResource +\n           \"Headroom\u003d\" + headroom);\n     }\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    final FSQueue fsQueue \u003d getQueue();\n    SchedulingPolicy policy \u003d fsQueue.getPolicy();\n\n    Resource queueFairShare \u003d fsQueue.getFairShare();\n    Resource queueUsage \u003d fsQueue.getResourceUsage();\n    Resource clusterResource \u003d this.scheduler.getClusterResource();\n    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n        .getAllocatedResources();\n\n    Resource clusterAvailableResources \u003d\n        Resources.subtract(clusterResource, clusterUsage);\n    subtractResourcesOnBlacklistedNodes(clusterAvailableResources);\n\n    Resource queueMaxAvailableResources \u003d\n        Resources.subtract(fsQueue.getMaxShare(), queueUsage);\n    Resource maxAvailableResource \u003d Resources.componentwiseMin(\n        clusterAvailableResources, queueMaxAvailableResources);\n\n    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n        queueUsage, maxAvailableResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n          \"Min(\" +\n          \"(queueFairShare\u003d\" + queueFairShare +\n          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n          \" maxAvailableResource\u003d\" + maxAvailableResource +\n          \"Headroom\u003d\" + headroom);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3446. FairScheduler headroom calculation should exclude nodes in the blacklist. (Zhihai Xu via kasha)\n",
      "commitDate": "14/01/16 8:33 AM",
      "commitName": "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/12/15 10:41 PM",
      "commitNameOld": "e88422df45550f788ae8dd73aec84bde28012aeb",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 23.41,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public Resource getHeadroom() {\n     final FSQueue queue \u003d (FSQueue) this.queue;\n     SchedulingPolicy policy \u003d queue.getPolicy();\n \n     Resource queueFairShare \u003d queue.getFairShare();\n     Resource queueUsage \u003d queue.getResourceUsage();\n     Resource clusterResource \u003d this.scheduler.getClusterResource();\n     Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n         .getAllocatedResources();\n \n     Resource clusterAvailableResources \u003d\n         Resources.subtract(clusterResource, clusterUsage);\n+    subtractResourcesOnBlacklistedNodes(clusterAvailableResources);\n+\n     Resource queueMaxAvailableResources \u003d\n         Resources.subtract(queue.getMaxShare(), queueUsage);\n     Resource maxAvailableResource \u003d Resources.componentwiseMin(\n         clusterAvailableResources, queueMaxAvailableResources);\n \n     Resource headroom \u003d policy.getHeadroom(queueFairShare,\n         queueUsage, maxAvailableResource);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n           \"Min(\" +\n           \"(queueFairShare\u003d\" + queueFairShare +\n           \" - queueUsage\u003d\" + queueUsage + \"),\" +\n           \" maxAvailableResource\u003d\" + maxAvailableResource +\n           \"Headroom\u003d\" + headroom);\n     }\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    final FSQueue queue \u003d (FSQueue) this.queue;\n    SchedulingPolicy policy \u003d queue.getPolicy();\n\n    Resource queueFairShare \u003d queue.getFairShare();\n    Resource queueUsage \u003d queue.getResourceUsage();\n    Resource clusterResource \u003d this.scheduler.getClusterResource();\n    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n        .getAllocatedResources();\n\n    Resource clusterAvailableResources \u003d\n        Resources.subtract(clusterResource, clusterUsage);\n    subtractResourcesOnBlacklistedNodes(clusterAvailableResources);\n\n    Resource queueMaxAvailableResources \u003d\n        Resources.subtract(queue.getMaxShare(), queueUsage);\n    Resource maxAvailableResource \u003d Resources.componentwiseMin(\n        clusterAvailableResources, queueMaxAvailableResources);\n\n    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n        queueUsage, maxAvailableResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n          \"Min(\" +\n          \"(queueFairShare\u003d\" + queueFairShare +\n          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n          \" maxAvailableResource\u003d\" + maxAvailableResource +\n          \"Headroom\u003d\" + headroom);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "8f82970e0c247b37b2bf33aa21f6a39afa07efde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3485. FairScheduler headroom calculation doesn\u0027t consider maxResources for Fifo and FairShare policies. (kasha)\n",
      "commitDate": "28/04/15 9:00 PM",
      "commitName": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/04/15 1:56 PM",
      "commitNameOld": "6a6a59db7f1bfda47c3c14fb49676a7b22d2eb06",
      "commitAuthorOld": "Sandy Ryza",
      "daysBetweenCommits": 26.29,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   public Resource getHeadroom() {\n     final FSQueue queue \u003d (FSQueue) this.queue;\n     SchedulingPolicy policy \u003d queue.getPolicy();\n \n     Resource queueFairShare \u003d queue.getFairShare();\n     Resource queueUsage \u003d queue.getResourceUsage();\n     Resource clusterResource \u003d this.scheduler.getClusterResource();\n     Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n         .getAllocatedResources();\n-    Resource clusterAvailableResource \u003d Resources.subtract(clusterResource,\n-        clusterUsage);\n+\n+    Resource clusterAvailableResources \u003d\n+        Resources.subtract(clusterResource, clusterUsage);\n+    Resource queueMaxAvailableResources \u003d\n+        Resources.subtract(queue.getMaxShare(), queueUsage);\n+    Resource maxAvailableResource \u003d Resources.componentwiseMin(\n+        clusterAvailableResources, queueMaxAvailableResources);\n+\n     Resource headroom \u003d policy.getHeadroom(queueFairShare,\n-        queueUsage, clusterAvailableResource);\n+        queueUsage, maxAvailableResource);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n           \"Min(\" +\n           \"(queueFairShare\u003d\" + queueFairShare +\n           \" - queueUsage\u003d\" + queueUsage + \"),\" +\n-          \" clusterAvailableResource\u003d\" + clusterAvailableResource +\n-          \"(clusterResource\u003d\" + clusterResource +\n-          \" - clusterUsage\u003d\" + clusterUsage + \")\" +\n+          \" maxAvailableResource\u003d\" + maxAvailableResource +\n           \"Headroom\u003d\" + headroom);\n     }\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    final FSQueue queue \u003d (FSQueue) this.queue;\n    SchedulingPolicy policy \u003d queue.getPolicy();\n\n    Resource queueFairShare \u003d queue.getFairShare();\n    Resource queueUsage \u003d queue.getResourceUsage();\n    Resource clusterResource \u003d this.scheduler.getClusterResource();\n    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n        .getAllocatedResources();\n\n    Resource clusterAvailableResources \u003d\n        Resources.subtract(clusterResource, clusterUsage);\n    Resource queueMaxAvailableResources \u003d\n        Resources.subtract(queue.getMaxShare(), queueUsage);\n    Resource maxAvailableResource \u003d Resources.componentwiseMin(\n        clusterAvailableResources, queueMaxAvailableResources);\n\n    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n        queueUsage, maxAvailableResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n          \"Min(\" +\n          \"(queueFairShare\u003d\" + queueFairShare +\n          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n          \" maxAvailableResource\u003d\" + maxAvailableResource +\n          \"Headroom\u003d\" + headroom);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-2910. FSLeafQueue can throw ConcurrentModificationException. (Wilfred Spiegelenburg via kasha)\n",
      "commitDate": "09/12/14 2:00 PM",
      "commitName": "a2e07a54561a57a83b943628ebbc53ed5ba52718",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/09/14 11:49 PM",
      "commitNameOld": "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 77.63,
      "commitsBetweenForRepo": 683,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-  public synchronized Resource getHeadroom() {\n+  public Resource getHeadroom() {\n     final FSQueue queue \u003d (FSQueue) this.queue;\n     SchedulingPolicy policy \u003d queue.getPolicy();\n \n     Resource queueFairShare \u003d queue.getFairShare();\n     Resource queueUsage \u003d queue.getResourceUsage();\n     Resource clusterResource \u003d this.scheduler.getClusterResource();\n     Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n         .getAllocatedResources();\n     Resource clusterAvailableResource \u003d Resources.subtract(clusterResource,\n         clusterUsage);\n     Resource headroom \u003d policy.getHeadroom(queueFairShare,\n         queueUsage, clusterAvailableResource);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n           \"Min(\" +\n           \"(queueFairShare\u003d\" + queueFairShare +\n           \" - queueUsage\u003d\" + queueUsage + \"),\" +\n           \" clusterAvailableResource\u003d\" + clusterAvailableResource +\n           \"(clusterResource\u003d\" + clusterResource +\n           \" - clusterUsage\u003d\" + clusterUsage + \")\" +\n           \"Headroom\u003d\" + headroom);\n     }\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    final FSQueue queue \u003d (FSQueue) this.queue;\n    SchedulingPolicy policy \u003d queue.getPolicy();\n\n    Resource queueFairShare \u003d queue.getFairShare();\n    Resource queueUsage \u003d queue.getResourceUsage();\n    Resource clusterResource \u003d this.scheduler.getClusterResource();\n    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n        .getAllocatedResources();\n    Resource clusterAvailableResource \u003d Resources.subtract(clusterResource,\n        clusterUsage);\n    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n        queueUsage, clusterAvailableResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n          \"Min(\" +\n          \"(queueFairShare\u003d\" + queueFairShare +\n          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n          \" clusterAvailableResource\u003d\" + clusterAvailableResource +\n          \"(clusterResource\u003d\" + clusterResource +\n          \" - clusterUsage\u003d\" + clusterUsage + \")\" +\n          \"Headroom\u003d\" + headroom);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1959. Fix headroom calculation in FairScheduler. (Anubhav Dhoot via kasha)\n",
      "commitDate": "22/09/14 11:49 PM",
      "commitName": "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,25 @@\n+  public synchronized Resource getHeadroom() {\n+    final FSQueue queue \u003d (FSQueue) this.queue;\n+    SchedulingPolicy policy \u003d queue.getPolicy();\n+\n+    Resource queueFairShare \u003d queue.getFairShare();\n+    Resource queueUsage \u003d queue.getResourceUsage();\n+    Resource clusterResource \u003d this.scheduler.getClusterResource();\n+    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n+        .getAllocatedResources();\n+    Resource clusterAvailableResource \u003d Resources.subtract(clusterResource,\n+        clusterUsage);\n+    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n+        queueUsage, clusterAvailableResource);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n+          \"Min(\" +\n+          \"(queueFairShare\u003d\" + queueFairShare +\n+          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n+          \" clusterAvailableResource\u003d\" + clusterAvailableResource +\n+          \"(clusterResource\u003d\" + clusterResource +\n+          \" - clusterUsage\u003d\" + clusterUsage + \")\" +\n+          \"Headroom\u003d\" + headroom);\n+    }\n+    return headroom;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Resource getHeadroom() {\n    final FSQueue queue \u003d (FSQueue) this.queue;\n    SchedulingPolicy policy \u003d queue.getPolicy();\n\n    Resource queueFairShare \u003d queue.getFairShare();\n    Resource queueUsage \u003d queue.getResourceUsage();\n    Resource clusterResource \u003d this.scheduler.getClusterResource();\n    Resource clusterUsage \u003d this.scheduler.getRootQueueMetrics()\n        .getAllocatedResources();\n    Resource clusterAvailableResource \u003d Resources.subtract(clusterResource,\n        clusterUsage);\n    Resource headroom \u003d policy.getHeadroom(queueFairShare,\n        queueUsage, clusterAvailableResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Headroom calculation for \" + this.getName() + \":\" +\n          \"Min(\" +\n          \"(queueFairShare\u003d\" + queueFairShare +\n          \" - queueUsage\u003d\" + queueUsage + \"),\" +\n          \" clusterAvailableResource\u003d\" + clusterAvailableResource +\n          \"(clusterResource\u003d\" + clusterResource +\n          \" - clusterUsage\u003d\" + clusterUsage + \")\" +\n          \"Headroom\u003d\" + headroom);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}