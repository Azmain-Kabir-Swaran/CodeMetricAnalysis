{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMWebServices.java",
  "functionName": "getContainerLogsInfo",
  "functionId": "getContainerLogsInfo___hsr-HttpServletRequest(annotations-@javax.ws.rs.core.Context)__res-HttpServletResponse(annotations-@javax.ws.rs.core.Context)__containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
  "functionStartLine": 290,
  "functionEndLine": 350,
  "numCommitsSeen": 45,
  "timeTaken": 4665,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "91cc070d67533ebb3325b982eba2135e0d175a82",
    "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e",
    "464ff479ceec76609dca3539081de6b503b17325",
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "4c9e1aeb94247a6e97215e902bdc71a325244243"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "91cc070d67533ebb3325b982eba2135e0d175a82": "Ybodychange",
    "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e": "Ybodychange",
    "464ff479ceec76609dca3539081de6b503b17325": "Ybodychange",
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5": "Yparametermetachange",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "4c9e1aeb94247a6e97215e902bdc71a325244243": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/01/19 4:05 PM",
      "commitNameOld": "1ab69a9543df555b878951e66e3da13485e7f6d5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 48.97,
      "commitsBetweenForRepo": 401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,61 @@\n   public Response getContainerLogsInfo(\n       @javax.ws.rs.core.Context HttpServletRequest hsr,\n       @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     try {\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       containersLogsInfo.add(new NMContainerLogsInfo(\n           this.nmContext, containerId,\n           hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\n       // check whether we have aggregated logs in RemoteFS. If exists, show the\n       // the log meta for the aggregated logs as well.\n       ApplicationId appId \u003d containerId.getApplicationAttemptId()\n           .getApplicationId();\n       Application app \u003d this.nmContext.getApplications().get(appId);\n       String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n       try {\n         ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n         logRequest.setAppId(appId);\n         logRequest.setAppOwner(appOwner);\n         logRequest.setContainerId(containerIdStr);\n         logRequest.setNodeId(this.nmContext.getNodeId().toString());\n         List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n             .getFileControllerForRead(appId, appOwner)\n             .readAggregatedLogsMeta(logRequest);\n         if (!containerLogMeta.isEmpty()) {\n           for (ContainerLogMeta logMeta : containerLogMeta) {\n             containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                 ContainerLogAggregationType.AGGREGATED));\n           }\n         }\n       } catch (IOException ex) {\n         // Something wrong with we tries to access the remote fs for the logs.\n         // Skip it and do nothing\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(ex.getMessage());\n-        }\n+        LOG.debug(\"{}\", ex);\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder resp \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       resp.header(\"X-Content-Type-Options\", \"nosniff\");\n       return resp.build();\n     } catch (Exception ex) {\n       if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n         throw new WebApplicationException(ex);\n       }\n       // redirect the request to the configured log server\n       String redirectURI \u003d \"/containers/\" + containerIdStr\n           + \"/logs\";\n       return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n        logRequest.setAppId(appId);\n        logRequest.setAppOwner(appOwner);\n        logRequest.setContainerId(containerIdStr);\n        logRequest.setNodeId(this.nmContext.getNodeId().toString());\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n            .getFileControllerForRead(appId, appOwner)\n            .readAggregatedLogsMeta(logRequest);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogAggregationType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n        LOG.debug(\"{}\", ex);\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n        throw new WebApplicationException(ex);\n      }\n      // redirect the request to the configured log server\n      String redirectURI \u003d \"/containers/\" + containerIdStr\n          + \"/logs\";\n      return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
      "extendedDetails": {}
    },
    "91cc070d67533ebb3325b982eba2135e0d175a82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "31/08/17 4:41 PM",
      "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthor": "Junping Du",
      "commitDateOld": "29/08/17 3:16 PM",
      "commitNameOld": "ad45d19998c1b0da25754d0016854046731fa623",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n   public Response getContainerLogsInfo(\n       @javax.ws.rs.core.Context HttpServletRequest hsr,\n       @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     try {\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       containersLogsInfo.add(new NMContainerLogsInfo(\n           this.nmContext, containerId,\n           hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\n       // check whether we have aggregated logs in RemoteFS. If exists, show the\n       // the log meta for the aggregated logs as well.\n       ApplicationId appId \u003d containerId.getApplicationAttemptId()\n           .getApplicationId();\n       Application app \u003d this.nmContext.getApplications().get(appId);\n       String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n       try {\n-        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n-            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n-                appId, containerIdStr,\n-                this.nmContext.getNodeId().toString(), appOwner);\n+        ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n+        logRequest.setAppId(appId);\n+        logRequest.setAppOwner(appOwner);\n+        logRequest.setContainerId(containerIdStr);\n+        logRequest.setNodeId(this.nmContext.getNodeId().toString());\n+        List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n+            .getFileControllerForRead(appId, appOwner)\n+            .readAggregatedLogsMeta(logRequest);\n         if (!containerLogMeta.isEmpty()) {\n           for (ContainerLogMeta logMeta : containerLogMeta) {\n             containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                 ContainerLogAggregationType.AGGREGATED));\n           }\n         }\n       } catch (IOException ex) {\n         // Something wrong with we tries to access the remote fs for the logs.\n         // Skip it and do nothing\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(ex.getMessage());\n         }\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder resp \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       resp.header(\"X-Content-Type-Options\", \"nosniff\");\n       return resp.build();\n     } catch (Exception ex) {\n       if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n         throw new WebApplicationException(ex);\n       }\n       // redirect the request to the configured log server\n       String redirectURI \u003d \"/containers/\" + containerIdStr\n           + \"/logs\";\n       return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n        logRequest.setAppId(appId);\n        logRequest.setAppOwner(appOwner);\n        logRequest.setContainerId(containerIdStr);\n        logRequest.setNodeId(this.nmContext.getNodeId().toString());\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n            .getFileControllerForRead(appId, appOwner)\n            .readAggregatedLogsMeta(logRequest);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogAggregationType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(ex.getMessage());\n        }\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n        throw new WebApplicationException(ex);\n      }\n      // redirect the request to the configured log server\n      String redirectURI \u003d \"/containers/\" + containerIdStr\n          + \"/logs\";\n      return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
      "extendedDetails": {}
    },
    "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6174. Log files pattern should be same for both running and finished container. Contributed by Xuan Gong.\n",
      "commitDate": "15/02/17 9:05 AM",
      "commitName": "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/02/17 6:12 AM",
      "commitNameOld": "464ff479ceec76609dca3539081de6b503b17325",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 2.12,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public Response getContainerLogsInfo(\n       @javax.ws.rs.core.Context HttpServletRequest hsr,\n       @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     try {\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       containersLogsInfo.add(new NMContainerLogsInfo(\n           this.nmContext, containerId,\n-          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n+          hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\n       // check whether we have aggregated logs in RemoteFS. If exists, show the\n       // the log meta for the aggregated logs as well.\n       ApplicationId appId \u003d containerId.getApplicationAttemptId()\n           .getApplicationId();\n       Application app \u003d this.nmContext.getApplications().get(appId);\n       String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n       try {\n         List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n             .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                 appId, containerIdStr,\n                 this.nmContext.getNodeId().toString(), appOwner);\n         if (!containerLogMeta.isEmpty()) {\n           for (ContainerLogMeta logMeta : containerLogMeta) {\n             containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n-                ContainerLogType.AGGREGATED));\n+                ContainerLogAggregationType.AGGREGATED));\n           }\n         }\n       } catch (IOException ex) {\n         // Something wrong with we tries to access the remote fs for the logs.\n         // Skip it and do nothing\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(ex.getMessage());\n         }\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder resp \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       resp.header(\"X-Content-Type-Options\", \"nosniff\");\n       return resp.build();\n     } catch (Exception ex) {\n       if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n         throw new WebApplicationException(ex);\n       }\n       // redirect the request to the configured log server\n       String redirectURI \u003d \"/containers/\" + containerIdStr\n           + \"/logs\";\n       return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogAggregationType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                appId, containerIdStr,\n                this.nmContext.getNodeId().toString(), appOwner);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogAggregationType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(ex.getMessage());\n        }\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n        throw new WebApplicationException(ex);\n      }\n      // redirect the request to the configured log server\n      String redirectURI \u003d \"/containers/\" + containerIdStr\n          + \"/logs\";\n      return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
      "extendedDetails": {}
    },
    "464ff479ceec76609dca3539081de6b503b17325": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6113. Re-direct NM Web Service to get container logs for finished applications. Contributed by Xuan Gong.\n",
      "commitDate": "13/02/17 6:12 AM",
      "commitName": "464ff479ceec76609dca3539081de6b503b17325",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/02/17 2:13 AM",
      "commitNameOld": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 6.17,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,59 @@\n   public Response getContainerLogsInfo(\n       @javax.ws.rs.core.Context HttpServletRequest hsr,\n       @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     try {\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       containersLogsInfo.add(new NMContainerLogsInfo(\n           this.nmContext, containerId,\n           hsr.getRemoteUser(), ContainerLogType.LOCAL));\n       // check whether we have aggregated logs in RemoteFS. If exists, show the\n       // the log meta for the aggregated logs as well.\n       ApplicationId appId \u003d containerId.getApplicationAttemptId()\n           .getApplicationId();\n       Application app \u003d this.nmContext.getApplications().get(appId);\n       String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n       try {\n         List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n             .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                 appId, containerIdStr,\n                 this.nmContext.getNodeId().toString(), appOwner);\n         if (!containerLogMeta.isEmpty()) {\n           for (ContainerLogMeta logMeta : containerLogMeta) {\n             containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                 ContainerLogType.AGGREGATED));\n           }\n         }\n       } catch (IOException ex) {\n         // Something wrong with we tries to access the remote fs for the logs.\n         // Skip it and do nothing\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(ex.getMessage());\n+        }\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder resp \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       resp.header(\"X-Content-Type-Options\", \"nosniff\");\n       return resp.build();\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n+        throw new WebApplicationException(ex);\n+      }\n+      // redirect the request to the configured log server\n+      String redirectURI \u003d \"/containers/\" + containerIdStr\n+          + \"/logs\";\n+      return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                appId, containerIdStr,\n                this.nmContext.getNodeId().toString(), appOwner);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(ex.getMessage());\n        }\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      if (redirectWSUrl \u003d\u003d null || redirectWSUrl.isEmpty()) {\n        throw new WebApplicationException(ex);\n      }\n      // redirect the request to the configured log server\n      String redirectURI \u003d \"/containers/\" + containerIdStr\n          + \"/logs\";\n      return createRedirectResponse(hsr, redirectWSUrl, redirectURI);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
      "extendedDetails": {}
    },
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5": {
      "type": "Yparametermetachange",
      "commitMessage": "YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.\n",
      "commitDate": "07/02/17 2:13 AM",
      "commitName": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
      "commitAuthor": "Junping Du",
      "commitDateOld": "02/02/17 12:41 AM",
      "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public Response getContainerLogsInfo(\n       @javax.ws.rs.core.Context HttpServletRequest hsr,\n       @javax.ws.rs.core.Context HttpServletResponse res,\n-      @PathParam(\"containerid\") String containerIdStr) {\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     try {\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       containersLogsInfo.add(new NMContainerLogsInfo(\n           this.nmContext, containerId,\n           hsr.getRemoteUser(), ContainerLogType.LOCAL));\n       // check whether we have aggregated logs in RemoteFS. If exists, show the\n       // the log meta for the aggregated logs as well.\n       ApplicationId appId \u003d containerId.getApplicationAttemptId()\n           .getApplicationId();\n       Application app \u003d this.nmContext.getApplications().get(appId);\n       String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n       try {\n         List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n             .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                 appId, containerIdStr,\n                 this.nmContext.getNodeId().toString(), appOwner);\n         if (!containerLogMeta.isEmpty()) {\n           for (ContainerLogMeta logMeta : containerLogMeta) {\n             containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                 ContainerLogType.AGGREGATED));\n           }\n         }\n       } catch (IOException ex) {\n         // Something wrong with we tries to access the remote fs for the logs.\n         // Skip it and do nothing\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder resp \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       resp.header(\"X-Content-Type-Options\", \"nosniff\");\n       return resp.build();\n     } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                appId, containerIdStr,\n                this.nmContext.getNodeId().toString(), appOwner);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
      "extendedDetails": {
        "oldValue": "[hsr-HttpServletRequest(annotations-@javax.ws.rs.core.Context), res-HttpServletResponse(annotations-@javax.ws.rs.core.Context), containerIdStr-String(annotations-@PathParam(\"containerid\"))]",
        "newValue": "[hsr-HttpServletRequest(annotations-@javax.ws.rs.core.Context), res-HttpServletResponse(annotations-@javax.ws.rs.core.Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID))]"
      }
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 533,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,50 @@\n-  public ContainerLogsInfo getContainerLogsInfo(@javax.ws.rs.core.Context\n-      HttpServletRequest hsr,\n+  public Response getContainerLogsInfo(\n+      @javax.ws.rs.core.Context HttpServletRequest hsr,\n+      @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(\"containerid\") String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (Exception e) {\n+    } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n+\n     try {\n-      return new ContainerLogsInfo(this.nmContext, containerId,\n-          hsr.getRemoteUser());\n-    } catch (YarnException ex) {\n+      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n+      containersLogsInfo.add(new NMContainerLogsInfo(\n+          this.nmContext, containerId,\n+          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n+      // check whether we have aggregated logs in RemoteFS. If exists, show the\n+      // the log meta for the aggregated logs as well.\n+      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n+          .getApplicationId();\n+      Application app \u003d this.nmContext.getApplications().get(appId);\n+      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n+      try {\n+        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n+            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n+                appId, containerIdStr,\n+                this.nmContext.getNodeId().toString(), appOwner);\n+        if (!containerLogMeta.isEmpty()) {\n+          for (ContainerLogMeta logMeta : containerLogMeta) {\n+            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n+                ContainerLogType.AGGREGATED));\n+          }\n+        }\n+      } catch (IOException ex) {\n+        // Something wrong with we tries to access the remote fs for the logs.\n+        // Skip it and do nothing\n+      }\n+      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n+          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n+      ResponseBuilder resp \u003d Response.ok(meta);\n+      // Sending the X-Content-Type-Options response header with the value\n+      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n+      // away from the declared content-type.\n+      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n+      return resp.build();\n+    } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(\"containerid\") String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                appId, containerIdStr,\n                this.nmContext.getNodeId().toString(), appOwner);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@javax.ws.rs.core.Context), containerIdStr-String(annotations-@PathParam(\"containerid\"))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@javax.ws.rs.core.Context), res-HttpServletResponse(annotations-@javax.ws.rs.core.Context), containerIdStr-String(annotations-@PathParam(\"containerid\"))]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 533,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,50 @@\n-  public ContainerLogsInfo getContainerLogsInfo(@javax.ws.rs.core.Context\n-      HttpServletRequest hsr,\n+  public Response getContainerLogsInfo(\n+      @javax.ws.rs.core.Context HttpServletRequest hsr,\n+      @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(\"containerid\") String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (Exception e) {\n+    } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n+\n     try {\n-      return new ContainerLogsInfo(this.nmContext, containerId,\n-          hsr.getRemoteUser());\n-    } catch (YarnException ex) {\n+      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n+      containersLogsInfo.add(new NMContainerLogsInfo(\n+          this.nmContext, containerId,\n+          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n+      // check whether we have aggregated logs in RemoteFS. If exists, show the\n+      // the log meta for the aggregated logs as well.\n+      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n+          .getApplicationId();\n+      Application app \u003d this.nmContext.getApplications().get(appId);\n+      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n+      try {\n+        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n+            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n+                appId, containerIdStr,\n+                this.nmContext.getNodeId().toString(), appOwner);\n+        if (!containerLogMeta.isEmpty()) {\n+          for (ContainerLogMeta logMeta : containerLogMeta) {\n+            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n+                ContainerLogType.AGGREGATED));\n+          }\n+        }\n+      } catch (IOException ex) {\n+        // Something wrong with we tries to access the remote fs for the logs.\n+        // Skip it and do nothing\n+      }\n+      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n+          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n+      ResponseBuilder resp \u003d Response.ok(meta);\n+      // Sending the X-Content-Type-Options response header with the value\n+      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n+      // away from the declared content-type.\n+      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n+      return resp.build();\n+    } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(\"containerid\") String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                appId, containerIdStr,\n                this.nmContext.getNodeId().toString(), appOwner);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
          "extendedDetails": {
            "oldValue": "ContainerLogsInfo",
            "newValue": "Response"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 533,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,50 @@\n-  public ContainerLogsInfo getContainerLogsInfo(@javax.ws.rs.core.Context\n-      HttpServletRequest hsr,\n+  public Response getContainerLogsInfo(\n+      @javax.ws.rs.core.Context HttpServletRequest hsr,\n+      @javax.ws.rs.core.Context HttpServletResponse res,\n       @PathParam(\"containerid\") String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init();\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (Exception e) {\n+    } catch (IllegalArgumentException ex) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n+\n     try {\n-      return new ContainerLogsInfo(this.nmContext, containerId,\n-          hsr.getRemoteUser());\n-    } catch (YarnException ex) {\n+      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n+      containersLogsInfo.add(new NMContainerLogsInfo(\n+          this.nmContext, containerId,\n+          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n+      // check whether we have aggregated logs in RemoteFS. If exists, show the\n+      // the log meta for the aggregated logs as well.\n+      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n+          .getApplicationId();\n+      Application app \u003d this.nmContext.getApplications().get(appId);\n+      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n+      try {\n+        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n+            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n+                appId, containerIdStr,\n+                this.nmContext.getNodeId().toString(), appOwner);\n+        if (!containerLogMeta.isEmpty()) {\n+          for (ContainerLogMeta logMeta : containerLogMeta) {\n+            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n+                ContainerLogType.AGGREGATED));\n+          }\n+        }\n+      } catch (IOException ex) {\n+        // Something wrong with we tries to access the remote fs for the logs.\n+        // Skip it and do nothing\n+      }\n+      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n+          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n+      ResponseBuilder resp \u003d Response.ok(meta);\n+      // Sending the X-Content-Type-Options response header with the value\n+      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n+      // away from the declared content-type.\n+      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n+      return resp.build();\n+    } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @javax.ws.rs.core.Context HttpServletRequest hsr,\n      @javax.ws.rs.core.Context HttpServletResponse res,\n      @PathParam(\"containerid\") String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    try {\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      containersLogsInfo.add(new NMContainerLogsInfo(\n          this.nmContext, containerId,\n          hsr.getRemoteUser(), ContainerLogType.LOCAL));\n      // check whether we have aggregated logs in RemoteFS. If exists, show the\n      // the log meta for the aggregated logs as well.\n      ApplicationId appId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application app \u003d this.nmContext.getApplications().get(appId);\n      String appOwner \u003d app \u003d\u003d null ? null : app.getUser();\n      try {\n        List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),\n                appId, containerIdStr,\n                this.nmContext.getNodeId().toString(), appOwner);\n        if (!containerLogMeta.isEmpty()) {\n          for (ContainerLogMeta logMeta : containerLogMeta) {\n            containersLogsInfo.add(new ContainerLogsInfo(logMeta,\n                ContainerLogType.AGGREGATED));\n          }\n        }\n      } catch (IOException ex) {\n        // Something wrong with we tries to access the remote fs for the logs.\n        // Skip it and do nothing\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder resp \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      resp.header(\"X-Content-Type-Options\", \"nosniff\");\n      return resp.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c9e1aeb94247a6e97215e902bdc71a325244243": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5224. Added new web-services /containers/{containerid}/logs \u0026 /containers/{containerid}/logs/{filename} and using them in \"yarn logs\" CLI to get logs of finished containers of a running application. Contributed by Xuan Gong.\n",
      "commitDate": "06/07/16 2:10 PM",
      "commitName": "4c9e1aeb94247a6e97215e902bdc71a325244243",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  public ContainerLogsInfo getContainerLogsInfo(@javax.ws.rs.core.Context\n+      HttpServletRequest hsr,\n+      @PathParam(\"containerid\") String containerIdStr) {\n+    ContainerId containerId \u003d null;\n+    init();\n+    try {\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (Exception e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+    try {\n+      return new ContainerLogsInfo(this.nmContext, containerId,\n+          hsr.getRemoteUser());\n+    } catch (YarnException ex) {\n+      throw new WebApplicationException(ex);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLogsInfo getContainerLogsInfo(@javax.ws.rs.core.Context\n      HttpServletRequest hsr,\n      @PathParam(\"containerid\") String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init();\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (Exception e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n    try {\n      return new ContainerLogsInfo(this.nmContext, containerId,\n          hsr.getRemoteUser());\n    } catch (YarnException ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebServices.java"
    }
  }
}