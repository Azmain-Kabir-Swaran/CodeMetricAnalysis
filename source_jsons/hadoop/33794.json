{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "buildLaunchOp",
  "functionId": "buildLaunchOp___ctx-ContainerRuntimeContext__commandFile-String__command-DockerCommand",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 1123,
  "functionEndLine": 1173,
  "numCommitsSeen": 142,
  "timeTaken": 5392,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "c2288ac45b748b4119442c46147ccc324926c340",
    "cb21eaa026d80a2c9836030d959c0dd7f87c4d6b",
    "c467f311d0c7155c09052d93fac12045af925583",
    "d3b1c6319546706c41a2011ead6c3fe208883200",
    "74a61438ca01e2191b54000af73b654a2d0b8253"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "c2288ac45b748b4119442c46147ccc324926c340": "Ybodychange",
    "cb21eaa026d80a2c9836030d959c0dd7f87c4d6b": "Ybodychange",
    "c467f311d0c7155c09052d93fac12045af925583": "Ymultichange(Yparameterchange,Ybodychange)",
    "d3b1c6319546706c41a2011ead6c3fe208883200": "Ybodychange",
    "74a61438ca01e2191b54000af73b654a2d0b8253": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/02/19 1:16 PM",
      "commitNameOld": "3dc252326693170ac1b31bf2914bae72ca73d31a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 31.09,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n   private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n       String commandFile, DockerCommand command) {\n \n     String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n     String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n     Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n             NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n     Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n     //we can\u0027t do better here thanks to type-erasure\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n \n     PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n             PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n \n     launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n         Integer.toString(PrivilegedOperation\n             .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n         ctx.getExecutionAttribute(APPID),\n         containerIdStr,\n         containerWorkDir.toString(),\n         nmPrivateContainerScriptPath.toUri().getPath(),\n         ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath());\n     Path keystorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\n     Path truststorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\n     if (keystorePath !\u003d null \u0026\u0026 truststorePath !\u003d null) {\n       launchOp.appendArgs(\"--https\",\n           keystorePath.toUri().getPath(),\n           truststorePath.toUri().getPath());\n     } else {\n       launchOp.appendArgs(\"--http\");\n     }\n     launchOp.appendArgs(\n         ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs),\n         commandFile);\n \n     String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n \n     if (tcCommandFile !\u003d null) {\n       launchOp.appendArgs(tcCommandFile);\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Launching container with cmd: \" + command);\n-    }\n+    LOG.debug(\"Launching container with cmd: {}\", command);\n \n     return launchOp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerCommand command) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n        Integer.toString(PrivilegedOperation\n            .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n        ctx.getExecutionAttribute(APPID),\n        containerIdStr,\n        containerWorkDir.toString(),\n        nmPrivateContainerScriptPath.toUri().getPath(),\n        ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath());\n    Path keystorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\n    Path truststorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\n    if (keystorePath !\u003d null \u0026\u0026 truststorePath !\u003d null) {\n      launchOp.appendArgs(\"--https\",\n          keystorePath.toUri().getPath(),\n          truststorePath.toUri().getPath());\n    } else {\n      launchOp.appendArgs(\"--http\");\n    }\n    launchOp.appendArgs(\n        ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs),\n        commandFile);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    LOG.debug(\"Launching container with cmd: {}\", command);\n\n    return launchOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "27/09/18 12:31 PM",
      "commitNameOld": "b237a0dd44ab285941983648d7ef26b99b30d624",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 19.05,
      "commitsBetweenForRepo": 190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,53 @@\n   private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n       String commandFile, DockerCommand command) {\n \n     String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n     String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n     Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n             NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n     Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n     //we can\u0027t do better here thanks to type-erasure\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n \n     PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n             PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n \n     launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n-            Integer.toString(PrivilegedOperation\n-                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n-            ctx.getExecutionAttribute(APPID),\n-            containerIdStr,\n-            containerWorkDir.toString(),\n-            nmPrivateContainerScriptPath.toUri().getPath(),\n-            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n-            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n-            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n-                    localDirs),\n-            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n-                    logDirs),\n-            commandFile);\n+        Integer.toString(PrivilegedOperation\n+            .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n+        ctx.getExecutionAttribute(APPID),\n+        containerIdStr,\n+        containerWorkDir.toString(),\n+        nmPrivateContainerScriptPath.toUri().getPath(),\n+        ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath());\n+    Path keystorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\n+    Path truststorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\n+    if (keystorePath !\u003d null \u0026\u0026 truststorePath !\u003d null) {\n+      launchOp.appendArgs(\"--https\",\n+          keystorePath.toUri().getPath(),\n+          truststorePath.toUri().getPath());\n+    } else {\n+      launchOp.appendArgs(\"--http\");\n+    }\n+    launchOp.appendArgs(\n+        ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n+        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+            localDirs),\n+        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+            logDirs),\n+        commandFile);\n \n     String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n \n     if (tcCommandFile !\u003d null) {\n       launchOp.appendArgs(tcCommandFile);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Launching container with cmd: \" + command);\n     }\n \n     return launchOp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerCommand command) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n        Integer.toString(PrivilegedOperation\n            .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n        ctx.getExecutionAttribute(APPID),\n        containerIdStr,\n        containerWorkDir.toString(),\n        nmPrivateContainerScriptPath.toUri().getPath(),\n        ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath());\n    Path keystorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH);\n    Path truststorePath \u003d ctx.getExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH);\n    if (keystorePath !\u003d null \u0026\u0026 truststorePath !\u003d null) {\n      launchOp.appendArgs(\"--https\",\n          keystorePath.toUri().getPath(),\n          truststorePath.toUri().getPath());\n    } else {\n      launchOp.appendArgs(\"--http\");\n    }\n    launchOp.appendArgs(\n        ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs),\n        commandFile);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Launching container with cmd: \" + command);\n    }\n\n    return launchOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "cb21eaa026d80a2c9836030d959c0dd7f87c4d6b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8656. container-executor should not write cgroup tasks files for docker containers. Contributed by Jim Brennan\n",
      "commitDate": "16/08/18 8:06 AM",
      "commitName": "cb21eaa026d80a2c9836030d959c0dd7f87c4d6b",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "02/08/18 8:43 AM",
      "commitNameOld": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 13.97,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,43 @@\n   private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n       String commandFile, DockerCommand command) {\n \n     String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n     String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n     Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n             NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n     Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n     //we can\u0027t do better here thanks to type-erasure\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n-    String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n \n     PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n             PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n \n     launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n             Integer.toString(PrivilegedOperation\n                     .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n             ctx.getExecutionAttribute(APPID),\n             containerIdStr,\n             containerWorkDir.toString(),\n             nmPrivateContainerScriptPath.toUri().getPath(),\n             ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n             ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     localDirs),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     logDirs),\n-            commandFile,\n-            resourcesOpts);\n+            commandFile);\n \n     String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n \n     if (tcCommandFile !\u003d null) {\n       launchOp.appendArgs(tcCommandFile);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Launching container with cmd: \" + command);\n     }\n \n     return launchOp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerCommand command) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n            Integer.toString(PrivilegedOperation\n                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n            ctx.getExecutionAttribute(APPID),\n            containerIdStr,\n            containerWorkDir.toString(),\n            nmPrivateContainerScriptPath.toUri().getPath(),\n            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    localDirs),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    logDirs),\n            commandFile);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Launching container with cmd: \" + command);\n    }\n\n    return launchOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
          "commitDate": "10/04/18 4:25 PM",
          "commitName": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "09/04/18 3:19 PM",
          "commitNameOld": "907919d28c1b7e4496d189b46ecbb86a10d41339",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.05,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n   private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n-      String commandFile, DockerRunCommand runCommand) {\n+      String commandFile, DockerCommand command) {\n \n     String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n     String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n     Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n             NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n     Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n     //we can\u0027t do better here thanks to type-erasure\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n     String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n \n     PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n             PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n \n     launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n             Integer.toString(PrivilegedOperation\n                     .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n             ctx.getExecutionAttribute(APPID),\n             containerIdStr,\n             containerWorkDir.toString(),\n             nmPrivateContainerScriptPath.toUri().getPath(),\n             ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n             ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     localDirs),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     logDirs),\n             commandFile,\n             resourcesOpts);\n \n     String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n \n     if (tcCommandFile !\u003d null) {\n       launchOp.appendArgs(tcCommandFile);\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Launching container with cmd: \" + runCommand);\n+      LOG.debug(\"Launching container with cmd: \" + command);\n     }\n \n     return launchOp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerCommand command) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n    String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n            Integer.toString(PrivilegedOperation\n                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n            ctx.getExecutionAttribute(APPID),\n            containerIdStr,\n            containerWorkDir.toString(),\n            nmPrivateContainerScriptPath.toUri().getPath(),\n            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    localDirs),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    logDirs),\n            commandFile,\n            resourcesOpts);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Launching container with cmd: \" + command);\n    }\n\n    return launchOp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[ctx-ContainerRuntimeContext, commandFile-String, runCommand-DockerRunCommand]",
            "newValue": "[ctx-ContainerRuntimeContext, commandFile-String, command-DockerCommand]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
          "commitDate": "10/04/18 4:25 PM",
          "commitName": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "09/04/18 3:19 PM",
          "commitNameOld": "907919d28c1b7e4496d189b46ecbb86a10d41339",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.05,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n   private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n-      String commandFile, DockerRunCommand runCommand) {\n+      String commandFile, DockerCommand command) {\n \n     String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n     String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n     Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n             NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n     Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n     //we can\u0027t do better here thanks to type-erasure\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n     String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n \n     PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n             PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n \n     launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n             Integer.toString(PrivilegedOperation\n                     .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n             ctx.getExecutionAttribute(APPID),\n             containerIdStr,\n             containerWorkDir.toString(),\n             nmPrivateContainerScriptPath.toUri().getPath(),\n             ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n             ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     localDirs),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     logDirs),\n             commandFile,\n             resourcesOpts);\n \n     String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n \n     if (tcCommandFile !\u003d null) {\n       launchOp.appendArgs(tcCommandFile);\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Launching container with cmd: \" + runCommand);\n+      LOG.debug(\"Launching container with cmd: \" + command);\n     }\n \n     return launchOp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerCommand command) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n    String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n            Integer.toString(PrivilegedOperation\n                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n            ctx.getExecutionAttribute(APPID),\n            containerIdStr,\n            containerWorkDir.toString(),\n            nmPrivateContainerScriptPath.toUri().getPath(),\n            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    localDirs),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    logDirs),\n            commandFile,\n            resourcesOpts);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Launching container with cmd: \" + command);\n    }\n\n    return launchOp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "d3b1c6319546706c41a2011ead6c3fe208883200": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6623. Add support to turn off launching privileged containers in the container-executor. (Varun Vasudev via wangda)\n\nChange-Id: I76aec68cbfb42d239279d7245a03290d691e87a4\n",
      "commitDate": "28/09/17 4:41 PM",
      "commitName": "d3b1c6319546706c41a2011ead6c3fe208883200",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "21/09/17 3:41 PM",
      "commitNameOld": "bfd1a72ba8fbb06da73fede2a85e0b544d6ab43f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 7.04,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n   private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n       String commandFile, DockerRunCommand runCommand) {\n \n     String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n     String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n     Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n             NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n     Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n     //we can\u0027t do better here thanks to type-erasure\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n     String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n \n     PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n             PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n \n     launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n             Integer.toString(PrivilegedOperation\n                     .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n             ctx.getExecutionAttribute(APPID),\n             containerIdStr,\n             containerWorkDir.toString(),\n             nmPrivateContainerScriptPath.toUri().getPath(),\n             ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n             ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     localDirs),\n             StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                     logDirs),\n             commandFile,\n             resourcesOpts);\n \n     String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n \n     if (tcCommandFile !\u003d null) {\n       launchOp.appendArgs(tcCommandFile);\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Launching container with cmd: \" + runCommand\n-              .getCommandWithArguments());\n+      LOG.debug(\"Launching container with cmd: \" + runCommand);\n     }\n \n     return launchOp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerRunCommand runCommand) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n    String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n            Integer.toString(PrivilegedOperation\n                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n            ctx.getExecutionAttribute(APPID),\n            containerIdStr,\n            containerWorkDir.toString(),\n            nmPrivateContainerScriptPath.toUri().getPath(),\n            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    localDirs),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    logDirs),\n            commandFile,\n            resourcesOpts);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Launching container with cmd: \" + runCommand);\n    }\n\n    return launchOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "74a61438ca01e2191b54000af73b654a2d0b8253": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6475. Fix some long function checkstyle issues\n(Contributed by Soumabrata Chakraborty via Daniel Templeton)\n",
      "commitDate": "10/05/17 10:46 AM",
      "commitName": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,46 @@\n+  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n+      String commandFile, DockerRunCommand runCommand) {\n+\n+    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n+    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n+    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n+            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n+    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n+    //we can\u0027t do better here thanks to type-erasure\n+    @SuppressWarnings(\"unchecked\")\n+    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n+    @SuppressWarnings(\"unchecked\")\n+    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n+    String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n+\n+    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n+            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n+\n+    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n+            Integer.toString(PrivilegedOperation\n+                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n+            ctx.getExecutionAttribute(APPID),\n+            containerIdStr,\n+            containerWorkDir.toString(),\n+            nmPrivateContainerScriptPath.toUri().getPath(),\n+            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n+            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n+            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+                    localDirs),\n+            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+                    logDirs),\n+            commandFile,\n+            resourcesOpts);\n+\n+    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n+\n+    if (tcCommandFile !\u003d null) {\n+      launchOp.appendArgs(tcCommandFile);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Launching container with cmd: \" + runCommand\n+              .getCommandWithArguments());\n+    }\n+\n+    return launchOp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PrivilegedOperation buildLaunchOp(ContainerRuntimeContext ctx,\n      String commandFile, DockerRunCommand runCommand) {\n\n    String runAsUser \u003d ctx.getExecutionAttribute(RUN_AS_USER);\n    String containerIdStr \u003d ctx.getContainer().getContainerId().toString();\n    Path nmPrivateContainerScriptPath \u003d ctx.getExecutionAttribute(\n            NM_PRIVATE_CONTAINER_SCRIPT_PATH);\n    Path containerWorkDir \u003d ctx.getExecutionAttribute(CONTAINER_WORK_DIR);\n    //we can\u0027t do better here thanks to type-erasure\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d ctx.getExecutionAttribute(LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e logDirs \u003d ctx.getExecutionAttribute(LOG_DIRS);\n    String resourcesOpts \u003d ctx.getExecutionAttribute(RESOURCES_OPTIONS);\n\n    PrivilegedOperation launchOp \u003d new PrivilegedOperation(\n            PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER);\n\n    launchOp.appendArgs(runAsUser, ctx.getExecutionAttribute(USER),\n            Integer.toString(PrivilegedOperation\n                    .RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),\n            ctx.getExecutionAttribute(APPID),\n            containerIdStr,\n            containerWorkDir.toString(),\n            nmPrivateContainerScriptPath.toUri().getPath(),\n            ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),\n            ctx.getExecutionAttribute(PID_FILE_PATH).toString(),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    localDirs),\n            StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                    logDirs),\n            commandFile,\n            resourcesOpts);\n\n    String tcCommandFile \u003d ctx.getExecutionAttribute(TC_COMMAND_FILE);\n\n    if (tcCommandFile !\u003d null) {\n      launchOp.appendArgs(tcCommandFile);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Launching container with cmd: \" + runCommand\n              .getCommandWithArguments());\n    }\n\n    return launchOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}