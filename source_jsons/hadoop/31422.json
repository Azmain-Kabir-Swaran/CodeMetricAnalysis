{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HBaseTimelineWriterImpl.java",
  "functionName": "write",
  "functionId": "write___context-TimelineCollectorContext__domain-TimelineDomain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
  "functionStartLine": 250,
  "functionEndLine": 283,
  "numCommitsSeen": 5,
  "timeTaken": 1602,
  "changeHistory": [
    "b220ec6f613dca4542e256008b1be2689c67bb03",
    "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db"
  ],
  "changeHistoryShort": {
    "b220ec6f613dca4542e256008b1be2689c67bb03": "Ybodychange",
    "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b220ec6f613dca4542e256008b1be2689c67bb03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9374.  Improve Timeline service resilience when HBase is unavailable.\n            Contributed by Prabhu Joseph and Szilard Nemeth\n",
      "commitDate": "24/06/19 9:19 AM",
      "commitName": "b220ec6f613dca4542e256008b1be2689c67bb03",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/05/18 1:00 PM",
      "commitNameOld": "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 403.85,
      "commitsBetweenForRepo": 3022,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public TimelineWriteResponse write(TimelineCollectorContext context,\n       TimelineDomain domain)\n       throws IOException {\n+    storageMonitor.checkStorageIsUp();\n     TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n \n     String clusterId \u003d context.getClusterId();\n     String domainId \u003d domain.getId();\n \n     // defensive coding to avoid NPE during row key construction\n     if (clusterId \u003d\u003d null) {\n       LOG.warn(\n           \"Found null for clusterId. Not proceeding with writing to hbase\");\n       return putStatus;\n     }\n \n     DomainRowKey domainRowKey \u003d new DomainRowKey(clusterId, domainId);\n     byte[] rowKey \u003d domainRowKey.getRowKey();\n \n     ColumnRWHelper.store(rowKey, domainTable, DomainColumn.CREATED_TIME, null,\n         domain.getCreatedTime());\n     ColumnRWHelper.store(rowKey, domainTable, DomainColumn.DESCRIPTION, null,\n         domain.getDescription());\n     ColumnRWHelper\n         .store(rowKey, domainTable, DomainColumn.MODIFICATION_TIME, null,\n             domain.getModifiedTime());\n     ColumnRWHelper.store(rowKey, domainTable, DomainColumn.OWNER, null,\n         domain.getOwner());\n     ColumnRWHelper.store(rowKey, domainTable, DomainColumn.READERS, null,\n         domain.getReaders());\n     ColumnRWHelper.store(rowKey, domainTable, DomainColumn.WRITERS, null,\n         domain.getWriters());\n     return putStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineDomain domain)\n      throws IOException {\n    storageMonitor.checkStorageIsUp();\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String domainId \u003d domain.getId();\n\n    // defensive coding to avoid NPE during row key construction\n    if (clusterId \u003d\u003d null) {\n      LOG.warn(\n          \"Found null for clusterId. Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    DomainRowKey domainRowKey \u003d new DomainRowKey(clusterId, domainId);\n    byte[] rowKey \u003d domainRowKey.getRowKey();\n\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.CREATED_TIME, null,\n        domain.getCreatedTime());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.DESCRIPTION, null,\n        domain.getDescription());\n    ColumnRWHelper\n        .store(rowKey, domainTable, DomainColumn.MODIFICATION_TIME, null,\n            domain.getModifiedTime());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.OWNER, null,\n        domain.getOwner());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.READERS, null,\n        domain.getReaders());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.WRITERS, null,\n        domain.getWriters());\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7933. [atsv2 read acls] Add TimelineWriter#writeDomain. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "16/05/18 1:00 PM",
      "commitName": "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,33 @@\n+  public TimelineWriteResponse write(TimelineCollectorContext context,\n+      TimelineDomain domain)\n+      throws IOException {\n+    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n+\n+    String clusterId \u003d context.getClusterId();\n+    String domainId \u003d domain.getId();\n+\n+    // defensive coding to avoid NPE during row key construction\n+    if (clusterId \u003d\u003d null) {\n+      LOG.warn(\n+          \"Found null for clusterId. Not proceeding with writing to hbase\");\n+      return putStatus;\n+    }\n+\n+    DomainRowKey domainRowKey \u003d new DomainRowKey(clusterId, domainId);\n+    byte[] rowKey \u003d domainRowKey.getRowKey();\n+\n+    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.CREATED_TIME, null,\n+        domain.getCreatedTime());\n+    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.DESCRIPTION, null,\n+        domain.getDescription());\n+    ColumnRWHelper\n+        .store(rowKey, domainTable, DomainColumn.MODIFICATION_TIME, null,\n+            domain.getModifiedTime());\n+    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.OWNER, null,\n+        domain.getOwner());\n+    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.READERS, null,\n+        domain.getReaders());\n+    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.WRITERS, null,\n+        domain.getWriters());\n+    return putStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineWriteResponse write(TimelineCollectorContext context,\n      TimelineDomain domain)\n      throws IOException {\n    TimelineWriteResponse putStatus \u003d new TimelineWriteResponse();\n\n    String clusterId \u003d context.getClusterId();\n    String domainId \u003d domain.getId();\n\n    // defensive coding to avoid NPE during row key construction\n    if (clusterId \u003d\u003d null) {\n      LOG.warn(\n          \"Found null for clusterId. Not proceeding with writing to hbase\");\n      return putStatus;\n    }\n\n    DomainRowKey domainRowKey \u003d new DomainRowKey(clusterId, domainId);\n    byte[] rowKey \u003d domainRowKey.getRowKey();\n\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.CREATED_TIME, null,\n        domain.getCreatedTime());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.DESCRIPTION, null,\n        domain.getDescription());\n    ColumnRWHelper\n        .store(rowKey, domainTable, DomainColumn.MODIFICATION_TIME, null,\n            domain.getModifiedTime());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.OWNER, null,\n        domain.getOwner());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.READERS, null,\n        domain.getReaders());\n    ColumnRWHelper.store(rowKey, domainTable, DomainColumn.WRITERS, null,\n        domain.getWriters());\n    return putStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
    }
  }
}