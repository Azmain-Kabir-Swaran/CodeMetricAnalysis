{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "buildInstance",
  "functionId": "buildInstance___context-ServiceContext__configuration-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 200,
  "functionEndLine": 284,
  "numCommitsSeen": 34,
  "timeTaken": 4771,
  "changeHistory": [
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
    "2d0662cfd57bd438421f912dc172e79a15835442",
    "9031a76d447f0c5eaa392144fd17c5b9812e1b20",
    "27d60a16342fd39973d43b61008f54a8815a6237",
    "3ebe6a7819292ce6bd557e36137531b59890c845",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "79bf5c084d4a063f1a933cae498af23edfd46792",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": "Ybodychange",
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": "Ybodychange",
    "2d0662cfd57bd438421f912dc172e79a15835442": "Ybodychange",
    "9031a76d447f0c5eaa392144fd17c5b9812e1b20": "Ybodychange",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Ybodychange",
    "3ebe6a7819292ce6bd557e36137531b59890c845": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ymultichange(Yexceptionschange,Ybodychange)",
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange)",
    "79bf5c084d4a063f1a933cae498af23edfd46792": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "28/08/18 10:55 AM",
      "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/08/18 4:49 PM",
      "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.75,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,85 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         !StringUtils.isEmpty(context.principal)\n         \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n       Configuration conf \u003d getConfig();\n       // Only take the first section of the principal\n       // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n       // This is because somehow zookeeper client only uses the first section\n       // for acl validations.\n       String username \u003d new HadoopKerberosName(context.principal.trim())\n           .getServiceName();\n       LOG.info(\"Set registry user accounts: sasl:\" + username);\n       conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n       registryClient \u003d RegistryOperationsFactory\n           .createKerberosInstance(conf,\n               \"Client\", context.principal, context.keytab);\n     } else {\n       registryClient \u003d RegistryOperationsFactory\n           .createInstance(\"ServiceScheduler\", configuration);\n     }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     nmClient.getClient().cleanupRunningContainersOnStop(false);\n     addIfService(nmClient);\n \n     dispatcher \u003d createAsyncDispatcher();\n     dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n     containerRecoveryTimeout \u003d YarnServiceConf.getInt(\n         YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n         YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS,\n         app.getConfiguration(), getConfig());\n \n+    if (YarnConfiguration\n+        .timelineServiceV2Enabled(getConfig())) {\n+      timelineServiceEnabled \u003d true;\n+    }\n+\n     serviceManager \u003d createServiceManager();\n     context.setServiceManager(serviceManager);\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    nmClient.getClient().cleanupRunningContainersOnStop(false);\n    addIfService(nmClient);\n\n    dispatcher \u003d createAsyncDispatcher();\n    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n    containerRecoveryTimeout \u003d YarnServiceConf.getInt(\n        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS,\n        app.getConfiguration(), getConfig());\n\n    if (YarnConfiguration\n        .timelineServiceV2Enabled(getConfig())) {\n      timelineServiceEnabled \u003d true;\n    }\n\n    serviceManager \u003d createServiceManager();\n    context.setServiceManager(serviceManager);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8298.  Added express upgrade for YARN service.\n            Contributed by Chandni Singh\n",
      "commitDate": "21/08/18 4:49 PM",
      "commitName": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/07/18 3:01 PM",
      "commitNameOld": "c7ebcd76bf3dd14127336951f2be3de772e7826a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 21.08,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,79 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         !StringUtils.isEmpty(context.principal)\n         \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n       Configuration conf \u003d getConfig();\n       // Only take the first section of the principal\n       // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n       // This is because somehow zookeeper client only uses the first section\n       // for acl validations.\n       String username \u003d new HadoopKerberosName(context.principal.trim())\n           .getServiceName();\n       LOG.info(\"Set registry user accounts: sasl:\" + username);\n       conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n       registryClient \u003d RegistryOperationsFactory\n           .createKerberosInstance(conf,\n               \"Client\", context.principal, context.keytab);\n     } else {\n       registryClient \u003d RegistryOperationsFactory\n           .createInstance(\"ServiceScheduler\", configuration);\n     }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     nmClient.getClient().cleanupRunningContainersOnStop(false);\n     addIfService(nmClient);\n \n-    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n+    dispatcher \u003d createAsyncDispatcher();\n     dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n     containerRecoveryTimeout \u003d YarnServiceConf.getInt(\n         YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n         YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS,\n         app.getConfiguration(), getConfig());\n+\n+    serviceManager \u003d createServiceManager();\n+    context.setServiceManager(serviceManager);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    nmClient.getClient().cleanupRunningContainersOnStop(false);\n    addIfService(nmClient);\n\n    dispatcher \u003d createAsyncDispatcher();\n    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n    containerRecoveryTimeout \u003d YarnServiceConf.getInt(\n        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS,\n        app.getConfiguration(), getConfig());\n\n    serviceManager \u003d createServiceManager();\n    context.setServiceManager(serviceManager);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "2d0662cfd57bd438421f912dc172e79a15835442": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8060.  Added default readiness check for service components.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "16/04/18 11:24 AM",
      "commitName": "2d0662cfd57bd438421f912dc172e79a15835442",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "13/04/18 12:34 PM",
      "commitNameOld": "9031a76d447f0c5eaa392144fd17c5b9812e1b20",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,76 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         !StringUtils.isEmpty(context.principal)\n         \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n       Configuration conf \u003d getConfig();\n       // Only take the first section of the principal\n       // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n       // This is because somehow zookeeper client only uses the first section\n       // for acl validations.\n       String username \u003d new HadoopKerberosName(context.principal.trim())\n           .getServiceName();\n       LOG.info(\"Set registry user accounts: sasl:\" + username);\n       conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n       registryClient \u003d RegistryOperationsFactory\n           .createKerberosInstance(conf,\n               \"Client\", context.principal, context.keytab);\n     } else {\n       registryClient \u003d RegistryOperationsFactory\n           .createInstance(\"ServiceScheduler\", configuration);\n     }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     nmClient.getClient().cleanupRunningContainersOnStop(false);\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n-    containerRecoveryTimeout \u003d getConfig().getInt(\n+    containerRecoveryTimeout \u003d YarnServiceConf.getInt(\n         YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n-        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n+        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS,\n+        app.getConfiguration(), getConfig());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    nmClient.getClient().cleanupRunningContainersOnStop(false);\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n    containerRecoveryTimeout \u003d YarnServiceConf.getInt(\n        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS,\n        app.getConfiguration(), getConfig());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "9031a76d447f0c5eaa392144fd17c5b9812e1b20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8142.  Improve SIGTERM handling for YARN Service Application Master.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "13/04/18 12:34 PM",
      "commitName": "9031a76d447f0c5eaa392144fd17c5b9812e1b20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/04/18 7:26 AM",
      "commitNameOld": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.21,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         !StringUtils.isEmpty(context.principal)\n         \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n       Configuration conf \u003d getConfig();\n       // Only take the first section of the principal\n       // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n       // This is because somehow zookeeper client only uses the first section\n       // for acl validations.\n       String username \u003d new HadoopKerberosName(context.principal.trim())\n           .getServiceName();\n       LOG.info(\"Set registry user accounts: sasl:\" + username);\n       conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n       registryClient \u003d RegistryOperationsFactory\n           .createKerberosInstance(conf,\n               \"Client\", context.principal, context.keytab);\n     } else {\n       registryClient \u003d RegistryOperationsFactory\n           .createInstance(\"ServiceScheduler\", configuration);\n     }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n+    nmClient.getClient().cleanupRunningContainersOnStop(false);\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n     containerRecoveryTimeout \u003d getConfig().getInt(\n         YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n         YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    nmClient.getClient().cleanupRunningContainersOnStop(false);\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n    containerRecoveryTimeout \u003d getConfig().getInt(\n        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/03/18 8:00 AM",
      "commitNameOld": "5ed689e33ac0becfc36d5fa424466bb1732aa59b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 25.28,
      "commitsBetweenForRepo": 309,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,74 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         !StringUtils.isEmpty(context.principal)\n         \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n       Configuration conf \u003d getConfig();\n       // Only take the first section of the principal\n       // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n       // This is because somehow zookeeper client only uses the first section\n       // for acl validations.\n       String username \u003d new HadoopKerberosName(context.principal.trim())\n           .getServiceName();\n       LOG.info(\"Set registry user accounts: sasl:\" + username);\n       conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n       registryClient \u003d RegistryOperationsFactory\n           .createKerberosInstance(conf,\n               \"Client\", context.principal, context.keytab);\n     } else {\n       registryClient \u003d RegistryOperationsFactory\n           .createInstance(\"ServiceScheduler\", configuration);\n     }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n+    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n     containerRecoveryTimeout \u003d getConfig().getInt(\n         YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n         YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n    containerRecoveryTimeout \u003d getConfig().getInt(\n        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "3ebe6a7819292ce6bd557e36137531b59890c845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7565. Yarn service pre-maturely releases the container after AM restart. Contributed by Chandni Singh\n",
      "commitDate": "12/12/17 1:35 PM",
      "commitName": "3ebe6a7819292ce6bd557e36137531b59890c845",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,73 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         !StringUtils.isEmpty(context.principal)\n         \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n       Configuration conf \u003d getConfig();\n       // Only take the first section of the principal\n       // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n       // This is because somehow zookeeper client only uses the first section\n       // for acl validations.\n       String username \u003d new HadoopKerberosName(context.principal.trim())\n           .getServiceName();\n       LOG.info(\"Set registry user accounts: sasl:\" + username);\n       conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n       registryClient \u003d RegistryOperationsFactory\n           .createKerberosInstance(conf,\n               \"Client\", context.principal, context.keytab);\n     } else {\n       registryClient \u003d RegistryOperationsFactory\n           .createInstance(\"ServiceScheduler\", configuration);\n     }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n+    containerRecoveryTimeout \u003d getConfig().getInt(\n+        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n+        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n    containerRecoveryTimeout \u003d getConfig().getInt(\n        YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS,\n        YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
          "commitDate": "04/12/17 12:11 PM",
          "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/11/17 7:58 AM",
          "commitNameOld": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 18.18,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,70 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n-      throws YarnException {\n+      throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n-    RegistryOperations registryClient \u003d RegistryOperationsFactory\n-        .createInstance(\"ServiceScheduler\", configuration);\n+    RegistryOperations registryClient \u003d null;\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n+        !StringUtils.isEmpty(context.principal)\n+        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n+      Configuration conf \u003d getConfig();\n+      // Only take the first section of the principal\n+      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n+      // This is because somehow zookeeper client only uses the first section\n+      // for acl validations.\n+      String username \u003d new HadoopKerberosName(context.principal.trim())\n+          .getServiceName();\n+      LOG.info(\"Set registry user accounts: sasl:\" + username);\n+      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n+      registryClient \u003d RegistryOperationsFactory\n+          .createKerberosInstance(conf,\n+              \"Client\", context.principal, context.keytab);\n+    } else {\n+      registryClient \u003d RegistryOperationsFactory\n+          .createInstance(\"ServiceScheduler\", configuration);\n+    }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n-    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n+    containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldValue": "[YarnException]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
          "commitDate": "04/12/17 12:11 PM",
          "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/11/17 7:58 AM",
          "commitNameOld": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 18.18,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,70 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n-      throws YarnException {\n+      throws YarnException, IOException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n-    RegistryOperations registryClient \u003d RegistryOperationsFactory\n-        .createInstance(\"ServiceScheduler\", configuration);\n+    RegistryOperations registryClient \u003d null;\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n+        !StringUtils.isEmpty(context.principal)\n+        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n+      Configuration conf \u003d getConfig();\n+      // Only take the first section of the principal\n+      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n+      // This is because somehow zookeeper client only uses the first section\n+      // for acl validations.\n+      String username \u003d new HadoopKerberosName(context.principal.trim())\n+          .getServiceName();\n+      LOG.info(\"Set registry user accounts: sasl:\" + username);\n+      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n+      registryClient \u003d RegistryOperationsFactory\n+          .createKerberosInstance(conf,\n+              \"Client\", context.principal, context.keytab);\n+    } else {\n+      registryClient \u003d RegistryOperationsFactory\n+          .createInstance(\"ServiceScheduler\", configuration);\n+    }\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n-    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n+    containerLaunchService \u003d new ContainerLaunchService(context);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException, IOException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        !StringUtils.isEmpty(context.principal)\n        \u0026\u0026 !StringUtils.isEmpty(context.keytab)) {\n      Configuration conf \u003d getConfig();\n      // Only take the first section of the principal\n      // e.g. hdfs-demo@EXAMPLE.COM will take hdfs-demo\n      // This is because somehow zookeeper client only uses the first section\n      // for acl validations.\n      String username \u003d new HadoopKerberosName(context.principal.trim())\n          .getServiceName();\n      LOG.info(\"Set registry user accounts: sasl:\" + username);\n      conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\n      registryClient \u003d RegistryOperationsFactory\n          .createKerberosInstance(conf,\n              \"Client\", context.principal, context.keytab);\n    } else {\n      registryClient \u003d RegistryOperationsFactory\n          .createInstance(\"ServiceScheduler\", configuration);\n    }\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He\n",
      "commitDate": "16/11/17 7:58 AM",
      "commitName": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 9.77,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,52 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException {\n     app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d RegistryOperationsFactory\n         .createInstance(\"ServiceScheduler\", configuration);\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n-    // register metrics\n+    // register metrics,\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n+    dispatcher.register(ComponentInstanceEventType.class,\n+        new ComponentInstanceEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n-    compInstanceDispatcher \u003d\n-        new AsyncDispatcher(\"CompInstance dispatcher\");\n-    compInstanceDispatcher.register(ComponentInstanceEventType.class,\n-        new ComponentInstanceEventHandler());\n-    addIfService(compInstanceDispatcher);\n     containerLaunchService \u003d new ContainerLaunchService(context.fs);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d RegistryOperationsFactory\n        .createInstance(\"ServiceScheduler\", configuration);\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics,\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,55 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException {\n-    app \u003d context.application;\n+    app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d RegistryOperationsFactory\n         .createInstance(\"ServiceScheduler\", configuration);\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n-    serviceMetrics.tag(\"appId\", \"Application id for service\", app.getId());\n+    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     compInstanceDispatcher \u003d\n         new AsyncDispatcher(\"CompInstance dispatcher\");\n     compInstanceDispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     addIfService(compInstanceDispatcher);\n     containerLaunchService \u003d new ContainerLaunchService(context.fs);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d RegistryOperationsFactory\n        .createInstance(\"ServiceScheduler\", configuration);\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    compInstanceDispatcher \u003d\n        new AsyncDispatcher(\"CompInstance dispatcher\");\n    compInstanceDispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    addIfService(compInstanceDispatcher);\n    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,55 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException {\n-    app \u003d context.application;\n+    app \u003d context.service;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d RegistryOperationsFactory\n         .createInstance(\"ServiceScheduler\", configuration);\n     addIfService(registryClient);\n     yarnRegistryOperations \u003d\n         createYarnRegistryOperations(context, registryClient);\n \n     // register metrics\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n-    serviceMetrics.tag(\"appId\", \"Application id for service\", app.getId());\n+    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n \n     amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n     nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     compInstanceDispatcher \u003d\n         new AsyncDispatcher(\"CompInstance dispatcher\");\n     compInstanceDispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     addIfService(compInstanceDispatcher);\n     containerLaunchService \u003d new ContainerLaunchService(context.fs);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException {\n    app \u003d context.service;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d RegistryOperationsFactory\n        .createInstance(\"ServiceScheduler\", configuration);\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    compInstanceDispatcher \u003d\n        new AsyncDispatcher(\"CompInstance dispatcher\");\n    compInstanceDispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    addIfService(compInstanceDispatcher);\n    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "79bf5c084d4a063f1a933cae498af23edfd46792": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,55 @@\n   public void buildInstance(ServiceContext context, Configuration configuration)\n       throws YarnException {\n     app \u003d context.application;\n     executorService \u003d Executors.newScheduledThreadPool(10);\n     RegistryOperations registryClient \u003d RegistryOperationsFactory\n         .createInstance(\"ServiceScheduler\", configuration);\n     addIfService(registryClient);\n+    yarnRegistryOperations \u003d\n+        createYarnRegistryOperations(context, registryClient);\n \n     // register metrics\n     serviceMetrics \u003d ServiceMetrics\n         .register(app.getName(), \"Metrics for service\");\n     serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n     serviceMetrics.tag(\"appId\", \"Application id for service\", app.getId());\n \n-    amRMClient \u003d\n-        AMRMClientAsync.createAMRMClientAsync(1000, new AMRMClientCallback());\n+    amRMClient \u003d createAMRMClient();\n     addIfService(amRMClient);\n \n-    nmClient \u003d NMClientAsync.createNMClientAsync(new NMClientCallback());\n+    nmClient \u003d createNMClient();\n     addIfService(nmClient);\n \n     dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n     dispatcher.register(ComponentEventType.class,\n         new ComponentEventHandler());\n     dispatcher.setDrainEventsOnStop();\n     addIfService(dispatcher);\n \n     compInstanceDispatcher \u003d\n         new AsyncDispatcher(\"CompInstance dispatcher\");\n     compInstanceDispatcher.register(ComponentInstanceEventType.class,\n         new ComponentInstanceEventHandler());\n     addIfService(compInstanceDispatcher);\n     containerLaunchService \u003d new ContainerLaunchService(context.fs);\n     addService(containerLaunchService);\n \n     if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n       TimelineV2Client timelineClient \u003d TimelineV2Client\n           .createTimelineClient(context.attemptId.getApplicationId());\n       amRMClient.registerTimelineV2Client(timelineClient);\n       serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n       addService(serviceTimelinePublisher);\n       DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n           \"For processing metrics to ATS\",\n           new ServiceMetricsSink(serviceTimelinePublisher));\n       LOG.info(\"Timeline v2 is enabled.\");\n     }\n \n-    yarnRegistryOperations \u003d\n-        new YarnRegistryViewForProviders(registryClient,\n-            RegistryUtils.currentUser(), SliderKeys.APP_TYPE, app.getName(),\n-            context.attemptId);\n     initGlobalTokensForSubstitute(context);\n     //substitute quicklinks\n     ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n     createConfigFileCache(context.fs.getFileSystem());\n \n     createAllComponents();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException {\n    app \u003d context.application;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d RegistryOperationsFactory\n        .createInstance(\"ServiceScheduler\", configuration);\n    addIfService(registryClient);\n    yarnRegistryOperations \u003d\n        createYarnRegistryOperations(context, registryClient);\n\n    // register metrics\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Application id for service\", app.getId());\n\n    amRMClient \u003d createAMRMClient();\n    addIfService(amRMClient);\n\n    nmClient \u003d createNMClient();\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    compInstanceDispatcher \u003d\n        new AsyncDispatcher(\"CompInstance dispatcher\");\n    compInstanceDispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    addIfService(compInstanceDispatcher);\n    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,58 @@\n+  public void buildInstance(ServiceContext context, Configuration configuration)\n+      throws YarnException {\n+    app \u003d context.application;\n+    executorService \u003d Executors.newScheduledThreadPool(10);\n+    RegistryOperations registryClient \u003d RegistryOperationsFactory\n+        .createInstance(\"ServiceScheduler\", configuration);\n+    addIfService(registryClient);\n+\n+    // register metrics\n+    serviceMetrics \u003d ServiceMetrics\n+        .register(app.getName(), \"Metrics for service\");\n+    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n+    serviceMetrics.tag(\"appId\", \"Application id for service\", app.getId());\n+\n+    amRMClient \u003d\n+        AMRMClientAsync.createAMRMClientAsync(1000, new AMRMClientCallback());\n+    addIfService(amRMClient);\n+\n+    nmClient \u003d NMClientAsync.createNMClientAsync(new NMClientCallback());\n+    addIfService(nmClient);\n+\n+    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n+    dispatcher.register(ComponentEventType.class,\n+        new ComponentEventHandler());\n+    dispatcher.setDrainEventsOnStop();\n+    addIfService(dispatcher);\n+\n+    compInstanceDispatcher \u003d\n+        new AsyncDispatcher(\"CompInstance dispatcher\");\n+    compInstanceDispatcher.register(ComponentInstanceEventType.class,\n+        new ComponentInstanceEventHandler());\n+    addIfService(compInstanceDispatcher);\n+    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n+    addService(containerLaunchService);\n+\n+    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n+      TimelineV2Client timelineClient \u003d TimelineV2Client\n+          .createTimelineClient(context.attemptId.getApplicationId());\n+      amRMClient.registerTimelineV2Client(timelineClient);\n+      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n+      addService(serviceTimelinePublisher);\n+      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n+          \"For processing metrics to ATS\",\n+          new ServiceMetricsSink(serviceTimelinePublisher));\n+      LOG.info(\"Timeline v2 is enabled.\");\n+    }\n+\n+    yarnRegistryOperations \u003d\n+        new YarnRegistryViewForProviders(registryClient,\n+            RegistryUtils.currentUser(), SliderKeys.APP_TYPE, app.getName(),\n+            context.attemptId);\n+    initGlobalTokensForSubstitute(context);\n+    //substitute quicklinks\n+    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n+    createConfigFileCache(context.fs.getFileSystem());\n+\n+    createAllComponents();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildInstance(ServiceContext context, Configuration configuration)\n      throws YarnException {\n    app \u003d context.application;\n    executorService \u003d Executors.newScheduledThreadPool(10);\n    RegistryOperations registryClient \u003d RegistryOperationsFactory\n        .createInstance(\"ServiceScheduler\", configuration);\n    addIfService(registryClient);\n\n    // register metrics\n    serviceMetrics \u003d ServiceMetrics\n        .register(app.getName(), \"Metrics for service\");\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\n    serviceMetrics.tag(\"appId\", \"Application id for service\", app.getId());\n\n    amRMClient \u003d\n        AMRMClientAsync.createAMRMClientAsync(1000, new AMRMClientCallback());\n    addIfService(amRMClient);\n\n    nmClient \u003d NMClientAsync.createNMClientAsync(new NMClientCallback());\n    addIfService(nmClient);\n\n    dispatcher \u003d new AsyncDispatcher(\"Component  dispatcher\");\n    dispatcher.register(ComponentEventType.class,\n        new ComponentEventHandler());\n    dispatcher.setDrainEventsOnStop();\n    addIfService(dispatcher);\n\n    compInstanceDispatcher \u003d\n        new AsyncDispatcher(\"CompInstance dispatcher\");\n    compInstanceDispatcher.register(ComponentInstanceEventType.class,\n        new ComponentInstanceEventHandler());\n    addIfService(compInstanceDispatcher);\n    containerLaunchService \u003d new ContainerLaunchService(context.fs);\n    addService(containerLaunchService);\n\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n      TimelineV2Client timelineClient \u003d TimelineV2Client\n          .createTimelineClient(context.attemptId.getApplicationId());\n      amRMClient.registerTimelineV2Client(timelineClient);\n      serviceTimelinePublisher \u003d new ServiceTimelinePublisher(timelineClient);\n      addService(serviceTimelinePublisher);\n      DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\",\n          \"For processing metrics to ATS\",\n          new ServiceMetricsSink(serviceTimelinePublisher));\n      LOG.info(\"Timeline v2 is enabled.\");\n    }\n\n    yarnRegistryOperations \u003d\n        new YarnRegistryViewForProviders(registryClient,\n            RegistryUtils.currentUser(), SliderKeys.APP_TYPE, app.getName(),\n            context.attemptId);\n    initGlobalTokensForSubstitute(context);\n    //substitute quicklinks\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\n    createConfigFileCache(context.fs.getFileSystem());\n\n    createAllComponents();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}