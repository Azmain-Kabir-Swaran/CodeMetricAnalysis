{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Mover.java",
  "functionName": "chooseTarget",
  "functionId": "chooseTarget___db-DBlock__source-Source__targetTypes-List__StorageType____matcher-Matcher",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
  "functionStartLine": 521,
  "functionEndLine": 539,
  "numCommitsSeen": 57,
  "timeTaken": 2691,
  "changeHistory": [
    "4da6f69ca129b28a5dad0a66d0c24e725ce25a3a",
    "a26aa6bd0716da89853566961390d711511084e3",
    "8ea20b53a861a2771c206afaacf8e7783568c4b1",
    "5d5aae0694bc27df5b9fa50819854cd3050a8658"
  ],
  "changeHistoryShort": {
    "4da6f69ca129b28a5dad0a66d0c24e725ce25a3a": "Ybodychange",
    "a26aa6bd0716da89853566961390d711511084e3": "Ymultichange(Yparameterchange,Ybodychange)",
    "8ea20b53a861a2771c206afaacf8e7783568c4b1": "Ybodychange",
    "5d5aae0694bc27df5b9fa50819854cd3050a8658": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4da6f69ca129b28a5dad0a66d0c24e725ce25a3a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10335 Mover$Processor#chooseTarget() always chooses the first matching target storage group.  Contributed by  Mingliang Liu\n",
      "commitDate": "29/04/16 11:22 AM",
      "commitName": "4da6f69ca129b28a5dad0a66d0c24e725ce25a3a",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "05/10/15 12:52 AM",
      "commitNameOld": "0faa4efa3dd74de9cc39584bf6e88cfbf3e9a045",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 207.44,
      "commitsBetweenForRepo": 1382,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n     boolean chooseTarget(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n       final NetworkTopology cluster \u003d dispatcher.getCluster(); \n       for (StorageType t : targetTypes) {\n-        for(StorageGroup target : storages.getTargetStorages(t)) {\n+        final List\u003cStorageGroup\u003e targets \u003d storages.getTargetStorages(t);\n+        Collections.shuffle(targets);\n+        for (StorageGroup target : targets) {\n           if (matcher.match(cluster, source.getDatanodeInfo(),\n               target.getDatanodeInfo())) {\n             final PendingMove pm \u003d source.addPendingMove(db, target);\n             if (pm !\u003d null) {\n               dispatcher.executePendingMove(pm);\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    boolean chooseTarget(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n      final NetworkTopology cluster \u003d dispatcher.getCluster(); \n      for (StorageType t : targetTypes) {\n        final List\u003cStorageGroup\u003e targets \u003d storages.getTargetStorages(t);\n        Collections.shuffle(targets);\n        for (StorageGroup target : targets) {\n          if (matcher.match(cluster, source.getDatanodeInfo(),\n              target.getDatanodeInfo())) {\n            final PendingMove pm \u003d source.addPendingMove(db, target);\n            if (pm !\u003d null) {\n              dispatcher.executePendingMove(pm);\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
      "extendedDetails": {}
    },
    "a26aa6bd0716da89853566961390d711511084e3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/14 2:20 PM",
      "commitName": "a26aa6bd0716da89853566961390d711511084e3",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/14 2:20 PM",
          "commitName": "a26aa6bd0716da89853566961390d711511084e3",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 10:38 AM",
          "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,17 @@\n-    boolean chooseTarget(DBlock db, MLocation ml, Source source,\n+    boolean chooseTarget(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n       final NetworkTopology cluster \u003d dispatcher.getCluster(); \n-      for(final Iterator\u003cStorageType\u003e i \u003d targetTypes.iterator(); i.hasNext(); ) {\n-        final StorageType t \u003d i.next();\n+      for (StorageType t : targetTypes) {\n         for(StorageGroup target : storages.getTargetStorages(t)) {\n-          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())) {\n+          if (matcher.match(cluster, source.getDatanodeInfo(),\n+              target.getDatanodeInfo())) {\n             final PendingMove pm \u003d source.addPendingMove(db, target);\n             if (pm !\u003d null) {\n-              i.remove();\n               dispatcher.executePendingMove(pm);\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean chooseTarget(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n      final NetworkTopology cluster \u003d dispatcher.getCluster(); \n      for (StorageType t : targetTypes) {\n        for(StorageGroup target : storages.getTargetStorages(t)) {\n          if (matcher.match(cluster, source.getDatanodeInfo(),\n              target.getDatanodeInfo())) {\n            final PendingMove pm \u003d source.addPendingMove(db, target);\n            if (pm !\u003d null) {\n              dispatcher.executePendingMove(pm);\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {
            "oldValue": "[db-DBlock, ml-MLocation, source-Source, targetTypes-List\u003cStorageType\u003e, matcher-Matcher]",
            "newValue": "[db-DBlock, source-Source, targetTypes-List\u003cStorageType\u003e, matcher-Matcher]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/14 2:20 PM",
          "commitName": "a26aa6bd0716da89853566961390d711511084e3",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 10:38 AM",
          "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,17 @@\n-    boolean chooseTarget(DBlock db, MLocation ml, Source source,\n+    boolean chooseTarget(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n       final NetworkTopology cluster \u003d dispatcher.getCluster(); \n-      for(final Iterator\u003cStorageType\u003e i \u003d targetTypes.iterator(); i.hasNext(); ) {\n-        final StorageType t \u003d i.next();\n+      for (StorageType t : targetTypes) {\n         for(StorageGroup target : storages.getTargetStorages(t)) {\n-          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())) {\n+          if (matcher.match(cluster, source.getDatanodeInfo(),\n+              target.getDatanodeInfo())) {\n             final PendingMove pm \u003d source.addPendingMove(db, target);\n             if (pm !\u003d null) {\n-              i.remove();\n               dispatcher.executePendingMove(pm);\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean chooseTarget(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n      final NetworkTopology cluster \u003d dispatcher.getCluster(); \n      for (StorageType t : targetTypes) {\n        for(StorageGroup target : storages.getTargetStorages(t)) {\n          if (matcher.match(cluster, source.getDatanodeInfo(),\n              target.getDatanodeInfo())) {\n            final PendingMove pm \u003d source.addPendingMove(db, target);\n            if (pm !\u003d null) {\n              dispatcher.executePendingMove(pm);\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {}
        }
      ]
    },
    "8ea20b53a861a2771c206afaacf8e7783568c4b1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6911. Archival Storage: check if a block is already scheduled in Mover. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "27/08/14 10:38 AM",
      "commitName": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/08/14 4:41 PM",
      "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,18 @@\n     boolean chooseTarget(DBlock db, MLocation ml, Source source,\n         List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n       final NetworkTopology cluster \u003d dispatcher.getCluster(); \n       for(final Iterator\u003cStorageType\u003e i \u003d targetTypes.iterator(); i.hasNext(); ) {\n         final StorageType t \u003d i.next();\n         for(StorageGroup target : storages.getTargetStorages(t)) {\n-          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())\n-              \u0026\u0026 dispatcher.isGoodBlockCandidate(source, target, t, db)) {\n-            final PendingMove pm \u003d dispatcher.new PendingMove(db, source, target);\n-            if (pm.chooseProxySource()) {\n+          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())) {\n+            final PendingMove pm \u003d source.addPendingMove(db, target);\n+            if (pm !\u003d null) {\n               i.remove();\n-              target.incScheduledSize(ml.size);\n               dispatcher.executePendingMove(pm);\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    boolean chooseTarget(DBlock db, MLocation ml, Source source,\n        List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n      final NetworkTopology cluster \u003d dispatcher.getCluster(); \n      for(final Iterator\u003cStorageType\u003e i \u003d targetTypes.iterator(); i.hasNext(); ) {\n        final StorageType t \u003d i.next();\n        for(StorageGroup target : storages.getTargetStorages(t)) {\n          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())) {\n            final PendingMove pm \u003d source.addPendingMove(db, target);\n            if (pm !\u003d null) {\n              i.remove();\n              dispatcher.executePendingMove(pm);\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
      "extendedDetails": {}
    },
    "5d5aae0694bc27df5b9fa50819854cd3050a8658": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6801. Archival Storage: Add a new data migration tool. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1618675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/14 10:51 AM",
      "commitName": "5d5aae0694bc27df5b9fa50819854cd3050a8658",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,20 @@\n+    boolean chooseTarget(DBlock db, MLocation ml, Source source,\n+        List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n+      final NetworkTopology cluster \u003d dispatcher.getCluster(); \n+      for(final Iterator\u003cStorageType\u003e i \u003d targetTypes.iterator(); i.hasNext(); ) {\n+        final StorageType t \u003d i.next();\n+        for(StorageGroup target : storages.getTargetStorages(t)) {\n+          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())\n+              \u0026\u0026 dispatcher.isGoodBlockCandidate(source, target, t, db)) {\n+            final PendingMove pm \u003d dispatcher.new PendingMove(db, source, target);\n+            if (pm.chooseProxySource()) {\n+              i.remove();\n+              target.incScheduledSize(ml.size);\n+              dispatcher.executePendingMove(pm);\n+              return true;\n+            }\n+          }\n+        }\n+      }\n+      return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    boolean chooseTarget(DBlock db, MLocation ml, Source source,\n        List\u003cStorageType\u003e targetTypes, Matcher matcher) {\n      final NetworkTopology cluster \u003d dispatcher.getCluster(); \n      for(final Iterator\u003cStorageType\u003e i \u003d targetTypes.iterator(); i.hasNext(); ) {\n        final StorageType t \u003d i.next();\n        for(StorageGroup target : storages.getTargetStorages(t)) {\n          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())\n              \u0026\u0026 dispatcher.isGoodBlockCandidate(source, target, t, db)) {\n            final PendingMove pm \u003d dispatcher.new PendingMove(db, source, target);\n            if (pm.chooseProxySource()) {\n              i.remove();\n              target.incScheduledSize(ml.size);\n              dispatcher.executePendingMove(pm);\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java"
    }
  }
}