{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramPortmap.java",
  "functionName": "messageReceived",
  "functionId": "messageReceived___ctx-ChannelHandlerContext__e-MessageEvent",
  "sourceFilePath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/portmap/RpcProgramPortmap.java",
  "functionStartLine": 154,
  "functionEndLine": 188,
  "numCommitsSeen": 7,
  "timeTaken": 1164,
  "changeHistory": [
    "4a1acfc96fb7d418ff3fe538a3942834948f6d1c",
    "a379a7bbb9d9da669ccdc0dd5e6f6514af43ae78"
  ],
  "changeHistoryShort": {
    "4a1acfc96fb7d418ff3fe538a3942834948f6d1c": "Ybodychange",
    "a379a7bbb9d9da669ccdc0dd5e6f6514af43ae78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a1acfc96fb7d418ff3fe538a3942834948f6d1c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5548. Use ConcurrentHashMap in portmap. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/13 10:13 AM",
      "commitName": "4a1acfc96fb7d418ff3fe538a3942834948f6d1c",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "21/11/13 2:43 PM",
      "commitNameOld": "a379a7bbb9d9da669ccdc0dd5e6f6514af43ae78",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 4.81,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n       throws Exception {\n \n     RpcInfo info \u003d (RpcInfo) e.getMessage();\n     RpcCall rpcCall \u003d (RpcCall) info.header();\n-    final Procedure portmapProc \u003d Procedure.fromValue(rpcCall.getProcedure());\n+    final int portmapProc \u003d rpcCall.getProcedure();\n     int xid \u003d rpcCall.getXid();\n     XDR in \u003d new XDR(info.data().toByteBuffer().asReadOnlyBuffer(),\n         XDR.State.READING);\n     XDR out \u003d new XDR();\n \n-    if (portmapProc \u003d\u003d Procedure.PMAPPROC_NULL) {\n+    if (portmapProc \u003d\u003d PMAPPROC_NULL) {\n       out \u003d nullOp(xid, in, out);\n-    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_SET) {\n+    } else if (portmapProc \u003d\u003d PMAPPROC_SET) {\n       out \u003d set(xid, in, out);\n-    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_UNSET) {\n+    } else if (portmapProc \u003d\u003d PMAPPROC_UNSET) {\n       out \u003d unset(xid, in, out);\n-    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_DUMP) {\n+    } else if (portmapProc \u003d\u003d PMAPPROC_DUMP) {\n       out \u003d dump(xid, in, out);\n-    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_GETPORT) {\n+    } else if (portmapProc \u003d\u003d PMAPPROC_GETPORT) {\n       out \u003d getport(xid, in, out);\n-    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_GETVERSADDR) {\n+    } else if (portmapProc \u003d\u003d PMAPPROC_GETVERSADDR) {\n       out \u003d getport(xid, in, out);\n     } else {\n       LOG.info(\"PortmapHandler unknown rpc procedure\u003d\" + portmapProc);\n       RpcAcceptedReply reply \u003d RpcAcceptedReply.getInstance(xid,\n           RpcAcceptedReply.AcceptState.PROC_UNAVAIL, new VerifierNone());\n       reply.write(out);\n     }\n \n     ChannelBuffer buf \u003d ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap()\n         .buffer());\n     RpcResponse rsp \u003d new RpcResponse(buf, info.remoteAddress());\n     RpcUtil.sendRpcResponse(ctx, rsp);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n      throws Exception {\n\n    RpcInfo info \u003d (RpcInfo) e.getMessage();\n    RpcCall rpcCall \u003d (RpcCall) info.header();\n    final int portmapProc \u003d rpcCall.getProcedure();\n    int xid \u003d rpcCall.getXid();\n    XDR in \u003d new XDR(info.data().toByteBuffer().asReadOnlyBuffer(),\n        XDR.State.READING);\n    XDR out \u003d new XDR();\n\n    if (portmapProc \u003d\u003d PMAPPROC_NULL) {\n      out \u003d nullOp(xid, in, out);\n    } else if (portmapProc \u003d\u003d PMAPPROC_SET) {\n      out \u003d set(xid, in, out);\n    } else if (portmapProc \u003d\u003d PMAPPROC_UNSET) {\n      out \u003d unset(xid, in, out);\n    } else if (portmapProc \u003d\u003d PMAPPROC_DUMP) {\n      out \u003d dump(xid, in, out);\n    } else if (portmapProc \u003d\u003d PMAPPROC_GETPORT) {\n      out \u003d getport(xid, in, out);\n    } else if (portmapProc \u003d\u003d PMAPPROC_GETVERSADDR) {\n      out \u003d getport(xid, in, out);\n    } else {\n      LOG.info(\"PortmapHandler unknown rpc procedure\u003d\" + portmapProc);\n      RpcAcceptedReply reply \u003d RpcAcceptedReply.getInstance(xid,\n          RpcAcceptedReply.AcceptState.PROC_UNAVAIL, new VerifierNone());\n      reply.write(out);\n    }\n\n    ChannelBuffer buf \u003d ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap()\n        .buffer());\n    RpcResponse rsp \u003d new RpcResponse(buf, info.remoteAddress());\n    RpcUtil.sendRpcResponse(ctx, rsp);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/portmap/RpcProgramPortmap.java",
      "extendedDetails": {}
    },
    "a379a7bbb9d9da669ccdc0dd5e6f6514af43ae78": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5288. Close idle connections in portmap. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544352 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 2:43 PM",
      "commitName": "a379a7bbb9d9da669ccdc0dd5e6f6514af43ae78",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,35 @@\n+  public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n+      throws Exception {\n+\n+    RpcInfo info \u003d (RpcInfo) e.getMessage();\n+    RpcCall rpcCall \u003d (RpcCall) info.header();\n+    final Procedure portmapProc \u003d Procedure.fromValue(rpcCall.getProcedure());\n+    int xid \u003d rpcCall.getXid();\n+    XDR in \u003d new XDR(info.data().toByteBuffer().asReadOnlyBuffer(),\n+        XDR.State.READING);\n+    XDR out \u003d new XDR();\n+\n+    if (portmapProc \u003d\u003d Procedure.PMAPPROC_NULL) {\n+      out \u003d nullOp(xid, in, out);\n+    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_SET) {\n+      out \u003d set(xid, in, out);\n+    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_UNSET) {\n+      out \u003d unset(xid, in, out);\n+    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_DUMP) {\n+      out \u003d dump(xid, in, out);\n+    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_GETPORT) {\n+      out \u003d getport(xid, in, out);\n+    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_GETVERSADDR) {\n+      out \u003d getport(xid, in, out);\n+    } else {\n+      LOG.info(\"PortmapHandler unknown rpc procedure\u003d\" + portmapProc);\n+      RpcAcceptedReply reply \u003d RpcAcceptedReply.getInstance(xid,\n+          RpcAcceptedReply.AcceptState.PROC_UNAVAIL, new VerifierNone());\n+      reply.write(out);\n+    }\n+\n+    ChannelBuffer buf \u003d ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap()\n+        .buffer());\n+    RpcResponse rsp \u003d new RpcResponse(buf, info.remoteAddress());\n+    RpcUtil.sendRpcResponse(ctx, rsp);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n      throws Exception {\n\n    RpcInfo info \u003d (RpcInfo) e.getMessage();\n    RpcCall rpcCall \u003d (RpcCall) info.header();\n    final Procedure portmapProc \u003d Procedure.fromValue(rpcCall.getProcedure());\n    int xid \u003d rpcCall.getXid();\n    XDR in \u003d new XDR(info.data().toByteBuffer().asReadOnlyBuffer(),\n        XDR.State.READING);\n    XDR out \u003d new XDR();\n\n    if (portmapProc \u003d\u003d Procedure.PMAPPROC_NULL) {\n      out \u003d nullOp(xid, in, out);\n    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_SET) {\n      out \u003d set(xid, in, out);\n    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_UNSET) {\n      out \u003d unset(xid, in, out);\n    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_DUMP) {\n      out \u003d dump(xid, in, out);\n    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_GETPORT) {\n      out \u003d getport(xid, in, out);\n    } else if (portmapProc \u003d\u003d Procedure.PMAPPROC_GETVERSADDR) {\n      out \u003d getport(xid, in, out);\n    } else {\n      LOG.info(\"PortmapHandler unknown rpc procedure\u003d\" + portmapProc);\n      RpcAcceptedReply reply \u003d RpcAcceptedReply.getInstance(xid,\n          RpcAcceptedReply.AcceptState.PROC_UNAVAIL, new VerifierNone());\n      reply.write(out);\n    }\n\n    ChannelBuffer buf \u003d ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap()\n        .buffer());\n    RpcResponse rsp \u003d new RpcResponse(buf, info.remoteAddress());\n    RpcUtil.sendRpcResponse(ctx, rsp);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/portmap/RpcProgramPortmap.java"
    }
  }
}