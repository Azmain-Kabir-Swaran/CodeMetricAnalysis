{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsyncDispatcher.java",
  "functionName": "dispatch",
  "functionId": "dispatch___event-Event",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
  "functionStartLine": 212,
  "functionEndLine": 239,
  "numCommitsSeen": 41,
  "timeTaken": 8955,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
    "07ab89e8bb3f647cef4f80f39237169a0c6a8520",
    "614b6afea450ebb897fbb2519c6f02e13b9bd12d",
    "81a456e6386e1241c14b3b6b62dc2e5d445f5ee7",
    "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "a945336368eb26bebb23940170befd435bc57a65",
    "5ee495e6f34faff231ad87ec890188eb63617393",
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
    "08da8ea5db5359fc04010be486b842a5d2e6b9c2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509": "Ybodychange",
    "07ab89e8bb3f647cef4f80f39237169a0c6a8520": "Ybodychange",
    "614b6afea450ebb897fbb2519c6f02e13b9bd12d": "Ybodychange",
    "81a456e6386e1241c14b3b6b62dc2e5d445f5ee7": "Ybodychange",
    "64e4fb983e022d8d3375a3e1b8facbf95f7ba403": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "a945336368eb26bebb23940170befd435bc57a65": "Ybodychange",
    "5ee495e6f34faff231ad87ec890188eb63617393": "Ybodychange",
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8": "Ybodychange",
    "08da8ea5db5359fc04010be486b842a5d2e6b9c2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n-          + event.toString());\n-    }\n+    LOG.debug(\"Dispatching the event {}.{}\", event.getClass().getName(),\n+        event);\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       EventHandler handler \u003d eventDispatchers.get(type);\n       if(handler !\u003d null) {\n         handler.handle(event);\n       } else {\n         throw new Exception(\"No handler for registered for \" + type);\n       }\n     } catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.error(FATAL, \"Error in dispatcher thread\", t);\n       // If serviceStop is called, we should exit this thread gracefully.\n       if (exitOnDispatchException\n           \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n           \u0026\u0026 stopped \u003d\u003d false) {\n         stopped \u003d true;\n         Thread shutDownThread \u003d new Thread(createShutDownThread());\n         shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n         shutDownThread.start();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    LOG.debug(\"Dispatching the event {}.{}\", event.getClass().getName(),\n        event);\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      EventHandler handler \u003d eventDispatchers.get(type);\n      if(handler !\u003d null) {\n        handler.handle(event);\n      } else {\n        throw new Exception(\"No handler for registered for \" + type);\n      }\n    } catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.error(FATAL, \"Error in dispatcher thread\", t);\n      // If serviceStop is called, we should exit this thread gracefully.\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n          \u0026\u0026 stopped \u003d\u003d false) {\n        stopped \u003d true;\n        Thread shutDownThread \u003d new Thread(createShutDownThread());\n        shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n        shutDownThread.start();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7477. Moving logging APIs over to slf4j in hadoop-yarn-common. Contributed by Prabhu Joseph.\n",
      "commitDate": "03/03/19 11:59 PM",
      "commitName": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "19/04/17 11:44 AM",
      "commitNameOld": "dd43b895c2e50fa97cb7327be77509b87dad1823",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 683.55,
      "commitsBetweenForRepo": 5547,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       EventHandler handler \u003d eventDispatchers.get(type);\n       if(handler !\u003d null) {\n         handler.handle(event);\n       } else {\n         throw new Exception(\"No handler for registered for \" + type);\n       }\n     } catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n-      LOG.fatal(\"Error in dispatcher thread\", t);\n+      LOG.error(FATAL, \"Error in dispatcher thread\", t);\n       // If serviceStop is called, we should exit this thread gracefully.\n       if (exitOnDispatchException\n           \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n           \u0026\u0026 stopped \u003d\u003d false) {\n         stopped \u003d true;\n         Thread shutDownThread \u003d new Thread(createShutDownThread());\n         shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n         shutDownThread.start();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      EventHandler handler \u003d eventDispatchers.get(type);\n      if(handler !\u003d null) {\n        handler.handle(event);\n      } else {\n        throw new Exception(\"No handler for registered for \" + type);\n      }\n    } catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.error(FATAL, \"Error in dispatcher thread\", t);\n      // If serviceStop is called, we should exit this thread gracefully.\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n          \u0026\u0026 stopped \u003d\u003d false) {\n        stopped \u003d true;\n        Thread shutDownThread \u003d new Thread(createShutDownThread());\n        shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n        shutDownThread.start();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "07ab89e8bb3f647cef4f80f39237169a0c6a8520": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5809. AsyncDispatcher possibly invokes multiple shutdown threads when handling exception (Jian He via Varun Saxena)\n",
      "commitDate": "31/10/16 4:07 PM",
      "commitName": "07ab89e8bb3f647cef4f80f39237169a0c6a8520",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "16/09/16 10:05 PM",
      "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 44.75,
      "commitsBetweenForRepo": 356,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       EventHandler handler \u003d eventDispatchers.get(type);\n       if(handler !\u003d null) {\n         handler.handle(event);\n       } else {\n         throw new Exception(\"No handler for registered for \" + type);\n       }\n     } catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread\", t);\n       // If serviceStop is called, we should exit this thread gracefully.\n       if (exitOnDispatchException\n           \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n           \u0026\u0026 stopped \u003d\u003d false) {\n+        stopped \u003d true;\n         Thread shutDownThread \u003d new Thread(createShutDownThread());\n         shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n         shutDownThread.start();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      EventHandler handler \u003d eventDispatchers.get(type);\n      if(handler !\u003d null) {\n        handler.handle(event);\n      } else {\n        throw new Exception(\"No handler for registered for \" + type);\n      }\n    } catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      // If serviceStop is called, we should exit this thread gracefully.\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n          \u0026\u0026 stopped \u003d\u003d false) {\n        stopped \u003d true;\n        Thread shutDownThread \u003d new Thread(createShutDownThread());\n        shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n        shutDownThread.start();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "614b6afea450ebb897fbb2519c6f02e13b9bd12d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2917. Fixed potential deadlock when system.exit is called in AsyncDispatcher. Contributed by Rohith Sharmaks\n",
      "commitDate": "11/12/14 11:17 AM",
      "commitName": "614b6afea450ebb897fbb2519c6f02e13b9bd12d",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/14 3:17 PM",
      "commitNameOld": "81a456e6386e1241c14b3b6b62dc2e5d445f5ee7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 268.88,
      "commitsBetweenForRepo": 2170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       EventHandler handler \u003d eventDispatchers.get(type);\n       if(handler !\u003d null) {\n         handler.handle(event);\n       } else {\n         throw new Exception(\"No handler for registered for \" + type);\n       }\n     } catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread\", t);\n       // If serviceStop is called, we should exit this thread gracefully.\n       if (exitOnDispatchException\n           \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n           \u0026\u0026 stopped \u003d\u003d false) {\n-        LOG.info(\"Exiting, bbye..\");\n-        System.exit(-1);\n+        Thread shutDownThread \u003d new Thread(createShutDownThread());\n+        shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n+        shutDownThread.start();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      EventHandler handler \u003d eventDispatchers.get(type);\n      if(handler !\u003d null) {\n        handler.handle(event);\n      } else {\n        throw new Exception(\"No handler for registered for \" + type);\n      }\n    } catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      // If serviceStop is called, we should exit this thread gracefully.\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n          \u0026\u0026 stopped \u003d\u003d false) {\n        Thread shutDownThread \u003d new Thread(createShutDownThread());\n        shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\n        shutDownThread.start();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "81a456e6386e1241c14b3b6b62dc2e5d445f5ee7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1591. Fixed AsyncDispatcher to handle interrupts on shutdown in a sane manner and thus fix failure of TestResourceTrackerService. Contributed by Tsuyoshi Ozawa.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578628 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 3:17 PM",
      "commitName": "81a456e6386e1241c14b3b6b62dc2e5d445f5ee7",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/12/13 5:10 PM",
      "commitNameOld": "460ac8cb50e024b60e02a96c2ab27368dfe0944d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 76.88,
      "commitsBetweenForRepo": 610,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       EventHandler handler \u003d eventDispatchers.get(type);\n       if(handler !\u003d null) {\n         handler.handle(event);\n       } else {\n         throw new Exception(\"No handler for registered for \" + type);\n       }\n-    }\n-    catch (Throwable t) {\n+    } catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread\", t);\n+      // If serviceStop is called, we should exit this thread gracefully.\n       if (exitOnDispatchException\n-          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false) {\n+          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n+          \u0026\u0026 stopped \u003d\u003d false) {\n         LOG.info(\"Exiting, bbye..\");\n         System.exit(-1);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      EventHandler handler \u003d eventDispatchers.get(type);\n      if(handler !\u003d null) {\n        handler.handle(event);\n      } else {\n        throw new Exception(\"No handler for registered for \" + type);\n      }\n    } catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      // If serviceStop is called, we should exit this thread gracefully.\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false\n          \u0026\u0026 stopped \u003d\u003d false) {\n        LOG.info(\"Exiting, bbye..\");\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "64e4fb983e022d8d3375a3e1b8facbf95f7ba403": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4819. AM can rerun job after reporting final job status to the client (bobby and Bikas Saha via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429114 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 12:35 PM",
      "commitName": "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/10/12 8:20 AM",
      "commitNameOld": "614a743fea5ab5181b2b7989bba84146e81039de",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 72.22,
      "commitsBetweenForRepo": 301,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,27 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n-      eventDispatchers.get(type).handle(event);\n+      EventHandler handler \u003d eventDispatchers.get(type);\n+      if(handler !\u003d null) {\n+        handler.handle(event);\n+      } else {\n+        throw new Exception(\"No handler for registered for \" + type);\n+      }\n     }\n     catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread\", t);\n       if (exitOnDispatchException\n           \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false) {\n         LOG.info(\"Exiting, bbye..\");\n         System.exit(-1);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      EventHandler handler \u003d eventDispatchers.get(type);\n      if(handler !\u003d null) {\n        handler.handle(event);\n      } else {\n        throw new Exception(\"No handler for registered for \" + type);\n      }\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false) {\n        LOG.info(\"Exiting, bbye..\");\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false) {\n        LOG.info(\"Exiting, bbye..\");\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
      }
    },
    "a945336368eb26bebb23940170befd435bc57a65": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4031. Prevent a Node Manager hang during shutdown. (Contributed by Devaraj K)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1353038 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/06/12 2:40 PM",
      "commitName": "a945336368eb26bebb23940170befd435bc57a65",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "20/02/12 9:08 PM",
      "commitNameOld": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 122.69,
      "commitsBetweenForRepo": 791,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       eventDispatchers.get(type).handle(event);\n     }\n     catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread\", t);\n-      if (exitOnDispatchException) {\n+      if (exitOnDispatchException\n+          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false) {\n         LOG.info(\"Exiting, bbye..\");\n         System.exit(-1);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      if (exitOnDispatchException\n          \u0026\u0026 (ShutdownHookManager.get().isShutdownInProgress()) \u003d\u003d false) {\n        LOG.info(\"Exiting, bbye..\");\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "5ee495e6f34faff231ad87ec890188eb63617393": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3634. Fixed all daemons to crash instead of hanging around when their EventHandlers get exceptions. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/12 9:08 PM",
      "commitName": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/12/11 2:34 PM",
      "commitNameOld": "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 60.27,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n           + event.toString());\n     }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       eventDispatchers.get(type).handle(event);\n     }\n     catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n-      LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n+      LOG.fatal(\"Error in dispatcher thread\", t);\n       if (exitOnDispatchException) {\n+        LOG.info(\"Exiting, bbye..\");\n         System.exit(-1);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread\", t);\n      if (exitOnDispatchException) {\n        LOG.info(\"Exiting, bbye..\");\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3567. Extraneous JobConf objects in AM heap. Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1222498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/12/11 2:34 PM",
      "commitName": "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "01/12/11 12:35 AM",
      "commitNameOld": "08da8ea5db5359fc04010be486b842a5d2e6b9c2",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n-    LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n-        + event.toString());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n+          + event.toString());\n+    }\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       eventDispatchers.get(type).handle(event);\n     }\n     catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n       if (exitOnDispatchException) {\n         System.exit(-1);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n          + event.toString());\n    }\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n      if (exitOnDispatchException) {\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "08da8ea5db5359fc04010be486b842a5d2e6b9c2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3463. Second AM fails to recover properly when first AM is killed with java.lang.IllegalArgumentException causing lost job. (Siddharth Seth via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/12/11 12:35 AM",
      "commitName": "08da8ea5db5359fc04010be486b842a5d2e6b9c2",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "19/10/11 3:59 PM",
      "commitNameOld": "aeae1ba497ae5b22ecbd26fce9fe1dc2c9dbd49a",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 42.4,
      "commitsBetweenForRepo": 289,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,18 @@\n   protected void dispatch(Event event) {\n     //all events go thru this loop\n     LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n         + event.toString());\n \n     Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n \n     try{\n       eventDispatchers.get(type).handle(event);\n     }\n     catch (Throwable t) {\n       //TODO Maybe log the state of the queue\n       LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n-      System.exit(-1);\n+      if (exitOnDispatchException) {\n+        System.exit(-1);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n        + event.toString());\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n      if (exitOnDispatchException) {\n        System.exit(-1);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n        + event.toString());\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  protected void dispatch(Event event) {\n+    //all events go thru this loop\n+    LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n+        + event.toString());\n+\n+    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n+\n+    try{\n+      eventDispatchers.get(type).handle(event);\n+    }\n+    catch (Throwable t) {\n+      //TODO Maybe log the state of the queue\n+      LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n+      System.exit(-1);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void dispatch(Event event) {\n    //all events go thru this loop\n    LOG.debug(\"Dispatching the event \" + event.getClass().getName() + \".\"\n        + event.toString());\n\n    Class\u003c? extends Enum\u003e type \u003d event.getType().getDeclaringClass();\n\n    try{\n      eventDispatchers.get(type).handle(event);\n    }\n    catch (Throwable t) {\n      //TODO Maybe log the state of the queue\n      LOG.fatal(\"Error in dispatcher thread. Exiting..\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
    }
  }
}