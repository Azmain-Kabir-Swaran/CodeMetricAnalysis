{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PrivilegedOperationExecutor.java",
  "functionName": "squashCGroupOperations",
  "functionId": "squashCGroupOperations___ops-List__PrivilegedOperation__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
  "functionStartLine": 278,
  "functionEndLine": 336,
  "numCommitsSeen": 11,
  "timeTaken": 1090,
  "changeHistory": [
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "c40bdb56a79fe1499c2284d493edc84620c0c078",
    "838b06ac87339494cea706d4a97e7f5383bdc442"
  ],
  "changeHistoryShort": {
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "c40bdb56a79fe1499c2284d493edc84620c0c078": "Ybodychange",
    "838b06ac87339494cea706d4a97e7f5383bdc442": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/07/15 4:29 AM",
      "commitNameOld": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public static PrivilegedOperation squashCGroupOperations\n   (List\u003cPrivilegedOperation\u003e ops) throws PrivilegedOperationException {\n     if (ops.size() \u003d\u003d 0) {\n       return null;\n     }\n \n     StringBuffer finalOpArg \u003d new StringBuffer(PrivilegedOperation\n         .CGROUP_ARG_PREFIX);\n-    boolean noneArgsOnly \u003d true;\n+    boolean noTasks \u003d true;\n \n     for (PrivilegedOperation op : ops) {\n       if (!op.getOperationType()\n           .equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\n         LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\n         throw new PrivilegedOperationException(\"Unsupported operation type:\"\n             + op.getOperationType());\n       }\n \n       List\u003cString\u003e args \u003d op.getArguments();\n       if (args.size() !\u003d 1) {\n         LOG.warn(\"Invalid number of args: \" + args.size());\n         throw new PrivilegedOperationException(\"Invalid number of args: \"\n             + args.size());\n       }\n \n       String arg \u003d args.get(0);\n       String tasksFile \u003d StringUtils.substringAfter(arg,\n           PrivilegedOperation.CGROUP_ARG_PREFIX);\n       if (tasksFile \u003d\u003d null || tasksFile.isEmpty()) {\n         LOG.warn(\"Invalid argument: \" + arg);\n         throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\n       }\n \n-      if (tasksFile.equals(\"none\")) {\n+      if (tasksFile.equals(PrivilegedOperation.CGROUP_ARG_NO_TASKS)) {\n         //Don\u0027t append to finalOpArg\n         continue;\n       }\n \n-      if (noneArgsOnly \u003d\u003d false) {\n+      if (noTasks \u003d\u003d false) {\n         //We have already appended at least one tasks file.\n         finalOpArg.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);\n         finalOpArg.append(tasksFile);\n       } else {\n         finalOpArg.append(tasksFile);\n-        noneArgsOnly \u003d false;\n+        noTasks \u003d false;\n       }\n     }\n \n-    if (noneArgsOnly) {\n-      finalOpArg.append(\"none\"); //there were no tasks file to append\n+    if (noTasks) {\n+      finalOpArg.append(PrivilegedOperation.CGROUP_ARG_NO_TASKS); //there\n+      // were no tasks file to append\n     }\n \n     PrivilegedOperation finalOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg\n         .toString());\n \n     return finalOp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PrivilegedOperation squashCGroupOperations\n  (List\u003cPrivilegedOperation\u003e ops) throws PrivilegedOperationException {\n    if (ops.size() \u003d\u003d 0) {\n      return null;\n    }\n\n    StringBuffer finalOpArg \u003d new StringBuffer(PrivilegedOperation\n        .CGROUP_ARG_PREFIX);\n    boolean noTasks \u003d true;\n\n    for (PrivilegedOperation op : ops) {\n      if (!op.getOperationType()\n          .equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\n        LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\n        throw new PrivilegedOperationException(\"Unsupported operation type:\"\n            + op.getOperationType());\n      }\n\n      List\u003cString\u003e args \u003d op.getArguments();\n      if (args.size() !\u003d 1) {\n        LOG.warn(\"Invalid number of args: \" + args.size());\n        throw new PrivilegedOperationException(\"Invalid number of args: \"\n            + args.size());\n      }\n\n      String arg \u003d args.get(0);\n      String tasksFile \u003d StringUtils.substringAfter(arg,\n          PrivilegedOperation.CGROUP_ARG_PREFIX);\n      if (tasksFile \u003d\u003d null || tasksFile.isEmpty()) {\n        LOG.warn(\"Invalid argument: \" + arg);\n        throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\n      }\n\n      if (tasksFile.equals(PrivilegedOperation.CGROUP_ARG_NO_TASKS)) {\n        //Don\u0027t append to finalOpArg\n        continue;\n      }\n\n      if (noTasks \u003d\u003d false) {\n        //We have already appended at least one tasks file.\n        finalOpArg.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);\n        finalOpArg.append(tasksFile);\n      } else {\n        finalOpArg.append(tasksFile);\n        noTasks \u003d false;\n      }\n    }\n\n    if (noTasks) {\n      finalOpArg.append(PrivilegedOperation.CGROUP_ARG_NO_TASKS); //there\n      // were no tasks file to append\n    }\n\n    PrivilegedOperation finalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg\n        .toString());\n\n    return finalOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
      "extendedDetails": {}
    },
    "c40bdb56a79fe1499c2284d493edc84620c0c078": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2194. Fix bug causing CGroups functionality to fail on RHEL7. Contributed by Wei Yan.\n",
      "commitDate": "07/07/15 4:29 AM",
      "commitName": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "13/04/15 6:35 PM",
      "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 84.41,
      "commitsBetweenForRepo": 719,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public static PrivilegedOperation squashCGroupOperations\n   (List\u003cPrivilegedOperation\u003e ops) throws PrivilegedOperationException {\n     if (ops.size() \u003d\u003d 0) {\n       return null;\n     }\n \n     StringBuffer finalOpArg \u003d new StringBuffer(PrivilegedOperation\n         .CGROUP_ARG_PREFIX);\n     boolean noneArgsOnly \u003d true;\n \n     for (PrivilegedOperation op : ops) {\n       if (!op.getOperationType()\n           .equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\n         LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\n         throw new PrivilegedOperationException(\"Unsupported operation type:\"\n             + op.getOperationType());\n       }\n \n       List\u003cString\u003e args \u003d op.getArguments();\n       if (args.size() !\u003d 1) {\n         LOG.warn(\"Invalid number of args: \" + args.size());\n         throw new PrivilegedOperationException(\"Invalid number of args: \"\n             + args.size());\n       }\n \n       String arg \u003d args.get(0);\n       String tasksFile \u003d StringUtils.substringAfter(arg,\n           PrivilegedOperation.CGROUP_ARG_PREFIX);\n       if (tasksFile \u003d\u003d null || tasksFile.isEmpty()) {\n         LOG.warn(\"Invalid argument: \" + arg);\n         throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\n       }\n \n       if (tasksFile.equals(\"none\")) {\n         //Don\u0027t append to finalOpArg\n         continue;\n       }\n \n       if (noneArgsOnly \u003d\u003d false) {\n         //We have already appended at least one tasks file.\n-        finalOpArg.append(\",\");\n+        finalOpArg.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);\n         finalOpArg.append(tasksFile);\n       } else {\n         finalOpArg.append(tasksFile);\n         noneArgsOnly \u003d false;\n       }\n     }\n \n     if (noneArgsOnly) {\n       finalOpArg.append(\"none\"); //there were no tasks file to append\n     }\n \n     PrivilegedOperation finalOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg\n         .toString());\n \n     return finalOp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PrivilegedOperation squashCGroupOperations\n  (List\u003cPrivilegedOperation\u003e ops) throws PrivilegedOperationException {\n    if (ops.size() \u003d\u003d 0) {\n      return null;\n    }\n\n    StringBuffer finalOpArg \u003d new StringBuffer(PrivilegedOperation\n        .CGROUP_ARG_PREFIX);\n    boolean noneArgsOnly \u003d true;\n\n    for (PrivilegedOperation op : ops) {\n      if (!op.getOperationType()\n          .equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\n        LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\n        throw new PrivilegedOperationException(\"Unsupported operation type:\"\n            + op.getOperationType());\n      }\n\n      List\u003cString\u003e args \u003d op.getArguments();\n      if (args.size() !\u003d 1) {\n        LOG.warn(\"Invalid number of args: \" + args.size());\n        throw new PrivilegedOperationException(\"Invalid number of args: \"\n            + args.size());\n      }\n\n      String arg \u003d args.get(0);\n      String tasksFile \u003d StringUtils.substringAfter(arg,\n          PrivilegedOperation.CGROUP_ARG_PREFIX);\n      if (tasksFile \u003d\u003d null || tasksFile.isEmpty()) {\n        LOG.warn(\"Invalid argument: \" + arg);\n        throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\n      }\n\n      if (tasksFile.equals(\"none\")) {\n        //Don\u0027t append to finalOpArg\n        continue;\n      }\n\n      if (noneArgsOnly \u003d\u003d false) {\n        //We have already appended at least one tasks file.\n        finalOpArg.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);\n        finalOpArg.append(tasksFile);\n      } else {\n        finalOpArg.append(tasksFile);\n        noneArgsOnly \u003d false;\n      }\n    }\n\n    if (noneArgsOnly) {\n      finalOpArg.append(\"none\"); //there were no tasks file to append\n    }\n\n    PrivilegedOperation finalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg\n        .toString());\n\n    return finalOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
      "extendedDetails": {}
    },
    "838b06ac87339494cea706d4a97e7f5383bdc442": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3443. Create a \u0027ResourceHandler\u0027 subsystem to ease addition of support for new resource types on the NM. Contributed by Sidharta Seethana.\n",
      "commitDate": "13/04/15 6:35 PM",
      "commitName": "838b06ac87339494cea706d4a97e7f5383bdc442",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,58 @@\n+  public static PrivilegedOperation squashCGroupOperations\n+  (List\u003cPrivilegedOperation\u003e ops) throws PrivilegedOperationException {\n+    if (ops.size() \u003d\u003d 0) {\n+      return null;\n+    }\n+\n+    StringBuffer finalOpArg \u003d new StringBuffer(PrivilegedOperation\n+        .CGROUP_ARG_PREFIX);\n+    boolean noneArgsOnly \u003d true;\n+\n+    for (PrivilegedOperation op : ops) {\n+      if (!op.getOperationType()\n+          .equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\n+        LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\n+        throw new PrivilegedOperationException(\"Unsupported operation type:\"\n+            + op.getOperationType());\n+      }\n+\n+      List\u003cString\u003e args \u003d op.getArguments();\n+      if (args.size() !\u003d 1) {\n+        LOG.warn(\"Invalid number of args: \" + args.size());\n+        throw new PrivilegedOperationException(\"Invalid number of args: \"\n+            + args.size());\n+      }\n+\n+      String arg \u003d args.get(0);\n+      String tasksFile \u003d StringUtils.substringAfter(arg,\n+          PrivilegedOperation.CGROUP_ARG_PREFIX);\n+      if (tasksFile \u003d\u003d null || tasksFile.isEmpty()) {\n+        LOG.warn(\"Invalid argument: \" + arg);\n+        throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\n+      }\n+\n+      if (tasksFile.equals(\"none\")) {\n+        //Don\u0027t append to finalOpArg\n+        continue;\n+      }\n+\n+      if (noneArgsOnly \u003d\u003d false) {\n+        //We have already appended at least one tasks file.\n+        finalOpArg.append(\",\");\n+        finalOpArg.append(tasksFile);\n+      } else {\n+        finalOpArg.append(tasksFile);\n+        noneArgsOnly \u003d false;\n+      }\n+    }\n+\n+    if (noneArgsOnly) {\n+      finalOpArg.append(\"none\"); //there were no tasks file to append\n+    }\n+\n+    PrivilegedOperation finalOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg\n+        .toString());\n+\n+    return finalOp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static PrivilegedOperation squashCGroupOperations\n  (List\u003cPrivilegedOperation\u003e ops) throws PrivilegedOperationException {\n    if (ops.size() \u003d\u003d 0) {\n      return null;\n    }\n\n    StringBuffer finalOpArg \u003d new StringBuffer(PrivilegedOperation\n        .CGROUP_ARG_PREFIX);\n    boolean noneArgsOnly \u003d true;\n\n    for (PrivilegedOperation op : ops) {\n      if (!op.getOperationType()\n          .equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {\n        LOG.warn(\"Unsupported operation type: \" + op.getOperationType());\n        throw new PrivilegedOperationException(\"Unsupported operation type:\"\n            + op.getOperationType());\n      }\n\n      List\u003cString\u003e args \u003d op.getArguments();\n      if (args.size() !\u003d 1) {\n        LOG.warn(\"Invalid number of args: \" + args.size());\n        throw new PrivilegedOperationException(\"Invalid number of args: \"\n            + args.size());\n      }\n\n      String arg \u003d args.get(0);\n      String tasksFile \u003d StringUtils.substringAfter(arg,\n          PrivilegedOperation.CGROUP_ARG_PREFIX);\n      if (tasksFile \u003d\u003d null || tasksFile.isEmpty()) {\n        LOG.warn(\"Invalid argument: \" + arg);\n        throw new PrivilegedOperationException(\"Invalid argument: \" + arg);\n      }\n\n      if (tasksFile.equals(\"none\")) {\n        //Don\u0027t append to finalOpArg\n        continue;\n      }\n\n      if (noneArgsOnly \u003d\u003d false) {\n        //We have already appended at least one tasks file.\n        finalOpArg.append(\",\");\n        finalOpArg.append(tasksFile);\n      } else {\n        finalOpArg.append(tasksFile);\n        noneArgsOnly \u003d false;\n      }\n    }\n\n    if (noneArgsOnly) {\n      finalOpArg.append(\"none\"); //there were no tasks file to append\n    }\n\n    PrivilegedOperation finalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP, finalOpArg\n        .toString());\n\n    return finalOp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java"
    }
  }
}