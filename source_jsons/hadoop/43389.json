{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComponentInstance.java",
  "functionName": "handleComponentInstanceRelaunch",
  "functionId": "handleComponentInstanceRelaunch___compInstance-ComponentInstance__event-ComponentInstanceEvent__failureBeforeLaunch-boolean__containerDiag-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
  "functionStartLine": 331,
  "functionEndLine": 407,
  "numCommitsSeen": 68,
  "timeTaken": 3103,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
    "8c7f6b2d4df2e5ca7b766db68213b778d28f198b",
    "913f87dada27776c539dfb352400ecf8d40e7943",
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
    "861095f761b40171e0dc25f769f486d910cc3e88",
    "40fad32824d2f8f960c779d78357e62103453da0",
    "7f083ed8699a720d3fb82e4ec310356902a6ac30"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "824dfa3b099a09f18db6b0a3285eb4379ab72c2d": "Ybodychange",
    "8c7f6b2d4df2e5ca7b766db68213b778d28f198b": "Ybodychange",
    "913f87dada27776c539dfb352400ecf8d40e7943": "Ybodychange",
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": "Ymultichange(Yparameterchange,Ybodychange)",
    "861095f761b40171e0dc25f769f486d910cc3e88": "Ybodychange",
    "40fad32824d2f8f960c779d78357e62103453da0": "Ymultichange(Yparameterchange,Ybodychange)",
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/01/19 3:43 PM",
      "commitNameOld": "a33ef4fd311784dc15401eb54c82e78528c4f961",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 31.83,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n       ComponentInstanceEvent event, boolean failureBeforeLaunch,\n       String containerDiag) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n         event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n     ContainerState containerState \u003d\n         hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n \n     if (compInstance.getContainerSpec() !\u003d null) {\n       compInstance.getContainerSpec().setState(containerState);\n     }\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n \n       StringBuilder builder \u003d new StringBuilder();\n-      builder.append(compInstance.getCompInstanceId()).append(\": \");\n-      builder.append(event.getContainerId()).append(\n-          \" completed. Reinsert back to pending list and requested \");\n-      builder.append(\"a new container.\").append(System.lineSeparator());\n-      builder.append(\" exitStatus\u003d\").append(\n-          failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n-              event.getStatus().getExitStatus());\n-      builder.append(\", diagnostics\u003d\");\n-      builder.append(failureBeforeLaunch ?\n-          FAILED_BEFORE_LAUNCH_DIAG :\n-          (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n-              UPGRADE_FAILED));\n+      builder.append(compInstance.getCompInstanceId()).append(\": \")\n+          .append(event.getContainerId()).append(\n+              \" completed. Reinsert back to pending list and requested \")\n+          .append(\"a new container.\").append(System.lineSeparator())\n+          .append(\" exitStatus\u003d\").append(\n+              failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n+                  event.getStatus().getExitStatus())\n+          .append(\", diagnostics\u003d\")\n+          .append(failureBeforeLaunch ?\n+              FAILED_BEFORE_LAUNCH_DIAG :\n+              (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n+                  UPGRADE_FAILED));\n \n       if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n         LOG.error(builder.toString());\n       } else{\n         LOG.info(builder.toString());\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         LOG.info(\"Publishing component instance status {} {} \",\n             event.getContainerId(), containerState);\n         int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n             ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n             event.getContainerId(), exitStatus,\n             containerState, containerDiag);\n       }\n \n     } else{\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else{\n         comp.markAsSucceeded(compInstance);\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n             ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n             event.getContainerId(), exitStatus,\n             containerState, containerDiag);\n       }\n \n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfNeeded(comp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n      String containerDiag) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n        event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n    ContainerState containerState \u003d\n        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n\n    if (compInstance.getContainerSpec() !\u003d null) {\n      compInstance.getContainerSpec().setState(containerState);\n    }\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \")\n          .append(event.getContainerId()).append(\n              \" completed. Reinsert back to pending list and requested \")\n          .append(\"a new container.\").append(System.lineSeparator())\n          .append(\" exitStatus\u003d\").append(\n              failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n                  event.getStatus().getExitStatus())\n          .append(\", diagnostics\u003d\")\n          .append(failureBeforeLaunch ?\n              FAILED_BEFORE_LAUNCH_DIAG :\n              (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n                  UPGRADE_FAILED));\n\n      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else{\n        LOG.info(builder.toString());\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        LOG.info(\"Publishing component instance status {} {} \",\n            event.getContainerId(), containerState);\n        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), exitStatus,\n            containerState, containerDiag);\n      }\n\n    } else{\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else{\n        comp.markAsSucceeded(compInstance);\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), exitStatus,\n            containerState, containerDiag);\n      }\n\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfNeeded(comp);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "824dfa3b099a09f18db6b0a3285eb4379ab72c2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8489.  Support \"dominant\" component concept in YARN service.\n            Contributed by Zac Zhou\n",
      "commitDate": "18/01/19 5:23 PM",
      "commitName": "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/01/19 10:49 AM",
      "commitNameOld": "8c7f6b2d4df2e5ca7b766db68213b778d28f198b",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 0.27,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n       ComponentInstanceEvent event, boolean failureBeforeLaunch,\n       String containerDiag) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n         event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n     ContainerState containerState \u003d\n         hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n \n     if (compInstance.getContainerSpec() !\u003d null) {\n       compInstance.getContainerSpec().setState(containerState);\n     }\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(compInstance.getCompInstanceId()).append(\": \");\n       builder.append(event.getContainerId()).append(\n           \" completed. Reinsert back to pending list and requested \");\n       builder.append(\"a new container.\").append(System.lineSeparator());\n       builder.append(\" exitStatus\u003d\").append(\n           failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n               event.getStatus().getExitStatus());\n       builder.append(\", diagnostics\u003d\");\n       builder.append(failureBeforeLaunch ?\n           FAILED_BEFORE_LAUNCH_DIAG :\n           (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n               UPGRADE_FAILED));\n \n       if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n         LOG.error(builder.toString());\n       } else{\n         LOG.info(builder.toString());\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         LOG.info(\"Publishing component instance status {} {} \",\n             event.getContainerId(), containerState);\n         int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n             ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n             event.getContainerId(), exitStatus,\n             containerState, containerDiag);\n       }\n \n     } else{\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else{\n         comp.markAsSucceeded(compInstance);\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n             ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n             event.getContainerId(), exitStatus,\n             containerState, containerDiag);\n       }\n \n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n-      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n+      comp.getScheduler().terminateServiceIfNeeded(comp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n      String containerDiag) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n        event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n    ContainerState containerState \u003d\n        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n\n    if (compInstance.getContainerSpec() !\u003d null) {\n      compInstance.getContainerSpec().setState(containerState);\n    }\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \");\n      builder.append(event.getContainerId()).append(\n          \" completed. Reinsert back to pending list and requested \");\n      builder.append(\"a new container.\").append(System.lineSeparator());\n      builder.append(\" exitStatus\u003d\").append(\n          failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n              event.getStatus().getExitStatus());\n      builder.append(\", diagnostics\u003d\");\n      builder.append(failureBeforeLaunch ?\n          FAILED_BEFORE_LAUNCH_DIAG :\n          (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n              UPGRADE_FAILED));\n\n      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else{\n        LOG.info(builder.toString());\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        LOG.info(\"Publishing component instance status {} {} \",\n            event.getContainerId(), containerState);\n        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), exitStatus,\n            containerState, containerDiag);\n      }\n\n    } else{\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else{\n        comp.markAsSucceeded(compInstance);\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), exitStatus,\n            containerState, containerDiag);\n      }\n\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfNeeded(comp);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "8c7f6b2d4df2e5ca7b766db68213b778d28f198b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9197.  Add safe guard against NPE for component instance failure.\n            Contributed by kyungwan nam\n",
      "commitDate": "18/01/19 10:49 AM",
      "commitName": "8c7f6b2d4df2e5ca7b766db68213b778d28f198b",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 27.75,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,77 @@\n   static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n       ComponentInstanceEvent event, boolean failureBeforeLaunch,\n       String containerDiag) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n         event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n     ContainerState containerState \u003d\n         hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n \n     if (compInstance.getContainerSpec() !\u003d null) {\n       compInstance.getContainerSpec().setState(containerState);\n     }\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(compInstance.getCompInstanceId()).append(\": \");\n       builder.append(event.getContainerId()).append(\n           \" completed. Reinsert back to pending list and requested \");\n       builder.append(\"a new container.\").append(System.lineSeparator());\n       builder.append(\" exitStatus\u003d\").append(\n           failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n               event.getStatus().getExitStatus());\n       builder.append(\", diagnostics\u003d\");\n       builder.append(failureBeforeLaunch ?\n           FAILED_BEFORE_LAUNCH_DIAG :\n           (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n               UPGRADE_FAILED));\n \n       if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n         LOG.error(builder.toString());\n       } else{\n         LOG.info(builder.toString());\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         LOG.info(\"Publishing component instance status {} {} \",\n             event.getContainerId(), containerState);\n+        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n+            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n-            event.getContainerId(), event.getStatus().getExitStatus(),\n+            event.getContainerId(), exitStatus,\n             containerState, containerDiag);\n       }\n \n     } else{\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else{\n         comp.markAsSucceeded(compInstance);\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n+        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n+            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n-            event.getContainerId(), event.getStatus().getExitStatus(),\n+            event.getContainerId(), exitStatus,\n             containerState, containerDiag);\n       }\n \n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n      String containerDiag) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n        event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n    ContainerState containerState \u003d\n        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n\n    if (compInstance.getContainerSpec() !\u003d null) {\n      compInstance.getContainerSpec().setState(containerState);\n    }\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \");\n      builder.append(event.getContainerId()).append(\n          \" completed. Reinsert back to pending list and requested \");\n      builder.append(\"a new container.\").append(System.lineSeparator());\n      builder.append(\" exitStatus\u003d\").append(\n          failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n              event.getStatus().getExitStatus());\n      builder.append(\", diagnostics\u003d\");\n      builder.append(failureBeforeLaunch ?\n          FAILED_BEFORE_LAUNCH_DIAG :\n          (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n              UPGRADE_FAILED));\n\n      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else{\n        LOG.info(builder.toString());\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        LOG.info(\"Publishing component instance status {} {} \",\n            event.getContainerId(), containerState);\n        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), exitStatus,\n            containerState, containerDiag);\n      }\n\n    } else{\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else{\n        comp.markAsSucceeded(compInstance);\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        int exitStatus \u003d failureBeforeLaunch || event.getStatus() \u003d\u003d null ?\n            ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), exitStatus,\n            containerState, containerDiag);\n      }\n\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "913f87dada27776c539dfb352400ecf8d40e7943": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/09/18 11:51 AM",
      "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/08/18 10:55 AM",
      "commitNameOld": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 29.04,
      "commitsBetweenForRepo": 296,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,73 @@\n   static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n       ComponentInstanceEvent event, boolean failureBeforeLaunch,\n       String containerDiag) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n         event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n     ContainerState containerState \u003d\n         hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n \n     if (compInstance.getContainerSpec() !\u003d null) {\n       compInstance.getContainerSpec().setState(containerState);\n     }\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(compInstance.getCompInstanceId()).append(\": \");\n       builder.append(event.getContainerId()).append(\n           \" completed. Reinsert back to pending list and requested \");\n       builder.append(\"a new container.\").append(System.lineSeparator());\n       builder.append(\" exitStatus\u003d\").append(\n-          failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n+          failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n+              event.getStatus().getExitStatus());\n       builder.append(\", diagnostics\u003d\");\n       builder.append(failureBeforeLaunch ?\n           FAILED_BEFORE_LAUNCH_DIAG :\n-          event.getStatus().getDiagnostics());\n+          (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n+              UPGRADE_FAILED));\n \n       if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n         LOG.error(builder.toString());\n       } else{\n         LOG.info(builder.toString());\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         LOG.info(\"Publishing component instance status {} {} \",\n             event.getContainerId(), containerState);\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n             event.getContainerId(), event.getStatus().getExitStatus(),\n             containerState, containerDiag);\n       }\n \n     } else{\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else{\n         comp.markAsSucceeded(compInstance);\n       }\n \n       if (compInstance.timelineServiceEnabled) {\n         // record in ATS\n         compInstance.serviceTimelinePublisher.componentInstanceFinished(\n             event.getContainerId(), event.getStatus().getExitStatus(),\n             containerState, containerDiag);\n       }\n \n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n      String containerDiag) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n        event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n    ContainerState containerState \u003d\n        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n\n    if (compInstance.getContainerSpec() !\u003d null) {\n      compInstance.getContainerSpec().setState(containerState);\n    }\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \");\n      builder.append(event.getContainerId()).append(\n          \" completed. Reinsert back to pending list and requested \");\n      builder.append(\"a new container.\").append(System.lineSeparator());\n      builder.append(\" exitStatus\u003d\").append(\n          failureBeforeLaunch || event.getStatus() \u003d\u003d null ? null :\n              event.getStatus().getExitStatus());\n      builder.append(\", diagnostics\u003d\");\n      builder.append(failureBeforeLaunch ?\n          FAILED_BEFORE_LAUNCH_DIAG :\n          (event.getStatus() !\u003d null ? event.getStatus().getDiagnostics() :\n              UPGRADE_FAILED));\n\n      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else{\n        LOG.info(builder.toString());\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        LOG.info(\"Publishing component instance status {} {} \",\n            event.getContainerId(), containerState);\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), event.getStatus().getExitStatus(),\n            containerState, containerDiag);\n      }\n\n    } else{\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else{\n        comp.markAsSucceeded(compInstance);\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), event.getStatus().getExitStatus(),\n            containerState, containerDiag);\n      }\n\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "28/08/18 10:55 AM",
      "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
          "commitDate": "28/08/18 10:55 AM",
          "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/08/18 4:49 PM",
          "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 6.75,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,71 @@\n-  static void handleComponentInstanceRelaunch(\n-      ComponentInstance compInstance, ComponentInstanceEvent event,\n-      boolean failureBeforeLaunch) {\n+  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n+      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n+      String containerDiag) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n-    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n+    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n+        event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n+    ContainerState containerState \u003d\n+        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n+\n+    if (compInstance.getContainerSpec() !\u003d null) {\n+      compInstance.getContainerSpec().setState(containerState);\n+    }\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(compInstance.getCompInstanceId()).append(\": \");\n-      builder.append(event.getContainerId()).append(\" completed. Reinsert back to pending list and requested \");\n+      builder.append(event.getContainerId()).append(\n+          \" completed. Reinsert back to pending list and requested \");\n       builder.append(\"a new container.\").append(System.lineSeparator());\n-      builder.append(\" exitStatus\u003d\").append(failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n+      builder.append(\" exitStatus\u003d\").append(\n+          failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n       builder.append(\", diagnostics\u003d\");\n-      builder.append(failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG : event.getStatus().getDiagnostics());\n+      builder.append(failureBeforeLaunch ?\n+          FAILED_BEFORE_LAUNCH_DIAG :\n+          event.getStatus().getDiagnostics());\n \n-      if (event.getStatus().getExitStatus() !\u003d 0) {\n+      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n         LOG.error(builder.toString());\n-      } else {\n+      } else{\n         LOG.info(builder.toString());\n       }\n-    } else {\n+\n+      if (compInstance.timelineServiceEnabled) {\n+        // record in ATS\n+        LOG.info(\"Publishing component instance status {} {} \",\n+            event.getContainerId(), containerState);\n+        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n+            event.getContainerId(), event.getStatus().getExitStatus(),\n+            containerState, containerDiag);\n+      }\n+\n+    } else{\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n-      } else {\n+      } else{\n         comp.markAsSucceeded(compInstance);\n       }\n+\n+      if (compInstance.timelineServiceEnabled) {\n+        // record in ATS\n+        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n+            event.getContainerId(), event.getStatus().getExitStatus(),\n+            containerState, containerDiag);\n+      }\n+\n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n      String containerDiag) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n        event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n    ContainerState containerState \u003d\n        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n\n    if (compInstance.getContainerSpec() !\u003d null) {\n      compInstance.getContainerSpec().setState(containerState);\n    }\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \");\n      builder.append(event.getContainerId()).append(\n          \" completed. Reinsert back to pending list and requested \");\n      builder.append(\"a new container.\").append(System.lineSeparator());\n      builder.append(\" exitStatus\u003d\").append(\n          failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n      builder.append(\", diagnostics\u003d\");\n      builder.append(failureBeforeLaunch ?\n          FAILED_BEFORE_LAUNCH_DIAG :\n          event.getStatus().getDiagnostics());\n\n      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else{\n        LOG.info(builder.toString());\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        LOG.info(\"Publishing component instance status {} {} \",\n            event.getContainerId(), containerState);\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), event.getStatus().getExitStatus(),\n            containerState, containerDiag);\n      }\n\n    } else{\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else{\n        comp.markAsSucceeded(compInstance);\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), event.getStatus().getExitStatus(),\n            containerState, containerDiag);\n      }\n\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
          "extendedDetails": {
            "oldValue": "[compInstance-ComponentInstance, event-ComponentInstanceEvent, failureBeforeLaunch-boolean]",
            "newValue": "[compInstance-ComponentInstance, event-ComponentInstanceEvent, failureBeforeLaunch-boolean, containerDiag-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
          "commitDate": "28/08/18 10:55 AM",
          "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/08/18 4:49 PM",
          "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 6.75,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,71 @@\n-  static void handleComponentInstanceRelaunch(\n-      ComponentInstance compInstance, ComponentInstanceEvent event,\n-      boolean failureBeforeLaunch) {\n+  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n+      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n+      String containerDiag) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n-    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n+    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n+        event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n+    ContainerState containerState \u003d\n+        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n+\n+    if (compInstance.getContainerSpec() !\u003d null) {\n+      compInstance.getContainerSpec().setState(containerState);\n+    }\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(compInstance.getCompInstanceId()).append(\": \");\n-      builder.append(event.getContainerId()).append(\" completed. Reinsert back to pending list and requested \");\n+      builder.append(event.getContainerId()).append(\n+          \" completed. Reinsert back to pending list and requested \");\n       builder.append(\"a new container.\").append(System.lineSeparator());\n-      builder.append(\" exitStatus\u003d\").append(failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n+      builder.append(\" exitStatus\u003d\").append(\n+          failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n       builder.append(\", diagnostics\u003d\");\n-      builder.append(failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG : event.getStatus().getDiagnostics());\n+      builder.append(failureBeforeLaunch ?\n+          FAILED_BEFORE_LAUNCH_DIAG :\n+          event.getStatus().getDiagnostics());\n \n-      if (event.getStatus().getExitStatus() !\u003d 0) {\n+      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n         LOG.error(builder.toString());\n-      } else {\n+      } else{\n         LOG.info(builder.toString());\n       }\n-    } else {\n+\n+      if (compInstance.timelineServiceEnabled) {\n+        // record in ATS\n+        LOG.info(\"Publishing component instance status {} {} \",\n+            event.getContainerId(), containerState);\n+        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n+            event.getContainerId(), event.getStatus().getExitStatus(),\n+            containerState, containerDiag);\n+      }\n+\n+    } else{\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n-      } else {\n+      } else{\n         comp.markAsSucceeded(compInstance);\n       }\n+\n+      if (compInstance.timelineServiceEnabled) {\n+        // record in ATS\n+        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n+            event.getContainerId(), event.getStatus().getExitStatus(),\n+            containerState, containerDiag);\n+      }\n+\n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void handleComponentInstanceRelaunch(ComponentInstance compInstance,\n      ComponentInstanceEvent event, boolean failureBeforeLaunch,\n      String containerDiag) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d failureBeforeLaunch || hasContainerFailed(\n        event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n    ContainerState containerState \u003d\n        hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\n\n    if (compInstance.getContainerSpec() !\u003d null) {\n      compInstance.getContainerSpec().setState(containerState);\n    }\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \");\n      builder.append(event.getContainerId()).append(\n          \" completed. Reinsert back to pending list and requested \");\n      builder.append(\"a new container.\").append(System.lineSeparator());\n      builder.append(\" exitStatus\u003d\").append(\n          failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n      builder.append(\", diagnostics\u003d\");\n      builder.append(failureBeforeLaunch ?\n          FAILED_BEFORE_LAUNCH_DIAG :\n          event.getStatus().getDiagnostics());\n\n      if (event.getStatus() !\u003d null \u0026\u0026 event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else{\n        LOG.info(builder.toString());\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        LOG.info(\"Publishing component instance status {} {} \",\n            event.getContainerId(), containerState);\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), event.getStatus().getExitStatus(),\n            containerState, containerDiag);\n      }\n\n    } else{\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else{\n        comp.markAsSucceeded(compInstance);\n      }\n\n      if (compInstance.timelineServiceEnabled) {\n        // record in ATS\n        compInstance.serviceTimelinePublisher.componentInstanceFinished(\n            event.getContainerId(), event.getStatus().getExitStatus(),\n            containerState, containerDiag);\n      }\n\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
          "extendedDetails": {}
        }
      ]
    },
    "861095f761b40171e0dc25f769f486d910cc3e88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8407. Container launch exception in AM log should be printed in ERROR level. (Yesha Vora via wangda)\n\nChange-Id: I154e873df1df3503a09c41d6b3874ca195af91d9\n",
      "commitDate": "07/08/18 1:01 PM",
      "commitName": "861095f761b40171e0dc25f769f486d910cc3e88",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/18 3:22 PM",
      "commitNameOld": "40fad32824d2f8f960c779d78357e62103453da0",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 11.9,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   static void handleComponentInstanceRelaunch(\n       ComponentInstance compInstance, ComponentInstanceEvent event,\n       boolean failureBeforeLaunch) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n-      LOG.info(compInstance.getCompInstanceId()\n-              + \": {} completed. Reinsert back to pending list and requested \" +\n-              \"a new container.\" + System.lineSeparator() +\n-              \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n-          event.getContainerId(), failureBeforeLaunch ? null :\n-              event.getStatus().getExitStatus(),\n-          failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG :\n-              event.getStatus().getDiagnostics());\n+\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(compInstance.getCompInstanceId()).append(\": \");\n+      builder.append(event.getContainerId()).append(\" completed. Reinsert back to pending list and requested \");\n+      builder.append(\"a new container.\").append(System.lineSeparator());\n+      builder.append(\" exitStatus\u003d\").append(failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n+      builder.append(\", diagnostics\u003d\");\n+      builder.append(failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG : event.getStatus().getDiagnostics());\n+\n+      if (event.getStatus().getExitStatus() !\u003d 0) {\n+        LOG.error(builder.toString());\n+      } else {\n+        LOG.info(builder.toString());\n+      }\n     } else {\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else {\n         comp.markAsSucceeded(compInstance);\n       }\n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void handleComponentInstanceRelaunch(\n      ComponentInstance compInstance, ComponentInstanceEvent event,\n      boolean failureBeforeLaunch) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(compInstance.getCompInstanceId()).append(\": \");\n      builder.append(event.getContainerId()).append(\" completed. Reinsert back to pending list and requested \");\n      builder.append(\"a new container.\").append(System.lineSeparator());\n      builder.append(\" exitStatus\u003d\").append(failureBeforeLaunch ? null : event.getStatus().getExitStatus());\n      builder.append(\", diagnostics\u003d\");\n      builder.append(failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG : event.getStatus().getDiagnostics());\n\n      if (event.getStatus().getExitStatus() !\u003d 0) {\n        LOG.error(builder.toString());\n      } else {\n        LOG.info(builder.toString());\n      }\n    } else {\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else {\n        comp.markAsSucceeded(compInstance);\n      }\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "40fad32824d2f8f960c779d78357e62103453da0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8545.  Return allocated resource to RM for failed container.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/07/18 3:22 PM",
      "commitName": "40fad32824d2f8f960c779d78357e62103453da0",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8545.  Return allocated resource to RM for failed container.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/07/18 3:22 PM",
          "commitName": "40fad32824d2f8f960c779d78357e62103453da0",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/07/18 2:41 PM",
          "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n   static void handleComponentInstanceRelaunch(\n-      ComponentInstance compInstance, ComponentInstanceEvent event) {\n+      ComponentInstance compInstance, ComponentInstanceEvent event,\n+      boolean failureBeforeLaunch) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n       LOG.info(compInstance.getCompInstanceId()\n               + \": {} completed. Reinsert back to pending list and requested \" +\n               \"a new container.\" + System.lineSeparator() +\n               \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n-          event.getContainerId(), event.getStatus().getExitStatus(),\n-          event.getStatus().getDiagnostics());\n+          event.getContainerId(), failureBeforeLaunch ? null :\n+              event.getStatus().getExitStatus(),\n+          failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG :\n+              event.getStatus().getDiagnostics());\n     } else {\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else {\n         comp.markAsSucceeded(compInstance);\n       }\n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void handleComponentInstanceRelaunch(\n      ComponentInstance compInstance, ComponentInstanceEvent event,\n      boolean failureBeforeLaunch) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n      LOG.info(compInstance.getCompInstanceId()\n              + \": {} completed. Reinsert back to pending list and requested \" +\n              \"a new container.\" + System.lineSeparator() +\n              \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n          event.getContainerId(), failureBeforeLaunch ? null :\n              event.getStatus().getExitStatus(),\n          failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG :\n              event.getStatus().getDiagnostics());\n    } else {\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else {\n        comp.markAsSucceeded(compInstance);\n      }\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
          "extendedDetails": {
            "oldValue": "[compInstance-ComponentInstance, event-ComponentInstanceEvent]",
            "newValue": "[compInstance-ComponentInstance, event-ComponentInstanceEvent, failureBeforeLaunch-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8545.  Return allocated resource to RM for failed container.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/07/18 3:22 PM",
          "commitName": "40fad32824d2f8f960c779d78357e62103453da0",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/07/18 2:41 PM",
          "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n   static void handleComponentInstanceRelaunch(\n-      ComponentInstance compInstance, ComponentInstanceEvent event) {\n+      ComponentInstance compInstance, ComponentInstanceEvent event,\n+      boolean failureBeforeLaunch) {\n     Component comp \u003d compInstance.getComponent();\n \n     // Do we need to relaunch the service?\n     boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n \n     ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n \n     if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n       // re-ask the failed container.\n       comp.requestContainers(1);\n       comp.reInsertPendingInstance(compInstance);\n       LOG.info(compInstance.getCompInstanceId()\n               + \": {} completed. Reinsert back to pending list and requested \" +\n               \"a new container.\" + System.lineSeparator() +\n               \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n-          event.getContainerId(), event.getStatus().getExitStatus(),\n-          event.getStatus().getDiagnostics());\n+          event.getContainerId(), failureBeforeLaunch ? null :\n+              event.getStatus().getExitStatus(),\n+          failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG :\n+              event.getStatus().getDiagnostics());\n     } else {\n       // When no relaunch, update component\u0027s #succeeded/#failed\n       // instances.\n       if (hasContainerFailed) {\n         comp.markAsFailed(compInstance);\n       } else {\n         comp.markAsSucceeded(compInstance);\n       }\n       LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n           \" succeeded\" :\n           \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n       comp.getScheduler().terminateServiceIfAllComponentsFinished();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void handleComponentInstanceRelaunch(\n      ComponentInstance compInstance, ComponentInstanceEvent event,\n      boolean failureBeforeLaunch) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n      LOG.info(compInstance.getCompInstanceId()\n              + \": {} completed. Reinsert back to pending list and requested \" +\n              \"a new container.\" + System.lineSeparator() +\n              \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n          event.getContainerId(), failureBeforeLaunch ? null :\n              event.getStatus().getExitStatus(),\n          failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG :\n              event.getStatus().getDiagnostics());\n    } else {\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else {\n        comp.markAsSucceeded(compInstance);\n      }\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
          "extendedDetails": {}
        }
      ]
    },
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8080.  Add restart policy for YARN services.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "17/05/18 2:16 PM",
      "commitName": "7f083ed8699a720d3fb82e4ec310356902a6ac30",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,33 @@\n+  static void handleComponentInstanceRelaunch(\n+      ComponentInstance compInstance, ComponentInstanceEvent event) {\n+    Component comp \u003d compInstance.getComponent();\n+\n+    // Do we need to relaunch the service?\n+    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n+\n+    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n+\n+    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n+      // re-ask the failed container.\n+      comp.requestContainers(1);\n+      comp.reInsertPendingInstance(compInstance);\n+      LOG.info(compInstance.getCompInstanceId()\n+              + \": {} completed. Reinsert back to pending list and requested \" +\n+              \"a new container.\" + System.lineSeparator() +\n+              \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n+          event.getContainerId(), event.getStatus().getExitStatus(),\n+          event.getStatus().getDiagnostics());\n+    } else {\n+      // When no relaunch, update component\u0027s #succeeded/#failed\n+      // instances.\n+      if (hasContainerFailed) {\n+        comp.markAsFailed(compInstance);\n+      } else {\n+        comp.markAsSucceeded(compInstance);\n+      }\n+      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n+          \" succeeded\" :\n+          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n+      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void handleComponentInstanceRelaunch(\n      ComponentInstance compInstance, ComponentInstanceEvent event) {\n    Component comp \u003d compInstance.getComponent();\n\n    // Do we need to relaunch the service?\n    boolean hasContainerFailed \u003d hasContainerFailed(event.getStatus());\n\n    ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\n      // re-ask the failed container.\n      comp.requestContainers(1);\n      comp.reInsertPendingInstance(compInstance);\n      LOG.info(compInstance.getCompInstanceId()\n              + \": {} completed. Reinsert back to pending list and requested \" +\n              \"a new container.\" + System.lineSeparator() +\n              \" exitStatus\u003d{}, diagnostics\u003d{}.\",\n          event.getContainerId(), event.getStatus().getExitStatus(),\n          event.getStatus().getDiagnostics());\n    } else {\n      // When no relaunch, update component\u0027s #succeeded/#failed\n      // instances.\n      if (hasContainerFailed) {\n        comp.markAsFailed(compInstance);\n      } else {\n        comp.markAsSucceeded(compInstance);\n      }\n      LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ?\n          \" succeeded\" :\n          \" failed\") + \" without retry, exitStatus\u003d\" + event.getStatus());\n      comp.getScheduler().terminateServiceIfAllComponentsFinished();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java"
    }
  }
}