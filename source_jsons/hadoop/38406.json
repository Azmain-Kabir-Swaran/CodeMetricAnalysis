{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMNodeLabelsManager.java",
  "functionName": "reinitializeQueueLabels",
  "functionId": "reinitializeQueueLabels___queueToLabels-Map__String,Set__String____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
  "functionStartLine": 311,
  "functionEndLine": 341,
  "numCommitsSeen": 22,
  "timeTaken": 1718,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "a28cd02ba026733e409807f3ea1b36f7d57bc273",
    "db7f1653198b950e89567c06898d64f6b930a0ee"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "a28cd02ba026733e409807f3ea1b36f7d57bc273": "Ybodychange",
    "db7f1653198b950e89567c06898d64f6b930a0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/06/17 10:12 AM",
      "commitNameOld": "ee89ac84e68d3e181b75c63f74a0444f9d28146f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 626.19,
      "commitsBetweenForRepo": 5292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void reinitializeQueueLabels(Map\u003cString, Set\u003cString\u003e\u003e queueToLabels) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       // clear before set\n       this.queueCollections.clear();\n \n       for (Entry\u003cString, Set\u003cString\u003e\u003e entry : queueToLabels.entrySet()) {\n         String queue \u003d entry.getKey();\n         Queue q \u003d new Queue();\n         this.queueCollections.put(queue, q);\n \n         Set\u003cString\u003e labels \u003d entry.getValue();\n         if (labels.contains(ANY)) {\n           continue;\n         }\n \n         q.accessibleNodeLabels.addAll(labels);\n         for (Host host : nodeCollections.values()) {\n           for (Entry\u003cNodeId, Node\u003e nentry : host.nms.entrySet()) {\n             NodeId nodeId \u003d nentry.getKey();\n             Node nm \u003d nentry.getValue();\n             if (nm.running \u0026\u0026 isNodeUsableByQueue(getLabelsByNode(nodeId), q)) {\n               Resources.addTo(q.resource, nm.resource);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueueLabels(Map\u003cString, Set\u003cString\u003e\u003e queueToLabels) {\n    writeLock.lock();\n    try {\n      // clear before set\n      this.queueCollections.clear();\n\n      for (Entry\u003cString, Set\u003cString\u003e\u003e entry : queueToLabels.entrySet()) {\n        String queue \u003d entry.getKey();\n        Queue q \u003d new Queue();\n        this.queueCollections.put(queue, q);\n\n        Set\u003cString\u003e labels \u003d entry.getValue();\n        if (labels.contains(ANY)) {\n          continue;\n        }\n\n        q.accessibleNodeLabels.addAll(labels);\n        for (Host host : nodeCollections.values()) {\n          for (Entry\u003cNodeId, Node\u003e nentry : host.nms.entrySet()) {\n            NodeId nodeId \u003d nentry.getKey();\n            Node nm \u003d nentry.getValue();\n            if (nm.running \u0026\u0026 isNodeUsableByQueue(getLabelsByNode(nodeId), q)) {\n              Resources.addTo(q.resource, nm.resource);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "a28cd02ba026733e409807f3ea1b36f7d57bc273": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3592. Fix typos in RMNodeLabelsManager. Contributed by Sunil G.\n",
      "commitDate": "07/05/15 10:24 PM",
      "commitName": "a28cd02ba026733e409807f3ea1b36f7d57bc273",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "17/04/15 1:36 PM",
      "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.37,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void reinitializeQueueLabels(Map\u003cString, Set\u003cString\u003e\u003e queueToLabels) {\n     try {\n       writeLock.lock();\n       // clear before set\n       this.queueCollections.clear();\n \n       for (Entry\u003cString, Set\u003cString\u003e\u003e entry : queueToLabels.entrySet()) {\n         String queue \u003d entry.getKey();\n         Queue q \u003d new Queue();\n         this.queueCollections.put(queue, q);\n \n         Set\u003cString\u003e labels \u003d entry.getValue();\n         if (labels.contains(ANY)) {\n           continue;\n         }\n \n-        q.acccessibleNodeLabels.addAll(labels);\n+        q.accessibleNodeLabels.addAll(labels);\n         for (Host host : nodeCollections.values()) {\n           for (Entry\u003cNodeId, Node\u003e nentry : host.nms.entrySet()) {\n             NodeId nodeId \u003d nentry.getKey();\n             Node nm \u003d nentry.getValue();\n             if (nm.running \u0026\u0026 isNodeUsableByQueue(getLabelsByNode(nodeId), q)) {\n               Resources.addTo(q.resource, nm.resource);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueueLabels(Map\u003cString, Set\u003cString\u003e\u003e queueToLabels) {\n    try {\n      writeLock.lock();\n      // clear before set\n      this.queueCollections.clear();\n\n      for (Entry\u003cString, Set\u003cString\u003e\u003e entry : queueToLabels.entrySet()) {\n        String queue \u003d entry.getKey();\n        Queue q \u003d new Queue();\n        this.queueCollections.put(queue, q);\n\n        Set\u003cString\u003e labels \u003d entry.getValue();\n        if (labels.contains(ANY)) {\n          continue;\n        }\n\n        q.accessibleNodeLabels.addAll(labels);\n        for (Host host : nodeCollections.values()) {\n          for (Entry\u003cNodeId, Node\u003e nentry : host.nms.entrySet()) {\n            NodeId nodeId \u003d nentry.getKey();\n            Node nm \u003d nentry.getValue();\n            if (nm.running \u0026\u0026 isNodeUsableByQueue(getLabelsByNode(nodeId), q)) {\n              Resources.addTo(q.resource, nm.resource);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "db7f1653198b950e89567c06898d64f6b930a0ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2494. Added NodeLabels Manager internal API and implementation. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 11:44 AM",
      "commitName": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,31 @@\n+  public void reinitializeQueueLabels(Map\u003cString, Set\u003cString\u003e\u003e queueToLabels) {\n+    try {\n+      writeLock.lock();\n+      // clear before set\n+      this.queueCollections.clear();\n+\n+      for (Entry\u003cString, Set\u003cString\u003e\u003e entry : queueToLabels.entrySet()) {\n+        String queue \u003d entry.getKey();\n+        Queue q \u003d new Queue();\n+        this.queueCollections.put(queue, q);\n+\n+        Set\u003cString\u003e labels \u003d entry.getValue();\n+        if (labels.contains(ANY)) {\n+          continue;\n+        }\n+\n+        q.acccessibleNodeLabels.addAll(labels);\n+        for (Host host : nodeCollections.values()) {\n+          for (Entry\u003cNodeId, Node\u003e nentry : host.nms.entrySet()) {\n+            NodeId nodeId \u003d nentry.getKey();\n+            Node nm \u003d nentry.getValue();\n+            if (nm.running \u0026\u0026 isNodeUsableByQueue(getLabelsByNode(nodeId), q)) {\n+              Resources.addTo(q.resource, nm.resource);\n+            }\n+          }\n+        }\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueueLabels(Map\u003cString, Set\u003cString\u003e\u003e queueToLabels) {\n    try {\n      writeLock.lock();\n      // clear before set\n      this.queueCollections.clear();\n\n      for (Entry\u003cString, Set\u003cString\u003e\u003e entry : queueToLabels.entrySet()) {\n        String queue \u003d entry.getKey();\n        Queue q \u003d new Queue();\n        this.queueCollections.put(queue, q);\n\n        Set\u003cString\u003e labels \u003d entry.getValue();\n        if (labels.contains(ANY)) {\n          continue;\n        }\n\n        q.acccessibleNodeLabels.addAll(labels);\n        for (Host host : nodeCollections.values()) {\n          for (Entry\u003cNodeId, Node\u003e nentry : host.nms.entrySet()) {\n            NodeId nodeId \u003d nentry.getKey();\n            Node nm \u003d nentry.getValue();\n            if (nm.running \u0026\u0026 isNodeUsableByQueue(getLabelsByNode(nodeId), q)) {\n              Resources.addTo(q.resource, nm.resource);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java"
    }
  }
}