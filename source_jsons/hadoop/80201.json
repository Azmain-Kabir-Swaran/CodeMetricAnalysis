{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFileSystem.java",
  "functionName": "renameInternal",
  "functionId": "renameInternal___src-Path(modifiers-final)__dst-Path(modifiers-final)__overwrite-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
  "functionStartLine": 742,
  "functionEndLine": 791,
  "numCommitsSeen": 53,
  "timeTaken": 1555,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b",
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
    "7578282edce0eba3f24c96355c944c02156ece79",
    "e333072144a8da126fe93ce9c194bbb1d9ddf433",
    "33e3f7949bb30b87c4e57de0cf7f58d81016aaea",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b": "Ymodifierchange",
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081": "Ybodychange",
    "7578282edce0eba3f24c96355c944c02156ece79": "Ybodychange",
    "e333072144a8da126fe93ce9c194bbb1d9ddf433": "Ybodychange",
    "33e3f7949bb30b87c4e57de0cf7f58d81016aaea": "Ybodychange",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": "Yexceptionschange",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      // It\u0027s OK to rename a file to a symlink and vice versa\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" and destination \" + dst\n            + \" must both be directories\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"Rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus.isFile()) {\n        throw new ParentNotDirectoryException(\"Rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      // It\u0027s OK to rename a file to a symlink and vice versa\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" and destination \" + dst\n            + \" must both be directories\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"Rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus.isFile()) {\n        throw new ParentNotDirectoryException(\"Rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      // It\u0027s OK to rename a file to a symlink and vice versa\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" and destination \" + dst\n            + \" must both be directories\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"Rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus.isFile()) {\n        throw new ParentNotDirectoryException(\"Rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-6903 Make AbstractFSileSystem methods and some FileContext methods to be public\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1034480 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/10 9:23 AM",
      "commitName": "946eac3dac02b8a84a9ae91ac7482b4224d0728b",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "10/08/10 9:43 PM",
      "commitNameOld": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 93.53,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n-  protected void renameInternal(final Path src, final Path dst,\n+  public void renameInternal(final Path src, final Path dst,\n       boolean overwrite) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnresolvedLinkException, IOException {\n     // Default implementation deals with overwrite in a non-atomic way\n     final FileStatus srcStatus \u003d getFileLinkStatus(src);\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (dst.equals(src)) {\n         throw new FileAlreadyExistsException(\n             \"The source \"+src+\" and destination \"+dst+\" are the same\");\n       }\n       if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n         throw new FileAlreadyExistsException(\n             \"Cannot rename symlink \"+src+\" to its target \"+dst);\n       }\n       // It\u0027s OK to rename a file to a symlink and vice versa\n       if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n         throw new IOException(\"Source \" + src + \" and destination \" + dst\n             + \" must both be directories\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"Rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDirectory()) {\n         RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n         if (list !\u003d null \u0026\u0026 list.hasNext()) {\n           throw new IOException(\n               \"Rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileStatus(parent);\n       if (parentStatus.isFile()) {\n         throw new ParentNotDirectoryException(\"Rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      // It\u0027s OK to rename a file to a symlink and vice versa\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" and destination \" + dst\n            + \" must both be directories\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"Rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus.isFile()) {\n        throw new ParentNotDirectoryException(\"Rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[public]"
      }
    },
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/10 9:43 PM",
      "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "30/07/10 1:52 PM",
      "commitNameOld": "d0ba178800d04e6e9842a1823b2205732608c0b5",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 11.33,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   protected void renameInternal(final Path src, final Path dst,\n       boolean overwrite) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnresolvedLinkException, IOException {\n     // Default implementation deals with overwrite in a non-atomic way\n     final FileStatus srcStatus \u003d getFileLinkStatus(src);\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (dst.equals(src)) {\n         throw new FileAlreadyExistsException(\n             \"The source \"+src+\" and destination \"+dst+\" are the same\");\n       }\n       if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n         throw new FileAlreadyExistsException(\n             \"Cannot rename symlink \"+src+\" to its target \"+dst);\n       }\n       // It\u0027s OK to rename a file to a symlink and vice versa\n       if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n         throw new IOException(\"Source \" + src + \" and destination \" + dst\n             + \" must both be directories\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"Rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDirectory()) {\n-        Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n+        RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n         if (list !\u003d null \u0026\u0026 list.hasNext()) {\n           throw new IOException(\n               \"Rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileStatus(parent);\n       if (parentStatus.isFile()) {\n         throw new ParentNotDirectoryException(\"Rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      // It\u0027s OK to rename a file to a symlink and vice versa\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" and destination \" + dst\n            + \" must both be directories\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        RemoteIterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"Rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus.isFile()) {\n        throw new ParentNotDirectoryException(\"Rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "7578282edce0eba3f24c96355c944c02156ece79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6585.  Add FileStatus#isDirectory and isFile.  Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@949658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/10 8:14 PM",
      "commitName": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthor": "Thomas White",
      "commitDateOld": "27/04/10 10:45 PM",
      "commitNameOld": "e333072144a8da126fe93ce9c194bbb1d9ddf433",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 32.89,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,50 @@\n   protected void renameInternal(final Path src, final Path dst,\n       boolean overwrite) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnresolvedLinkException, IOException {\n     // Default implementation deals with overwrite in a non-atomic way\n     final FileStatus srcStatus \u003d getFileLinkStatus(src);\n-    if (srcStatus \u003d\u003d null) {\n-      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n-    }\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (dst.equals(src)) {\n         throw new FileAlreadyExistsException(\n             \"The source \"+src+\" and destination \"+dst+\" are the same\");\n       }\n       if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n         throw new FileAlreadyExistsException(\n             \"Cannot rename symlink \"+src+\" to its target \"+dst);\n       }\n-      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n-        throw new IOException(\"Source \" + src + \" Destination \" + dst\n-            + \" both should be either file or directory\");\n+      // It\u0027s OK to rename a file to a symlink and vice versa\n+      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n+        throw new IOException(\"Source \" + src + \" and destination \" + dst\n+            + \" must both be directories\");\n       }\n       if (!overwrite) {\n-        throw new FileAlreadyExistsException(\"rename destination \" + dst\n+        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n-      if (dstStatus.isDir()) {\n+      if (dstStatus.isDirectory()) {\n         Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n         if (list !\u003d null \u0026\u0026 list.hasNext()) {\n           throw new IOException(\n-              \"rename cannot overwrite non empty destination directory \" + dst);\n+              \"Rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n-      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n-      if (parentStatus \u003d\u003d null) {\n-        throw new FileNotFoundException(\"rename destination parent \" + parent\n-            + \" not found.\");\n-      }\n-      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n-        throw new ParentNotDirectoryException(\"rename destination parent \"\n+      final FileStatus parentStatus \u003d getFileStatus(parent);\n+      if (parentStatus.isFile()) {\n+        throw new ParentNotDirectoryException(\"Rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      // It\u0027s OK to rename a file to a symlink and vice versa\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" and destination \" + dst\n            + \" must both be directories\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"Rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"Rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus.isFile()) {\n        throw new ParentNotDirectoryException(\"Rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "e333072144a8da126fe93ce9c194bbb1d9ddf433": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6703. Prevent renaming a file, directory or symbolic link to itself. Contributed by Eli Collins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@938788 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/04/10 10:45 PM",
      "commitName": "e333072144a8da126fe93ce9c194bbb1d9ddf433",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "26/04/10 10:32 AM",
      "commitNameOld": "33e3f7949bb30b87c4e57de0cf7f58d81016aaea",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 1.51,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,56 @@\n   protected void renameInternal(final Path src, final Path dst,\n       boolean overwrite) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnresolvedLinkException, IOException {\n     // Default implementation deals with overwrite in a non-atomic way\n     final FileStatus srcStatus \u003d getFileLinkStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n+      if (dst.equals(src)) {\n+        throw new FileAlreadyExistsException(\n+            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n+      }\n+      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n+        throw new FileAlreadyExistsException(\n+            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n+      }\n       if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDir()) {\n         Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n         if (list !\u003d null \u0026\u0026 list.hasNext()) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n       if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (dst.equals(src)) {\n        throw new FileAlreadyExistsException(\n            \"The source \"+src+\" and destination \"+dst+\" are the same\");\n      }\n      if (srcStatus.isSymlink() \u0026\u0026 dst.equals(srcStatus.getSymlink())) {\n        throw new FileAlreadyExistsException(\n            \"Cannot rename symlink \"+src+\" to its target \"+dst);\n      }\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "33e3f7949bb30b87c4e57de0cf7f58d81016aaea": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6692. Add FileContext#listStatus that returns an iterator. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@938136 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/10 10:32 AM",
      "commitName": "33e3f7949bb30b87c4e57de0cf7f58d81016aaea",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "02/03/10 6:48 PM",
      "commitNameOld": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 54.61,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   protected void renameInternal(final Path src, final Path dst,\n       boolean overwrite) throws AccessControlException,\n       FileAlreadyExistsException, FileNotFoundException,\n       ParentNotDirectoryException, UnresolvedLinkException, IOException {\n     // Default implementation deals with overwrite in a non-atomic way\n     final FileStatus srcStatus \u003d getFileLinkStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDir()) {\n-        FileStatus[] list \u003d listStatus(dst);\n-        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n+        Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n+        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n       if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        Iterator\u003cFileStatus\u003e list \u003d listStatusIterator(dst);\n        if (list !\u003d null \u0026\u0026 list.hasNext()) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": {
      "type": "Yexceptionschange",
      "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/10 6:48 PM",
      "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "16/02/10 1:43 PM",
      "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   protected void renameInternal(final Path src, final Path dst,\n-    boolean overwrite) throws IOException, UnresolvedLinkException {\n+      boolean overwrite) throws AccessControlException,\n+      FileAlreadyExistsException, FileNotFoundException,\n+      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n     // Default implementation deals with overwrite in a non-atomic way\n     final FileStatus srcStatus \u003d getFileLinkStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDir()) {\n         FileStatus[] list \u003d listStatus(dst);\n         if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n       if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n      boolean overwrite) throws AccessControlException,\n      FileAlreadyExistsException, FileNotFoundException,\n      ParentNotDirectoryException, UnresolvedLinkException, IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldValue": "[IOException, UnresolvedLinkException]",
        "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnresolvedLinkException, IOException]"
      }
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/02/10 1:43 PM",
          "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "30/10/09 3:24 PM",
          "commitNameOld": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 108.97,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n   protected void renameInternal(final Path src, final Path dst,\n-    boolean overwrite) throws IOException {\n+    boolean overwrite) throws IOException, UnresolvedLinkException {\n     // Default implementation deals with overwrite in a non-atomic way\n-    final FileStatus srcStatus \u003d getFileStatus(src);\n+    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     FileStatus dstStatus;\n     try {\n-      dstStatus \u003d getFileStatus(dst);\n+      dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDir()) {\n         FileStatus[] list \u003d listStatus(dst);\n         if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n-      final FileStatus parentStatus \u003d getFileStatus(parent);\n+      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n-      if (!parentStatus.isDir()) {\n+      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n    boolean overwrite) throws IOException, UnresolvedLinkException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
          "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, UnresolvedLinkException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/02/10 1:43 PM",
          "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "30/10/09 3:24 PM",
          "commitNameOld": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 108.97,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n   protected void renameInternal(final Path src, final Path dst,\n-    boolean overwrite) throws IOException {\n+    boolean overwrite) throws IOException, UnresolvedLinkException {\n     // Default implementation deals with overwrite in a non-atomic way\n-    final FileStatus srcStatus \u003d getFileStatus(src);\n+    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     FileStatus dstStatus;\n     try {\n-      dstStatus \u003d getFileStatus(dst);\n+      dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDir()) {\n         FileStatus[] list \u003d listStatus(dst);\n         if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n-      final FileStatus parentStatus \u003d getFileStatus(parent);\n+      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n-      if (!parentStatus.isDir()) {\n+      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \"\n             + parent + \" is a file.\");\n       }\n     }\n     renameInternal(src, dst);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n    boolean overwrite) throws IOException, UnresolvedLinkException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileLinkStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir() \u0026\u0026 !parentStatus.isSymlink()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
          "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": {
      "type": "Yintroduced",
      "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 3:24 PM",
      "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,46 @@\n+  protected void renameInternal(final Path src, final Path dst,\n+    boolean overwrite) throws IOException {\n+    // Default implementation deals with overwrite in a non-atomic way\n+    final FileStatus srcStatus \u003d getFileStatus(src);\n+    if (srcStatus \u003d\u003d null) {\n+      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n+    }\n+\n+    FileStatus dstStatus;\n+    try {\n+      dstStatus \u003d getFileStatus(dst);\n+    } catch (IOException e) {\n+      dstStatus \u003d null;\n+    }\n+    if (dstStatus !\u003d null) {\n+      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n+        throw new IOException(\"Source \" + src + \" Destination \" + dst\n+            + \" both should be either file or directory\");\n+      }\n+      if (!overwrite) {\n+        throw new FileAlreadyExistsException(\"rename destination \" + dst\n+            + \" already exists.\");\n+      }\n+      // Delete the destination that is a file or an empty directory\n+      if (dstStatus.isDir()) {\n+        FileStatus[] list \u003d listStatus(dst);\n+        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n+          throw new IOException(\n+              \"rename cannot overwrite non empty destination directory \" + dst);\n+        }\n+      }\n+      delete(dst, false);\n+    } else {\n+      final Path parent \u003d dst.getParent();\n+      final FileStatus parentStatus \u003d getFileStatus(parent);\n+      if (parentStatus \u003d\u003d null) {\n+        throw new FileNotFoundException(\"rename destination parent \" + parent\n+            + \" not found.\");\n+      }\n+      if (!parentStatus.isDir()) {\n+        throw new ParentNotDirectoryException(\"rename destination parent \"\n+            + parent + \" is a file.\");\n+      }\n+    }\n+    renameInternal(src, dst);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renameInternal(final Path src, final Path dst,\n    boolean overwrite) throws IOException {\n    // Default implementation deals with overwrite in a non-atomic way\n    final FileStatus srcStatus \u003d getFileStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \"\n            + parent + \" is a file.\");\n      }\n    }\n    renameInternal(src, dst);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java"
    }
  }
}