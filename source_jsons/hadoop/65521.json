{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardTool.java",
  "functionName": "run",
  "functionId": "run___conf-Configuration__args-String",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
  "functionStartLine": 1966,
  "functionEndLine": 2024,
  "numCommitsSeen": 43,
  "timeTaken": 5561,
  "changeHistory": [
    "49df83899543586bbcaf80f01399ade031cf68b0",
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc",
    "920a89627dd191f533ff3a3a8bca293cab59ade7",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1",
    "1093a73689912f78547e6d23023be2fd1c7ddc85",
    "f274fe33ea359d26a31efec42a856320a0dbb5f4",
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "49df83899543586bbcaf80f01399ade031cf68b0": "Ybodychange",
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc": "Ybodychange",
    "920a89627dd191f533ff3a3a8bca293cab59ade7": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ybodychange",
    "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1": "Ybodychange",
    "1093a73689912f78547e6d23023be2fd1c7ddc85": "Ybodychange",
    "f274fe33ea359d26a31efec42a856320a0dbb5f4": "Ybodychange",
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb": "Ybodychange",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": "Ymultichange(Yparameterchange,Ybodychange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49df83899543586bbcaf80f01399ade031cf68b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16697. Tune/audit S3A authoritative mode.\n\nContains:\n\nHADOOP-16474. S3Guard ProgressiveRenameTracker to mark destination\n              dirirectory as authoritative on success.\nHADOOP-16684. S3guard bucket info to list a bit more about\n              authoritative paths.\nHADOOP-16722. S3GuardTool to support FilterFileSystem.\n\nThis patch improves the marking of newly created/import directory\ntrees in S3Guard DynamoDB tables as authoritative.\n\nSpecific changes:\n\n * Renamed directories are marked as authoritative if the entire\n   operation succeeded (HADOOP-16474).\n * When updating parent table entries as part of any table write,\n   there\u0027s no overwriting of their authoritative flag.\n\ns3guard import changes:\n\n* new -verbose flag to print out what is going on.\n\n* The \"s3guard import\" command lets you declare that a directory tree\nis to be marked as authoritative\n\n  hadoop s3guard import -authoritative -verbose s3a://bucket/path\n\nWhen importing a listing and a file is found, the import tool queries\nthe metastore and only updates the entry if the file is different from\nbefore, where different \u003d\u003d new timestamp, etag, or length. S3Guard can get\ntimestamp differences due to clock skew in PUT operations.\n\nAs the recursive list performed by the import command doesn\u0027t retrieve the\nversionID, the existing entry may in fact be more complete.\nWhen updating an existing due to clock skew the existing version ID\nis propagated to the new entry (note: the etags must match; this is needed\nto deal with inconsistent listings).\n\nThere is a new s3guard command to audit a s3guard bucket/path\u0027s\nauthoritative state:\n\n  hadoop s3guard authoritative -check-config s3a://bucket/path\n\nThis is primarily for testing/auditing.\n\nThe s3guard bucket-info command also provides some more details on the\nauthoritative state of a store (HADOOP-16684).\n\nChange-Id: I58001341c04f6f3597fcb4fcb1581ccefeb77d91\n",
      "commitDate": "10/01/20 3:11 AM",
      "commitName": "49df83899543586bbcaf80f01399ade031cf68b0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/12/19 6:51 AM",
      "commitNameOld": "875a3e97dd4a26fe224a1858c54d1b4512db6be3",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 30.85,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,59 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n     case Uploads.NAME:\n       command \u003d new Uploads(conf);\n       break;\n     case SelectTool.NAME:\n       // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n       // because this is the defacto S3 CLI.\n       command \u003d new SelectTool(conf);\n       break;\n     case Fsck.NAME:\n       command \u003d new Fsck(conf);\n       break;\n+    case Authoritative.NAME:\n+      command \u003d new Authoritative(conf);\n+      break;\n     default:\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n-    return ToolRunner.run(conf, command, otherArgs);\n+    try {\n+      return ToolRunner.run(conf, command, otherArgs);\n+    } finally {\n+      IOUtils.cleanupWithLogger(LOG, command);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    case SelectTool.NAME:\n      // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n      // because this is the defacto S3 CLI.\n      command \u003d new SelectTool(conf);\n      break;\n    case Fsck.NAME:\n      command \u003d new Fsck(conf);\n      break;\n    case Authoritative.NAME:\n      command \u003d new Authoritative(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    try {\n      return ToolRunner.run(conf, command, otherArgs);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, command);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16423. S3Guard fsck: Check metadata consistency between S3 and metadatastore (log) (#1208). Contributed by Gabor Bota.\n\nChange-Id: I6bbb331b6c0a41c61043e482b95504fda8a50596",
      "commitDate": "12/09/19 4:12 AM",
      "commitName": "4e273a31f66013b7c20e8114451f5bc6c741f2cc",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "17/07/19 7:24 AM",
      "commitNameOld": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 56.87,
      "commitsBetweenForRepo": 505,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,52 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n     case Uploads.NAME:\n       command \u003d new Uploads(conf);\n       break;\n     case SelectTool.NAME:\n       // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n       // because this is the defacto S3 CLI.\n       command \u003d new SelectTool(conf);\n       break;\n+    case Fsck.NAME:\n+      command \u003d new Fsck(conf);\n+      break;\n     default:\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    case SelectTool.NAME:\n      // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n      // because this is the defacto S3 CLI.\n      command \u003d new SelectTool(conf);\n      break;\n    case Fsck.NAME:\n      command \u003d new Fsck(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "920a89627dd191f533ff3a3a8bca293cab59ade7": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-15843. s3guard bucket-info command to not print a stack trace on bucket-not-found.\"\n\nThis reverts commit c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1.\n",
      "commitDate": "18/02/19 6:57 AM",
      "commitName": "920a89627dd191f533ff3a3a8bca293cab59ade7",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/02/19 1:07 PM",
      "commitNameOld": "6c999fe4b0181720c8e55be8388bd592196c8c87",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n-      printHelp(null);\n-      throw usageError(\"No arguments provided\");\n+      printHelp();\n+      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n     case Uploads.NAME:\n       command \u003d new Uploads(conf);\n       break;\n     case SelectTool.NAME:\n       // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n       // because this is the defacto S3 CLI.\n       command \u003d new SelectTool(conf);\n       break;\n     default:\n-      printHelp(null);\n+      printHelp();\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    case SelectTool.NAME:\n      // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n      // because this is the defacto S3 CLI.\n      command \u003d new SelectTool(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/01/19 9:59 AM",
      "commitNameOld": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 21.74,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp(null);\n       throw usageError(\"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n     case Uploads.NAME:\n       command \u003d new Uploads(conf);\n       break;\n+    case SelectTool.NAME:\n+      // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n+      // because this is the defacto S3 CLI.\n+      command \u003d new SelectTool(conf);\n+      break;\n     default:\n       printHelp(null);\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp(null);\n      throw usageError(\"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    case SelectTool.NAME:\n      // the select tool is not technically a S3Guard tool, but it\u0027s on the CLI\n      // because this is the defacto S3 CLI.\n      command \u003d new SelectTool(conf);\n      break;\n    default:\n      printHelp(null);\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15843. s3guard bucket-info command to not print a stack trace on bucket-not-found.\n\nContributed by Adam Antal.\n",
      "commitDate": "14/01/19 9:27 AM",
      "commitName": "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1",
      "commitAuthor": "Adam Antal",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n-      printHelp();\n-      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n+      printHelp(null);\n+      throw usageError(\"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n     case Uploads.NAME:\n       command \u003d new Uploads(conf);\n       break;\n     default:\n-      printHelp();\n+      printHelp(null);\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp(null);\n      throw usageError(\"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    default:\n      printHelp(null);\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "1093a73689912f78547e6d23023be2fd1c7ddc85": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/01/18 5:13 AM",
      "commitName": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 4:35 AM",
      "commitNameOld": "f274fe33ea359d26a31efec42a856320a0dbb5f4",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n+    case Uploads.NAME:\n+      command \u003d new Uploads(conf);\n+      break;\n     default:\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "f274fe33ea359d26a31efec42a856320a0dbb5f4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\"\n\nThis reverts commit 35ad9b1dd279b769381ea1625d9bf776c309c5cb.\n",
      "commitDate": "18/01/18 4:35 AM",
      "commitName": "f274fe33ea359d26a31efec42a856320a0dbb5f4",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/12/17 1:19 PM",
      "commitNameOld": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 30.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,41 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n-    case Uploads.NAME:\n-      command \u003d new Uploads(conf);\n-      break;\n     default:\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/12/17 1:19 PM",
      "commitName": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "22/11/17 7:28 AM",
      "commitNameOld": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 26.24,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n     LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n     case BucketInfo.NAME:\n       command \u003d new BucketInfo(conf);\n       break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n     case SetCapacity.NAME:\n       command \u003d new SetCapacity(conf);\n       break;\n+    case Uploads.NAME:\n+      command \u003d new Uploads(conf);\n+      break;\n     default:\n       printHelp();\n       throw new ExitUtil.ExitException(E_USAGE,\n           \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    case Uploads.NAME:\n      command \u003d new Uploads(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
      "commitDate": "25/09/17 3:59 PM",
      "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthor": "Aaron Fabbri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
          "commitDate": "25/09/17 3:59 PM",
          "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "01/09/17 6:13 AM",
          "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 24.41,
          "commitsBetweenForRepo": 233,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  public static int run(String[] args, Configuration conf) throws\n+  public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n-      return INVALID_ARGUMENT;\n+      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n+    LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n+    case BucketInfo.NAME:\n+      command \u003d new BucketInfo(conf);\n+      break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n+    case SetCapacity.NAME:\n+      command \u003d new SetCapacity(conf);\n+      break;\n     default:\n       printHelp();\n-      return INVALID_ARGUMENT;\n+      throw new ExitUtil.ExitException(E_USAGE,\n+          \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
          "extendedDetails": {
            "oldValue": "[args-String[], conf-Configuration]",
            "newValue": "[conf-Configuration, args-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
          "commitDate": "25/09/17 3:59 PM",
          "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "01/09/17 6:13 AM",
          "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 24.41,
          "commitsBetweenForRepo": 233,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  public static int run(String[] args, Configuration conf) throws\n+  public static int run(Configuration conf, String...args) throws\n       Exception {\n     /* ToolRunner.run does this too, but we must do it before looking at\n     subCommand or instantiating the cmd object below */\n     String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n         .getRemainingArgs();\n     if (otherArgs.length \u003d\u003d 0) {\n       printHelp();\n-      return INVALID_ARGUMENT;\n+      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n     }\n     final String subCommand \u003d otherArgs[0];\n+    LOG.debug(\"Executing command {}\", subCommand);\n     switch (subCommand) {\n     case Init.NAME:\n       command \u003d new Init(conf);\n       break;\n     case Destroy.NAME:\n       command \u003d new Destroy(conf);\n       break;\n     case Import.NAME:\n       command \u003d new Import(conf);\n       break;\n+    case BucketInfo.NAME:\n+      command \u003d new BucketInfo(conf);\n+      break;\n     case Diff.NAME:\n       command \u003d new Diff(conf);\n       break;\n     case Prune.NAME:\n       command \u003d new Prune(conf);\n       break;\n+    case SetCapacity.NAME:\n+      command \u003d new SetCapacity(conf);\n+      break;\n     default:\n       printHelp();\n-      return INVALID_ARGUMENT;\n+      throw new ExitUtil.ExitException(E_USAGE,\n+          \"Unknown command \" + subCommand);\n     }\n     return ToolRunner.run(conf, command, otherArgs);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static int run(Configuration conf, String...args) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE, \"No arguments provided\");\n    }\n    final String subCommand \u003d otherArgs[0];\n    LOG.debug(\"Executing command {}\", subCommand);\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case BucketInfo.NAME:\n      command \u003d new BucketInfo(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    case SetCapacity.NAME:\n      command \u003d new SetCapacity(conf);\n      break;\n    default:\n      printHelp();\n      throw new ExitUtil.ExitException(E_USAGE,\n          \"Unknown command \" + subCommand);\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
          "extendedDetails": {}
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,33 @@\n+  public static int run(String[] args, Configuration conf) throws\n+      Exception {\n+    /* ToolRunner.run does this too, but we must do it before looking at\n+    subCommand or instantiating the cmd object below */\n+    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n+        .getRemainingArgs();\n+    if (otherArgs.length \u003d\u003d 0) {\n+      printHelp();\n+      return INVALID_ARGUMENT;\n+    }\n+    final String subCommand \u003d otherArgs[0];\n+    switch (subCommand) {\n+    case Init.NAME:\n+      command \u003d new Init(conf);\n+      break;\n+    case Destroy.NAME:\n+      command \u003d new Destroy(conf);\n+      break;\n+    case Import.NAME:\n+      command \u003d new Import(conf);\n+      break;\n+    case Diff.NAME:\n+      command \u003d new Diff(conf);\n+      break;\n+    case Prune.NAME:\n+      command \u003d new Prune(conf);\n+      break;\n+    default:\n+      printHelp();\n+      return INVALID_ARGUMENT;\n+    }\n+    return ToolRunner.run(conf, command, otherArgs);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int run(String[] args, Configuration conf) throws\n      Exception {\n    /* ToolRunner.run does this too, but we must do it before looking at\n    subCommand or instantiating the cmd object below */\n    String[] otherArgs \u003d new GenericOptionsParser(conf, args)\n        .getRemainingArgs();\n    if (otherArgs.length \u003d\u003d 0) {\n      printHelp();\n      return INVALID_ARGUMENT;\n    }\n    final String subCommand \u003d otherArgs[0];\n    switch (subCommand) {\n    case Init.NAME:\n      command \u003d new Init(conf);\n      break;\n    case Destroy.NAME:\n      command \u003d new Destroy(conf);\n      break;\n    case Import.NAME:\n      command \u003d new Import(conf);\n      break;\n    case Diff.NAME:\n      command \u003d new Diff(conf);\n      break;\n    case Prune.NAME:\n      command \u003d new Prune(conf);\n      break;\n    default:\n      printHelp();\n      return INVALID_ARGUMENT;\n    }\n    return ToolRunner.run(conf, command, otherArgs);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java"
    }
  }
}