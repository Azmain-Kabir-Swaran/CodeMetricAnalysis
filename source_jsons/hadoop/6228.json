{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BackupImage.java",
  "functionName": "namenodeStartedLogSegment",
  "functionId": "namenodeStartedLogSegment___txid-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
  "functionStartLine": 340,
  "functionEndLine": 355,
  "numCommitsSeen": 30,
  "timeTaken": 2565,
  "changeHistory": [
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58",
    "f87a4b40bc99e76602a75906df31747cfdbff78a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": "Ybodychange",
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4": "Ybodychange",
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58": "Ybodychange",
    "f87a4b40bc99e76602a75906df31747cfdbff78a": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
      "commitDate": "06/06/15 9:43 AM",
      "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "11/02/15 10:41 AM",
      "commitNameOld": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 114.92,
      "commitsBetweenForRepo": 1088,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   synchronized void namenodeStartedLogSegment(long txid) throws IOException {\n-    editLog.startLogSegment(txid, true);\n+    editLog.startLogSegment(txid, true, namesystem.getEffectiveLayoutVersion());\n \n     if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n       setState(BNState.JOURNAL_ONLY);\n     }\n     \n     if (stopApplyingEditsOnNextRoll) {\n       if (bnState \u003d\u003d BNState.IN_SYNC) {\n         LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n         setState(BNState.JOURNAL_ONLY);\n       }\n       stopApplyingEditsOnNextRoll \u003d false;\n       notifyAll();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid) throws IOException {\n    editLog.startLogSegment(txid, true, namesystem.getEffectiveLayoutVersion());\n\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
      "extendedDetails": {}
    },
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3273. Refactor BackupImage and FSEditLog, and rename JournalListener.rollLogs(..) to startLogSegment(..). \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/12 4:41 PM",
      "commitName": "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/04/12 12:39 PM",
      "commitNameOld": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 4.17,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,16 @@\n-  synchronized void namenodeStartedLogSegment(long txid)\n-      throws IOException {\n-    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n-    if (editLog.isSegmentOpen()) {\n-      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n-        // We are in sync with the NN, so end and finalize the current segment\n-        editLog.endCurrentLogSegment(false);\n-      } else {\n-        // We appear to have missed some transactions -- the NN probably\n-        // lost contact with us temporarily. So, mark the current segment\n-        // as aborted.\n-        LOG.warn(\"NN started new log segment at txid \" + txid +\n-            \", but BN had only written up to txid \" +\n-            editLog.getLastWrittenTxId() +\n-            \"in the log segment starting at \" + \n-        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n-        \t\t\"log segment.\");\n-        editLog.abortCurrentLogSegment();\n-      }\n-    }\n-    editLog.setNextTxId(txid);\n-    editLog.startLogSegment(txid, false);\n+  synchronized void namenodeStartedLogSegment(long txid) throws IOException {\n+    editLog.startLogSegment(txid, true);\n+\n     if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n       setState(BNState.JOURNAL_ONLY);\n     }\n     \n     if (stopApplyingEditsOnNextRoll) {\n       if (bnState \u003d\u003d BNState.IN_SYNC) {\n         LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n         setState(BNState.JOURNAL_ONLY);\n       }\n       stopApplyingEditsOnNextRoll \u003d false;\n       notifyAll();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid) throws IOException {\n    editLog.startLogSegment(txid, true);\n\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
      "extendedDetails": {}
    },
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2634. Standby needs to ingest latest edit logs before transitioning to active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1212187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 3:55 PM",
      "commitName": "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "30/11/11 1:46 PM",
      "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   synchronized void namenodeStartedLogSegment(long txid)\n       throws IOException {\n     LOG.info(\"NameNode started a new log segment at txid \" + txid);\n-    if (editLog.isOpenForWrite()) {\n+    if (editLog.isSegmentOpen()) {\n       if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n         // We are in sync with the NN, so end and finalize the current segment\n         editLog.endCurrentLogSegment(false);\n       } else {\n         // We appear to have missed some transactions -- the NN probably\n         // lost contact with us temporarily. So, mark the current segment\n         // as aborted.\n         LOG.warn(\"NN started new log segment at txid \" + txid +\n             \", but BN had only written up to txid \" +\n             editLog.getLastWrittenTxId() +\n             \"in the log segment starting at \" + \n         \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n         \t\t\"log segment.\");\n         editLog.abortCurrentLogSegment();\n       }\n     }\n     editLog.setNextTxId(txid);\n     editLog.startLogSegment(txid, false);\n     if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n       setState(BNState.JOURNAL_ONLY);\n     }\n     \n     if (stopApplyingEditsOnNextRoll) {\n       if (bnState \u003d\u003d BNState.IN_SYNC) {\n         LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n         setState(BNState.JOURNAL_ONLY);\n       }\n       stopApplyingEditsOnNextRoll \u003d false;\n       notifyAll();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid)\n      throws IOException {\n    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n    if (editLog.isSegmentOpen()) {\n      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n        // We are in sync with the NN, so end and finalize the current segment\n        editLog.endCurrentLogSegment(false);\n      } else {\n        // We appear to have missed some transactions -- the NN probably\n        // lost contact with us temporarily. So, mark the current segment\n        // as aborted.\n        LOG.warn(\"NN started new log segment at txid \" + txid +\n            \", but BN had only written up to txid \" +\n            editLog.getLastWrittenTxId() +\n            \"in the log segment starting at \" + \n        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n        \t\t\"log segment.\");\n        editLog.abortCurrentLogSegment();\n      }\n    }\n    editLog.setNextTxId(txid);\n    editLog.startLogSegment(txid, false);\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
      "extendedDetails": {}
    },
    "f87a4b40bc99e76602a75906df31747cfdbff78a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1975. Support for sharing the namenode state from active to standby. Contributed by Jitendra Nath Pandey, Aaron T Myers, and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 1:46 PM",
      "commitName": "f87a4b40bc99e76602a75906df31747cfdbff78a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "19/11/11 7:58 PM",
      "commitNameOld": "b2313021fd03d9803a04b120d97bfd91fcbd4d36",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 10.74,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   synchronized void namenodeStartedLogSegment(long txid)\n       throws IOException {\n     LOG.info(\"NameNode started a new log segment at txid \" + txid);\n-    if (editLog.isOpen()) {\n+    if (editLog.isOpenForWrite()) {\n       if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n         // We are in sync with the NN, so end and finalize the current segment\n         editLog.endCurrentLogSegment(false);\n       } else {\n         // We appear to have missed some transactions -- the NN probably\n         // lost contact with us temporarily. So, mark the current segment\n         // as aborted.\n         LOG.warn(\"NN started new log segment at txid \" + txid +\n             \", but BN had only written up to txid \" +\n             editLog.getLastWrittenTxId() +\n             \"in the log segment starting at \" + \n         \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n         \t\t\"log segment.\");\n         editLog.abortCurrentLogSegment();\n       }\n     }\n     editLog.setNextTxId(txid);\n     editLog.startLogSegment(txid, false);\n     if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n       setState(BNState.JOURNAL_ONLY);\n     }\n     \n     if (stopApplyingEditsOnNextRoll) {\n       if (bnState \u003d\u003d BNState.IN_SYNC) {\n         LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n         setState(BNState.JOURNAL_ONLY);\n       }\n       stopApplyingEditsOnNextRoll \u003d false;\n       notifyAll();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid)\n      throws IOException {\n    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n    if (editLog.isOpenForWrite()) {\n      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n        // We are in sync with the NN, so end and finalize the current segment\n        editLog.endCurrentLogSegment(false);\n      } else {\n        // We appear to have missed some transactions -- the NN probably\n        // lost contact with us temporarily. So, mark the current segment\n        // as aborted.\n        LOG.warn(\"NN started new log segment at txid \" + txid +\n            \", but BN had only written up to txid \" +\n            editLog.getLastWrittenTxId() +\n            \"in the log segment starting at \" + \n        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n        \t\t\"log segment.\");\n        editLog.abortCurrentLogSegment();\n      }\n    }\n    editLog.setNextTxId(txid);\n    editLog.startLogSegment(txid, false);\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid)\n      throws IOException {\n    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n    if (editLog.isOpen()) {\n      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n        // We are in sync with the NN, so end and finalize the current segment\n        editLog.endCurrentLogSegment(false);\n      } else {\n        // We appear to have missed some transactions -- the NN probably\n        // lost contact with us temporarily. So, mark the current segment\n        // as aborted.\n        LOG.warn(\"NN started new log segment at txid \" + txid +\n            \", but BN had only written up to txid \" +\n            editLog.getLastWrittenTxId() +\n            \"in the log segment starting at \" + \n        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n        \t\t\"log segment.\");\n        editLog.abortCurrentLogSegment();\n      }\n    }\n    editLog.setNextTxId(txid);\n    editLog.startLogSegment(txid, false);\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid)\n      throws IOException {\n    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n    if (editLog.isOpen()) {\n      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n        // We are in sync with the NN, so end and finalize the current segment\n        editLog.endCurrentLogSegment(false);\n      } else {\n        // We appear to have missed some transactions -- the NN probably\n        // lost contact with us temporarily. So, mark the current segment\n        // as aborted.\n        LOG.warn(\"NN started new log segment at txid \" + txid +\n            \", but BN had only written up to txid \" +\n            editLog.getLastWrittenTxId() +\n            \"in the log segment starting at \" + \n        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n        \t\t\"log segment.\");\n        editLog.abortCurrentLogSegment();\n      }\n    }\n    editLog.setNextTxId(txid);\n    editLog.startLogSegment(txid, false);\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,35 @@\n+  synchronized void namenodeStartedLogSegment(long txid)\n+      throws IOException {\n+    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n+    if (editLog.isOpen()) {\n+      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n+        // We are in sync with the NN, so end and finalize the current segment\n+        editLog.endCurrentLogSegment(false);\n+      } else {\n+        // We appear to have missed some transactions -- the NN probably\n+        // lost contact with us temporarily. So, mark the current segment\n+        // as aborted.\n+        LOG.warn(\"NN started new log segment at txid \" + txid +\n+            \", but BN had only written up to txid \" +\n+            editLog.getLastWrittenTxId() +\n+            \"in the log segment starting at \" + \n+        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n+        \t\t\"log segment.\");\n+        editLog.abortCurrentLogSegment();\n+      }\n+    }\n+    editLog.setNextTxId(txid);\n+    editLog.startLogSegment(txid, false);\n+    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n+      setState(BNState.JOURNAL_ONLY);\n+    }\n+    \n+    if (stopApplyingEditsOnNextRoll) {\n+      if (bnState \u003d\u003d BNState.IN_SYNC) {\n+        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n+        setState(BNState.JOURNAL_ONLY);\n+      }\n+      stopApplyingEditsOnNextRoll \u003d false;\n+      notifyAll();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void namenodeStartedLogSegment(long txid)\n      throws IOException {\n    LOG.info(\"NameNode started a new log segment at txid \" + txid);\n    if (editLog.isOpen()) {\n      if (editLog.getLastWrittenTxId() \u003d\u003d txid - 1) {\n        // We are in sync with the NN, so end and finalize the current segment\n        editLog.endCurrentLogSegment(false);\n      } else {\n        // We appear to have missed some transactions -- the NN probably\n        // lost contact with us temporarily. So, mark the current segment\n        // as aborted.\n        LOG.warn(\"NN started new log segment at txid \" + txid +\n            \", but BN had only written up to txid \" +\n            editLog.getLastWrittenTxId() +\n            \"in the log segment starting at \" + \n        \t\teditLog.getCurSegmentTxId() + \". Aborting this \" +\n        \t\t\"log segment.\");\n        editLog.abortCurrentLogSegment();\n      }\n    }\n    editLog.setNextTxId(txid);\n    editLog.startLogSegment(txid, false);\n    if (bnState \u003d\u003d BNState.DROP_UNTIL_NEXT_ROLL) {\n      setState(BNState.JOURNAL_ONLY);\n    }\n    \n    if (stopApplyingEditsOnNextRoll) {\n      if (bnState \u003d\u003d BNState.IN_SYNC) {\n        LOG.info(\"Stopped applying edits to prepare for checkpoint.\");\n        setState(BNState.JOURNAL_ONLY);\n      }\n      stopApplyingEditsOnNextRoll \u003d false;\n      notifyAll();\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BackupImage.java"
    }
  }
}