{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Component.java",
  "functionName": "getDependencyHostIpTokens",
  "functionId": "getDependencyHostIpTokens",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
  "functionStartLine": 981,
  "functionEndLine": 1007,
  "numCommitsSeen": 33,
  "timeTaken": 1885,
  "changeHistory": [
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "c70e5df100ba800f7170f44f63d388ae056cb74d"
  ],
  "changeHistoryShort": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "c70e5df100ba800f7170f44f63d388ae056cb74d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n     Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n-    if (SliderUtils.isEmpty(dependencies)) {\n+    if (ServiceUtils.isEmpty(dependencies)) {\n       return tokens;\n     }\n     for (String dependency : dependencies) {\n       Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n           .get(dependency).getAllComponentInstances();\n       for (ComponentInstance instance : instances) {\n         if (instance.getContainerStatus() \u003d\u003d null) {\n           continue;\n         }\n-        if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n-            SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n+        if (ServiceUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n+            ServiceUtils.isUnset(instance.getContainerStatus().getHost())) {\n           continue;\n         }\n         String ip \u003d instance.getContainerStatus().getIPs().get(0);\n         String host \u003d instance.getContainerStatus().getHost();\n         tokens.put(String.format(COMPONENT_INSTANCE_IP,\n             instance.getCompInstanceName().toUpperCase()), ip);\n         tokens.put(String.format(COMPONENT_INSTANCE_HOST,\n             instance.getCompInstanceName().toUpperCase()), host);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n    Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (ServiceUtils.isEmpty(dependencies)) {\n      return tokens;\n    }\n    for (String dependency : dependencies) {\n      Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n          .get(dependency).getAllComponentInstances();\n      for (ComponentInstance instance : instances) {\n        if (instance.getContainerStatus() \u003d\u003d null) {\n          continue;\n        }\n        if (ServiceUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n            ServiceUtils.isUnset(instance.getContainerStatus().getHost())) {\n          continue;\n        }\n        String ip \u003d instance.getContainerStatus().getIPs().get(0);\n        String host \u003d instance.getContainerStatus().getHost();\n        tokens.put(String.format(COMPONENT_INSTANCE_IP,\n            instance.getCompInstanceName().toUpperCase()), ip);\n        tokens.put(String.format(COMPONENT_INSTANCE_HOST,\n            instance.getCompInstanceName().toUpperCase()), host);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n     Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n     if (SliderUtils.isEmpty(dependencies)) {\n       return tokens;\n     }\n     for (String dependency : dependencies) {\n       Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n           .get(dependency).getAllComponentInstances();\n       for (ComponentInstance instance : instances) {\n         if (instance.getContainerStatus() \u003d\u003d null) {\n           continue;\n         }\n         if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n             SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n           continue;\n         }\n         String ip \u003d instance.getContainerStatus().getIPs().get(0);\n         String host \u003d instance.getContainerStatus().getHost();\n-        tokens.put(String.format(COMPONENT_IP,\n+        tokens.put(String.format(COMPONENT_INSTANCE_IP,\n             instance.getCompInstanceName().toUpperCase()), ip);\n-        tokens.put(String.format(COMPONENT_HOST,\n+        tokens.put(String.format(COMPONENT_INSTANCE_HOST,\n             instance.getCompInstanceName().toUpperCase()), host);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n    Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (SliderUtils.isEmpty(dependencies)) {\n      return tokens;\n    }\n    for (String dependency : dependencies) {\n      Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n          .get(dependency).getAllComponentInstances();\n      for (ComponentInstance instance : instances) {\n        if (instance.getContainerStatus() \u003d\u003d null) {\n          continue;\n        }\n        if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n            SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n          continue;\n        }\n        String ip \u003d instance.getContainerStatus().getIPs().get(0);\n        String host \u003d instance.getContainerStatus().getHost();\n        tokens.put(String.format(COMPONENT_INSTANCE_IP,\n            instance.getCompInstanceName().toUpperCase()), ip);\n        tokens.put(String.format(COMPONENT_INSTANCE_HOST,\n            instance.getCompInstanceName().toUpperCase()), host);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "c70e5df100ba800f7170f44f63d388ae056cb74d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n     Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n     if (SliderUtils.isEmpty(dependencies)) {\n       return tokens;\n     }\n     for (String dependency : dependencies) {\n       Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n-          .get(dependency).getAllComponentInstances().values();\n+          .get(dependency).getAllComponentInstances();\n       for (ComponentInstance instance : instances) {\n         if (instance.getContainerStatus() \u003d\u003d null) {\n           continue;\n         }\n         if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n             SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n           continue;\n         }\n         String ip \u003d instance.getContainerStatus().getIPs().get(0);\n         String host \u003d instance.getContainerStatus().getHost();\n         tokens.put(String.format(COMPONENT_IP,\n             instance.getCompInstanceName().toUpperCase()), ip);\n         tokens.put(String.format(COMPONENT_HOST,\n             instance.getCompInstanceName().toUpperCase()), host);\n       }\n     }\n     return tokens;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n    Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (SliderUtils.isEmpty(dependencies)) {\n      return tokens;\n    }\n    for (String dependency : dependencies) {\n      Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n          .get(dependency).getAllComponentInstances();\n      for (ComponentInstance instance : instances) {\n        if (instance.getContainerStatus() \u003d\u003d null) {\n          continue;\n        }\n        if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n            SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n          continue;\n        }\n        String ip \u003d instance.getContainerStatus().getIPs().get(0);\n        String host \u003d instance.getContainerStatus().getHost();\n        tokens.put(String.format(COMPONENT_IP,\n            instance.getCompInstanceName().toUpperCase()), ip);\n        tokens.put(String.format(COMPONENT_HOST,\n            instance.getCompInstanceName().toUpperCase()), host);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "c70e5df100ba800f7170f44f63d388ae056cb74d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7201. Added an apache httpd example YARN service. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "c70e5df100ba800f7170f44f63d388ae056cb74d",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,27 @@\n+  public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n+    Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n+    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n+    if (SliderUtils.isEmpty(dependencies)) {\n+      return tokens;\n+    }\n+    for (String dependency : dependencies) {\n+      Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n+          .get(dependency).getAllComponentInstances().values();\n+      for (ComponentInstance instance : instances) {\n+        if (instance.getContainerStatus() \u003d\u003d null) {\n+          continue;\n+        }\n+        if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n+            SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n+          continue;\n+        }\n+        String ip \u003d instance.getContainerStatus().getIPs().get(0);\n+        String host \u003d instance.getContainerStatus().getHost();\n+        tokens.put(String.format(COMPONENT_IP,\n+            instance.getCompInstanceName().toUpperCase()), ip);\n+        tokens.put(String.format(COMPONENT_HOST,\n+            instance.getCompInstanceName().toUpperCase()), host);\n+      }\n+    }\n+    return tokens;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDependencyHostIpTokens() {\n    Map\u003cString, String\u003e tokens \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e dependencies \u003d componentSpec.getDependencies();\n    if (SliderUtils.isEmpty(dependencies)) {\n      return tokens;\n    }\n    for (String dependency : dependencies) {\n      Collection\u003cComponentInstance\u003e instances \u003d scheduler.getAllComponents()\n          .get(dependency).getAllComponentInstances().values();\n      for (ComponentInstance instance : instances) {\n        if (instance.getContainerStatus() \u003d\u003d null) {\n          continue;\n        }\n        if (SliderUtils.isEmpty(instance.getContainerStatus().getIPs()) ||\n            SliderUtils.isUnset(instance.getContainerStatus().getHost())) {\n          continue;\n        }\n        String ip \u003d instance.getContainerStatus().getIPs().get(0);\n        String host \u003d instance.getContainerStatus().getHost();\n        tokens.put(String.format(COMPONENT_IP,\n            instance.getCompInstanceName().toUpperCase()), ip);\n        tokens.put(String.format(COMPONENT_HOST,\n            instance.getCompInstanceName().toUpperCase()), host);\n      }\n    }\n    return tokens;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
    }
  }
}