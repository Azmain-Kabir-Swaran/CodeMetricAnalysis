{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdminService.java",
  "functionName": "validateAndFetch",
  "functionId": "validateAndFetch___nodesToAttributesMapping-List__NodeToAttributes____failOnUnknownNodes-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
  "functionStartLine": 1053,
  "functionEndLine": 1079,
  "numCommitsSeen": 78,
  "timeTaken": 1603,
  "changeHistory": [
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
    "901e85238da08129374d44af80716b07f0b912e6"
  ],
  "changeHistoryShort": {
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": "Ybodychange",
    "901e85238da08129374d44af80716b07f0b912e6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "901e85238da08129374d44af80716b07f0b912e6",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private Map\u003cString, Set\u003cNodeAttribute\u003e\u003e validateAndFetch(\n       List\u003cNodeToAttributes\u003e nodesToAttributesMapping,\n       boolean failOnUnknownNodes) throws IOException {\n     Map\u003cString, Set\u003cNodeAttribute\u003e\u003e attributeMapping \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e invalidNodes \u003d new ArrayList\u003c\u003e();\n     for (NodeToAttributes nodeToAttributes : nodesToAttributesMapping) {\n       String node \u003d nodeToAttributes.getNode();\n       if (!validateForInvalidNode(node, failOnUnknownNodes)) {\n         invalidNodes.add(node);\n         continue;\n       }\n       List\u003cNodeAttribute\u003e nodeAttributes \u003d nodeToAttributes.getNodeAttributes();\n       if (!nodeAttributes.stream()\n           .allMatch(nodeAttribute -\u003e NodeAttribute.PREFIX_CENTRALIZED\n-              .equals(nodeAttribute.getAttributePrefix()))) {\n+              .equals(nodeAttribute.getAttributeKey().getAttributePrefix()))) {\n         throw new IOException(\"Invalid Attribute Mapping for the node \" + node\n             + \". Prefix should be \" + NodeAttribute.PREFIX_CENTRALIZED);\n       }\n       attributeMapping.put(node, new HashSet\u003c\u003e(nodeAttributes));\n     }\n     if (!invalidNodes.isEmpty()) {\n       String message \u003d \" Following nodes does not exist : \" + invalidNodes;\n       LOG.error(message);\n       throw new IOException(message);\n     }\n     return attributeMapping;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Set\u003cNodeAttribute\u003e\u003e validateAndFetch(\n      List\u003cNodeToAttributes\u003e nodesToAttributesMapping,\n      boolean failOnUnknownNodes) throws IOException {\n    Map\u003cString, Set\u003cNodeAttribute\u003e\u003e attributeMapping \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e invalidNodes \u003d new ArrayList\u003c\u003e();\n    for (NodeToAttributes nodeToAttributes : nodesToAttributesMapping) {\n      String node \u003d nodeToAttributes.getNode();\n      if (!validateForInvalidNode(node, failOnUnknownNodes)) {\n        invalidNodes.add(node);\n        continue;\n      }\n      List\u003cNodeAttribute\u003e nodeAttributes \u003d nodeToAttributes.getNodeAttributes();\n      if (!nodeAttributes.stream()\n          .allMatch(nodeAttribute -\u003e NodeAttribute.PREFIX_CENTRALIZED\n              .equals(nodeAttribute.getAttributeKey().getAttributePrefix()))) {\n        throw new IOException(\"Invalid Attribute Mapping for the node \" + node\n            + \". Prefix should be \" + NodeAttribute.PREFIX_CENTRALIZED);\n      }\n      attributeMapping.put(node, new HashSet\u003c\u003e(nodeAttributes));\n    }\n    if (!invalidNodes.isEmpty()) {\n      String message \u003d \" Following nodes does not exist : \" + invalidNodes;\n      LOG.error(message);\n      throw new IOException(message);\n    }\n    return attributeMapping;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "901e85238da08129374d44af80716b07f0b912e6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8033. CLI Integration with NodeAttributesManagerImpl. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "901e85238da08129374d44af80716b07f0b912e6",
      "commitAuthor": "bibinchundatt",
      "diff": "@@ -0,0 +1,27 @@\n+  private Map\u003cString, Set\u003cNodeAttribute\u003e\u003e validateAndFetch(\n+      List\u003cNodeToAttributes\u003e nodesToAttributesMapping,\n+      boolean failOnUnknownNodes) throws IOException {\n+    Map\u003cString, Set\u003cNodeAttribute\u003e\u003e attributeMapping \u003d new HashMap\u003c\u003e();\n+    List\u003cString\u003e invalidNodes \u003d new ArrayList\u003c\u003e();\n+    for (NodeToAttributes nodeToAttributes : nodesToAttributesMapping) {\n+      String node \u003d nodeToAttributes.getNode();\n+      if (!validateForInvalidNode(node, failOnUnknownNodes)) {\n+        invalidNodes.add(node);\n+        continue;\n+      }\n+      List\u003cNodeAttribute\u003e nodeAttributes \u003d nodeToAttributes.getNodeAttributes();\n+      if (!nodeAttributes.stream()\n+          .allMatch(nodeAttribute -\u003e NodeAttribute.PREFIX_CENTRALIZED\n+              .equals(nodeAttribute.getAttributePrefix()))) {\n+        throw new IOException(\"Invalid Attribute Mapping for the node \" + node\n+            + \". Prefix should be \" + NodeAttribute.PREFIX_CENTRALIZED);\n+      }\n+      attributeMapping.put(node, new HashSet\u003c\u003e(nodeAttributes));\n+    }\n+    if (!invalidNodes.isEmpty()) {\n+      String message \u003d \" Following nodes does not exist : \" + invalidNodes;\n+      LOG.error(message);\n+      throw new IOException(message);\n+    }\n+    return attributeMapping;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Set\u003cNodeAttribute\u003e\u003e validateAndFetch(\n      List\u003cNodeToAttributes\u003e nodesToAttributesMapping,\n      boolean failOnUnknownNodes) throws IOException {\n    Map\u003cString, Set\u003cNodeAttribute\u003e\u003e attributeMapping \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e invalidNodes \u003d new ArrayList\u003c\u003e();\n    for (NodeToAttributes nodeToAttributes : nodesToAttributesMapping) {\n      String node \u003d nodeToAttributes.getNode();\n      if (!validateForInvalidNode(node, failOnUnknownNodes)) {\n        invalidNodes.add(node);\n        continue;\n      }\n      List\u003cNodeAttribute\u003e nodeAttributes \u003d nodeToAttributes.getNodeAttributes();\n      if (!nodeAttributes.stream()\n          .allMatch(nodeAttribute -\u003e NodeAttribute.PREFIX_CENTRALIZED\n              .equals(nodeAttribute.getAttributePrefix()))) {\n        throw new IOException(\"Invalid Attribute Mapping for the node \" + node\n            + \". Prefix should be \" + NodeAttribute.PREFIX_CENTRALIZED);\n      }\n      attributeMapping.put(node, new HashSet\u003c\u003e(nodeAttributes));\n    }\n    if (!invalidNodes.isEmpty()) {\n      String message \u003d \" Following nodes does not exist : \" + invalidNodes;\n      LOG.error(message);\n      throw new IOException(message);\n    }\n    return attributeMapping;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java"
    }
  }
}