{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "recover",
  "functionId": "recover",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 362,
  "functionEndLine": 401,
  "numCommitsSeen": 139,
  "timeTaken": 6645,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
    "3150ae8108a1fc40a67926be6254824c1e37cb38",
    "1cd55e0c171f7c4dec6f843931285557d59cd5ea",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f",
    "66598697a6e777615334ebde5ba7738135da83ae"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": "Ybodychange",
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": "Ybodychange",
    "3150ae8108a1fc40a67926be6254824c1e37cb38": "Ybodychange",
    "1cd55e0c171f7c4dec6f843931285557d59cd5ea": "Ybodychange",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Ybodychange",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/02/19 7:31 AM",
      "commitNameOld": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 21.33,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,40 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       try (RecoveryIterator\u003cContainerManagerApplicationProto\u003e rasIterator \u003d\n                appsState.getIterator()) {\n         while (rasIterator.hasNext()) {\n           ContainerManagerApplicationProto proto \u003d rasIterator.next();\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Recovering application with state: \" + proto.toString());\n-          }\n+          LOG.debug(\"Recovering application with state: {}\", proto);\n           recoverApplication(proto);\n         }\n       }\n \n       try (RecoveryIterator\u003cRecoveredContainerState\u003e rcsIterator \u003d\n                stateStore.getContainerStateIterator()) {\n         while (rcsIterator.hasNext()) {\n           RecoveredContainerState rcs \u003d rcsIterator.next();\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Recovering container with state: \" + rcs);\n-          }\n+          LOG.debug(\"Recovering container with state: {}\", rcs);\n           recoverContainer(rcs);\n         }\n       }\n \n       // Recovery AMRMProxy state after apps and containers are recovered\n       if (this.amrmProxyEnabled) {\n         this.getAMRMProxyService().recover();\n       }\n \n       //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n       //so that all the paused, scheduled and queued containers will\n       //be scheduled for execution on availability of resources.\n       dispatcher.getEventHandler().handle(\n           new ContainerSchedulerEvent(null,\n               ContainerSchedulerEventType.RECOVERY_COMPLETED));\n     } else {\n       LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      try (RecoveryIterator\u003cContainerManagerApplicationProto\u003e rasIterator \u003d\n               appsState.getIterator()) {\n        while (rasIterator.hasNext()) {\n          ContainerManagerApplicationProto proto \u003d rasIterator.next();\n          LOG.debug(\"Recovering application with state: {}\", proto);\n          recoverApplication(proto);\n        }\n      }\n\n      try (RecoveryIterator\u003cRecoveredContainerState\u003e rcsIterator \u003d\n               stateStore.getContainerStateIterator()) {\n        while (rcsIterator.hasNext()) {\n          RecoveredContainerState rcs \u003d rcsIterator.next();\n          LOG.debug(\"Recovering container with state: {}\", rcs);\n          recoverContainer(rcs);\n        }\n      }\n\n      // Recovery AMRMProxy state after apps and containers are recovered\n      if (this.amrmProxyEnabled) {\n        this.getAMRMProxyService().recover();\n      }\n\n      //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n      //so that all the paused, scheduled and queued containers will\n      //be scheduled for execution on availability of resources.\n      dispatcher.getEventHandler().handle(\n          new ContainerSchedulerEvent(null,\n              ContainerSchedulerEventType.RECOVERY_COMPLETED));\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "31/07/18 12:08 PM",
      "commitNameOld": "4b540bbfcf02d828052999215c6135603d98f5db",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.84,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,44 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n-      for (ContainerManagerApplicationProto proto :\n-           appsState.getApplications()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Recovering application with state: \" + proto.toString());\n+      try (RecoveryIterator\u003cContainerManagerApplicationProto\u003e rasIterator \u003d\n+               appsState.getIterator()) {\n+        while (rasIterator.hasNext()) {\n+          ContainerManagerApplicationProto proto \u003d rasIterator.next();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Recovering application with state: \" + proto.toString());\n+          }\n+          recoverApplication(proto);\n         }\n-        recoverApplication(proto);\n       }\n \n-      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Recovering container with state: \" + rcs);\n+      try (RecoveryIterator\u003cRecoveredContainerState\u003e rcsIterator \u003d\n+               stateStore.getContainerStateIterator()) {\n+        while (rcsIterator.hasNext()) {\n+          RecoveredContainerState rcs \u003d rcsIterator.next();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Recovering container with state: \" + rcs);\n+          }\n+          recoverContainer(rcs);\n         }\n-        recoverContainer(rcs);\n       }\n \n       // Recovery AMRMProxy state after apps and containers are recovered\n       if (this.amrmProxyEnabled) {\n         this.getAMRMProxyService().recover();\n       }\n \n       //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n       //so that all the paused, scheduled and queued containers will\n       //be scheduled for execution on availability of resources.\n       dispatcher.getEventHandler().handle(\n           new ContainerSchedulerEvent(null,\n               ContainerSchedulerEventType.RECOVERY_COMPLETED));\n     } else {\n       LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      try (RecoveryIterator\u003cContainerManagerApplicationProto\u003e rasIterator \u003d\n               appsState.getIterator()) {\n        while (rasIterator.hasNext()) {\n          ContainerManagerApplicationProto proto \u003d rasIterator.next();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Recovering application with state: \" + proto.toString());\n          }\n          recoverApplication(proto);\n        }\n      }\n\n      try (RecoveryIterator\u003cRecoveredContainerState\u003e rcsIterator \u003d\n               stateStore.getContainerStateIterator()) {\n        while (rcsIterator.hasNext()) {\n          RecoveredContainerState rcs \u003d rcsIterator.next();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Recovering container with state: \" + rcs);\n          }\n          recoverContainer(rcs);\n        }\n      }\n\n      // Recovery AMRMProxy state after apps and containers are recovered\n      if (this.amrmProxyEnabled) {\n        this.getAMRMProxyService().recover();\n      }\n\n      //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n      //so that all the paused, scheduled and queued containers will\n      //be scheduled for execution on availability of resources.\n      dispatcher.getEventHandler().handle(\n          new ContainerSchedulerEvent(null,\n              ContainerSchedulerEventType.RECOVERY_COMPLETED));\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 11.17,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n-      if (this.amrmProxyEnabled) {\n-        this.getAMRMProxyService().recover();\n-      }\n-\n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       for (ContainerManagerApplicationProto proto :\n            appsState.getApplications()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering application with state: \" + proto.toString());\n         }\n         recoverApplication(proto);\n       }\n \n       for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering container with state: \" + rcs);\n         }\n         recoverContainer(rcs);\n       }\n \n+      // Recovery AMRMProxy state after apps and containers are recovered\n+      if (this.amrmProxyEnabled) {\n+        this.getAMRMProxyService().recover();\n+      }\n+\n       //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n       //so that all the paused, scheduled and queued containers will\n       //be scheduled for execution on availability of resources.\n       dispatcher.getEventHandler().handle(\n           new ContainerSchedulerEvent(null,\n               ContainerSchedulerEventType.RECOVERY_COMPLETED));\n     } else {\n       LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering application with state: \" + proto.toString());\n        }\n        recoverApplication(proto);\n      }\n\n      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering container with state: \" + rcs);\n        }\n        recoverContainer(rcs);\n      }\n\n      // Recovery AMRMProxy state after apps and containers are recovered\n      if (this.amrmProxyEnabled) {\n        this.getAMRMProxyService().recover();\n      }\n\n      //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n      //so that all the paused, scheduled and queued containers will\n      //be scheduled for execution on availability of resources.\n      dispatcher.getEventHandler().handle(\n          new ContainerSchedulerEvent(null,\n              ContainerSchedulerEventType.RECOVERY_COMPLETED));\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7275. NM Statestore cleanup for Container updates. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "16/10/17 1:12 PM",
      "commitName": "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "03/10/17 3:01 PM",
      "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 12.92,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,36 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n       if (this.amrmProxyEnabled) {\n         this.getAMRMProxyService().recover();\n       }\n \n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       for (ContainerManagerApplicationProto proto :\n            appsState.getApplications()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering application with state: \" + proto.toString());\n         }\n         recoverApplication(proto);\n       }\n \n       for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering container with state: \" + rcs);\n         }\n         recoverContainer(rcs);\n       }\n+\n+      //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n+      //so that all the paused, scheduled and queued containers will\n+      //be scheduled for execution on availability of resources.\n+      dispatcher.getEventHandler().handle(\n+          new ContainerSchedulerEvent(null,\n+              ContainerSchedulerEventType.RECOVERY_COMPLETED));\n     } else {\n       LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      if (this.amrmProxyEnabled) {\n        this.getAMRMProxyService().recover();\n      }\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering application with state: \" + proto.toString());\n        }\n        recoverApplication(proto);\n      }\n\n      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering container with state: \" + rcs);\n        }\n        recoverContainer(rcs);\n      }\n\n      //Dispatching the RECOVERY_COMPLETED event through the dispatcher\n      //so that all the paused, scheduled and queued containers will\n      //be scheduled for execution on availability of resources.\n      dispatcher.getEventHandler().handle(\n          new ContainerSchedulerEvent(null,\n              ContainerSchedulerEventType.RECOVERY_COMPLETED));\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6127. Add support for work preserving NM restart when AMRMProxy is enabled. (Botong Huang via asuresh).\n",
      "commitDate": "22/06/17 11:27 AM",
      "commitName": "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "02/06/17 8:50 AM",
      "commitNameOld": "73ecb19312879d54e1cbe80199fe950d81c81104",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 20.11,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n+      if (this.amrmProxyEnabled) {\n+        this.getAMRMProxyService().recover();\n+      }\n+\n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       for (ContainerManagerApplicationProto proto :\n            appsState.getApplications()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering application with state: \" + proto.toString());\n         }\n         recoverApplication(proto);\n       }\n \n       for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering container with state: \" + rcs);\n         }\n         recoverContainer(rcs);\n       }\n     } else {\n       LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      if (this.amrmProxyEnabled) {\n        this.getAMRMProxyService().recover();\n      }\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering application with state: \" + proto.toString());\n        }\n        recoverApplication(proto);\n      }\n\n      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering container with state: \" + rcs);\n        }\n        recoverContainer(rcs);\n      }\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "3150ae8108a1fc40a67926be6254824c1e37cb38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4924. NM recovery race can lead to container not cleaned up. Contributed by sandflee\n",
      "commitDate": "14/04/16 12:17 PM",
      "commitName": "3150ae8108a1fc40a67926be6254824c1e37cb38",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/03/16 8:22 PM",
      "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 17.66,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,25 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       for (ContainerManagerApplicationProto proto :\n            appsState.getApplications()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering application with state: \" + proto.toString());\n         }\n         recoverApplication(proto);\n       }\n \n       for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Recovering container with state: \" + rcs);\n         }\n-\n         recoverContainer(rcs);\n       }\n-\n-      String diagnostic \u003d \"Application marked finished during recovery\";\n-      for (ApplicationId appId : appsState.getFinishedApplications()) {\n-\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Application marked finished during recovery: \" + appId);\n-        }\n-\n-        dispatcher.getEventHandler().handle(\n-            new ApplicationFinishEvent(appId, diagnostic));\n-      }\n     } else {\n       LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering application with state: \" + proto.toString());\n        }\n        recoverApplication(proto);\n      }\n\n      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering container with state: \" + rcs);\n        }\n        recoverContainer(rcs);\n      }\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "1cd55e0c171f7c4dec6f843931285557d59cd5ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4649. Add additional logging to some NM state store operations. Contributed by Sidharta Seethana\n",
      "commitDate": "01/02/16 7:55 PM",
      "commitName": "1cd55e0c171f7c4dec6f843931285557d59cd5ea",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "25/01/16 3:36 PM",
      "commitNameOld": "992dd2f783fc051c32727d4a45a5c61c22bf5640",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,37 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       for (ContainerManagerApplicationProto proto :\n            appsState.getApplications()) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Recovering application with state: \" + proto.toString());\n+        }\n         recoverApplication(proto);\n       }\n \n       for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Recovering container with state: \" + rcs);\n+        }\n+\n         recoverContainer(rcs);\n       }\n \n       String diagnostic \u003d \"Application marked finished during recovery\";\n       for (ApplicationId appId : appsState.getFinishedApplications()) {\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Application marked finished during recovery: \" + appId);\n+        }\n+\n         dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appId, diagnostic));\n       }\n+    } else {\n+      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering application with state: \" + proto.toString());\n        }\n        recoverApplication(proto);\n      }\n\n      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering container with state: \" + rcs);\n        }\n\n        recoverContainer(rcs);\n      }\n\n      String diagnostic \u003d \"Application marked finished during recovery\";\n      for (ApplicationId appId : appsState.getFinishedApplications()) {\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Application marked finished during recovery: \" + appId);\n        }\n\n        dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appId, diagnostic));\n      }\n    } else {\n      LOG.info(\"Not a recoverable state store. Nothing to recover.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "commitDateOld": "04/08/14 6:25 AM",
      "commitNameOld": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.9,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n \n       RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n       for (ContainerManagerApplicationProto proto :\n            appsState.getApplications()) {\n         recoverApplication(proto);\n       }\n \n+      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n+        recoverContainer(rcs);\n+      }\n+\n       String diagnostic \u003d \"Application marked finished during recovery\";\n       for (ApplicationId appId : appsState.getFinishedApplications()) {\n         dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appId, diagnostic));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        recoverApplication(proto);\n      }\n\n      for (RecoveredContainerState rcs : stateStore.loadContainersState()) {\n        recoverContainer(rcs);\n      }\n\n      String diagnostic \u003d \"Application marked finished during recovery\";\n      for (ApplicationId appId : appsState.getFinishedApplications()) {\n        dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appId, diagnostic));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 6:25 AM",
      "commitName": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/08/14 4:44 PM",
      "commitNameOld": "a41c314373bf92669e35ddfcbec1114826c437e7",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.57,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,19 @@\n   private void recover() throws IOException, URISyntaxException {\n     NMStateStoreService stateStore \u003d context.getNMStateStore();\n     if (stateStore.canRecover()) {\n       rsrcLocalizationSrvc.recoverLocalizedResources(\n           stateStore.loadLocalizationState());\n+\n+      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n+      for (ContainerManagerApplicationProto proto :\n+           appsState.getApplications()) {\n+        recoverApplication(proto);\n+      }\n+\n+      String diagnostic \u003d \"Application marked finished during recovery\";\n+      for (ApplicationId appId : appsState.getFinishedApplications()) {\n+        dispatcher.getEventHandler().handle(\n+            new ApplicationFinishEvent(appId, diagnostic));\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n\n      RecoveredApplicationsState appsState \u003d stateStore.loadApplicationsState();\n      for (ContainerManagerApplicationProto proto :\n           appsState.getApplications()) {\n        recoverApplication(proto);\n      }\n\n      String diagnostic \u003d \"Application marked finished during recovery\";\n      for (ApplicationId appId : appsState.getFinishedApplications()) {\n        dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appId, diagnostic));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,7 @@\n+  private void recover() throws IOException, URISyntaxException {\n+    NMStateStoreService stateStore \u003d context.getNMStateStore();\n+    if (stateStore.canRecover()) {\n+      rsrcLocalizationSrvc.recoverLocalizedResources(\n+          stateStore.loadLocalizationState());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException, URISyntaxException {\n    NMStateStoreService stateStore \u003d context.getNMStateStore();\n    if (stateStore.canRecover()) {\n      rsrcLocalizationSrvc.recoverLocalizedResources(\n          stateStore.loadLocalizationState());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}