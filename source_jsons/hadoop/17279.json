{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MembershipNamenodeResolver.java",
  "functionName": "registerNamenode",
  "functionId": "registerNamenode___report-NamenodeStatusReport",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
  "functionStartLine": 257,
  "functionEndLine": 320,
  "numCommitsSeen": 13,
  "timeTaken": 4696,
  "changeHistory": [
    "936bf09c3745cfec26fa9cfa0562f88b1f8be133",
    "275c478330d5c8cae3c15b876cc8128d164e9fa0",
    "79010627074c4b830008444f92d8410aa1717006",
    "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
    "1dc01e59af9a504e473d696be3d40e056db450ab",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
    "81601dac8ec7650bec14700b174910390a92fe1f",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81"
  ],
  "changeHistoryShort": {
    "936bf09c3745cfec26fa9cfa0562f88b1f8be133": "Ybodychange",
    "275c478330d5c8cae3c15b876cc8128d164e9fa0": "Ybodychange",
    "79010627074c4b830008444f92d8410aa1717006": "Ybodychange",
    "1ce25e702b5086fc81f7fc23fcb87db167f3804d": "Ybodychange",
    "1dc01e59af9a504e473d696be3d40e056db450ab": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88": "Ybodychange",
    "81601dac8ec7650bec14700b174910390a92fe1f": "Ybodychange",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": "Ybodychange",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Yintroduced"
  },
  "changeHistoryDetails": {
    "936bf09c3745cfec26fa9cfa0562f88b1f8be133": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15300. RBF: updateActiveNamenode() is invalid when RPC address is IP. Contributed by xuzq.\n",
      "commitDate": "12/05/20 9:24 AM",
      "commitName": "936bf09c3745cfec26fa9cfa0562f88b1f8be133",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "09/04/20 11:14 AM",
      "commitNameOld": "275c478330d5c8cae3c15b876cc8128d164e9fa0",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 32.92,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n-        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n+        report.getClusterId(), report.getBlockPoolId(),\n+        NetUtils.normalizeIP2HostName(report.getRpcAddress()),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebScheme(), report.getWebAddress(), report.getState(),\n         report.getSafemode());\n \n     if (report.statsValid()) {\n       MembershipStats stats \u003d MembershipStats.newInstance();\n       stats.setNumOfFiles(report.getNumFiles());\n       stats.setNumOfBlocks(report.getNumBlocks());\n       stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n       stats.setNumOfBlocksPendingReplication(\n           report.getNumOfBlocksPendingReplication());\n       stats.setNumOfBlocksUnderReplicated(\n           report.getNumOfBlocksUnderReplicated());\n       stats.setNumOfBlocksPendingDeletion(\n           report.getNumOfBlocksPendingDeletion());\n       stats.setAvailableSpace(report.getAvailableSpace());\n       stats.setTotalSpace(report.getTotalSpace());\n       stats.setProvidedSpace(report.getProvidedSpace());\n       stats.setNumOfDecommissioningDatanodes(\n           report.getNumDecommissioningDatanodes());\n       stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n       stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n       stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n       stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n       stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n       stats.setNumOfInMaintenanceLiveDataNodes(\n           report.getNumInMaintenanceLiveDataNodes());\n       stats.setNumOfInMaintenanceDeadDataNodes(\n           report.getNumInMaintenanceDeadDataNodes());\n       stats.setNumOfEnteringMaintenanceDataNodes(\n           report.getNumEnteringMaintenanceDataNodes());\n       stats.setCorruptFilesCount(report.getCorruptFilesCount());\n       stats.setScheduledReplicationBlocks(\n           report.getScheduledReplicationBlocks());\n       stats.setNumberOfMissingBlocksWithReplicationFactorOne(\n           report.getNumberOfMissingBlocksWithReplicationFactorOne());\n       stats.setHighestPriorityLowRedundancyReplicatedBlocks(\n           report.getHighestPriorityLowRedundancyReplicatedBlocks());\n       stats.setHighestPriorityLowRedundancyECBlocks(\n           report.getHighestPriorityLowRedundancyECBlocks());\n       record.setStats(stats);\n     }\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(),\n        NetUtils.normalizeIP2HostName(report.getRpcAddress()),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebScheme(), report.getWebAddress(), report.getState(),\n        report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      stats.setNumOfInMaintenanceLiveDataNodes(\n          report.getNumInMaintenanceLiveDataNodes());\n      stats.setNumOfInMaintenanceDeadDataNodes(\n          report.getNumInMaintenanceDeadDataNodes());\n      stats.setNumOfEnteringMaintenanceDataNodes(\n          report.getNumEnteringMaintenanceDataNodes());\n      stats.setCorruptFilesCount(report.getCorruptFilesCount());\n      stats.setScheduledReplicationBlocks(\n          report.getScheduledReplicationBlocks());\n      stats.setNumberOfMissingBlocksWithReplicationFactorOne(\n          report.getNumberOfMissingBlocksWithReplicationFactorOne());\n      stats.setHighestPriorityLowRedundancyReplicatedBlocks(\n          report.getHighestPriorityLowRedundancyReplicatedBlocks());\n      stats.setHighestPriorityLowRedundancyECBlocks(\n          report.getHighestPriorityLowRedundancyECBlocks());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "275c478330d5c8cae3c15b876cc8128d164e9fa0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15261. RBF: Add Block Related Metrics. Contributed by Ayush Saxena.\n",
      "commitDate": "09/04/20 11:14 AM",
      "commitName": "275c478330d5c8cae3c15b876cc8128d164e9fa0",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "10/01/20 8:51 PM",
      "commitNameOld": "7b62409ace165603ee137561d7d75b1e742ed9a2",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 89.56,
      "commitsBetweenForRepo": 293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,63 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebScheme(), report.getWebAddress(), report.getState(),\n         report.getSafemode());\n \n     if (report.statsValid()) {\n       MembershipStats stats \u003d MembershipStats.newInstance();\n       stats.setNumOfFiles(report.getNumFiles());\n       stats.setNumOfBlocks(report.getNumBlocks());\n       stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n       stats.setNumOfBlocksPendingReplication(\n           report.getNumOfBlocksPendingReplication());\n       stats.setNumOfBlocksUnderReplicated(\n           report.getNumOfBlocksUnderReplicated());\n       stats.setNumOfBlocksPendingDeletion(\n           report.getNumOfBlocksPendingDeletion());\n       stats.setAvailableSpace(report.getAvailableSpace());\n       stats.setTotalSpace(report.getTotalSpace());\n       stats.setProvidedSpace(report.getProvidedSpace());\n       stats.setNumOfDecommissioningDatanodes(\n           report.getNumDecommissioningDatanodes());\n       stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n       stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n       stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n       stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n       stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n       stats.setNumOfInMaintenanceLiveDataNodes(\n           report.getNumInMaintenanceLiveDataNodes());\n       stats.setNumOfInMaintenanceDeadDataNodes(\n           report.getNumInMaintenanceDeadDataNodes());\n       stats.setNumOfEnteringMaintenanceDataNodes(\n           report.getNumEnteringMaintenanceDataNodes());\n+      stats.setCorruptFilesCount(report.getCorruptFilesCount());\n+      stats.setScheduledReplicationBlocks(\n+          report.getScheduledReplicationBlocks());\n+      stats.setNumberOfMissingBlocksWithReplicationFactorOne(\n+          report.getNumberOfMissingBlocksWithReplicationFactorOne());\n+      stats.setHighestPriorityLowRedundancyReplicatedBlocks(\n+          report.getHighestPriorityLowRedundancyReplicatedBlocks());\n+      stats.setHighestPriorityLowRedundancyECBlocks(\n+          report.getHighestPriorityLowRedundancyECBlocks());\n       record.setStats(stats);\n     }\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebScheme(), report.getWebAddress(), report.getState(),\n        report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      stats.setNumOfInMaintenanceLiveDataNodes(\n          report.getNumInMaintenanceLiveDataNodes());\n      stats.setNumOfInMaintenanceDeadDataNodes(\n          report.getNumInMaintenanceDeadDataNodes());\n      stats.setNumOfEnteringMaintenanceDataNodes(\n          report.getNumEnteringMaintenanceDataNodes());\n      stats.setCorruptFilesCount(report.getCorruptFilesCount());\n      stats.setScheduledReplicationBlocks(\n          report.getScheduledReplicationBlocks());\n      stats.setNumberOfMissingBlocksWithReplicationFactorOne(\n          report.getNumberOfMissingBlocksWithReplicationFactorOne());\n      stats.setHighestPriorityLowRedundancyReplicatedBlocks(\n          report.getHighestPriorityLowRedundancyReplicatedBlocks());\n      stats.setHighestPriorityLowRedundancyECBlocks(\n          report.getHighestPriorityLowRedundancyECBlocks());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "79010627074c4b830008444f92d8410aa1717006": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14891. RBF: namenode links in NameFederation Health page (federationhealth.html) cannot use https scheme. Contributed by Xieming Li\n",
      "commitDate": "04/11/19 10:03 PM",
      "commitName": "79010627074c4b830008444f92d8410aa1717006",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 133.56,
      "commitsBetweenForRepo": 1015,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n-        report.getWebAddress(), report.getState(), report.getSafemode());\n+        report.getWebScheme(), report.getWebAddress(), report.getState(),\n+        report.getSafemode());\n \n     if (report.statsValid()) {\n       MembershipStats stats \u003d MembershipStats.newInstance();\n       stats.setNumOfFiles(report.getNumFiles());\n       stats.setNumOfBlocks(report.getNumBlocks());\n       stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n       stats.setNumOfBlocksPendingReplication(\n           report.getNumOfBlocksPendingReplication());\n       stats.setNumOfBlocksUnderReplicated(\n           report.getNumOfBlocksUnderReplicated());\n       stats.setNumOfBlocksPendingDeletion(\n           report.getNumOfBlocksPendingDeletion());\n       stats.setAvailableSpace(report.getAvailableSpace());\n       stats.setTotalSpace(report.getTotalSpace());\n       stats.setProvidedSpace(report.getProvidedSpace());\n       stats.setNumOfDecommissioningDatanodes(\n           report.getNumDecommissioningDatanodes());\n       stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n       stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n       stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n       stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n       stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n       stats.setNumOfInMaintenanceLiveDataNodes(\n           report.getNumInMaintenanceLiveDataNodes());\n       stats.setNumOfInMaintenanceDeadDataNodes(\n           report.getNumInMaintenanceDeadDataNodes());\n       stats.setNumOfEnteringMaintenanceDataNodes(\n           report.getNumEnteringMaintenanceDataNodes());\n       record.setStats(stats);\n     }\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebScheme(), report.getWebAddress(), report.getState(),\n        report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      stats.setNumOfInMaintenanceLiveDataNodes(\n          report.getNumInMaintenanceLiveDataNodes());\n      stats.setNumOfInMaintenanceDeadDataNodes(\n          report.getNumInMaintenanceDeadDataNodes());\n      stats.setNumOfEnteringMaintenanceDataNodes(\n          report.getNumEnteringMaintenanceDataNodes());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "1ce25e702b5086fc81f7fc23fcb87db167f3804d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14329. RBF: Add maintenance nodes to federation metrics. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "1dc01e59af9a504e473d696be3d40e056db450ab",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,53 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebAddress(), report.getState(), report.getSafemode());\n \n     if (report.statsValid()) {\n       MembershipStats stats \u003d MembershipStats.newInstance();\n       stats.setNumOfFiles(report.getNumFiles());\n       stats.setNumOfBlocks(report.getNumBlocks());\n       stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n       stats.setNumOfBlocksPendingReplication(\n           report.getNumOfBlocksPendingReplication());\n       stats.setNumOfBlocksUnderReplicated(\n           report.getNumOfBlocksUnderReplicated());\n       stats.setNumOfBlocksPendingDeletion(\n           report.getNumOfBlocksPendingDeletion());\n       stats.setAvailableSpace(report.getAvailableSpace());\n       stats.setTotalSpace(report.getTotalSpace());\n       stats.setProvidedSpace(report.getProvidedSpace());\n       stats.setNumOfDecommissioningDatanodes(\n           report.getNumDecommissioningDatanodes());\n       stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n       stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n       stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n       stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n       stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n+      stats.setNumOfInMaintenanceLiveDataNodes(\n+          report.getNumInMaintenanceLiveDataNodes());\n+      stats.setNumOfInMaintenanceDeadDataNodes(\n+          report.getNumInMaintenanceDeadDataNodes());\n+      stats.setNumOfEnteringMaintenanceDataNodes(\n+          report.getNumEnteringMaintenanceDataNodes());\n       record.setStats(stats);\n     }\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      stats.setNumOfInMaintenanceLiveDataNodes(\n          report.getNumInMaintenanceLiveDataNodes());\n      stats.setNumOfInMaintenanceDeadDataNodes(\n          report.getNumInMaintenanceDeadDataNodes());\n      stats.setNumOfEnteringMaintenanceDataNodes(\n          report.getNumEnteringMaintenanceDataNodes());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "1dc01e59af9a504e473d696be3d40e056db450ab": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14167. RBF: Add stale nodes to federation metrics. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "1dc01e59af9a504e473d696be3d40e056db450ab",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "48269c370c8981244b9d3d5cf1c82a2897ca502e",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 423.82,
      "commitsBetweenForRepo": 3202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebAddress(), report.getState(), report.getSafemode());\n \n     if (report.statsValid()) {\n       MembershipStats stats \u003d MembershipStats.newInstance();\n       stats.setNumOfFiles(report.getNumFiles());\n       stats.setNumOfBlocks(report.getNumBlocks());\n       stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n       stats.setNumOfBlocksPendingReplication(\n           report.getNumOfBlocksPendingReplication());\n       stats.setNumOfBlocksUnderReplicated(\n           report.getNumOfBlocksUnderReplicated());\n       stats.setNumOfBlocksPendingDeletion(\n           report.getNumOfBlocksPendingDeletion());\n       stats.setAvailableSpace(report.getAvailableSpace());\n       stats.setTotalSpace(report.getTotalSpace());\n       stats.setProvidedSpace(report.getProvidedSpace());\n       stats.setNumOfDecommissioningDatanodes(\n           report.getNumDecommissioningDatanodes());\n       stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n       stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n+      stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n       stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n       stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n       record.setStats(stats);\n     }\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfStaleDatanodes(report.getNumStaleDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java"
      }
    },
    "3b1d30301bcd35bbe525a7e122d3e5acfab92c88": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12775. [READ] Fix reporting of Provided volumes\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "3b1d30301bcd35bbe525a7e122d3e5acfab92c88",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "29/11/17 9:43 AM",
      "commitNameOld": "301641811d93ac22dc6fe1a05f18c1f266cc5e54",
      "commitAuthorOld": "Wei Yan",
      "daysBetweenCommits": 16.34,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebAddress(), report.getState(), report.getSafemode());\n \n     if (report.statsValid()) {\n       MembershipStats stats \u003d MembershipStats.newInstance();\n       stats.setNumOfFiles(report.getNumFiles());\n       stats.setNumOfBlocks(report.getNumBlocks());\n       stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n       stats.setNumOfBlocksPendingReplication(\n           report.getNumOfBlocksPendingReplication());\n       stats.setNumOfBlocksUnderReplicated(\n           report.getNumOfBlocksUnderReplicated());\n       stats.setNumOfBlocksPendingDeletion(\n           report.getNumOfBlocksPendingDeletion());\n       stats.setAvailableSpace(report.getAvailableSpace());\n       stats.setTotalSpace(report.getTotalSpace());\n+      stats.setProvidedSpace(report.getProvidedSpace());\n       stats.setNumOfDecommissioningDatanodes(\n           report.getNumDecommissioningDatanodes());\n       stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n       stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n       stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n       stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n       record.setStats(stats);\n     }\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setProvidedSpace(report.getProvidedSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "81601dac8ec7650bec14700b174910390a92fe1f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12273. Federation UI. Contributed by Inigo Goiri.\n\n(cherry picked from commit adbb2e00c7b85524fd43bd68895d49814c16680a)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "81601dac8ec7650bec14700b174910390a92fe1f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,45 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebAddress(), report.getState(), report.getSafemode());\n \n+    if (report.statsValid()) {\n+      MembershipStats stats \u003d MembershipStats.newInstance();\n+      stats.setNumOfFiles(report.getNumFiles());\n+      stats.setNumOfBlocks(report.getNumBlocks());\n+      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n+      stats.setNumOfBlocksPendingReplication(\n+          report.getNumOfBlocksPendingReplication());\n+      stats.setNumOfBlocksUnderReplicated(\n+          report.getNumOfBlocksUnderReplicated());\n+      stats.setNumOfBlocksPendingDeletion(\n+          report.getNumOfBlocksPendingDeletion());\n+      stats.setAvailableSpace(report.getAvailableSpace());\n+      stats.setTotalSpace(report.getTotalSpace());\n+      stats.setNumOfDecommissioningDatanodes(\n+          report.getNumDecommissioningDatanodes());\n+      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n+      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n+      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n+      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n+      record.setStats(stats);\n+    }\n+\n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n     return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.statsValid()) {\n      MembershipStats stats \u003d MembershipStats.newInstance();\n      stats.setNumOfFiles(report.getNumFiles());\n      stats.setNumOfBlocks(report.getNumBlocks());\n      stats.setNumOfBlocksMissing(report.getNumBlocksMissing());\n      stats.setNumOfBlocksPendingReplication(\n          report.getNumOfBlocksPendingReplication());\n      stats.setNumOfBlocksUnderReplicated(\n          report.getNumOfBlocksUnderReplicated());\n      stats.setNumOfBlocksPendingDeletion(\n          report.getNumOfBlocksPendingDeletion());\n      stats.setAvailableSpace(report.getAvailableSpace());\n      stats.setTotalSpace(report.getTotalSpace());\n      stats.setNumOfDecommissioningDatanodes(\n          report.getNumDecommissioningDatanodes());\n      stats.setNumOfActiveDatanodes(report.getNumLiveDatanodes());\n      stats.setNumOfDeadDatanodes(report.getNumDeadDatanodes());\n      stats.setNumOfDecomActiveDatanodes(report.getNumDecomLiveDatanodes());\n      stats.setNumOfDecomDeadDatanodes(report.getNumDecomDeadDatanodes());\n      record.setStats(stats);\n    }\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10646. Federation admin tool. Contributed by Inigo Goiri.\n\n(cherry picked from commit ae27e31fbcf546481db0b0345772db2e9132372e)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public boolean registerNamenode(NamenodeStatusReport report)\n       throws IOException {\n \n     if (this.routerId \u003d\u003d null) {\n       LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n       return false;\n     }\n \n     MembershipState record \u003d MembershipState.newInstance(\n         routerId, report.getNameserviceId(), report.getNamenodeId(),\n         report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n         report.getServiceAddress(), report.getLifelineAddress(),\n         report.getWebAddress(), report.getState(), report.getSafemode());\n \n     if (report.getState() !\u003d UNAVAILABLE) {\n       // Set/update our last contact time\n       record.setLastContact(Time.now());\n     }\n \n     NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n     request.setNamenodeMembership(record);\n-    return this.membershipInterface.namenodeHeartbeat(request).getResult();\n+    return getMembershipStore().namenodeHeartbeat(request).getResult();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return getMembershipStore().namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,23 @@\n+  public boolean registerNamenode(NamenodeStatusReport report)\n+      throws IOException {\n+\n+    if (this.routerId \u003d\u003d null) {\n+      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n+      return false;\n+    }\n+\n+    MembershipState record \u003d MembershipState.newInstance(\n+        routerId, report.getNameserviceId(), report.getNamenodeId(),\n+        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n+        report.getServiceAddress(), report.getLifelineAddress(),\n+        report.getWebAddress(), report.getState(), report.getSafemode());\n+\n+    if (report.getState() !\u003d UNAVAILABLE) {\n+      // Set/update our last contact time\n+      record.setLastContact(Time.now());\n+    }\n+\n+    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n+    request.setNamenodeMembership(record);\n+    return this.membershipInterface.namenodeHeartbeat(request).getResult();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean registerNamenode(NamenodeStatusReport report)\n      throws IOException {\n\n    if (this.routerId \u003d\u003d null) {\n      LOG.warn(\"Cannot register namenode, router ID is not known {}\", report);\n      return false;\n    }\n\n    MembershipState record \u003d MembershipState.newInstance(\n        routerId, report.getNameserviceId(), report.getNamenodeId(),\n        report.getClusterId(), report.getBlockPoolId(), report.getRpcAddress(),\n        report.getServiceAddress(), report.getLifelineAddress(),\n        report.getWebAddress(), report.getState(), report.getSafemode());\n\n    if (report.getState() !\u003d UNAVAILABLE) {\n      // Set/update our last contact time\n      record.setLastContact(Time.now());\n    }\n\n    NamenodeHeartbeatRequest request \u003d NamenodeHeartbeatRequest.newInstance();\n    request.setNamenodeMembership(record);\n    return this.membershipInterface.namenodeHeartbeat(request).getResult();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java"
    }
  }
}