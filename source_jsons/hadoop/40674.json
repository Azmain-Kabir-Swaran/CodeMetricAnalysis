{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationTagsManager.java",
  "functionName": "addTags",
  "functionId": "addTags___nodeId-NodeId__applicationId-ApplicationId__allocationTags-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
  "functionStartLine": 360,
  "functionEndLine": 380,
  "numCommitsSeen": 12,
  "timeTaken": 824,
  "changeHistory": [
    "adbe87abf8b2814e0e2988d09ef8a8569190c80e"
  ],
  "changeHistoryShort": {
    "adbe87abf8b2814e0e2988d09ef8a8569190c80e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "adbe87abf8b2814e0e2988d09ef8a8569190c80e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7788. Factor out management of temp tags from AllocationTagsManager. (Arun Suresh via kkaranasos)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "adbe87abf8b2814e0e2988d09ef8a8569190c80e",
      "commitAuthor": "Konstantinos Karanasos",
      "diff": "@@ -0,0 +1,21 @@\n+  public void addTags(NodeId nodeId, ApplicationId applicationId,\n+      Set\u003cString\u003e allocationTags) {\n+    writeLock.lock();\n+    try {\n+      TypeToCountedTags perAppTagsMapping \u003d perAppNodeMappings\n+          .computeIfAbsent(applicationId, k -\u003e new TypeToCountedTags());\n+      TypeToCountedTags perAppRackTagsMapping \u003d perAppRackMappings\n+          .computeIfAbsent(applicationId, k -\u003e new TypeToCountedTags());\n+      // Covering test-cases where context is mocked\n+      String nodeRack \u003d (rmContext.getRMNodes() !\u003d null\n+          \u0026\u0026 rmContext.getRMNodes().get(nodeId) !\u003d null)\n+              ? rmContext.getRMNodes().get(nodeId).getRackName() :\n+          \"default-rack\";\n+      perAppTagsMapping.addTags(nodeId, allocationTags);\n+      perAppRackTagsMapping.addTags(nodeRack, allocationTags);\n+      globalNodeMapping.addTags(nodeId, allocationTags);\n+      globalRackMapping.addTags(nodeRack, allocationTags);\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void addTags(NodeId nodeId, ApplicationId applicationId,\n      Set\u003cString\u003e allocationTags) {\n    writeLock.lock();\n    try {\n      TypeToCountedTags perAppTagsMapping \u003d perAppNodeMappings\n          .computeIfAbsent(applicationId, k -\u003e new TypeToCountedTags());\n      TypeToCountedTags perAppRackTagsMapping \u003d perAppRackMappings\n          .computeIfAbsent(applicationId, k -\u003e new TypeToCountedTags());\n      // Covering test-cases where context is mocked\n      String nodeRack \u003d (rmContext.getRMNodes() !\u003d null\n          \u0026\u0026 rmContext.getRMNodes().get(nodeId) !\u003d null)\n              ? rmContext.getRMNodes().get(nodeId).getRackName() :\n          \"default-rack\";\n      perAppTagsMapping.addTags(nodeId, allocationTags);\n      perAppRackTagsMapping.addTags(nodeRack, allocationTags);\n      globalNodeMapping.addTags(nodeId, allocationTags);\n      globalRackMapping.addTags(nodeRack, allocationTags);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java"
    }
  }
}