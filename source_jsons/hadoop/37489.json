{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "createReservationSystem",
  "functionId": "createReservationSystem",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 478,
  "functionEndLine": 499,
  "numCommitsSeen": 192,
  "timeTaken": 3207,
  "changeHistory": [
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,22 @@\n+  protected ReservationSystem createReservationSystem() {\n+    String reservationClassName \u003d\n+        conf.get(YarnConfiguration.RM_RESERVATION_SYSTEM_CLASS,\n+            AbstractReservationSystem.getDefaultReservationSystem(scheduler));\n+    if (reservationClassName \u003d\u003d null) {\n+      return null;\n+    }\n+    LOG.info(\"Using ReservationSystem: \" + reservationClassName);\n+    try {\n+      Class\u003c?\u003e reservationClazz \u003d Class.forName(reservationClassName);\n+      if (ReservationSystem.class.isAssignableFrom(reservationClazz)) {\n+        return (ReservationSystem) ReflectionUtils.newInstance(\n+            reservationClazz, this.conf);\n+      } else {\n+        throw new YarnRuntimeException(\"Class: \" + reservationClassName\n+            + \" not instance of \" + ReservationSystem.class.getCanonicalName());\n+      }\n+    } catch (ClassNotFoundException e) {\n+      throw new YarnRuntimeException(\n+          \"Could not instantiate ReservationSystem: \" + reservationClassName, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ReservationSystem createReservationSystem() {\n    String reservationClassName \u003d\n        conf.get(YarnConfiguration.RM_RESERVATION_SYSTEM_CLASS,\n            AbstractReservationSystem.getDefaultReservationSystem(scheduler));\n    if (reservationClassName \u003d\u003d null) {\n      return null;\n    }\n    LOG.info(\"Using ReservationSystem: \" + reservationClassName);\n    try {\n      Class\u003c?\u003e reservationClazz \u003d Class.forName(reservationClassName);\n      if (ReservationSystem.class.isAssignableFrom(reservationClazz)) {\n        return (ReservationSystem) ReflectionUtils.newInstance(\n            reservationClazz, this.conf);\n      } else {\n        throw new YarnRuntimeException(\"Class: \" + reservationClassName\n            + \" not instance of \" + ReservationSystem.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\n          \"Could not instantiate ReservationSystem: \" + reservationClassName, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}