{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirWriteFileOp.java",
  "functionName": "chooseTargetForNewBlock",
  "functionId": "chooseTargetForNewBlock___bm-BlockManager__src-String__excludedNodes-DatanodeInfo[]__favoredNodes-String[]__flags-EnumSet__AddBlockFlag____r-ValidateAddBlockResult",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
  "functionStartLine": 268,
  "functionEndLine": 298,
  "numCommitsSeen": 100,
  "timeTaken": 5869,
  "changeHistory": [
    "849c45db187224095b13fe297a4d7377fbb9d2cd",
    "fbe06b58805aac4861fb27dfa273914b69e8bdc6",
    "de9994bd893af70fffdd68af6252fc45020e0e69",
    "3e6d0ca2b2f79bfa87faa7bbd46d814a48334fbd",
    "a2a5d7b5bca715835d92816e7b267b59f7270708",
    "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
    "e53fa769c97416af69ea567aecd44f67e896688b",
    "d8ea443af0b1c8289a1dd738945831ff8be0e9c1",
    "e5afac5896a1a88e152746598527d91f73cbb724"
  ],
  "changeHistoryShort": {
    "849c45db187224095b13fe297a4d7377fbb9d2cd": "Ybodychange",
    "fbe06b58805aac4861fb27dfa273914b69e8bdc6": "Ybodychange",
    "de9994bd893af70fffdd68af6252fc45020e0e69": "Ybodychange",
    "3e6d0ca2b2f79bfa87faa7bbd46d814a48334fbd": "Ybodychange",
    "a2a5d7b5bca715835d92816e7b267b59f7270708": "Ybodychange",
    "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7": "Ymultichange(Yparameterchange,Ybodychange)",
    "e53fa769c97416af69ea567aecd44f67e896688b": "Ybodychange",
    "d8ea443af0b1c8289a1dd738945831ff8be0e9c1": "Ybodychange",
    "e5afac5896a1a88e152746598527d91f73cbb724": "Yintroduced"
  },
  "changeHistoryDetails": {
    "849c45db187224095b13fe297a4d7377fbb9d2cd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13448. HDFS Block Placement - Ignore Locality for First Block Replica\n(Contributed by BELUGA BEHR via Daniel Templeton)\n\nChange-Id: I965d1cfa642ad24296038b83e3d5c9983545267d\n",
      "commitDate": "24/07/18 4:05 PM",
      "commitName": "849c45db187224095b13fe297a4d7377fbb9d2cd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "08/06/18 3:14 PM",
      "commitNameOld": "cf4108313da83e28d07676078a33016ec8856ff6",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 46.04,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,31 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n       String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n       ValidateAddBlockResult r) throws IOException {\n-    Node clientNode \u003d bm.getDatanodeManager()\n-        .getDatanodeByHost(r.clientMachine);\n-    if (clientNode \u003d\u003d null) {\n-      clientNode \u003d getClientNode(bm, r.clientMachine);\n+    Node clientNode \u003d null;\n+\n+    boolean ignoreClientLocality \u003d (flags !\u003d null\n+            \u0026\u0026 flags.contains(AddBlockFlag.IGNORE_CLIENT_LOCALITY));\n+\n+    // If client locality is ignored, clientNode remains \u0027null\u0027 to indicate\n+    if (!ignoreClientLocality) {\n+      clientNode \u003d bm.getDatanodeManager().getDatanodeByHost(r.clientMachine);\n+      if (clientNode \u003d\u003d null) {\n+        clientNode \u003d getClientNode(bm, r.clientMachine);\n+      }\n     }\n \n-    Set\u003cNode\u003e excludedNodesSet \u003d null;\n-    if (excludedNodes !\u003d null) {\n-      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n-      Collections.addAll(excludedNodesSet, excludedNodes);\n-    }\n-    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n-        : Arrays.asList(favoredNodes);\n+    Set\u003cNode\u003e excludedNodesSet \u003d\n+        (excludedNodes \u003d\u003d null) ? new HashSet\u003c\u003e()\n+            : new HashSet\u003c\u003e(Arrays.asList(excludedNodes));\n+\n+    List\u003cString\u003e favoredNodesList \u003d\n+        (favoredNodes \u003d\u003d null) ? Collections.emptyList()\n+            : Arrays.asList(favoredNodes);\n+\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n                                     r.blockType, r.ecPolicy, flags);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d null;\n\n    boolean ignoreClientLocality \u003d (flags !\u003d null\n            \u0026\u0026 flags.contains(AddBlockFlag.IGNORE_CLIENT_LOCALITY));\n\n    // If client locality is ignored, clientNode remains \u0027null\u0027 to indicate\n    if (!ignoreClientLocality) {\n      clientNode \u003d bm.getDatanodeManager().getDatanodeByHost(r.clientMachine);\n      if (clientNode \u003d\u003d null) {\n        clientNode \u003d getClientNode(bm, r.clientMachine);\n      }\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d\n        (excludedNodes \u003d\u003d null) ? new HashSet\u003c\u003e()\n            : new HashSet\u003c\u003e(Arrays.asList(excludedNodes));\n\n    List\u003cString\u003e favoredNodesList \u003d\n        (favoredNodes \u003d\u003d null) ? Collections.emptyList()\n            : Arrays.asList(favoredNodes);\n\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.blockType, r.ecPolicy, flags);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "fbe06b58805aac4861fb27dfa273914b69e8bdc6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12349. Improve log message when it could not alloc enough blocks for EC. (Lei (Eddy) Xu)\n",
      "commitDate": "15/09/17 12:12 PM",
      "commitName": "fbe06b58805aac4861fb27dfa273914b69e8bdc6",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "11/09/17 10:06 AM",
      "commitNameOld": "de9994bd893af70fffdd68af6252fc45020e0e69",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n       String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n       ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n-                                    r.blockType, flags);\n+                                    r.blockType, r.ecPolicy, flags);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.blockType, r.ecPolicy, flags);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "de9994bd893af70fffdd68af6252fc45020e0e69": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-12349. Improve log message when it could not alloc enough blocks for EC. (lei)\"\n\nThis reverts commit 3e6d0ca2b2f79bfa87faa7bbd46d814a48334fbd.\n",
      "commitDate": "11/09/17 10:06 AM",
      "commitName": "de9994bd893af70fffdd68af6252fc45020e0e69",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "07/09/17 6:01 PM",
      "commitNameOld": "3e6d0ca2b2f79bfa87faa7bbd46d814a48334fbd",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 3.67,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n       String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n       ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n-                                    r.blockType, r.ecPolicy, flags);\n+                                    r.blockType, flags);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.blockType, flags);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "3e6d0ca2b2f79bfa87faa7bbd46d814a48334fbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12349. Improve log message when it could not alloc enough blocks for EC. (lei)\n",
      "commitDate": "07/09/17 6:01 PM",
      "commitName": "3e6d0ca2b2f79bfa87faa7bbd46d814a48334fbd",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "23/08/17 5:06 PM",
      "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 15.04,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n       String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n       ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n-                                    r.blockType, flags);\n+                                    r.blockType, r.ecPolicy, flags);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.blockType, r.ecPolicy, flags);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "a2a5d7b5bca715835d92816e7b267b59f7270708": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 85.97,
      "commitsBetweenForRepo": 568,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n       String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n       ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n-                                    r.isStriped, flags);\n+                                    r.blockType, flags);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.blockType, flags);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3702. Add an option for NOT writing the blocks locally if there is a datanode on the same box as the client. (Contributed by Lei (Eddy) Xu)\n",
      "commitDate": "27/04/16 2:22 PM",
      "commitName": "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3702. Add an option for NOT writing the blocks locally if there is a datanode on the same box as the client. (Contributed by Lei (Eddy) Xu)\n",
          "commitDate": "27/04/16 2:22 PM",
          "commitName": "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 28.63,
          "commitsBetweenForRepo": 184,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n-      BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n-      favoredNodes, ValidateAddBlockResult r) throws IOException {\n+      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n+      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n+      ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n-\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n-                                    r.isStriped);\n+                                    r.isStriped, flags);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.isStriped, flags);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[bm-BlockManager, src-String, excludedNodes-DatanodeInfo[], favoredNodes-String[], r-ValidateAddBlockResult]",
            "newValue": "[bm-BlockManager, src-String, excludedNodes-DatanodeInfo[], favoredNodes-String[], flags-EnumSet\u003cAddBlockFlag\u003e, r-ValidateAddBlockResult]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3702. Add an option for NOT writing the blocks locally if there is a datanode on the same box as the client. (Contributed by Lei (Eddy) Xu)\n",
          "commitDate": "27/04/16 2:22 PM",
          "commitName": "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 28.63,
          "commitsBetweenForRepo": 184,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n-      BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n-      favoredNodes, ValidateAddBlockResult r) throws IOException {\n+      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n+      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n+      ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n-\n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID,\n-                                    r.isStriped);\n+                                    r.isStriped, flags);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes,\n      String[] favoredNodes, EnumSet\u003cAddBlockFlag\u003e flags,\n      ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.isStriped, flags);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "e53fa769c97416af69ea567aecd44f67e896688b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8186. Erasure coding: Make block placement policy for EC file configurable. Contributed by Walter Su.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "e53fa769c97416af69ea567aecd44f67e896688b",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 12:02 PM",
      "commitNameOld": "c9103e9cacc67a614940e32fa87c5dbc3daa60de",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n       favoredNodes, ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n \n     // choose targets for the new block to be allocated.\n     return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n-                                    favoredNodesList, r.storagePolicyID);\n+                                    favoredNodesList, r.storagePolicyID,\n+                                    r.isStriped);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n      favoredNodes, ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID,\n                                    r.isStriped);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "d8ea443af0b1c8289a1dd738945831ff8be0e9c1": {
      "type": "Ybodychange",
      "commitMessage": "Merge HDFS-8394 from trunk: Move getAdditionalBlock() and related functionalities into a separate class.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "d8ea443af0b1c8289a1dd738945831ff8be0e9c1",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:55 AM",
      "commitNameOld": "1af8c148626effe1b41fc536019fd3349f485d59",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   static DatanodeStorageInfo[] chooseTargetForNewBlock(\n       BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n       favoredNodes, ValidateAddBlockResult r) throws IOException {\n     Node clientNode \u003d bm.getDatanodeManager()\n         .getDatanodeByHost(r.clientMachine);\n     if (clientNode \u003d\u003d null) {\n       clientNode \u003d getClientNode(bm, r.clientMachine);\n     }\n \n     Set\u003cNode\u003e excludedNodesSet \u003d null;\n     if (excludedNodes !\u003d null) {\n       excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n       Collections.addAll(excludedNodesSet, excludedNodes);\n     }\n     List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n         : Arrays.asList(favoredNodes);\n \n     // choose targets for the new block to be allocated.\n-    return bm.chooseTarget4NewBlock(src, r.replication, clientNode,\n+    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                     excludedNodesSet, r.blockSize,\n                                     favoredNodesList, r.storagePolicyID);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n      favoredNodes, ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.numTargets, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "e5afac5896a1a88e152746598527d91f73cbb724": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
      "commitDate": "15/05/15 7:09 PM",
      "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,22 @@\n+  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n+      BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n+      favoredNodes, ValidateAddBlockResult r) throws IOException {\n+    Node clientNode \u003d bm.getDatanodeManager()\n+        .getDatanodeByHost(r.clientMachine);\n+    if (clientNode \u003d\u003d null) {\n+      clientNode \u003d getClientNode(bm, r.clientMachine);\n+    }\n+\n+    Set\u003cNode\u003e excludedNodesSet \u003d null;\n+    if (excludedNodes !\u003d null) {\n+      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n+      Collections.addAll(excludedNodesSet, excludedNodes);\n+    }\n+    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n+        : Arrays.asList(favoredNodes);\n+\n+    // choose targets for the new block to be allocated.\n+    return bm.chooseTarget4NewBlock(src, r.replication, clientNode,\n+                                    excludedNodesSet, r.blockSize,\n+                                    favoredNodesList, r.storagePolicyID);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static DatanodeStorageInfo[] chooseTargetForNewBlock(\n      BlockManager bm, String src, DatanodeInfo[] excludedNodes, String[]\n      favoredNodes, ValidateAddBlockResult r) throws IOException {\n    Node clientNode \u003d bm.getDatanodeManager()\n        .getDatanodeByHost(r.clientMachine);\n    if (clientNode \u003d\u003d null) {\n      clientNode \u003d getClientNode(bm, r.clientMachine);\n    }\n\n    Set\u003cNode\u003e excludedNodesSet \u003d null;\n    if (excludedNodes !\u003d null) {\n      excludedNodesSet \u003d new HashSet\u003c\u003e(excludedNodes.length);\n      Collections.addAll(excludedNodesSet, excludedNodes);\n    }\n    List\u003cString\u003e favoredNodesList \u003d (favoredNodes \u003d\u003d null) ? null\n        : Arrays.asList(favoredNodes);\n\n    // choose targets for the new block to be allocated.\n    return bm.chooseTarget4NewBlock(src, r.replication, clientNode,\n                                    excludedNodesSet, r.blockSize,\n                                    favoredNodesList, r.storagePolicyID);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java"
    }
  }
}