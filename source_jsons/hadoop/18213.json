{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterAdmin.java",
  "functionName": "setStorageTypeQuota",
  "functionId": "setStorageTypeQuota___parameters-String[]__i-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
  "functionStartLine": 926,
  "functionEndLine": 953,
  "numCommitsSeen": 27,
  "timeTaken": 787,
  "changeHistory": [
    "8730a7bf6025a3b2b7d6e6686533283b854af192"
  ],
  "changeHistoryShort": {
    "8730a7bf6025a3b2b7d6e6686533283b854af192": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8730a7bf6025a3b2b7d6e6686533283b854af192": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-15003. RBF: Make Router support storage type quota. Contributed by Jinglun.\n",
      "commitDate": "26/12/19 7:52 PM",
      "commitName": "8730a7bf6025a3b2b7d6e6686533283b854af192",
      "commitAuthor": "Ayush Saxena",
      "diff": "@@ -0,0 +1,28 @@\n+  private boolean setStorageTypeQuota(String[] parameters, int i)\n+      throws IOException {\n+    long[] typeQuota \u003d new long[StorageType.values().length];\n+    eachByStorageType(\n+        t -\u003e typeQuota[t.ordinal()] \u003d HdfsConstants.QUOTA_DONT_SET);\n+\n+    String mount \u003d parameters[i++];\n+    if (parameters[i].equals(\"-storageType\")) {\n+      i++;\n+      StorageType type \u003d StorageType.parseStorageType(parameters[i++]);\n+      typeQuota[type.ordinal()] \u003d Long.parseLong(parameters[i]);\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid argument : \" + parameters[i]);\n+    }\n+\n+    if (orByStorageType(t -\u003e typeQuota[t.ordinal()] \u003c\u003d 0)) {\n+      throw new IllegalArgumentException(\n+          \"Input quota value should be a positive number.\");\n+    }\n+\n+    if (andByStorageType(\n+        t -\u003e typeQuota[t.ordinal()] \u003d\u003d HdfsConstants.QUOTA_DONT_SET)) {\n+      throw new IllegalArgumentException(\n+          \"Must specify at least one of -nsQuota and -ssQuota.\");\n+    }\n+\n+    return updateStorageTypeQuota(mount, typeQuota);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean setStorageTypeQuota(String[] parameters, int i)\n      throws IOException {\n    long[] typeQuota \u003d new long[StorageType.values().length];\n    eachByStorageType(\n        t -\u003e typeQuota[t.ordinal()] \u003d HdfsConstants.QUOTA_DONT_SET);\n\n    String mount \u003d parameters[i++];\n    if (parameters[i].equals(\"-storageType\")) {\n      i++;\n      StorageType type \u003d StorageType.parseStorageType(parameters[i++]);\n      typeQuota[type.ordinal()] \u003d Long.parseLong(parameters[i]);\n    } else {\n      throw new IllegalArgumentException(\"Invalid argument : \" + parameters[i]);\n    }\n\n    if (orByStorageType(t -\u003e typeQuota[t.ordinal()] \u003c\u003d 0)) {\n      throw new IllegalArgumentException(\n          \"Input quota value should be a positive number.\");\n    }\n\n    if (andByStorageType(\n        t -\u003e typeQuota[t.ordinal()] \u003d\u003d HdfsConstants.QUOTA_DONT_SET)) {\n      throw new IllegalArgumentException(\n          \"Must specify at least one of -nsQuota and -ssQuota.\");\n    }\n\n    return updateStorageTypeQuota(mount, typeQuota);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java"
    }
  }
}