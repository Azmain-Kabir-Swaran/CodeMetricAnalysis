{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemTimelineWriterImpl.java",
  "functionName": "writeInternal",
  "functionId": "writeInternal___clusterId-String__userId-String__flowName-String__flowVersion-String__flowRun-long__appId-String__entity-TimelineEntity__response-TimelineWriteResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
  "functionStartLine": 121,
  "functionEndLine": 152,
  "numCommitsSeen": 33,
  "timeTaken": 5057,
  "changeHistory": [
    "17a3e14d25877af90ef6655750ce2b035c2982b5",
    "ea3cdc60b39d96702c0bce292829914c25bc0d8e",
    "5088f6c76a3b133810bfc8d908812b09f1737127",
    "f3c661e8dddc80726f1084ff27815d179540889c",
    "dc1f306fdc83749f9675b89326e26c73b9ff8f86",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
    "f0e752c14b0b441955cdfc94f95937c90f1f055d"
  ],
  "changeHistoryShort": {
    "17a3e14d25877af90ef6655750ce2b035c2982b5": "Ybodychange",
    "ea3cdc60b39d96702c0bce292829914c25bc0d8e": "Ymultichange(Yrename,Ybodychange)",
    "5088f6c76a3b133810bfc8d908812b09f1737127": "Ybodychange",
    "f3c661e8dddc80726f1084ff27815d179540889c": "Ymodifierchange",
    "dc1f306fdc83749f9675b89326e26c73b9ff8f86": "Ybodychange",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": "Ymultichange(Yparameterchange,Ybodychange)",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0e752c14b0b441955cdfc94f95937c90f1f055d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "17a3e14d25877af90ef6655750ce2b035c2982b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9338 Timeline related testcases are failing. Contributed by Abhishek Modi.\n",
      "commitDate": "12/03/19 9:33 PM",
      "commitName": "17a3e14d25877af90ef6655750ce2b035c2982b5",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "27/02/19 2:55 PM",
      "commitNameOld": "ea3cdc60b39d96702c0bce292829914c25bc0d8e",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 13.23,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,32 @@\n   private synchronized void writeInternal(String clusterId, String userId,\n                                           String flowName, String flowVersion,\n                                           long flowRun, String appId,\n                                           TimelineEntity entity,\n                                           TimelineWriteResponse response)\n                                           throws IOException {\n-    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n-    Path userIdPath \u003d new Path(clusterIdPath, userId);\n-    Path flowNamePath \u003d new Path(userIdPath, escape(flowName));\n-    Path flowVersionPath \u003d new Path(flowNamePath, escape(flowVersion));\n-    Path flowRunPath \u003d new Path(flowVersionPath, String.valueOf(flowRun));\n-    Path appIdPath \u003d new Path(flowRunPath, appId);\n-    Path entityTypePath \u003d new Path(appIdPath, entity.getType());\n+    String entityTypePathStr \u003d clusterId + File.separator + userId +\n+        File.separator + escape(flowName) + File.separator +\n+        escape(flowVersion) + File.separator + flowRun + File.separator + appId\n+        + File.separator + entity.getType();\n+    Path entityTypePath \u003d new Path(entitiesPath, entityTypePathStr);\n     try {\n-      mkdirs(rootPath, entitiesPath, clusterIdPath, userIdPath,\n-              flowNamePath, flowVersionPath, flowRunPath, appIdPath,\n-              entityTypePath);\n+      mkdirs(entityTypePath);\n       Path filePath \u003d\n               new Path(entityTypePath,\n                       entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\n       createFileWithRetries(filePath);\n \n       byte[] record \u003d  new StringBuilder()\n               .append(TimelineUtils.dumpTimelineRecordtoJSON(entity))\n               .append(\"\\n\").toString().getBytes(\"UTF-8\");\n       writeFileWithRetries(filePath, record);\n     } catch (Exception ioe) {\n       LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\n       TimelineWriteError error \u003d createTimelineWriteError(entity);\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void writeInternal(String clusterId, String userId,\n                                          String flowName, String flowVersion,\n                                          long flowRun, String appId,\n                                          TimelineEntity entity,\n                                          TimelineWriteResponse response)\n                                          throws IOException {\n    String entityTypePathStr \u003d clusterId + File.separator + userId +\n        File.separator + escape(flowName) + File.separator +\n        escape(flowVersion) + File.separator + flowRun + File.separator + appId\n        + File.separator + entity.getType();\n    Path entityTypePath \u003d new Path(entitiesPath, entityTypePathStr);\n    try {\n      mkdirs(entityTypePath);\n      Path filePath \u003d\n              new Path(entityTypePath,\n                      entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\n      createFileWithRetries(filePath);\n\n      byte[] record \u003d  new StringBuilder()\n              .append(TimelineUtils.dumpTimelineRecordtoJSON(entity))\n              .append(\"\\n\").toString().getBytes(\"UTF-8\");\n      writeFileWithRetries(filePath, record);\n    } catch (Exception ioe) {\n      LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\n      TimelineWriteError error \u003d createTimelineWriteError(entity);\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "ea3cdc60b39d96702c0bce292829914c25bc0d8e": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-3841 [atsv2 Storage implementation] Adding retry semantics to HDFS backing storage. Contributed by Abhishek Modi.\n",
      "commitDate": "27/02/19 2:55 PM",
      "commitName": "ea3cdc60b39d96702c0bce292829914c25bc0d8e",
      "commitAuthor": "Vrushali C",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3841 [atsv2 Storage implementation] Adding retry semantics to HDFS backing storage. Contributed by Abhishek Modi.\n",
          "commitDate": "27/02/19 2:55 PM",
          "commitName": "ea3cdc60b39d96702c0bce292829914c25bc0d8e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "16/05/18 1:00 PM",
          "commitNameOld": "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 287.12,
          "commitsBetweenForRepo": 2234,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,36 @@\n-  private synchronized void write(String clusterId, String userId,\n-      String flowName, String flowVersion, long flowRun, String appId,\n-      TimelineEntity entity, TimelineWriteResponse response)\n-      throws IOException {\n-    PrintWriter out \u003d null;\n+  private synchronized void writeInternal(String clusterId, String userId,\n+                                          String flowName, String flowVersion,\n+                                          long flowRun, String appId,\n+                                          TimelineEntity entity,\n+                                          TimelineWriteResponse response)\n+                                          throws IOException {\n+    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n+    Path userIdPath \u003d new Path(clusterIdPath, userId);\n+    Path flowNamePath \u003d new Path(userIdPath, escape(flowName));\n+    Path flowVersionPath \u003d new Path(flowNamePath, escape(flowVersion));\n+    Path flowRunPath \u003d new Path(flowVersionPath, String.valueOf(flowRun));\n+    Path appIdPath \u003d new Path(flowRunPath, appId);\n+    Path entityTypePath \u003d new Path(appIdPath, entity.getType());\n     try {\n-      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,\n-          escape(flowName), escape(flowVersion), String.valueOf(flowRun), appId,\n-          entity.getType());\n-      String fileName \u003d dir + entity.getId() +\n-          TIMELINE_SERVICE_STORAGE_EXTENSION;\n-      out \u003d\n-          new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n-              new FileOutputStream(fileName, true), \"UTF-8\")));\n-      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n-      out.write(\"\\n\");\n-    } catch (IOException ioe) {\n-      TimelineWriteError error \u003d new TimelineWriteError();\n-      error.setEntityId(entity.getId());\n-      error.setEntityType(entity.getType());\n+      mkdirs(rootPath, entitiesPath, clusterIdPath, userIdPath,\n+              flowNamePath, flowVersionPath, flowRunPath, appIdPath,\n+              entityTypePath);\n+      Path filePath \u003d\n+              new Path(entityTypePath,\n+                      entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\n+      createFileWithRetries(filePath);\n+\n+      byte[] record \u003d  new StringBuilder()\n+              .append(TimelineUtils.dumpTimelineRecordtoJSON(entity))\n+              .append(\"\\n\").toString().getBytes(\"UTF-8\");\n+      writeFileWithRetries(filePath, record);\n+    } catch (Exception ioe) {\n+      LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\n+      TimelineWriteError error \u003d createTimelineWriteError(entity);\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n-    } finally {\n-      if (out !\u003d null) {\n-        out.close();\n-      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void writeInternal(String clusterId, String userId,\n                                          String flowName, String flowVersion,\n                                          long flowRun, String appId,\n                                          TimelineEntity entity,\n                                          TimelineWriteResponse response)\n                                          throws IOException {\n    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n    Path userIdPath \u003d new Path(clusterIdPath, userId);\n    Path flowNamePath \u003d new Path(userIdPath, escape(flowName));\n    Path flowVersionPath \u003d new Path(flowNamePath, escape(flowVersion));\n    Path flowRunPath \u003d new Path(flowVersionPath, String.valueOf(flowRun));\n    Path appIdPath \u003d new Path(flowRunPath, appId);\n    Path entityTypePath \u003d new Path(appIdPath, entity.getType());\n    try {\n      mkdirs(rootPath, entitiesPath, clusterIdPath, userIdPath,\n              flowNamePath, flowVersionPath, flowRunPath, appIdPath,\n              entityTypePath);\n      Path filePath \u003d\n              new Path(entityTypePath,\n                      entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\n      createFileWithRetries(filePath);\n\n      byte[] record \u003d  new StringBuilder()\n              .append(TimelineUtils.dumpTimelineRecordtoJSON(entity))\n              .append(\"\\n\").toString().getBytes(\"UTF-8\");\n      writeFileWithRetries(filePath, record);\n    } catch (Exception ioe) {\n      LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\n      TimelineWriteError error \u003d createTimelineWriteError(entity);\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "write",
            "newValue": "writeInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3841 [atsv2 Storage implementation] Adding retry semantics to HDFS backing storage. Contributed by Abhishek Modi.\n",
          "commitDate": "27/02/19 2:55 PM",
          "commitName": "ea3cdc60b39d96702c0bce292829914c25bc0d8e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "16/05/18 1:00 PM",
          "commitNameOld": "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 287.12,
          "commitsBetweenForRepo": 2234,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,36 @@\n-  private synchronized void write(String clusterId, String userId,\n-      String flowName, String flowVersion, long flowRun, String appId,\n-      TimelineEntity entity, TimelineWriteResponse response)\n-      throws IOException {\n-    PrintWriter out \u003d null;\n+  private synchronized void writeInternal(String clusterId, String userId,\n+                                          String flowName, String flowVersion,\n+                                          long flowRun, String appId,\n+                                          TimelineEntity entity,\n+                                          TimelineWriteResponse response)\n+                                          throws IOException {\n+    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n+    Path userIdPath \u003d new Path(clusterIdPath, userId);\n+    Path flowNamePath \u003d new Path(userIdPath, escape(flowName));\n+    Path flowVersionPath \u003d new Path(flowNamePath, escape(flowVersion));\n+    Path flowRunPath \u003d new Path(flowVersionPath, String.valueOf(flowRun));\n+    Path appIdPath \u003d new Path(flowRunPath, appId);\n+    Path entityTypePath \u003d new Path(appIdPath, entity.getType());\n     try {\n-      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,\n-          escape(flowName), escape(flowVersion), String.valueOf(flowRun), appId,\n-          entity.getType());\n-      String fileName \u003d dir + entity.getId() +\n-          TIMELINE_SERVICE_STORAGE_EXTENSION;\n-      out \u003d\n-          new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n-              new FileOutputStream(fileName, true), \"UTF-8\")));\n-      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n-      out.write(\"\\n\");\n-    } catch (IOException ioe) {\n-      TimelineWriteError error \u003d new TimelineWriteError();\n-      error.setEntityId(entity.getId());\n-      error.setEntityType(entity.getType());\n+      mkdirs(rootPath, entitiesPath, clusterIdPath, userIdPath,\n+              flowNamePath, flowVersionPath, flowRunPath, appIdPath,\n+              entityTypePath);\n+      Path filePath \u003d\n+              new Path(entityTypePath,\n+                      entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\n+      createFileWithRetries(filePath);\n+\n+      byte[] record \u003d  new StringBuilder()\n+              .append(TimelineUtils.dumpTimelineRecordtoJSON(entity))\n+              .append(\"\\n\").toString().getBytes(\"UTF-8\");\n+      writeFileWithRetries(filePath, record);\n+    } catch (Exception ioe) {\n+      LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\n+      TimelineWriteError error \u003d createTimelineWriteError(entity);\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n-    } finally {\n-      if (out !\u003d null) {\n-        out.close();\n-      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void writeInternal(String clusterId, String userId,\n                                          String flowName, String flowVersion,\n                                          long flowRun, String appId,\n                                          TimelineEntity entity,\n                                          TimelineWriteResponse response)\n                                          throws IOException {\n    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n    Path userIdPath \u003d new Path(clusterIdPath, userId);\n    Path flowNamePath \u003d new Path(userIdPath, escape(flowName));\n    Path flowVersionPath \u003d new Path(flowNamePath, escape(flowVersion));\n    Path flowRunPath \u003d new Path(flowVersionPath, String.valueOf(flowRun));\n    Path appIdPath \u003d new Path(flowRunPath, appId);\n    Path entityTypePath \u003d new Path(appIdPath, entity.getType());\n    try {\n      mkdirs(rootPath, entitiesPath, clusterIdPath, userIdPath,\n              flowNamePath, flowVersionPath, flowRunPath, appIdPath,\n              entityTypePath);\n      Path filePath \u003d\n              new Path(entityTypePath,\n                      entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\n      createFileWithRetries(filePath);\n\n      byte[] record \u003d  new StringBuilder()\n              .append(TimelineUtils.dumpTimelineRecordtoJSON(entity))\n              .append(\"\\n\").toString().getBytes(\"UTF-8\");\n      writeFileWithRetries(filePath, record);\n    } catch (Exception ioe) {\n      LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\n      TimelineWriteError error \u003d createTimelineWriteError(entity);\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "5088f6c76a3b133810bfc8d908812b09f1737127": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6337. Added a mode to replay MR job history files and put them into the timeline service v2. Contributed by Sangjin Lee.\n\n(cherry picked from commit 463e070a8e7c882706a96eaa20ea49bfe9982875)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5088f6c76a3b133810bfc8d908812b09f1737127",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8603736ef2bb34605ea10f516dbe4e73bed3f309",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private synchronized void write(String clusterId, String userId, String flowName,\n       String flowVersion, long flowRun, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n-      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n-          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n-      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n+      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,\n+          escape(flowName), escape(flowVersion), String.valueOf(flowRun), appId,\n+          entity.getType());\n+      String fileName \u003d dir + entity.getId() +\n+          TIMELINE_SERVICE_STORAGE_EXTENSION;\n       out \u003d\n           new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n               new FileOutputStream(fileName, true), \"UTF-8\")));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void write(String clusterId, String userId, String flowName,\n      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,\n          escape(flowName), escape(flowVersion), String.valueOf(flowRun), appId,\n          entity.getType());\n      String fileName \u003d dir + entity.getId() +\n          TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d\n          new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n              new FileOutputStream(fileName, true), \"UTF-8\")));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "f3c661e8dddc80726f1084ff27815d179540889c": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3044. Made RM write app, attempt and optional container lifecycle events to timeline service v2. Contributed by Naganarasimha G R.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "f3c661e8dddc80726f1084ff27815d179540889c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "dc1f306fdc83749f9675b89326e26c73b9ff8f86",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-  private void write(String clusterId, String userId, String flowName,\n+  private synchronized void write(String clusterId, String userId, String flowName,\n       String flowVersion, long flowRun, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n       String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n           flowVersion, String.valueOf(flowRun), appId, entity.getType());\n       String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n       out \u003d\n           new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n               new FileOutputStream(fileName, true), \"UTF-8\")));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void write(String clusterId, String userId, String flowName,\n      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d\n          new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n              new FileOutputStream(fileName, true), \"UTF-8\")));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, synchronized]"
      }
    },
    "dc1f306fdc83749f9675b89326e26c73b9ff8f86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3562. unit tests failures and issues found from findbug from earlier ATS checkins (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "dc1f306fdc83749f9675b89326e26c73b9ff8f86",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private void write(String clusterId, String userId, String flowName,\n       String flowVersion, long flowRun, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n       String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n           flowVersion, String.valueOf(flowRun), appId, entity.getType());\n       String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n-      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n+      out \u003d\n+          new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n+              new FileOutputStream(fileName, true), \"UTF-8\")));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void write(String clusterId, String userId, String flowName,\n      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d\n          new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n              new FileOutputStream(fileName, true), \"UTF-8\")));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3391. Clearly define flow ID/ flow run / flow version in API and storage. Contributed by Zhijie Shen\n\n(cherry picked from commit 68c6232f8423e55b4d152ef3d1d66aeb2d6a555e)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3391. Clearly define flow ID/ flow run / flow version in API and storage. Contributed by Zhijie Shen\n\n(cherry picked from commit 68c6232f8423e55b4d152ef3d1d66aeb2d6a555e)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  private void write(String clusterId, String userId,\n-      String flowId, String flowRunId, String appId, TimelineEntity entity,\n+  private void write(String clusterId, String userId, String flowName,\n+      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n-      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowId,\n-          flowRunId, appId, entity.getType());\n+      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n+          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n       String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n       out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void write(String clusterId, String userId, String flowName,\n      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[clusterId-String, userId-String, flowId-String, flowRunId-String, appId-String, entity-TimelineEntity, response-TimelineWriteResponse]",
            "newValue": "[clusterId-String, userId-String, flowName-String, flowVersion-String, flowRun-long, appId-String, entity-TimelineEntity, response-TimelineWriteResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3391. Clearly define flow ID/ flow run / flow version in API and storage. Contributed by Zhijie Shen\n\n(cherry picked from commit 68c6232f8423e55b4d152ef3d1d66aeb2d6a555e)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  private void write(String clusterId, String userId,\n-      String flowId, String flowRunId, String appId, TimelineEntity entity,\n+  private void write(String clusterId, String userId, String flowName,\n+      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n-      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowId,\n-          flowRunId, appId, entity.getType());\n+      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n+          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n       String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n       out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void write(String clusterId, String userId, String flowName,\n      String flowVersion, long flowRun, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowName,\n          flowVersion, String.valueOf(flowRun), appId, entity.getType());\n      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n-  private void write(TimelineEntity entity,\n+  private void write(String clusterId, String userId,\n+      String flowId, String flowRunId, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n-      File outputDir \u003d new File(outputRoot + entity.getType());\n-      String fileName \u003d outputDir + \"/\" + entity.getId()\n-          + TIMELINE_SERVICE_STORAGE_EXTENSION;\n-      if (!outputDir.exists()) {\n-        if (!outputDir.mkdirs()) {\n-          throw new IOException(\"Could not create directories for \" + fileName);\n-        }\n-      }\n+      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowId,\n+          flowRunId, appId, entity.getType());\n+      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n       out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void write(String clusterId, String userId,\n      String flowId, String flowRunId, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowId,\n          flowRunId, appId, entity.getType());\n      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[entity-TimelineEntity, response-TimelineWriteResponse]",
            "newValue": "[clusterId-String, userId-String, flowId-String, flowRunId-String, appId-String, entity-TimelineEntity, response-TimelineWriteResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n-  private void write(TimelineEntity entity,\n+  private void write(String clusterId, String userId,\n+      String flowId, String flowRunId, String appId, TimelineEntity entity,\n       TimelineWriteResponse response) throws IOException {\n     PrintWriter out \u003d null;\n     try {\n-      File outputDir \u003d new File(outputRoot + entity.getType());\n-      String fileName \u003d outputDir + \"/\" + entity.getId()\n-          + TIMELINE_SERVICE_STORAGE_EXTENSION;\n-      if (!outputDir.exists()) {\n-        if (!outputDir.mkdirs()) {\n-          throw new IOException(\"Could not create directories for \" + fileName);\n-        }\n-      }\n+      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowId,\n+          flowRunId, appId, entity.getType());\n+      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n       out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n       out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       out.write(\"\\n\");\n     } catch (IOException ioe) {\n       TimelineWriteError error \u003d new TimelineWriteError();\n       error.setEntityId(entity.getId());\n       error.setEntityType(entity.getType());\n       /*\n        * TODO: set an appropriate error code after PoC could possibly be:\n        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n        */\n       response.addError(error);\n     } finally {\n       if (out !\u003d null) {\n         out.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void write(String clusterId, String userId,\n      String flowId, String flowRunId, String appId, TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      String dir \u003d mkdirs(outputRoot, ENTITIES_DIR, clusterId, userId,flowId,\n          flowRunId, appId, entity.getType());\n      String fileName \u003d dir + entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0e752c14b0b441955cdfc94f95937c90f1f055d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3264. Created backing storage write interface and a POC only FS based storage implementation. Contributed by Vrushali C.\n\n(cherry picked from commit 821b68d05d246fd57d7b7286eb2ccc075ed1eae8)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "f0e752c14b0b441955cdfc94f95937c90f1f055d",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,30 @@\n+  private void write(TimelineEntity entity,\n+      TimelineWriteResponse response) throws IOException {\n+    PrintWriter out \u003d null;\n+    try {\n+      File outputDir \u003d new File(outputRoot + entity.getType());\n+      String fileName \u003d outputDir + \"/\" + entity.getId()\n+          + TIMELINE_SERVICE_STORAGE_EXTENSION;\n+      if (!outputDir.exists()) {\n+        if (!outputDir.mkdirs()) {\n+          throw new IOException(\"Could not create directories for \" + fileName);\n+        }\n+      }\n+      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n+      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+      out.write(\"\\n\");\n+    } catch (IOException ioe) {\n+      TimelineWriteError error \u003d new TimelineWriteError();\n+      error.setEntityId(entity.getId());\n+      error.setEntityType(entity.getType());\n+      /*\n+       * TODO: set an appropriate error code after PoC could possibly be:\n+       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n+       */\n+      response.addError(error);\n+    } finally {\n+      if (out !\u003d null) {\n+        out.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void write(TimelineEntity entity,\n      TimelineWriteResponse response) throws IOException {\n    PrintWriter out \u003d null;\n    try {\n      File outputDir \u003d new File(outputRoot + entity.getType());\n      String fileName \u003d outputDir + \"/\" + entity.getId()\n          + TIMELINE_SERVICE_STORAGE_EXTENSION;\n      if (!outputDir.exists()) {\n        if (!outputDir.mkdirs()) {\n          throw new IOException(\"Could not create directories for \" + fileName);\n        }\n      }\n      out \u003d new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)));\n      out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      out.write(\"\\n\");\n    } catch (IOException ioe) {\n      TimelineWriteError error \u003d new TimelineWriteError();\n      error.setEntityId(entity.getId());\n      error.setEntityType(entity.getType());\n      /*\n       * TODO: set an appropriate error code after PoC could possibly be:\n       * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);\n       */\n      response.addError(error);\n    } finally {\n      if (out !\u003d null) {\n        out.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineWriterImpl.java"
    }
  }
}