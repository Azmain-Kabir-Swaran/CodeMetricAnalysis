{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBImageXmlWriter.java",
  "functionName": "dumpSecretManagerSection",
  "functionId": "dumpSecretManagerSection___is-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
  "functionStartLine": 668,
  "functionEndLine": 726,
  "numCommitsSeen": 27,
  "timeTaken": 2358,
  "changeHistory": [
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305"
  ],
  "changeHistoryShort": {
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Ybodychange",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": "Yintroduced"
  },
  "changeHistoryDetails": {
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/03/16 5:56 PM",
      "commitNameOld": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 18.7,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,59 @@\n   private void dumpSecretManagerSection(InputStream is) throws IOException {\n-    out.print(\"\u003cSecretManagerSection\u003e\");\n+    out.print(\"\u003c\" + SECRET_MANAGER_SECTION_NAME + \"\u003e\");\n     SecretManagerSection s \u003d SecretManagerSection.parseDelimitedFrom(is);\n     int expectedNumDelegationKeys \u003d s.getNumKeys();\n     int expectedNumTokens \u003d s.getNumTokens();\n-    o(\"currentId\", s.getCurrentId()).o(\"tokenSequenceNumber\",\n-        s.getTokenSequenceNumber()).\n-        o(\"numDelegationKeys\", expectedNumDelegationKeys).\n-        o(\"numTokens\", expectedNumTokens);\n+    o(SECRET_MANAGER_SECTION_CURRENT_ID, s.getCurrentId())\n+        .o(SECRET_MANAGER_SECTION_TOKEN_SEQUENCE_NUMBER,\n+            s.getTokenSequenceNumber()).\n+        o(SECRET_MANAGER_SECTION_NUM_DELEGATION_KEYS,\n+            expectedNumDelegationKeys).\n+        o(SECRET_MANAGER_SECTION_NUM_TOKENS, expectedNumTokens);\n     for (int i \u003d 0; i \u003c expectedNumDelegationKeys; i++) {\n       SecretManagerSection.DelegationKey dkey \u003d\n           SecretManagerSection.DelegationKey.parseDelimitedFrom(is);\n-      out.print(\"\u003cdelegationKey\u003e\");\n-      o(\"id\", dkey.getId());\n-      o(\"key\", Hex.encodeHexString(dkey.getKey().toByteArray()));\n+      out.print(\"\u003c\" + SECRET_MANAGER_SECTION_DELEGATION_KEY + \"\u003e\");\n+      o(SECTION_ID, dkey.getId());\n+      o(SECRET_MANAGER_SECTION_KEY,\n+          Hex.encodeHexString(dkey.getKey().toByteArray()));\n       if (dkey.hasExpiryDate()) {\n-        dumpDate(\"expiry\", dkey.getExpiryDate());\n+        dumpDate(SECRET_MANAGER_SECTION_EXPIRY, dkey.getExpiryDate());\n       }\n-      out.print(\"\u003c/delegationKey\u003e\");\n+      out.print(\"\u003c/\" + SECRET_MANAGER_SECTION_DELEGATION_KEY + \"\u003e\");\n     }\n     for (int i \u003d 0; i \u003c expectedNumTokens; i++) {\n       SecretManagerSection.PersistToken token \u003d\n           SecretManagerSection.PersistToken.parseDelimitedFrom(is);\n-      out.print(\"\u003ctoken\u003e\");\n+      out.print(\"\u003c\" + SECRET_MANAGER_SECTION_TOKEN + \"\u003e\");\n       if (token.hasVersion()) {\n-        o(\"version\", token.getVersion());\n+        o(SECRET_MANAGER_SECTION_VERSION, token.getVersion());\n       }\n       if (token.hasOwner()) {\n-        o(\"owner\", token.getOwner());\n+        o(SECRET_MANAGER_SECTION_OWNER, token.getOwner());\n       }\n       if (token.hasRenewer()) {\n-        o(\"renewer\", token.getRenewer());\n+        o(SECRET_MANAGER_SECTION_RENEWER, token.getRenewer());\n       }\n       if (token.hasRealUser()) {\n-        o(\"realUser\", token.getRealUser());\n+        o(SECRET_MANAGER_SECTION_REAL_USER, token.getRealUser());\n       }\n       if (token.hasIssueDate()) {\n-        dumpDate(\"issueDate\", token.getIssueDate());\n+        dumpDate(SECRET_MANAGER_SECTION_ISSUE_DATE, token.getIssueDate());\n       }\n       if (token.hasMaxDate()) {\n-        dumpDate(\"maxDate\", token.getMaxDate());\n+        dumpDate(SECRET_MANAGER_SECTION_MAX_DATE, token.getMaxDate());\n       }\n       if (token.hasSequenceNumber()) {\n-        o(\"sequenceNumber\", token.getSequenceNumber());\n+        o(SECRET_MANAGER_SECTION_SEQUENCE_NUMBER,\n+            token.getSequenceNumber());\n       }\n       if (token.hasMasterKeyId()) {\n-        o(\"masterKeyId\", token.getMasterKeyId());\n+        o(SECRET_MANAGER_SECTION_MASTER_KEY_ID, token.getMasterKeyId());\n       }\n       if (token.hasExpiryDate()) {\n-        dumpDate(\"expiryDate\", token.getExpiryDate());\n+        dumpDate(SECRET_MANAGER_SECTION_EXPIRY_DATE, token.getExpiryDate());\n       }\n-      out.print(\"\u003c/token\u003e\");\n+      out.print(\"\u003c/\" + SECRET_MANAGER_SECTION_TOKEN + \"\u003e\");\n     }\n-    out.print(\"\u003c/SecretManagerSection\u003e\");\n+    out.print(\"\u003c/\" + SECRET_MANAGER_SECTION_NAME + \"\u003e\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSecretManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003c\" + SECRET_MANAGER_SECTION_NAME + \"\u003e\");\n    SecretManagerSection s \u003d SecretManagerSection.parseDelimitedFrom(is);\n    int expectedNumDelegationKeys \u003d s.getNumKeys();\n    int expectedNumTokens \u003d s.getNumTokens();\n    o(SECRET_MANAGER_SECTION_CURRENT_ID, s.getCurrentId())\n        .o(SECRET_MANAGER_SECTION_TOKEN_SEQUENCE_NUMBER,\n            s.getTokenSequenceNumber()).\n        o(SECRET_MANAGER_SECTION_NUM_DELEGATION_KEYS,\n            expectedNumDelegationKeys).\n        o(SECRET_MANAGER_SECTION_NUM_TOKENS, expectedNumTokens);\n    for (int i \u003d 0; i \u003c expectedNumDelegationKeys; i++) {\n      SecretManagerSection.DelegationKey dkey \u003d\n          SecretManagerSection.DelegationKey.parseDelimitedFrom(is);\n      out.print(\"\u003c\" + SECRET_MANAGER_SECTION_DELEGATION_KEY + \"\u003e\");\n      o(SECTION_ID, dkey.getId());\n      o(SECRET_MANAGER_SECTION_KEY,\n          Hex.encodeHexString(dkey.getKey().toByteArray()));\n      if (dkey.hasExpiryDate()) {\n        dumpDate(SECRET_MANAGER_SECTION_EXPIRY, dkey.getExpiryDate());\n      }\n      out.print(\"\u003c/\" + SECRET_MANAGER_SECTION_DELEGATION_KEY + \"\u003e\");\n    }\n    for (int i \u003d 0; i \u003c expectedNumTokens; i++) {\n      SecretManagerSection.PersistToken token \u003d\n          SecretManagerSection.PersistToken.parseDelimitedFrom(is);\n      out.print(\"\u003c\" + SECRET_MANAGER_SECTION_TOKEN + \"\u003e\");\n      if (token.hasVersion()) {\n        o(SECRET_MANAGER_SECTION_VERSION, token.getVersion());\n      }\n      if (token.hasOwner()) {\n        o(SECRET_MANAGER_SECTION_OWNER, token.getOwner());\n      }\n      if (token.hasRenewer()) {\n        o(SECRET_MANAGER_SECTION_RENEWER, token.getRenewer());\n      }\n      if (token.hasRealUser()) {\n        o(SECRET_MANAGER_SECTION_REAL_USER, token.getRealUser());\n      }\n      if (token.hasIssueDate()) {\n        dumpDate(SECRET_MANAGER_SECTION_ISSUE_DATE, token.getIssueDate());\n      }\n      if (token.hasMaxDate()) {\n        dumpDate(SECRET_MANAGER_SECTION_MAX_DATE, token.getMaxDate());\n      }\n      if (token.hasSequenceNumber()) {\n        o(SECRET_MANAGER_SECTION_SEQUENCE_NUMBER,\n            token.getSequenceNumber());\n      }\n      if (token.hasMasterKeyId()) {\n        o(SECRET_MANAGER_SECTION_MASTER_KEY_ID, token.getMasterKeyId());\n      }\n      if (token.hasExpiryDate()) {\n        dumpDate(SECRET_MANAGER_SECTION_EXPIRY_DATE, token.getExpiryDate());\n      }\n      out.print(\"\u003c/\" + SECRET_MANAGER_SECTION_TOKEN + \"\u003e\");\n    }\n    out.print(\"\u003c/\" + SECRET_MANAGER_SECTION_NAME + \"\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "21/10/15 2:58 PM",
      "commitNameOld": "a24c6e84205c684ef864b0fc5301dc07b3578351",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 133.17,
      "commitsBetweenForRepo": 905,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,55 @@\n   private void dumpSecretManagerSection(InputStream is) throws IOException {\n     out.print(\"\u003cSecretManagerSection\u003e\");\n     SecretManagerSection s \u003d SecretManagerSection.parseDelimitedFrom(is);\n+    int expectedNumDelegationKeys \u003d s.getNumKeys();\n+    int expectedNumTokens \u003d s.getNumTokens();\n     o(\"currentId\", s.getCurrentId()).o(\"tokenSequenceNumber\",\n-        s.getTokenSequenceNumber());\n+        s.getTokenSequenceNumber()).\n+        o(\"numDelegationKeys\", expectedNumDelegationKeys).\n+        o(\"numTokens\", expectedNumTokens);\n+    for (int i \u003d 0; i \u003c expectedNumDelegationKeys; i++) {\n+      SecretManagerSection.DelegationKey dkey \u003d\n+          SecretManagerSection.DelegationKey.parseDelimitedFrom(is);\n+      out.print(\"\u003cdelegationKey\u003e\");\n+      o(\"id\", dkey.getId());\n+      o(\"key\", Hex.encodeHexString(dkey.getKey().toByteArray()));\n+      if (dkey.hasExpiryDate()) {\n+        dumpDate(\"expiry\", dkey.getExpiryDate());\n+      }\n+      out.print(\"\u003c/delegationKey\u003e\");\n+    }\n+    for (int i \u003d 0; i \u003c expectedNumTokens; i++) {\n+      SecretManagerSection.PersistToken token \u003d\n+          SecretManagerSection.PersistToken.parseDelimitedFrom(is);\n+      out.print(\"\u003ctoken\u003e\");\n+      if (token.hasVersion()) {\n+        o(\"version\", token.getVersion());\n+      }\n+      if (token.hasOwner()) {\n+        o(\"owner\", token.getOwner());\n+      }\n+      if (token.hasRenewer()) {\n+        o(\"renewer\", token.getRenewer());\n+      }\n+      if (token.hasRealUser()) {\n+        o(\"realUser\", token.getRealUser());\n+      }\n+      if (token.hasIssueDate()) {\n+        dumpDate(\"issueDate\", token.getIssueDate());\n+      }\n+      if (token.hasMaxDate()) {\n+        dumpDate(\"maxDate\", token.getMaxDate());\n+      }\n+      if (token.hasSequenceNumber()) {\n+        o(\"sequenceNumber\", token.getSequenceNumber());\n+      }\n+      if (token.hasMasterKeyId()) {\n+        o(\"masterKeyId\", token.getMasterKeyId());\n+      }\n+      if (token.hasExpiryDate()) {\n+        dumpDate(\"expiryDate\", token.getExpiryDate());\n+      }\n+      out.print(\"\u003c/token\u003e\");\n+    }\n     out.print(\"\u003c/SecretManagerSection\u003e\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSecretManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003cSecretManagerSection\u003e\");\n    SecretManagerSection s \u003d SecretManagerSection.parseDelimitedFrom(is);\n    int expectedNumDelegationKeys \u003d s.getNumKeys();\n    int expectedNumTokens \u003d s.getNumTokens();\n    o(\"currentId\", s.getCurrentId()).o(\"tokenSequenceNumber\",\n        s.getTokenSequenceNumber()).\n        o(\"numDelegationKeys\", expectedNumDelegationKeys).\n        o(\"numTokens\", expectedNumTokens);\n    for (int i \u003d 0; i \u003c expectedNumDelegationKeys; i++) {\n      SecretManagerSection.DelegationKey dkey \u003d\n          SecretManagerSection.DelegationKey.parseDelimitedFrom(is);\n      out.print(\"\u003cdelegationKey\u003e\");\n      o(\"id\", dkey.getId());\n      o(\"key\", Hex.encodeHexString(dkey.getKey().toByteArray()));\n      if (dkey.hasExpiryDate()) {\n        dumpDate(\"expiry\", dkey.getExpiryDate());\n      }\n      out.print(\"\u003c/delegationKey\u003e\");\n    }\n    for (int i \u003d 0; i \u003c expectedNumTokens; i++) {\n      SecretManagerSection.PersistToken token \u003d\n          SecretManagerSection.PersistToken.parseDelimitedFrom(is);\n      out.print(\"\u003ctoken\u003e\");\n      if (token.hasVersion()) {\n        o(\"version\", token.getVersion());\n      }\n      if (token.hasOwner()) {\n        o(\"owner\", token.getOwner());\n      }\n      if (token.hasRenewer()) {\n        o(\"renewer\", token.getRenewer());\n      }\n      if (token.hasRealUser()) {\n        o(\"realUser\", token.getRealUser());\n      }\n      if (token.hasIssueDate()) {\n        dumpDate(\"issueDate\", token.getIssueDate());\n      }\n      if (token.hasMaxDate()) {\n        dumpDate(\"maxDate\", token.getMaxDate());\n      }\n      if (token.hasSequenceNumber()) {\n        o(\"sequenceNumber\", token.getSequenceNumber());\n      }\n      if (token.hasMasterKeyId()) {\n        o(\"masterKeyId\", token.getMasterKeyId());\n      }\n      if (token.hasExpiryDate()) {\n        dumpDate(\"expiryDate\", token.getExpiryDate());\n      }\n      out.print(\"\u003c/token\u003e\");\n    }\n    out.print(\"\u003c/SecretManagerSection\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5698. Use protobuf to serialize / deserialize FSImage. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 11:18 AM",
      "commitName": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,7 @@\n+  private void dumpSecretManagerSection(InputStream is) throws IOException {\n+    out.print(\"\u003cSecretManagerSection\u003e\");\n+    SecretManagerSection s \u003d SecretManagerSection.parseDelimitedFrom(is);\n+    o(\"currentId\", s.getCurrentId()).o(\"tokenSequenceNumber\",\n+        s.getTokenSequenceNumber());\n+    out.print(\"\u003c/SecretManagerSection\u003e\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSecretManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003cSecretManagerSection\u003e\");\n    SecretManagerSection s \u003d SecretManagerSection.parseDelimitedFrom(is);\n    o(\"currentId\", s.getCurrentId()).o(\"tokenSequenceNumber\",\n        s.getTokenSequenceNumber());\n    out.print(\"\u003c/SecretManagerSection\u003e\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java"
    }
  }
}