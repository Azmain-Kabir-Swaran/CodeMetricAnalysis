{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAttrOp.java",
  "functionName": "unprotectedSetStoragePolicy",
  "functionId": "unprotectedSetStoragePolicy___fsd-FSDirectory__bm-BlockManager__iip-INodesInPath__policyId-byte(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
  "functionStartLine": 416,
  "functionEndLine": 450,
  "numCommitsSeen": 474,
  "timeTaken": 5685,
  "changeHistory": [
    "48b9d5fd2a96728b1118be217ca597c4098e99ca",
    "27941a1811831e0f2144a2f463d807755cd850b2",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "bb84f1fccb18c6c7373851e05d2451d55e908242"
  ],
  "changeHistoryShort": {
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": "Ybodychange",
    "27941a1811831e0f2144a2f463d807755cd850b2": "Ymultichange(Ybodychange,Yparametermetachange)",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ymultichange(Yparameterchange,Ybodychange)",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange"
  },
  "changeHistoryDetails": {
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
      "commitDate": "06/10/16 2:33 PM",
      "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "23/09/16 10:37 AM",
      "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 13.16,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   static void unprotectedSetStoragePolicy(FSDirectory fsd, BlockManager bm,\n       INodesInPath iip, final byte policyId)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n       if (policyId !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n         BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n         if (newPolicy.isCopyOnCreateFile()) {\n           throw new HadoopIllegalArgumentException(\"Policy \" + newPolicy\n               + \" cannot be set after file creation.\");\n         }\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n           bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(fsd, inode.asDirectory(), policyId,\n-          snapshotId);\n+      setDirStoragePolicy(fsd, iip, policyId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void unprotectedSetStoragePolicy(FSDirectory fsd, BlockManager bm,\n      INodesInPath iip, final byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      if (policyId !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n        BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n        if (newPolicy.isCopyOnCreateFile()) {\n          throw new HadoopIllegalArgumentException(\"Policy \" + newPolicy\n              + \" cannot be set after file creation.\");\n        }\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, iip, policyId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "27941a1811831e0f2144a2f463d807755cd850b2": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-9534. Add CLI command to clear storage policy from a path. (Contributed by Xiaobing Zhou)\n",
      "commitDate": "02/03/16 6:35 PM",
      "commitName": "27941a1811831e0f2144a2f463d807755cd850b2",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9534. Add CLI command to clear storage policy from a path. (Contributed by Xiaobing Zhou)\n",
          "commitDate": "02/03/16 6:35 PM",
          "commitName": "27941a1811831e0f2144a2f463d807755cd850b2",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "21/10/15 4:58 PM",
          "commitNameOld": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 133.11,
          "commitsBetweenForRepo": 903,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  static void unprotectedSetStoragePolicy(\n-      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n+  static void unprotectedSetStoragePolicy(FSDirectory fsd, BlockManager bm,\n+      INodesInPath iip, final byte policyId)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n-      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n-      if (newPolicy.isCopyOnCreateFile()) {\n-        throw new HadoopIllegalArgumentException(\n-            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n+      if (policyId !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n+        BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n+        if (newPolicy.isCopyOnCreateFile()) {\n+          throw new HadoopIllegalArgumentException(\"Policy \" + newPolicy\n+              + \" cannot be set after file creation.\");\n+        }\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n           bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n+      setDirStoragePolicy(fsd, inode.asDirectory(), policyId,\n+          snapshotId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void unprotectedSetStoragePolicy(FSDirectory fsd, BlockManager bm,\n      INodesInPath iip, final byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      if (policyId !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n        BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n        if (newPolicy.isCopyOnCreateFile()) {\n          throw new HadoopIllegalArgumentException(\"Policy \" + newPolicy\n              + \" cannot be set after file creation.\");\n        }\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, inode.asDirectory(), policyId,\n          snapshotId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-9534. Add CLI command to clear storage policy from a path. (Contributed by Xiaobing Zhou)\n",
          "commitDate": "02/03/16 6:35 PM",
          "commitName": "27941a1811831e0f2144a2f463d807755cd850b2",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "21/10/15 4:58 PM",
          "commitNameOld": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 133.11,
          "commitsBetweenForRepo": 903,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  static void unprotectedSetStoragePolicy(\n-      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n+  static void unprotectedSetStoragePolicy(FSDirectory fsd, BlockManager bm,\n+      INodesInPath iip, final byte policyId)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n-      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n-      if (newPolicy.isCopyOnCreateFile()) {\n-        throw new HadoopIllegalArgumentException(\n-            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n+      if (policyId !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n+        BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n+        if (newPolicy.isCopyOnCreateFile()) {\n+          throw new HadoopIllegalArgumentException(\"Policy \" + newPolicy\n+              + \" cannot be set after file creation.\");\n+        }\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n           bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n+      setDirStoragePolicy(fsd, inode.asDirectory(), policyId,\n+          snapshotId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void unprotectedSetStoragePolicy(FSDirectory fsd, BlockManager bm,\n      INodesInPath iip, final byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      if (policyId !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n        BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n        if (newPolicy.isCopyOnCreateFile()) {\n          throw new HadoopIllegalArgumentException(\"Policy \" + newPolicy\n              + \" cannot be set after file creation.\");\n        }\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, inode.asDirectory(), policyId,\n          snapshotId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, bm-BlockManager, iip-INodesInPath, policyId-byte]",
            "newValue": "[fsd-FSDirectory, bm-BlockManager, iip-INodesInPath, policyId-byte(modifiers-final)]"
          }
        }
      ]
    },
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "15/12/14 10:40 AM",
      "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n+  static void unprotectedSetStoragePolicy(\n+      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n       throws IOException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n-      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n+      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n       if (newPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n-          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n+          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n+      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void unprotectedSetStoragePolicy(\n      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
            "oldMethodName": "unprotectedSetStoragePolicy",
            "newMethodName": "unprotectedSetStoragePolicy"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n+  static void unprotectedSetStoragePolicy(\n+      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n       throws IOException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n-      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n+      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n       if (newPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n-          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n+          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n+      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void unprotectedSetStoragePolicy(\n      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n+  static void unprotectedSetStoragePolicy(\n+      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n       throws IOException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n-      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n+      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n       if (newPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n-          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n+          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n+      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void unprotectedSetStoragePolicy(\n      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n+  static void unprotectedSetStoragePolicy(\n+      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n       throws IOException {\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \"\n           + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n-      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n+      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n       if (newPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n-          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n+          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n-      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n+      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n     } else {\n       throw new FileNotFoundException(iip.getPath()\n           + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void unprotectedSetStoragePolicy(\n      FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d bm.getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          bm.getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(fsd, inode.asDirectory(), policyId, snapshotId);\n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[iip-INodesInPath, policyId-byte]",
            "newValue": "[fsd-FSDirectory, bm-BlockManager, iip-INodesInPath, policyId-byte]"
          }
        }
      ]
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
          "commitDate": "05/12/14 2:17 PM",
          "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/12/14 2:09 PM",
          "commitNameOld": "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  void unprotectedSetStoragePolicy(String src, byte policyId)\n+  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n       throws IOException {\n     assert hasWriteLock();\n-    final INodesInPath iip \u003d getINodesInPath4Write(src, true);\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"File/Directory does not exist: \" + src);\n+      throw new FileNotFoundException(\"File/Directory does not exist: \"\n+          + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n       BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n       if (newPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n           getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n       setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n     } else {\n-      throw new FileNotFoundException(src + \" is not a file or directory\");\n+      throw new FileNotFoundException(iip.getPath()\n+          + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n      throws IOException {\n    assert hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[src-String, policyId-byte]",
            "newValue": "[iip-INodesInPath, policyId-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
          "commitDate": "05/12/14 2:17 PM",
          "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/12/14 2:09 PM",
          "commitNameOld": "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  void unprotectedSetStoragePolicy(String src, byte policyId)\n+  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n       throws IOException {\n     assert hasWriteLock();\n-    final INodesInPath iip \u003d getINodesInPath4Write(src, true);\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"File/Directory does not exist: \" + src);\n+      throw new FileNotFoundException(\"File/Directory does not exist: \"\n+          + iip.getPath());\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n       BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n       if (newPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n       }\n \n       BlockStoragePolicy currentPolicy \u003d\n           getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n \n       if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n         throw new HadoopIllegalArgumentException(\n             \"Existing policy \" + currentPolicy.getName() +\n                 \" cannot be changed after file creation.\");\n       }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n       setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n     } else {\n-      throw new FileNotFoundException(src + \" is not a file or directory\");\n+      throw new FileNotFoundException(iip.getPath()\n+          + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetStoragePolicy(INodesInPath iip, byte policyId)\n      throws IOException {\n    assert hasWriteLock();\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \"\n          + iip.getPath());\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n    } else {\n      throw new FileNotFoundException(iip.getPath()\n          + \" is not a file or directory\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "29/09/14 4:29 PM",
      "commitNameOld": "7f0422be763b7ab6a60a0e90670e12661683f835",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,31 @@\n   void unprotectedSetStoragePolicy(String src, byte policyId)\n       throws IOException {\n     assert hasWriteLock();\n     final INodesInPath iip \u003d getINodesInPath4Write(src, true);\n     final INode inode \u003d iip.getLastINode();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File/Directory does not exist: \" + src);\n     }\n     final int snapshotId \u003d iip.getLatestSnapshotId();\n     if (inode.isFile()) {\n+      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n+      if (newPolicy.isCopyOnCreateFile()) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n+      }\n+\n+      BlockStoragePolicy currentPolicy \u003d\n+          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n+\n+      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Existing policy \" + currentPolicy.getName() +\n+                \" cannot be changed after file creation.\");\n+      }\n       inode.asFile().setStoragePolicyID(policyId, snapshotId);\n     } else if (inode.isDirectory()) {\n       setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n     } else {\n       throw new FileNotFoundException(src + \" is not a file or directory\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void unprotectedSetStoragePolicy(String src, byte policyId)\n      throws IOException {\n    assert hasWriteLock();\n    final INodesInPath iip \u003d getINodesInPath4Write(src, true);\n    final INode inode \u003d iip.getLastINode();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File/Directory does not exist: \" + src);\n    }\n    final int snapshotId \u003d iip.getLatestSnapshotId();\n    if (inode.isFile()) {\n      BlockStoragePolicy newPolicy \u003d getBlockManager().getStoragePolicy(policyId);\n      if (newPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Policy \" + newPolicy + \" cannot be set after file creation.\");\n      }\n\n      BlockStoragePolicy currentPolicy \u003d\n          getBlockManager().getStoragePolicy(inode.getLocalStoragePolicyID());\n\n      if (currentPolicy !\u003d null \u0026\u0026 currentPolicy.isCopyOnCreateFile()) {\n        throw new HadoopIllegalArgumentException(\n            \"Existing policy \" + currentPolicy.getName() +\n                \" cannot be changed after file creation.\");\n      }\n      inode.asFile().setStoragePolicyID(policyId, snapshotId);\n    } else if (inode.isDirectory()) {\n      setDirStoragePolicy(inode.asDirectory(), policyId, snapshotId);  \n    } else {\n      throw new FileNotFoundException(src + \" is not a file or directory\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    }
  }
}