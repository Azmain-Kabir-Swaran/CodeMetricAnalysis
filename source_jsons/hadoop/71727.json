{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RootDocProcessor.java",
  "functionName": "exclude",
  "functionId": "exclude___doc-Doc",
  "sourceFilePath": "hadoop-common-project/hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
  "functionStartLine": 179,
  "functionEndLine": 223,
  "numCommitsSeen": 8,
  "timeTaken": 733,
  "changeHistory": [
    "8e04fa8b8414b66966499347453adbace256559b",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "980f99bfb7b1c404b6e8346771803e113d16f71d"
  ],
  "changeHistoryShort": {
    "8e04fa8b8414b66966499347453adbace256559b": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "980f99bfb7b1c404b6e8346771803e113d16f71d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e04fa8b8414b66966499347453adbace256559b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7782. Aggregate project javadocs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195817 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 9:47 PM",
      "commitName": "8e04fa8b8414b66966499347453adbace256559b",
      "commitAuthor": "Thomas White",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 68.19,
      "commitsBetweenForRepo": 524,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,45 @@\n     private static boolean exclude(Doc doc) {\n       AnnotationDesc[] annotations \u003d null;\n       if (doc instanceof ProgramElementDoc) {\n \tannotations \u003d ((ProgramElementDoc) doc).annotations();\n       } else if (doc instanceof PackageDoc) {\n \tannotations \u003d ((PackageDoc) doc).annotations();\n       }\n       if (annotations !\u003d null) {\n \tfor (AnnotationDesc annotation : annotations) {\n \t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n \t  if (qualifiedTypeName.equals(\n \t        InterfaceAudience.Private.class.getCanonicalName())\n \t    || qualifiedTypeName.equals(\n                 InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n \t    return true;\n \t  }\n \t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n \t    if (qualifiedTypeName.equals(\n \t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n \t      return true;\n \t    }\n \t  }\n \t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n \t    if (qualifiedTypeName.equals(\n \t\tInterfaceStability.Unstable.class.getCanonicalName())\n               || qualifiedTypeName.equals(\n   \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n \t      return true;\n \t    }\n \t  }\n \t}\n+        for (AnnotationDesc annotation : annotations) {\n+          String qualifiedTypeName \u003d\n+            annotation.annotationType().qualifiedTypeName();\n+          if (qualifiedTypeName.equals(\n+              InterfaceAudience.Public.class.getCanonicalName())) {\n+            return false;\n+          }\n+        }\n+      }\n+      if (treatUnannotatedClassesAsPrivate) {\n+        return doc.isClass() || doc.isInterface() || doc.isAnnotationType();\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean exclude(Doc doc) {\n      AnnotationDesc[] annotations \u003d null;\n      if (doc instanceof ProgramElementDoc) {\n\tannotations \u003d ((ProgramElementDoc) doc).annotations();\n      } else if (doc instanceof PackageDoc) {\n\tannotations \u003d ((PackageDoc) doc).annotations();\n      }\n      if (annotations !\u003d null) {\n\tfor (AnnotationDesc annotation : annotations) {\n\t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n\t  if (qualifiedTypeName.equals(\n\t        InterfaceAudience.Private.class.getCanonicalName())\n\t    || qualifiedTypeName.equals(\n                InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n\t    return true;\n\t  }\n\t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())\n              || qualifiedTypeName.equals(\n  \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t}\n        for (AnnotationDesc annotation : annotations) {\n          String qualifiedTypeName \u003d\n            annotation.annotationType().qualifiedTypeName();\n          if (qualifiedTypeName.equals(\n              InterfaceAudience.Public.class.getCanonicalName())) {\n            return false;\n          }\n        }\n      }\n      if (treatUnannotatedClassesAsPrivate) {\n        return doc.isClass() || doc.isInterface() || doc.isAnnotationType();\n      }\n      return false;\n    }",
      "path": "hadoop-common-project/hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private static boolean exclude(Doc doc) {\n      AnnotationDesc[] annotations \u003d null;\n      if (doc instanceof ProgramElementDoc) {\n\tannotations \u003d ((ProgramElementDoc) doc).annotations();\n      } else if (doc instanceof PackageDoc) {\n\tannotations \u003d ((PackageDoc) doc).annotations();\n      }\n      if (annotations !\u003d null) {\n\tfor (AnnotationDesc annotation : annotations) {\n\t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n\t  if (qualifiedTypeName.equals(\n\t        InterfaceAudience.Private.class.getCanonicalName())\n\t    || qualifiedTypeName.equals(\n                InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n\t    return true;\n\t  }\n\t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())\n              || qualifiedTypeName.equals(\n  \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t}\n      }\n      return false;\n    }",
      "path": "hadoop-common-project/hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
      "extendedDetails": {
        "oldPath": "hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
        "newPath": "hadoop-common-project/hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private static boolean exclude(Doc doc) {\n      AnnotationDesc[] annotations \u003d null;\n      if (doc instanceof ProgramElementDoc) {\n\tannotations \u003d ((ProgramElementDoc) doc).annotations();\n      } else if (doc instanceof PackageDoc) {\n\tannotations \u003d ((PackageDoc) doc).annotations();\n      }\n      if (annotations !\u003d null) {\n\tfor (AnnotationDesc annotation : annotations) {\n\t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n\t  if (qualifiedTypeName.equals(\n\t        InterfaceAudience.Private.class.getCanonicalName())\n\t    || qualifiedTypeName.equals(\n                InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n\t    return true;\n\t  }\n\t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())\n              || qualifiedTypeName.equals(\n  \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t}\n      }\n      return false;\n    }",
      "path": "hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
        "newPath": "hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/RootDocProcessor.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private static boolean exclude(Doc doc) {\n      AnnotationDesc[] annotations \u003d null;\n      if (doc instanceof ProgramElementDoc) {\n\tannotations \u003d ((ProgramElementDoc) doc).annotations();\n      } else if (doc instanceof PackageDoc) {\n\tannotations \u003d ((PackageDoc) doc).annotations();\n      }\n      if (annotations !\u003d null) {\n\tfor (AnnotationDesc annotation : annotations) {\n\t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n\t  if (qualifiedTypeName.equals(\n\t        InterfaceAudience.Private.class.getCanonicalName())\n\t    || qualifiedTypeName.equals(\n                InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n\t    return true;\n\t  }\n\t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())\n              || qualifiedTypeName.equals(\n  \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t}\n      }\n      return false;\n    }",
      "path": "common/src/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/classification/tools/RootDocProcessor.java",
        "newPath": "common/src/java/org/apache/hadoop/classification/tools/RootDocProcessor.java"
      }
    },
    "980f99bfb7b1c404b6e8346771803e113d16f71d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6658. Exclude Private elements from generated Javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@937052 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/10 1:48 PM",
      "commitName": "980f99bfb7b1c404b6e8346771803e113d16f71d",
      "commitAuthor": "Thomas White",
      "diff": "@@ -0,0 +1,34 @@\n+    private static boolean exclude(Doc doc) {\n+      AnnotationDesc[] annotations \u003d null;\n+      if (doc instanceof ProgramElementDoc) {\n+\tannotations \u003d ((ProgramElementDoc) doc).annotations();\n+      } else if (doc instanceof PackageDoc) {\n+\tannotations \u003d ((PackageDoc) doc).annotations();\n+      }\n+      if (annotations !\u003d null) {\n+\tfor (AnnotationDesc annotation : annotations) {\n+\t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n+\t  if (qualifiedTypeName.equals(\n+\t        InterfaceAudience.Private.class.getCanonicalName())\n+\t    || qualifiedTypeName.equals(\n+                InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n+\t    return true;\n+\t  }\n+\t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n+\t    if (qualifiedTypeName.equals(\n+\t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n+\t      return true;\n+\t    }\n+\t  }\n+\t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n+\t    if (qualifiedTypeName.equals(\n+\t\tInterfaceStability.Unstable.class.getCanonicalName())\n+              || qualifiedTypeName.equals(\n+  \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n+\t      return true;\n+\t    }\n+\t  }\n+\t}\n+      }\n+      return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean exclude(Doc doc) {\n      AnnotationDesc[] annotations \u003d null;\n      if (doc instanceof ProgramElementDoc) {\n\tannotations \u003d ((ProgramElementDoc) doc).annotations();\n      } else if (doc instanceof PackageDoc) {\n\tannotations \u003d ((PackageDoc) doc).annotations();\n      }\n      if (annotations !\u003d null) {\n\tfor (AnnotationDesc annotation : annotations) {\n\t  String qualifiedTypeName \u003d annotation.annotationType().qualifiedTypeName();\n\t  if (qualifiedTypeName.equals(\n\t        InterfaceAudience.Private.class.getCanonicalName())\n\t    || qualifiedTypeName.equals(\n                InterfaceAudience.LimitedPrivate.class.getCanonicalName())) {\n\t    return true;\n\t  }\n\t  if (stability.equals(StabilityOptions.EVOLVING_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t  if (stability.equals(StabilityOptions.STABLE_OPTION)) {\n\t    if (qualifiedTypeName.equals(\n\t\tInterfaceStability.Unstable.class.getCanonicalName())\n              || qualifiedTypeName.equals(\n  \t\tInterfaceStability.Evolving.class.getCanonicalName())) {\n\t      return true;\n\t    }\n\t  }\n\t}\n      }\n      return false;\n    }",
      "path": "src/java/org/apache/hadoop/classification/tools/RootDocProcessor.java"
    }
  }
}