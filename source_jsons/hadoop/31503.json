{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineEntityReader.java",
  "functionName": "createFilterList",
  "functionId": "createFilterList",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
  "functionStartLine": 156,
  "functionEndLine": 198,
  "numCommitsSeen": 16,
  "timeTaken": 2607,
  "changeHistory": [
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1"
  ],
  "changeHistoryShort": {
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d": "Ybodychange",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
      "commitDate": "20/03/18 7:41 PM",
      "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 7:00 AM",
      "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 31.49,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,43 @@\n   private FilterList createFilterList() throws IOException {\n     FilterList listBasedOnFilters \u003d constructFilterListBasedOnFilters();\n     boolean hasListBasedOnFilters \u003d listBasedOnFilters !\u003d null \u0026\u0026\n         !listBasedOnFilters.getFilters().isEmpty();\n-    FilterList listBasedOnFields \u003d constructFilterListBasedOnFields();\n+    Set\u003cString\u003e cfsInListBasedOnFields \u003d new HashSet\u003c\u003e(0);\n+    FilterList listBasedOnFields \u003d\n+        constructFilterListBasedOnFields(cfsInListBasedOnFields);\n     boolean hasListBasedOnFields \u003d listBasedOnFields !\u003d null \u0026\u0026\n         !listBasedOnFields.getFilters().isEmpty();\n     // If filter lists based on both filters and fields can be created,\n     // combine them in a new filter list and return it.\n     // If either one of them has been created, return that filter list.\n     // Return null, if none of the filter lists can be created. This indicates\n     // that no filter list needs to be added to HBase Scan as filters are not\n     // specified for the query or only the default view of entity needs to be\n     // returned.\n     if (hasListBasedOnFilters \u0026\u0026 hasListBasedOnFields) {\n       FilterList list \u003d new FilterList();\n       list.addFilter(listBasedOnFilters);\n+\n+      Set\u003cString\u003e cfsInListBasedOnFilters \u003d new HashSet\u003c\u003e(0);\n+      extractColumnFamiliesFromFiltersBasedOnFilters(\n+          listBasedOnFilters, cfsInListBasedOnFilters);\n+\n+      // must exclude cfs that are already covered in fields-based filters\n+      // otherwise we will return the whole cf\n+      cfsInListBasedOnFilters.removeAll(cfsInListBasedOnFields);\n+\n+      if (!cfsInListBasedOnFilters.isEmpty()) {\n+        for (String cf: cfsInListBasedOnFilters) {\n+          listBasedOnFields.addFilter(new FamilyFilter(CompareOp.EQUAL,\n+              new BinaryComparator(Bytes.toBytes(cf))));\n+        }\n+      }\n       list.addFilter(listBasedOnFields);\n       return list;\n     } else if (hasListBasedOnFilters) {\n       return listBasedOnFilters;\n     } else if (hasListBasedOnFields) {\n       return listBasedOnFields;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FilterList createFilterList() throws IOException {\n    FilterList listBasedOnFilters \u003d constructFilterListBasedOnFilters();\n    boolean hasListBasedOnFilters \u003d listBasedOnFilters !\u003d null \u0026\u0026\n        !listBasedOnFilters.getFilters().isEmpty();\n    Set\u003cString\u003e cfsInListBasedOnFields \u003d new HashSet\u003c\u003e(0);\n    FilterList listBasedOnFields \u003d\n        constructFilterListBasedOnFields(cfsInListBasedOnFields);\n    boolean hasListBasedOnFields \u003d listBasedOnFields !\u003d null \u0026\u0026\n        !listBasedOnFields.getFilters().isEmpty();\n    // If filter lists based on both filters and fields can be created,\n    // combine them in a new filter list and return it.\n    // If either one of them has been created, return that filter list.\n    // Return null, if none of the filter lists can be created. This indicates\n    // that no filter list needs to be added to HBase Scan as filters are not\n    // specified for the query or only the default view of entity needs to be\n    // returned.\n    if (hasListBasedOnFilters \u0026\u0026 hasListBasedOnFields) {\n      FilterList list \u003d new FilterList();\n      list.addFilter(listBasedOnFilters);\n\n      Set\u003cString\u003e cfsInListBasedOnFilters \u003d new HashSet\u003c\u003e(0);\n      extractColumnFamiliesFromFiltersBasedOnFilters(\n          listBasedOnFilters, cfsInListBasedOnFilters);\n\n      // must exclude cfs that are already covered in fields-based filters\n      // otherwise we will return the whole cf\n      cfsInListBasedOnFilters.removeAll(cfsInListBasedOnFields);\n\n      if (!cfsInListBasedOnFilters.isEmpty()) {\n        for (String cf: cfsInListBasedOnFilters) {\n          listBasedOnFields.addFilter(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(Bytes.toBytes(cf))));\n        }\n      }\n      list.addFilter(listBasedOnFields);\n      return list;\n    } else if (hasListBasedOnFilters) {\n      return listBasedOnFilters;\n    } else if (hasListBasedOnFields) {\n      return listBasedOnFields;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {}
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private FilterList createFilterList() throws IOException {\n    FilterList listBasedOnFilters \u003d constructFilterListBasedOnFilters();\n    boolean hasListBasedOnFilters \u003d listBasedOnFilters !\u003d null \u0026\u0026\n        !listBasedOnFilters.getFilters().isEmpty();\n    FilterList listBasedOnFields \u003d constructFilterListBasedOnFields();\n    boolean hasListBasedOnFields \u003d listBasedOnFields !\u003d null \u0026\u0026\n        !listBasedOnFields.getFilters().isEmpty();\n    // If filter lists based on both filters and fields can be created,\n    // combine them in a new filter list and return it.\n    // If either one of them has been created, return that filter list.\n    // Return null, if none of the filter lists can be created. This indicates\n    // that no filter list needs to be added to HBase Scan as filters are not\n    // specified for the query or only the default view of entity needs to be\n    // returned.\n    if (hasListBasedOnFilters \u0026\u0026 hasListBasedOnFields) {\n      FilterList list \u003d new FilterList();\n      list.addFilter(listBasedOnFilters);\n      list.addFilter(listBasedOnFields);\n      return list;\n    } else if (hasListBasedOnFilters) {\n      return listBasedOnFilters;\n    } else if (hasListBasedOnFields) {\n      return listBasedOnFields;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private FilterList createFilterList() throws IOException {\n    FilterList listBasedOnFilters \u003d constructFilterListBasedOnFilters();\n    boolean hasListBasedOnFilters \u003d listBasedOnFilters !\u003d null \u0026\u0026\n        !listBasedOnFilters.getFilters().isEmpty();\n    FilterList listBasedOnFields \u003d constructFilterListBasedOnFields();\n    boolean hasListBasedOnFields \u003d listBasedOnFields !\u003d null \u0026\u0026\n        !listBasedOnFields.getFilters().isEmpty();\n    // If filter lists based on both filters and fields can be created,\n    // combine them in a new filter list and return it.\n    // If either one of them has been created, return that filter list.\n    // Return null, if none of the filter lists can be created. This indicates\n    // that no filter list needs to be added to HBase Scan as filters are not\n    // specified for the query or only the default view of entity needs to be\n    // returned.\n    if (hasListBasedOnFilters \u0026\u0026 hasListBasedOnFields) {\n      FilterList list \u003d new FilterList();\n      list.addFilter(listBasedOnFilters);\n      list.addFilter(listBasedOnFields);\n      return list;\n    } else if (hasListBasedOnFilters) {\n      return listBasedOnFilters;\n    } else if (hasListBasedOnFields) {\n      return listBasedOnFields;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
      }
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,26 @@\n+  private FilterList createFilterList() throws IOException {\n+    FilterList listBasedOnFilters \u003d constructFilterListBasedOnFilters();\n+    boolean hasListBasedOnFilters \u003d listBasedOnFilters !\u003d null \u0026\u0026\n+        !listBasedOnFilters.getFilters().isEmpty();\n+    FilterList listBasedOnFields \u003d constructFilterListBasedOnFields();\n+    boolean hasListBasedOnFields \u003d listBasedOnFields !\u003d null \u0026\u0026\n+        !listBasedOnFields.getFilters().isEmpty();\n+    // If filter lists based on both filters and fields can be created,\n+    // combine them in a new filter list and return it.\n+    // If either one of them has been created, return that filter list.\n+    // Return null, if none of the filter lists can be created. This indicates\n+    // that no filter list needs to be added to HBase Scan as filters are not\n+    // specified for the query or only the default view of entity needs to be\n+    // returned.\n+    if (hasListBasedOnFilters \u0026\u0026 hasListBasedOnFields) {\n+      FilterList list \u003d new FilterList();\n+      list.addFilter(listBasedOnFilters);\n+      list.addFilter(listBasedOnFields);\n+      return list;\n+    } else if (hasListBasedOnFilters) {\n+      return listBasedOnFilters;\n+    } else if (hasListBasedOnFields) {\n+      return listBasedOnFields;\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FilterList createFilterList() throws IOException {\n    FilterList listBasedOnFilters \u003d constructFilterListBasedOnFilters();\n    boolean hasListBasedOnFilters \u003d listBasedOnFilters !\u003d null \u0026\u0026\n        !listBasedOnFilters.getFilters().isEmpty();\n    FilterList listBasedOnFields \u003d constructFilterListBasedOnFields();\n    boolean hasListBasedOnFields \u003d listBasedOnFields !\u003d null \u0026\u0026\n        !listBasedOnFields.getFilters().isEmpty();\n    // If filter lists based on both filters and fields can be created,\n    // combine them in a new filter list and return it.\n    // If either one of them has been created, return that filter list.\n    // Return null, if none of the filter lists can be created. This indicates\n    // that no filter list needs to be added to HBase Scan as filters are not\n    // specified for the query or only the default view of entity needs to be\n    // returned.\n    if (hasListBasedOnFilters \u0026\u0026 hasListBasedOnFields) {\n      FilterList list \u003d new FilterList();\n      list.addFilter(listBasedOnFilters);\n      list.addFilter(listBasedOnFields);\n      return list;\n    } else if (hasListBasedOnFilters) {\n      return listBasedOnFilters;\n    } else if (hasListBasedOnFields) {\n      return listBasedOnFields;\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
    }
  }
}