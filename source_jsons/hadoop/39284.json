{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "allocate",
  "functionId": "allocate___applicationAttemptId-ApplicationAttemptId__ask-List__ResourceRequest____schedulingRequests-List__SchedulingRequest____release-List__ContainerId____blacklistAdditions-List__String____blacklistRemovals-List__String____updateRequests-ContainerUpdates",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1208,
  "functionEndLine": 1292,
  "numCommitsSeen": 821,
  "timeTaken": 22317,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "51654a3962bcd0482c0e1dd32765e9533e3f9158",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309",
    "0b489e564ce5a50324a530e29c18aa8a75276c50",
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "25f9872be63423ada6a18481eaad2888e731fdac",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "620325e81696fca140195b74929ed9eda2d5eb16",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "7f46636495e23693d588b0915f464fa7afd9102e",
    "edc43a9097530fd469dee47d4fefd091818331e5",
    "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "81df7b586a16f8226c7b01c139c1c70c060399c3",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
    "10732d515f62258309f98e4d7d23249f80b1847d",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "0a6e275ee3360719290ad666629624450d4f0a6f",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d",
    "01aabf73639785a29d1651f2e268cec04a8b9b94",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "e549ac93694f768f2e26706a54a1b45dea6d2844",
    "f24dcb3449c77da665058427bc7fa480cad507fc",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cdfabf5ae289836968b3d296668593b9500b6f26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "51654a3962bcd0482c0e1dd32765e9533e3f9158": "Ybodychange",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": "Ybodychange",
    "0b489e564ce5a50324a530e29c18aa8a75276c50": "Ybodychange",
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ymultichange(Yparameterchange,Ybodychange)",
    "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ymultichange(Yparameterchange,Ybodychange)",
    "25f9872be63423ada6a18481eaad2888e731fdac": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ybodychange",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Yparameterchange",
    "620325e81696fca140195b74929ed9eda2d5eb16": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "7f46636495e23693d588b0915f464fa7afd9102e": "Ybodychange",
    "edc43a9097530fd469dee47d4fefd091818331e5": "Ybodychange",
    "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ymultichange(Yparameterchange,Ybodychange)",
    "81df7b586a16f8226c7b01c139c1c70c060399c3": "Ybodychange",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": "Ybodychange",
    "10732d515f62258309f98e4d7d23249f80b1847d": "Ybodychange",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "0a6e275ee3360719290ad666629624450d4f0a6f": "Ybodychange",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Ybodychange",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": "Ymultichange(Yparameterchange,Ybodychange)",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": "Ybodychange",
    "01aabf73639785a29d1651f2e268cec04a8b9b94": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "e549ac93694f768f2e26706a54a1b45dea6d2844": "Ybodychange",
    "f24dcb3449c77da665058427bc7fa480cad507fc": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ybodychange",
    "cdfabf5ae289836968b3d296668593b9500b6f26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,85 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n       List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n       List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeResourceRequests(ask);\n \n     // Normalize scheduling requests\n     normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     application.getWriteLock().lock();\n     try {\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n           .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) || application\n             .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \"\n-          + allocation + \" with cluster resource : \" + getClusterResource());\n-    }\n+    LOG.debug(\"Allocation for application {} : {} with cluster resource : {}\",\n+        applicationAttemptId, allocation, getClusterResource());\n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    application.getWriteLock().lock();\n    try {\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    LOG.debug(\"Allocation for application {} : {} with cluster resource : {}\",\n        applicationAttemptId, allocation, getClusterResource());\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n       List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n       List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeResourceRequests(ask);\n \n     // Normalize scheduling requests\n     normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n+    application.getWriteLock().lock();\n     try {\n-      application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n           .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) || application\n             .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \"\n           + allocation + \" with cluster resource : \" + getClusterResource());\n     }\n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    application.getWriteLock().lock();\n    try {\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \"\n          + allocation + \" with cluster resource : \" + getClusterResource());\n    }\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "51654a3962bcd0482c0e1dd32765e9533e3f9158": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8459. Improve Capacity Scheduler logs to debug invalid states. Contributed by Wangda Tan.\n",
      "commitDate": "03/07/18 9:59 AM",
      "commitName": "51654a3962bcd0482c0e1dd32765e9533e3f9158",
      "commitAuthor": "Sunil G",
      "commitDateOld": "02/07/18 11:46 PM",
      "commitNameOld": "d9ba6f3656e8dc97d2813181e27d12e52dca4328",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,87 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n       List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n       List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeResourceRequests(ask);\n \n     // Normalize scheduling requests\n     normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n           .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) || application\n             .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n-    LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \" +\n-        allocation + \" with cluster resource : \" + getClusterResource());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \"\n+          + allocation + \" with cluster resource : \" + getClusterResource());\n+    }\n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \"\n          + allocation + \" with cluster resource : \" + getClusterResource());\n    }\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7574. Add support for Node Labels on Auto Created Leaf Queue Template. Contributed by Suma Shivaprasad.\n",
      "commitDate": "09/04/18 8:47 AM",
      "commitName": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/03/18 6:41 AM",
      "commitNameOld": "1606dad133de0dbee59175509a22994ec570ea41",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 10.09,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,85 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n       List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n       List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeResourceRequests(ask);\n \n     // Normalize scheduling requests\n     normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n           .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) || application\n             .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n+    LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \" +\n+        allocation + \" with cluster resource : \" + getClusterResource());\n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    LOG.info(\"Allocation for application \" + applicationAttemptId + \" : \" +\n        allocation + \" with cluster resource : \" + getClusterResource());\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "0b489e564ce5a50324a530e29c18aa8a75276c50": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 2:23 PM",
      "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "14/02/18 7:11 AM",
      "commitNameOld": "042ef2fa7bcc22e3ca4eb8205c34d83e594bc7de",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.3,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,83 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n       List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n       List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n-    if ((!getConfiguration().getBoolean(\n-        CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED,\n-        CapacitySchedulerConfiguration.DEFAULT_SCHEDULING_REQUEST_ALLOWED))\n-        \u0026\u0026 schedulingRequests !\u003d null \u0026\u0026 (!schedulingRequests.isEmpty())) {\n-      throw new SchedulerInvalidResoureRequestException(\n-          \"Application attempt:\" + applicationAttemptId\n-              + \" is using SchedulingRequest, which is disabled. Please update \"\n-              + CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED\n-              + \" to true in capacity-scheduler.xml in order to use this \"\n-              + \"feature.\");\n-    }\n-\n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeResourceRequests(ask);\n \n     // Normalize scheduling requests\n     normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n           .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) || application\n             .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "4eda58c13641c14c4b248843a2589781cbcd343f",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,95 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n-      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n-      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n-      ContainerUpdates updateRequests) {\n+      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n+      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n+      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n+    if ((!getConfiguration().getBoolean(\n+        CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED,\n+        CapacitySchedulerConfiguration.DEFAULT_SCHEDULING_REQUEST_ALLOWED))\n+        \u0026\u0026 schedulingRequests !\u003d null \u0026\u0026 (!schedulingRequests.isEmpty())) {\n+      throw new SchedulerInvalidResoureRequestException(\n+          \"Application attempt:\" + applicationAttemptId\n+              + \" is using SchedulingRequest, which is disabled. Please update \"\n+              + CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED\n+              + \" to true in capacity-scheduler.xml in order to use this \"\n+              + \"feature.\");\n+    }\n+\n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n-    normalizeRequests(ask);\n+    normalizeResourceRequests(ask);\n+\n+    // Normalize scheduling requests\n+    normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n-      if (!ask.isEmpty()) {\n+      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n+          .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n-        if (application.updateResourceRequests(ask)) {\n+        if (application.updateResourceRequests(ask) || application\n+            .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    if ((!getConfiguration().getBoolean(\n        CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED,\n        CapacitySchedulerConfiguration.DEFAULT_SCHEDULING_REQUEST_ALLOWED))\n        \u0026\u0026 schedulingRequests !\u003d null \u0026\u0026 (!schedulingRequests.isEmpty())) {\n      throw new SchedulerInvalidResoureRequestException(\n          \"Application attempt:\" + applicationAttemptId\n              + \" is using SchedulingRequest, which is disabled. Please update \"\n              + CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED\n              + \" to true in capacity-scheduler.xml in order to use this \"\n              + \"feature.\");\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, updateRequests-ContainerUpdates]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, schedulingRequests-List\u003cSchedulingRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, updateRequests-ContainerUpdates]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "4eda58c13641c14c4b248843a2589781cbcd343f",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,95 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n-      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n-      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n-      ContainerUpdates updateRequests) {\n+      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n+      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n+      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.error(\"Calling allocate on removed or non existent application \" +\n           applicationAttemptId.getApplicationId());\n       return EMPTY_ALLOCATION;\n     }\n \n+    if ((!getConfiguration().getBoolean(\n+        CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED,\n+        CapacitySchedulerConfiguration.DEFAULT_SCHEDULING_REQUEST_ALLOWED))\n+        \u0026\u0026 schedulingRequests !\u003d null \u0026\u0026 (!schedulingRequests.isEmpty())) {\n+      throw new SchedulerInvalidResoureRequestException(\n+          \"Application attempt:\" + applicationAttemptId\n+              + \" is using SchedulingRequest, which is disabled. Please update \"\n+              + CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED\n+              + \" to true in capacity-scheduler.xml in order to use this \"\n+              + \"feature.\");\n+    }\n+\n     // The allocate may be the leftover from previous attempt, and it will\n     // impact current attempt, such as confuse the request and allocation for\n     // current attempt\u0027s AM container.\n     // Note outside precondition check for the attempt id may be\n     // outdated here, so double check it here is necessary.\n     if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n       LOG.error(\"Calling allocate on previous or removed \" +\n           \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n-    normalizeRequests(ask);\n+    normalizeResourceRequests(ask);\n+\n+    // Normalize scheduling requests\n+    normalizeSchedulingRequests(schedulingRequests);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n-      if (!ask.isEmpty()) {\n+      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n+          .isEmpty())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n-        if (application.updateResourceRequests(ask)) {\n+        if (application.updateResourceRequests(ask) || application\n+            .updateSchedulingRequests(schedulingRequests)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cSchedulingRequest\u003e schedulingRequests,\n      List\u003cContainerId\u003e release, List\u003cString\u003e blacklistAdditions,\n      List\u003cString\u003e blacklistRemovals, ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    if ((!getConfiguration().getBoolean(\n        CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED,\n        CapacitySchedulerConfiguration.DEFAULT_SCHEDULING_REQUEST_ALLOWED))\n        \u0026\u0026 schedulingRequests !\u003d null \u0026\u0026 (!schedulingRequests.isEmpty())) {\n      throw new SchedulerInvalidResoureRequestException(\n          \"Application attempt:\" + applicationAttemptId\n              + \" is using SchedulingRequest, which is disabled. Please update \"\n              + CapacitySchedulerConfiguration.SCHEDULING_REQUEST_ALLOWED\n              + \" to true in capacity-scheduler.xml in order to use this \"\n              + \"feature.\");\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeResourceRequests(ask);\n\n    // Normalize scheduling requests\n    normalizeSchedulingRequests(schedulingRequests);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty() || (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests\n          .isEmpty())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) || application\n            .updateSchedulingRequests(schedulingRequests)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6959. RM may allocate wrong AM Container for new attempt. Contributed by Yuqi Wang\n",
      "commitDate": "14/08/17 10:51 AM",
      "commitName": "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/08/17 11:32 AM",
      "commitNameOld": "adb84f34db7e1cdcd72aa8e3deb464c48da9e353",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,78 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n+      LOG.error(\"Calling allocate on removed or non existent application \" +\n+          applicationAttemptId.getApplicationId());\n+      return EMPTY_ALLOCATION;\n+    }\n+\n+    // The allocate may be the leftover from previous attempt, and it will\n+    // impact current attempt, such as confuse the request and allocation for\n+    // current attempt\u0027s AM container.\n+    // Note outside precondition check for the attempt id may be\n+    // outdated here, so double check it here is necessary.\n+    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n+      LOG.error(\"Calling allocate on previous or removed \" +\n+          \"or non existent application attempt \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n \n     // Handle all container updates\n     handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeRequests(ask);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.error(\"Calling allocate on removed or non existent application \" +\n          applicationAttemptId.getApplicationId());\n      return EMPTY_ALLOCATION;\n    }\n\n    // The allocate may be the leftover from previous attempt, and it will\n    // impact current attempt, such as confuse the request and allocation for\n    // current attempt\u0027s AM container.\n    // Note outside precondition check for the attempt id may be\n    // outdated here, so double check it here is necessary.\n    if (!application.getApplicationAttemptId().equals(applicationAttemptId)) {\n      LOG.error(\"Calling allocate on previous or removed \" +\n          \"or non existent application attempt \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeRequests(ask);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,65 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n-    // Handle promotions and demotions\n-    handleExecutionTypeUpdates(\n-        application, updateRequests.getPromotionRequests(),\n-        updateRequests.getDemotionRequests());\n+    // Handle all container updates\n+    handleContainerUpdates(application, updateRequests);\n \n     // Release containers\n     releaseContainers(release, application);\n \n-    // update increase requests\n-    LeafQueue updateDemandForQueue \u003d\n-        updateIncreaseRequests(updateRequests.getIncreaseRequests(),\n-        application);\n-\n-    // Decrease containers\n-    decreaseContainers(updateRequests.getDecreaseRequests(), application);\n+    LeafQueue updateDemandForQueue \u003d null;\n \n     // Sanity check for new allocation requests\n     normalizeRequests(ask);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n-        if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n-            \u003d\u003d null)) {\n+        if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle all container updates\n    handleContainerUpdates(application, updateRequests);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    // Sanity check for new allocation requests\n    normalizeRequests(ask);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "03/01/17 2:53 PM",
          "commitNameOld": "f69a107aeccc68ca1085a7be8093d36b2f45eaa1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 1.82,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,74 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n-      List\u003cUpdateContainerRequest\u003e increaseRequests,\n-      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n+      ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n+    // Handle promotions and demotions\n+    handleExecutionTypeUpdates(\n+        application, updateRequests.getPromotionRequests(),\n+        updateRequests.getDemotionRequests());\n+\n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n-    LeafQueue updateDemandForQueue \u003d updateIncreaseRequests(increaseRequests,\n+    LeafQueue updateDemandForQueue \u003d\n+        updateIncreaseRequests(updateRequests.getIncreaseRequests(),\n         application);\n \n     // Decrease containers\n-    decreaseContainers(decreaseRequests, application);\n+    decreaseContainers(updateRequests.getDecreaseRequests(), application);\n \n     // Sanity check for new allocation requests\n     normalizeRequests(ask);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n             \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle promotions and demotions\n    handleExecutionTypeUpdates(\n        application, updateRequests.getPromotionRequests(),\n        updateRequests.getDemotionRequests());\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d\n        updateIncreaseRequests(updateRequests.getIncreaseRequests(),\n        application);\n\n    // Decrease containers\n    decreaseContainers(updateRequests.getDecreaseRequests(), application);\n\n    // Sanity check for new allocation requests\n    normalizeRequests(ask);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n            \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, increaseRequests-List\u003cUpdateContainerRequest\u003e, decreaseRequests-List\u003cUpdateContainerRequest\u003e]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, updateRequests-ContainerUpdates]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "03/01/17 2:53 PM",
          "commitNameOld": "f69a107aeccc68ca1085a7be8093d36b2f45eaa1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 1.82,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,74 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n-      List\u003cUpdateContainerRequest\u003e increaseRequests,\n-      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n+      ContainerUpdates updateRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n+    // Handle promotions and demotions\n+    handleExecutionTypeUpdates(\n+        application, updateRequests.getPromotionRequests(),\n+        updateRequests.getDemotionRequests());\n+\n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n-    LeafQueue updateDemandForQueue \u003d updateIncreaseRequests(increaseRequests,\n+    LeafQueue updateDemandForQueue \u003d\n+        updateIncreaseRequests(updateRequests.getIncreaseRequests(),\n         application);\n \n     // Decrease containers\n-    decreaseContainers(decreaseRequests, application);\n+    decreaseContainers(updateRequests.getDecreaseRequests(), application);\n \n     // Sanity check for new allocation requests\n     normalizeRequests(ask);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n             \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      ContainerUpdates updateRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Handle promotions and demotions\n    handleExecutionTypeUpdates(\n        application, updateRequests.getPromotionRequests(),\n        updateRequests.getDemotionRequests());\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d\n        updateIncreaseRequests(updateRequests.getIncreaseRequests(),\n        application);\n\n    // Decrease containers\n    decreaseContainers(updateRequests.getDecreaseRequests(), application);\n\n    // Sanity check for new allocation requests\n    normalizeRequests(ask);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n            \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "25f9872be63423ada6a18481eaad2888e731fdac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 9:40 AM",
      "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "22/11/16 1:19 AM",
      "commitNameOld": "a926f895c11cd69cf2117c3b970304f3f1f53d92",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 7.35,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,69 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cUpdateContainerRequest\u003e increaseRequests,\n       List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n     LeafQueue updateDemandForQueue \u003d updateIncreaseRequests(increaseRequests,\n         application);\n \n     // Decrease containers\n     decreaseContainers(decreaseRequests, application);\n \n     // Sanity check for new allocation requests\n-    SchedulerUtils.normalizeRequests(ask, getResourceCalculator(),\n-        getClusterResource(), getMinimumResourceCapability(),\n-        getMaximumResourceCapability());\n+    normalizeRequests(ask);\n \n     Allocation allocation;\n \n     // make sure we aren\u0027t stopping/removing the application\n     // when the allocate comes in\n     try {\n       application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                   + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n             \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     } finally {\n       application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cUpdateContainerRequest\u003e increaseRequests,\n      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d updateIncreaseRequests(increaseRequests,\n        application);\n\n    // Decrease containers\n    decreaseContainers(decreaseRequests, application);\n\n    // Sanity check for new allocation requests\n    normalizeRequests(ask);\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n            \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,71 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cUpdateContainerRequest\u003e increaseRequests,\n       List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n-\n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n-    LeafQueue updateDemandForQueue \u003d\n-        updateIncreaseRequests(increaseRequests, application);\n+    LeafQueue updateDemandForQueue \u003d updateIncreaseRequests(increaseRequests,\n+        application);\n \n     // Decrease containers\n     decreaseContainers(decreaseRequests, application);\n \n     // Sanity check for new allocation requests\n-    SchedulerUtils.normalizeRequests(\n-        ask, getResourceCalculator(), getClusterResource(),\n-        getMinimumResourceCapability(), getMaximumResourceCapability());\n+    SchedulerUtils.normalizeRequests(ask, getResourceCalculator(),\n+        getClusterResource(), getMinimumResourceCapability(),\n+        getMaximumResourceCapability());\n \n     Allocation allocation;\n \n-    synchronized (application) {\n-\n-      // make sure we aren\u0027t stopping/removing the application\n-      // when the allocate comes in\n+    // make sure we aren\u0027t stopping/removing the application\n+    // when the allocate comes in\n+    try {\n+      application.getWriteLock().lock();\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n-              \" ask size \u003d\" + ask.size());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n+                  + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n-        if (application.updateResourceRequests(ask)\n-            \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n+        if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n+            \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n-        if(LOG.isDebugEnabled()) {\n+        if (LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n+    } finally {\n+      application.getWriteLock().unlock();\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cUpdateContainerRequest\u003e increaseRequests,\n      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d updateIncreaseRequests(increaseRequests,\n        application);\n\n    // Decrease containers\n    decreaseContainers(decreaseRequests, application);\n\n    // Sanity check for new allocation requests\n    SchedulerUtils.normalizeRequests(ask, getResourceCalculator(),\n        getClusterResource(), getMinimumResourceCapability(),\n        getMaximumResourceCapability());\n\n    Allocation allocation;\n\n    // make sure we aren\u0027t stopping/removing the application\n    // when the allocate comes in\n    try {\n      application.getWriteLock().lock();\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"allocate: pre-update \" + applicationAttemptId + \" ask size \u003d\"\n                  + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask) \u0026\u0026 (updateDemandForQueue\n            \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    } finally {\n      application.getWriteLock().unlock();\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/08/16 7:49 AM",
      "commitNameOld": "46e02ab719d06f2708c0a61e8011b8f261235193",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 4.34,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n-      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n-      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n+      List\u003cUpdateContainerRequest\u003e increaseRequests,\n+      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n     LeafQueue updateDemandForQueue \u003d\n         updateIncreaseRequests(increaseRequests, application);\n \n     // Decrease containers\n     decreaseContainers(decreaseRequests, application);\n \n     // Sanity check for new allocation requests\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     Allocation allocation;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)\n             \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cUpdateContainerRequest\u003e increaseRequests,\n      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d\n        updateIncreaseRequests(increaseRequests, application);\n\n    // Decrease containers\n    decreaseContainers(decreaseRequests, application);\n\n    // Sanity check for new allocation requests\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    Allocation allocation;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)\n            \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, increaseRequests-List\u003cContainerResourceChangeRequest\u003e, decreaseRequests-List\u003cContainerResourceChangeRequest\u003e]",
        "newValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, increaseRequests-List\u003cUpdateContainerRequest\u003e, decreaseRequests-List\u003cUpdateContainerRequest\u003e]"
      }
    },
    "620325e81696fca140195b74929ed9eda2d5eb16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
      "commitDate": "07/06/16 3:06 PM",
      "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.09,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,70 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n       List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n     LeafQueue updateDemandForQueue \u003d\n         updateIncreaseRequests(increaseRequests, application);\n \n     // Decrease containers\n     decreaseContainers(decreaseRequests, application);\n \n     // Sanity check for new allocation requests\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     Allocation allocation;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)\n             \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n-      \n-      if (application.isWaitingForAMContainer()) {\n-        // Allocate is for AM and update AM blacklist for this\n-        application.updateAMBlacklist(\n-            blacklistAdditions, blacklistRemovals);\n-      } else {\n-        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n-      }\n-      \n+\n+      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n           getClusterResource(), getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d\n        updateIncreaseRequests(increaseRequests, application);\n\n    // Decrease containers\n    decreaseContainers(decreaseRequests, application);\n\n    // Sanity check for new allocation requests\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    Allocation allocation;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)\n            \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/03/16 1:14 PM",
      "commitNameOld": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n       List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n \n     // Release containers\n     releaseContainers(release, application);\n \n     // update increase requests\n     LeafQueue updateDemandForQueue \u003d\n         updateIncreaseRequests(increaseRequests, application);\n \n     // Decrease containers\n     decreaseContainers(decreaseRequests, application);\n \n     // Sanity check for new allocation requests\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     Allocation allocation;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)\n             \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n       \n       if (application.isWaitingForAMContainer()) {\n         // Allocate is for AM and update AM blacklist for this\n         application.updateAMBlacklist(\n             blacklistAdditions, blacklistRemovals);\n       } else {\n         application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n       }\n       \n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n-                   clusterResource, getMinimumResourceCapability());\n+          getClusterResource(), getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d\n        updateIncreaseRequests(increaseRequests, application);\n\n    // Decrease containers\n    decreaseContainers(decreaseRequests, application);\n\n    // Sanity check for new allocation requests\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    Allocation allocation;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)\n            \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n      \n      if (application.isWaitingForAMContainer()) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n      \n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n          getClusterResource(), getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7f46636495e23693d588b0915f464fa7afd9102e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4519. Potential deadlock of CapacityScheduler between decrease container and assign containers. Contributed by Meng Ding\n",
      "commitDate": "28/01/16 2:51 PM",
      "commitName": "7f46636495e23693d588b0915f464fa7afd9102e",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/01/16 9:04 PM",
      "commitNameOld": "edc43a9097530fd469dee47d4fefd091818331e5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 9.74,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,77 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n       List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n-    \n-    // Sanity check\n-    SchedulerUtils.normalizeRequests(\n-        ask, getResourceCalculator(), getClusterResource(),\n-        getMinimumResourceCapability(), getMaximumResourceCapability());\n-    \n-    // Pre-process increase requests\n-    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n-        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n-    \n-    // Pre-process decrease requests\n-    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n-        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n \n     // Release containers\n     releaseContainers(release, application);\n \n-    Allocation allocation;\n+    // update increase requests\n+    LeafQueue updateDemandForQueue \u003d\n+        updateIncreaseRequests(increaseRequests, application);\n \n-    LeafQueue updateDemandForQueue \u003d null;\n+    // Decrease containers\n+    decreaseContainers(decreaseRequests, application);\n+\n+    // Sanity check for new allocation requests\n+    SchedulerUtils.normalizeRequests(\n+        ask, getResourceCalculator(), getClusterResource(),\n+        getMinimumResourceCapability(), getMaximumResourceCapability());\n+\n+    Allocation allocation;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n-        if (application.updateResourceRequests(ask)) {\n+        if (application.updateResourceRequests(ask)\n+            \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n       \n-      // Process increase resource requests\n-      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n-          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n-        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n-      }\n-\n       if (application.isWaitingForAMContainer()) {\n         // Allocate is for AM and update AM blacklist for this\n         application.updateAMBlacklist(\n             blacklistAdditions, blacklistRemovals);\n       } else {\n         application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n       }\n       \n-      // Decrease containers\n-      decreaseContainers(normalizedDecreaseRequests, application);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n         .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n\n    // Release containers\n    releaseContainers(release, application);\n\n    // update increase requests\n    LeafQueue updateDemandForQueue \u003d\n        updateIncreaseRequests(increaseRequests, application);\n\n    // Decrease containers\n    decreaseContainers(decreaseRequests, application);\n\n    // Sanity check for new allocation requests\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    Allocation allocation;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)\n            \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n      \n      if (application.isWaitingForAMContainer()) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n      \n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "edc43a9097530fd469dee47d4fefd091818331e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4565. Fix a bug that leads to AM resource limit not hornored when sizeBasedWeight enabled for FairOrderingPolicy. Contributed by Wangda Tan\n",
      "commitDate": "18/01/16 9:04 PM",
      "commitName": "edc43a9097530fd469dee47d4fefd091818331e5",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,87 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n       List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n     \n     // Pre-process increase requests\n     List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n         checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n     \n     // Pre-process decrease requests\n     List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n         checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     Allocation allocation;\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n       \n       // Process increase resource requests\n       if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n           \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n         updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n       }\n \n       if (application.isWaitingForAMContainer()) {\n         // Allocate is for AM and update AM blacklist for this\n         application.updateAMBlacklist(\n             blacklistAdditions, blacklistRemovals);\n       } else {\n         application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n       }\n       \n       // Decrease containers\n       decreaseContainers(normalizedDecreaseRequests, application);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n-    if (updateDemandForQueue !\u003d null) {\n+    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n+        .isWaitingForAMContainer()) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n    \n    // Pre-process increase requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n    \n    // Pre-process decrease requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n      \n      // Process increase resource requests\n      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n      }\n\n      if (application.isWaitingForAMContainer()) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n      \n      // Decrease containers\n      decreaseContainers(normalizedDecreaseRequests, application);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null \u0026\u0026 !application\n        .isWaitingForAMContainer()) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3946. Update exact reason as to why a submitted app is in ACCEPTED state to app\u0027s diagnostic message. (Naganarasimha G R via wangda)\n",
      "commitDate": "14/12/15 10:52 AM",
      "commitName": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "24/11/15 12:17 AM",
      "commitNameOld": "52948bb20bd1446164df1d3920c46c96dad750ae",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 20.44,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,86 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n       List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n       List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n     \n     // Pre-process increase requests\n     List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n         checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n     \n     // Pre-process decrease requests\n     List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n         checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     Allocation allocation;\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       // Process resource requests\n       if (!ask.isEmpty()) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n       \n       // Process increase resource requests\n       if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n           \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n         updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n       }\n \n-      if (application.isWaitingForAMContainer(application.getApplicationId())) {\n+      if (application.isWaitingForAMContainer()) {\n         // Allocate is for AM and update AM blacklist for this\n         application.updateAMBlacklist(\n             blacklistAdditions, blacklistRemovals);\n       } else {\n         application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n       }\n       \n       // Decrease containers\n       decreaseContainers(normalizedDecreaseRequests, application);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n    \n    // Pre-process increase requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n    \n    // Pre-process decrease requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n      \n      // Process increase resource requests\n      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n      }\n\n      if (application.isWaitingForAMContainer()) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n      \n      // Decrease containers\n      decreaseContainers(normalizedDecreaseRequests, application);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "15/09/15 12:39 AM",
          "commitNameOld": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 8.53,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,86 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n-      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n-      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n+      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n+      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n+      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n+      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n+    \n+    // Pre-process increase requests\n+    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n+        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n+    \n+    // Pre-process decrease requests\n+    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n+        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     Allocation allocation;\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n+      // Process resource requests\n       if (!ask.isEmpty()) {\n-\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n+      \n+      // Process increase resource requests\n+      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n+          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n+        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n+      }\n \n       if (application.isWaitingForAMContainer(application.getApplicationId())) {\n         // Allocate is for AM and update AM blacklist for this\n         application.updateAMBlacklist(\n             blacklistAdditions, blacklistRemovals);\n       } else {\n         application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n       }\n+      \n+      // Decrease containers\n+      decreaseContainers(normalizedDecreaseRequests, application);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n    \n    // Pre-process increase requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n    \n    // Pre-process decrease requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n      \n      // Process increase resource requests\n      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n      }\n\n      if (application.isWaitingForAMContainer(application.getApplicationId())) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n      \n      // Decrease containers\n      decreaseContainers(normalizedDecreaseRequests, application);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e, increaseRequests-List\u003cContainerResourceChangeRequest\u003e, decreaseRequests-List\u003cContainerResourceChangeRequest\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "15/09/15 12:39 AM",
          "commitNameOld": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 8.53,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,86 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n-      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n-      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n+      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n+      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n+      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n+      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n+    \n+    // Pre-process increase requests\n+    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n+        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n+    \n+    // Pre-process decrease requests\n+    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n+        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n \n     // Release containers\n     releaseContainers(release, application);\n \n     Allocation allocation;\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n+      // Process resource requests\n       if (!ask.isEmpty()) {\n-\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n+      \n+      // Process increase resource requests\n+      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n+          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n+        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n+      }\n \n       if (application.isWaitingForAMContainer(application.getApplicationId())) {\n         // Allocate is for AM and update AM blacklist for this\n         application.updateAMBlacklist(\n             blacklistAdditions, blacklistRemovals);\n       } else {\n         application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n       }\n+      \n+      // Decrease containers\n+      decreaseContainers(normalizedDecreaseRequests, application);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release,\n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n    \n    // Pre-process increase requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedIncreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(increaseRequests, true);\n    \n    // Pre-process decrease requests\n    List\u003cSchedContainerChangeRequest\u003e normalizedDecreaseRequests \u003d\n        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      // Process resource requests\n      if (!ask.isEmpty()) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n      \n      // Process increase resource requests\n      if (application.updateIncreaseRequests(normalizedIncreaseRequests)\n          \u0026\u0026 (updateDemandForQueue \u003d\u003d null)) {\n        updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n      }\n\n      if (application.isWaitingForAMContainer(application.getApplicationId())) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n      \n      // Decrease containers\n      decreaseContainers(normalizedDecreaseRequests, application);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "81df7b586a16f8226c7b01c139c1c70c060399c3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2005. Blacklisting support for scheduling AMs. (Anubhav Dhoot via kasha)\n",
      "commitDate": "13/09/15 5:03 PM",
      "commitName": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/09/15 4:10 AM",
      "commitNameOld": "b469ac531af1bdda01a04ae0b8d39218ca292163",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 10.54,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,67 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     // Release containers\n     releaseContainers(release, application);\n \n     Allocation allocation;\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n               \" ask size \u003d\" + ask.size());\n           application.showRequests();\n         }\n \n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: post-update\");\n           application.showRequests();\n         }\n       }\n \n-      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n+      if (application.isWaitingForAMContainer(application.getApplicationId())) {\n+        // Allocate is for AM and update AM blacklist for this\n+        application.updateAMBlacklist(\n+            blacklistAdditions, blacklistRemovals);\n+      } else {\n+        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n+      }\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      if (application.isWaitingForAMContainer(application.getApplicationId())) {\n        // Allocate is for AM and update AM blacklist for this\n        application.updateAMBlacklist(\n            blacklistAdditions, blacklistRemovals);\n      } else {\n        application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n      }\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3966. Fix excessive loggings in CapacityScheduler. (Jian He via wangda)\n",
      "commitDate": "07/08/15 9:46 AM",
      "commitName": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "24/07/15 4:44 PM",
      "commitNameOld": "a3bd7b4a59b3664273dc424f240356838213d4e7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.71,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,61 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n-      LOG.info(\"Calling allocate on removed \" +\n-          \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     // Release containers\n     releaseContainers(release, application);\n \n     Allocation allocation;\n \n     LeafQueue updateDemandForQueue \u003d null;\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n-        LOG.info(\"Calling allocate on a stopped \" +\n-            \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"allocate: pre-update\" +\n-            \" applicationAttemptId\u003d\" + applicationAttemptId + \n-            \" application\u003d\" + application);\n+          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n+              \" ask size \u003d\" + ask.size());\n+          application.showRequests();\n         }\n-        application.showRequests();\n-  \n+\n         // Update application requests\n         if (application.updateResourceRequests(ask)) {\n           updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n         }\n \n-        LOG.debug(\"allocate: post-update\");\n-        application.showRequests();\n-      }\n-\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(\"allocate:\" +\n-          \" applicationAttemptId\u003d\" + applicationAttemptId + \n-          \" #ask\u003d\" + ask.size());\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"allocate: post-update\");\n+          application.showRequests();\n+        }\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n \n     if (updateDemandForQueue !\u003d null) {\n       updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n     }\n \n     return allocation;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update \" + applicationAttemptId +\n              \" ask size \u003d\" + ask.size());\n          application.showRequests();\n        }\n\n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: post-update\");\n          application.showRequests();\n        }\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "10732d515f62258309f98e4d7d23249f80b1847d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3632. Ordering policy should be allowed to reorder an application when demand changes. Contributed by Craig Welch\n",
      "commitDate": "26/05/15 12:00 PM",
      "commitName": "10732d515f62258309f98e4d7d23249f80b1847d",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/04/15 5:03 PM",
      "commitNameOld": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 31.79,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,70 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     // Release containers\n     releaseContainers(release, application);\n \n+    Allocation allocation;\n+\n+    LeafQueue updateDemandForQueue \u003d null;\n+\n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n-        application.updateResourceRequests(ask);\n-  \n+        if (application.updateResourceRequests(ask)) {\n+          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n+        }\n+\n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n-      return application.getAllocation(getResourceCalculator(),\n+      allocation \u003d application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n+\n+    if (updateDemandForQueue !\u003d null) {\n+      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n+    }\n+\n+    return allocation;\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    // Release containers\n    releaseContainers(release, application);\n\n    Allocation allocation;\n\n    LeafQueue updateDemandForQueue \u003d null;\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        if (application.updateResourceRequests(ask)) {\n          updateDemandForQueue \u003d (LeafQueue) application.getQueue();\n        }\n\n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      allocation \u003d application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n\n    if (updateDemandForQueue !\u003d null) {\n      updateDemandForQueue.getOrderingPolicy().demandUpdated(application);\n    }\n\n    return allocation;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2604. Scheduler should consider max-allocation-* in conjunction with the largest node. (Robert Kanter via kasha)\n",
      "commitDate": "21/11/14 10:32 AM",
      "commitName": "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/11/14 5:45 PM",
      "commitNameOld": "b2cd2698028118b6384904732dbf94942f644732",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 16.7,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n-        getMinimumResourceCapability(), maximumAllocation);\n+        getMinimumResourceCapability(), getMaximumResourceCapability());\n \n     // Release containers\n     releaseContainers(release, application);\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       return application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), getMaximumResourceCapability());\n\n    // Release containers\n    releaseContainers(release, application);\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      return application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "17/08/14 11:08 PM",
      "commitNameOld": "519c4be95a091a072302e9ae52c2d221d80037a8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.6,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,57 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), maximumAllocation);\n \n     // Release containers\n-    for (ContainerId releasedContainerId : release) {\n-      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n-      if (rmContainer \u003d\u003d null) {\n-         RMAuditLogger.logFailure(application.getUser(),\n-             AuditConstants.RELEASE_CONTAINER, \n-             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n-             \"Trying to release container not owned by app or with invalid id\",\n-             application.getApplicationId(), releasedContainerId);\n-      }\n-      completedContainer(rmContainer,\n-          SchedulerUtils.createAbnormalContainerStatus(\n-              releasedContainerId, \n-              SchedulerUtils.RELEASED_CONTAINER),\n-          RMContainerEventType.RELEASED);\n-    }\n+    releaseContainers(release, application);\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       return application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), maximumAllocation);\n\n    // Release containers\n    releaseContainers(release, application);\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      return application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 7:53 PM",
      "commitNameOld": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 65.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n-        ask, getResourceCalculator(), getClusterResources(),\n+        ask, getResourceCalculator(), getClusterResource(),\n         getMinimumResourceCapability(), maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       return application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResource(),\n        getMinimumResourceCapability(), maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      return application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n-    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResources(),\n         getMinimumResourceCapability(), maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n \n       return application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplicationAttempt(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResources(),\n        getMinimumResourceCapability(), maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      return application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "0a6e275ee3360719290ad666629624450d4f0a6f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1141. Updating resource requests should be decoupled with updating blacklist (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528632 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/10/13 2:31 PM",
      "commitName": "0a6e275ee3360719290ad666629624450d4f0a6f",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "29/09/13 1:21 AM",
      "commitNameOld": "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.55,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,71 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, getResourceCalculator(), getClusterResources(),\n         getMinimumResourceCapability(), maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n-        application.updateResourceRequests(ask, \n-            blacklistAdditions, blacklistRemovals);\n+        application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n+      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n+\n       return application.getAllocation(getResourceCalculator(),\n                    clusterResource, getMinimumResourceCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResources(),\n        getMinimumResourceCapability(), maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      application.updateBlacklist(blacklistAdditions, blacklistRemovals);\n\n      return application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Ybodychange",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "21/06/13 11:28 AM",
      "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,70 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n       List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n-        ask, calculator, getClusterResources(), minimumAllocation,\n-        maximumAllocation);\n+        ask, getResourceCalculator(), getClusterResources(),\n+        getMinimumResourceCapability(), maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask, \n             blacklistAdditions, blacklistRemovals);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n-      return new Allocation(\n-          application.pullNewlyAllocatedContainers(), \n-          application.getHeadroom());\n+      return application.getAllocation(getResourceCalculator(),\n+                   clusterResource, getMinimumResourceCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, getResourceCalculator(), getClusterResources(),\n        getMinimumResourceCapability(), maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask, \n            blacklistAdditions, blacklistRemovals);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return application.getAllocation(getResourceCalculator(),\n                   clusterResource, getMinimumResourceCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 11:46 AM",
      "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 11:46 AM",
          "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "05/04/13 10:45 AM",
          "commitNameOld": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 62.04,
          "commitsBetweenForRepo": 386,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,71 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n-      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n+      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n+      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, calculator, getClusterResources(), minimumAllocation,\n         maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n-        application.updateResourceRequests(ask);\n+        application.updateResourceRequests(ask, \n+            blacklistAdditions, blacklistRemovals);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, calculator, getClusterResources(), minimumAllocation,\n        maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask, \n            blacklistAdditions, blacklistRemovals);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, ask-List\u003cResourceRequest\u003e, release-List\u003cContainerId\u003e, blacklistAdditions-List\u003cString\u003e, blacklistRemovals-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 11:46 AM",
          "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "05/04/13 10:45 AM",
          "commitNameOld": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 62.04,
          "commitsBetweenForRepo": 386,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,71 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n-      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n+      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n+      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, calculator, getClusterResources(), minimumAllocation,\n         maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n-        application.updateResourceRequests(ask);\n+        application.updateResourceRequests(ask, \n+            blacklistAdditions, blacklistRemovals);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release, \n      List\u003cString\u003e blacklistAdditions, List\u003cString\u003e blacklistRemovals) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, calculator, getClusterResources(), minimumAllocation,\n        maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask, \n            blacklistAdditions, blacklistRemovals);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-193. Scheduler.normalizeRequest does not account for allocation requests that exceed maximumAllocation limits (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465067 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/13 10:45 AM",
      "commitName": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "01/04/13 11:59 PM",
      "commitNameOld": "bcce9354bc7081435f64a257973632a109ebe880",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.45,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n-        ask, calculator, getClusterResources(), minimumAllocation);\n+        ask, calculator, getClusterResources(), minimumAllocation,\n+        maximumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       // make sure we aren\u0027t stopping/removing the application\n       // when the allocate comes in\n       if (application.isStopped()) {\n         LOG.info(\"Calling allocate on a stopped \" +\n             \"application \" + applicationAttemptId);\n         return EMPTY_ALLOCATION;\n       }\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, calculator, getClusterResources(), minimumAllocation,\n        maximumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "01aabf73639785a29d1651f2e268cec04a8b9b94": {
      "type": "Ybodychange",
      "commitMessage": "YARN-460. CS user left in list of active users for the queue even when application finished (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1462486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/03/13 7:36 AM",
      "commitName": "01aabf73639785a29d1651f2e268cec04a8b9b94",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "25/02/13 7:32 PM",
      "commitNameOld": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 31.46,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,68 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(\n         ask, calculator, getClusterResources(), minimumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n+      // make sure we aren\u0027t stopping/removing the application\n+      // when the allocate comes in\n+      if (application.isStopped()) {\n+        LOG.info(\"Calling allocate on a stopped \" +\n+            \"application \" + applicationAttemptId);\n+        return EMPTY_ALLOCATION;\n+      }\n+\n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, calculator, getClusterResources(), minimumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      // make sure we aren\u0027t stopping/removing the application\n      // when the allocate comes in\n      if (application.isStopped()) {\n        LOG.info(\"Calling allocate on a stopped \" +\n            \"application \" + applicationAttemptId);\n        return EMPTY_ALLOCATION;\n      }\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 41.13,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n-    SchedulerUtils.normalizeRequests(ask, minimumAllocation.getMemory());\n+    SchedulerUtils.normalizeRequests(\n+        ask, calculator, getClusterResources(), minimumAllocation);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(\n        ask, calculator, getClusterResources(), minimumAllocation);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(ask, minimumAllocation.getMemory());\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n-    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     SchedulerUtils.normalizeRequests(ask, minimumAllocation.getMemory());\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(ask, minimumAllocation.getMemory());\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e549ac93694f768f2e26706a54a1b45dea6d2844": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2788. Normalize resource requests in FifoScheduler appropriately. Contributed by Ahmed Radwan. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186467 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/11 1:37 PM",
      "commitName": "e549ac93694f768f2e26706a54a1b45dea6d2844",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "05/10/11 4:56 AM",
      "commitNameOld": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.36,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n-    normalizeRequests(ask);\n+    SchedulerUtils.normalizeRequests(ask, minimumAllocation.getMemory());\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       if (!ask.isEmpty()) {\n \n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n       }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    SchedulerUtils.normalizeRequests(ask, minimumAllocation.getMemory());\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f24dcb3449c77da665058427bc7fa480cad507fc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2907. Changed log level for various messages in ResourceManager from INFO to DEBUG. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179178 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:56 AM",
      "commitName": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/09/11 3:19 PM",
      "commitNameOld": "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 4.57,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,59 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     normalizeRequests(ask);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n       completedContainer(rmContainer,\n           SchedulerUtils.createAbnormalContainerStatus(\n               releasedContainerId, \n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       if (!ask.isEmpty()) {\n \n-        LOG.info(\"DEBUG --- allocate: pre-update\" +\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n+        }\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n-        LOG.info(\"DEBUG --- allocate: post-update\");\n+        LOG.debug(\"allocate: post-update\");\n         application.showRequests();\n       }\n \n-      LOG.info(\"DEBUG --- allocate:\" +\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\"allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n+      }\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    normalizeRequests(ask);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        }\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.debug(\"allocate: post-update\");\n        application.showRequests();\n      }\n\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n      }\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 11:26 AM",
      "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,55 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     normalizeRequests(ask);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n       RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n       if (rmContainer \u003d\u003d null) {\n          RMAuditLogger.logFailure(application.getUser(),\n              AuditConstants.RELEASE_CONTAINER, \n              \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n              \"Trying to release container not owned by app or with invalid id\",\n              application.getApplicationId(), releasedContainerId);\n       }\n-      completedContainer(rmContainer, RMContainerEventType.RELEASED);\n+      completedContainer(rmContainer,\n+          SchedulerUtils.createAbnormalContainerStatus(\n+              releasedContainerId, \n+              SchedulerUtils.RELEASED_CONTAINER),\n+          RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       if (!ask.isEmpty()) {\n \n         LOG.info(\"DEBUG --- allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.info(\"DEBUG --- allocate: post-update\");\n         application.showRequests();\n       }\n \n       LOG.info(\"DEBUG --- allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    normalizeRequests(ask);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer,\n          SchedulerUtils.createAbnormalContainerStatus(\n              releasedContainerId, \n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        LOG.info(\"DEBUG --- allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.info(\"DEBUG --- allocate: post-update\");\n        application.showRequests();\n      }\n\n      LOG.info(\"DEBUG --- allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cdfabf5ae289836968b3d296668593b9500b6f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2655. Add audit logs to ResourceManager and NodeManager. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165949 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 6:24 PM",
      "commitName": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "05/09/11 12:49 PM",
      "commitNameOld": "6b608aad7d52b524fa94955a538e8b3524d42d93",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.23,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,51 @@\n   public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n       List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n \n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Calling allocate on removed \" +\n           \"or non existant application \" + applicationAttemptId);\n       return EMPTY_ALLOCATION;\n     }\n     \n     // Sanity check\n     normalizeRequests(ask);\n \n     // Release containers\n     for (ContainerId releasedContainerId : release) {\n-      completedContainer(getRMContainer(releasedContainerId), \n-          RMContainerEventType.RELEASED);\n+      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n+      if (rmContainer \u003d\u003d null) {\n+         RMAuditLogger.logFailure(application.getUser(),\n+             AuditConstants.RELEASE_CONTAINER, \n+             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n+             \"Trying to release container not owned by app or with invalid id\",\n+             application.getApplicationId(), releasedContainerId);\n+      }\n+      completedContainer(rmContainer, RMContainerEventType.RELEASED);\n     }\n \n     synchronized (application) {\n \n       if (!ask.isEmpty()) {\n \n         LOG.info(\"DEBUG --- allocate: pre-update\" +\n             \" applicationAttemptId\u003d\" + applicationAttemptId + \n             \" application\u003d\" + application);\n         application.showRequests();\n   \n         // Update application requests\n         application.updateResourceRequests(ask);\n   \n         LOG.info(\"DEBUG --- allocate: post-update\");\n         application.showRequests();\n       }\n \n       LOG.info(\"DEBUG --- allocate:\" +\n           \" applicationAttemptId\u003d\" + applicationAttemptId + \n           \" #ask\u003d\" + ask.size());\n \n       return new Allocation(\n           application.pullNewlyAllocatedContainers(), \n           application.getHeadroom());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    normalizeRequests(ask);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      RMContainer rmContainer \u003d getRMContainer(releasedContainerId);\n      if (rmContainer \u003d\u003d null) {\n         RMAuditLogger.logFailure(application.getUser(),\n             AuditConstants.RELEASE_CONTAINER, \n             \"Unauthorized access or invalid container\", \"CapacityScheduler\",\n             \"Trying to release container not owned by app or with invalid id\",\n             application.getApplicationId(), releasedContainerId);\n      }\n      completedContainer(rmContainer, RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        LOG.info(\"DEBUG --- allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.info(\"DEBUG --- allocate: post-update\");\n        application.showRequests();\n      }\n\n      LOG.info(\"DEBUG --- allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    normalizeRequests(ask);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      completedContainer(getRMContainer(releasedContainerId), \n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        LOG.info(\"DEBUG --- allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.info(\"DEBUG --- allocate: post-update\");\n        application.showRequests();\n      }\n\n      LOG.info(\"DEBUG --- allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,44 @@\n+  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n+      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n+\n+    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    if (application \u003d\u003d null) {\n+      LOG.info(\"Calling allocate on removed \" +\n+          \"or non existant application \" + applicationAttemptId);\n+      return EMPTY_ALLOCATION;\n+    }\n+    \n+    // Sanity check\n+    normalizeRequests(ask);\n+\n+    // Release containers\n+    for (ContainerId releasedContainerId : release) {\n+      completedContainer(getRMContainer(releasedContainerId), \n+          RMContainerEventType.RELEASED);\n+    }\n+\n+    synchronized (application) {\n+\n+      if (!ask.isEmpty()) {\n+\n+        LOG.info(\"DEBUG --- allocate: pre-update\" +\n+            \" applicationAttemptId\u003d\" + applicationAttemptId + \n+            \" application\u003d\" + application);\n+        application.showRequests();\n+  \n+        // Update application requests\n+        application.updateResourceRequests(ask);\n+  \n+        LOG.info(\"DEBUG --- allocate: post-update\");\n+        application.showRequests();\n+      }\n+\n+      LOG.info(\"DEBUG --- allocate:\" +\n+          \" applicationAttemptId\u003d\" + applicationAttemptId + \n+          \" #ask\u003d\" + ask.size());\n+\n+      return new Allocation(\n+          application.pullNewlyAllocatedContainers(), \n+          application.getHeadroom());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List\u003cResourceRequest\u003e ask, List\u003cContainerId\u003e release) {\n\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Calling allocate on removed \" +\n          \"or non existant application \" + applicationAttemptId);\n      return EMPTY_ALLOCATION;\n    }\n    \n    // Sanity check\n    normalizeRequests(ask);\n\n    // Release containers\n    for (ContainerId releasedContainerId : release) {\n      completedContainer(getRMContainer(releasedContainerId), \n          RMContainerEventType.RELEASED);\n    }\n\n    synchronized (application) {\n\n      if (!ask.isEmpty()) {\n\n        LOG.info(\"DEBUG --- allocate: pre-update\" +\n            \" applicationAttemptId\u003d\" + applicationAttemptId + \n            \" application\u003d\" + application);\n        application.showRequests();\n  \n        // Update application requests\n        application.updateResourceRequests(ask);\n  \n        LOG.info(\"DEBUG --- allocate: post-update\");\n        application.showRequests();\n      }\n\n      LOG.info(\"DEBUG --- allocate:\" +\n          \" applicationAttemptId\u003d\" + applicationAttemptId + \n          \" #ask\u003d\" + ask.size());\n\n      return new Allocation(\n          application.pullNewlyAllocatedContainers(), \n          application.getHeadroom());\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}