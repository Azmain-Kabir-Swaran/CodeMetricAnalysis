{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KDiag.java",
  "functionName": "execute",
  "functionId": "execute",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
  "functionStartLine": 282,
  "functionEndLine": 419,
  "numCommitsSeen": 11,
  "timeTaken": 3506,
  "changeHistory": [
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
    "d0edd37269bb40290b409d583bcf3b70897c13e0",
    "de630708d1912b3e4fa31e00f5d84a08a580e763",
    "f274fe33ea359d26a31efec42a856320a0dbb5f4",
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
    "abb9fa7fc69ec7b25f1c44e17c4c7dd17f5de16a",
    "829a2e4d271f05afb209ddc834cd4a0e85492eda",
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4"
  ],
  "changeHistoryShort": {
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5": "Ybodychange",
    "d0edd37269bb40290b409d583bcf3b70897c13e0": "Ybodychange",
    "de630708d1912b3e4fa31e00f5d84a08a580e763": "Ybodychange",
    "f274fe33ea359d26a31efec42a856320a0dbb5f4": "Ybodychange",
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb": "Ybodychange",
    "abb9fa7fc69ec7b25f1c44e17c4c7dd17f5de16a": "Ybodychange",
    "829a2e4d271f05afb209ddc834cd4a0e85492eda": "Ybodychange",
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15996.  Improved Kerberos username mapping strategy in Hadoop.\n               Contributed by Bolke de Bruin\n",
      "commitDate": "04/01/19 2:54 PM",
      "commitName": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "29/11/18 9:52 AM",
      "commitNameOld": "d0edd37269bb40290b409d583bcf3b70897c13e0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 36.21,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,134 +1,138 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n+    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n         HADOOP_JAAS_DEBUG,\n         KRB5_CCNAME,\n         KRB5_CONFIG,\n         HADOOP_USER_NAME,\n         HADOOP_PROXY_USER,\n         HADOOP_TOKEN_FILE_LOCATION,\n         \"HADOOP_SECURE_LOG\",\n         \"HADOOP_OPTS\",\n         \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n       validateHadoopTokenFiles(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n+      if (checkShortName) {\n+        validateShortName();\n+      }\n \n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n        HADOOP_JAAS_DEBUG,\n        KRB5_CCNAME,\n        KRB5_CONFIG,\n        HADOOP_USER_NAME,\n        HADOOP_PROXY_USER,\n        HADOOP_TOKEN_FILE_LOCATION,\n        \"HADOOP_SECURE_LOG\",\n        \"HADOOP_OPTS\",\n        \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateHadoopTokenFiles(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n      if (checkShortName) {\n        validateShortName();\n      }\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "d0edd37269bb40290b409d583bcf3b70897c13e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15959. Revert \"HADOOP-12751. While using kerberos Hadoop incorrectly assumes names with \u0027@\u0027 to be non-simple\"\n\nThis reverts commit 829a2e4d271f05afb209ddc834cd4a0e85492eda.\n",
      "commitDate": "29/11/18 9:52 AM",
      "commitName": "d0edd37269bb40290b409d583bcf3b70897c13e0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 4:35 AM",
      "commitNameOld": "de630708d1912b3e4fa31e00f5d84a08a580e763",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 315.22,
      "commitsBetweenForRepo": 3045,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,134 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n-    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n         HADOOP_JAAS_DEBUG,\n         KRB5_CCNAME,\n         KRB5_CONFIG,\n         HADOOP_USER_NAME,\n         HADOOP_PROXY_USER,\n         HADOOP_TOKEN_FILE_LOCATION,\n         \"HADOOP_SECURE_LOG\",\n         \"HADOOP_OPTS\",\n         \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n       validateHadoopTokenFiles(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n \n-      if (checkShortName) {\n-        validateShortName();\n-      }\n-\n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n        HADOOP_JAAS_DEBUG,\n        KRB5_CCNAME,\n        KRB5_CONFIG,\n        HADOOP_USER_NAME,\n        HADOOP_PROXY_USER,\n        HADOOP_TOKEN_FILE_LOCATION,\n        \"HADOOP_SECURE_LOG\",\n        \"HADOOP_OPTS\",\n        \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateHadoopTokenFiles(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "de630708d1912b3e4fa31e00f5d84a08a580e763": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15123. KDiag tries to load krb5.conf from KRB5CCNAME instead of KRB5_CONFIG.\nContributed by Vipin Rathor.\n\n(cherry picked from commit 1ef906e29e0989aafcb35c51ad2acbb262b3c8e7)\n(cherry picked from commit f61edab1d0ea08b6d752ecdfb6068103822012ec)\n",
      "commitDate": "18/01/18 4:35 AM",
      "commitName": "de630708d1912b3e4fa31e00f5d84a08a580e763",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 4:35 AM",
      "commitNameOld": "f274fe33ea359d26a31efec42a856320a0dbb5f4",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,138 +1,139 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n     println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n-      HADOOP_JAAS_DEBUG,\n-      KRB5_CCNAME,\n-      HADOOP_USER_NAME,\n-      HADOOP_PROXY_USER,\n-      HADOOP_TOKEN_FILE_LOCATION,\n-      \"HADOOP_SECURE_LOG\",\n-      \"HADOOP_OPTS\",\n-      \"HADOOP_CLIENT_OPTS\",\n+        HADOOP_JAAS_DEBUG,\n+        KRB5_CCNAME,\n+        KRB5_CONFIG,\n+        HADOOP_USER_NAME,\n+        HADOOP_PROXY_USER,\n+        HADOOP_TOKEN_FILE_LOCATION,\n+        \"HADOOP_SECURE_LOG\",\n+        \"HADOOP_OPTS\",\n+        \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n       validateHadoopTokenFiles(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n \n       if (checkShortName) {\n         validateShortName();\n       }\n \n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n        HADOOP_JAAS_DEBUG,\n        KRB5_CCNAME,\n        KRB5_CONFIG,\n        HADOOP_USER_NAME,\n        HADOOP_PROXY_USER,\n        HADOOP_TOKEN_FILE_LOCATION,\n        \"HADOOP_SECURE_LOG\",\n        \"HADOOP_OPTS\",\n        \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateHadoopTokenFiles(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (checkShortName) {\n        validateShortName();\n      }\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "f274fe33ea359d26a31efec42a856320a0dbb5f4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\"\n\nThis reverts commit 35ad9b1dd279b769381ea1625d9bf776c309c5cb.\n",
      "commitDate": "18/01/18 4:35 AM",
      "commitName": "f274fe33ea359d26a31efec42a856320a0dbb5f4",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/12/17 1:19 PM",
      "commitNameOld": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 30.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,138 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n     println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n-        HADOOP_JAAS_DEBUG,\n-        KRB5_CCNAME,\n-        KRB5_CONFIG,\n-        HADOOP_USER_NAME,\n-        HADOOP_PROXY_USER,\n-        HADOOP_TOKEN_FILE_LOCATION,\n-        \"HADOOP_SECURE_LOG\",\n-        \"HADOOP_OPTS\",\n-        \"HADOOP_CLIENT_OPTS\",\n+      HADOOP_JAAS_DEBUG,\n+      KRB5_CCNAME,\n+      HADOOP_USER_NAME,\n+      HADOOP_PROXY_USER,\n+      HADOOP_TOKEN_FILE_LOCATION,\n+      \"HADOOP_SECURE_LOG\",\n+      \"HADOOP_OPTS\",\n+      \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n       validateHadoopTokenFiles(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n \n       if (checkShortName) {\n         validateShortName();\n       }\n \n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n      HADOOP_JAAS_DEBUG,\n      KRB5_CCNAME,\n      HADOOP_USER_NAME,\n      HADOOP_PROXY_USER,\n      HADOOP_TOKEN_FILE_LOCATION,\n      \"HADOOP_SECURE_LOG\",\n      \"HADOOP_OPTS\",\n      \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateHadoopTokenFiles(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (checkShortName) {\n        validateShortName();\n      }\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "35ad9b1dd279b769381ea1625d9bf776c309c5cb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/12/17 1:19 PM",
      "commitName": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/12/16 11:18 PM",
      "commitNameOld": "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 377.58,
      "commitsBetweenForRepo": 2442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,138 +1,139 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n     println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n-      HADOOP_JAAS_DEBUG,\n-      KRB5_CCNAME,\n-      HADOOP_USER_NAME,\n-      HADOOP_PROXY_USER,\n-      HADOOP_TOKEN_FILE_LOCATION,\n-      \"HADOOP_SECURE_LOG\",\n-      \"HADOOP_OPTS\",\n-      \"HADOOP_CLIENT_OPTS\",\n+        HADOOP_JAAS_DEBUG,\n+        KRB5_CCNAME,\n+        KRB5_CONFIG,\n+        HADOOP_USER_NAME,\n+        HADOOP_PROXY_USER,\n+        HADOOP_TOKEN_FILE_LOCATION,\n+        \"HADOOP_SECURE_LOG\",\n+        \"HADOOP_OPTS\",\n+        \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n       validateHadoopTokenFiles(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n \n       if (checkShortName) {\n         validateShortName();\n       }\n \n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n        HADOOP_JAAS_DEBUG,\n        KRB5_CCNAME,\n        KRB5_CONFIG,\n        HADOOP_USER_NAME,\n        HADOOP_PROXY_USER,\n        HADOOP_TOKEN_FILE_LOCATION,\n        \"HADOOP_SECURE_LOG\",\n        \"HADOOP_OPTS\",\n        \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateHadoopTokenFiles(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (checkShortName) {\n        validateShortName();\n      }\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "abb9fa7fc69ec7b25f1c44e17c4c7dd17f5de16a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13018. Make Kdiag check whether hadoop.token.files points to existent and valid files. Contributed by Ravi Prakash\n",
      "commitDate": "24/11/16 8:41 AM",
      "commitName": "abb9fa7fc69ec7b25f1c44e17c4c7dd17f5de16a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/05/16 11:23 PM",
      "commitNameOld": "916140604ffef59466ba30832478311d3e6249bd",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 180.43,
      "commitsBetweenForRepo": 1394,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,137 +1,138 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n     println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n       HADOOP_JAAS_DEBUG,\n       KRB5_CCNAME,\n       HADOOP_USER_NAME,\n       HADOOP_PROXY_USER,\n       HADOOP_TOKEN_FILE_LOCATION,\n       \"HADOOP_SECURE_LOG\",\n       \"HADOOP_OPTS\",\n       \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n+      validateHadoopTokenFiles(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n \n       if (checkShortName) {\n         validateShortName();\n       }\n \n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n      HADOOP_JAAS_DEBUG,\n      KRB5_CCNAME,\n      HADOOP_USER_NAME,\n      HADOOP_PROXY_USER,\n      HADOOP_TOKEN_FILE_LOCATION,\n      \"HADOOP_SECURE_LOG\",\n      \"HADOOP_OPTS\",\n      \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateHadoopTokenFiles(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (checkShortName) {\n        validateShortName();\n      }\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "829a2e4d271f05afb209ddc834cd4a0e85492eda": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12751. While using kerberos Hadoop incorrectly assumes names with \u0027@\u0027 to be non-simple. (Bolke de Bruin via stevel).\n",
      "commitDate": "10/05/16 1:32 PM",
      "commitName": "829a2e4d271f05afb209ddc834cd4a0e85492eda",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/02/16 3:47 PM",
      "commitNameOld": "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 94.86,
      "commitsBetweenForRepo": 577,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,132 +1,137 @@\n   public boolean execute() throws Exception {\n \n     title(\"Kerberos Diagnostics scan at %s\",\n         new Date(System.currentTimeMillis()));\n \n     // check that the machine has a name\n     println(\"Hostname \u003d %s\",\n         InetAddress.getLocalHost().getCanonicalHostName());\n \n     println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n     println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n     println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n+    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n \n     // Fail fast on a JVM without JCE installed.\n     validateKeyLength();\n \n     // look at realm\n     println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n \n     title(\"Core System Properties\");\n     for (String prop : new String[]{\n       \"user.name\",\n       \"java.version\",\n       \"java.vendor\",\n       JAVA_SECURITY_KRB5_CONF,\n       JAVA_SECURITY_KRB5_REALM,\n       JAVA_SECURITY_KRB5_KDC_ADDRESS,\n       SUN_SECURITY_KRB5_DEBUG,\n       SUN_SECURITY_SPNEGO_DEBUG,\n       SUN_SECURITY_JAAS_FILE\n     }) {\n       printSysprop(prop);\n     }\n     endln();\n \n     title(\"All System Properties\");\n     ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n         System.getProperties().stringPropertyNames());\n     Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n     for (String s : propList) {\n       printSysprop(s);\n     }\n     endln();\n \n     title(\"Environment Variables\");\n     for (String env : new String[]{\n       HADOOP_JAAS_DEBUG,\n       KRB5_CCNAME,\n       HADOOP_USER_NAME,\n       HADOOP_PROXY_USER,\n       HADOOP_TOKEN_FILE_LOCATION,\n       \"HADOOP_SECURE_LOG\",\n       \"HADOOP_OPTS\",\n       \"HADOOP_CLIENT_OPTS\",\n     }) {\n       printEnv(env);\n     }\n     endln();\n \n     title(\"Configuration Options\");\n     for (String prop : new String[]{\n       KERBEROS_KINIT_COMMAND,\n       HADOOP_SECURITY_AUTHENTICATION,\n       HADOOP_SECURITY_AUTHORIZATION,\n       \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n       \"hadoop.security.dns.interface\",   // not in 2.6\n       \"hadoop.security.dns.nameserver\",  // not in 2.6\n       HADOOP_RPC_PROTECTION,\n       HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n       HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n       HADOOP_SECURITY_GROUP_MAPPING,\n       \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n       DFS_DATA_TRANSFER_PROTECTION, // HDFS\n       DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n     }) {\n       printConfOpt(prop);\n     }\n \n     // check that authentication is enabled\n     Configuration conf \u003d getConf();\n     if (isSimpleAuthentication(conf)) {\n       println(HADOOP_AUTHENTICATION_IS_DISABLED);\n       failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       // no security, warn\n       LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n     } else {\n       if (isSimpleAuthentication(new Configuration())) {\n         LOG.warn(\"The default cluster security is insecure\");\n         failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n       }\n     }\n \n \n     // now the big test: login, then try again\n     boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n     boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n \n     try {\n       UserGroupInformation.setConfiguration(conf);\n       validateKrb5File();\n       printDefaultRealm();\n       validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n       if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n         validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n       }\n       validateKinitExecutable();\n       validateJAAS(jaas);\n       validateNTPConf();\n \n+      if (checkShortName) {\n+        validateShortName();\n+      }\n+\n       if (!nologin) {\n         title(\"Logging in\");\n         if (keytab !\u003d null) {\n           dumpKeytab(keytab);\n           loginFromKeytab();\n         } else {\n           UserGroupInformation loginUser \u003d getLoginUser();\n           dumpUGI(\"Log in user\", loginUser);\n           validateUGI(\"Login user\", loginUser);\n           println(\"Ticket based login: %b\", isLoginTicketBased());\n           println(\"Keytab based login: %b\", isLoginKeytabBased());\n         }\n       }\n \n       return true;\n     } finally {\n       // restore original system properties\n       System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n         Boolean.toString(krb5Debug));\n       System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n         Boolean.toString(spnegoDebug));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n    println(\"%s \u003d %s\", ARG_VERIFYSHORTNAME, checkShortName);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n      HADOOP_JAAS_DEBUG,\n      KRB5_CCNAME,\n      HADOOP_USER_NAME,\n      HADOOP_PROXY_USER,\n      HADOOP_TOKEN_FILE_LOCATION,\n      \"HADOOP_SECURE_LOG\",\n      \"HADOOP_OPTS\",\n      \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (checkShortName) {\n        validateShortName();\n      }\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12426. Add Entry point for Kerberos health check. Contributed by Steve Loughran.\n",
      "commitDate": "05/02/16 3:47 PM",
      "commitName": "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,132 @@\n+  public boolean execute() throws Exception {\n+\n+    title(\"Kerberos Diagnostics scan at %s\",\n+        new Date(System.currentTimeMillis()));\n+\n+    // check that the machine has a name\n+    println(\"Hostname \u003d %s\",\n+        InetAddress.getLocalHost().getCanonicalHostName());\n+\n+    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n+    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n+    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n+\n+    // Fail fast on a JVM without JCE installed.\n+    validateKeyLength();\n+\n+    // look at realm\n+    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n+\n+    title(\"Core System Properties\");\n+    for (String prop : new String[]{\n+      \"user.name\",\n+      \"java.version\",\n+      \"java.vendor\",\n+      JAVA_SECURITY_KRB5_CONF,\n+      JAVA_SECURITY_KRB5_REALM,\n+      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n+      SUN_SECURITY_KRB5_DEBUG,\n+      SUN_SECURITY_SPNEGO_DEBUG,\n+      SUN_SECURITY_JAAS_FILE\n+    }) {\n+      printSysprop(prop);\n+    }\n+    endln();\n+\n+    title(\"All System Properties\");\n+    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n+        System.getProperties().stringPropertyNames());\n+    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n+    for (String s : propList) {\n+      printSysprop(s);\n+    }\n+    endln();\n+\n+    title(\"Environment Variables\");\n+    for (String env : new String[]{\n+      HADOOP_JAAS_DEBUG,\n+      KRB5_CCNAME,\n+      HADOOP_USER_NAME,\n+      HADOOP_PROXY_USER,\n+      HADOOP_TOKEN_FILE_LOCATION,\n+      \"HADOOP_SECURE_LOG\",\n+      \"HADOOP_OPTS\",\n+      \"HADOOP_CLIENT_OPTS\",\n+    }) {\n+      printEnv(env);\n+    }\n+    endln();\n+\n+    title(\"Configuration Options\");\n+    for (String prop : new String[]{\n+      KERBEROS_KINIT_COMMAND,\n+      HADOOP_SECURITY_AUTHENTICATION,\n+      HADOOP_SECURITY_AUTHORIZATION,\n+      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n+      \"hadoop.security.dns.interface\",   // not in 2.6\n+      \"hadoop.security.dns.nameserver\",  // not in 2.6\n+      HADOOP_RPC_PROTECTION,\n+      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n+      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n+      HADOOP_SECURITY_GROUP_MAPPING,\n+      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n+      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n+      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n+    }) {\n+      printConfOpt(prop);\n+    }\n+\n+    // check that authentication is enabled\n+    Configuration conf \u003d getConf();\n+    if (isSimpleAuthentication(conf)) {\n+      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n+      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n+      // no security, warn\n+      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n+    } else {\n+      if (isSimpleAuthentication(new Configuration())) {\n+        LOG.warn(\"The default cluster security is insecure\");\n+        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n+      }\n+    }\n+\n+\n+    // now the big test: login, then try again\n+    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n+    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n+\n+    try {\n+      UserGroupInformation.setConfiguration(conf);\n+      validateKrb5File();\n+      printDefaultRealm();\n+      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n+      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n+        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n+      }\n+      validateKinitExecutable();\n+      validateJAAS(jaas);\n+      validateNTPConf();\n+\n+      if (!nologin) {\n+        title(\"Logging in\");\n+        if (keytab !\u003d null) {\n+          dumpKeytab(keytab);\n+          loginFromKeytab();\n+        } else {\n+          UserGroupInformation loginUser \u003d getLoginUser();\n+          dumpUGI(\"Log in user\", loginUser);\n+          validateUGI(\"Login user\", loginUser);\n+          println(\"Ticket based login: %b\", isLoginTicketBased());\n+          println(\"Keytab based login: %b\", isLoginKeytabBased());\n+        }\n+      }\n+\n+      return true;\n+    } finally {\n+      // restore original system properties\n+      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n+        Boolean.toString(krb5Debug));\n+      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n+        Boolean.toString(spnegoDebug));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean execute() throws Exception {\n\n    title(\"Kerberos Diagnostics scan at %s\",\n        new Date(System.currentTimeMillis()));\n\n    // check that the machine has a name\n    println(\"Hostname \u003d %s\",\n        InetAddress.getLocalHost().getCanonicalHostName());\n\n    println(\"%s \u003d %d\", ARG_KEYLEN, minKeyLength);\n    println(\"%s \u003d %s\", ARG_KEYTAB, keytab);\n    println(\"%s \u003d %s\", ARG_PRINCIPAL, principal);\n\n    // Fail fast on a JVM without JCE installed.\n    validateKeyLength();\n\n    // look at realm\n    println(\"JVM Kerberos Login Module \u003d %s\", getKrb5LoginModuleName());\n\n    title(\"Core System Properties\");\n    for (String prop : new String[]{\n      \"user.name\",\n      \"java.version\",\n      \"java.vendor\",\n      JAVA_SECURITY_KRB5_CONF,\n      JAVA_SECURITY_KRB5_REALM,\n      JAVA_SECURITY_KRB5_KDC_ADDRESS,\n      SUN_SECURITY_KRB5_DEBUG,\n      SUN_SECURITY_SPNEGO_DEBUG,\n      SUN_SECURITY_JAAS_FILE\n    }) {\n      printSysprop(prop);\n    }\n    endln();\n\n    title(\"All System Properties\");\n    ArrayList\u003cString\u003e propList \u003d new ArrayList\u003c\u003e(\n        System.getProperties().stringPropertyNames());\n    Collections.sort(propList, String.CASE_INSENSITIVE_ORDER);\n    for (String s : propList) {\n      printSysprop(s);\n    }\n    endln();\n\n    title(\"Environment Variables\");\n    for (String env : new String[]{\n      HADOOP_JAAS_DEBUG,\n      KRB5_CCNAME,\n      HADOOP_USER_NAME,\n      HADOOP_PROXY_USER,\n      HADOOP_TOKEN_FILE_LOCATION,\n      \"HADOOP_SECURE_LOG\",\n      \"HADOOP_OPTS\",\n      \"HADOOP_CLIENT_OPTS\",\n    }) {\n      printEnv(env);\n    }\n    endln();\n\n    title(\"Configuration Options\");\n    for (String prop : new String[]{\n      KERBEROS_KINIT_COMMAND,\n      HADOOP_SECURITY_AUTHENTICATION,\n      HADOOP_SECURITY_AUTHORIZATION,\n      \"hadoop.kerberos.min.seconds.before.relogin\",    // not in 2.6\n      \"hadoop.security.dns.interface\",   // not in 2.6\n      \"hadoop.security.dns.nameserver\",  // not in 2.6\n      HADOOP_RPC_PROTECTION,\n      HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,\n      HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,\n      HADOOP_SECURITY_GROUP_MAPPING,\n      \"hadoop.security.impersonation.provider.class\",    // not in 2.6\n      DFS_DATA_TRANSFER_PROTECTION, // HDFS\n      DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS // HDFS\n    }) {\n      printConfOpt(prop);\n    }\n\n    // check that authentication is enabled\n    Configuration conf \u003d getConf();\n    if (isSimpleAuthentication(conf)) {\n      println(HADOOP_AUTHENTICATION_IS_DISABLED);\n      failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      // no security, warn\n      LOG.warn(\"Security is not enabled for the Hadoop cluster\");\n    } else {\n      if (isSimpleAuthentication(new Configuration())) {\n        LOG.warn(\"The default cluster security is insecure\");\n        failif(securityRequired, CAT_CONFIG, HADOOP_AUTHENTICATION_IS_DISABLED);\n      }\n    }\n\n\n    // now the big test: login, then try again\n    boolean krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG);\n    boolean spnegoDebug \u003d getAndSet(SUN_SECURITY_SPNEGO_DEBUG);\n\n    try {\n      UserGroupInformation.setConfiguration(conf);\n      validateKrb5File();\n      printDefaultRealm();\n      validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);\n      if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) !\u003d null) {\n        validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);\n      }\n      validateKinitExecutable();\n      validateJAAS(jaas);\n      validateNTPConf();\n\n      if (!nologin) {\n        title(\"Logging in\");\n        if (keytab !\u003d null) {\n          dumpKeytab(keytab);\n          loginFromKeytab();\n        } else {\n          UserGroupInformation loginUser \u003d getLoginUser();\n          dumpUGI(\"Log in user\", loginUser);\n          validateUGI(\"Login user\", loginUser);\n          println(\"Ticket based login: %b\", isLoginTicketBased());\n          println(\"Keytab based login: %b\", isLoginKeytabBased());\n        }\n      }\n\n      return true;\n    } finally {\n      // restore original system properties\n      System.setProperty(SUN_SECURITY_KRB5_DEBUG,\n        Boolean.toString(krb5Debug));\n      System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,\n        Boolean.toString(spnegoDebug));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java"
    }
  }
}