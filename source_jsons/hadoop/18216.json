{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterAdmin.java",
  "functionName": "updateQuota",
  "functionId": "updateQuota___mount-String__nsQuota-long__ssQuota-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
  "functionStartLine": 989,
  "functionEndLine": 1037,
  "numCommitsSeen": 36,
  "timeTaken": 3455,
  "changeHistory": [
    "b89fd4dfe95a1e0a18a346ec1c1321c366ff97a0",
    "17a87977f29ced49724f561a68565217c8cb4e94",
    "69fe4407ebd885fed69d9cf7f4dd17d3ba1acb60",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "9afb8025d6549f0ade0ae7d36f5e67cd20c500f4",
    "d98a2e6e2383f8b66def346409b0517aa32d298d"
  ],
  "changeHistoryShort": {
    "b89fd4dfe95a1e0a18a346ec1c1321c366ff97a0": "Ybodychange",
    "17a87977f29ced49724f561a68565217c8cb4e94": "Ybodychange",
    "69fe4407ebd885fed69d9cf7f4dd17d3ba1acb60": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "9afb8025d6549f0ade0ae7d36f5e67cd20c500f4": "Ybodychange",
    "d98a2e6e2383f8b66def346409b0517aa32d298d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b89fd4dfe95a1e0a18a346ec1c1321c366ff97a0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15002. RBF: Fix annotation in RouterAdmin. Contributed by Jinglun.\n",
      "commitDate": "21/11/19 11:38 AM",
      "commitName": "b89fd4dfe95a1e0a18a346ec1c1321c366ff97a0",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "21/10/19 5:50 AM",
      "commitNameOld": "ff6a492d6666c9f8e15bde5d1bce3f8841298146",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 31.28,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n       throws IOException {\n     // Get existing entry\n     MountTableManager mountTable \u003d client.getMountTableManager();\n     GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n         .newInstance(mount);\n     GetMountTableEntriesResponse getResponse \u003d mountTable\n         .getMountTableEntries(getRequest);\n     List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n     MountTable existingEntry \u003d null;\n     for (MountTable result : results) {\n       if (mount.equals(result.getSourcePath())) {\n         existingEntry \u003d result;\n         break;\n       }\n     }\n \n     if (existingEntry \u003d\u003d null) {\n       throw new IOException(mount + \" doesn\u0027t exist in mount table.\");\n     } else {\n       long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n       long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n-      // If nsQuota and ssQuota were unset, clear nsQuota and ssQuota.\n+      // If nsQuota and ssQuota were reset, clear nsQuota and ssQuota.\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET \u0026\u0026\n           ssQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n         nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n         ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n       } else {\n         // If nsQuota or ssQuota was unset, use the value in mount table.\n         if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n           nsQuota \u003d existingEntry.getQuota().getQuota();\n         }\n         if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n           ssQuota \u003d existingEntry.getQuota().getSpaceQuota();\n         }\n       }\n \n       RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n           .fileAndDirectoryCount(nsCount).quota(nsQuota)\n           .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n       existingEntry.setQuota(updatedQuota);\n     }\n \n     UpdateMountTableEntryRequest updateRequest \u003d\n         UpdateMountTableEntryRequest.newInstance(existingEntry);\n     UpdateMountTableEntryResponse updateResponse \u003d mountTable\n         .updateMountTableEntry(updateRequest);\n     return updateResponse.getStatus();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n      throws IOException {\n    // Get existing entry\n    MountTableManager mountTable \u003d client.getMountTableManager();\n    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n        .newInstance(mount);\n    GetMountTableEntriesResponse getResponse \u003d mountTable\n        .getMountTableEntries(getRequest);\n    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n    MountTable existingEntry \u003d null;\n    for (MountTable result : results) {\n      if (mount.equals(result.getSourcePath())) {\n        existingEntry \u003d result;\n        break;\n      }\n    }\n\n    if (existingEntry \u003d\u003d null) {\n      throw new IOException(mount + \" doesn\u0027t exist in mount table.\");\n    } else {\n      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n      // If nsQuota and ssQuota were reset, clear nsQuota and ssQuota.\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET \u0026\u0026\n          ssQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n        nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n        ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      } else {\n        // If nsQuota or ssQuota was unset, use the value in mount table.\n        if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n          nsQuota \u003d existingEntry.getQuota().getQuota();\n        }\n        if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n          ssQuota \u003d existingEntry.getQuota().getSpaceQuota();\n        }\n      }\n\n      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n      existingEntry.setQuota(updatedQuota);\n    }\n\n    UpdateMountTableEntryRequest updateRequest \u003d\n        UpdateMountTableEntryRequest.newInstance(existingEntry);\n    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n        .updateMountTableEntry(updateRequest);\n    return updateResponse.getStatus();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
      "extendedDetails": {}
    },
    "17a87977f29ced49724f561a68565217c8cb4e94": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13583. RBF: Router admin clrQuota is not synchronized with nameservice. Contributed by Dibyendu Karmakar.\n",
      "commitDate": "23/07/18 8:15 PM",
      "commitName": "17a87977f29ced49724f561a68565217c8cb4e94",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "27/04/18 4:28 PM",
      "commitNameOld": "484440602c5b69fbd8106010603c61ae051056dd",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 87.16,
      "commitsBetweenForRepo": 602,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n       throws IOException {\n     // Get existing entry\n     MountTableManager mountTable \u003d client.getMountTableManager();\n     GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n         .newInstance(mount);\n     GetMountTableEntriesResponse getResponse \u003d mountTable\n         .getMountTableEntries(getRequest);\n     List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n     MountTable existingEntry \u003d null;\n     for (MountTable result : results) {\n       if (mount.equals(result.getSourcePath())) {\n         existingEntry \u003d result;\n         break;\n       }\n     }\n \n     if (existingEntry \u003d\u003d null) {\n       throw new IOException(mount + \" doesn\u0027t exist in mount table.\");\n     } else {\n       long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n       long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n       // If nsQuota and ssQuota were unset, clear nsQuota and ssQuota.\n-      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n-          ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET \u0026\u0026\n+          ssQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n         nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n         ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n       } else {\n         // If nsQuota or ssQuota was unset, use the value in mount table.\n         if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n           nsQuota \u003d existingEntry.getQuota().getQuota();\n         }\n         if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n           ssQuota \u003d existingEntry.getQuota().getSpaceQuota();\n         }\n       }\n \n       RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n           .fileAndDirectoryCount(nsCount).quota(nsQuota)\n           .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n       existingEntry.setQuota(updatedQuota);\n     }\n \n     UpdateMountTableEntryRequest updateRequest \u003d\n         UpdateMountTableEntryRequest.newInstance(existingEntry);\n     UpdateMountTableEntryResponse updateResponse \u003d mountTable\n         .updateMountTableEntry(updateRequest);\n     return updateResponse.getStatus();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n      throws IOException {\n    // Get existing entry\n    MountTableManager mountTable \u003d client.getMountTableManager();\n    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n        .newInstance(mount);\n    GetMountTableEntriesResponse getResponse \u003d mountTable\n        .getMountTableEntries(getRequest);\n    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n    MountTable existingEntry \u003d null;\n    for (MountTable result : results) {\n      if (mount.equals(result.getSourcePath())) {\n        existingEntry \u003d result;\n        break;\n      }\n    }\n\n    if (existingEntry \u003d\u003d null) {\n      throw new IOException(mount + \" doesn\u0027t exist in mount table.\");\n    } else {\n      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n      // If nsQuota and ssQuota were unset, clear nsQuota and ssQuota.\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_RESET \u0026\u0026\n          ssQuota \u003d\u003d HdfsConstants.QUOTA_RESET) {\n        nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n        ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      } else {\n        // If nsQuota or ssQuota was unset, use the value in mount table.\n        if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n          nsQuota \u003d existingEntry.getQuota().getQuota();\n        }\n        if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n          ssQuota \u003d existingEntry.getQuota().getSpaceQuota();\n        }\n      }\n\n      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n      existingEntry.setQuota(updatedQuota);\n    }\n\n    UpdateMountTableEntryRequest updateRequest \u003d\n        UpdateMountTableEntryRequest.newInstance(existingEntry);\n    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n        .updateMountTableEntry(updateRequest);\n    return updateResponse.getStatus();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
      "extendedDetails": {}
    },
    "69fe4407ebd885fed69d9cf7f4dd17d3ba1acb60": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13307. RBF: Improve the use of setQuota command. Contributed by liuhongtong.\n",
      "commitDate": "20/03/18 7:51 PM",
      "commitName": "69fe4407ebd885fed69d9cf7f4dd17d3ba1acb60",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "19/03/18 10:13 PM",
      "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthorOld": "weiy",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n       throws IOException {\n     // Get existing entry\n     MountTableManager mountTable \u003d client.getMountTableManager();\n     GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n         .newInstance(mount);\n     GetMountTableEntriesResponse getResponse \u003d mountTable\n         .getMountTableEntries(getRequest);\n     List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n     MountTable existingEntry \u003d null;\n     for (MountTable result : results) {\n       if (mount.equals(result.getSourcePath())) {\n         existingEntry \u003d result;\n         break;\n       }\n     }\n \n     if (existingEntry \u003d\u003d null) {\n-      return false;\n+      throw new IOException(mount + \" doesn\u0027t exist in mount table.\");\n     } else {\n       long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n       long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n-      // If nsQuota or ssQuota was unset, reset corresponding usage\n-      // value to zero.\n-      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+      // If nsQuota and ssQuota were unset, clear nsQuota and ssQuota.\n+      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+          ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n-      }\n-\n-      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n         ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n+      } else {\n+        // If nsQuota or ssQuota was unset, use the value in mount table.\n+        if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+          nsQuota \u003d existingEntry.getQuota().getQuota();\n+        }\n+        if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+          ssQuota \u003d existingEntry.getQuota().getSpaceQuota();\n+        }\n       }\n \n       RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n           .fileAndDirectoryCount(nsCount).quota(nsQuota)\n           .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n       existingEntry.setQuota(updatedQuota);\n     }\n \n     UpdateMountTableEntryRequest updateRequest \u003d\n         UpdateMountTableEntryRequest.newInstance(existingEntry);\n     UpdateMountTableEntryResponse updateResponse \u003d mountTable\n         .updateMountTableEntry(updateRequest);\n     return updateResponse.getStatus();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n      throws IOException {\n    // Get existing entry\n    MountTableManager mountTable \u003d client.getMountTableManager();\n    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n        .newInstance(mount);\n    GetMountTableEntriesResponse getResponse \u003d mountTable\n        .getMountTableEntries(getRequest);\n    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n    MountTable existingEntry \u003d null;\n    for (MountTable result : results) {\n      if (mount.equals(result.getSourcePath())) {\n        existingEntry \u003d result;\n        break;\n      }\n    }\n\n    if (existingEntry \u003d\u003d null) {\n      throw new IOException(mount + \" doesn\u0027t exist in mount table.\");\n    } else {\n      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n      // If nsQuota and ssQuota were unset, clear nsQuota and ssQuota.\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n          ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n        ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      } else {\n        // If nsQuota or ssQuota was unset, use the value in mount table.\n        if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n          nsQuota \u003d existingEntry.getQuota().getQuota();\n        }\n        if (ssQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n          ssQuota \u003d existingEntry.getQuota().getSpaceQuota();\n        }\n      }\n\n      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n      existingEntry.setQuota(updatedQuota);\n    }\n\n    UpdateMountTableEntryRequest updateRequest \u003d\n        UpdateMountTableEntryRequest.newInstance(existingEntry);\n    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n        .updateMountTableEntry(updateRequest);\n    return updateResponse.getStatus();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n      throws IOException {\n    // Get existing entry\n    MountTableManager mountTable \u003d client.getMountTableManager();\n    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n        .newInstance(mount);\n    GetMountTableEntriesResponse getResponse \u003d mountTable\n        .getMountTableEntries(getRequest);\n    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n    MountTable existingEntry \u003d null;\n    for (MountTable result : results) {\n      if (mount.equals(result.getSourcePath())) {\n        existingEntry \u003d result;\n        break;\n      }\n    }\n\n    if (existingEntry \u003d\u003d null) {\n      return false;\n    } else {\n      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n      // If nsQuota or ssQuota was unset, reset corresponding usage\n      // value to zero.\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      }\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      }\n\n      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n      existingEntry.setQuota(updatedQuota);\n    }\n\n    UpdateMountTableEntryRequest updateRequest \u003d\n        UpdateMountTableEntryRequest.newInstance(existingEntry);\n    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n        .updateMountTableEntry(updateRequest);\n    return updateResponse.getStatus();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java"
      }
    },
    "9afb8025d6549f0ade0ae7d36f5e67cd20c500f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12972. RBF: Display mount table quota info in Web UI and admin command. Contributed by Yiqun Lin.\n",
      "commitDate": "12/01/18 9:16 PM",
      "commitName": "9afb8025d6549f0ade0ae7d36f5e67cd20c500f4",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "09/01/18 9:59 PM",
      "commitNameOld": "d98a2e6e2383f8b66def346409b0517aa32d298d",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n       throws IOException {\n     // Get existing entry\n     MountTableManager mountTable \u003d client.getMountTableManager();\n     GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n         .newInstance(mount);\n     GetMountTableEntriesResponse getResponse \u003d mountTable\n         .getMountTableEntries(getRequest);\n     List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n     MountTable existingEntry \u003d null;\n     for (MountTable result : results) {\n       if (mount.equals(result.getSourcePath())) {\n         existingEntry \u003d result;\n         break;\n       }\n     }\n \n     if (existingEntry \u003d\u003d null) {\n       return false;\n     } else {\n       long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n       long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n       // If nsQuota or ssQuota was unset, reset corresponding usage\n       // value to zero.\n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n-        nsCount \u003d 0;\n+        nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n       }\n \n       if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n-        ssCount \u003d 0;\n+        ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n       }\n \n       RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n           .fileAndDirectoryCount(nsCount).quota(nsQuota)\n           .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n       existingEntry.setQuota(updatedQuota);\n     }\n \n     UpdateMountTableEntryRequest updateRequest \u003d\n         UpdateMountTableEntryRequest.newInstance(existingEntry);\n     UpdateMountTableEntryResponse updateResponse \u003d mountTable\n         .updateMountTableEntry(updateRequest);\n     return updateResponse.getStatus();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n      throws IOException {\n    // Get existing entry\n    MountTableManager mountTable \u003d client.getMountTableManager();\n    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n        .newInstance(mount);\n    GetMountTableEntriesResponse getResponse \u003d mountTable\n        .getMountTableEntries(getRequest);\n    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n    MountTable existingEntry \u003d null;\n    for (MountTable result : results) {\n      if (mount.equals(result.getSourcePath())) {\n        existingEntry \u003d result;\n        break;\n      }\n    }\n\n    if (existingEntry \u003d\u003d null) {\n      return false;\n    } else {\n      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n      // If nsQuota or ssQuota was unset, reset corresponding usage\n      // value to zero.\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      }\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssCount \u003d RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT;\n      }\n\n      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n      existingEntry.setQuota(updatedQuota);\n    }\n\n    UpdateMountTableEntryRequest updateRequest \u003d\n        UpdateMountTableEntryRequest.newInstance(existingEntry);\n    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n        .updateMountTableEntry(updateRequest);\n    return updateResponse.getStatus();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
      "extendedDetails": {}
    },
    "d98a2e6e2383f8b66def346409b0517aa32d298d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12934. RBF: Federation supports global quota. Contributed by Yiqun Lin.\n",
      "commitDate": "09/01/18 9:59 PM",
      "commitName": "d98a2e6e2383f8b66def346409b0517aa32d298d",
      "commitAuthor": "Yiqun Lin",
      "diff": "@@ -0,0 +1,44 @@\n+  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n+      throws IOException {\n+    // Get existing entry\n+    MountTableManager mountTable \u003d client.getMountTableManager();\n+    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n+        .newInstance(mount);\n+    GetMountTableEntriesResponse getResponse \u003d mountTable\n+        .getMountTableEntries(getRequest);\n+    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n+    MountTable existingEntry \u003d null;\n+    for (MountTable result : results) {\n+      if (mount.equals(result.getSourcePath())) {\n+        existingEntry \u003d result;\n+        break;\n+      }\n+    }\n+\n+    if (existingEntry \u003d\u003d null) {\n+      return false;\n+    } else {\n+      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n+      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n+      // If nsQuota or ssQuota was unset, reset corresponding usage\n+      // value to zero.\n+      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+        nsCount \u003d 0;\n+      }\n+\n+      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n+        ssCount \u003d 0;\n+      }\n+\n+      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n+          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n+          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n+      existingEntry.setQuota(updatedQuota);\n+    }\n+\n+    UpdateMountTableEntryRequest updateRequest \u003d\n+        UpdateMountTableEntryRequest.newInstance(existingEntry);\n+    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n+        .updateMountTableEntry(updateRequest);\n+    return updateResponse.getStatus();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean updateQuota(String mount, long nsQuota, long ssQuota)\n      throws IOException {\n    // Get existing entry\n    MountTableManager mountTable \u003d client.getMountTableManager();\n    GetMountTableEntriesRequest getRequest \u003d GetMountTableEntriesRequest\n        .newInstance(mount);\n    GetMountTableEntriesResponse getResponse \u003d mountTable\n        .getMountTableEntries(getRequest);\n    List\u003cMountTable\u003e results \u003d getResponse.getEntries();\n    MountTable existingEntry \u003d null;\n    for (MountTable result : results) {\n      if (mount.equals(result.getSourcePath())) {\n        existingEntry \u003d result;\n        break;\n      }\n    }\n\n    if (existingEntry \u003d\u003d null) {\n      return false;\n    } else {\n      long nsCount \u003d existingEntry.getQuota().getFileAndDirectoryCount();\n      long ssCount \u003d existingEntry.getQuota().getSpaceConsumed();\n      // If nsQuota or ssQuota was unset, reset corresponding usage\n      // value to zero.\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        nsCount \u003d 0;\n      }\n\n      if (nsQuota \u003d\u003d HdfsConstants.QUOTA_DONT_SET) {\n        ssCount \u003d 0;\n      }\n\n      RouterQuotaUsage updatedQuota \u003d new RouterQuotaUsage.Builder()\n          .fileAndDirectoryCount(nsCount).quota(nsQuota)\n          .spaceConsumed(ssCount).spaceQuota(ssQuota).build();\n      existingEntry.setQuota(updatedQuota);\n    }\n\n    UpdateMountTableEntryRequest updateRequest \u003d\n        UpdateMountTableEntryRequest.newInstance(existingEntry);\n    UpdateMountTableEntryResponse updateResponse \u003d mountTable\n        .updateMountTableEntry(updateRequest);\n    return updateResponse.getStatus();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java"
    }
  }
}