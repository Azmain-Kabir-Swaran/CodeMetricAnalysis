{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "containerCompleted",
  "functionId": "containerCompleted___rmContainer-RMContainer__containerStatus-ContainerStatus__event-RMContainerEventType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 139,
  "functionEndLine": 186,
  "numCommitsSeen": 76,
  "timeTaken": 7263,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
    "1f4cdf10681b6903207a63fb5c306c9665ed9464",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "846a0cd678fba743220f28cef844ac9011a3f934",
    "646c6d6509f515b1373288869fb92807fa2ddc9b",
    "10468529a9b858bd945e7ecb063c9c1438efa474",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
    "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": "Ybodychange",
    "1f4cdf10681b6903207a63fb5c306c9665ed9464": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "846a0cd678fba743220f28cef844ac9011a3f934": "Ybodychange",
    "646c6d6509f515b1373288869fb92807fa2ddc9b": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Ymultichange(Ymodifierchange,Ybodychange)",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": "Ybodychange",
    "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     writeLock.lock();\n     try {\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of containers\n       if (liveContainers.remove(containerId) \u003d\u003d null) {\n         LOG.info(\"Additional complete request on completed container \" +\n             rmContainer.getContainerId());\n         return;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n-            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n-      }\n+      LOG.debug(\"Completed container: {} in state: {} event:{}\",\n+          rmContainer.getContainerId(), rmContainer.getState(), event);\n+\n \n       untrackContainerForPreemption(rmContainer);\n       if (containerStatus.getDiagnostics().\n           equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n         queue.getMetrics().preemptContainer();\n       }\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n           rmContainer.getQueueName(), null);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(\n           rmContainer.getNodeLabelExpression(),\n           getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n       getQueue().decUsedResource(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    writeLock.lock();\n    try {\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      LOG.debug(\"Completed container: {} in state: {} event:{}\",\n          rmContainer.getContainerId(), rmContainer.getState(), event);\n\n\n      untrackContainerForPreemption(rmContainer);\n      if (containerStatus.getDiagnostics().\n          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n        queue.getMetrics().preemptContainer();\n      }\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n          rmContainer.getQueueName(), null);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(\n          rmContainer.getNodeLabelExpression(),\n          getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n      getQueue().decUsedResource(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of containers\n       if (liveContainers.remove(containerId) \u003d\u003d null) {\n         LOG.info(\"Additional complete request on completed container \" +\n             rmContainer.getContainerId());\n         return;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       untrackContainerForPreemption(rmContainer);\n       if (containerStatus.getDiagnostics().\n           equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n         queue.getMetrics().preemptContainer();\n       }\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n           rmContainer.getQueueName(), null);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(\n           rmContainer.getNodeLabelExpression(),\n           getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n       getQueue().decUsedResource(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    writeLock.lock();\n    try {\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      untrackContainerForPreemption(rmContainer);\n      if (containerStatus.getDiagnostics().\n          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n        queue.getMetrics().preemptContainer();\n      }\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n          rmContainer.getQueueName(), null);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(\n          rmContainer.getNodeLabelExpression(),\n          getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n      getQueue().decUsedResource(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7225. Add queue and partition info to RM audit log. Contributed by Eric Payne\n",
      "commitDate": "01/11/18 2:22 PM",
      "commitName": "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "20/07/18 10:46 AM",
      "commitNameOld": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 104.15,
      "commitsBetweenForRepo": 957,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of containers\n       if (liveContainers.remove(containerId) \u003d\u003d null) {\n         LOG.info(\"Additional complete request on completed container \" +\n             rmContainer.getContainerId());\n         return;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       untrackContainerForPreemption(rmContainer);\n       if (containerStatus.getDiagnostics().\n           equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n         queue.getMetrics().preemptContainer();\n       }\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n-          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n+          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n+          rmContainer.getQueueName(), null);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(\n           rmContainer.getNodeLabelExpression(),\n           getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n       getQueue().decUsedResource(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      untrackContainerForPreemption(rmContainer);\n      if (containerStatus.getDiagnostics().\n          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n        queue.getMetrics().preemptContainer();\n      }\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n          rmContainer.getQueueName(), null);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(\n          rmContainer.getNodeLabelExpression(),\n          getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n      getQueue().decUsedResource(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "1f4cdf10681b6903207a63fb5c306c9665ed9464": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4090. Make Collections.sort() more efficient by caching resource usage. (Contributed by Yufei Gu, Shilong Zhang and Xianyin Xin)\n",
      "commitDate": "20/10/17 1:32 AM",
      "commitName": "1f4cdf10681b6903207a63fb5c306c9665ed9464",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "14/09/17 11:23 AM",
      "commitNameOld": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 35.59,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of containers\n       if (liveContainers.remove(containerId) \u003d\u003d null) {\n         LOG.info(\"Additional complete request on completed container \" +\n             rmContainer.getContainerId());\n         return;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       untrackContainerForPreemption(rmContainer);\n       if (containerStatus.getDiagnostics().\n           equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n         queue.getMetrics().preemptContainer();\n       }\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(\n           rmContainer.getNodeLabelExpression(),\n           getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n+      getQueue().decUsedResource(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      untrackContainerForPreemption(rmContainer);\n      if (containerStatus.getDiagnostics().\n          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n        queue.getMetrics().preemptContainer();\n      }\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(\n          rmContainer.getNodeLabelExpression(),\n          getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n      getQueue().decUsedResource(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "25/05/17 2:22 PM",
      "commitNameOld": "87590090c887829e874a7132be9cf8de061437d6",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 24.78,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of containers\n       if (liveContainers.remove(containerId) \u003d\u003d null) {\n         LOG.info(\"Additional complete request on completed container \" +\n             rmContainer.getContainerId());\n         return;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       untrackContainerForPreemption(rmContainer);\n       if (containerStatus.getDiagnostics().\n           equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n         queue.getMetrics().preemptContainer();\n       }\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n-      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+      queue.getMetrics().releaseResources(\n+          rmContainer.getNodeLabelExpression(),\n+          getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      untrackContainerForPreemption(rmContainer);\n      if (containerStatus.getDiagnostics().\n          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n        queue.getMetrics().preemptContainer();\n      }\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(\n          rmContainer.getNodeLabelExpression(),\n          getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "846a0cd678fba743220f28cef844ac9011a3f934": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1047. Expose # of pre-emptions as a queue counter (Contributed by Karthik Kambatla via Daniel Templeton)\n",
      "commitDate": "09/03/17 5:51 PM",
      "commitName": "846a0cd678fba743220f28cef844ac9011a3f934",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "22/02/17 3:46 PM",
      "commitNameOld": "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of containers\n       if (liveContainers.remove(containerId) \u003d\u003d null) {\n         LOG.info(\"Additional complete request on completed container \" +\n             rmContainer.getContainerId());\n         return;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       untrackContainerForPreemption(rmContainer);\n+      if (containerStatus.getDiagnostics().\n+          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n+        queue.getMetrics().preemptContainer();\n+      }\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      untrackContainerForPreemption(rmContainer);\n      if (containerStatus.getDiagnostics().\n          equals(SchedulerUtils.PREEMPTED_CONTAINER)) {\n        queue.getMetrics().preemptContainer();\n      }\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "646c6d6509f515b1373288869fb92807fa2ddc9b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3933. FairScheduler: Multiple calls to completedContainer are not safe. (Shiwei Guo and Miklos Szegedi via kasha)\n",
      "commitDate": "13/02/17 11:26 AM",
      "commitName": "646c6d6509f515b1373288869fb92807fa2ddc9b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/02/17 2:45 PM",
      "commitNameOld": "08f93978f3ec724b24a93d7ef538f158da75802f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.86,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,41 @@\n   void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n+      // Remove from the list of containers\n+      if (liveContainers.remove(containerId) \u003d\u003d null) {\n+        LOG.info(\"Additional complete request on completed container \" +\n+            rmContainer.getContainerId());\n+        return;\n+      }\n+\n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n-      // Remove from the list of containers\n-      liveContainers.remove(rmContainer.getContainerId());\n       untrackContainerForPreemption(rmContainer);\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of containers\n      if (liveContainers.remove(containerId) \u003d\u003d null) {\n        LOG.info(\"Additional complete request on completed container \" +\n            rmContainer.getContainerId());\n        return;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      untrackContainerForPreemption(rmContainer);\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "09/11/16 1:11 PM",
          "commitNameOld": "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 14.36,
          "commitsBetweenForRepo": 89,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,36 @@\n-  public void containerCompleted(RMContainer rmContainer,\n+  void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       // Remove from the list of containers\n       liveContainers.remove(rmContainer.getContainerId());\n+      untrackContainerForPreemption(rmContainer);\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n \n-      // remove from preemption map if it is completed\n-      preemptionMap.remove(rmContainer);\n-\n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      // Remove from the list of containers\n      liveContainers.remove(rmContainer.getContainerId());\n      untrackContainerForPreemption(rmContainer);\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "09/11/16 1:11 PM",
          "commitNameOld": "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 14.36,
          "commitsBetweenForRepo": 89,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,36 @@\n-  public void containerCompleted(RMContainer rmContainer,\n+  void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     try {\n       writeLock.lock();\n       Container container \u003d rmContainer.getContainer();\n       ContainerId containerId \u003d container.getId();\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n             + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n       }\n \n       // Remove from the list of containers\n       liveContainers.remove(rmContainer.getContainerId());\n+      untrackContainerForPreemption(rmContainer);\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n       this.attemptResourceUsage.decUsed(containerResource);\n \n-      // remove from preemption map if it is completed\n-      preemptionMap.remove(rmContainer);\n-\n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      // Remove from the list of containers\n      liveContainers.remove(rmContainer.getContainerId());\n      untrackContainerForPreemption(rmContainer);\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/16 10:43 AM",
          "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 44.64,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  synchronized public void containerCompleted(RMContainer rmContainer,\n+  public void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    \n-    Container container \u003d rmContainer.getContainer();\n-    ContainerId containerId \u003d container.getId();\n-    \n-    // Remove from the list of newly allocated containers if found\n-    newlyAllocatedContainers.remove(rmContainer);\n-    \n-    // Inform the container\n-    rmContainer.handle(\n-        new RMContainerFinishedEvent(\n-            containerId,\n-            containerStatus,\n-            event)\n-    );\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Completed container: \" + rmContainer.getContainerId() +\n-              \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+    try {\n+      writeLock.lock();\n+      Container container \u003d rmContainer.getContainer();\n+      ContainerId containerId \u003d container.getId();\n+\n+      // Remove from the list of newly allocated containers if found\n+      newlyAllocatedContainers.remove(rmContainer);\n+\n+      // Inform the container\n+      rmContainer.handle(\n+          new RMContainerFinishedEvent(containerId, containerStatus, event));\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n+            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+      }\n+\n+      // Remove from the list of containers\n+      liveContainers.remove(rmContainer.getContainerId());\n+\n+      Resource containerResource \u003d rmContainer.getContainer().getResource();\n+      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n+          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n+\n+      // Update usage metrics\n+      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+      this.attemptResourceUsage.decUsed(containerResource);\n+\n+      // remove from preemption map if it is completed\n+      preemptionMap.remove(rmContainer);\n+\n+      // Clear resource utilization metrics cache.\n+      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n+    } finally {\n+      writeLock.unlock();\n     }\n-\n-    // Remove from the list of containers\n-    liveContainers.remove(rmContainer.getContainerId());\n-\n-    Resource containerResource \u003d rmContainer.getContainer().getResource();\n-    RMAuditLogger.logSuccess(getUser(), \n-        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n-        getApplicationId(), containerId, containerResource);\n-    \n-    // Update usage metrics \n-    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    this.attemptResourceUsage.decUsed(containerResource);\n-\n-    // remove from preemption map if it is completed\n-    preemptionMap.remove(rmContainer);\n-\n-    // Clear resource utilization metrics cache.\n-    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      // Remove from the list of containers\n      liveContainers.remove(rmContainer.getContainerId());\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // remove from preemption map if it is completed\n      preemptionMap.remove(rmContainer);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/16 10:43 AM",
          "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 44.64,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  synchronized public void containerCompleted(RMContainer rmContainer,\n+  public void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    \n-    Container container \u003d rmContainer.getContainer();\n-    ContainerId containerId \u003d container.getId();\n-    \n-    // Remove from the list of newly allocated containers if found\n-    newlyAllocatedContainers.remove(rmContainer);\n-    \n-    // Inform the container\n-    rmContainer.handle(\n-        new RMContainerFinishedEvent(\n-            containerId,\n-            containerStatus,\n-            event)\n-    );\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Completed container: \" + rmContainer.getContainerId() +\n-              \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+    try {\n+      writeLock.lock();\n+      Container container \u003d rmContainer.getContainer();\n+      ContainerId containerId \u003d container.getId();\n+\n+      // Remove from the list of newly allocated containers if found\n+      newlyAllocatedContainers.remove(rmContainer);\n+\n+      // Inform the container\n+      rmContainer.handle(\n+          new RMContainerFinishedEvent(containerId, containerStatus, event));\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n+            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+      }\n+\n+      // Remove from the list of containers\n+      liveContainers.remove(rmContainer.getContainerId());\n+\n+      Resource containerResource \u003d rmContainer.getContainer().getResource();\n+      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n+          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n+\n+      // Update usage metrics\n+      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+      this.attemptResourceUsage.decUsed(containerResource);\n+\n+      // remove from preemption map if it is completed\n+      preemptionMap.remove(rmContainer);\n+\n+      // Clear resource utilization metrics cache.\n+      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n+    } finally {\n+      writeLock.unlock();\n     }\n-\n-    // Remove from the list of containers\n-    liveContainers.remove(rmContainer.getContainerId());\n-\n-    Resource containerResource \u003d rmContainer.getContainer().getResource();\n-    RMAuditLogger.logSuccess(getUser(), \n-        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n-        getApplicationId(), containerId, containerResource);\n-    \n-    // Update usage metrics \n-    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    this.attemptResourceUsage.decUsed(containerResource);\n-\n-    // remove from preemption map if it is completed\n-    preemptionMap.remove(rmContainer);\n-\n-    // Clear resource utilization metrics cache.\n-    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    try {\n      writeLock.lock();\n      Container container \u003d rmContainer.getContainer();\n      ContainerId containerId \u003d container.getId();\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Completed container: \" + rmContainer.getContainerId()\n            + \" in state: \" + rmContainer.getState() + \" event:\" + event);\n      }\n\n      // Remove from the list of containers\n      liveContainers.remove(rmContainer.getContainerId());\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      this.attemptResourceUsage.decUsed(containerResource);\n\n      // remove from preemption map if it is completed\n      preemptionMap.remove(rmContainer);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5003. Add container resource to RM audit log. Contributed by Nathan Roberts\n",
      "commitDate": "03/05/16 1:03 PM",
      "commitName": "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/04/16 5:10 AM",
      "commitNameOld": "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.33,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n     \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus,\n             event)\n     );\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Completed container: \" + rmContainer.getContainerId() +\n               \" in state: \" + rmContainer.getState() + \" event:\" + event);\n     }\n \n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n \n+    Resource containerResource \u003d rmContainer.getContainer().getResource();\n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n-        getApplicationId(), containerId);\n+        getApplicationId(), containerId, containerResource);\n     \n     // Update usage metrics \n-    Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     this.attemptResourceUsage.decUsed(containerResource);\n \n     // remove from preemption map if it is completed\n     preemptionMap.remove(rmContainer);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus,\n            event)\n    );\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Completed container: \" + rmContainer.getContainerId() +\n              \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    }\n\n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId, containerResource);\n    \n    // Update usage metrics \n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    this.attemptResourceUsage.decUsed(containerResource);\n\n    // remove from preemption map if it is completed\n    preemptionMap.remove(rmContainer);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1297. FairScheduler: Move some logs to debug and check if debug logging is enabled\n",
      "commitDate": "26/04/16 5:10 AM",
      "commitName": "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 42.62,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n     \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n-            containerStatus, \n+            containerStatus,\n             event)\n-        );\n-    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n-        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n-    \n+    );\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Completed container: \" + rmContainer.getContainerId() +\n+              \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+    }\n+\n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     this.attemptResourceUsage.decUsed(containerResource);\n \n     // remove from preemption map if it is completed\n     preemptionMap.remove(rmContainer);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus,\n            event)\n    );\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Completed container: \" + rmContainer.getContainerId() +\n              \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    }\n\n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    this.attemptResourceUsage.decUsed(containerResource);\n\n    // remove from preemption map if it is completed\n    preemptionMap.remove(rmContainer);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/02/15 5:24 PM",
      "commitNameOld": "b8a14efdf535d42bcafa58d380bd2c7f4d36f8cb",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 29.81,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n     \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n     \n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    Resources.subtractFrom(currentConsumption, containerResource);\n+    this.attemptResourceUsage.decUsed(containerResource);\n \n     // remove from preemption map if it is completed\n     preemptionMap.remove(rmContainer);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    this.attemptResourceUsage.decUsed(containerResource);\n\n    // remove from preemption map if it is completed\n    preemptionMap.remove(rmContainer);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/08/14 8:44 AM",
      "commitNameOld": "0097b15e2150f95745f64179a0ef4644e96128f5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 19.4,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n     \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n     \n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n \n     // remove from preemption map if it is completed\n     preemptionMap.remove(rmContainer);\n+\n+    // Clear resource utilization metrics cache.\n+    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n\n    // remove from preemption map if it is completed\n    preemptionMap.remove(rmContainer);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,34 @@\n+  synchronized public void containerCompleted(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n+    \n+    Container container \u003d rmContainer.getContainer();\n+    ContainerId containerId \u003d container.getId();\n+    \n+    // Remove from the list of newly allocated containers if found\n+    newlyAllocatedContainers.remove(rmContainer);\n+    \n+    // Inform the container\n+    rmContainer.handle(\n+        new RMContainerFinishedEvent(\n+            containerId,\n+            containerStatus, \n+            event)\n+        );\n+    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n+        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+    \n+    // Remove from the list of containers\n+    liveContainers.remove(rmContainer.getContainerId());\n+\n+    RMAuditLogger.logSuccess(getUser(), \n+        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n+        getApplicationId(), containerId);\n+    \n+    // Update usage metrics \n+    Resource containerResource \u003d rmContainer.getContainer().getResource();\n+    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+    Resources.subtractFrom(currentConsumption, containerResource);\n+\n+    // remove from preemption map if it is completed\n+    preemptionMap.remove(rmContainer);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n\n    // remove from preemption map if it is completed\n    preemptionMap.remove(rmContainer);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}