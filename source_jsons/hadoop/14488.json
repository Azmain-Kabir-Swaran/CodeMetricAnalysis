{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNodeHttpServer.java",
  "functionName": "start",
  "functionId": "start",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
  "functionStartLine": 58,
  "functionEndLine": 101,
  "numCommitsSeen": 11,
  "timeTaken": 2405,
  "changeHistory": [
    "c9b33514b8d11db44b5f95b4df43789ed45c47a7",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "87a6db45b70a1a07165e0773c4452d1327258bfa",
    "2214871d916fdcae62aa51afbb5fd571f2808745",
    "782191f1ba27e0ff0acf3c6cf8a88df00274d308",
    "2bea314456c328f5905ed0474bd4d2d4beae5437",
    "df801074c929d5414b92cc9fc0cc8a2794e02751",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "c9b33514b8d11db44b5f95b4df43789ed45c47a7": "Ybodychange",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "87a6db45b70a1a07165e0773c4452d1327258bfa": "Ybodychange",
    "2214871d916fdcae62aa51afbb5fd571f2808745": "Ybodychange",
    "782191f1ba27e0ff0acf3c6cf8a88df00274d308": "Ybodychange",
    "2bea314456c328f5905ed0474bd4d2d4beae5437": "Ybodychange",
    "df801074c929d5414b92cc9fc0cc8a2794e02751": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c9b33514b8d11db44b5f95b4df43789ed45c47a7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13462. Add BIND_HOST configuration for JournalNode\u0027s HTTP and RPC Servers. Contributed by Lukas Majercak.\n",
      "commitDate": "17/04/18 2:19 PM",
      "commitName": "c9b33514b8d11db44b5f95b4df43789ed45c47a7",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "07/04/14 11:55 AM",
      "commitNameOld": "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 1471.1,
      "commitsBetweenForRepo": 10813,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,44 @@\n   void start() throws IOException {\n-    final InetSocketAddress httpAddr \u003d getAddress(conf);\n+    final InetSocketAddress httpAddr \u003d bindAddress;\n \n     final String httpsAddrString \u003d conf.get(\n         DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n     InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n \n+    if (httpsAddr !\u003d null) {\n+      // If DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY exists then it overrides the\n+      // host name portion of DFS_NAMENODE_HTTPS_ADDRESS_KEY.\n+      final String bindHost \u003d\n+          conf.getTrimmed(DFSConfigKeys.DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY);\n+      if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()) {\n+        httpsAddr \u003d new InetSocketAddress(bindHost, httpsAddr.getPort());\n+      }\n+    }\n+\n     HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n         httpAddr, httpsAddr, \"journal\",\n         DFSConfigKeys.DFS_JOURNALNODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n \n     httpServer \u003d builder.build();\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n+\n+    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n+    int connIdx \u003d 0;\n+    if (policy.isHttpEnabled()) {\n+      httpAddress \u003d httpServer.getConnectorAddress(connIdx++);\n+      conf.set(DFSConfigKeys.DFS_JOURNALNODE_HTTP_ADDRESS_KEY,\n+          NetUtils.getHostPortString(httpAddress));\n+    }\n+\n+    if (policy.isHttpsEnabled()) {\n+      httpsAddress \u003d httpServer.getConnectorAddress(connIdx);\n+      conf.set(DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n+          NetUtils.getHostPortString(httpsAddress));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress httpAddr \u003d bindAddress;\n\n    final String httpsAddrString \u003d conf.get(\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n\n    if (httpsAddr !\u003d null) {\n      // If DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY exists then it overrides the\n      // host name portion of DFS_NAMENODE_HTTPS_ADDRESS_KEY.\n      final String bindHost \u003d\n          conf.getTrimmed(DFSConfigKeys.DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY);\n      if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()) {\n        httpsAddr \u003d new InetSocketAddress(bindHost, httpsAddr.getPort());\n      }\n    }\n\n    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n        httpAddr, httpsAddr, \"journal\",\n        DFSConfigKeys.DFS_JOURNALNODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n\n    httpServer \u003d builder.build();\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    int connIdx \u003d 0;\n    if (policy.isHttpEnabled()) {\n      httpAddress \u003d httpServer.getConnectorAddress(connIdx++);\n      conf.set(DFSConfigKeys.DFS_JOURNALNODE_HTTP_ADDRESS_KEY,\n          NetUtils.getHostPortString(httpAddress));\n    }\n\n    if (policy.isHttpsEnabled()) {\n      httpsAddress \u003d httpServer.getConnectorAddress(connIdx);\n      conf.set(DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n          NetUtils.getHostPortString(httpsAddress));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6181. Fix the wrong property names in NFS user guide. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1585563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/14 11:55 AM",
      "commitName": "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "24/03/14 4:32 PM",
      "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 13.81,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   void start() throws IOException {\n     final InetSocketAddress httpAddr \u003d getAddress(conf);\n \n     final String httpsAddrString \u003d conf.get(\n         DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n     InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n \n     HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n         httpAddr, httpsAddr, \"journal\",\n-        DFSConfigKeys.DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n+        DFSConfigKeys.DFS_JOURNALNODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n \n     httpServer \u003d builder.build();\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress httpAddr \u003d getAddress(conf);\n\n    final String httpsAddrString \u003d conf.get(\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n\n    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n        httpAddr, httpsAddr, \"journal\",\n        DFSConfigKeys.DFS_JOURNALNODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n\n    httpServer \u003d builder.build();\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/12/13 1:58 PM",
      "commitNameOld": "87a6db45b70a1a07165e0773c4452d1327258bfa",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 49.4,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   void start() throws IOException {\n     final InetSocketAddress httpAddr \u003d getAddress(conf);\n \n     final String httpsAddrString \u003d conf.get(\n         DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n     InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n \n-    HttpServer.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n+    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n         httpAddr, httpsAddr, \"journal\",\n         DFSConfigKeys.DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n \n     httpServer \u003d builder.build();\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress httpAddr \u003d getAddress(conf);\n\n    final String httpsAddrString \u003d conf.get(\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n\n    HttpServer2.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n        httpAddr, httpsAddr, \"journal\",\n        DFSConfigKeys.DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n\n    httpServer \u003d builder.build();\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "87a6db45b70a1a07165e0773c4452d1327258bfa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5629. Support HTTPS in JournalNode and SecondaryNameNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1549692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/13 1:58 PM",
      "commitName": "87a6db45b70a1a07165e0773c4452d1327258bfa",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/11/13 10:20 AM",
      "commitNameOld": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 12.15,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,20 @@\n   void start() throws IOException {\n-    final InetSocketAddress bindAddr \u003d getAddress(conf);\n+    final InetSocketAddress httpAddr \u003d getAddress(conf);\n \n-    // initialize the webserver for uploading/downloading files.\n-    LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n-        .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n-        bindAddr.getHostName()));\n+    final String httpsAddrString \u003d conf.get(\n+        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n+        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n+    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n \n-    int tmpInfoPort \u003d bindAddr.getPort();\n-    URI httpEndpoint;\n-    try {\n-      httpEndpoint \u003d new URI(\"http://\" + NetUtils.getHostPortString(bindAddr));\n-    } catch (URISyntaxException e) {\n-      throw new IOException(e);\n-    }\n+    HttpServer.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n+        httpAddr, httpsAddr, \"journal\",\n+        DFSConfigKeys.DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n+        DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n \n-    httpServer \u003d new HttpServer.Builder().setName(\"journal\")\n-        .addEndpoint(httpEndpoint)\n-        .setFindPort(tmpInfoPort \u003d\u003d 0).setConf(conf).setACL(\n-            new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n-        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n-        .setUsernameConfKey(\n-            DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY)\n-        .setKeytabConfKey(DFSUtil.getSpnegoKeytabKey(conf,\n-            DFS_JOURNALNODE_KEYTAB_FILE_KEY)).build();\n+    httpServer \u003d builder.build();\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n-\n-    // The web-server port can be ephemeral... ensure we have the correct info\n-    infoPort \u003d httpServer.getConnectorAddress(0).getPort();\n-\n-    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress httpAddr \u003d getAddress(conf);\n\n    final String httpsAddrString \u003d conf.get(\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT);\n    InetSocketAddress httpsAddr \u003d NetUtils.createSocketAddr(httpsAddrString);\n\n    HttpServer.Builder builder \u003d DFSUtil.httpServerTemplateForNNAndJN(conf,\n        httpAddr, httpsAddr, \"journal\",\n        DFSConfigKeys.DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n\n    httpServer \u003d builder.build();\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "2214871d916fdcae62aa51afbb5fd571f2808745": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5545. Allow specifying endpoints for listeners in HttpServer. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 10:20 AM",
      "commitName": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/08/13 3:12 AM",
      "commitNameOld": "782191f1ba27e0ff0acf3c6cf8a88df00274d308",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 98.34,
      "commitsBetweenForRepo": 607,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,36 @@\n   void start() throws IOException {\n     final InetSocketAddress bindAddr \u003d getAddress(conf);\n \n     // initialize the webserver for uploading/downloading files.\n     LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n         .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n         bindAddr.getHostName()));\n \n     int tmpInfoPort \u003d bindAddr.getPort();\n+    URI httpEndpoint;\n+    try {\n+      httpEndpoint \u003d new URI(\"http://\" + NetUtils.getHostPortString(bindAddr));\n+    } catch (URISyntaxException e) {\n+      throw new IOException(e);\n+    }\n+\n     httpServer \u003d new HttpServer.Builder().setName(\"journal\")\n-        .setBindAddress(bindAddr.getHostName()).setPort(tmpInfoPort)\n+        .addEndpoint(httpEndpoint)\n         .setFindPort(tmpInfoPort \u003d\u003d 0).setConf(conf).setACL(\n             new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n         .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n         .setUsernameConfKey(\n             DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY)\n         .setKeytabConfKey(DFSUtil.getSpnegoKeytabKey(conf,\n             DFS_JOURNALNODE_KEYTAB_FILE_KEY)).build();\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n \n     // The web-server port can be ephemeral... ensure we have the correct info\n-    infoPort \u003d httpServer.getPort();\n+    infoPort \u003d httpServer.getConnectorAddress(0).getPort();\n \n     LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress bindAddr \u003d getAddress(conf);\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n        .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n        bindAddr.getHostName()));\n\n    int tmpInfoPort \u003d bindAddr.getPort();\n    URI httpEndpoint;\n    try {\n      httpEndpoint \u003d new URI(\"http://\" + NetUtils.getHostPortString(bindAddr));\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n\n    httpServer \u003d new HttpServer.Builder().setName(\"journal\")\n        .addEndpoint(httpEndpoint)\n        .setFindPort(tmpInfoPort \u003d\u003d 0).setConf(conf).setACL(\n            new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(\n            DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY)\n        .setKeytabConfKey(DFSUtil.getSpnegoKeytabKey(conf,\n            DFS_JOURNALNODE_KEYTAB_FILE_KEY)).build();\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n\n    // The web-server port can be ephemeral... ensure we have the correct info\n    infoPort \u003d httpServer.getConnectorAddress(0).getPort();\n\n    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "782191f1ba27e0ff0acf3c6cf8a88df00274d308": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9784. Add a builder for HttpServer. (Junping Du via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516128 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 3:12 AM",
      "commitName": "782191f1ba27e0ff0acf3c6cf8a88df00274d308",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "13/08/13 5:19 PM",
      "commitNameOld": "2bea314456c328f5905ed0474bd4d2d4beae5437",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 7.41,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   void start() throws IOException {\n     final InetSocketAddress bindAddr \u003d getAddress(conf);\n \n     // initialize the webserver for uploading/downloading files.\n     LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n         .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n         bindAddr.getHostName()));\n \n     int tmpInfoPort \u003d bindAddr.getPort();\n-    httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n-        tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n-            .get(DFS_ADMIN, \" \"))) {\n-      {\n-        if (UserGroupInformation.isSecurityEnabled()) {\n-          initSpnego(conf, DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n-              DFSUtil.getSpnegoKeytabKey(conf, DFS_JOURNALNODE_KEYTAB_FILE_KEY));\n-        }\n-      }\n-    };\n+    httpServer \u003d new HttpServer.Builder().setName(\"journal\")\n+        .setBindAddress(bindAddr.getHostName()).setPort(tmpInfoPort)\n+        .setFindPort(tmpInfoPort \u003d\u003d 0).setConf(conf).setACL(\n+            new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n+        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n+        .setUsernameConfKey(\n+            DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY)\n+        .setKeytabConfKey(DFSUtil.getSpnegoKeytabKey(conf,\n+            DFS_JOURNALNODE_KEYTAB_FILE_KEY)).build();\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n \n     // The web-server port can be ephemeral... ensure we have the correct info\n     infoPort \u003d httpServer.getPort();\n \n     LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress bindAddr \u003d getAddress(conf);\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n        .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n        bindAddr.getHostName()));\n\n    int tmpInfoPort \u003d bindAddr.getPort();\n    httpServer \u003d new HttpServer.Builder().setName(\"journal\")\n        .setBindAddress(bindAddr.getHostName()).setPort(tmpInfoPort)\n        .setFindPort(tmpInfoPort \u003d\u003d 0).setConf(conf).setACL(\n            new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(\n            DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY)\n        .setKeytabConfKey(DFSUtil.getSpnegoKeytabKey(conf,\n            DFS_JOURNALNODE_KEYTAB_FILE_KEY)).build();\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n\n    // The web-server port can be ephemeral... ensure we have the correct info\n    infoPort \u003d httpServer.getPort();\n\n    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "2bea314456c328f5905ed0474bd4d2d4beae5437": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5091. Support for spnego keytab separate from the JournalNode keytab for secure HA. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1513700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/13 5:19 PM",
      "commitName": "2bea314456c328f5905ed0474bd4d2d4beae5437",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/09/12 2:42 PM",
      "commitNameOld": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 341.11,
      "commitsBetweenForRepo": 1953,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   void start() throws IOException {\n     final InetSocketAddress bindAddr \u003d getAddress(conf);\n \n     // initialize the webserver for uploading/downloading files.\n     LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n         .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n         bindAddr.getHostName()));\n \n     int tmpInfoPort \u003d bindAddr.getPort();\n     httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n         tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n             .get(DFS_ADMIN, \" \"))) {\n       {\n         if (UserGroupInformation.isSecurityEnabled()) {\n           initSpnego(conf, DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n-              DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n+              DFSUtil.getSpnegoKeytabKey(conf, DFS_JOURNALNODE_KEYTAB_FILE_KEY));\n         }\n       }\n     };\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n \n     // The web-server port can be ephemeral... ensure we have the correct info\n     infoPort \u003d httpServer.getPort();\n \n     LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress bindAddr \u003d getAddress(conf);\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n        .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n        bindAddr.getHostName()));\n\n    int tmpInfoPort \u003d bindAddr.getPort();\n    httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n        tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n            .get(DFS_ADMIN, \" \"))) {\n      {\n        if (UserGroupInformation.isSecurityEnabled()) {\n          initSpnego(conf, DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n              DFSUtil.getSpnegoKeytabKey(conf, DFS_JOURNALNODE_KEYTAB_FILE_KEY));\n        }\n      }\n    };\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n\n    // The web-server port can be ephemeral... ensure we have the correct info\n    infoPort \u003d httpServer.getPort();\n\n    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "df801074c929d5414b92cc9fc0cc8a2794e02751": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 2:42 PM",
      "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "25/07/12 2:47 PM",
      "commitNameOld": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 43.0,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   void start() throws IOException {\n     final InetSocketAddress bindAddr \u003d getAddress(conf);\n \n     // initialize the webserver for uploading/downloading files.\n-    LOG.info(\"Starting web server as: \"\n-        + UserGroupInformation.getCurrentUser().getUserName());\n+    LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n+        .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n+        bindAddr.getHostName()));\n \n     int tmpInfoPort \u003d bindAddr.getPort();\n     httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n         tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n             .get(DFS_ADMIN, \" \"))) {\n       {\n         if (UserGroupInformation.isSecurityEnabled()) {\n-          initSpnego(conf, DFS_JOURNALNODE_USER_NAME_KEY,\n+          initSpnego(conf, DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n               DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n         }\n       }\n     };\n     httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n     httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n     httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n         GetJournalEditServlet.class, true);\n     httpServer.start();\n \n     // The web-server port can be ephemeral... ensure we have the correct info\n     infoPort \u003d httpServer.getPort();\n \n     LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress bindAddr \u003d getAddress(conf);\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"+ SecurityUtil.getServerPrincipal(conf\n        .get(DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY),\n        bindAddr.getHostName()));\n\n    int tmpInfoPort \u003d bindAddr.getPort();\n    httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n        tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n            .get(DFS_ADMIN, \" \"))) {\n      {\n        if (UserGroupInformation.isSecurityEnabled()) {\n          initSpnego(conf, DFS_JOURNALNODE_INTERNAL_SPNEGO_USER_NAME_KEY,\n              DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n        }\n      }\n    };\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n\n    // The web-server port can be ephemeral... ensure we have the correct info\n    infoPort \u003d httpServer.getPort();\n\n    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+  void start() throws IOException {\n+    final InetSocketAddress bindAddr \u003d getAddress(conf);\n+\n+    // initialize the webserver for uploading/downloading files.\n+    LOG.info(\"Starting web server as: \"\n+        + UserGroupInformation.getCurrentUser().getUserName());\n+\n+    int tmpInfoPort \u003d bindAddr.getPort();\n+    httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n+        tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n+            .get(DFS_ADMIN, \" \"))) {\n+      {\n+        if (UserGroupInformation.isSecurityEnabled()) {\n+          initSpnego(conf, DFS_JOURNALNODE_USER_NAME_KEY,\n+              DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n+        }\n+      }\n+    };\n+    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n+    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n+    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n+        GetJournalEditServlet.class, true);\n+    httpServer.start();\n+\n+    // The web-server port can be ephemeral... ensure we have the correct info\n+    infoPort \u003d httpServer.getPort();\n+\n+    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void start() throws IOException {\n    final InetSocketAddress bindAddr \u003d getAddress(conf);\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"\n        + UserGroupInformation.getCurrentUser().getUserName());\n\n    int tmpInfoPort \u003d bindAddr.getPort();\n    httpServer \u003d new HttpServer(\"journal\", bindAddr.getHostName(),\n        tmpInfoPort, tmpInfoPort \u003d\u003d 0, conf, new AccessControlList(conf\n            .get(DFS_ADMIN, \" \"))) {\n      {\n        if (UserGroupInformation.isSecurityEnabled()) {\n          initSpnego(conf, DFS_JOURNALNODE_USER_NAME_KEY,\n              DFS_JOURNALNODE_KEYTAB_FILE_KEY);\n        }\n      }\n    };\n    httpServer.setAttribute(JN_ATTRIBUTE_KEY, localJournalNode);\n    httpServer.setAttribute(JspHelper.CURRENT_CONF, conf);\n    httpServer.addInternalServlet(\"getJournal\", \"/getJournal\",\n        GetJournalEditServlet.class, true);\n    httpServer.start();\n\n    // The web-server port can be ephemeral... ensure we have the correct info\n    infoPort \u003d httpServer.getPort();\n\n    LOG.info(\"Journal Web-server up at: \" + bindAddr + \":\" + infoPort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeHttpServer.java"
    }
  }
}