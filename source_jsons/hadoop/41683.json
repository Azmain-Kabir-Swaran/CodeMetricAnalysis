{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationPlacementAllocatorFactory.java",
  "functionName": "getAppPlacementAllocator",
  "functionId": "getAppPlacementAllocator___appPlacementAllocatorName-String__appSchedulingInfo-AppSchedulingInfo__schedulerRequestKey-SchedulerRequestKey__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementAllocatorFactory.java",
  "functionStartLine": 43,
  "functionEndLine": 67,
  "numCommitsSeen": 2,
  "timeTaken": 2640,
  "changeHistory": [
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "a81144daa012e13590725f67f53e35ef84a6f1ec"
  ],
  "changeHistoryShort": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "a81144daa012e13590725f67f53e35ef84a6f1ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8779a35742085fadddccc21342b55d4f17fae5c2",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,25 @@\n   public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n-      String appPlacementAllocatorName) {\n+      String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo,\n+      SchedulerRequestKey schedulerRequestKey, RMContext rmContext) {\n     Class\u003c?\u003e policyClass;\n     try {\n       if (appPlacementAllocatorName \u003d\u003d null) {\n         policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n       } else {\n         policyClass \u003d Class.forName(appPlacementAllocatorName);\n       }\n     } catch (ClassNotFoundException e) {\n       policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n     }\n \n     if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n       policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n         .newInstance(policyClass, null);\n+    placementAllocatorInstance.initialize(appSchedulingInfo,\n+        schedulerRequestKey, rmContext);\n     return placementAllocatorInstance;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n      String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo,\n      SchedulerRequestKey schedulerRequestKey, RMContext rmContext) {\n    Class\u003c?\u003e policyClass;\n    try {\n      if (appPlacementAllocatorName \u003d\u003d null) {\n        policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n      } else {\n        policyClass \u003d Class.forName(appPlacementAllocatorName);\n      }\n    } catch (ClassNotFoundException e) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n        .newInstance(policyClass, null);\n    placementAllocatorInstance.initialize(appSchedulingInfo,\n        schedulerRequestKey, rmContext);\n    return placementAllocatorInstance;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementAllocatorFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementFactory.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementAllocatorFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8779a35742085fadddccc21342b55d4f17fae5c2",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,25 @@\n   public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n-      String appPlacementAllocatorName) {\n+      String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo,\n+      SchedulerRequestKey schedulerRequestKey, RMContext rmContext) {\n     Class\u003c?\u003e policyClass;\n     try {\n       if (appPlacementAllocatorName \u003d\u003d null) {\n         policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n       } else {\n         policyClass \u003d Class.forName(appPlacementAllocatorName);\n       }\n     } catch (ClassNotFoundException e) {\n       policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n     }\n \n     if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n       policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n         .newInstance(policyClass, null);\n+    placementAllocatorInstance.initialize(appSchedulingInfo,\n+        schedulerRequestKey, rmContext);\n     return placementAllocatorInstance;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n      String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo,\n      SchedulerRequestKey schedulerRequestKey, RMContext rmContext) {\n    Class\u003c?\u003e policyClass;\n    try {\n      if (appPlacementAllocatorName \u003d\u003d null) {\n        policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n      } else {\n        policyClass \u003d Class.forName(appPlacementAllocatorName);\n      }\n    } catch (ClassNotFoundException e) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n        .newInstance(policyClass, null);\n    placementAllocatorInstance.initialize(appSchedulingInfo,\n        schedulerRequestKey, rmContext);\n    return placementAllocatorInstance;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementAllocatorFactory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8779a35742085fadddccc21342b55d4f17fae5c2",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,25 @@\n   public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n-      String appPlacementAllocatorName) {\n+      String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo,\n+      SchedulerRequestKey schedulerRequestKey, RMContext rmContext) {\n     Class\u003c?\u003e policyClass;\n     try {\n       if (appPlacementAllocatorName \u003d\u003d null) {\n         policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n       } else {\n         policyClass \u003d Class.forName(appPlacementAllocatorName);\n       }\n     } catch (ClassNotFoundException e) {\n       policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n     }\n \n     if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n       policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n         .newInstance(policyClass, null);\n+    placementAllocatorInstance.initialize(appSchedulingInfo,\n+        schedulerRequestKey, rmContext);\n     return placementAllocatorInstance;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n      String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo,\n      SchedulerRequestKey schedulerRequestKey, RMContext rmContext) {\n    Class\u003c?\u003e policyClass;\n    try {\n      if (appPlacementAllocatorName \u003d\u003d null) {\n        policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n      } else {\n        policyClass \u003d Class.forName(appPlacementAllocatorName);\n      }\n    } catch (ClassNotFoundException e) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n        .newInstance(policyClass, null);\n    placementAllocatorInstance.initialize(appSchedulingInfo,\n        schedulerRequestKey, rmContext);\n    return placementAllocatorInstance;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementAllocatorFactory.java",
          "extendedDetails": {
            "oldValue": "[appPlacementAllocatorName-String]",
            "newValue": "[appPlacementAllocatorName-String, appSchedulingInfo-AppSchedulingInfo, schedulerRequestKey-SchedulerRequestKey, rmContext-RMContext]"
          }
        }
      ]
    },
    "a81144daa012e13590725f67f53e35ef84a6f1ec": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7666. Introduce scheduler specific environment variable support in ApplicationSubmissionContext for better scheduling placement configurations. (Sunil G via wangda)\n\nChange-Id: I0fd826490f5160d47d42af2a9ac0bd8ec4e959dc\n",
      "commitDate": "05/01/18 3:12 PM",
      "commitName": "a81144daa012e13590725f67f53e35ef84a6f1ec",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,22 @@\n+  public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n+      String appPlacementAllocatorName) {\n+    Class\u003c?\u003e policyClass;\n+    try {\n+      if (appPlacementAllocatorName \u003d\u003d null) {\n+        policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n+      } else {\n+        policyClass \u003d Class.forName(appPlacementAllocatorName);\n+      }\n+    } catch (ClassNotFoundException e) {\n+      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n+    }\n+\n+    if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n+      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n+        .newInstance(policyClass, null);\n+    return placementAllocatorInstance;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AppPlacementAllocator\u003cSchedulerNode\u003e getAppPlacementAllocator(\n      String appPlacementAllocatorName) {\n    Class\u003c?\u003e policyClass;\n    try {\n      if (appPlacementAllocatorName \u003d\u003d null) {\n        policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n      } else {\n        policyClass \u003d Class.forName(appPlacementAllocatorName);\n      }\n    } catch (ClassNotFoundException e) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    if (!AppPlacementAllocator.class.isAssignableFrom(policyClass)) {\n      policyClass \u003d ApplicationSchedulingConfig.DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    AppPlacementAllocator\u003cSchedulerNode\u003e placementAllocatorInstance \u003d (AppPlacementAllocator\u003cSchedulerNode\u003e) ReflectionUtils\n        .newInstance(policyClass, null);\n    return placementAllocatorInstance;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ApplicationPlacementFactory.java"
    }
  }
}