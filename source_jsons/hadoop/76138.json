{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2OutputStream.java",
  "functionName": "mainQSort3",
  "functionId": "mainQSort3___dataShadow-Data(modifiers-final)__loSt-int(modifiers-final)__hiSt-int(modifiers-final)__dSt-int(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
  "functionStartLine": 1632,
  "functionEndLine": 1734,
  "numCommitsSeen": 7,
  "timeTaken": 1071,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void mainQSort3(final Data dataShadow, final int loSt,\n      final int hiSt, final int dSt) {\n    final int[] stack_ll \u003d dataShadow.stack_ll;\n    final int[] stack_hh \u003d dataShadow.stack_hh;\n    final int[] stack_dd \u003d dataShadow.stack_dd;\n    final int[] fmap \u003d dataShadow.fmap;\n    final byte[] block \u003d dataShadow.block;\n\n    stack_ll[0] \u003d loSt;\n    stack_hh[0] \u003d hiSt;\n    stack_dd[0] \u003d dSt;\n\n    for (int sp \u003d 1; --sp \u003e\u003d 0;) {\n      final int lo \u003d stack_ll[sp];\n      final int hi \u003d stack_hh[sp];\n      final int d \u003d stack_dd[sp];\n\n      if ((hi - lo \u003c SMALL_THRESH) || (d \u003e DEPTH_THRESH)) {\n        if (mainSimpleSort(dataShadow, lo, hi, d)) {\n          return;\n        }\n      } else {\n        final int d1 \u003d d + 1;\n        final int med \u003d med3(block[fmap[lo] + d1],\n            block[fmap[hi] + d1], block[fmap[(lo + hi) \u003e\u003e\u003e 1] + d1]) \u0026 0xff;\n\n        int unLo \u003d lo;\n        int unHi \u003d hi;\n        int ltLo \u003d lo;\n        int gtHi \u003d hi;\n\n        while (true) {\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unLo] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unLo];\n              fmap[unLo++] \u003d fmap[ltLo];\n              fmap[ltLo++] \u003d temp;\n            } else if (n \u003c 0) {\n              unLo++;\n            } else {\n              break;\n            }\n          }\n\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unHi] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unHi];\n              fmap[unHi--] \u003d fmap[gtHi];\n              fmap[gtHi--] \u003d temp;\n            } else if (n \u003e 0) {\n              unHi--;\n            } else {\n              break;\n            }\n          }\n\n          if (unLo \u003c\u003d unHi) {\n            final int temp \u003d fmap[unLo];\n            fmap[unLo++] \u003d fmap[unHi];\n            fmap[unHi--] \u003d temp;\n          } else {\n            break;\n          }\n        }\n\n        if (gtHi \u003c ltLo) {\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d1;\n          sp++;\n        } else {\n          int n \u003d ((ltLo - lo) \u003c (unLo - ltLo)) ? (ltLo - lo)\n              : (unLo - ltLo);\n          vswap(fmap, lo, unLo - n, n);\n          int m \u003d ((hi - gtHi) \u003c (gtHi - unHi)) ? (hi - gtHi)\n              : (gtHi - unHi);\n          vswap(fmap, unLo, hi - m + 1, m);\n\n          n \u003d lo + unLo - ltLo - 1;\n          m \u003d hi - (gtHi - unHi) + 1;\n\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d n;\n          stack_dd[sp] \u003d d;\n          sp++;\n\n          stack_ll[sp] \u003d n + 1;\n          stack_hh[sp] \u003d m - 1;\n          stack_dd[sp] \u003d d1;\n          sp++;\n\n          stack_ll[sp] \u003d m;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d;\n          sp++;\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void mainQSort3(final Data dataShadow, final int loSt,\n      final int hiSt, final int dSt) {\n    final int[] stack_ll \u003d dataShadow.stack_ll;\n    final int[] stack_hh \u003d dataShadow.stack_hh;\n    final int[] stack_dd \u003d dataShadow.stack_dd;\n    final int[] fmap \u003d dataShadow.fmap;\n    final byte[] block \u003d dataShadow.block;\n\n    stack_ll[0] \u003d loSt;\n    stack_hh[0] \u003d hiSt;\n    stack_dd[0] \u003d dSt;\n\n    for (int sp \u003d 1; --sp \u003e\u003d 0;) {\n      final int lo \u003d stack_ll[sp];\n      final int hi \u003d stack_hh[sp];\n      final int d \u003d stack_dd[sp];\n\n      if ((hi - lo \u003c SMALL_THRESH) || (d \u003e DEPTH_THRESH)) {\n        if (mainSimpleSort(dataShadow, lo, hi, d)) {\n          return;\n        }\n      } else {\n        final int d1 \u003d d + 1;\n        final int med \u003d med3(block[fmap[lo] + d1],\n            block[fmap[hi] + d1], block[fmap[(lo + hi) \u003e\u003e\u003e 1] + d1]) \u0026 0xff;\n\n        int unLo \u003d lo;\n        int unHi \u003d hi;\n        int ltLo \u003d lo;\n        int gtHi \u003d hi;\n\n        while (true) {\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unLo] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unLo];\n              fmap[unLo++] \u003d fmap[ltLo];\n              fmap[ltLo++] \u003d temp;\n            } else if (n \u003c 0) {\n              unLo++;\n            } else {\n              break;\n            }\n          }\n\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unHi] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unHi];\n              fmap[unHi--] \u003d fmap[gtHi];\n              fmap[gtHi--] \u003d temp;\n            } else if (n \u003e 0) {\n              unHi--;\n            } else {\n              break;\n            }\n          }\n\n          if (unLo \u003c\u003d unHi) {\n            final int temp \u003d fmap[unLo];\n            fmap[unLo++] \u003d fmap[unHi];\n            fmap[unHi--] \u003d temp;\n          } else {\n            break;\n          }\n        }\n\n        if (gtHi \u003c ltLo) {\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d1;\n          sp++;\n        } else {\n          int n \u003d ((ltLo - lo) \u003c (unLo - ltLo)) ? (ltLo - lo)\n              : (unLo - ltLo);\n          vswap(fmap, lo, unLo - n, n);\n          int m \u003d ((hi - gtHi) \u003c (gtHi - unHi)) ? (hi - gtHi)\n              : (gtHi - unHi);\n          vswap(fmap, unLo, hi - m + 1, m);\n\n          n \u003d lo + unLo - ltLo - 1;\n          m \u003d hi - (gtHi - unHi) + 1;\n\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d n;\n          stack_dd[sp] \u003d d;\n          sp++;\n\n          stack_ll[sp] \u003d n + 1;\n          stack_hh[sp] \u003d m - 1;\n          stack_dd[sp] \u003d d1;\n          sp++;\n\n          stack_ll[sp] \u003d m;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d;\n          sp++;\n        }\n      }\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void mainQSort3(final Data dataShadow, final int loSt,\n      final int hiSt, final int dSt) {\n    final int[] stack_ll \u003d dataShadow.stack_ll;\n    final int[] stack_hh \u003d dataShadow.stack_hh;\n    final int[] stack_dd \u003d dataShadow.stack_dd;\n    final int[] fmap \u003d dataShadow.fmap;\n    final byte[] block \u003d dataShadow.block;\n\n    stack_ll[0] \u003d loSt;\n    stack_hh[0] \u003d hiSt;\n    stack_dd[0] \u003d dSt;\n\n    for (int sp \u003d 1; --sp \u003e\u003d 0;) {\n      final int lo \u003d stack_ll[sp];\n      final int hi \u003d stack_hh[sp];\n      final int d \u003d stack_dd[sp];\n\n      if ((hi - lo \u003c SMALL_THRESH) || (d \u003e DEPTH_THRESH)) {\n        if (mainSimpleSort(dataShadow, lo, hi, d)) {\n          return;\n        }\n      } else {\n        final int d1 \u003d d + 1;\n        final int med \u003d med3(block[fmap[lo] + d1],\n            block[fmap[hi] + d1], block[fmap[(lo + hi) \u003e\u003e\u003e 1] + d1]) \u0026 0xff;\n\n        int unLo \u003d lo;\n        int unHi \u003d hi;\n        int ltLo \u003d lo;\n        int gtHi \u003d hi;\n\n        while (true) {\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unLo] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unLo];\n              fmap[unLo++] \u003d fmap[ltLo];\n              fmap[ltLo++] \u003d temp;\n            } else if (n \u003c 0) {\n              unLo++;\n            } else {\n              break;\n            }\n          }\n\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unHi] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unHi];\n              fmap[unHi--] \u003d fmap[gtHi];\n              fmap[gtHi--] \u003d temp;\n            } else if (n \u003e 0) {\n              unHi--;\n            } else {\n              break;\n            }\n          }\n\n          if (unLo \u003c\u003d unHi) {\n            final int temp \u003d fmap[unLo];\n            fmap[unLo++] \u003d fmap[unHi];\n            fmap[unHi--] \u003d temp;\n          } else {\n            break;\n          }\n        }\n\n        if (gtHi \u003c ltLo) {\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d1;\n          sp++;\n        } else {\n          int n \u003d ((ltLo - lo) \u003c (unLo - ltLo)) ? (ltLo - lo)\n              : (unLo - ltLo);\n          vswap(fmap, lo, unLo - n, n);\n          int m \u003d ((hi - gtHi) \u003c (gtHi - unHi)) ? (hi - gtHi)\n              : (gtHi - unHi);\n          vswap(fmap, unLo, hi - m + 1, m);\n\n          n \u003d lo + unLo - ltLo - 1;\n          m \u003d hi - (gtHi - unHi) + 1;\n\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d n;\n          stack_dd[sp] \u003d d;\n          sp++;\n\n          stack_ll[sp] \u003d n + 1;\n          stack_hh[sp] \u003d m - 1;\n          stack_dd[sp] \u003d d1;\n          sp++;\n\n          stack_ll[sp] \u003d m;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d;\n          sp++;\n        }\n      }\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,103 @@\n+  private void mainQSort3(final Data dataShadow, final int loSt,\n+      final int hiSt, final int dSt) {\n+    final int[] stack_ll \u003d dataShadow.stack_ll;\n+    final int[] stack_hh \u003d dataShadow.stack_hh;\n+    final int[] stack_dd \u003d dataShadow.stack_dd;\n+    final int[] fmap \u003d dataShadow.fmap;\n+    final byte[] block \u003d dataShadow.block;\n+\n+    stack_ll[0] \u003d loSt;\n+    stack_hh[0] \u003d hiSt;\n+    stack_dd[0] \u003d dSt;\n+\n+    for (int sp \u003d 1; --sp \u003e\u003d 0;) {\n+      final int lo \u003d stack_ll[sp];\n+      final int hi \u003d stack_hh[sp];\n+      final int d \u003d stack_dd[sp];\n+\n+      if ((hi - lo \u003c SMALL_THRESH) || (d \u003e DEPTH_THRESH)) {\n+        if (mainSimpleSort(dataShadow, lo, hi, d)) {\n+          return;\n+        }\n+      } else {\n+        final int d1 \u003d d + 1;\n+        final int med \u003d med3(block[fmap[lo] + d1],\n+            block[fmap[hi] + d1], block[fmap[(lo + hi) \u003e\u003e\u003e 1] + d1]) \u0026 0xff;\n+\n+        int unLo \u003d lo;\n+        int unHi \u003d hi;\n+        int ltLo \u003d lo;\n+        int gtHi \u003d hi;\n+\n+        while (true) {\n+          while (unLo \u003c\u003d unHi) {\n+            final int n \u003d ((int) block[fmap[unLo] + d1] \u0026 0xff)\n+                - med;\n+            if (n \u003d\u003d 0) {\n+              final int temp \u003d fmap[unLo];\n+              fmap[unLo++] \u003d fmap[ltLo];\n+              fmap[ltLo++] \u003d temp;\n+            } else if (n \u003c 0) {\n+              unLo++;\n+            } else {\n+              break;\n+            }\n+          }\n+\n+          while (unLo \u003c\u003d unHi) {\n+            final int n \u003d ((int) block[fmap[unHi] + d1] \u0026 0xff)\n+                - med;\n+            if (n \u003d\u003d 0) {\n+              final int temp \u003d fmap[unHi];\n+              fmap[unHi--] \u003d fmap[gtHi];\n+              fmap[gtHi--] \u003d temp;\n+            } else if (n \u003e 0) {\n+              unHi--;\n+            } else {\n+              break;\n+            }\n+          }\n+\n+          if (unLo \u003c\u003d unHi) {\n+            final int temp \u003d fmap[unLo];\n+            fmap[unLo++] \u003d fmap[unHi];\n+            fmap[unHi--] \u003d temp;\n+          } else {\n+            break;\n+          }\n+        }\n+\n+        if (gtHi \u003c ltLo) {\n+          stack_ll[sp] \u003d lo;\n+          stack_hh[sp] \u003d hi;\n+          stack_dd[sp] \u003d d1;\n+          sp++;\n+        } else {\n+          int n \u003d ((ltLo - lo) \u003c (unLo - ltLo)) ? (ltLo - lo)\n+              : (unLo - ltLo);\n+          vswap(fmap, lo, unLo - n, n);\n+          int m \u003d ((hi - gtHi) \u003c (gtHi - unHi)) ? (hi - gtHi)\n+              : (gtHi - unHi);\n+          vswap(fmap, unLo, hi - m + 1, m);\n+\n+          n \u003d lo + unLo - ltLo - 1;\n+          m \u003d hi - (gtHi - unHi) + 1;\n+\n+          stack_ll[sp] \u003d lo;\n+          stack_hh[sp] \u003d n;\n+          stack_dd[sp] \u003d d;\n+          sp++;\n+\n+          stack_ll[sp] \u003d n + 1;\n+          stack_hh[sp] \u003d m - 1;\n+          stack_dd[sp] \u003d d1;\n+          sp++;\n+\n+          stack_ll[sp] \u003d m;\n+          stack_hh[sp] \u003d hi;\n+          stack_dd[sp] \u003d d;\n+          sp++;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void mainQSort3(final Data dataShadow, final int loSt,\n      final int hiSt, final int dSt) {\n    final int[] stack_ll \u003d dataShadow.stack_ll;\n    final int[] stack_hh \u003d dataShadow.stack_hh;\n    final int[] stack_dd \u003d dataShadow.stack_dd;\n    final int[] fmap \u003d dataShadow.fmap;\n    final byte[] block \u003d dataShadow.block;\n\n    stack_ll[0] \u003d loSt;\n    stack_hh[0] \u003d hiSt;\n    stack_dd[0] \u003d dSt;\n\n    for (int sp \u003d 1; --sp \u003e\u003d 0;) {\n      final int lo \u003d stack_ll[sp];\n      final int hi \u003d stack_hh[sp];\n      final int d \u003d stack_dd[sp];\n\n      if ((hi - lo \u003c SMALL_THRESH) || (d \u003e DEPTH_THRESH)) {\n        if (mainSimpleSort(dataShadow, lo, hi, d)) {\n          return;\n        }\n      } else {\n        final int d1 \u003d d + 1;\n        final int med \u003d med3(block[fmap[lo] + d1],\n            block[fmap[hi] + d1], block[fmap[(lo + hi) \u003e\u003e\u003e 1] + d1]) \u0026 0xff;\n\n        int unLo \u003d lo;\n        int unHi \u003d hi;\n        int ltLo \u003d lo;\n        int gtHi \u003d hi;\n\n        while (true) {\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unLo] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unLo];\n              fmap[unLo++] \u003d fmap[ltLo];\n              fmap[ltLo++] \u003d temp;\n            } else if (n \u003c 0) {\n              unLo++;\n            } else {\n              break;\n            }\n          }\n\n          while (unLo \u003c\u003d unHi) {\n            final int n \u003d ((int) block[fmap[unHi] + d1] \u0026 0xff)\n                - med;\n            if (n \u003d\u003d 0) {\n              final int temp \u003d fmap[unHi];\n              fmap[unHi--] \u003d fmap[gtHi];\n              fmap[gtHi--] \u003d temp;\n            } else if (n \u003e 0) {\n              unHi--;\n            } else {\n              break;\n            }\n          }\n\n          if (unLo \u003c\u003d unHi) {\n            final int temp \u003d fmap[unLo];\n            fmap[unLo++] \u003d fmap[unHi];\n            fmap[unHi--] \u003d temp;\n          } else {\n            break;\n          }\n        }\n\n        if (gtHi \u003c ltLo) {\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d1;\n          sp++;\n        } else {\n          int n \u003d ((ltLo - lo) \u003c (unLo - ltLo)) ? (ltLo - lo)\n              : (unLo - ltLo);\n          vswap(fmap, lo, unLo - n, n);\n          int m \u003d ((hi - gtHi) \u003c (gtHi - unHi)) ? (hi - gtHi)\n              : (gtHi - unHi);\n          vswap(fmap, unLo, hi - m + 1, m);\n\n          n \u003d lo + unLo - ltLo - 1;\n          m \u003d hi - (gtHi - unHi) + 1;\n\n          stack_ll[sp] \u003d lo;\n          stack_hh[sp] \u003d n;\n          stack_dd[sp] \u003d d;\n          sp++;\n\n          stack_ll[sp] \u003d n + 1;\n          stack_hh[sp] \u003d m - 1;\n          stack_dd[sp] \u003d d1;\n          sp++;\n\n          stack_ll[sp] \u003d m;\n          stack_hh[sp] \u003d hi;\n          stack_dd[sp] \u003d d;\n          sp++;\n        }\n      }\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
    }
  }
}