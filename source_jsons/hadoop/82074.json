{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HostsFileReader.java",
  "functionName": "readXmlFileToMapWithFileInputStream",
  "functionId": "readXmlFileToMapWithFileInputStream___type-String__filename-String__fileInputStream-InputStream__map-Map__String,Integer__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
  "functionStartLine": 146,
  "functionEndLine": 183,
  "numCommitsSeen": 16,
  "timeTaken": 1540,
  "changeHistory": [
    "ccaf036662e22da14583942054898c99fa51dae5",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421"
  ],
  "changeHistoryShort": {
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "19/06/17 3:39 AM",
      "commitNameOld": "300804595e5b8fd447ecb530fcd0ae5b0e59bb63",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 28.75,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public static void readXmlFileToMapWithFileInputStream(String type,\n       String filename, InputStream fileInputStream, Map\u003cString, Integer\u003e map)\n           throws IOException {\n     Document dom;\n     DocumentBuilderFactory builder \u003d DocumentBuilderFactory.newInstance();\n     try {\n       DocumentBuilder db \u003d builder.newDocumentBuilder();\n       dom \u003d db.parse(fileInputStream);\n       // Examples:\n       // \u003chost\u003e\u003cname\u003ehost1\u003c/name\u003e\u003c/host\u003e\n       // \u003chost\u003e\u003cname\u003ehost2\u003c/name\u003e\u003ctimeout\u003e123\u003c/timeout\u003e\u003c/host\u003e\n       // \u003chost\u003e\u003cname\u003ehost3\u003c/name\u003e\u003ctimeout\u003e-1\u003c/timeout\u003e\u003c/host\u003e\n       // \u003chost\u003e\u003cname\u003ehost4, host5,host6\u003c/name\u003e\u003ctimeout\u003e1800\u003c/timeout\u003e\u003c/host\u003e\n       Element doc \u003d dom.getDocumentElement();\n       NodeList nodes \u003d doc.getElementsByTagName(\"host\");\n       for (int i \u003d 0; i \u003c nodes.getLength(); i++) {\n         Node node \u003d nodes.item(i);\n         if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\n           Element e\u003d (Element) node;\n           // Support both single host and comma-separated list of hosts.\n           String v \u003d readFirstTagValue(e, \"name\");\n           String[] hosts \u003d StringUtils.getTrimmedStrings(v);\n           String str \u003d readFirstTagValue(e, \"timeout\");\n           Integer timeout \u003d (str \u003d\u003d null)? null : Integer.parseInt(str);\n           for (String host : hosts) {\n             map.put(host, timeout);\n             LOG.info(\"Adding a node \\\"\" + host + \"\\\" to the list of \"\n                 + type + \" hosts from \" + filename);\n           }\n         }\n       }\n     } catch (IOException|SAXException|ParserConfigurationException e) {\n-      LOG.fatal(\"error parsing \" + filename, e);\n+      LOG.error(\"error parsing \" + filename, e);\n       throw new RuntimeException(e);\n     } finally {\n       fileInputStream.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void readXmlFileToMapWithFileInputStream(String type,\n      String filename, InputStream fileInputStream, Map\u003cString, Integer\u003e map)\n          throws IOException {\n    Document dom;\n    DocumentBuilderFactory builder \u003d DocumentBuilderFactory.newInstance();\n    try {\n      DocumentBuilder db \u003d builder.newDocumentBuilder();\n      dom \u003d db.parse(fileInputStream);\n      // Examples:\n      // \u003chost\u003e\u003cname\u003ehost1\u003c/name\u003e\u003c/host\u003e\n      // \u003chost\u003e\u003cname\u003ehost2\u003c/name\u003e\u003ctimeout\u003e123\u003c/timeout\u003e\u003c/host\u003e\n      // \u003chost\u003e\u003cname\u003ehost3\u003c/name\u003e\u003ctimeout\u003e-1\u003c/timeout\u003e\u003c/host\u003e\n      // \u003chost\u003e\u003cname\u003ehost4, host5,host6\u003c/name\u003e\u003ctimeout\u003e1800\u003c/timeout\u003e\u003c/host\u003e\n      Element doc \u003d dom.getDocumentElement();\n      NodeList nodes \u003d doc.getElementsByTagName(\"host\");\n      for (int i \u003d 0; i \u003c nodes.getLength(); i++) {\n        Node node \u003d nodes.item(i);\n        if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\n          Element e\u003d (Element) node;\n          // Support both single host and comma-separated list of hosts.\n          String v \u003d readFirstTagValue(e, \"name\");\n          String[] hosts \u003d StringUtils.getTrimmedStrings(v);\n          String str \u003d readFirstTagValue(e, \"timeout\");\n          Integer timeout \u003d (str \u003d\u003d null)? null : Integer.parseInt(str);\n          for (String host : hosts) {\n            map.put(host, timeout);\n            LOG.info(\"Adding a node \\\"\" + host + \"\\\" to the list of \"\n                + type + \" hosts from \" + filename);\n          }\n        }\n      }\n    } catch (IOException|SAXException|ParserConfigurationException e) {\n      LOG.error(\"error parsing \" + filename, e);\n      throw new RuntimeException(e);\n    } finally {\n      fileInputStream.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,38 @@\n+  public static void readXmlFileToMapWithFileInputStream(String type,\n+      String filename, InputStream fileInputStream, Map\u003cString, Integer\u003e map)\n+          throws IOException {\n+    Document dom;\n+    DocumentBuilderFactory builder \u003d DocumentBuilderFactory.newInstance();\n+    try {\n+      DocumentBuilder db \u003d builder.newDocumentBuilder();\n+      dom \u003d db.parse(fileInputStream);\n+      // Examples:\n+      // \u003chost\u003e\u003cname\u003ehost1\u003c/name\u003e\u003c/host\u003e\n+      // \u003chost\u003e\u003cname\u003ehost2\u003c/name\u003e\u003ctimeout\u003e123\u003c/timeout\u003e\u003c/host\u003e\n+      // \u003chost\u003e\u003cname\u003ehost3\u003c/name\u003e\u003ctimeout\u003e-1\u003c/timeout\u003e\u003c/host\u003e\n+      // \u003chost\u003e\u003cname\u003ehost4, host5,host6\u003c/name\u003e\u003ctimeout\u003e1800\u003c/timeout\u003e\u003c/host\u003e\n+      Element doc \u003d dom.getDocumentElement();\n+      NodeList nodes \u003d doc.getElementsByTagName(\"host\");\n+      for (int i \u003d 0; i \u003c nodes.getLength(); i++) {\n+        Node node \u003d nodes.item(i);\n+        if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\n+          Element e\u003d (Element) node;\n+          // Support both single host and comma-separated list of hosts.\n+          String v \u003d readFirstTagValue(e, \"name\");\n+          String[] hosts \u003d StringUtils.getTrimmedStrings(v);\n+          String str \u003d readFirstTagValue(e, \"timeout\");\n+          Integer timeout \u003d (str \u003d\u003d null)? null : Integer.parseInt(str);\n+          for (String host : hosts) {\n+            map.put(host, timeout);\n+            LOG.info(\"Adding a node \\\"\" + host + \"\\\" to the list of \"\n+                + type + \" hosts from \" + filename);\n+          }\n+        }\n+      }\n+    } catch (IOException|SAXException|ParserConfigurationException e) {\n+      LOG.fatal(\"error parsing \" + filename, e);\n+      throw new RuntimeException(e);\n+    } finally {\n+      fileInputStream.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void readXmlFileToMapWithFileInputStream(String type,\n      String filename, InputStream fileInputStream, Map\u003cString, Integer\u003e map)\n          throws IOException {\n    Document dom;\n    DocumentBuilderFactory builder \u003d DocumentBuilderFactory.newInstance();\n    try {\n      DocumentBuilder db \u003d builder.newDocumentBuilder();\n      dom \u003d db.parse(fileInputStream);\n      // Examples:\n      // \u003chost\u003e\u003cname\u003ehost1\u003c/name\u003e\u003c/host\u003e\n      // \u003chost\u003e\u003cname\u003ehost2\u003c/name\u003e\u003ctimeout\u003e123\u003c/timeout\u003e\u003c/host\u003e\n      // \u003chost\u003e\u003cname\u003ehost3\u003c/name\u003e\u003ctimeout\u003e-1\u003c/timeout\u003e\u003c/host\u003e\n      // \u003chost\u003e\u003cname\u003ehost4, host5,host6\u003c/name\u003e\u003ctimeout\u003e1800\u003c/timeout\u003e\u003c/host\u003e\n      Element doc \u003d dom.getDocumentElement();\n      NodeList nodes \u003d doc.getElementsByTagName(\"host\");\n      for (int i \u003d 0; i \u003c nodes.getLength(); i++) {\n        Node node \u003d nodes.item(i);\n        if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\n          Element e\u003d (Element) node;\n          // Support both single host and comma-separated list of hosts.\n          String v \u003d readFirstTagValue(e, \"name\");\n          String[] hosts \u003d StringUtils.getTrimmedStrings(v);\n          String str \u003d readFirstTagValue(e, \"timeout\");\n          Integer timeout \u003d (str \u003d\u003d null)? null : Integer.parseInt(str);\n          for (String host : hosts) {\n            map.put(host, timeout);\n            LOG.info(\"Adding a node \\\"\" + host + \"\\\" to the list of \"\n                + type + \" hosts from \" + filename);\n          }\n        }\n      }\n    } catch (IOException|SAXException|ParserConfigurationException e) {\n      LOG.fatal(\"error parsing \" + filename, e);\n      throw new RuntimeException(e);\n    } finally {\n      fileInputStream.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java"
    }
  }
}