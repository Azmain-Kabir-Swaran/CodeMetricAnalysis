{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "sendLifelineIfDue",
  "functionId": "sendLifelineIfDue",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 1060,
  "functionEndLine": 1080,
  "numCommitsSeen": 125,
  "timeTaken": 2576,
  "changeHistory": [
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
    "2759689d7d23001f007cb0dbe2521de90734dd5c"
  ],
  "changeHistoryShort": {
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa": "Ybodychange",
    "2759689d7d23001f007cb0dbe2521de90734dd5c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
      "commitDate": "15/11/18 10:58 AM",
      "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "16/08/18 4:29 PM",
      "commitNameOld": "1290e3c647092f0bfbb250731a6805aba1be8e4b",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 90.81,
      "commitsBetweenForRepo": 804,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     private void sendLifelineIfDue() throws IOException {\n       long startTime \u003d scheduler.monotonicNow();\n       if (!scheduler.isLifelineDue(startTime)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n               + \", because it is not due.\");\n         }\n         return;\n       }\n       if (dn.areHeartbeatsDisabledForTests()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n               + \", because heartbeats are disabled for tests.\");\n         }\n         return;\n       }\n       sendLifeline();\n-      dn.getMetrics().addLifeline(scheduler.monotonicNow() - startTime);\n+      dn.getMetrics().addLifeline(scheduler.monotonicNow() - startTime,\n+          getRpcMetricSuffix());\n       scheduler.scheduleNextLifeline(scheduler.monotonicNow());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void sendLifelineIfDue() throws IOException {\n      long startTime \u003d scheduler.monotonicNow();\n      if (!scheduler.isLifelineDue(startTime)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n              + \", because it is not due.\");\n        }\n        return;\n      }\n      if (dn.areHeartbeatsDisabledForTests()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n              + \", because heartbeats are disabled for tests.\");\n        }\n        return;\n      }\n      sendLifeline();\n      dn.getMetrics().addLifeline(scheduler.monotonicNow() - startTime,\n          getRpcMetricSuffix());\n      scheduler.scheduleNextLifeline(scheduler.monotonicNow());\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "2759689d7d23001f007cb0dbe2521de90734dd5c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9239. DataNode Lifeline Protocol: an alternative protocol for reporting DataNode liveness. Contributed by Chris Nauroth.\n",
      "commitDate": "04/03/16 3:29 PM",
      "commitName": "2759689d7d23001f007cb0dbe2521de90734dd5c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,20 @@\n+    private void sendLifelineIfDue() throws IOException {\n+      long startTime \u003d scheduler.monotonicNow();\n+      if (!scheduler.isLifelineDue(startTime)) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n+              + \", because it is not due.\");\n+        }\n+        return;\n+      }\n+      if (dn.areHeartbeatsDisabledForTests()) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n+              + \", because heartbeats are disabled for tests.\");\n+        }\n+        return;\n+      }\n+      sendLifeline();\n+      dn.getMetrics().addLifeline(scheduler.monotonicNow() - startTime);\n+      scheduler.scheduleNextLifeline(scheduler.monotonicNow());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void sendLifelineIfDue() throws IOException {\n      long startTime \u003d scheduler.monotonicNow();\n      if (!scheduler.isLifelineDue(startTime)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n              + \", because it is not due.\");\n        }\n        return;\n      }\n      if (dn.areHeartbeatsDisabledForTests()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skipping sending lifeline for \" + BPServiceActor.this\n              + \", because heartbeats are disabled for tests.\");\n        }\n        return;\n      }\n      sendLifeline();\n      dn.getMetrics().addLifeline(scheduler.monotonicNow() - startTime);\n      scheduler.scheduleNextLifeline(scheduler.monotonicNow());\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java"
    }
  }
}