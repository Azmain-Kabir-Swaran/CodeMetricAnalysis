{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonUtilClient.java",
  "functionName": "toFsServerDefaults",
  "functionId": "toFsServerDefaults___json-Map__?,?__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/JsonUtilClient.java",
  "functionStartLine": 769,
  "functionEndLine": 794,
  "numCommitsSeen": 41,
  "timeTaken": 1356,
  "changeHistory": [
    "0da29cbeea40cb7839abcd72566b997962829329"
  ],
  "changeHistoryShort": {
    "0da29cbeea40cb7839abcd72566b997962829329": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0da29cbeea40cb7839abcd72566b997962829329": {
      "type": "Yintroduced",
      "commitMessage": "[HDFS-12386] Add fsserver defaults call to WebhdfsFileSystem. (Rushabh Shah via daryn)\n",
      "commitDate": "26/09/17 1:15 PM",
      "commitName": "0da29cbeea40cb7839abcd72566b997962829329",
      "commitAuthor": "Daryn Sharp",
      "diff": "@@ -0,0 +1,26 @@\n+  public static FsServerDefaults toFsServerDefaults(final Map\u003c?, ?\u003e json) {\n+    if (json \u003d\u003d null) {\n+      return null;\n+    }\n+    Map\u003c?, ?\u003e m \u003d\n+        (Map\u003c?, ?\u003e) json.get(FsServerDefaults.class.getSimpleName());\n+    long blockSize \u003d  getLong(m, \"blockSize\", -1);\n+    int bytesPerChecksum \u003d getInt(m, \"bytesPerChecksum\", -1);\n+    int writePacketSize \u003d getInt(m, \"writePacketSize\", -1);\n+    short replication \u003d (short) getInt(m, \"replication\", -1);\n+    int fileBufferSize \u003d getInt(m, \"fileBufferSize\", -1);\n+    boolean encryptDataTransfer \u003d m.containsKey(\"encryptDataTransfer\")\n+        ? (Boolean) m.get(\"encryptDataTransfer\")\n+        : false;\n+    long trashInterval \u003d getLong(m, \"trashInterval\", 0);\n+    DataChecksum.Type type \u003d\n+        DataChecksum.Type.valueOf(getInt(m, \"checksumType\", 1));\n+    String keyProviderUri \u003d (String) m.get(\"keyProviderUri\");\n+    byte storagepolicyId \u003d m.containsKey(\"defaultStoragePolicyId\")\n+        ? ((Number) m.get(\"defaultStoragePolicyId\")).byteValue()\n+        : HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED;\n+    return new FsServerDefaults(blockSize, bytesPerChecksum,\n+        writePacketSize, replication, fileBufferSize,\n+        encryptDataTransfer, trashInterval, type, keyProviderUri,\n+        storagepolicyId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static FsServerDefaults toFsServerDefaults(final Map\u003c?, ?\u003e json) {\n    if (json \u003d\u003d null) {\n      return null;\n    }\n    Map\u003c?, ?\u003e m \u003d\n        (Map\u003c?, ?\u003e) json.get(FsServerDefaults.class.getSimpleName());\n    long blockSize \u003d  getLong(m, \"blockSize\", -1);\n    int bytesPerChecksum \u003d getInt(m, \"bytesPerChecksum\", -1);\n    int writePacketSize \u003d getInt(m, \"writePacketSize\", -1);\n    short replication \u003d (short) getInt(m, \"replication\", -1);\n    int fileBufferSize \u003d getInt(m, \"fileBufferSize\", -1);\n    boolean encryptDataTransfer \u003d m.containsKey(\"encryptDataTransfer\")\n        ? (Boolean) m.get(\"encryptDataTransfer\")\n        : false;\n    long trashInterval \u003d getLong(m, \"trashInterval\", 0);\n    DataChecksum.Type type \u003d\n        DataChecksum.Type.valueOf(getInt(m, \"checksumType\", 1));\n    String keyProviderUri \u003d (String) m.get(\"keyProviderUri\");\n    byte storagepolicyId \u003d m.containsKey(\"defaultStoragePolicyId\")\n        ? ((Number) m.get(\"defaultStoragePolicyId\")).byteValue()\n        : HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED;\n    return new FsServerDefaults(blockSize, bytesPerChecksum,\n        writePacketSize, replication, fileBufferSize,\n        encryptDataTransfer, trashInterval, type, keyProviderUri,\n        storagepolicyId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/JsonUtilClient.java"
    }
  }
}