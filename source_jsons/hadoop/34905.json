{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMProxyTokenSecretManager.java",
  "functionName": "retrievePassword",
  "functionId": "retrievePassword___identifier-AMRMTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyTokenSecretManager.java",
  "functionStartLine": 245,
  "functionEndLine": 271,
  "numCommitsSeen": 4,
  "timeTaken": 1354,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 570.63,
      "commitsBetweenForRepo": 4960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n       throws InvalidToken {\n     this.readLock.lock();\n     try {\n       ApplicationAttemptId applicationAttemptId \u003d\n           identifier.getApplicationAttemptId();\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Trying to retrieve password for \"\n-            + applicationAttemptId);\n-      }\n+      LOG.debug(\"Trying to retrieve password for {}\", applicationAttemptId);\n       if (!appAttemptSet.contains(applicationAttemptId)) {\n         throw new InvalidToken(applicationAttemptId\n             + \" not found in AMRMProxyTokenSecretManager.\");\n       }\n       if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n           .getKeyId()) {\n         return createPassword(identifier.getBytes(),\n             this.currentMasterKey.getSecretKey());\n       } else if (nextMasterKey !\u003d null\n           \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n               .getKeyId()) {\n         return createPassword(identifier.getBytes(),\n             this.nextMasterKey.getSecretKey());\n       }\n       throw new InvalidToken(\"Invalid AMRMToken from \"\n           + applicationAttemptId);\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n      throws InvalidToken {\n    this.readLock.lock();\n    try {\n      ApplicationAttemptId applicationAttemptId \u003d\n          identifier.getApplicationAttemptId();\n      LOG.debug(\"Trying to retrieve password for {}\", applicationAttemptId);\n      if (!appAttemptSet.contains(applicationAttemptId)) {\n        throw new InvalidToken(applicationAttemptId\n            + \" not found in AMRMProxyTokenSecretManager.\");\n      }\n      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n          .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n            this.currentMasterKey.getSecretKey());\n      } else if (nextMasterKey !\u003d null\n          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n              .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n            this.nextMasterKey.getSecretKey());\n      }\n      throw new InvalidToken(\"Invalid AMRMToken from \"\n          + applicationAttemptId);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyTokenSecretManager.java",
      "extendedDetails": {}
    },
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2884. Added a proxy service in NM to proxy the the communication between AM and RM. Contributed by Kishore Chaliparambil\n",
      "commitDate": "07/09/15 6:35 PM",
      "commitName": "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,30 @@\n+  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n+      throws InvalidToken {\n+    this.readLock.lock();\n+    try {\n+      ApplicationAttemptId applicationAttemptId \u003d\n+          identifier.getApplicationAttemptId();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Trying to retrieve password for \"\n+            + applicationAttemptId);\n+      }\n+      if (!appAttemptSet.contains(applicationAttemptId)) {\n+        throw new InvalidToken(applicationAttemptId\n+            + \" not found in AMRMProxyTokenSecretManager.\");\n+      }\n+      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n+          .getKeyId()) {\n+        return createPassword(identifier.getBytes(),\n+            this.currentMasterKey.getSecretKey());\n+      } else if (nextMasterKey !\u003d null\n+          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n+              .getKeyId()) {\n+        return createPassword(identifier.getBytes(),\n+            this.nextMasterKey.getSecretKey());\n+      }\n+      throw new InvalidToken(\"Invalid AMRMToken from \"\n+          + applicationAttemptId);\n+    } finally {\n+      this.readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] retrievePassword(AMRMTokenIdentifier identifier)\n      throws InvalidToken {\n    this.readLock.lock();\n    try {\n      ApplicationAttemptId applicationAttemptId \u003d\n          identifier.getApplicationAttemptId();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to retrieve password for \"\n            + applicationAttemptId);\n      }\n      if (!appAttemptSet.contains(applicationAttemptId)) {\n        throw new InvalidToken(applicationAttemptId\n            + \" not found in AMRMProxyTokenSecretManager.\");\n      }\n      if (identifier.getKeyId() \u003d\u003d this.currentMasterKey.getMasterKey()\n          .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n            this.currentMasterKey.getSecretKey());\n      } else if (nextMasterKey !\u003d null\n          \u0026\u0026 identifier.getKeyId() \u003d\u003d this.nextMasterKey.getMasterKey()\n              .getKeyId()) {\n        return createPassword(identifier.getBytes(),\n            this.nextMasterKey.getSecretKey());\n      }\n      throw new InvalidToken(\"Invalid AMRMToken from \"\n          + applicationAttemptId);\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyTokenSecretManager.java"
    }
  }
}