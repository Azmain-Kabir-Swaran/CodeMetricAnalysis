{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ColumnRWHelper.java",
  "functionName": "readResultsWithTimestamps",
  "functionId": "readResultsWithTimestamps___result-Result__columnFamilyBytes-byte[]__columnPrefixBytes-byte[]__keyConverter-KeyConverter__K____valueConverter-ValueConverter__supplementTs-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
  "functionStartLine": 279,
  "functionEndLine": 344,
  "numCommitsSeen": 27,
  "timeTaken": 7393,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "61136d03f25377c62aefde859c82df18e37b975e",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "bcdb3826006353b6926c4e8497eb5de80543f821",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
    "a9fab9b644e636c1f1b2632130d4eaea70111f16",
    "92d90c3a243134177f192d1d473dd606c79a91fc"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "61136d03f25377c62aefde859c82df18e37b975e": "Ybodychange",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "bcdb3826006353b6926c4e8497eb5de80543f821": "Ybodychange",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": "Ybodychange",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": "Ybodychange",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": "Ybodychange",
    "a9fab9b644e636c1f1b2632130d4eaea70111f16": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "17/02/18 7:00 AM",
      "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 391.35,
      "commitsBetweenForRepo": 3617,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,66 @@\n       readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n           byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n           ValueConverter valueConverter, boolean supplementTs)\n       throws IOException {\n \n     NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"null prefix was specified; returning all columns\");\n-            }\n+            LOG.debug(\"null prefix was specified; returning all columns\");\n             try {\n               converterColumnKey \u003d keyConverter.decode(entry.getKey());\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               try {\n                 // This is the prefix that we want\n                 converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n               } catch (IllegalArgumentException iae) {\n                 LOG.error(\"Illegal column found, skipping this column.\", iae);\n                 continue;\n               }\n             }\n           }\n \n           // If this column has the prefix we want\n           if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) valueConverter.decodeValue(cell.getValue());\n                 Long ts \u003d supplementTs ? TimestampGenerator.\n                     getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                 cellResults.put(ts, value);\n               }\n             }\n             results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n          ValueConverter valueConverter, boolean supplementTs)\n      throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            LOG.debug(\"null prefix was specified; returning all columns\");\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) valueConverter.decodeValue(cell.getValue());\n                Long ts \u003d supplementTs ? TimestampGenerator.\n                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                cellResults.put(ts, value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
      "extendedDetails": {}
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,68 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n-          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n+          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n+          ValueConverter valueConverter, boolean supplementTs)\n+      throws IOException {\n \n     NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n-              result.getMap();\n+          result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n-        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n+        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n             try {\n               converterColumnKey \u003d keyConverter.decode(entry.getKey());\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               try {\n                 // This is the prefix that we want\n                 converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n               } catch (IllegalArgumentException iae) {\n                 LOG.error(\"Illegal column found, skipping this column.\", iae);\n                 continue;\n               }\n             }\n           }\n \n           // If this column has the prefix we want\n           if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n-              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n+              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n-                    (V) converter.decodeValue(cell.getValue());\n+                    (V) valueConverter.decodeValue(cell.getValue());\n                 Long ts \u003d supplementTs ? TimestampGenerator.\n                     getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                 cellResults.put(ts, value);\n               }\n             }\n             results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n          ValueConverter valueConverter, boolean supplementTs)\n      throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) valueConverter.decodeValue(cell.getValue());\n                Long ts \u003d supplementTs ? TimestampGenerator.\n                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                cellResults.put(ts, value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
            "oldMethodName": "readResultsWithTimestamps",
            "newMethodName": "readResultsWithTimestamps"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,68 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n-          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n+          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n+          ValueConverter valueConverter, boolean supplementTs)\n+      throws IOException {\n \n     NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n-              result.getMap();\n+          result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n-        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n+        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n             try {\n               converterColumnKey \u003d keyConverter.decode(entry.getKey());\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               try {\n                 // This is the prefix that we want\n                 converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n               } catch (IllegalArgumentException iae) {\n                 LOG.error(\"Illegal column found, skipping this column.\", iae);\n                 continue;\n               }\n             }\n           }\n \n           // If this column has the prefix we want\n           if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n-              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n+              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n-                    (V) converter.decodeValue(cell.getValue());\n+                    (V) valueConverter.decodeValue(cell.getValue());\n                 Long ts \u003d supplementTs ? TimestampGenerator.\n                     getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                 cellResults.put(ts, value);\n               }\n             }\n             results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n          ValueConverter valueConverter, boolean supplementTs)\n      throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) valueConverter.decodeValue(cell.getValue());\n                Long ts \u003d supplementTs ? TimestampGenerator.\n                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                cellResults.put(ts, value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,68 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n-          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n+          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n+          ValueConverter valueConverter, boolean supplementTs)\n+      throws IOException {\n \n     NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n-              result.getMap();\n+          result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n-        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n+        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n             try {\n               converterColumnKey \u003d keyConverter.decode(entry.getKey());\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               try {\n                 // This is the prefix that we want\n                 converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n               } catch (IllegalArgumentException iae) {\n                 LOG.error(\"Illegal column found, skipping this column.\", iae);\n                 continue;\n               }\n             }\n           }\n \n           // If this column has the prefix we want\n           if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n-              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n+              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n-                    (V) converter.decodeValue(cell.getValue());\n+                    (V) valueConverter.decodeValue(cell.getValue());\n                 Long ts \u003d supplementTs ? TimestampGenerator.\n                     getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                 cellResults.put(ts, value);\n               }\n             }\n             results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n          ValueConverter valueConverter, boolean supplementTs)\n      throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) valueConverter.decodeValue(cell.getValue());\n                Long ts \u003d supplementTs ? TimestampGenerator.\n                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                cellResults.put(ts, value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,68 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n-          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n+          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n+          ValueConverter valueConverter, boolean supplementTs)\n+      throws IOException {\n \n     NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n-              result.getMap();\n+          result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n-        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n+        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n             try {\n               converterColumnKey \u003d keyConverter.decode(entry.getKey());\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               try {\n                 // This is the prefix that we want\n                 converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n               } catch (IllegalArgumentException iae) {\n                 LOG.error(\"Illegal column found, skipping this column.\", iae);\n                 continue;\n               }\n             }\n           }\n \n           // If this column has the prefix we want\n           if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n-              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n+              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n-                    (V) converter.decodeValue(cell.getValue());\n+                    (V) valueConverter.decodeValue(cell.getValue());\n                 Long ts \u003d supplementTs ? TimestampGenerator.\n                     getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                 cellResults.put(ts, value);\n               }\n             }\n             results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnFamilyBytes,\n          byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter,\n          ValueConverter valueConverter, boolean supplementTs)\n      throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Map.Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Map.Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) valueConverter.decodeValue(cell.getValue());\n                Long ts \u003d supplementTs ? TimestampGenerator.\n                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                cellResults.put(ts, value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {
            "oldValue": "[result-Result, columnPrefixBytes-byte[], keyConverter-KeyConverter\u003cK\u003e]",
            "newValue": "[result-Result, columnFamilyBytes-byte[], columnPrefixBytes-byte[], keyConverter-KeyConverter\u003cK\u003e, valueConverter-ValueConverter, supplementTs-boolean]"
          }
        }
      ]
    },
    "61136d03f25377c62aefde859c82df18e37b975e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6850 Ensure that supplemented timestamp is stored only for flow run metrics (Contributed by Varun Saxena via Vrushali C)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "61136d03f25377c62aefde859c82df18e37b975e",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n       readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n           KeyConverter\u003cK\u003e keyConverter) throws IOException {\n \n     NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n               result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n             try {\n               converterColumnKey \u003d keyConverter.decode(entry.getKey());\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               try {\n                 // This is the prefix that we want\n                 converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n               } catch (IllegalArgumentException iae) {\n                 LOG.error(\"Illegal column found, skipping this column.\", iae);\n                 continue;\n               }\n             }\n           }\n \n           // If this column has the prefix we want\n           if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) converter.decodeValue(cell.getValue());\n-                cellResults.put(\n-                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n-                    value);\n+                Long ts \u003d supplementTs ? TimestampGenerator.\n+                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n+                cellResults.put(ts, value);\n               }\n             }\n             results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n              result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                Long ts \u003d supplementTs ? TimestampGenerator.\n                    getTruncatedTimestamp(cell.getKey()) : cell.getKey();\n                cellResults.put(ts, value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n              result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java"
      }
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,67 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n-          throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n+          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n \n-    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n-        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n+    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n               result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n-          String columnName \u003d null;\n+          K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n-            // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n+            try {\n+              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n+            } catch (IllegalArgumentException iae) {\n+              LOG.error(\"Illegal column found, skipping this column.\", iae);\n+              continue;\n+            }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n-              // This is the prefix that we want\n-              columnName \u003d Separator.decode(columnNameParts[1]);\n+              try {\n+                // This is the prefix that we want\n+                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n+              } catch (IllegalArgumentException iae) {\n+                LOG.error(\"Illegal column found, skipping this column.\", iae);\n+                continue;\n+              }\n             }\n           }\n \n           // If this column has the prefix we want\n-          if (columnName !\u003d null) {\n+          if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) converter.decodeValue(cell.getValue());\n                 cellResults.put(\n                     TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                     value);\n               }\n             }\n-            results.put(columnName, cellResults);\n+            results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n              result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {
            "oldValue": "[result-Result, columnPrefixBytes-byte[]]",
            "newValue": "[result-Result, columnPrefixBytes-byte[], keyConverter-KeyConverter\u003cK\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,67 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n-          throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n+          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n \n-    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n-        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n+    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n               result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n-          String columnName \u003d null;\n+          K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n-            // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n+            try {\n+              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n+            } catch (IllegalArgumentException iae) {\n+              LOG.error(\"Illegal column found, skipping this column.\", iae);\n+              continue;\n+            }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n-              // This is the prefix that we want\n-              columnName \u003d Separator.decode(columnNameParts[1]);\n+              try {\n+                // This is the prefix that we want\n+                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n+              } catch (IllegalArgumentException iae) {\n+                LOG.error(\"Illegal column found, skipping this column.\", iae);\n+                continue;\n+              }\n             }\n           }\n \n           // If this column has the prefix we want\n-          if (columnName !\u003d null) {\n+          if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) converter.decodeValue(cell.getValue());\n                 cellResults.put(\n                     TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                     value);\n               }\n             }\n-            results.put(columnName, cellResults);\n+            results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n              result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {
            "oldValue": "NavigableMap\u003cString,NavigableMap\u003cLong,V\u003e\u003e",
            "newValue": "NavigableMap\u003cK,NavigableMap\u003cLong,V\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,67 @@\n-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n-          throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n+          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n \n-    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n-        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n+    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n               result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n-          String columnName \u003d null;\n+          K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"null prefix was specified; returning all columns\");\n             }\n-            // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n+            try {\n+              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n+            } catch (IllegalArgumentException iae) {\n+              LOG.error(\"Illegal column found, skipping this column.\", iae);\n+              continue;\n+            }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n-              // This is the prefix that we want\n-              columnName \u003d Separator.decode(columnNameParts[1]);\n+              try {\n+                // This is the prefix that we want\n+                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n+              } catch (IllegalArgumentException iae) {\n+                LOG.error(\"Illegal column found, skipping this column.\", iae);\n+                continue;\n+              }\n             }\n           }\n \n           // If this column has the prefix we want\n-          if (columnName !\u003d null) {\n+          if (converterColumnKey !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) converter.decodeValue(cell.getValue());\n                 cellResults.put(\n                     TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                     value);\n               }\n             }\n-            results.put(columnName, cellResults);\n+            results.put(converterColumnKey, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,\n          KeyConverter\u003cK\u003e keyConverter) throws IOException {\n\n    NavigableMap\u003cK, NavigableMap\u003cLong, V\u003e\u003e results \u003d new TreeMap\u003c\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n              result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            try {\n              converterColumnKey \u003d keyConverter.decode(entry.getKey());\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              try {\n                // This is the prefix that we want\n                converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n              } catch (IllegalArgumentException iae) {\n                LOG.error(\"Illegal column found, skipping this column.\", iae);\n                continue;\n              }\n            }\n          }\n\n          // If this column has the prefix we want\n          if (converterColumnKey !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(converterColumnKey, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {}
        }
      ]
    },
    "bcdb3826006353b6926c4e8497eb5de80543f821": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5096. timelinereader has a lot of logging that\u0027s not useful. (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "bcdb3826006353b6926c4e8497eb5de80543f821",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n       readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n           throws IOException {\n \n     NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n         new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003c\n           byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n               result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n-            LOG.info(\"null prefix was specified; returning all columns\");\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"null prefix was specified; returning all columns\");\n+            }\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) converter.decodeValue(cell.getValue());\n                 cellResults.put(\n                     TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                     value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003c\n          byte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n              result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n       readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n           throws IOException {\n \n     NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n         new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             LOG.info(\"null prefix was specified; returning all columns\");\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n-                    (V) GenericObjectMapper.read(cell.getValue());\n+                    (V) converter.decodeValue(cell.getValue());\n                 cellResults.put(\n                     TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                     value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            LOG.info(\"null prefix was specified; returning all columns\");\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) converter.decodeValue(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3901. Populate flow run data in the flow_run \u0026 flow activity tables (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n       readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n           throws IOException {\n \n     NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n         new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             LOG.info(\"null prefix was specified; returning all columns\");\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) GenericObjectMapper.read(cell.getValue());\n-                cellResults.put(cell.getKey(), value);\n+                cellResults.put(\n+                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n+                    value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            LOG.info(\"null prefix was specified; returning all columns\");\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) GenericObjectMapper.read(cell.getValue());\n                cellResults.put(\n                    TimestampGenerator.getTruncatedTimestamp(cell.getKey()),\n                    value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4025. Deal with byte representations of Longs in writer code. Contributed by Sangjin Lee and Vrushali C.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n       readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n           throws IOException {\n \n     NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n         new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n+            LOG.info(\"null prefix was specified; returning all columns\");\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n             NavigableMap\u003cLong, V\u003e cellResults \u003d\n                 new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                 V value \u003d\n                     (V) GenericObjectMapper.read(cell.getValue());\n                 cellResults.put(cell.getKey(), value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            LOG.info(\"null prefix was specified; returning all columns\");\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) GenericObjectMapper.read(cell.getValue());\n                cellResults.put(cell.getKey(), value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "a9fab9b644e636c1f1b2632130d4eaea70111f16": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3908. Fixed bugs in HBaseTimelineWriterImpl. Contributed by Vrushali C and Sangjin Lee.\n\n(cherry picked from commit df0ec473a84871b0effd7ca6faac776210d7df09)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3908. Fixed bugs in HBaseTimelineWriterImpl. Contributed by Vrushali C and Sangjin Lee.\n\n(cherry picked from commit df0ec473a84871b0effd7ca6faac776210d7df09)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "92d90c3a243134177f192d1d473dd606c79a91fc",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  public NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e readTimeseriesResults(\n-      Result result, byte[] columnPrefixBytes) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n+          throws IOException {\n \n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e results \u003d\n-        new TreeMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e();\n+    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n+        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n-            NavigableMap\u003cLong, Number\u003e cellResults \u003d\n-                new TreeMap\u003cLong, Number\u003e();\n+            NavigableMap\u003cLong, V\u003e cellResults \u003d\n+                new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n-                Number value \u003d\n-                    (Number) GenericObjectMapper.read(cell.getValue());\n+                V value \u003d\n+                    (V) GenericObjectMapper.read(cell.getValue());\n                 cellResults.put(cell.getKey(), value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) GenericObjectMapper.read(cell.getValue());\n                cellResults.put(cell.getKey(), value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {
            "oldValue": "readTimeseriesResults",
            "newValue": "readResultsWithTimestamps"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3908. Fixed bugs in HBaseTimelineWriterImpl. Contributed by Vrushali C and Sangjin Lee.\n\n(cherry picked from commit df0ec473a84871b0effd7ca6faac776210d7df09)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "92d90c3a243134177f192d1d473dd606c79a91fc",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  public NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e readTimeseriesResults(\n-      Result result, byte[] columnPrefixBytes) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n+          throws IOException {\n \n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e results \u003d\n-        new TreeMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e();\n+    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n+        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n-            NavigableMap\u003cLong, Number\u003e cellResults \u003d\n-                new TreeMap\u003cLong, Number\u003e();\n+            NavigableMap\u003cLong, V\u003e cellResults \u003d\n+                new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n-                Number value \u003d\n-                    (Number) GenericObjectMapper.read(cell.getValue());\n+                V value \u003d\n+                    (V) GenericObjectMapper.read(cell.getValue());\n                 cellResults.put(cell.getKey(), value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) GenericObjectMapper.read(cell.getValue());\n                cellResults.put(cell.getKey(), value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {
            "oldValue": "NavigableMap\u003cString,NavigableMap\u003cLong,Number\u003e\u003e",
            "newValue": "NavigableMap\u003cString,NavigableMap\u003cLong,V\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3908. Fixed bugs in HBaseTimelineWriterImpl. Contributed by Vrushali C and Sangjin Lee.\n\n(cherry picked from commit df0ec473a84871b0effd7ca6faac776210d7df09)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "92d90c3a243134177f192d1d473dd606c79a91fc",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  public NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e readTimeseriesResults(\n-      Result result, byte[] columnPrefixBytes) throws IOException {\n+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n+          throws IOException {\n \n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e results \u003d\n-        new TreeMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e();\n+    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n+        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n \n     if (result !\u003d null) {\n       NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n           result.getMap();\n \n       NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n           resultMap.get(columnFamilyBytes);\n \n       // could be that there is no such column family.\n       if (columnCellMap !\u003d null) {\n         for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n             .entrySet()) {\n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(entry.getKey(), 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n-            NavigableMap\u003cLong, Number\u003e cellResults \u003d\n-                new TreeMap\u003cLong, Number\u003e();\n+            NavigableMap\u003cLong, V\u003e cellResults \u003d\n+                new TreeMap\u003cLong, V\u003e();\n             NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n             if (cells !\u003d null) {\n               for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n-                Number value \u003d\n-                    (Number) GenericObjectMapper.read(cell.getValue());\n+                V value \u003d\n+                    (V) GenericObjectMapper.read(cell.getValue());\n                 cellResults.put(cell.getKey(), value);\n               }\n             }\n             results.put(columnName, cellResults);\n           }\n         } // for entry : columnCellMap\n       } // if columnCellMap !\u003d null\n     } // if result !\u003d null\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)\n          throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, V\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, V\u003e cellResults \u003d\n                new TreeMap\u003cLong, V\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                V value \u003d\n                    (V) GenericObjectMapper.read(cell.getValue());\n                cellResults.put(cell.getKey(), value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {}
        }
      ]
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,53 @@\n+  public NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e readTimeseriesResults(\n+      Result result, byte[] columnPrefixBytes) throws IOException {\n+\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e results \u003d\n+        new TreeMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e();\n+\n+    if (result !\u003d null) {\n+      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n+          result.getMap();\n+\n+      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n+          resultMap.get(columnFamilyBytes);\n+\n+      // could be that there is no such column family.\n+      if (columnCellMap !\u003d null) {\n+        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n+            .entrySet()) {\n+          String columnName \u003d null;\n+          if (columnPrefixBytes \u003d\u003d null) {\n+            // Decode the spaces we encoded in the column name.\n+            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n+          } else {\n+            // A non-null prefix means columns are actually of the form\n+            // prefix!columnNameRemainder\n+            byte[][] columnNameParts \u003d\n+                Separator.QUALIFIERS.split(entry.getKey(), 2);\n+            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n+            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n+                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n+              // This is the prefix that we want\n+              columnName \u003d Separator.decode(columnNameParts[1]);\n+            }\n+          }\n+\n+          // If this column has the prefix we want\n+          if (columnName !\u003d null) {\n+            NavigableMap\u003cLong, Number\u003e cellResults \u003d\n+                new TreeMap\u003cLong, Number\u003e();\n+            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n+            if (cells !\u003d null) {\n+              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n+                Number value \u003d\n+                    (Number) GenericObjectMapper.read(cell.getValue());\n+                cellResults.put(cell.getKey(), value);\n+              }\n+            }\n+            results.put(columnName, cellResults);\n+          }\n+        } // for entry : columnCellMap\n+      } // if columnCellMap !\u003d null\n+    } // if result !\u003d null\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e readTimeseriesResults(\n      Result result, byte[] columnPrefixBytes) throws IOException {\n\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e results \u003d\n        new TreeMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e();\n\n    if (result !\u003d null) {\n      NavigableMap\u003cbyte[], NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e\u003e resultMap \u003d\n          result.getMap();\n\n      NavigableMap\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e columnCellMap \u003d\n          resultMap.get(columnFamilyBytes);\n\n      // could be that there is no such column family.\n      if (columnCellMap !\u003d null) {\n        for (Entry\u003cbyte[], NavigableMap\u003cLong, byte[]\u003e\u003e entry : columnCellMap\n            .entrySet()) {\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            NavigableMap\u003cLong, Number\u003e cellResults \u003d\n                new TreeMap\u003cLong, Number\u003e();\n            NavigableMap\u003cLong, byte[]\u003e cells \u003d entry.getValue();\n            if (cells !\u003d null) {\n              for (Entry\u003cLong, byte[]\u003e cell : cells.entrySet()) {\n                Number value \u003d\n                    (Number) GenericObjectMapper.read(cell.getValue());\n                cellResults.put(cell.getKey(), value);\n              }\n            }\n            results.put(columnName, cellResults);\n          }\n        } // for entry : columnCellMap\n      } // if columnCellMap !\u003d null\n    } // if result !\u003d null\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java"
    }
  }
}