{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebServices.java",
  "functionName": "getContainer",
  "functionId": "getContainer___req-HttpServletRequest__appId-String__appAttemptId-String__containerId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java",
  "functionStartLine": 378,
  "functionEndLine": 412,
  "numCommitsSeen": 43,
  "timeTaken": 3172,
  "changeHistory": [
    "dd2607e3ec3c349130e4143b0f67b23e11da420a",
    "722ee841948db1f246f0056acec9a1ac464fe1f9",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a",
    "c05b581a5522eed499d3ba16af9fa6dc694563f6",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": "Yparameterchange",
    "722ee841948db1f246f0056acec9a1ac464fe1f9": "Ybodychange",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": "Ybodychange",
    "c05b581a5522eed499d3ba16af9fa6dc694563f6": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal\n",
      "commitDate": "06/01/20 8:16 AM",
      "commitName": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/01/20 7:26 AM",
      "commitNameOld": "768ee22e9e73543d2fb193d9b6ec34a247cb0411",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public ContainerInfo getContainer(HttpServletRequest req,\n-      HttpServletResponse res, String appId, String appAttemptId,\n+      String appId, String appAttemptId,\n       String containerId) {\n     UserGroupInformation callerUGI \u003d getUser(req);\n     ApplicationId aid \u003d parseApplicationId(appId);\n     ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n     final ContainerId cid \u003d parseContainerId(containerId);\n     validateIds(aid, aaid, cid);\n     ContainerReport container \u003d null;\n     try {\n       if (callerUGI \u003d\u003d null) {\n         GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(cid);\n         container \u003d\n             getContainerReport(request);\n       } else {\n         container \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             GetContainerReportRequest request \u003d\n                 GetContainerReportRequest.newInstance(cid);\n             return getContainerReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       rewrapAndThrowException(e);\n     }\n     if (container \u003d\u003d null) {\n       throw new NotFoundException(\"container with id: \" + containerId\n           + \" not found\");\n     }\n     return new ContainerInfo(container);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerInfo getContainer(HttpServletRequest req,\n      String appId, String appAttemptId,\n      String containerId) {\n    UserGroupInformation callerUGI \u003d getUser(req);\n    ApplicationId aid \u003d parseApplicationId(appId);\n    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n    final ContainerId cid \u003d parseContainerId(containerId);\n    validateIds(aid, aaid, cid);\n    ContainerReport container \u003d null;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(cid);\n        container \u003d\n            getContainerReport(request);\n      } else {\n        container \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(cid);\n            return getContainerReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      rewrapAndThrowException(e);\n    }\n    if (container \u003d\u003d null) {\n      throw new NotFoundException(\"container with id: \" + containerId\n          + \" not found\");\n    }\n    return new ContainerInfo(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java",
      "extendedDetails": {
        "oldValue": "[req-HttpServletRequest, res-HttpServletResponse, appId-String, appAttemptId-String, containerId-String]",
        "newValue": "[req-HttpServletRequest, appId-String, appAttemptId-String, containerId-String]"
      }
    },
    "722ee841948db1f246f0056acec9a1ac464fe1f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7163. RMContext need not to be injected to webapp and other Always Running services. Contributed by Rohith Sharma K S.\n",
      "commitDate": "10/09/17 9:58 PM",
      "commitName": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 453.29,
      "commitsBetweenForRepo": 2971,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public ContainerInfo getContainer(HttpServletRequest req,\n       HttpServletResponse res, String appId, String appAttemptId,\n       String containerId) {\n     UserGroupInformation callerUGI \u003d getUser(req);\n     ApplicationId aid \u003d parseApplicationId(appId);\n     ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n     final ContainerId cid \u003d parseContainerId(containerId);\n     validateIds(aid, aaid, cid);\n     ContainerReport container \u003d null;\n     try {\n       if (callerUGI \u003d\u003d null) {\n         GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(cid);\n         container \u003d\n-            appBaseProt.getContainerReport(request).getContainerReport();\n+            getContainerReport(request);\n       } else {\n         container \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             GetContainerReportRequest request \u003d\n                 GetContainerReportRequest.newInstance(cid);\n-            return appBaseProt.getContainerReport(request).getContainerReport();\n+            return getContainerReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       rewrapAndThrowException(e);\n     }\n     if (container \u003d\u003d null) {\n       throw new NotFoundException(\"container with id: \" + containerId\n           + \" not found\");\n     }\n     return new ContainerInfo(container);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerInfo getContainer(HttpServletRequest req,\n      HttpServletResponse res, String appId, String appAttemptId,\n      String containerId) {\n    UserGroupInformation callerUGI \u003d getUser(req);\n    ApplicationId aid \u003d parseApplicationId(appId);\n    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n    final ContainerId cid \u003d parseContainerId(containerId);\n    validateIds(aid, aaid, cid);\n    ContainerReport container \u003d null;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(cid);\n        container \u003d\n            getContainerReport(request);\n      } else {\n        container \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(cid);\n            return getContainerReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      rewrapAndThrowException(e);\n    }\n    if (container \u003d\u003d null) {\n      throw new NotFoundException(\"container with id: \" + containerId\n          + \" not found\");\n    }\n    return new ContainerInfo(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java",
      "extendedDetails": {}
    },
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong\n",
      "commitDate": "05/03/15 9:20 PM",
      "commitName": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthor": "Jian He",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   public ContainerInfo getContainer(HttpServletRequest req,\n       HttpServletResponse res, String appId, String appAttemptId,\n       String containerId) {\n     UserGroupInformation callerUGI \u003d getUser(req);\n     ApplicationId aid \u003d parseApplicationId(appId);\n     ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n     final ContainerId cid \u003d parseContainerId(containerId);\n     validateIds(aid, aaid, cid);\n     ContainerReport container \u003d null;\n     try {\n       if (callerUGI \u003d\u003d null) {\n-        container \u003d appContext.getContainer(cid);\n+        GetContainerReportRequest request \u003d\n+            GetContainerReportRequest.newInstance(cid);\n+        container \u003d\n+            appBaseProt.getContainerReport(request).getContainerReport();\n       } else {\n         container \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n-            return appContext.getContainer(cid);\n+            GetContainerReportRequest request \u003d\n+                GetContainerReportRequest.newInstance(cid);\n+            return appBaseProt.getContainerReport(request).getContainerReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       rewrapAndThrowException(e);\n     }\n     if (container \u003d\u003d null) {\n       throw new NotFoundException(\"container with id: \" + containerId\n           + \" not found\");\n     }\n     return new ContainerInfo(container);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerInfo getContainer(HttpServletRequest req,\n      HttpServletResponse res, String appId, String appAttemptId,\n      String containerId) {\n    UserGroupInformation callerUGI \u003d getUser(req);\n    ApplicationId aid \u003d parseApplicationId(appId);\n    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n    final ContainerId cid \u003d parseContainerId(containerId);\n    validateIds(aid, aaid, cid);\n    ContainerReport container \u003d null;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(cid);\n        container \u003d\n            appBaseProt.getContainerReport(request).getContainerReport();\n      } else {\n        container \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            GetContainerReportRequest request \u003d\n                GetContainerReportRequest.newInstance(cid);\n            return appBaseProt.getContainerReport(request).getContainerReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      rewrapAndThrowException(e);\n    }\n    if (container \u003d\u003d null) {\n      throw new NotFoundException(\"container with id: \" + containerId\n          + \" not found\");\n    }\n    return new ContainerInfo(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java",
      "extendedDetails": {}
    },
    "c05b581a5522eed499d3ba16af9fa6dc694563f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2591. Fixed AHSWebServices to return FORBIDDEN(403) if the request user doesn\u0027t have access to the history data. Contributed by Zhijie Shen\n",
      "commitDate": "27/10/14 10:45 AM",
      "commitName": "c05b581a5522eed499d3ba16af9fa6dc694563f6",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 45.65,
      "commitsBetweenForRepo": 445,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public ContainerInfo getContainer(HttpServletRequest req,\n       HttpServletResponse res, String appId, String appAttemptId,\n       String containerId) {\n     UserGroupInformation callerUGI \u003d getUser(req);\n     ApplicationId aid \u003d parseApplicationId(appId);\n     ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n     final ContainerId cid \u003d parseContainerId(containerId);\n     validateIds(aid, aaid, cid);\n     ContainerReport container \u003d null;\n     try {\n       if (callerUGI \u003d\u003d null) {\n         container \u003d appContext.getContainer(cid);\n       } else {\n         container \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             return appContext.getContainer(cid);\n           }\n         });\n       }\n     } catch (Exception e) {\n-      throw new WebApplicationException(e);\n+      rewrapAndThrowException(e);\n     }\n     if (container \u003d\u003d null) {\n       throw new NotFoundException(\"container with id: \" + containerId\n           + \" not found\");\n     }\n     return new ContainerInfo(container);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerInfo getContainer(HttpServletRequest req,\n      HttpServletResponse res, String appId, String appAttemptId,\n      String containerId) {\n    UserGroupInformation callerUGI \u003d getUser(req);\n    ApplicationId aid \u003d parseApplicationId(appId);\n    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n    final ContainerId cid \u003d parseContainerId(containerId);\n    validateIds(aid, aaid, cid);\n    ContainerReport container \u003d null;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        container \u003d appContext.getContainer(cid);\n      } else {\n        container \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appContext.getContainer(cid);\n          }\n        });\n      }\n    } catch (Exception e) {\n      rewrapAndThrowException(e);\n    }\n    if (container \u003d\u003d null) {\n      throw new NotFoundException(\"container with id: \" + containerId\n          + \" not found\");\n    }\n    return new ContainerInfo(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 228.88,
      "commitsBetweenForRepo": 1735,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,30 @@\n   public ContainerInfo getContainer(HttpServletRequest req,\n       HttpServletResponse res, String appId, String appAttemptId,\n       String containerId) {\n+    UserGroupInformation callerUGI \u003d getUser(req);\n     ApplicationId aid \u003d parseApplicationId(appId);\n     ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n-    ContainerId cid \u003d parseContainerId(containerId);\n+    final ContainerId cid \u003d parseContainerId(containerId);\n     validateIds(aid, aaid, cid);\n     ContainerReport container \u003d null;\n     try {\n-      container \u003d appContext.getContainer(cid);\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        container \u003d appContext.getContainer(cid);\n+      } else {\n+        container \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n+          @Override\n+          public ContainerReport run() throws Exception {\n+            return appContext.getContainer(cid);\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       throw new WebApplicationException(e);\n     }\n     if (container \u003d\u003d null) {\n       throw new NotFoundException(\"container with id: \" + containerId\n           + \" not found\");\n     }\n     return new ContainerInfo(container);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerInfo getContainer(HttpServletRequest req,\n      HttpServletResponse res, String appId, String appAttemptId,\n      String containerId) {\n    UserGroupInformation callerUGI \u003d getUser(req);\n    ApplicationId aid \u003d parseApplicationId(appId);\n    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n    final ContainerId cid \u003d parseContainerId(containerId);\n    validateIds(aid, aaid, cid);\n    ContainerReport container \u003d null;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        container \u003d appContext.getContainer(cid);\n      } else {\n        container \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appContext.getContainer(cid);\n          }\n        });\n      }\n    } catch (Exception e) {\n      throw new WebApplicationException(e);\n    }\n    if (container \u003d\u003d null) {\n      throw new NotFoundException(\"container with id: \" + containerId\n          + \" not found\");\n    }\n    return new ContainerInfo(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,19 @@\n+  public ContainerInfo getContainer(HttpServletRequest req,\n+      HttpServletResponse res, String appId, String appAttemptId,\n+      String containerId) {\n+    ApplicationId aid \u003d parseApplicationId(appId);\n+    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n+    ContainerId cid \u003d parseContainerId(containerId);\n+    validateIds(aid, aaid, cid);\n+    ContainerReport container \u003d null;\n+    try {\n+      container \u003d appContext.getContainer(cid);\n+    } catch (IOException e) {\n+      throw new WebApplicationException(e);\n+    }\n+    if (container \u003d\u003d null) {\n+      throw new NotFoundException(\"container with id: \" + containerId\n+          + \" not found\");\n+    }\n+    return new ContainerInfo(container);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerInfo getContainer(HttpServletRequest req,\n      HttpServletResponse res, String appId, String appAttemptId,\n      String containerId) {\n    ApplicationId aid \u003d parseApplicationId(appId);\n    ApplicationAttemptId aaid \u003d parseApplicationAttemptId(appAttemptId);\n    ContainerId cid \u003d parseContainerId(containerId);\n    validateIds(aid, aaid, cid);\n    ContainerReport container \u003d null;\n    try {\n      container \u003d appContext.getContainer(cid);\n    } catch (IOException e) {\n      throw new WebApplicationException(e);\n    }\n    if (container \u003d\u003d null) {\n      throw new NotFoundException(\"container with id: \" + containerId\n          + \" not found\");\n    }\n    return new ContainerInfo(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/WebServices.java"
    }
  }
}