{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterRpcClient.java",
  "functionName": "getConnection",
  "functionId": "getConnection___ugi-UserGroupInformation__nsId-String__rpcAddress-String__proto-Class__?__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
  "functionStartLine": 294,
  "functionEndLine": 324,
  "numCommitsSeen": 32,
  "timeTaken": 3736,
  "changeHistory": [
    "f3cbf0eb9ace860cb2da77b09042e2056ef9255f",
    "6f2c871b05b97ea0e18f3c431af8b0d606f88561",
    "2be64eb201134502a92f7239bef8aa780771ca0b",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "f3cbf0eb9ace860cb2da77b09042e2056ef9255f": "Ybodychange",
    "6f2c871b05b97ea0e18f3c431af8b0d606f88561": "Ybodychange",
    "2be64eb201134502a92f7239bef8aa780771ca0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f3cbf0eb9ace860cb2da77b09042e2056ef9255f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14161. RBF: Throw StandbyException instead of IOException so that client can retry when can not get connection. Contributed by Fei Hui.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "f3cbf0eb9ace860cb2da77b09042e2056ef9255f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6f2c871b05b97ea0e18f3c431af8b0d606f88561",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n       String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n     ConnectionContext connection \u003d null;\n     try {\n       // Each proxy holds the UGI info for the current user when it is created.\n       // This cache does not scale very well, one entry per user per namenode,\n       // and may need to be adjusted and/or selectively pruned. The cache is\n       // important due to the excessive overhead of creating a new proxy wrapper\n       // for each individual request.\n \n       // TODO Add tokens from the federated UGI\n       UserGroupInformation connUGI \u003d ugi;\n       if (UserGroupInformation.isSecurityEnabled()) {\n         UserGroupInformation routerUser \u003d UserGroupInformation.getLoginUser();\n         connUGI \u003d UserGroupInformation.createProxyUser(\n             ugi.getUserName(), routerUser);\n       }\n       connection \u003d this.connectionManager.getConnection(\n           connUGI, rpcAddress, proto);\n       LOG.debug(\"User {} NN {} is using connection {}\",\n           ugi.getUserName(), rpcAddress, connection);\n     } catch (Exception ex) {\n       LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n     }\n \n     if (connection \u003d\u003d null) {\n-      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n+      throw new ConnectionNullException(\"Cannot get a connection to \"\n+          + rpcAddress);\n     }\n     return connection;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n      String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n    ConnectionContext connection \u003d null;\n    try {\n      // Each proxy holds the UGI info for the current user when it is created.\n      // This cache does not scale very well, one entry per user per namenode,\n      // and may need to be adjusted and/or selectively pruned. The cache is\n      // important due to the excessive overhead of creating a new proxy wrapper\n      // for each individual request.\n\n      // TODO Add tokens from the federated UGI\n      UserGroupInformation connUGI \u003d ugi;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        UserGroupInformation routerUser \u003d UserGroupInformation.getLoginUser();\n        connUGI \u003d UserGroupInformation.createProxyUser(\n            ugi.getUserName(), routerUser);\n      }\n      connection \u003d this.connectionManager.getConnection(\n          connUGI, rpcAddress, proto);\n      LOG.debug(\"User {} NN {} is using connection {}\",\n          ugi.getUserName(), rpcAddress, connection);\n    } catch (Exception ex) {\n      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n    }\n\n    if (connection \u003d\u003d null) {\n      throw new ConnectionNullException(\"Cannot get a connection to \"\n          + rpcAddress);\n    }\n    return connection;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "6f2c871b05b97ea0e18f3c431af8b0d606f88561": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12284. RBF: Support for Kerberos authentication. Contributed by Sherwood Zheng and Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6f2c871b05b97ea0e18f3c431af8b0d606f88561",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "02/10/18 8:48 PM",
      "commitNameOld": "fa7f7078a713c44783425195a891582bcf8a6d5c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 264.53,
      "commitsBetweenForRepo": 1929,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,30 @@\n   private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n       String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n     ConnectionContext connection \u003d null;\n     try {\n       // Each proxy holds the UGI info for the current user when it is created.\n       // This cache does not scale very well, one entry per user per namenode,\n       // and may need to be adjusted and/or selectively pruned. The cache is\n       // important due to the excessive overhead of creating a new proxy wrapper\n       // for each individual request.\n \n       // TODO Add tokens from the federated UGI\n-      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress, proto);\n+      UserGroupInformation connUGI \u003d ugi;\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        UserGroupInformation routerUser \u003d UserGroupInformation.getLoginUser();\n+        connUGI \u003d UserGroupInformation.createProxyUser(\n+            ugi.getUserName(), routerUser);\n+      }\n+      connection \u003d this.connectionManager.getConnection(\n+          connUGI, rpcAddress, proto);\n       LOG.debug(\"User {} NN {} is using connection {}\",\n           ugi.getUserName(), rpcAddress, connection);\n     } catch (Exception ex) {\n       LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n     }\n \n     if (connection \u003d\u003d null) {\n       throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n     }\n     return connection;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n      String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n    ConnectionContext connection \u003d null;\n    try {\n      // Each proxy holds the UGI info for the current user when it is created.\n      // This cache does not scale very well, one entry per user per namenode,\n      // and may need to be adjusted and/or selectively pruned. The cache is\n      // important due to the excessive overhead of creating a new proxy wrapper\n      // for each individual request.\n\n      // TODO Add tokens from the federated UGI\n      UserGroupInformation connUGI \u003d ugi;\n      if (UserGroupInformation.isSecurityEnabled()) {\n        UserGroupInformation routerUser \u003d UserGroupInformation.getLoginUser();\n        connUGI \u003d UserGroupInformation.createProxyUser(\n            ugi.getUserName(), routerUser);\n      }\n      connection \u003d this.connectionManager.getConnection(\n          connUGI, rpcAddress, proto);\n      LOG.debug(\"User {} NN {} is using connection {}\",\n          ugi.getUserName(), rpcAddress, connection);\n    } catch (Exception ex) {\n      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n    }\n\n    if (connection \u003d\u003d null) {\n      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n    }\n    return connection;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "2be64eb201134502a92f7239bef8aa780771ca0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
      "commitDate": "03/04/18 12:08 AM",
      "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "20/03/18 8:32 PM",
          "commitNameOld": "2caba999bbb9d6e3ec56024a0a9d3d56a229edcf",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 13.15,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  private ConnectionContext getConnection(\n-      UserGroupInformation ugi, String nsId, String rpcAddress)\n-          throws IOException {\n+  private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n+      String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n     ConnectionContext connection \u003d null;\n     try {\n       // Each proxy holds the UGI info for the current user when it is created.\n       // This cache does not scale very well, one entry per user per namenode,\n       // and may need to be adjusted and/or selectively pruned. The cache is\n       // important due to the excessive overhead of creating a new proxy wrapper\n       // for each individual request.\n \n       // TODO Add tokens from the federated UGI\n-      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress);\n+      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress, proto);\n       LOG.debug(\"User {} NN {} is using connection {}\",\n           ugi.getUserName(), rpcAddress, connection);\n     } catch (Exception ex) {\n       LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n     }\n \n     if (connection \u003d\u003d null) {\n       throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n     }\n     return connection;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n      String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n    ConnectionContext connection \u003d null;\n    try {\n      // Each proxy holds the UGI info for the current user when it is created.\n      // This cache does not scale very well, one entry per user per namenode,\n      // and may need to be adjusted and/or selectively pruned. The cache is\n      // important due to the excessive overhead of creating a new proxy wrapper\n      // for each individual request.\n\n      // TODO Add tokens from the federated UGI\n      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress, proto);\n      LOG.debug(\"User {} NN {} is using connection {}\",\n          ugi.getUserName(), rpcAddress, connection);\n    } catch (Exception ex) {\n      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n    }\n\n    if (connection \u003d\u003d null) {\n      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n    }\n    return connection;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation, nsId-String, rpcAddress-String]",
            "newValue": "[ugi-UserGroupInformation, nsId-String, rpcAddress-String, proto-Class\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "20/03/18 8:32 PM",
          "commitNameOld": "2caba999bbb9d6e3ec56024a0a9d3d56a229edcf",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 13.15,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  private ConnectionContext getConnection(\n-      UserGroupInformation ugi, String nsId, String rpcAddress)\n-          throws IOException {\n+  private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n+      String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n     ConnectionContext connection \u003d null;\n     try {\n       // Each proxy holds the UGI info for the current user when it is created.\n       // This cache does not scale very well, one entry per user per namenode,\n       // and may need to be adjusted and/or selectively pruned. The cache is\n       // important due to the excessive overhead of creating a new proxy wrapper\n       // for each individual request.\n \n       // TODO Add tokens from the federated UGI\n-      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress);\n+      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress, proto);\n       LOG.debug(\"User {} NN {} is using connection {}\",\n           ugi.getUserName(), rpcAddress, connection);\n     } catch (Exception ex) {\n       LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n     }\n \n     if (connection \u003d\u003d null) {\n       throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n     }\n     return connection;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ConnectionContext getConnection(UserGroupInformation ugi, String nsId,\n      String rpcAddress, Class\u003c?\u003e proto) throws IOException {\n    ConnectionContext connection \u003d null;\n    try {\n      // Each proxy holds the UGI info for the current user when it is created.\n      // This cache does not scale very well, one entry per user per namenode,\n      // and may need to be adjusted and/or selectively pruned. The cache is\n      // important due to the excessive overhead of creating a new proxy wrapper\n      // for each individual request.\n\n      // TODO Add tokens from the federated UGI\n      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress, proto);\n      LOG.debug(\"User {} NN {} is using connection {}\",\n          ugi.getUserName(), rpcAddress, connection);\n    } catch (Exception ex) {\n      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n    }\n\n    if (connection \u003d\u003d null) {\n      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n    }\n    return connection;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ConnectionContext getConnection(\n      UserGroupInformation ugi, String nsId, String rpcAddress)\n          throws IOException {\n    ConnectionContext connection \u003d null;\n    try {\n      // Each proxy holds the UGI info for the current user when it is created.\n      // This cache does not scale very well, one entry per user per namenode,\n      // and may need to be adjusted and/or selectively pruned. The cache is\n      // important due to the excessive overhead of creating a new proxy wrapper\n      // for each individual request.\n\n      // TODO Add tokens from the federated UGI\n      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress);\n      LOG.debug(\"User {} NN {} is using connection {}\",\n          ugi.getUserName(), rpcAddress, connection);\n    } catch (Exception ex) {\n      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n    }\n\n    if (connection \u003d\u003d null) {\n      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n    }\n    return connection;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
      }
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,24 @@\n+  private ConnectionContext getConnection(\n+      UserGroupInformation ugi, String nsId, String rpcAddress)\n+          throws IOException {\n+    ConnectionContext connection \u003d null;\n+    try {\n+      // Each proxy holds the UGI info for the current user when it is created.\n+      // This cache does not scale very well, one entry per user per namenode,\n+      // and may need to be adjusted and/or selectively pruned. The cache is\n+      // important due to the excessive overhead of creating a new proxy wrapper\n+      // for each individual request.\n+\n+      // TODO Add tokens from the federated UGI\n+      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress);\n+      LOG.debug(\"User {} NN {} is using connection {}\",\n+          ugi.getUserName(), rpcAddress, connection);\n+    } catch (Exception ex) {\n+      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n+    }\n+\n+    if (connection \u003d\u003d null) {\n+      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n+    }\n+    return connection;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ConnectionContext getConnection(\n      UserGroupInformation ugi, String nsId, String rpcAddress)\n          throws IOException {\n    ConnectionContext connection \u003d null;\n    try {\n      // Each proxy holds the UGI info for the current user when it is created.\n      // This cache does not scale very well, one entry per user per namenode,\n      // and may need to be adjusted and/or selectively pruned. The cache is\n      // important due to the excessive overhead of creating a new proxy wrapper\n      // for each individual request.\n\n      // TODO Add tokens from the federated UGI\n      connection \u003d this.connectionManager.getConnection(ugi, rpcAddress);\n      LOG.debug(\"User {} NN {} is using connection {}\",\n          ugi.getUserName(), rpcAddress, connection);\n    } catch (Exception ex) {\n      LOG.error(\"Cannot open NN client to address: {}\", rpcAddress, ex);\n    }\n\n    if (connection \u003d\u003d null) {\n      throw new IOException(\"Cannot get a connection to \" + rpcAddress);\n    }\n    return connection;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
    }
  }
}