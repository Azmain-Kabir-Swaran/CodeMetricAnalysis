{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKSignerSecretProvider.java",
  "functionName": "generateZKData",
  "functionId": "generateZKData___newSecret-byte[]__currentSecret-byte[]__previousSecret-byte[]",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java",
  "functionStartLine": 280,
  "functionEndLine": 302,
  "numCommitsSeen": 11,
  "timeTaken": 725,
  "changeHistory": [
    "932ae036acb96634c5dd435d57ba02ce4d5e8918"
  ],
  "changeHistoryShort": {
    "932ae036acb96634c5dd435d57ba02ce4d5e8918": "Yintroduced"
  },
  "changeHistoryDetails": {
    "932ae036acb96634c5dd435d57ba02ce4d5e8918": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10868. AuthenticationFilter should support externalizing the secret for signing and provide rotation support. (rkanter via tucu)\n",
      "commitDate": "15/09/14 5:05 PM",
      "commitName": "932ae036acb96634c5dd435d57ba02ce4d5e8918",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,23 @@\n+  private synchronized byte[] generateZKData(byte[] newSecret,\n+          byte[] currentSecret, byte[] previousSecret) {\n+    int newSecretLength \u003d newSecret.length;\n+    int currentSecretLength \u003d currentSecret.length;\n+    int previousSecretLength \u003d 0;\n+    if (previousSecret !\u003d null) {\n+      previousSecretLength \u003d previousSecret.length;\n+    }\n+    ByteBuffer bb \u003d ByteBuffer.allocate(INT_BYTES + INT_BYTES + newSecretLength\n+        + INT_BYTES + currentSecretLength + INT_BYTES + previousSecretLength\n+        + LONG_BYTES);\n+    bb.putInt(DATA_VERSION);\n+    bb.putInt(newSecretLength);\n+    bb.put(newSecret);\n+    bb.putInt(currentSecretLength);\n+    bb.put(currentSecret);\n+    bb.putInt(previousSecretLength);\n+    if (previousSecretLength \u003e 0) {\n+      bb.put(previousSecret);\n+    }\n+    bb.putLong(nextRolloverDate);\n+    return bb.array();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized byte[] generateZKData(byte[] newSecret,\n          byte[] currentSecret, byte[] previousSecret) {\n    int newSecretLength \u003d newSecret.length;\n    int currentSecretLength \u003d currentSecret.length;\n    int previousSecretLength \u003d 0;\n    if (previousSecret !\u003d null) {\n      previousSecretLength \u003d previousSecret.length;\n    }\n    ByteBuffer bb \u003d ByteBuffer.allocate(INT_BYTES + INT_BYTES + newSecretLength\n        + INT_BYTES + currentSecretLength + INT_BYTES + previousSecretLength\n        + LONG_BYTES);\n    bb.putInt(DATA_VERSION);\n    bb.putInt(newSecretLength);\n    bb.put(newSecret);\n    bb.putInt(currentSecretLength);\n    bb.put(currentSecret);\n    bb.putInt(previousSecretLength);\n    if (previousSecretLength \u003e 0) {\n      bb.put(previousSecret);\n    }\n    bb.putLong(nextRolloverDate);\n    return bb.array();\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java"
    }
  }
}