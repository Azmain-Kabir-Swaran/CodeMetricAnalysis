{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerRequestor.java",
  "functionName": "decResourceRequest",
  "functionId": "decResourceRequest___priority-Priority__resourceName-String__capability-Resource",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
  "functionStartLine": 483,
  "functionEndLine": 533,
  "numCommitsSeen": 39,
  "timeTaken": 7360,
  "changeHistory": [
    "dfd807afab0fae3839c9cc5d552aa0304444f956",
    "35832053bf46f77a6350ef8e716a67f2a374b1a0",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "74748ec62570f92d57dbad3ba4cca47402990db5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "dfd807afab0fae3839c9cc5d552aa0304444f956": "Ybodychange",
    "35832053bf46f77a6350ef8e716a67f2a374b1a0": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "74748ec62570f92d57dbad3ba4cca47402990db5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dfd807afab0fae3839c9cc5d552aa0304444f956": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12428. Fix inconsistency between log-level guards and statements. Contributed by Jagadesh Kiran N and Jackie Chang.\n",
      "commitDate": "21/09/15 8:54 PM",
      "commitName": "dfd807afab0fae3839c9cc5d552aa0304444f956",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "27/05/15 2:26 PM",
      "commitNameOld": "3164e7d83875aa6b7435d1dfe61ac280aa277f1c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 117.27,
      "commitsBetweenForRepo": 726,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private void decResourceRequest(Priority priority, String resourceName,\n       Resource capability) {\n     Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // as we modify the resource requests by filtering out blacklisted hosts \n       // when they are added, this value may be null when being \n       // decremented\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Not decrementing resource as \" + resourceName\n             + \" is not present in request table\");\n       }\n       return;\n     }\n     ResourceRequest remoteRequest \u003d reqMap.get(capability);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\"\n           + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n     }\n \n     if(remoteRequest.getNumContainers() \u003e 0) {\n       // based on blacklisting comments above we can end up decrementing more \n       // than requested. so guard for that.\n       remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n     }\n     \n     if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n       reqMap.remove(capability);\n       if (reqMap.size() \u003d\u003d 0) {\n         remoteRequests.remove(resourceName);\n       }\n       if (remoteRequests.size() \u003d\u003d 0) {\n         remoteRequestsTable.remove(priority);\n       }\n     }\n \n     // send the updated resource request to RM\n     // send 0 container count requests also to cancel previous requests\n     addResourceRequestToAsk(remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n-      LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n+      LOG.debug(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n           + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void decResourceRequest(Priority priority, String resourceName,\n      Resource capability) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // as we modify the resource requests by filtering out blacklisted hosts \n      // when they are added, this value may be null when being \n      // decremented\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Not decrementing resource as \" + resourceName\n            + \" is not present in request table\");\n      }\n      return;\n    }\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\"\n          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n\n    if(remoteRequest.getNumContainers() \u003e 0) {\n      // based on blacklisting comments above we can end up decrementing more \n      // than requested. so guard for that.\n      remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n    }\n    \n    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n      reqMap.remove(capability);\n      if (reqMap.size() \u003d\u003d 0) {\n        remoteRequests.remove(resourceName);\n      }\n      if (remoteRequests.size() \u003d\u003d 0) {\n        remoteRequestsTable.remove(priority);\n      }\n    }\n\n    // send the updated resource request to RM\n    // send 0 container count requests also to cancel previous requests\n    addResourceRequestToAsk(remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "35832053bf46f77a6350ef8e716a67f2a374b1a0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4671. AM does not tell the RM about container requests which are no longer needed. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443323 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/13 11:07 PM",
      "commitName": "35832053bf46f77a6350ef8e716a67f2a374b1a0",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "14/11/12 4:16 PM",
      "commitNameOld": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 84.29,
      "commitsBetweenForRepo": 365,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   private void decResourceRequest(Priority priority, String resourceName,\n       Resource capability) {\n     Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // as we modify the resource requests by filtering out blacklisted hosts \n       // when they are added, this value may be null when being \n       // decremented\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Not decrementing resource as \" + resourceName\n             + \" is not present in request table\");\n       }\n       return;\n     }\n     ResourceRequest remoteRequest \u003d reqMap.get(capability);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\"\n           + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n     }\n \n-    remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n+    if(remoteRequest.getNumContainers() \u003e 0) {\n+      // based on blacklisting comments above we can end up decrementing more \n+      // than requested. so guard for that.\n+      remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n+    }\n+    \n     if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n       reqMap.remove(capability);\n       if (reqMap.size() \u003d\u003d 0) {\n         remoteRequests.remove(resourceName);\n       }\n       if (remoteRequests.size() \u003d\u003d 0) {\n         remoteRequestsTable.remove(priority);\n       }\n-      //remove from ask if it may have\n-      ask.remove(remoteRequest);\n-    } else {\n-      ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n-      //already have it.\n     }\n \n+    // send the updated resource request to RM\n+    // send 0 container count requests also to cancel previous requests\n+    addResourceRequestToAsk(remoteRequest);\n+\n     if (LOG.isDebugEnabled()) {\n       LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n           + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void decResourceRequest(Priority priority, String resourceName,\n      Resource capability) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // as we modify the resource requests by filtering out blacklisted hosts \n      // when they are added, this value may be null when being \n      // decremented\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Not decrementing resource as \" + resourceName\n            + \" is not present in request table\");\n      }\n      return;\n    }\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\"\n          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n\n    if(remoteRequest.getNumContainers() \u003e 0) {\n      // based on blacklisting comments above we can end up decrementing more \n      // than requested. so guard for that.\n      remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n    }\n    \n    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n      reqMap.remove(capability);\n      if (reqMap.size() \u003d\u003d 0) {\n        remoteRequests.remove(resourceName);\n      }\n      if (remoteRequests.size() \u003d\u003d 0) {\n        remoteRequestsTable.remove(priority);\n      }\n    }\n\n    // send the updated resource request to RM\n    // send 0 container count requests also to cancel previous requests\n    addResourceRequestToAsk(remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/12/11 11:54 AM",
      "commitNameOld": "fcbad14a3da7fadbb601bf245552ecca2fbc5026",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 41.09,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   private void decResourceRequest(Priority priority, String resourceName,\n       Resource capability) {\n     Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // as we modify the resource requests by filtering out blacklisted hosts \n       // when they are added, this value may be null when being \n       // decremented\n-      LOG.debug(\"Not decrementing resource as \" + resourceName\n-          + \" is not present in request table\");\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Not decrementing resource as \" + resourceName\n+            + \" is not present in request table\");\n+      }\n       return;\n     }\n     ResourceRequest remoteRequest \u003d reqMap.get(capability);\n \n-    LOG.info(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\" + applicationId.getId()\n-        + \" priority\u003d\" + priority.getPriority() + \" resourceName\u003d\" + resourceName\n-        + \" numContainers\u003d\" + remoteRequest.getNumContainers() + \" #asks\u003d\"\n-        + ask.size());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\"\n+          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n+          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n+          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+    }\n \n     remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n     if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n       reqMap.remove(capability);\n       if (reqMap.size() \u003d\u003d 0) {\n         remoteRequests.remove(resourceName);\n       }\n       if (remoteRequests.size() \u003d\u003d 0) {\n         remoteRequestsTable.remove(priority);\n       }\n       //remove from ask if it may have\n       ask.remove(remoteRequest);\n     } else {\n       ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n       //already have it.\n     }\n \n-    LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n-             + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n-             + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n-             + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n+          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n+          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n+          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void decResourceRequest(Priority priority, String resourceName,\n      Resource capability) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // as we modify the resource requests by filtering out blacklisted hosts \n      // when they are added, this value may be null when being \n      // decremented\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Not decrementing resource as \" + resourceName\n            + \" is not present in request table\");\n      }\n      return;\n    }\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\"\n          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n\n    remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n      reqMap.remove(capability);\n      if (reqMap.size() \u003d\u003d 0) {\n        remoteRequests.remove(resourceName);\n      }\n      if (remoteRequests.size() \u003d\u003d 0) {\n        remoteRequestsTable.remove(priority);\n      }\n      //remove from ask if it may have\n      ask.remove(remoteRequest);\n    } else {\n      ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n      //already have it.\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n          + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "74748ec62570f92d57dbad3ba4cca47402990db5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2693. Fix NPE in job-blacklisting. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186529 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/11 3:02 PM",
      "commitName": "74748ec62570f92d57dbad3ba4cca47402990db5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/09/11 12:31 AM",
      "commitNameOld": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 21.61,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,41 @@\n   private void decResourceRequest(Priority priority, String resourceName,\n       Resource capability) {\n     Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n+    if (reqMap \u003d\u003d null) {\n+      // as we modify the resource requests by filtering out blacklisted hosts \n+      // when they are added, this value may be null when being \n+      // decremented\n+      LOG.debug(\"Not decrementing resource as \" + resourceName\n+          + \" is not present in request table\");\n+      return;\n+    }\n     ResourceRequest remoteRequest \u003d reqMap.get(capability);\n \n     LOG.info(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\" + applicationId.getId()\n         + \" priority\u003d\" + priority.getPriority() + \" resourceName\u003d\" + resourceName\n         + \" numContainers\u003d\" + remoteRequest.getNumContainers() + \" #asks\u003d\"\n         + ask.size());\n \n     remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n     if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n       reqMap.remove(capability);\n       if (reqMap.size() \u003d\u003d 0) {\n         remoteRequests.remove(resourceName);\n       }\n       if (remoteRequests.size() \u003d\u003d 0) {\n         remoteRequestsTable.remove(priority);\n       }\n       //remove from ask if it may have\n       ask.remove(remoteRequest);\n     } else {\n       ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n       //already have it.\n     }\n \n     LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n              + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n              + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n              + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void decResourceRequest(Priority priority, String resourceName,\n      Resource capability) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // as we modify the resource requests by filtering out blacklisted hosts \n      // when they are added, this value may be null when being \n      // decremented\n      LOG.debug(\"Not decrementing resource as \" + resourceName\n          + \" is not present in request table\");\n      return;\n    }\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n\n    LOG.info(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\" + applicationId.getId()\n        + \" priority\u003d\" + priority.getPriority() + \" resourceName\u003d\" + resourceName\n        + \" numContainers\u003d\" + remoteRequest.getNumContainers() + \" #asks\u003d\"\n        + ask.size());\n\n    remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n      reqMap.remove(capability);\n      if (reqMap.size() \u003d\u003d 0) {\n        remoteRequests.remove(resourceName);\n      }\n      if (remoteRequests.size() \u003d\u003d 0) {\n        remoteRequestsTable.remove(priority);\n      }\n      //remove from ask if it may have\n      ask.remove(remoteRequest);\n    } else {\n      ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n      //already have it.\n    }\n\n    LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n             + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n             + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n             + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void decResourceRequest(Priority priority, String resourceName,\n      Resource capability) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n\n    LOG.info(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\" + applicationId.getId()\n        + \" priority\u003d\" + priority.getPriority() + \" resourceName\u003d\" + resourceName\n        + \" numContainers\u003d\" + remoteRequest.getNumContainers() + \" #asks\u003d\"\n        + ask.size());\n\n    remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n      reqMap.remove(capability);\n      if (reqMap.size() \u003d\u003d 0) {\n        remoteRequests.remove(resourceName);\n      }\n      if (remoteRequests.size() \u003d\u003d 0) {\n        remoteRequestsTable.remove(priority);\n      }\n      //remove from ask if it may have\n      ask.remove(remoteRequest);\n    } else {\n      ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n      //already have it.\n    }\n\n    LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n             + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n             + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n             + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,33 @@\n+  private void decResourceRequest(Priority priority, String resourceName,\n+      Resource capability) {\n+    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n+      this.remoteRequestsTable.get(priority);\n+    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n+    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n+\n+    LOG.info(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\" + applicationId.getId()\n+        + \" priority\u003d\" + priority.getPriority() + \" resourceName\u003d\" + resourceName\n+        + \" numContainers\u003d\" + remoteRequest.getNumContainers() + \" #asks\u003d\"\n+        + ask.size());\n+\n+    remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n+    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n+      reqMap.remove(capability);\n+      if (reqMap.size() \u003d\u003d 0) {\n+        remoteRequests.remove(resourceName);\n+      }\n+      if (remoteRequests.size() \u003d\u003d 0) {\n+        remoteRequestsTable.remove(priority);\n+      }\n+      //remove from ask if it may have\n+      ask.remove(remoteRequest);\n+    } else {\n+      ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n+      //already have it.\n+    }\n+\n+    LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n+             + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n+             + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n+             + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void decResourceRequest(Priority priority, String resourceName,\n      Resource capability) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n\n    LOG.info(\"BEFORE decResourceRequest:\" + \" applicationId\u003d\" + applicationId.getId()\n        + \" priority\u003d\" + priority.getPriority() + \" resourceName\u003d\" + resourceName\n        + \" numContainers\u003d\" + remoteRequest.getNumContainers() + \" #asks\u003d\"\n        + ask.size());\n\n    remoteRequest.setNumContainers(remoteRequest.getNumContainers() -1);\n    if (remoteRequest.getNumContainers() \u003d\u003d 0) {\n      reqMap.remove(capability);\n      if (reqMap.size() \u003d\u003d 0) {\n        remoteRequests.remove(resourceName);\n      }\n      if (remoteRequests.size() \u003d\u003d 0) {\n        remoteRequestsTable.remove(priority);\n      }\n      //remove from ask if it may have\n      ask.remove(remoteRequest);\n    } else {\n      ask.add(remoteRequest);//this will override the request if ask doesn\u0027t\n      //already have it.\n    }\n\n    LOG.info(\"AFTER decResourceRequest:\" + \" applicationId\u003d\"\n             + applicationId.getId() + \" priority\u003d\" + priority.getPriority()\n             + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n             + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java"
    }
  }
}