{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MutableCSConfigurationProvider.java",
  "functionName": "addQueue",
  "functionId": "addQueue___addInfo-QueueConfigInfo__proposedConf-CapacitySchedulerConfiguration__confUpdate-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
  "functionStartLine": 304,
  "functionEndLine": 348,
  "numCommitsSeen": 93,
  "timeTaken": 3859,
  "changeHistory": [
    "51e7d1b37eb06165657befdae82c015055c58334",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e"
  ],
  "changeHistoryShort": {
    "51e7d1b37eb06165657befdae82c015055c58334": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ybodychange",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": "Ymultichange(Ymovefromfile,Ybodychange)",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "51e7d1b37eb06165657befdae82c015055c58334": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9950. Unset Ordering Policy of Leaf/Parent queue converted from Parent/Leaf queue respectively. Contributed by Prabhu Joseph.\n",
      "commitDate": "04/11/19 9:57 AM",
      "commitName": "51e7d1b37eb06165657befdae82c015055c58334",
      "commitAuthor": "Sunil G",
      "commitDateOld": "16/10/19 6:13 PM",
      "commitNameOld": "3990ffa0834e6b24314a565a92e92d6e8fa37a1e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 18.7,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,45 @@\n   private void addQueue(\n       QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (addInfo \u003d\u003d null) {\n       return;\n     } else {\n       String queuePath \u003d addInfo.getQueue();\n       String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n       if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n       } else if (getSiblingQueues(queuePath, proposedConf).contains(\n           queueName)) {\n         throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n       }\n       String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n       String[] siblings \u003d proposedConf.getQueues(parentQueue);\n       List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n           new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n       siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n       proposedConf.setQueues(parentQueue,\n           siblingQueues.toArray(new String[0]));\n       confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n               + parentQueue + CapacitySchedulerConfiguration.DOT\n               + CapacitySchedulerConfiguration.QUEUES,\n           Joiner.on(\u0027,\u0027).join(siblingQueues));\n       String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n           + queuePath + CapacitySchedulerConfiguration.DOT;\n       for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n         if (kv.getValue() \u003d\u003d null) {\n           proposedConf.unset(keyPrefix + kv.getKey());\n         } else {\n           proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n         }\n         confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n       }\n+      // Unset Ordering Policy of Parent Queue converted from\n+      // Leaf Queue after addQueue\n+      String queueOrderingPolicy \u003d CapacitySchedulerConfiguration.PREFIX\n+          + parentQueue + CapacitySchedulerConfiguration.DOT + ORDERING_POLICY;\n+      if (siblingQueues.size() \u003d\u003d 1) {\n+        proposedConf.unset(queueOrderingPolicy);\n+        confUpdate.put(queueOrderingPolicy, null);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addQueue(\n      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (addInfo \u003d\u003d null) {\n      return;\n    } else {\n      String queuePath \u003d addInfo.getQueue();\n      String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n      if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n      } else if (getSiblingQueues(queuePath, proposedConf).contains(\n          queueName)) {\n        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n      }\n      String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n      String[] siblings \u003d proposedConf.getQueues(parentQueue);\n      List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n          new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n      proposedConf.setQueues(parentQueue,\n          siblingQueues.toArray(new String[0]));\n      confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n              + parentQueue + CapacitySchedulerConfiguration.DOT\n              + CapacitySchedulerConfiguration.QUEUES,\n          Joiner.on(\u0027,\u0027).join(siblingQueues));\n      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n          + queuePath + CapacitySchedulerConfiguration.DOT;\n      for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n        if (kv.getValue() \u003d\u003d null) {\n          proposedConf.unset(keyPrefix + kv.getKey());\n        } else {\n          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n        }\n        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n      }\n      // Unset Ordering Policy of Parent Queue converted from\n      // Leaf Queue after addQueue\n      String queueOrderingPolicy \u003d CapacitySchedulerConfiguration.PREFIX\n          + parentQueue + CapacitySchedulerConfiguration.DOT + ORDERING_POLICY;\n      if (siblingQueues.size() \u003d\u003d 1) {\n        proposedConf.unset(queueOrderingPolicy);\n        confUpdate.put(queueOrderingPolicy, null);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "4c8b208adb8c7639628676387e275856cf0842c9",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void addQueue(\n       QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (addInfo \u003d\u003d null) {\n       return;\n     } else {\n-      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n       String queuePath \u003d addInfo.getQueue();\n       String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n-      if (cs.getQueue(queueName) !\u003d null) {\n-        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n-      } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n+      if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n+      } else if (getSiblingQueues(queuePath, proposedConf).contains(\n+          queueName)) {\n+        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n       }\n       String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n       String[] siblings \u003d proposedConf.getQueues(parentQueue);\n       List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n           new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n       siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n       proposedConf.setQueues(parentQueue,\n           siblingQueues.toArray(new String[0]));\n       confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n               + parentQueue + CapacitySchedulerConfiguration.DOT\n               + CapacitySchedulerConfiguration.QUEUES,\n           Joiner.on(\u0027,\u0027).join(siblingQueues));\n       String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n           + queuePath + CapacitySchedulerConfiguration.DOT;\n       for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n         if (kv.getValue() \u003d\u003d null) {\n           proposedConf.unset(keyPrefix + kv.getKey());\n         } else {\n           proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n         }\n         confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addQueue(\n      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (addInfo \u003d\u003d null) {\n      return;\n    } else {\n      String queuePath \u003d addInfo.getQueue();\n      String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n      if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n      } else if (getSiblingQueues(queuePath, proposedConf).contains(\n          queueName)) {\n        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n      }\n      String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n      String[] siblings \u003d proposedConf.getQueues(parentQueue);\n      List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n          new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n      proposedConf.setQueues(parentQueue,\n          siblingQueues.toArray(new String[0]));\n      confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n              + parentQueue + CapacitySchedulerConfiguration.DOT\n              + CapacitySchedulerConfiguration.QUEUES,\n          Joiner.on(\u0027,\u0027).join(siblingQueues));\n      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n          + queuePath + CapacitySchedulerConfiguration.DOT;\n      for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n        if (kv.getValue() \u003d\u003d null) {\n          proposedConf.unset(keyPrefix + kv.getKey());\n        } else {\n          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n        }\n        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   private void addQueue(\n       QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (addInfo \u003d\u003d null) {\n       return;\n     } else {\n-      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n+      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n       String queuePath \u003d addInfo.getQueue();\n       String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n       if (cs.getQueue(queueName) !\u003d null) {\n         throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n       } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n       }\n       String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n       String[] siblings \u003d proposedConf.getQueues(parentQueue);\n       List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n           new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n       siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n       proposedConf.setQueues(parentQueue,\n           siblingQueues.toArray(new String[0]));\n-      confUpdate.put(CapacitySchedulerConfiguration.PREFIX +\n-          parentQueue + CapacitySchedulerConfiguration.DOT +\n-          CapacitySchedulerConfiguration.QUEUES,\n+      confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n+              + parentQueue + CapacitySchedulerConfiguration.DOT\n+              + CapacitySchedulerConfiguration.QUEUES,\n           Joiner.on(\u0027,\u0027).join(siblingQueues));\n-      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX +\n-          queuePath + CapacitySchedulerConfiguration.DOT;\n+      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n+          + queuePath + CapacitySchedulerConfiguration.DOT;\n       for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n         if (kv.getValue() \u003d\u003d null) {\n           proposedConf.unset(keyPrefix + kv.getKey());\n         } else {\n           proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n         }\n         confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addQueue(\n      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (addInfo \u003d\u003d null) {\n      return;\n    } else {\n      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n      String queuePath \u003d addInfo.getQueue();\n      String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n      if (cs.getQueue(queueName) !\u003d null) {\n        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n      } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n      }\n      String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n      String[] siblings \u003d proposedConf.getQueues(parentQueue);\n      List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n          new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n      proposedConf.setQueues(parentQueue,\n          siblingQueues.toArray(new String[0]));\n      confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n              + parentQueue + CapacitySchedulerConfiguration.DOT\n              + CapacitySchedulerConfiguration.QUEUES,\n          Joiner.on(\u0027,\u0027).join(siblingQueues));\n      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n          + queuePath + CapacitySchedulerConfiguration.DOT;\n      for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n        if (kv.getValue() \u003d\u003d null) {\n          proposedConf.unset(keyPrefix + kv.getKey());\n        } else {\n          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n        }\n        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
            "oldMethodName": "addQueue",
            "newMethodName": "addQueue"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   private void addQueue(\n       QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (addInfo \u003d\u003d null) {\n       return;\n     } else {\n-      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n+      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n       String queuePath \u003d addInfo.getQueue();\n       String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n       if (cs.getQueue(queueName) !\u003d null) {\n         throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n       } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n       }\n       String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n       String[] siblings \u003d proposedConf.getQueues(parentQueue);\n       List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n           new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n       siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n       proposedConf.setQueues(parentQueue,\n           siblingQueues.toArray(new String[0]));\n-      confUpdate.put(CapacitySchedulerConfiguration.PREFIX +\n-          parentQueue + CapacitySchedulerConfiguration.DOT +\n-          CapacitySchedulerConfiguration.QUEUES,\n+      confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n+              + parentQueue + CapacitySchedulerConfiguration.DOT\n+              + CapacitySchedulerConfiguration.QUEUES,\n           Joiner.on(\u0027,\u0027).join(siblingQueues));\n-      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX +\n-          queuePath + CapacitySchedulerConfiguration.DOT;\n+      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n+          + queuePath + CapacitySchedulerConfiguration.DOT;\n       for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n         if (kv.getValue() \u003d\u003d null) {\n           proposedConf.unset(keyPrefix + kv.getKey());\n         } else {\n           proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n         }\n         confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addQueue(\n      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (addInfo \u003d\u003d null) {\n      return;\n    } else {\n      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n      String queuePath \u003d addInfo.getQueue();\n      String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n      if (cs.getQueue(queueName) !\u003d null) {\n        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n      } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n      }\n      String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n      String[] siblings \u003d proposedConf.getQueues(parentQueue);\n      List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n          new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n      proposedConf.setQueues(parentQueue,\n          siblingQueues.toArray(new String[0]));\n      confUpdate.put(CapacitySchedulerConfiguration.PREFIX\n              + parentQueue + CapacitySchedulerConfiguration.DOT\n              + CapacitySchedulerConfiguration.QUEUES,\n          Joiner.on(\u0027,\u0027).join(siblingQueues));\n      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX\n          + queuePath + CapacitySchedulerConfiguration.DOT;\n      for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n        if (kv.getValue() \u003d\u003d null) {\n          proposedConf.unset(keyPrefix + kv.getKey());\n        } else {\n          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n        }\n        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5952. Create REST API for changing YARN scheduler configurations. (Jonathan Hung via wangda)\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,37 @@\n+  private void addQueue(\n+      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n+      Map\u003cString, String\u003e confUpdate) throws IOException {\n+    if (addInfo \u003d\u003d null) {\n+      return;\n+    } else {\n+      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n+      String queuePath \u003d addInfo.getQueue();\n+      String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n+      if (cs.getQueue(queueName) !\u003d null) {\n+        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n+      } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n+        throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n+      }\n+      String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n+      String[] siblings \u003d proposedConf.getQueues(parentQueue);\n+      List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n+          new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n+      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n+      proposedConf.setQueues(parentQueue,\n+          siblingQueues.toArray(new String[0]));\n+      confUpdate.put(CapacitySchedulerConfiguration.PREFIX +\n+          parentQueue + CapacitySchedulerConfiguration.DOT +\n+          CapacitySchedulerConfiguration.QUEUES,\n+          Joiner.on(\u0027,\u0027).join(siblingQueues));\n+      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX +\n+          queuePath + CapacitySchedulerConfiguration.DOT;\n+      for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n+        if (kv.getValue() \u003d\u003d null) {\n+          proposedConf.unset(keyPrefix + kv.getKey());\n+        } else {\n+          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n+        }\n+        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addQueue(\n      QueueConfigInfo addInfo, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (addInfo \u003d\u003d null) {\n      return;\n    } else {\n      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n      String queuePath \u003d addInfo.getQueue();\n      String queueName \u003d queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1);\n      if (cs.getQueue(queueName) !\u003d null) {\n        throw new IOException(\"Can\u0027t add existing queue \" + queuePath);\n      } else if (queuePath.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t add invalid queue \" + queuePath);\n      }\n      String parentQueue \u003d queuePath.substring(0, queuePath.lastIndexOf(\u0027.\u0027));\n      String[] siblings \u003d proposedConf.getQueues(parentQueue);\n      List\u003cString\u003e siblingQueues \u003d siblings \u003d\u003d null ? new ArrayList\u003c\u003e() :\n          new ArrayList\u003c\u003e(Arrays.\u003cString\u003easList(siblings));\n      siblingQueues.add(queuePath.substring(queuePath.lastIndexOf(\u0027.\u0027) + 1));\n      proposedConf.setQueues(parentQueue,\n          siblingQueues.toArray(new String[0]));\n      confUpdate.put(CapacitySchedulerConfiguration.PREFIX +\n          parentQueue + CapacitySchedulerConfiguration.DOT +\n          CapacitySchedulerConfiguration.QUEUES,\n          Joiner.on(\u0027,\u0027).join(siblingQueues));\n      String keyPrefix \u003d CapacitySchedulerConfiguration.PREFIX +\n          queuePath + CapacitySchedulerConfiguration.DOT;\n      for (Map.Entry\u003cString, String\u003e kv : addInfo.getParams().entrySet()) {\n        if (kv.getValue() \u003d\u003d null) {\n          proposedConf.unset(keyPrefix + kv.getKey());\n        } else {\n          proposedConf.set(keyPrefix + kv.getKey(), kv.getValue());\n        }\n        confUpdate.put(keyPrefix + kv.getKey(), kv.getValue());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}