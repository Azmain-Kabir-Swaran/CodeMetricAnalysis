{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CSQueueUtils.java",
  "functionName": "capacitiesSanityCheck",
  "functionId": "capacitiesSanityCheck___queueName-String__queueCapacities-QueueCapacities",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueueUtils.java",
  "functionStartLine": 67,
  "functionEndLine": 82,
  "numCommitsSeen": 31,
  "timeTaken": 2568,
  "changeHistory": [
    "8c1bba375b144fd515b389174ddb349f2d9246fa",
    "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8",
    "18a594257e052e8f10a03e5594e6cc6901dc56be"
  ],
  "changeHistoryShort": {
    "8c1bba375b144fd515b389174ddb349f2d9246fa": "Ybodychange",
    "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8": "Ybodychange",
    "18a594257e052e8f10a03e5594e6cc6901dc56be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c1bba375b144fd515b389174ddb349f2d9246fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9463. Add queueName info when failing with queue capacity sanity check. Contributed by Aihua Xu.\n",
      "commitDate": "10/04/19 7:51 AM",
      "commitName": "8c1bba375b144fd515b389174ddb349f2d9246fa",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/12/18 10:45 AM",
      "commitNameOld": "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 123.84,
      "commitsBetweenForRepo": 906,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   private static void capacitiesSanityCheck(String queueName,\n       QueueCapacities queueCapacities) {\n     for (String label : queueCapacities.getExistingNodeLabels()) {\n       // The only thing we should care about is absolute capacity \u003c\u003d\n       // absolute max capacity otherwise the absolute max capacity is\n       // no longer an absolute maximum.\n       float absCapacity \u003d queueCapacities.getAbsoluteCapacity(label);\n       float absMaxCapacity \u003d queueCapacities.getAbsoluteMaximumCapacity(label);\n       if (absCapacity \u003e absMaxCapacity) {\n-        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n+        throw new IllegalArgumentException(\"Illegal queue capacity setting \"\n             + \"(abs-capacity\u003d\" + absCapacity + \") \u003e (abs-maximum-capacity\u003d\"\n-            + absMaxCapacity + \"). When label\u003d[\" + label + \"]\");\n+            + absMaxCapacity + \") for queue\u003d[\"\n+            + queueName + \"],label\u003d[\" + label + \"]\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void capacitiesSanityCheck(String queueName,\n      QueueCapacities queueCapacities) {\n    for (String label : queueCapacities.getExistingNodeLabels()) {\n      // The only thing we should care about is absolute capacity \u003c\u003d\n      // absolute max capacity otherwise the absolute max capacity is\n      // no longer an absolute maximum.\n      float absCapacity \u003d queueCapacities.getAbsoluteCapacity(label);\n      float absMaxCapacity \u003d queueCapacities.getAbsoluteMaximumCapacity(label);\n      if (absCapacity \u003e absMaxCapacity) {\n        throw new IllegalArgumentException(\"Illegal queue capacity setting \"\n            + \"(abs-capacity\u003d\" + absCapacity + \") \u003e (abs-maximum-capacity\u003d\"\n            + absMaxCapacity + \") for queue\u003d[\"\n            + queueName + \"],label\u003d[\" + label + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueueUtils.java",
      "extendedDetails": {}
    },
    "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7274. Ability to disable elasticity at leaf queue level. (Zian Chen via wangda)\n\nChange-Id: Ic8d43e297f0f5de788b562f7eff8106c5c35e8d2\n",
      "commitDate": "08/12/17 3:07 PM",
      "commitName": "74665e3a7d7f05644d9a5abad5a3f2d47597d6c8",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "b7b8cd53242da8d47ba4a6d99d906bdb2a1a3494",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,15 @@\n   private static void capacitiesSanityCheck(String queueName,\n       QueueCapacities queueCapacities) {\n     for (String label : queueCapacities.getExistingNodeLabels()) {\n-      float capacity \u003d queueCapacities.getCapacity(label);\n-      float maximumCapacity \u003d queueCapacities.getMaximumCapacity(label);\n-      if (capacity \u003e maximumCapacity) {\n-        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n-            + \"(capacity\u003d\" + capacity + \") \u003e (maximum-capacity\u003d\"\n-            + maximumCapacity + \"). When label\u003d[\" + label + \"]\");\n-      }\n-     \n-      // Actually, this may not needed since we have verified capacity \u003c\u003d\n-      // maximumCapacity. And the way we compute absolute capacity (abs(x) \u003d\n-      // cap(x) * cap(x.parent) * ...) is a monotone increasing function. But\n-      // just keep it here to make sure our compute abs capacity method works\n-      // correctly. \n+      // The only thing we should care about is absolute capacity \u003c\u003d\n+      // absolute max capacity otherwise the absolute max capacity is\n+      // no longer an absolute maximum.\n       float absCapacity \u003d queueCapacities.getAbsoluteCapacity(label);\n       float absMaxCapacity \u003d queueCapacities.getAbsoluteMaximumCapacity(label);\n       if (absCapacity \u003e absMaxCapacity) {\n         throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n             + \"(abs-capacity\u003d\" + absCapacity + \") \u003e (abs-maximum-capacity\u003d\"\n             + absMaxCapacity + \"). When label\u003d[\" + label + \"]\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void capacitiesSanityCheck(String queueName,\n      QueueCapacities queueCapacities) {\n    for (String label : queueCapacities.getExistingNodeLabels()) {\n      // The only thing we should care about is absolute capacity \u003c\u003d\n      // absolute max capacity otherwise the absolute max capacity is\n      // no longer an absolute maximum.\n      float absCapacity \u003d queueCapacities.getAbsoluteCapacity(label);\n      float absMaxCapacity \u003d queueCapacities.getAbsoluteMaximumCapacity(label);\n      if (absCapacity \u003e absMaxCapacity) {\n        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n            + \"(abs-capacity\u003d\" + absCapacity + \") \u003e (abs-maximum-capacity\u003d\"\n            + absMaxCapacity + \"). When label\u003d[\" + label + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueueUtils.java",
      "extendedDetails": {}
    },
    "18a594257e052e8f10a03e5594e6cc6901dc56be": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
      "commitDate": "12/02/15 2:58 PM",
      "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,25 @@\n+  private static void capacitiesSanityCheck(String queueName,\n+      QueueCapacities queueCapacities) {\n+    for (String label : queueCapacities.getExistingNodeLabels()) {\n+      float capacity \u003d queueCapacities.getCapacity(label);\n+      float maximumCapacity \u003d queueCapacities.getMaximumCapacity(label);\n+      if (capacity \u003e maximumCapacity) {\n+        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n+            + \"(capacity\u003d\" + capacity + \") \u003e (maximum-capacity\u003d\"\n+            + maximumCapacity + \"). When label\u003d[\" + label + \"]\");\n+      }\n+     \n+      // Actually, this may not needed since we have verified capacity \u003c\u003d\n+      // maximumCapacity. And the way we compute absolute capacity (abs(x) \u003d\n+      // cap(x) * cap(x.parent) * ...) is a monotone increasing function. But\n+      // just keep it here to make sure our compute abs capacity method works\n+      // correctly. \n+      float absCapacity \u003d queueCapacities.getAbsoluteCapacity(label);\n+      float absMaxCapacity \u003d queueCapacities.getAbsoluteMaximumCapacity(label);\n+      if (absCapacity \u003e absMaxCapacity) {\n+        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n+            + \"(abs-capacity\u003d\" + absCapacity + \") \u003e (abs-maximum-capacity\u003d\"\n+            + absMaxCapacity + \"). When label\u003d[\" + label + \"]\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void capacitiesSanityCheck(String queueName,\n      QueueCapacities queueCapacities) {\n    for (String label : queueCapacities.getExistingNodeLabels()) {\n      float capacity \u003d queueCapacities.getCapacity(label);\n      float maximumCapacity \u003d queueCapacities.getMaximumCapacity(label);\n      if (capacity \u003e maximumCapacity) {\n        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n            + \"(capacity\u003d\" + capacity + \") \u003e (maximum-capacity\u003d\"\n            + maximumCapacity + \"). When label\u003d[\" + label + \"]\");\n      }\n     \n      // Actually, this may not needed since we have verified capacity \u003c\u003d\n      // maximumCapacity. And the way we compute absolute capacity (abs(x) \u003d\n      // cap(x) * cap(x.parent) * ...) is a monotone increasing function. But\n      // just keep it here to make sure our compute abs capacity method works\n      // correctly. \n      float absCapacity \u003d queueCapacities.getAbsoluteCapacity(label);\n      float absMaxCapacity \u003d queueCapacities.getAbsoluteMaximumCapacity(label);\n      if (absCapacity \u003e absMaxCapacity) {\n        throw new IllegalArgumentException(\"Illegal queue capacity setting, \"\n            + \"(abs-capacity\u003d\" + absCapacity + \") \u003e (abs-maximum-capacity\u003d\"\n            + absMaxCapacity + \"). When label\u003d[\" + label + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueueUtils.java"
    }
  }
}