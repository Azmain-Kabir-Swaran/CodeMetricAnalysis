{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrashPolicyDefault.java",
  "functionName": "moveToTrash",
  "functionId": "moveToTrash___path-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
  "functionStartLine": 123,
  "functionEndLine": 196,
  "numCommitsSeen": 31,
  "timeTaken": 2644,
  "changeHistory": [
    "f9c6fd94711458b77ecf3fa425aad7fda5089376",
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "c49333becfa7652460976a61eb86522010bcfeed",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
    "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "184ff33de5598b04bf968ea3b113b175a4225b82"
  ],
  "changeHistoryShort": {
    "f9c6fd94711458b77ecf3fa425aad7fda5089376": "Ybodychange",
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "c49333becfa7652460976a61eb86522010bcfeed": "Ybodychange",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": "Ybodychange",
    "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "184ff33de5598b04bf968ea3b113b175a4225b82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f9c6fd94711458b77ecf3fa425aad7fda5089376": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15633. fs.TrashPolicyDefault: Can\u0027t create trash directory. Contributed by Fei Hui.\n",
      "commitDate": "27/08/18 9:22 AM",
      "commitName": "f9c6fd94711458b77ecf3fa425aad7fda5089376",
      "commitAuthor": "John Zhuge",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 405.49,
      "commitsBetweenForRepo": 3589,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,74 @@\n   public boolean moveToTrash(Path path) throws IOException {\n     if (!isEnabled())\n       return false;\n \n     if (!path.isAbsolute())                       // make path absolute\n       path \u003d new Path(fs.getWorkingDirectory(), path);\n \n     // check that path exists\n     fs.getFileStatus(path);\n     String qpath \u003d fs.makeQualified(path).toString();\n \n     Path trashRoot \u003d fs.getTrashRoot(path);\n     Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n     if (qpath.startsWith(trashRoot.toString())) {\n       return false;                               // already in trash\n     }\n \n     if (trashRoot.getParent().toString().startsWith(qpath)) {\n       throw new IOException(\"Cannot move \\\"\" + path +\n                             \"\\\" to the trash, as it contains the trash\");\n     }\n \n     Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n     Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n     \n     IOException cause \u003d null;\n \n     // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n     for (int i \u003d 0; i \u003c 2; i++) {\n       try {\n         if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n           LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n           return false;\n         }\n+      } catch (FileAlreadyExistsException e) {\n+        // find the path which is not a directory, and modify baseTrashPath\n+        // \u0026 trashPath, then mkdirs\n+        Path existsFilePath \u003d baseTrashPath;\n+        while (!fs.exists(existsFilePath)) {\n+          existsFilePath \u003d existsFilePath.getParent();\n+        }\n+        baseTrashPath \u003d new Path(baseTrashPath.toString().replace(\n+            existsFilePath.toString(), existsFilePath.toString() + Time.now())\n+        );\n+        trashPath \u003d new Path(baseTrashPath, trashPath.getName());\n+        // retry, ignore current failure\n+        --i;\n+        continue;\n       } catch (IOException e) {\n         LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n         cause \u003d e;\n         break;\n       }\n       try {\n         // if the target path in Trash already exists, then append with \n         // a current time in millisecs.\n         String orig \u003d trashPath.toString();\n         \n         while(fs.exists(trashPath)) {\n           trashPath \u003d new Path(orig + Time.now());\n         }\n         \n         // move to current trash\n         fs.rename(path, trashPath,\n             Rename.TO_TRASH);\n         LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n         return true;\n       } catch (IOException e) {\n         cause \u003d e;\n       }\n     }\n     throw (IOException)\n       new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    // check that path exists\n    fs.getFileStatus(path);\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    Path trashRoot \u003d fs.getTrashRoot(path);\n    Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n    if (qpath.startsWith(trashRoot.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trashRoot.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n          return false;\n        }\n      } catch (FileAlreadyExistsException e) {\n        // find the path which is not a directory, and modify baseTrashPath\n        // \u0026 trashPath, then mkdirs\n        Path existsFilePath \u003d baseTrashPath;\n        while (!fs.exists(existsFilePath)) {\n          existsFilePath \u003d existsFilePath.getParent();\n        }\n        baseTrashPath \u003d new Path(baseTrashPath.toString().replace(\n            existsFilePath.toString(), existsFilePath.toString() + Time.now())\n        );\n        trashPath \u003d new Path(baseTrashPath, trashPath.getName());\n        // retry, ignore current failure\n        --i;\n        continue;\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + Time.now());\n        }\n        \n        // move to current trash\n        fs.rename(path, trashPath,\n            Rename.TO_TRASH);\n        LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n        return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "13/10/16 11:05 PM",
      "commitNameOld": "dbe663d5241feea0c88a3a9391ad48a029001d94",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 32.54,
      "commitsBetweenForRepo": 301,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,60 @@\n   public boolean moveToTrash(Path path) throws IOException {\n     if (!isEnabled())\n       return false;\n \n     if (!path.isAbsolute())                       // make path absolute\n       path \u003d new Path(fs.getWorkingDirectory(), path);\n \n-    if (!fs.exists(path))                         // check that path exists\n-      throw new FileNotFoundException(path.toString());\n-\n+    // check that path exists\n+    fs.getFileStatus(path);\n     String qpath \u003d fs.makeQualified(path).toString();\n \n     Path trashRoot \u003d fs.getTrashRoot(path);\n     Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n     if (qpath.startsWith(trashRoot.toString())) {\n       return false;                               // already in trash\n     }\n \n     if (trashRoot.getParent().toString().startsWith(qpath)) {\n       throw new IOException(\"Cannot move \\\"\" + path +\n                             \"\\\" to the trash, as it contains the trash\");\n     }\n \n     Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n     Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n     \n     IOException cause \u003d null;\n \n     // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n     for (int i \u003d 0; i \u003c 2; i++) {\n       try {\n         if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n           LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n           return false;\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n         cause \u003d e;\n         break;\n       }\n       try {\n         // if the target path in Trash already exists, then append with \n         // a current time in millisecs.\n         String orig \u003d trashPath.toString();\n         \n         while(fs.exists(trashPath)) {\n           trashPath \u003d new Path(orig + Time.now());\n         }\n         \n         // move to current trash\n         fs.rename(path, trashPath,\n             Rename.TO_TRASH);\n         LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n         return true;\n       } catch (IOException e) {\n         cause \u003d e;\n       }\n     }\n     throw (IOException)\n       new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    // check that path exists\n    fs.getFileStatus(path);\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    Path trashRoot \u003d fs.getTrashRoot(path);\n    Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n    if (qpath.startsWith(trashRoot.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trashRoot.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + Time.now());\n        }\n        \n        // move to current trash\n        fs.rename(path, trashPath,\n            Rename.TO_TRASH);\n        LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n        return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "c49333becfa7652460976a61eb86522010bcfeed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8312. Added permission check for moving file to Trash. (Weiwei Yang via Eric Yang)\n",
      "commitDate": "22/08/16 6:29 PM",
      "commitName": "c49333becfa7652460976a61eb86522010bcfeed",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/05/16 6:08 PM",
      "commitNameOld": "dacd1f50feb24ccdf6155b2b7a6126fe21a47ad0",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 109.01,
      "commitsBetweenForRepo": 863,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   public boolean moveToTrash(Path path) throws IOException {\n     if (!isEnabled())\n       return false;\n \n     if (!path.isAbsolute())                       // make path absolute\n       path \u003d new Path(fs.getWorkingDirectory(), path);\n \n     if (!fs.exists(path))                         // check that path exists\n       throw new FileNotFoundException(path.toString());\n \n     String qpath \u003d fs.makeQualified(path).toString();\n \n     Path trashRoot \u003d fs.getTrashRoot(path);\n     Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n     if (qpath.startsWith(trashRoot.toString())) {\n       return false;                               // already in trash\n     }\n \n     if (trashRoot.getParent().toString().startsWith(qpath)) {\n       throw new IOException(\"Cannot move \\\"\" + path +\n                             \"\\\" to the trash, as it contains the trash\");\n     }\n \n     Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n     Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n     \n     IOException cause \u003d null;\n \n     // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n     for (int i \u003d 0; i \u003c 2; i++) {\n       try {\n         if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n           LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n           return false;\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n         cause \u003d e;\n         break;\n       }\n       try {\n         // if the target path in Trash already exists, then append with \n         // a current time in millisecs.\n         String orig \u003d trashPath.toString();\n         \n         while(fs.exists(trashPath)) {\n           trashPath \u003d new Path(orig + Time.now());\n         }\n         \n-        if (fs.rename(path, trashPath)) {           // move to current trash\n-          LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n-          return true;\n-        }\n+        // move to current trash\n+        fs.rename(path, trashPath,\n+            Rename.TO_TRASH);\n+        LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n+        return true;\n       } catch (IOException e) {\n         cause \u003d e;\n       }\n     }\n     throw (IOException)\n       new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    Path trashRoot \u003d fs.getTrashRoot(path);\n    Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n    if (qpath.startsWith(trashRoot.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trashRoot.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + Time.now());\n        }\n        \n        // move to current trash\n        fs.rename(path, trashPath,\n            Rename.TO_TRASH);\n        LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n        return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8831. Trash Support for deletion in HDFS encryption zone. Contributed by Xiaoyu Yao.\n",
      "commitDate": "04/12/15 10:39 AM",
      "commitName": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "24/08/15 10:51 PM",
      "commitNameOld": "af78767870b8296886c03f8be24cf13a4e2bd4b0",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 101.53,
      "commitsBetweenForRepo": 748,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,60 @@\n   public boolean moveToTrash(Path path) throws IOException {\n     if (!isEnabled())\n       return false;\n \n     if (!path.isAbsolute())                       // make path absolute\n       path \u003d new Path(fs.getWorkingDirectory(), path);\n \n     if (!fs.exists(path))                         // check that path exists\n       throw new FileNotFoundException(path.toString());\n \n     String qpath \u003d fs.makeQualified(path).toString();\n \n-    if (qpath.startsWith(trash.toString())) {\n+    Path trashRoot \u003d fs.getTrashRoot(path);\n+    Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n+    if (qpath.startsWith(trashRoot.toString())) {\n       return false;                               // already in trash\n     }\n \n-    if (trash.getParent().toString().startsWith(qpath)) {\n+    if (trashRoot.getParent().toString().startsWith(qpath)) {\n       throw new IOException(\"Cannot move \\\"\" + path +\n                             \"\\\" to the trash, as it contains the trash\");\n     }\n \n-    Path trashPath \u003d makeTrashRelativePath(current, path);\n-    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n+    Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n+    Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n     \n     IOException cause \u003d null;\n \n     // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n     for (int i \u003d 0; i \u003c 2; i++) {\n       try {\n         if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n           LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n           return false;\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n         cause \u003d e;\n         break;\n       }\n       try {\n         // if the target path in Trash already exists, then append with \n         // a current time in millisecs.\n         String orig \u003d trashPath.toString();\n         \n         while(fs.exists(trashPath)) {\n           trashPath \u003d new Path(orig + Time.now());\n         }\n         \n-        if (fs.rename(path, trashPath))           // move to current trash\n+        if (fs.rename(path, trashPath)) {           // move to current trash\n+          LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n           return true;\n+        }\n       } catch (IOException e) {\n         cause \u003d e;\n       }\n     }\n     throw (IOException)\n-      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n+      new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    Path trashRoot \u003d fs.getTrashRoot(path);\n    Path trashCurrent \u003d new Path(trashRoot, CURRENT);\n    if (qpath.startsWith(trashRoot.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trashRoot.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(trashCurrent, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(trashCurrent, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + Time.now());\n        }\n        \n        if (fs.rename(path, trashPath)) {           // move to current trash\n          LOG.info(\"Moved: \u0027\" + path + \"\u0027 to trash at: \" + trashPath);\n          return true;\n        }\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \" + path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8179. DFSClient#getServerDefaults returns null within 1 hour of system start. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "20/04/15 3:42 PM",
      "commitName": "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "02/12/13 7:31 PM",
      "commitNameOld": "9b08654536889650c611f4a2f794822bb192650b",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 503.8,
      "commitsBetweenForRepo": 3960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public boolean moveToTrash(Path path) throws IOException {\n     if (!isEnabled())\n       return false;\n \n     if (!path.isAbsolute())                       // make path absolute\n       path \u003d new Path(fs.getWorkingDirectory(), path);\n \n     if (!fs.exists(path))                         // check that path exists\n       throw new FileNotFoundException(path.toString());\n \n     String qpath \u003d fs.makeQualified(path).toString();\n \n     if (qpath.startsWith(trash.toString())) {\n       return false;                               // already in trash\n     }\n \n     if (trash.getParent().toString().startsWith(qpath)) {\n       throw new IOException(\"Cannot move \\\"\" + path +\n                             \"\\\" to the trash, as it contains the trash\");\n     }\n \n     Path trashPath \u003d makeTrashRelativePath(current, path);\n     Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n     \n     IOException cause \u003d null;\n \n     // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n     for (int i \u003d 0; i \u003c 2; i++) {\n       try {\n         if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n-          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n+          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n           return false;\n         }\n       } catch (IOException e) {\n-        LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n+        LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n         cause \u003d e;\n         break;\n       }\n       try {\n         // if the target path in Trash already exists, then append with \n         // a current time in millisecs.\n         String orig \u003d trashPath.toString();\n         \n         while(fs.exists(trashPath)) {\n           trashPath \u003d new Path(orig + Time.now());\n         }\n         \n         if (fs.rename(path, trashPath))           // move to current trash\n           return true;\n       } catch (IOException e) {\n         cause \u003d e;\n       }\n     }\n     throw (IOException)\n       new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    if (qpath.startsWith(trash.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trash.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(current, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \" + baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \" + baseTrashPath, e);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + Time.now());\n        }\n        \n        if (fs.rename(path, trashPath))           // move to current trash\n          return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "03/07/12 12:59 PM",
      "commitNameOld": "3c2101ae4a65af4b68a08651c27966490e8fbef0",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public boolean moveToTrash(Path path) throws IOException {\n     if (!isEnabled())\n       return false;\n \n     if (!path.isAbsolute())                       // make path absolute\n       path \u003d new Path(fs.getWorkingDirectory(), path);\n \n     if (!fs.exists(path))                         // check that path exists\n       throw new FileNotFoundException(path.toString());\n \n     String qpath \u003d fs.makeQualified(path).toString();\n \n     if (qpath.startsWith(trash.toString())) {\n       return false;                               // already in trash\n     }\n \n     if (trash.getParent().toString().startsWith(qpath)) {\n       throw new IOException(\"Cannot move \\\"\" + path +\n                             \"\\\" to the trash, as it contains the trash\");\n     }\n \n     Path trashPath \u003d makeTrashRelativePath(current, path);\n     Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n     \n     IOException cause \u003d null;\n \n     // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n     for (int i \u003d 0; i \u003c 2; i++) {\n       try {\n         if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n           LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n           return false;\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n         cause \u003d e;\n         break;\n       }\n       try {\n         // if the target path in Trash already exists, then append with \n         // a current time in millisecs.\n         String orig \u003d trashPath.toString();\n         \n         while(fs.exists(trashPath)) {\n-          trashPath \u003d new Path(orig + System.currentTimeMillis());\n+          trashPath \u003d new Path(orig + Time.now());\n         }\n         \n         if (fs.rename(path, trashPath))           // move to current trash\n           return true;\n       } catch (IOException e) {\n         cause \u003d e;\n       }\n     }\n     throw (IOException)\n       new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    if (qpath.startsWith(trash.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trash.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(current, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + Time.now());\n        }\n        \n        if (fs.rename(path, trashPath))           // move to current trash\n          return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    if (qpath.startsWith(trash.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trash.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(current, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + System.currentTimeMillis());\n        }\n        \n        if (fs.rename(path, trashPath))           // move to current trash\n          return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    if (qpath.startsWith(trash.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trash.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(current, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + System.currentTimeMillis());\n        }\n        \n        if (fs.rename(path, trashPath))           // move to current trash\n          return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
      }
    },
    "184ff33de5598b04bf968ea3b113b175a4225b82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7460. Support pluggable trash policies. Contributed by Usman Masoon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/11 4:23 PM",
      "commitName": "184ff33de5598b04bf968ea3b113b175a4225b82",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,56 @@\n+  public boolean moveToTrash(Path path) throws IOException {\n+    if (!isEnabled())\n+      return false;\n+\n+    if (!path.isAbsolute())                       // make path absolute\n+      path \u003d new Path(fs.getWorkingDirectory(), path);\n+\n+    if (!fs.exists(path))                         // check that path exists\n+      throw new FileNotFoundException(path.toString());\n+\n+    String qpath \u003d fs.makeQualified(path).toString();\n+\n+    if (qpath.startsWith(trash.toString())) {\n+      return false;                               // already in trash\n+    }\n+\n+    if (trash.getParent().toString().startsWith(qpath)) {\n+      throw new IOException(\"Cannot move \\\"\" + path +\n+                            \"\\\" to the trash, as it contains the trash\");\n+    }\n+\n+    Path trashPath \u003d makeTrashRelativePath(current, path);\n+    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n+    \n+    IOException cause \u003d null;\n+\n+    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n+    for (int i \u003d 0; i \u003c 2; i++) {\n+      try {\n+        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n+          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n+          return false;\n+        }\n+      } catch (IOException e) {\n+        LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n+        cause \u003d e;\n+        break;\n+      }\n+      try {\n+        // if the target path in Trash already exists, then append with \n+        // a current time in millisecs.\n+        String orig \u003d trashPath.toString();\n+        \n+        while(fs.exists(trashPath)) {\n+          trashPath \u003d new Path(orig + System.currentTimeMillis());\n+        }\n+        \n+        if (fs.rename(path, trashPath))           // move to current trash\n+          return true;\n+      } catch (IOException e) {\n+        cause \u003d e;\n+      }\n+    }\n+    throw (IOException)\n+      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveToTrash(Path path) throws IOException {\n    if (!isEnabled())\n      return false;\n\n    if (!path.isAbsolute())                       // make path absolute\n      path \u003d new Path(fs.getWorkingDirectory(), path);\n\n    if (!fs.exists(path))                         // check that path exists\n      throw new FileNotFoundException(path.toString());\n\n    String qpath \u003d fs.makeQualified(path).toString();\n\n    if (qpath.startsWith(trash.toString())) {\n      return false;                               // already in trash\n    }\n\n    if (trash.getParent().toString().startsWith(qpath)) {\n      throw new IOException(\"Cannot move \\\"\" + path +\n                            \"\\\" to the trash, as it contains the trash\");\n    }\n\n    Path trashPath \u003d makeTrashRelativePath(current, path);\n    Path baseTrashPath \u003d makeTrashRelativePath(current, path.getParent());\n    \n    IOException cause \u003d null;\n\n    // try twice, in case checkpoint between the mkdirs() \u0026 rename()\n    for (int i \u003d 0; i \u003c 2; i++) {\n      try {\n        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current\n          LOG.warn(\"Can\u0027t create(mkdir) trash directory: \"+baseTrashPath);\n          return false;\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Can\u0027t create trash directory: \"+baseTrashPath);\n        cause \u003d e;\n        break;\n      }\n      try {\n        // if the target path in Trash already exists, then append with \n        // a current time in millisecs.\n        String orig \u003d trashPath.toString();\n        \n        while(fs.exists(trashPath)) {\n          trashPath \u003d new Path(orig + System.currentTimeMillis());\n        }\n        \n        if (fs.rename(path, trashPath))           // move to current trash\n          return true;\n      } catch (IOException e) {\n        cause \u003d e;\n      }\n    }\n    throw (IOException)\n      new IOException(\"Failed to move to trash: \"+path).initCause(cause);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
    }
  }
}