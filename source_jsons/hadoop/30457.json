{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineWebServices.java",
  "functionName": "putDomain",
  "functionId": "putDomain___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__domain-TimelineDomain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
  "functionStartLine": 260,
  "functionEndLine": 288,
  "numCommitsSeen": 19,
  "timeTaken": 2030,
  "changeHistory": [
    "f05a9ceb4a9623517aa1c8d995805e26ae1bde5a",
    "b76179895dd2ef4d56e8de31e9f673375faa2afa",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "f05a9ceb4a9623517aa1c8d995805e26ae1bde5a": "Ybodychange",
    "b76179895dd2ef4d56e8de31e9f673375faa2afa": "Ymultichange(Yreturntypechange,Ybodychange)",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f05a9ceb4a9623517aa1c8d995805e26ae1bde5a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3538. TimelineWebService doesn\u0027t catch runtime exception. Contributed by Steve Loughran and Tsuyoshi Ozawa.\n",
      "commitDate": "17/11/16 4:55 PM",
      "commitName": "f05a9ceb4a9623517aa1c8d995805e26ae1bde5a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "27/10/16 4:09 PM",
      "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 21.07,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   public TimelinePutResponse putDomain(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineDomain domain) {\n     init(res);\n     UserGroupInformation callerUGI \u003d getUser(req);\n     if (callerUGI \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline domain is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n     domain.setOwner(callerUGI.getShortUserName());\n     try {\n       timelineDataManager.putDomain(domain, callerUGI);\n     } catch (YarnException e) {\n       // The user doesn\u0027t have the access to override the existing domain.\n       LOG.error(e.getMessage(), e);\n       throw new ForbiddenException(e);\n+    } catch (RuntimeException e) {\n+      LOG.error(\"Error putting domain\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n     } catch (IOException e) {\n       LOG.error(\"Error putting domain\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     return new TimelinePutResponse();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse putDomain(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineDomain domain) {\n    init(res);\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline domain is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    domain.setOwner(callerUGI.getShortUserName());\n    try {\n      timelineDataManager.putDomain(domain, callerUGI);\n    } catch (YarnException e) {\n      // The user doesn\u0027t have the access to override the existing domain.\n      LOG.error(e.getMessage(), e);\n      throw new ForbiddenException(e);\n    } catch (RuntimeException e) {\n      LOG.error(\"Error putting domain\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (IOException e) {\n      LOG.error(\"Error putting domain\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    return new TimelinePutResponse();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "b76179895dd2ef4d56e8de31e9f673375faa2afa": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2804. Fixed Timeline service to not fill the logs with JAXB bindings exceptions. Contributed by Zhijie Shen.\n",
      "commitDate": "04/11/14 6:00 PM",
      "commitName": "b76179895dd2ef4d56e8de31e9f673375faa2afa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2804. Fixed Timeline service to not fill the logs with JAXB bindings exceptions. Contributed by Zhijie Shen.\n",
          "commitDate": "04/11/14 6:00 PM",
          "commitName": "b76179895dd2ef4d56e8de31e9f673375faa2afa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/09/14 11:27 AM",
          "commitNameOld": "d78b452a4f413c6931a494c33df0666ce9b44973",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 41.31,
          "commitsBetweenForRepo": 403,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public Response putDomain(\n+  public TimelinePutResponse putDomain(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineDomain domain) {\n     init(res);\n     UserGroupInformation callerUGI \u003d getUser(req);\n     if (callerUGI \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline domain is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n     domain.setOwner(callerUGI.getShortUserName());\n     try {\n       timelineDataManager.putDomain(domain, callerUGI);\n     } catch (YarnException e) {\n       // The user doesn\u0027t have the access to override the existing domain.\n       LOG.error(e.getMessage(), e);\n       throw new ForbiddenException(e);\n     } catch (IOException e) {\n       LOG.error(\"Error putting domain\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n-    return Response.status(Status.OK).build();\n+    return new TimelinePutResponse();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelinePutResponse putDomain(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineDomain domain) {\n    init(res);\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline domain is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    domain.setOwner(callerUGI.getShortUserName());\n    try {\n      timelineDataManager.putDomain(domain, callerUGI);\n    } catch (YarnException e) {\n      // The user doesn\u0027t have the access to override the existing domain.\n      LOG.error(e.getMessage(), e);\n      throw new ForbiddenException(e);\n    } catch (IOException e) {\n      LOG.error(\"Error putting domain\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    return new TimelinePutResponse();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldValue": "Response",
            "newValue": "TimelinePutResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2804. Fixed Timeline service to not fill the logs with JAXB bindings exceptions. Contributed by Zhijie Shen.\n",
          "commitDate": "04/11/14 6:00 PM",
          "commitName": "b76179895dd2ef4d56e8de31e9f673375faa2afa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/09/14 11:27 AM",
          "commitNameOld": "d78b452a4f413c6931a494c33df0666ce9b44973",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 41.31,
          "commitsBetweenForRepo": 403,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public Response putDomain(\n+  public TimelinePutResponse putDomain(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineDomain domain) {\n     init(res);\n     UserGroupInformation callerUGI \u003d getUser(req);\n     if (callerUGI \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline domain is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n     domain.setOwner(callerUGI.getShortUserName());\n     try {\n       timelineDataManager.putDomain(domain, callerUGI);\n     } catch (YarnException e) {\n       // The user doesn\u0027t have the access to override the existing domain.\n       LOG.error(e.getMessage(), e);\n       throw new ForbiddenException(e);\n     } catch (IOException e) {\n       LOG.error(\"Error putting domain\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n-    return Response.status(Status.OK).build();\n+    return new TimelinePutResponse();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelinePutResponse putDomain(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineDomain domain) {\n    init(res);\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline domain is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    domain.setOwner(callerUGI.getShortUserName());\n    try {\n      timelineDataManager.putDomain(domain, callerUGI);\n    } catch (YarnException e) {\n      // The user doesn\u0027t have the access to override the existing domain.\n      LOG.error(e.getMessage(), e);\n      throw new ForbiddenException(e);\n    } catch (IOException e) {\n      LOG.error(\"Error putting domain\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    return new TimelinePutResponse();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  public Response putDomain(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      TimelineDomain domain) {\n+    init(res);\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    if (callerUGI \u003d\u003d null) {\n+      String msg \u003d \"The owner of the posted timeline domain is not set\";\n+      LOG.error(msg);\n+      throw new ForbiddenException(msg);\n+    }\n+    domain.setOwner(callerUGI.getShortUserName());\n+    try {\n+      timelineDataManager.putDomain(domain, callerUGI);\n+    } catch (YarnException e) {\n+      // The user doesn\u0027t have the access to override the existing domain.\n+      LOG.error(e.getMessage(), e);\n+      throw new ForbiddenException(e);\n+    } catch (IOException e) {\n+      LOG.error(\"Error putting domain\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+    return Response.status(Status.OK).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putDomain(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineDomain domain) {\n    init(res);\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline domain is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    domain.setOwner(callerUGI.getShortUserName());\n    try {\n      timelineDataManager.putDomain(domain, callerUGI);\n    } catch (YarnException e) {\n      // The user doesn\u0027t have the access to override the existing domain.\n      LOG.error(e.getMessage(), e);\n      throw new ForbiddenException(e);\n    } catch (IOException e) {\n      LOG.error(\"Error putting domain\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    return Response.status(Status.OK).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java"
    }
  }
}