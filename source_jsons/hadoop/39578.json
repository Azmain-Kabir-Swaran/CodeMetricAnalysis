{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "internalReleaseResource",
  "functionId": "internalReleaseResource___clusterResource-Resource__node-FiCaSchedulerNode__releasedResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 864,
  "functionEndLine": 876,
  "numCommitsSeen": 182,
  "timeTaken": 6976,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ymultichange(Yparameterchange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,13 @@\n   private void internalReleaseResource(Resource clusterResource,\n       FiCaSchedulerNode node, Resource releasedResource) {\n     writeLock.lock();\n     try {\n       super.releaseResource(clusterResource, releasedResource,\n           node.getPartition());\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n-      }\n+      LOG.debug(\"completedContainer {}, cluster\u003d{}\", this, clusterResource);\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource) {\n    writeLock.lock();\n    try {\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition());\n\n      LOG.debug(\"completedContainer {}, cluster\u003d{}\", this, clusterResource);\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private void internalReleaseResource(Resource clusterResource,\n       FiCaSchedulerNode node, Resource releasedResource) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       super.releaseResource(clusterResource, releasedResource,\n           node.getPartition());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource) {\n    writeLock.lock();\n    try {\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 19.01,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n   private void internalReleaseResource(Resource clusterResource,\n-      FiCaSchedulerNode node, Resource releasedResource,\n-      boolean changeResource) {\n+      FiCaSchedulerNode node, Resource releasedResource) {\n     try {\n       writeLock.lock();\n       super.releaseResource(clusterResource, releasedResource,\n-          node.getPartition(), changeResource);\n+          node.getPartition());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource) {\n    try {\n      writeLock.lock();\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, releasedResource-Resource, changeResource-boolean]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, releasedResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 19.01,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n   private void internalReleaseResource(Resource clusterResource,\n-      FiCaSchedulerNode node, Resource releasedResource,\n-      boolean changeResource) {\n+      FiCaSchedulerNode node, Resource releasedResource) {\n     try {\n       writeLock.lock();\n       super.releaseResource(clusterResource, releasedResource,\n-          node.getPartition(), changeResource);\n+          node.getPartition());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource) {\n    try {\n      writeLock.lock();\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "28/10/16 10:30 AM",
          "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,17 @@\n   private void internalReleaseResource(Resource clusterResource,\n-      FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n-      CSQueue completedChildQueue, boolean sortQueues) {\n+      FiCaSchedulerNode node, Resource releasedResource,\n+      boolean changeResource) {\n     try {\n       writeLock.lock();\n       super.releaseResource(clusterResource, releasedResource,\n           node.getPartition(), changeResource);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n       }\n \n-      // Note that this is using an iterator on the childQueues so this can\u0027t\n-      // be called if already within an iterator for the childQueues. Like\n-      // from assignContainersToChildQueues.\n-      if (sortQueues) {\n-        // reinsert the updated queue\n-        for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n-             iter.hasNext(); ) {\n-          CSQueue csqueue \u003d iter.next();\n-          if (csqueue.equals(completedChildQueue)) {\n-            iter.remove();\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n-            }\n-            childQueues.add(csqueue);\n-            break;\n-          }\n-        }\n-      }\n-\n-      // If we skipped sort queue this time, we need to resort queues to make\n-      // sure we allocate from least usage (or order defined by queue policy)\n-      // queues.\n-      needToResortQueuesAtNextAllocation \u003d !sortQueues;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource,\n      boolean changeResource) {\n    try {\n      writeLock.lock();\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition(), changeResource);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, releasedResource-Resource, changeResource-boolean, completedChildQueue-CSQueue, sortQueues-boolean]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, releasedResource-Resource, changeResource-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "28/10/16 10:30 AM",
          "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,17 @@\n   private void internalReleaseResource(Resource clusterResource,\n-      FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n-      CSQueue completedChildQueue, boolean sortQueues) {\n+      FiCaSchedulerNode node, Resource releasedResource,\n+      boolean changeResource) {\n     try {\n       writeLock.lock();\n       super.releaseResource(clusterResource, releasedResource,\n           node.getPartition(), changeResource);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n       }\n \n-      // Note that this is using an iterator on the childQueues so this can\u0027t\n-      // be called if already within an iterator for the childQueues. Like\n-      // from assignContainersToChildQueues.\n-      if (sortQueues) {\n-        // reinsert the updated queue\n-        for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n-             iter.hasNext(); ) {\n-          CSQueue csqueue \u003d iter.next();\n-          if (csqueue.equals(completedChildQueue)) {\n-            iter.remove();\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n-            }\n-            childQueues.add(csqueue);\n-            break;\n-          }\n-        }\n-      }\n-\n-      // If we skipped sort queue this time, we need to resort queues to make\n-      // sure we allocate from least usage (or order defined by queue policy)\n-      // queues.\n-      needToResortQueuesAtNextAllocation \u003d !sortQueues;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource,\n      boolean changeResource) {\n    try {\n      writeLock.lock();\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition(), changeResource);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,40 @@\n-  private synchronized void internalReleaseResource(Resource clusterResource,\n+  private void internalReleaseResource(Resource clusterResource,\n       FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n       CSQueue completedChildQueue, boolean sortQueues) {\n-    super.releaseResource(clusterResource,\n-        releasedResource, node.getPartition(),\n-        changeResource);\n+    try {\n+      writeLock.lock();\n+      super.releaseResource(clusterResource, releasedResource,\n+          node.getPartition(), changeResource);\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n-    }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n+      }\n \n-    // Note that this is using an iterator on the childQueues so this can\u0027t\n-    // be called if already within an iterator for the childQueues. Like\n-    // from assignContainersToChildQueues.\n-    if (sortQueues) {\n-      // reinsert the updated queue\n-      for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator(); iter.hasNext();) {\n-        CSQueue csqueue \u003d iter.next();\n-        if (csqueue.equals(completedChildQueue)) {\n-          iter.remove();\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n+      // Note that this is using an iterator on the childQueues so this can\u0027t\n+      // be called if already within an iterator for the childQueues. Like\n+      // from assignContainersToChildQueues.\n+      if (sortQueues) {\n+        // reinsert the updated queue\n+        for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n+             iter.hasNext(); ) {\n+          CSQueue csqueue \u003d iter.next();\n+          if (csqueue.equals(completedChildQueue)) {\n+            iter.remove();\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n+            }\n+            childQueues.add(csqueue);\n+            break;\n           }\n-          childQueues.add(csqueue);\n-          break;\n         }\n       }\n-    }\n \n-    // If we skipped sort queue this time, we need to resort queues to make\n-    // sure we allocate from least usage (or order defined by queue policy)\n-    // queues.\n-    needToResortQueuesAtNextAllocation \u003d !sortQueues;\n+      // If we skipped sort queue this time, we need to resort queues to make\n+      // sure we allocate from least usage (or order defined by queue policy)\n+      // queues.\n+      needToResortQueuesAtNextAllocation \u003d !sortQueues;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n      CSQueue completedChildQueue, boolean sortQueues) {\n    try {\n      writeLock.lock();\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition(), changeResource);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t\n      // be called if already within an iterator for the childQueues. Like\n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n             iter.hasNext(); ) {\n          CSQueue csqueue \u003d iter.next();\n          if (csqueue.equals(completedChildQueue)) {\n            iter.remove();\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n            }\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n\n      // If we skipped sort queue this time, we need to resort queues to make\n      // sure we allocate from least usage (or order defined by queue policy)\n      // queues.\n      needToResortQueuesAtNextAllocation \u003d !sortQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,40 @@\n-  private synchronized void internalReleaseResource(Resource clusterResource,\n+  private void internalReleaseResource(Resource clusterResource,\n       FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n       CSQueue completedChildQueue, boolean sortQueues) {\n-    super.releaseResource(clusterResource,\n-        releasedResource, node.getPartition(),\n-        changeResource);\n+    try {\n+      writeLock.lock();\n+      super.releaseResource(clusterResource, releasedResource,\n+          node.getPartition(), changeResource);\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n-    }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n+      }\n \n-    // Note that this is using an iterator on the childQueues so this can\u0027t\n-    // be called if already within an iterator for the childQueues. Like\n-    // from assignContainersToChildQueues.\n-    if (sortQueues) {\n-      // reinsert the updated queue\n-      for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator(); iter.hasNext();) {\n-        CSQueue csqueue \u003d iter.next();\n-        if (csqueue.equals(completedChildQueue)) {\n-          iter.remove();\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n+      // Note that this is using an iterator on the childQueues so this can\u0027t\n+      // be called if already within an iterator for the childQueues. Like\n+      // from assignContainersToChildQueues.\n+      if (sortQueues) {\n+        // reinsert the updated queue\n+        for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n+             iter.hasNext(); ) {\n+          CSQueue csqueue \u003d iter.next();\n+          if (csqueue.equals(completedChildQueue)) {\n+            iter.remove();\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n+            }\n+            childQueues.add(csqueue);\n+            break;\n           }\n-          childQueues.add(csqueue);\n-          break;\n         }\n       }\n-    }\n \n-    // If we skipped sort queue this time, we need to resort queues to make\n-    // sure we allocate from least usage (or order defined by queue policy)\n-    // queues.\n-    needToResortQueuesAtNextAllocation \u003d !sortQueues;\n+      // If we skipped sort queue this time, we need to resort queues to make\n+      // sure we allocate from least usage (or order defined by queue policy)\n+      // queues.\n+      needToResortQueuesAtNextAllocation \u003d !sortQueues;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n      CSQueue completedChildQueue, boolean sortQueues) {\n    try {\n      writeLock.lock();\n      super.releaseResource(clusterResource, releasedResource,\n          node.getPartition(), changeResource);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t\n      // be called if already within an iterator for the childQueues. Like\n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n             iter.hasNext(); ) {\n          CSQueue csqueue \u003d iter.next();\n          if (csqueue.equals(completedChildQueue)) {\n            iter.remove();\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n            }\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n\n      // If we skipped sort queue this time, we need to resort queues to make\n      // sure we allocate from least usage (or order defined by queue policy)\n      // queues.\n      needToResortQueuesAtNextAllocation \u003d !sortQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,34 @@\n+  private synchronized void internalReleaseResource(Resource clusterResource,\n+      FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n+      CSQueue completedChildQueue, boolean sortQueues) {\n+    super.releaseResource(clusterResource,\n+        releasedResource, node.getPartition(),\n+        changeResource);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n+    }\n+\n+    // Note that this is using an iterator on the childQueues so this can\u0027t\n+    // be called if already within an iterator for the childQueues. Like\n+    // from assignContainersToChildQueues.\n+    if (sortQueues) {\n+      // reinsert the updated queue\n+      for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator(); iter.hasNext();) {\n+        CSQueue csqueue \u003d iter.next();\n+        if (csqueue.equals(completedChildQueue)) {\n+          iter.remove();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n+          }\n+          childQueues.add(csqueue);\n+          break;\n+        }\n+      }\n+    }\n+\n+    // If we skipped sort queue this time, we need to resort queues to make\n+    // sure we allocate from least usage (or order defined by queue policy)\n+    // queues.\n+    needToResortQueuesAtNextAllocation \u003d !sortQueues;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void internalReleaseResource(Resource clusterResource,\n      FiCaSchedulerNode node, Resource releasedResource, boolean changeResource,\n      CSQueue completedChildQueue, boolean sortQueues) {\n    super.releaseResource(clusterResource,\n        releasedResource, node.getPartition(),\n        changeResource);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n    }\n\n    // Note that this is using an iterator on the childQueues so this can\u0027t\n    // be called if already within an iterator for the childQueues. Like\n    // from assignContainersToChildQueues.\n    if (sortQueues) {\n      // reinsert the updated queue\n      for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator(); iter.hasNext();) {\n        CSQueue csqueue \u003d iter.next();\n        if (csqueue.equals(completedChildQueue)) {\n          iter.remove();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n          }\n          childQueues.add(csqueue);\n          break;\n        }\n      }\n    }\n\n    // If we skipped sort queue this time, we need to resort queues to make\n    // sure we allocate from least usage (or order defined by queue policy)\n    // queues.\n    needToResortQueuesAtNextAllocation \u003d !sortQueues;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}