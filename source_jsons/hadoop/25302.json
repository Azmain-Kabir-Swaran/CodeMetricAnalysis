{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BufferPuller.java",
  "functionName": "receiveData",
  "functionId": "receiveData",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/handlers/BufferPuller.java",
  "functionStartLine": 139,
  "functionEndLine": 183,
  "numCommitsSeen": 4,
  "timeTaken": 692,
  "changeHistory": [
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139"
  ],
  "changeHistoryShort": {
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": {
      "type": "Yintroduced",
      "commitMessage": "Import initial code for MAPREDUCE-2841 (native output collector)\n\nContributed by:\n  Binglin Chang\n  Yang Dong\n  Sean Zhong\n  Manu Zhang\n  Zhongliang Zhu\n  Vincent Wang\n  Yan Dong\n  Cheng Lian\n  Xusen Yin\n  Fangqin Dai\n  Jiang Weihua\n  Gansha Wu\n  Avik Dey\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1611413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 10:44 AM",
      "commitName": "b2551c06a09fb80a9e69adbc01c4c34b93ad0139",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,45 @@\n+  public boolean receiveData() throws IOException {\n+    if (closed) {\n+      return false;\n+    }\n+    \n+    final ByteBuffer input \u003d inputBuffer.getByteBuffer();\n+    \n+    if (null !\u003d asideBuffer \u0026\u0026 asideBuffer.length() \u003e 0) {\n+      if (asideBuffer.remaining() \u003e 0) {\n+        final byte[] output \u003d asideBuffer.getByteBuffer().array();\n+        final int write \u003d Math.min(asideBuffer.remaining(), input.remaining());\n+        input.get(output, asideBuffer.position(), write);\n+        asideBuffer.position(asideBuffer.position() + write);\n+      }\n+\n+      if (asideBuffer.remaining() \u003d\u003d 0) {\n+        asideBuffer.position(0);\n+      }\n+    }\n+\n+    if (input.remaining() \u003d\u003d 0) {\n+      return true;\n+    }\n+\n+    if (input.remaining() \u003c KV_HEADER_LENGTH) {\n+      throw new IOException(\"incomplete data, input length is: \" + input.remaining());\n+    }\n+    final int position \u003d input.position();\n+    final int keyLength \u003d input.getInt();\n+    final int valueLength \u003d input.getInt();\n+    input.position(position);\n+    final int kvLength \u003d keyLength + valueLength + KV_HEADER_LENGTH;\n+    final int remaining \u003d input.remaining();\n+\n+    if (kvLength \u003e remaining) {\n+      if (null \u003d\u003d asideBuffer || asideBuffer.capacity() \u003c kvLength) {\n+        asideBuffer \u003d new InputBuffer(BufferType.HEAP_BUFFER, kvLength);\n+      }\n+      asideBuffer.rewind(0, kvLength);\n+\n+      input.get(asideBuffer.array(), 0, remaining);\n+      asideBuffer.position(remaining);\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean receiveData() throws IOException {\n    if (closed) {\n      return false;\n    }\n    \n    final ByteBuffer input \u003d inputBuffer.getByteBuffer();\n    \n    if (null !\u003d asideBuffer \u0026\u0026 asideBuffer.length() \u003e 0) {\n      if (asideBuffer.remaining() \u003e 0) {\n        final byte[] output \u003d asideBuffer.getByteBuffer().array();\n        final int write \u003d Math.min(asideBuffer.remaining(), input.remaining());\n        input.get(output, asideBuffer.position(), write);\n        asideBuffer.position(asideBuffer.position() + write);\n      }\n\n      if (asideBuffer.remaining() \u003d\u003d 0) {\n        asideBuffer.position(0);\n      }\n    }\n\n    if (input.remaining() \u003d\u003d 0) {\n      return true;\n    }\n\n    if (input.remaining() \u003c KV_HEADER_LENGTH) {\n      throw new IOException(\"incomplete data, input length is: \" + input.remaining());\n    }\n    final int position \u003d input.position();\n    final int keyLength \u003d input.getInt();\n    final int valueLength \u003d input.getInt();\n    input.position(position);\n    final int kvLength \u003d keyLength + valueLength + KV_HEADER_LENGTH;\n    final int remaining \u003d input.remaining();\n\n    if (kvLength \u003e remaining) {\n      if (null \u003d\u003d asideBuffer || asideBuffer.capacity() \u003c kvLength) {\n        asideBuffer \u003d new InputBuffer(BufferType.HEAP_BUFFER, kvLength);\n      }\n      asideBuffer.rewind(0, kvLength);\n\n      input.get(asideBuffer.array(), 0, remaining);\n      asideBuffer.position(remaining);\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/handlers/BufferPuller.java"
    }
  }
}