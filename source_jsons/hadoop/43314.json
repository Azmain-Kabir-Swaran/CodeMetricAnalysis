{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerProviderService.java",
  "functionName": "processArtifact",
  "functionId": "processArtifact___launcher-AbstractLauncher__compInstance-ComponentInstance__fileSystem-SliderFileSystem__service-Service__compLaunchCtx-ContainerLaunchService.ComponentLaunchContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
  "functionStartLine": 42,
  "functionEndLine": 53,
  "numCommitsSeen": 43,
  "timeTaken": 6339,
  "changeHistory": [
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
    "2d0662cfd57bd438421f912dc172e79a15835442",
    "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "8d335e59cf9fa794a379b12f06d2d54f1b781118",
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99"
  ],
  "changeHistoryShort": {
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": "Ymultichange(Yparameterchange,Ybodychange)",
    "2d0662cfd57bd438421f912dc172e79a15835442": "Ybodychange",
    "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "8d335e59cf9fa794a379b12f06d2d54f1b781118": "Ymultichange(Yparameterchange,Ybodychange)",
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8160.  Support upgrade of service that use docker containers.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/08/18 8:36 AM",
      "commitName": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8160.  Support upgrade of service that use docker containers.\n            Contributed by Chandni Singh\n",
          "commitDate": "14/08/18 8:36 AM",
          "commitName": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 63.0,
          "commitsBetweenForRepo": 452,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,12 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n-      Service service) throws IOException{\n+      Service service, ContainerLaunchService.ComponentLaunchContext\n+      compLaunchCtx) throws IOException{\n     launcher.setYarnDockerMode(true);\n-    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n-    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n+    launcher.setDockerImage(compLaunchCtx.getArtifact().getId());\n+    launcher.setDockerNetwork(compLaunchCtx.getConfiguration()\n         .getProperty(DOCKER_NETWORK));\n     launcher.setDockerHostname(compInstance.getHostname());\n     launcher.setRunPrivilegedContainer(\n-        compInstance.getCompSpec().getRunPrivilegedContainer());\n+        compLaunchCtx.isRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service, ContainerLaunchService.ComponentLaunchContext\n      compLaunchCtx) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compLaunchCtx.getArtifact().getId());\n    launcher.setDockerNetwork(compLaunchCtx.getConfiguration()\n        .getProperty(DOCKER_NETWORK));\n    launcher.setDockerHostname(compInstance.getHostname());\n    launcher.setRunPrivilegedContainer(\n        compLaunchCtx.isRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, compInstance-ComponentInstance, fileSystem-SliderFileSystem, service-Service]",
            "newValue": "[launcher-AbstractLauncher, compInstance-ComponentInstance, fileSystem-SliderFileSystem, service-Service, compLaunchCtx-ContainerLaunchService.ComponentLaunchContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8160.  Support upgrade of service that use docker containers.\n            Contributed by Chandni Singh\n",
          "commitDate": "14/08/18 8:36 AM",
          "commitName": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 63.0,
          "commitsBetweenForRepo": 452,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,12 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n-      Service service) throws IOException{\n+      Service service, ContainerLaunchService.ComponentLaunchContext\n+      compLaunchCtx) throws IOException{\n     launcher.setYarnDockerMode(true);\n-    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n-    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n+    launcher.setDockerImage(compLaunchCtx.getArtifact().getId());\n+    launcher.setDockerNetwork(compLaunchCtx.getConfiguration()\n         .getProperty(DOCKER_NETWORK));\n     launcher.setDockerHostname(compInstance.getHostname());\n     launcher.setRunPrivilegedContainer(\n-        compInstance.getCompSpec().getRunPrivilegedContainer());\n+        compLaunchCtx.isRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service, ContainerLaunchService.ComponentLaunchContext\n      compLaunchCtx) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compLaunchCtx.getArtifact().getId());\n    launcher.setDockerNetwork(compLaunchCtx.getConfiguration()\n        .getProperty(DOCKER_NETWORK));\n    launcher.setDockerHostname(compInstance.getHostname());\n    launcher.setRunPrivilegedContainer(\n        compLaunchCtx.isRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "2d0662cfd57bd438421f912dc172e79a15835442": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8060.  Added default readiness check for service components.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "16/04/18 11:24 AM",
      "commitName": "2d0662cfd57bd438421f912dc172e79a15835442",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/01/18 9:42 AM",
      "commitNameOld": "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 76.03,
      "commitsBetweenForRepo": 638,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,11 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n       Service service) throws IOException{\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n     launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK));\n-    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n-        .get(RegistryConstants.KEY_DNS_DOMAIN);\n-    String hostname;\n-    if (domain \u003d\u003d null || domain.isEmpty()) {\n-      hostname \u003d MessageFormat\n-          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n-              service.getName(), RegistryUtils.currentUser());\n-    } else {\n-      hostname \u003d MessageFormat\n-          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n-              service.getName(), RegistryUtils.currentUser(), domain);\n-    }\n-    launcher.setDockerHostname(hostname);\n+    launcher.setDockerHostname(compInstance.getHostname());\n     launcher.setRunPrivilegedContainer(\n         compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK));\n    launcher.setDockerHostname(compInstance.getHostname());\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
      "extendedDetails": {}
    },
    "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7811.  Fixed a bug in user defined docker network settings.  (Contributed by Billie Rinaldi)\n",
      "commitDate": "30/01/18 9:42 AM",
      "commitName": "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 84.84,
      "commitsBetweenForRepo": 483,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n       Service service) throws IOException{\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n     launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n-        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n+        .getProperty(DOCKER_NETWORK));\n     String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n         .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n               service.getName(), RegistryUtils.currentUser());\n     } else {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n               service.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n     launcher.setRunPrivilegedContainer(\n         compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n-      Application application) throws IOException{\n+      Service service) throws IOException{\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n     launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n     String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n         .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n-              application.getName(), RegistryUtils.currentUser());\n+              service.getName(), RegistryUtils.currentUser());\n     } else {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n-              application.getName(), RegistryUtils.currentUser(), domain);\n+              service.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n     launcher.setRunPrivilegedContainer(\n         compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n-      Application application) throws IOException{\n+      Service service) throws IOException{\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n     launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n     String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n         .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n-              application.getName(), RegistryUtils.currentUser());\n+              service.getName(), RegistryUtils.currentUser());\n     } else {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n-              application.getName(), RegistryUtils.currentUser(), domain);\n+              service.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n     launcher.setRunPrivilegedContainer(\n         compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   public void processArtifact(AbstractLauncher launcher,\n       ComponentInstance compInstance, SliderFileSystem fileSystem,\n-      Application application) throws IOException{\n+      Service service) throws IOException{\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n     launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n     String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n         .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n-              application.getName(), RegistryUtils.currentUser());\n+              service.getName(), RegistryUtils.currentUser());\n     } else {\n       hostname \u003d MessageFormat\n           .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n-              application.getName(), RegistryUtils.currentUser(), domain);\n+              service.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n     launcher.setRunPrivilegedContainer(\n         compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Service service) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              service.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, compInstance-ComponentInstance, fileSystem-SliderFileSystem, application-Application]",
            "newValue": "[launcher-AbstractLauncher, compInstance-ComponentInstance, fileSystem-SliderFileSystem, service-Service]"
          }
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,23 @@\n-  public void processArtifact(ContainerLauncher launcher, Application\n-      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n-      throws IOException {\n-    Component component \u003d roleInstance.providerRole.component;\n+  public void processArtifact(AbstractLauncher launcher,\n+      ComponentInstance compInstance, SliderFileSystem fileSystem,\n+      Application application) throws IOException{\n     launcher.setYarnDockerMode(true);\n-    launcher.setDockerImage(component.getArtifact().getId());\n-    launcher.setDockerNetwork(component.getConfiguration()\n+    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n+    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n-    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n+    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n+        .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n-      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n-          .getCompInstanceName(), application.getName(), RegistryUtils\n-          .currentUser());\n+      hostname \u003d MessageFormat\n+          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n+              application.getName(), RegistryUtils.currentUser());\n     } else {\n-      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n-          .getCompInstanceName(), application.getName(), RegistryUtils\n-          .currentUser(), domain);\n+      hostname \u003d MessageFormat\n+          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n+              application.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n-    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n+    launcher.setRunPrivilegedContainer(\n+        compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Application application) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              application.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              application.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/docker/DockerProviderService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
            "oldMethodName": "processArtifact",
            "newMethodName": "processArtifact"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,23 @@\n-  public void processArtifact(ContainerLauncher launcher, Application\n-      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n-      throws IOException {\n-    Component component \u003d roleInstance.providerRole.component;\n+  public void processArtifact(AbstractLauncher launcher,\n+      ComponentInstance compInstance, SliderFileSystem fileSystem,\n+      Application application) throws IOException{\n     launcher.setYarnDockerMode(true);\n-    launcher.setDockerImage(component.getArtifact().getId());\n-    launcher.setDockerNetwork(component.getConfiguration()\n+    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n+    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n-    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n+    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n+        .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n-      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n-          .getCompInstanceName(), application.getName(), RegistryUtils\n-          .currentUser());\n+      hostname \u003d MessageFormat\n+          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n+              application.getName(), RegistryUtils.currentUser());\n     } else {\n-      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n-          .getCompInstanceName(), application.getName(), RegistryUtils\n-          .currentUser(), domain);\n+      hostname \u003d MessageFormat\n+          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n+              application.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n-    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n+    launcher.setRunPrivilegedContainer(\n+        compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Application application) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              application.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              application.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,23 @@\n-  public void processArtifact(ContainerLauncher launcher, Application\n-      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n-      throws IOException {\n-    Component component \u003d roleInstance.providerRole.component;\n+  public void processArtifact(AbstractLauncher launcher,\n+      ComponentInstance compInstance, SliderFileSystem fileSystem,\n+      Application application) throws IOException{\n     launcher.setYarnDockerMode(true);\n-    launcher.setDockerImage(component.getArtifact().getId());\n-    launcher.setDockerNetwork(component.getConfiguration()\n+    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n+    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n-    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n+    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n+        .get(RegistryConstants.KEY_DNS_DOMAIN);\n     String hostname;\n     if (domain \u003d\u003d null || domain.isEmpty()) {\n-      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n-          .getCompInstanceName(), application.getName(), RegistryUtils\n-          .currentUser());\n+      hostname \u003d MessageFormat\n+          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n+              application.getName(), RegistryUtils.currentUser());\n     } else {\n-      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n-          .getCompInstanceName(), application.getName(), RegistryUtils\n-          .currentUser(), domain);\n+      hostname \u003d MessageFormat\n+          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n+              application.getName(), RegistryUtils.currentUser(), domain);\n     }\n     launcher.setDockerHostname(hostname);\n-    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n+    launcher.setRunPrivilegedContainer(\n+        compInstance.getCompSpec().getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(AbstractLauncher launcher,\n      ComponentInstance compInstance, SliderFileSystem fileSystem,\n      Application application) throws IOException{\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(compInstance.getCompSpec().getArtifact().getId());\n    launcher.setDockerNetwork(compInstance.getCompSpec().getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d compInstance.getComponent().getScheduler().getConfig()\n        .get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}\", compInstance.getCompInstanceName(),\n              application.getName(), RegistryUtils.currentUser());\n    } else {\n      hostname \u003d MessageFormat\n          .format(\"{0}.{1}.{2}.{3}\", compInstance.getCompInstanceName(),\n              application.getName(), RegistryUtils.currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(\n        compInstance.getCompSpec().getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-ContainerLauncher, application-Application, roleInstance-RoleInstance, fileSystem-SliderFileSystem]",
            "newValue": "[launcher-AbstractLauncher, compInstance-ComponentInstance, fileSystem-SliderFileSystem, application-Application]"
          }
        }
      ]
    },
    "8d335e59cf9fa794a379b12f06d2d54f1b781118": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6804. [yarn-native-services changes] Allow custom hostname for docker containers in native services. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6804. [yarn-native-services changes] Allow custom hostname for docker containers in native services. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,22 @@\n-  public void processArtifact(ContainerLauncher launcher, Component\n-      component, SliderFileSystem fileSystem) throws IOException {\n+  public void processArtifact(ContainerLauncher launcher, Application\n+      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n+      throws IOException {\n+    Component component \u003d roleInstance.providerRole.component;\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(component.getArtifact().getId());\n     launcher.setDockerNetwork(component.getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n+    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n+    String hostname;\n+    if (domain \u003d\u003d null || domain.isEmpty()) {\n+      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n+          .getCompInstanceName(), application.getName(), RegistryUtils\n+          .currentUser());\n+    } else {\n+      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n+          .getCompInstanceName(), application.getName(), RegistryUtils\n+          .currentUser(), domain);\n+    }\n+    launcher.setDockerHostname(hostname);\n     launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(ContainerLauncher launcher, Application\n      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n      throws IOException {\n    Component component \u003d roleInstance.providerRole.component;\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(component.getArtifact().getId());\n    launcher.setDockerNetwork(component.getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n          .getCompInstanceName(), application.getName(), RegistryUtils\n          .currentUser());\n    } else {\n      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n          .getCompInstanceName(), application.getName(), RegistryUtils\n          .currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/docker/DockerProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-ContainerLauncher, component-Component, fileSystem-SliderFileSystem]",
            "newValue": "[launcher-ContainerLauncher, application-Application, roleInstance-RoleInstance, fileSystem-SliderFileSystem]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6804. [yarn-native-services changes] Allow custom hostname for docker containers in native services. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,22 @@\n-  public void processArtifact(ContainerLauncher launcher, Component\n-      component, SliderFileSystem fileSystem) throws IOException {\n+  public void processArtifact(ContainerLauncher launcher, Application\n+      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n+      throws IOException {\n+    Component component \u003d roleInstance.providerRole.component;\n     launcher.setYarnDockerMode(true);\n     launcher.setDockerImage(component.getArtifact().getId());\n     launcher.setDockerNetwork(component.getConfiguration()\n         .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n+    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n+    String hostname;\n+    if (domain \u003d\u003d null || domain.isEmpty()) {\n+      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n+          .getCompInstanceName(), application.getName(), RegistryUtils\n+          .currentUser());\n+    } else {\n+      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n+          .getCompInstanceName(), application.getName(), RegistryUtils\n+          .currentUser(), domain);\n+    }\n+    launcher.setDockerHostname(hostname);\n     launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void processArtifact(ContainerLauncher launcher, Application\n      application, RoleInstance roleInstance, SliderFileSystem fileSystem)\n      throws IOException {\n    Component component \u003d roleInstance.providerRole.component;\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(component.getArtifact().getId());\n    launcher.setDockerNetwork(component.getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    String domain \u003d getConfig().get(RegistryConstants.KEY_DNS_DOMAIN);\n    String hostname;\n    if (domain \u003d\u003d null || domain.isEmpty()) {\n      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}\", roleInstance\n          .getCompInstanceName(), application.getName(), RegistryUtils\n          .currentUser());\n    } else {\n      hostname \u003d MessageFormat.format(\"{0}.{1}.{2}.{3}\", roleInstance\n          .getCompInstanceName(), application.getName(), RegistryUtils\n          .currentUser(), domain);\n    }\n    launcher.setDockerHostname(hostname);\n    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/docker/DockerProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9085cd5c6eb615253f0f4e8f4b58659ff4358d99": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6160. Create an agent-less docker-less provider in the native services framework. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "9085cd5c6eb615253f0f4e8f4b58659ff4358d99",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,8 @@\n+  public void processArtifact(ContainerLauncher launcher, Component\n+      component, SliderFileSystem fileSystem) throws IOException {\n+    launcher.setYarnDockerMode(true);\n+    launcher.setDockerImage(component.getArtifact().getId());\n+    launcher.setDockerNetwork(component.getConfiguration()\n+        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n+    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void processArtifact(ContainerLauncher launcher, Component\n      component, SliderFileSystem fileSystem) throws IOException {\n    launcher.setYarnDockerMode(true);\n    launcher.setDockerImage(component.getArtifact().getId());\n    launcher.setDockerNetwork(component.getConfiguration()\n        .getProperty(DOCKER_NETWORK, DEFAULT_DOCKER_NETWORK));\n    launcher.setRunPrivilegedContainer(component.getRunPrivilegedContainer());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/docker/DockerProviderService.java"
    }
  }
}