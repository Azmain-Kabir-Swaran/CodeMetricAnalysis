{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SleepJob.java",
  "functionName": "createRecordReader",
  "functionId": "createRecordReader___split-InputSplit__context-TaskAttemptContext(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
  "functionStartLine": 218,
  "functionEndLine": 273,
  "numCommitsSeen": 7,
  "timeTaken": 4590,
  "changeHistory": [
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RecordReader\u003cLongWritable, LongWritable\u003e createRecordReader(\n      InputSplit split, final TaskAttemptContext context)\n      throws IOException, InterruptedException {\n      final long duration \u003d split.getLength();\n      long sleepInterval \u003d \n    \t  context.getConfiguration().getLong(GRIDMIX_SLEEP_INTERVAL, 5);\n      final long RINTERVAL \u003d \n        TimeUnit.MILLISECONDS.convert(sleepInterval, TimeUnit.SECONDS);\n      if (RINTERVAL \u003c\u003d 0) {\n        throw new IOException(\n          \"Invalid \" + GRIDMIX_SLEEP_INTERVAL + \": \" + RINTERVAL);\n      }\n      return new RecordReader\u003cLongWritable, LongWritable\u003e() {\n        long start \u003d -1;\n        long slept \u003d 0L;\n        long sleep \u003d 0L;\n        final LongWritable key \u003d new LongWritable();\n        final LongWritable val \u003d new LongWritable();\n\n        @Override\n        public boolean nextKeyValue() throws IOException {\n          if (start \u003d\u003d -1) {\n            start \u003d System.currentTimeMillis();\n          }\n          slept +\u003d sleep;\n          sleep \u003d Math.min(duration - slept, RINTERVAL);\n          key.set(slept + sleep + start);\n          val.set(duration - slept);\n          return slept \u003c duration;\n        }\n\n        @Override\n        public float getProgress() throws IOException {\n          return slept / ((float) duration);\n        }\n\n        @Override\n        public LongWritable getCurrentKey() {\n          return key;\n        }\n\n        @Override\n        public LongWritable getCurrentValue() {\n          return val;\n        }\n\n        @Override\n        public void close() throws IOException {\n          final String msg \u003d \"Slept for \" + duration;\n          LOG.info(msg);\n        }\n\n        public void initialize(InputSplit split, TaskAttemptContext ctxt) {\n        }\n      };\n    }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/SleepJob.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RecordReader\u003cLongWritable, LongWritable\u003e createRecordReader(\n      InputSplit split, final TaskAttemptContext context)\n      throws IOException, InterruptedException {\n      final long duration \u003d split.getLength();\n      long sleepInterval \u003d \n    \t  context.getConfiguration().getLong(GRIDMIX_SLEEP_INTERVAL, 5);\n      final long RINTERVAL \u003d \n        TimeUnit.MILLISECONDS.convert(sleepInterval, TimeUnit.SECONDS);\n      if (RINTERVAL \u003c\u003d 0) {\n        throw new IOException(\n          \"Invalid \" + GRIDMIX_SLEEP_INTERVAL + \": \" + RINTERVAL);\n      }\n      return new RecordReader\u003cLongWritable, LongWritable\u003e() {\n        long start \u003d -1;\n        long slept \u003d 0L;\n        long sleep \u003d 0L;\n        final LongWritable key \u003d new LongWritable();\n        final LongWritable val \u003d new LongWritable();\n\n        @Override\n        public boolean nextKeyValue() throws IOException {\n          if (start \u003d\u003d -1) {\n            start \u003d System.currentTimeMillis();\n          }\n          slept +\u003d sleep;\n          sleep \u003d Math.min(duration - slept, RINTERVAL);\n          key.set(slept + sleep + start);\n          val.set(duration - slept);\n          return slept \u003c duration;\n        }\n\n        @Override\n        public float getProgress() throws IOException {\n          return slept / ((float) duration);\n        }\n\n        @Override\n        public LongWritable getCurrentKey() {\n          return key;\n        }\n\n        @Override\n        public LongWritable getCurrentValue() {\n          return val;\n        }\n\n        @Override\n        public void close() throws IOException {\n          final String msg \u003d \"Slept for \" + duration;\n          LOG.info(msg);\n        }\n\n        public void initialize(InputSplit split, TaskAttemptContext ctxt) {\n        }\n      };\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RecordReader\u003cLongWritable, LongWritable\u003e createRecordReader(\n      InputSplit split, final TaskAttemptContext context)\n      throws IOException, InterruptedException {\n      final long duration \u003d split.getLength();\n      long sleepInterval \u003d \n    \t  context.getConfiguration().getLong(GRIDMIX_SLEEP_INTERVAL, 5);\n      final long RINTERVAL \u003d \n        TimeUnit.MILLISECONDS.convert(sleepInterval, TimeUnit.SECONDS);\n      if (RINTERVAL \u003c\u003d 0) {\n        throw new IOException(\n          \"Invalid \" + GRIDMIX_SLEEP_INTERVAL + \": \" + RINTERVAL);\n      }\n      return new RecordReader\u003cLongWritable, LongWritable\u003e() {\n        long start \u003d -1;\n        long slept \u003d 0L;\n        long sleep \u003d 0L;\n        final LongWritable key \u003d new LongWritable();\n        final LongWritable val \u003d new LongWritable();\n\n        @Override\n        public boolean nextKeyValue() throws IOException {\n          if (start \u003d\u003d -1) {\n            start \u003d System.currentTimeMillis();\n          }\n          slept +\u003d sleep;\n          sleep \u003d Math.min(duration - slept, RINTERVAL);\n          key.set(slept + sleep + start);\n          val.set(duration - slept);\n          return slept \u003c duration;\n        }\n\n        @Override\n        public float getProgress() throws IOException {\n          return slept / ((float) duration);\n        }\n\n        @Override\n        public LongWritable getCurrentKey() {\n          return key;\n        }\n\n        @Override\n        public LongWritable getCurrentValue() {\n          return val;\n        }\n\n        @Override\n        public void close() throws IOException {\n          final String msg \u003d \"Slept for \" + duration;\n          LOG.info(msg);\n        }\n\n        public void initialize(InputSplit split, TaskAttemptContext ctxt) {\n        }\n      };\n    }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,56 @@\n+    public RecordReader\u003cLongWritable, LongWritable\u003e createRecordReader(\n+      InputSplit split, final TaskAttemptContext context)\n+      throws IOException, InterruptedException {\n+      final long duration \u003d split.getLength();\n+      long sleepInterval \u003d \n+    \t  context.getConfiguration().getLong(GRIDMIX_SLEEP_INTERVAL, 5);\n+      final long RINTERVAL \u003d \n+        TimeUnit.MILLISECONDS.convert(sleepInterval, TimeUnit.SECONDS);\n+      if (RINTERVAL \u003c\u003d 0) {\n+        throw new IOException(\n+          \"Invalid \" + GRIDMIX_SLEEP_INTERVAL + \": \" + RINTERVAL);\n+      }\n+      return new RecordReader\u003cLongWritable, LongWritable\u003e() {\n+        long start \u003d -1;\n+        long slept \u003d 0L;\n+        long sleep \u003d 0L;\n+        final LongWritable key \u003d new LongWritable();\n+        final LongWritable val \u003d new LongWritable();\n+\n+        @Override\n+        public boolean nextKeyValue() throws IOException {\n+          if (start \u003d\u003d -1) {\n+            start \u003d System.currentTimeMillis();\n+          }\n+          slept +\u003d sleep;\n+          sleep \u003d Math.min(duration - slept, RINTERVAL);\n+          key.set(slept + sleep + start);\n+          val.set(duration - slept);\n+          return slept \u003c duration;\n+        }\n+\n+        @Override\n+        public float getProgress() throws IOException {\n+          return slept / ((float) duration);\n+        }\n+\n+        @Override\n+        public LongWritable getCurrentKey() {\n+          return key;\n+        }\n+\n+        @Override\n+        public LongWritable getCurrentValue() {\n+          return val;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+          final String msg \u003d \"Slept for \" + duration;\n+          LOG.info(msg);\n+        }\n+\n+        public void initialize(InputSplit split, TaskAttemptContext ctxt) {\n+        }\n+      };\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public RecordReader\u003cLongWritable, LongWritable\u003e createRecordReader(\n      InputSplit split, final TaskAttemptContext context)\n      throws IOException, InterruptedException {\n      final long duration \u003d split.getLength();\n      long sleepInterval \u003d \n    \t  context.getConfiguration().getLong(GRIDMIX_SLEEP_INTERVAL, 5);\n      final long RINTERVAL \u003d \n        TimeUnit.MILLISECONDS.convert(sleepInterval, TimeUnit.SECONDS);\n      if (RINTERVAL \u003c\u003d 0) {\n        throw new IOException(\n          \"Invalid \" + GRIDMIX_SLEEP_INTERVAL + \": \" + RINTERVAL);\n      }\n      return new RecordReader\u003cLongWritable, LongWritable\u003e() {\n        long start \u003d -1;\n        long slept \u003d 0L;\n        long sleep \u003d 0L;\n        final LongWritable key \u003d new LongWritable();\n        final LongWritable val \u003d new LongWritable();\n\n        @Override\n        public boolean nextKeyValue() throws IOException {\n          if (start \u003d\u003d -1) {\n            start \u003d System.currentTimeMillis();\n          }\n          slept +\u003d sleep;\n          sleep \u003d Math.min(duration - slept, RINTERVAL);\n          key.set(slept + sleep + start);\n          val.set(duration - slept);\n          return slept \u003c duration;\n        }\n\n        @Override\n        public float getProgress() throws IOException {\n          return slept / ((float) duration);\n        }\n\n        @Override\n        public LongWritable getCurrentKey() {\n          return key;\n        }\n\n        @Override\n        public LongWritable getCurrentValue() {\n          return val;\n        }\n\n        @Override\n        public void close() throws IOException {\n          final String msg \u003d \"Slept for \" + duration;\n          LOG.info(msg);\n        }\n\n        public void initialize(InputSplit split, TaskAttemptContext ctxt) {\n        }\n      };\n    }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/SleepJob.java"
    }
  }
}