{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKRMStateStore.java",
  "functionName": "loadRMDelegationTokenState",
  "functionId": "loadRMDelegationTokenState___rmState-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
  "functionStartLine": 629,
  "functionEndLine": 666,
  "numCommitsSeen": 77,
  "timeTaken": 4306,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
    "bcb2528a51c33e4caff8d744c5e14c1accfc47d0",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
    "e516706b896743e47e2852be81944eb5613e3e76",
    "018664550507981297fd9f91e29408e6b7801ea9",
    "ea26cc0b4ac02b8af686dfda80f540e5aa70c358",
    "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344",
    "93907baa0b033c1431dc7055116746fc9db508cc"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": "Ybodychange",
    "bcb2528a51c33e4caff8d744c5e14c1accfc47d0": "Ybodychange",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": "Ybodychange",
    "e516706b896743e47e2852be81944eb5613e3e76": "Ybodychange",
    "018664550507981297fd9f91e29408e6b7801ea9": "Ybodychange",
    "ea26cc0b4ac02b8af686dfda80f540e5aa70c358": "Ybodychange",
    "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344": "Ybodychange",
    "93907baa0b033c1431dc7055116746fc9db508cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n     for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n       String tokenRoot \u003d rmDelegationTokenHierarchies.get(splitIndex);\n       if (tokenRoot \u003d\u003d null) {\n         continue;\n       }\n       List\u003cString\u003e childNodes \u003d getChildren(tokenRoot);\n       boolean dtNodeFound \u003d false;\n       for (String childNodeName : childNodes) {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           dtNodeFound \u003d true;\n           String parentNodePath \u003d getNodePath(tokenRoot, childNodeName);\n           if (splitIndex \u003d\u003d 0) {\n             loadDelegationTokenFromNode(rmState, parentNodePath);\n           } else {\n             // If znode is partitioned.\n             List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n             for (String leafNodeName : leafNodes) {\n               loadDelegationTokenFromNode(rmState,\n                   getNodePath(parentNodePath, leafNodeName));\n             }\n           }\n         } else if (splitIndex \u003d\u003d 0\n             \u0026\u0026 !(childNodeName.equals(\"1\") || childNodeName.equals(\"2\")\n             || childNodeName.equals(\"3\") || childNodeName.equals(\"4\"))) {\n-          LOG.debug(\"Unknown child node with name \" + childNodeName + \" under\" +\n-              tokenRoot);\n+          LOG.debug(\"Unknown child node with name {} under {}\",\n+              childNodeName, tokenRoot);\n         }\n       }\n       if (splitIndex !\u003d delegationTokenNodeSplitIndex \u0026\u0026 !dtNodeFound) {\n         // If no loaded delegation token exists for a particular split index and\n         // the split index for which tokens are being loaded is not the one\n         // configured, then we do not need to keep track of this hierarchy for\n         // storing/updating/removing delegation token znodes.\n         rmDelegationTokenHierarchies.remove(splitIndex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n      String tokenRoot \u003d rmDelegationTokenHierarchies.get(splitIndex);\n      if (tokenRoot \u003d\u003d null) {\n        continue;\n      }\n      List\u003cString\u003e childNodes \u003d getChildren(tokenRoot);\n      boolean dtNodeFound \u003d false;\n      for (String childNodeName : childNodes) {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          dtNodeFound \u003d true;\n          String parentNodePath \u003d getNodePath(tokenRoot, childNodeName);\n          if (splitIndex \u003d\u003d 0) {\n            loadDelegationTokenFromNode(rmState, parentNodePath);\n          } else {\n            // If znode is partitioned.\n            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n            for (String leafNodeName : leafNodes) {\n              loadDelegationTokenFromNode(rmState,\n                  getNodePath(parentNodePath, leafNodeName));\n            }\n          }\n        } else if (splitIndex \u003d\u003d 0\n            \u0026\u0026 !(childNodeName.equals(\"1\") || childNodeName.equals(\"2\")\n            || childNodeName.equals(\"3\") || childNodeName.equals(\"4\"))) {\n          LOG.debug(\"Unknown child node with name {} under {}\",\n              childNodeName, tokenRoot);\n        }\n      }\n      if (splitIndex !\u003d delegationTokenNodeSplitIndex \u0026\u0026 !dtNodeFound) {\n        // If no loaded delegation token exists for a particular split index and\n        // the split index for which tokens are being loaded is not the one\n        // configured, then we do not need to keep track of this hierarchy for\n        // storing/updating/removing delegation token znodes.\n        rmDelegationTokenHierarchies.remove(splitIndex);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
      "commitDate": "26/10/17 5:47 PM",
      "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 17.28,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n-    List\u003cString\u003e childNodes \u003d\n-        getChildren(delegationTokensRootPath);\n-\n-    for (String childNodeName : childNodes) {\n-      String childNodePath \u003d\n-          getNodePath(delegationTokensRootPath, childNodeName);\n-      byte[] childData \u003d getData(childNodePath);\n-\n-      if (childData \u003d\u003d null) {\n-        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n+    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n+      String tokenRoot \u003d rmDelegationTokenHierarchies.get(splitIndex);\n+      if (tokenRoot \u003d\u003d null) {\n         continue;\n       }\n-\n-      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n-\n-      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n+      List\u003cString\u003e childNodes \u003d getChildren(tokenRoot);\n+      boolean dtNodeFound \u003d false;\n+      for (String childNodeName : childNodes) {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n-          RMDelegationTokenIdentifierData identifierData \u003d\n-              new RMDelegationTokenIdentifierData();\n-          identifierData.readFields(fsIn);\n-          RMDelegationTokenIdentifier identifier \u003d\n-              identifierData.getTokenIdentifier();\n-          long renewDate \u003d identifierData.getRenewDate();\n-          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n-              renewDate);\n-\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n-                + \" renewDate\u003d\" + renewDate);\n+          dtNodeFound \u003d true;\n+          String parentNodePath \u003d getNodePath(tokenRoot, childNodeName);\n+          if (splitIndex \u003d\u003d 0) {\n+            loadDelegationTokenFromNode(rmState, parentNodePath);\n+          } else {\n+            // If znode is partitioned.\n+            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n+            for (String leafNodeName : leafNodes) {\n+              loadDelegationTokenFromNode(rmState,\n+                  getNodePath(parentNodePath, leafNodeName));\n+            }\n           }\n+        } else if (splitIndex \u003d\u003d 0\n+            \u0026\u0026 !(childNodeName.equals(\"1\") || childNodeName.equals(\"2\")\n+            || childNodeName.equals(\"3\") || childNodeName.equals(\"4\"))) {\n+          LOG.debug(\"Unknown child node with name \" + childNodeName + \" under\" +\n+              tokenRoot);\n         }\n       }\n+      if (splitIndex !\u003d delegationTokenNodeSplitIndex \u0026\u0026 !dtNodeFound) {\n+        // If no loaded delegation token exists for a particular split index and\n+        // the split index for which tokens are being loaded is not the one\n+        // configured, then we do not need to keep track of this hierarchy for\n+        // storing/updating/removing delegation token znodes.\n+        rmDelegationTokenHierarchies.remove(splitIndex);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n      String tokenRoot \u003d rmDelegationTokenHierarchies.get(splitIndex);\n      if (tokenRoot \u003d\u003d null) {\n        continue;\n      }\n      List\u003cString\u003e childNodes \u003d getChildren(tokenRoot);\n      boolean dtNodeFound \u003d false;\n      for (String childNodeName : childNodes) {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          dtNodeFound \u003d true;\n          String parentNodePath \u003d getNodePath(tokenRoot, childNodeName);\n          if (splitIndex \u003d\u003d 0) {\n            loadDelegationTokenFromNode(rmState, parentNodePath);\n          } else {\n            // If znode is partitioned.\n            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n            for (String leafNodeName : leafNodes) {\n              loadDelegationTokenFromNode(rmState,\n                  getNodePath(parentNodePath, leafNodeName));\n            }\n          }\n        } else if (splitIndex \u003d\u003d 0\n            \u0026\u0026 !(childNodeName.equals(\"1\") || childNodeName.equals(\"2\")\n            || childNodeName.equals(\"3\") || childNodeName.equals(\"4\"))) {\n          LOG.debug(\"Unknown child node with name \" + childNodeName + \" under\" +\n              tokenRoot);\n        }\n      }\n      if (splitIndex !\u003d delegationTokenNodeSplitIndex \u0026\u0026 !dtNodeFound) {\n        // If no loaded delegation token exists for a particular split index and\n        // the split index for which tokens are being loaded is not the one\n        // configured, then we do not need to keep track of this hierarchy for\n        // storing/updating/removing delegation token znodes.\n        rmDelegationTokenHierarchies.remove(splitIndex);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "bcb2528a51c33e4caff8d744c5e14c1accfc47d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5400. Light cleanup in ZKRMStateStore (templedf via rkanter)\n",
      "commitDate": "28/09/16 2:56 PM",
      "commitName": "bcb2528a51c33e4caff8d744c5e14c1accfc47d0",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "25/09/16 11:00 PM",
      "commitNameOld": "14a696f369f7e3802587f57c8fff3aa51b5ab576",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 2.66,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d\n         getChildren(delegationTokensRootPath);\n+\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d\n           getNodePath(delegationTokensRootPath, childNodeName);\n       byte[] childData \u003d getData(childNodePath);\n \n       if (childData \u003d\u003d null) {\n         LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n         continue;\n       }\n \n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n-      DataInputStream fsIn \u003d new DataInputStream(is);\n \n-      try {\n+      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifierData identifierData \u003d\n               new RMDelegationTokenIdentifierData();\n           identifierData.readFields(fsIn);\n           RMDelegationTokenIdentifier identifier \u003d\n               identifierData.getTokenIdentifier();\n           long renewDate \u003d identifierData.getRenewDate();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n               renewDate);\n+\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                 + \" renewDate\u003d\" + renewDate);\n           }\n         }\n-      } finally {\n-        is.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d\n        getChildren(delegationTokensRootPath);\n\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getData(childNodePath);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n\n      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              new RMDelegationTokenIdentifierData();\n          identifierData.readFields(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                + \" renewDate\u003d\" + renewDate);\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2716. Refactor ZKRMStateStore retry code with Apache Curator. Contributed by Karthik Kambatla\n",
      "commitDate": "08/06/15 2:50 PM",
      "commitName": "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/05/15 3:12 PM",
      "commitNameOld": "d0b73287c26983f32b0efe01862150e9fd28086f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.99,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d\n-        getChildrenWithRetries(delegationTokensRootPath, false);\n+        getChildren(delegationTokensRootPath);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d\n           getNodePath(delegationTokensRootPath, childNodeName);\n-      byte[] childData \u003d getDataWithRetries(childNodePath, false);\n+      byte[] childData \u003d getData(childNodePath);\n \n       if (childData \u003d\u003d null) {\n         LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n         continue;\n       }\n \n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n \n       try {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifierData identifierData \u003d\n               new RMDelegationTokenIdentifierData();\n           identifierData.readFields(fsIn);\n           RMDelegationTokenIdentifier identifier \u003d\n               identifierData.getTokenIdentifier();\n           long renewDate \u003d identifierData.getRenewDate();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n               renewDate);\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                 + \" renewDate\u003d\" + renewDate);\n           }\n         }\n       } finally {\n         is.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d\n        getChildren(delegationTokensRootPath);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getData(childNodePath);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n\n      try {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              new RMDelegationTokenIdentifierData();\n          identifierData.readFields(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                + \" renewDate\u003d\" + renewDate);\n          }\n        }\n      } finally {\n        is.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "e516706b896743e47e2852be81944eb5613e3e76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3469. ZKRMStateStore: Avoid setting watches that are not required. (Jun Hong via kasha)\n",
      "commitDate": "10/04/15 11:20 AM",
      "commitName": "e516706b896743e47e2852be81944eb5613e3e76",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 7:49 PM",
      "commitNameOld": "8d88691d162f87f95c9ed7e0a569ef08e8385d4f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d\n-        getChildrenWithRetries(delegationTokensRootPath, true);\n+        getChildrenWithRetries(delegationTokensRootPath, false);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d\n           getNodePath(delegationTokensRootPath, childNodeName);\n-      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n+      byte[] childData \u003d getDataWithRetries(childNodePath, false);\n \n       if (childData \u003d\u003d null) {\n         LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n         continue;\n       }\n \n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n \n       try {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifierData identifierData \u003d\n               new RMDelegationTokenIdentifierData();\n           identifierData.readFields(fsIn);\n           RMDelegationTokenIdentifier identifier \u003d\n               identifierData.getTokenIdentifier();\n           long renewDate \u003d identifierData.getRenewDate();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n               renewDate);\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                 + \" renewDate\u003d\" + renewDate);\n           }\n         }\n       } finally {\n         is.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d\n        getChildrenWithRetries(delegationTokensRootPath, false);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, false);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n\n      try {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              new RMDelegationTokenIdentifierData();\n          identifierData.readFields(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                + \" renewDate\u003d\" + renewDate);\n          }\n        }\n      } finally {\n        is.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "018664550507981297fd9f91e29408e6b7801ea9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2743. Fixed a bug in ResourceManager that was causing RMDelegationToken identifiers to be tampered and thus causing app submission failures in secure mode. Contributed by Jian He.\n",
      "commitDate": "26/10/14 11:14 AM",
      "commitName": "018664550507981297fd9f91e29408e6b7801ea9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/10/14 9:49 PM",
      "commitNameOld": "7e3b5e6f5cb4945b4fab27e8a83d04280df50e17",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 4.56,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d\n         getChildrenWithRetries(delegationTokensRootPath, true);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d\n           getNodePath(delegationTokensRootPath, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n \n       if (childData \u003d\u003d null) {\n         LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n         continue;\n       }\n \n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n \n       try {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n+          RMDelegationTokenIdentifierData identifierData \u003d\n+              new RMDelegationTokenIdentifierData();\n+          identifierData.readFields(fsIn);\n           RMDelegationTokenIdentifier identifier \u003d\n-              new RMDelegationTokenIdentifier();\n-          identifier.readFields(fsIn);\n-          long renewDate \u003d identifier.getRenewDate();\n+              identifierData.getTokenIdentifier();\n+          long renewDate \u003d identifierData.getRenewDate();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n               renewDate);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n+                + \" renewDate\u003d\" + renewDate);\n+          }\n         }\n       } finally {\n         is.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d\n        getChildrenWithRetries(delegationTokensRootPath, true);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n\n      try {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              new RMDelegationTokenIdentifierData();\n          identifierData.readFields(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                + \" renewDate\u003d\" + renewDate);\n          }\n        }\n      } finally {\n        is.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "ea26cc0b4ac02b8af686dfda80f540e5aa70c358": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2615. Changed ClientToAMTokenIdentifier/RM(Timeline)DelegationTokenIdentifier to use protobuf as payload. Contributed by Junping Du\n",
      "commitDate": "06/10/14 10:47 AM",
      "commitName": "ea26cc0b4ac02b8af686dfda80f540e5aa70c358",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/14 6:04 PM",
      "commitNameOld": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 22.7,
      "commitsBetweenForRepo": 259,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d\n         getChildrenWithRetries(delegationTokensRootPath, true);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d\n           getNodePath(delegationTokensRootPath, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n \n       if (childData \u003d\u003d null) {\n         LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n         continue;\n       }\n \n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n \n       try {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifier identifier \u003d\n               new RMDelegationTokenIdentifier();\n           identifier.readFields(fsIn);\n-          long renewDate \u003d fsIn.readLong();\n+          long renewDate \u003d identifier.getRenewDate();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n               renewDate);\n         }\n       } finally {\n         is.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d\n        getChildrenWithRetries(delegationTokensRootPath, true);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n\n      try {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifier identifier \u003d\n              new RMDelegationTokenIdentifier();\n          identifier.readFields(fsIn);\n          long renewDate \u003d identifier.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n        }\n      } finally {\n        is.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1934. Fixed a potential NPE in ZKRMStateStore caused by handling Disconnected event from ZK. Contributed by Karthik Kambatla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587776 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/14 7:02 PM",
      "commitName": "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/04/14 2:51 PM",
      "commitNameOld": "c6b70f4760bc9d4028616de779ccf86219f38ec8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.17,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n-    List\u003cString\u003e childNodes \u003d zkClient.getChildren(delegationTokensRootPath, true);\n+    List\u003cString\u003e childNodes \u003d\n+        getChildrenWithRetries(delegationTokensRootPath, true);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d\n           getNodePath(delegationTokensRootPath, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n \n       if (childData \u003d\u003d null) {\n         LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n         continue;\n       }\n \n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n \n       try {\n         if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifier identifier \u003d\n               new RMDelegationTokenIdentifier();\n           identifier.readFields(fsIn);\n           long renewDate \u003d fsIn.readLong();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n               renewDate);\n         }\n       } finally {\n         is.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d\n        getChildrenWithRetries(delegationTokensRootPath, true);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n\n      try {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifier identifier \u003d\n              new RMDelegationTokenIdentifier();\n          identifier.readFields(fsIn);\n          long renewDate \u003d fsIn.readLong();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n        }\n      } finally {\n        is.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "93907baa0b033c1431dc7055116746fc9db508cc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 6:33 PM",
      "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n+    List\u003cString\u003e childNodes \u003d zkClient.getChildren(delegationTokensRootPath, true);\n+    for (String childNodeName : childNodes) {\n+      String childNodePath \u003d\n+          getNodePath(delegationTokensRootPath, childNodeName);\n+      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n+\n+      if (childData \u003d\u003d null) {\n+        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n+        continue;\n+      }\n+\n+      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n+      DataInputStream fsIn \u003d new DataInputStream(is);\n+\n+      try {\n+        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n+          RMDelegationTokenIdentifier identifier \u003d\n+              new RMDelegationTokenIdentifier();\n+          identifier.readFields(fsIn);\n+          long renewDate \u003d fsIn.readLong();\n+          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n+              renewDate);\n+        }\n+      } finally {\n+        is.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDelegationTokenState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d zkClient.getChildren(delegationTokensRootPath, true);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d\n          getNodePath(delegationTokensRootPath, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n\n      if (childData \u003d\u003d null) {\n        LOG.warn(\"Content of \" + childNodePath + \" is broken.\");\n        continue;\n      }\n\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n\n      try {\n        if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifier identifier \u003d\n              new RMDelegationTokenIdentifier();\n          identifier.readFields(fsIn);\n          long renewDate \u003d fsIn.readLong();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n              renewDate);\n        }\n      } finally {\n        is.close();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java"
    }
  }
}