{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FilterUtils.java",
  "functionName": "filterInstances",
  "functionId": "filterInstances___context-ServiceContext__filterReq-ClientAMProtocol.GetCompInstancesRequestProto",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/FilterUtils.java",
  "functionStartLine": 40,
  "functionEndLine": 93,
  "numCommitsSeen": 2,
  "timeTaken": 1829,
  "changeHistory": [
    "292c9e017fb3fdf972f2b7a11de5223bfe07603b",
    "121865c3f96166e2190ed54b433ebcf8d053b91c"
  ],
  "changeHistoryShort": {
    "292c9e017fb3fdf972f2b7a11de5223bfe07603b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "121865c3f96166e2190ed54b433ebcf8d053b91c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "292c9e017fb3fdf972f2b7a11de5223bfe07603b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8542. Added YARN service REST API to list containers.\n           Contributed by Chandni Singh\n",
      "commitDate": "22/10/18 12:59 PM",
      "commitName": "292c9e017fb3fdf972f2b7a11de5223bfe07603b",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8542. Added YARN service REST API to list containers.\n           Contributed by Chandni Singh\n",
          "commitDate": "22/10/18 12:59 PM",
          "commitName": "292c9e017fb3fdf972f2b7a11de5223bfe07603b",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/07/18 2:41 PM",
          "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 97.93,
          "commitsBetweenForRepo": 894,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,54 @@\n-  public static List\u003cContainer\u003e filterInstances(ServiceContext context,\n+  public static List\u003cComponentContainers\u003e filterInstances(\n+      ServiceContext context,\n       ClientAMProtocol.GetCompInstancesRequestProto filterReq) {\n-    List\u003cContainer\u003e results \u003d new ArrayList\u003c\u003e();\n+    Map\u003cString, ComponentContainers\u003e containersByComp \u003d new HashMap\u003c\u003e();\n+\n     Map\u003cContainerId, ComponentInstance\u003e instances \u003d\n         context.scheduler.getLiveInstances();\n \n     instances.forEach(((containerId, instance) -\u003e {\n       boolean include \u003d true;\n       if (filterReq.getComponentNamesList() !\u003d null \u0026\u0026\n           !filterReq.getComponentNamesList().isEmpty()) {\n         // filter by component name\n         if (!filterReq.getComponentNamesList().contains(\n             instance.getComponent().getName())) {\n           include \u003d false;\n         }\n       }\n \n       if (filterReq.getVersion() !\u003d null \u0026\u0026 !filterReq.getVersion().isEmpty()) {\n         // filter by version\n         String instanceServiceVersion \u003d instance.getServiceVersion();\n         if (instanceServiceVersion \u003d\u003d null || !instanceServiceVersion.equals(\n             filterReq.getVersion())) {\n           include \u003d false;\n         }\n       }\n \n       if (filterReq.getContainerStatesList() !\u003d null \u0026\u0026\n           !filterReq.getContainerStatesList().isEmpty()) {\n         // filter by state\n         if (!filterReq.getContainerStatesList().contains(\n             instance.getContainerState().toString())) {\n           include \u003d false;\n         }\n       }\n \n       if (include) {\n-        results.add(instance.getContainerSpec());\n+        ComponentContainers compContainers \u003d\n+            containersByComp.computeIfAbsent(instance.getCompName(),\n+                k -\u003e {\n+                  ComponentContainers result \u003d new ComponentContainers();\n+                  result.setContainers(new ArrayList\u003c\u003e());\n+                  result.setComponentName(instance.getCompName());\n+                  return result;\n+                });\n+\n+        compContainers.addContainer(instance.getContainerSpec());\n       }\n     }));\n-\n-    return results;\n+    List\u003cComponentContainers\u003e result \u003d new ArrayList\u003c\u003e();\n+    result.addAll(containersByComp.values());\n+    return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cComponentContainers\u003e filterInstances(\n      ServiceContext context,\n      ClientAMProtocol.GetCompInstancesRequestProto filterReq) {\n    Map\u003cString, ComponentContainers\u003e containersByComp \u003d new HashMap\u003c\u003e();\n\n    Map\u003cContainerId, ComponentInstance\u003e instances \u003d\n        context.scheduler.getLiveInstances();\n\n    instances.forEach(((containerId, instance) -\u003e {\n      boolean include \u003d true;\n      if (filterReq.getComponentNamesList() !\u003d null \u0026\u0026\n          !filterReq.getComponentNamesList().isEmpty()) {\n        // filter by component name\n        if (!filterReq.getComponentNamesList().contains(\n            instance.getComponent().getName())) {\n          include \u003d false;\n        }\n      }\n\n      if (filterReq.getVersion() !\u003d null \u0026\u0026 !filterReq.getVersion().isEmpty()) {\n        // filter by version\n        String instanceServiceVersion \u003d instance.getServiceVersion();\n        if (instanceServiceVersion \u003d\u003d null || !instanceServiceVersion.equals(\n            filterReq.getVersion())) {\n          include \u003d false;\n        }\n      }\n\n      if (filterReq.getContainerStatesList() !\u003d null \u0026\u0026\n          !filterReq.getContainerStatesList().isEmpty()) {\n        // filter by state\n        if (!filterReq.getContainerStatesList().contains(\n            instance.getContainerState().toString())) {\n          include \u003d false;\n        }\n      }\n\n      if (include) {\n        ComponentContainers compContainers \u003d\n            containersByComp.computeIfAbsent(instance.getCompName(),\n                k -\u003e {\n                  ComponentContainers result \u003d new ComponentContainers();\n                  result.setContainers(new ArrayList\u003c\u003e());\n                  result.setComponentName(instance.getCompName());\n                  return result;\n                });\n\n        compContainers.addContainer(instance.getContainerSpec());\n      }\n    }));\n    List\u003cComponentContainers\u003e result \u003d new ArrayList\u003c\u003e();\n    result.addAll(containersByComp.values());\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/FilterUtils.java",
          "extendedDetails": {
            "oldValue": "List\u003cContainer\u003e",
            "newValue": "List\u003cComponentContainers\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8542. Added YARN service REST API to list containers.\n           Contributed by Chandni Singh\n",
          "commitDate": "22/10/18 12:59 PM",
          "commitName": "292c9e017fb3fdf972f2b7a11de5223bfe07603b",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/07/18 2:41 PM",
          "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 97.93,
          "commitsBetweenForRepo": 894,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,54 @@\n-  public static List\u003cContainer\u003e filterInstances(ServiceContext context,\n+  public static List\u003cComponentContainers\u003e filterInstances(\n+      ServiceContext context,\n       ClientAMProtocol.GetCompInstancesRequestProto filterReq) {\n-    List\u003cContainer\u003e results \u003d new ArrayList\u003c\u003e();\n+    Map\u003cString, ComponentContainers\u003e containersByComp \u003d new HashMap\u003c\u003e();\n+\n     Map\u003cContainerId, ComponentInstance\u003e instances \u003d\n         context.scheduler.getLiveInstances();\n \n     instances.forEach(((containerId, instance) -\u003e {\n       boolean include \u003d true;\n       if (filterReq.getComponentNamesList() !\u003d null \u0026\u0026\n           !filterReq.getComponentNamesList().isEmpty()) {\n         // filter by component name\n         if (!filterReq.getComponentNamesList().contains(\n             instance.getComponent().getName())) {\n           include \u003d false;\n         }\n       }\n \n       if (filterReq.getVersion() !\u003d null \u0026\u0026 !filterReq.getVersion().isEmpty()) {\n         // filter by version\n         String instanceServiceVersion \u003d instance.getServiceVersion();\n         if (instanceServiceVersion \u003d\u003d null || !instanceServiceVersion.equals(\n             filterReq.getVersion())) {\n           include \u003d false;\n         }\n       }\n \n       if (filterReq.getContainerStatesList() !\u003d null \u0026\u0026\n           !filterReq.getContainerStatesList().isEmpty()) {\n         // filter by state\n         if (!filterReq.getContainerStatesList().contains(\n             instance.getContainerState().toString())) {\n           include \u003d false;\n         }\n       }\n \n       if (include) {\n-        results.add(instance.getContainerSpec());\n+        ComponentContainers compContainers \u003d\n+            containersByComp.computeIfAbsent(instance.getCompName(),\n+                k -\u003e {\n+                  ComponentContainers result \u003d new ComponentContainers();\n+                  result.setContainers(new ArrayList\u003c\u003e());\n+                  result.setComponentName(instance.getCompName());\n+                  return result;\n+                });\n+\n+        compContainers.addContainer(instance.getContainerSpec());\n       }\n     }));\n-\n-    return results;\n+    List\u003cComponentContainers\u003e result \u003d new ArrayList\u003c\u003e();\n+    result.addAll(containersByComp.values());\n+    return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cComponentContainers\u003e filterInstances(\n      ServiceContext context,\n      ClientAMProtocol.GetCompInstancesRequestProto filterReq) {\n    Map\u003cString, ComponentContainers\u003e containersByComp \u003d new HashMap\u003c\u003e();\n\n    Map\u003cContainerId, ComponentInstance\u003e instances \u003d\n        context.scheduler.getLiveInstances();\n\n    instances.forEach(((containerId, instance) -\u003e {\n      boolean include \u003d true;\n      if (filterReq.getComponentNamesList() !\u003d null \u0026\u0026\n          !filterReq.getComponentNamesList().isEmpty()) {\n        // filter by component name\n        if (!filterReq.getComponentNamesList().contains(\n            instance.getComponent().getName())) {\n          include \u003d false;\n        }\n      }\n\n      if (filterReq.getVersion() !\u003d null \u0026\u0026 !filterReq.getVersion().isEmpty()) {\n        // filter by version\n        String instanceServiceVersion \u003d instance.getServiceVersion();\n        if (instanceServiceVersion \u003d\u003d null || !instanceServiceVersion.equals(\n            filterReq.getVersion())) {\n          include \u003d false;\n        }\n      }\n\n      if (filterReq.getContainerStatesList() !\u003d null \u0026\u0026\n          !filterReq.getContainerStatesList().isEmpty()) {\n        // filter by state\n        if (!filterReq.getContainerStatesList().contains(\n            instance.getContainerState().toString())) {\n          include \u003d false;\n        }\n      }\n\n      if (include) {\n        ComponentContainers compContainers \u003d\n            containersByComp.computeIfAbsent(instance.getCompName(),\n                k -\u003e {\n                  ComponentContainers result \u003d new ComponentContainers();\n                  result.setContainers(new ArrayList\u003c\u003e());\n                  result.setComponentName(instance.getCompName());\n                  return result;\n                });\n\n        compContainers.addContainer(instance.getContainerSpec());\n      }\n    }));\n    List\u003cComponentContainers\u003e result \u003d new ArrayList\u003c\u003e();\n    result.addAll(containersByComp.values());\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/FilterUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "121865c3f96166e2190ed54b433ebcf8d053b91c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8299.  Added CLI and REST API for query container status.\n            Contributed by Chandni Singh\n",
      "commitDate": "16/07/18 2:41 PM",
      "commitName": "121865c3f96166e2190ed54b433ebcf8d053b91c",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,42 @@\n+  public static List\u003cContainer\u003e filterInstances(ServiceContext context,\n+      ClientAMProtocol.GetCompInstancesRequestProto filterReq) {\n+    List\u003cContainer\u003e results \u003d new ArrayList\u003c\u003e();\n+    Map\u003cContainerId, ComponentInstance\u003e instances \u003d\n+        context.scheduler.getLiveInstances();\n+\n+    instances.forEach(((containerId, instance) -\u003e {\n+      boolean include \u003d true;\n+      if (filterReq.getComponentNamesList() !\u003d null \u0026\u0026\n+          !filterReq.getComponentNamesList().isEmpty()) {\n+        // filter by component name\n+        if (!filterReq.getComponentNamesList().contains(\n+            instance.getComponent().getName())) {\n+          include \u003d false;\n+        }\n+      }\n+\n+      if (filterReq.getVersion() !\u003d null \u0026\u0026 !filterReq.getVersion().isEmpty()) {\n+        // filter by version\n+        String instanceServiceVersion \u003d instance.getServiceVersion();\n+        if (instanceServiceVersion \u003d\u003d null || !instanceServiceVersion.equals(\n+            filterReq.getVersion())) {\n+          include \u003d false;\n+        }\n+      }\n+\n+      if (filterReq.getContainerStatesList() !\u003d null \u0026\u0026\n+          !filterReq.getContainerStatesList().isEmpty()) {\n+        // filter by state\n+        if (!filterReq.getContainerStatesList().contains(\n+            instance.getContainerState().toString())) {\n+          include \u003d false;\n+        }\n+      }\n+\n+      if (include) {\n+        results.add(instance.getContainerSpec());\n+      }\n+    }));\n+\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cContainer\u003e filterInstances(ServiceContext context,\n      ClientAMProtocol.GetCompInstancesRequestProto filterReq) {\n    List\u003cContainer\u003e results \u003d new ArrayList\u003c\u003e();\n    Map\u003cContainerId, ComponentInstance\u003e instances \u003d\n        context.scheduler.getLiveInstances();\n\n    instances.forEach(((containerId, instance) -\u003e {\n      boolean include \u003d true;\n      if (filterReq.getComponentNamesList() !\u003d null \u0026\u0026\n          !filterReq.getComponentNamesList().isEmpty()) {\n        // filter by component name\n        if (!filterReq.getComponentNamesList().contains(\n            instance.getComponent().getName())) {\n          include \u003d false;\n        }\n      }\n\n      if (filterReq.getVersion() !\u003d null \u0026\u0026 !filterReq.getVersion().isEmpty()) {\n        // filter by version\n        String instanceServiceVersion \u003d instance.getServiceVersion();\n        if (instanceServiceVersion \u003d\u003d null || !instanceServiceVersion.equals(\n            filterReq.getVersion())) {\n          include \u003d false;\n        }\n      }\n\n      if (filterReq.getContainerStatesList() !\u003d null \u0026\u0026\n          !filterReq.getContainerStatesList().isEmpty()) {\n        // filter by state\n        if (!filterReq.getContainerStatesList().contains(\n            instance.getContainerState().toString())) {\n          include \u003d false;\n        }\n      }\n\n      if (include) {\n        results.add(instance.getContainerSpec());\n      }\n    }));\n\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/FilterUtils.java"
    }
  }
}