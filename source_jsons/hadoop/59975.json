{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GetLabelsToNodesResponsePBImpl.java",
  "functionName": "addLabelsToNodesToProto",
  "functionId": "addLabelsToNodesToProto",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetLabelsToNodesResponsePBImpl.java",
  "functionStartLine": 88,
  "functionEndLine": 129,
  "numCommitsSeen": 3,
  "timeTaken": 1484,
  "changeHistory": [
    "1a6ca75f3872587fb34c995a4b372b8cd6366d7d",
    "563eb1ad2ae848a23bbbf32ebfaf107e8fa14e87",
    "d49ae725d5fa3eecf879ac42c42a368dd811f854"
  ],
  "changeHistoryShort": {
    "1a6ca75f3872587fb34c995a4b372b8cd6366d7d": "Ybodychange",
    "563eb1ad2ae848a23bbbf32ebfaf107e8fa14e87": "Ybodychange",
    "d49ae725d5fa3eecf879ac42c42a368dd811f854": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1a6ca75f3872587fb34c995a4b372b8cd6366d7d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6143. Fix incompatible issue caused by YARN-3583. (Sunil G via wangda)\n",
      "commitDate": "22/02/17 11:17 AM",
      "commitName": "1a6ca75f3872587fb34c995a4b372b8cd6366d7d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/05/15 4:54 PM",
      "commitNameOld": "563eb1ad2ae848a23bbbf32ebfaf107e8fa14e87",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 644.81,
      "commitsBetweenForRepo": 4495,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void addLabelsToNodesToProto() {\n     maybeInitBuilder();\n     builder.clearLabelsToNodes();\n     if (labelsToNodes \u003d\u003d null) {\n       return;\n     }\n     Iterable\u003cLabelsToNodeIdsProto\u003e iterable \u003d\n         new Iterable\u003cLabelsToNodeIdsProto\u003e() {\n           @Override\n           public Iterator\u003cLabelsToNodeIdsProto\u003e iterator() {\n             return new Iterator\u003cLabelsToNodeIdsProto\u003e() {\n \n-              Iterator\u003cEntry\u003cNodeLabel, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n+              Iterator\u003cEntry\u003cString, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n                   labelsToNodes.entrySet().iterator();\n \n               @Override\n               public void remove() {\n                 throw new UnsupportedOperationException();\n               }\n \n               @Override\n               public LabelsToNodeIdsProto next() {\n-                Entry\u003cNodeLabel, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n+                Entry\u003cString, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n                 Set\u003cNodeIdProto\u003e nodeProtoSet \u003d new HashSet\u003cNodeIdProto\u003e();\n                 for(NodeId n : now.getValue()) {\n                   nodeProtoSet.add(convertToProtoFormat(n));\n                 }\n                 return LabelsToNodeIdsProto.newBuilder()\n-                    .setNodeLabels(convertToProtoFormat(now.getKey()))\n+                    .setNodeLabels(now.getKey())\n                     .addAllNodeId(nodeProtoSet)\n                     .build();\n               }\n \n               @Override\n               public boolean hasNext() {\n                 return iter.hasNext();\n               }\n             };\n           }\n         };\n     builder.addAllLabelsToNodes(iterable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addLabelsToNodesToProto() {\n    maybeInitBuilder();\n    builder.clearLabelsToNodes();\n    if (labelsToNodes \u003d\u003d null) {\n      return;\n    }\n    Iterable\u003cLabelsToNodeIdsProto\u003e iterable \u003d\n        new Iterable\u003cLabelsToNodeIdsProto\u003e() {\n          @Override\n          public Iterator\u003cLabelsToNodeIdsProto\u003e iterator() {\n            return new Iterator\u003cLabelsToNodeIdsProto\u003e() {\n\n              Iterator\u003cEntry\u003cString, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n                  labelsToNodes.entrySet().iterator();\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public LabelsToNodeIdsProto next() {\n                Entry\u003cString, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n                Set\u003cNodeIdProto\u003e nodeProtoSet \u003d new HashSet\u003cNodeIdProto\u003e();\n                for(NodeId n : now.getValue()) {\n                  nodeProtoSet.add(convertToProtoFormat(n));\n                }\n                return LabelsToNodeIdsProto.newBuilder()\n                    .setNodeLabels(now.getKey())\n                    .addAllNodeId(nodeProtoSet)\n                    .build();\n              }\n\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n            };\n          }\n        };\n    builder.addAllLabelsToNodes(iterable);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetLabelsToNodesResponsePBImpl.java",
      "extendedDetails": {}
    },
    "563eb1ad2ae848a23bbbf32ebfaf107e8fa14e87": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3583. Support of NodeLabel object instead of plain String in YarnClient side. (Sunil G via wangda)\n",
      "commitDate": "19/05/15 4:54 PM",
      "commitName": "563eb1ad2ae848a23bbbf32ebfaf107e8fa14e87",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/02/15 11:00 AM",
      "commitNameOld": "d49ae725d5fa3eecf879ac42c42a368dd811f854",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 89.2,
      "commitsBetweenForRepo": 848,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   private void addLabelsToNodesToProto() {\n     maybeInitBuilder();\n     builder.clearLabelsToNodes();\n     if (labelsToNodes \u003d\u003d null) {\n       return;\n     }\n     Iterable\u003cLabelsToNodeIdsProto\u003e iterable \u003d\n         new Iterable\u003cLabelsToNodeIdsProto\u003e() {\n           @Override\n           public Iterator\u003cLabelsToNodeIdsProto\u003e iterator() {\n             return new Iterator\u003cLabelsToNodeIdsProto\u003e() {\n \n-              Iterator\u003cEntry\u003cString, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n+              Iterator\u003cEntry\u003cNodeLabel, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n                   labelsToNodes.entrySet().iterator();\n \n               @Override\n               public void remove() {\n                 throw new UnsupportedOperationException();\n               }\n \n               @Override\n               public LabelsToNodeIdsProto next() {\n-                Entry\u003cString, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n+                Entry\u003cNodeLabel, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n                 Set\u003cNodeIdProto\u003e nodeProtoSet \u003d new HashSet\u003cNodeIdProto\u003e();\n                 for(NodeId n : now.getValue()) {\n                   nodeProtoSet.add(convertToProtoFormat(n));\n                 }\n                 return LabelsToNodeIdsProto.newBuilder()\n-                    .setNodeLabels(now.getKey()).addAllNodeId(nodeProtoSet)\n+                    .setNodeLabels(convertToProtoFormat(now.getKey()))\n+                    .addAllNodeId(nodeProtoSet)\n                     .build();\n               }\n \n               @Override\n               public boolean hasNext() {\n                 return iter.hasNext();\n               }\n             };\n           }\n         };\n     builder.addAllLabelsToNodes(iterable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addLabelsToNodesToProto() {\n    maybeInitBuilder();\n    builder.clearLabelsToNodes();\n    if (labelsToNodes \u003d\u003d null) {\n      return;\n    }\n    Iterable\u003cLabelsToNodeIdsProto\u003e iterable \u003d\n        new Iterable\u003cLabelsToNodeIdsProto\u003e() {\n          @Override\n          public Iterator\u003cLabelsToNodeIdsProto\u003e iterator() {\n            return new Iterator\u003cLabelsToNodeIdsProto\u003e() {\n\n              Iterator\u003cEntry\u003cNodeLabel, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n                  labelsToNodes.entrySet().iterator();\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public LabelsToNodeIdsProto next() {\n                Entry\u003cNodeLabel, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n                Set\u003cNodeIdProto\u003e nodeProtoSet \u003d new HashSet\u003cNodeIdProto\u003e();\n                for(NodeId n : now.getValue()) {\n                  nodeProtoSet.add(convertToProtoFormat(n));\n                }\n                return LabelsToNodeIdsProto.newBuilder()\n                    .setNodeLabels(convertToProtoFormat(now.getKey()))\n                    .addAllNodeId(nodeProtoSet)\n                    .build();\n              }\n\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n            };\n          }\n        };\n    builder.addAllLabelsToNodes(iterable);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetLabelsToNodesResponsePBImpl.java",
      "extendedDetails": {}
    },
    "d49ae725d5fa3eecf879ac42c42a368dd811f854": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3076. Add API/Implementation to YarnClient to retrieve label-to-node mapping (Varun Saxena via wangda)\n",
      "commitDate": "19/02/15 11:00 AM",
      "commitName": "d49ae725d5fa3eecf879ac42c42a368dd811f854",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,41 @@\n+  private void addLabelsToNodesToProto() {\n+    maybeInitBuilder();\n+    builder.clearLabelsToNodes();\n+    if (labelsToNodes \u003d\u003d null) {\n+      return;\n+    }\n+    Iterable\u003cLabelsToNodeIdsProto\u003e iterable \u003d\n+        new Iterable\u003cLabelsToNodeIdsProto\u003e() {\n+          @Override\n+          public Iterator\u003cLabelsToNodeIdsProto\u003e iterator() {\n+            return new Iterator\u003cLabelsToNodeIdsProto\u003e() {\n+\n+              Iterator\u003cEntry\u003cString, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n+                  labelsToNodes.entrySet().iterator();\n+\n+              @Override\n+              public void remove() {\n+                throw new UnsupportedOperationException();\n+              }\n+\n+              @Override\n+              public LabelsToNodeIdsProto next() {\n+                Entry\u003cString, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n+                Set\u003cNodeIdProto\u003e nodeProtoSet \u003d new HashSet\u003cNodeIdProto\u003e();\n+                for(NodeId n : now.getValue()) {\n+                  nodeProtoSet.add(convertToProtoFormat(n));\n+                }\n+                return LabelsToNodeIdsProto.newBuilder()\n+                    .setNodeLabels(now.getKey()).addAllNodeId(nodeProtoSet)\n+                    .build();\n+              }\n+\n+              @Override\n+              public boolean hasNext() {\n+                return iter.hasNext();\n+              }\n+            };\n+          }\n+        };\n+    builder.addAllLabelsToNodes(iterable);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addLabelsToNodesToProto() {\n    maybeInitBuilder();\n    builder.clearLabelsToNodes();\n    if (labelsToNodes \u003d\u003d null) {\n      return;\n    }\n    Iterable\u003cLabelsToNodeIdsProto\u003e iterable \u003d\n        new Iterable\u003cLabelsToNodeIdsProto\u003e() {\n          @Override\n          public Iterator\u003cLabelsToNodeIdsProto\u003e iterator() {\n            return new Iterator\u003cLabelsToNodeIdsProto\u003e() {\n\n              Iterator\u003cEntry\u003cString, Set\u003cNodeId\u003e\u003e\u003e iter \u003d\n                  labelsToNodes.entrySet().iterator();\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public LabelsToNodeIdsProto next() {\n                Entry\u003cString, Set\u003cNodeId\u003e\u003e now \u003d iter.next();\n                Set\u003cNodeIdProto\u003e nodeProtoSet \u003d new HashSet\u003cNodeIdProto\u003e();\n                for(NodeId n : now.getValue()) {\n                  nodeProtoSet.add(convertToProtoFormat(n));\n                }\n                return LabelsToNodeIdsProto.newBuilder()\n                    .setNodeLabels(now.getKey()).addAllNodeId(nodeProtoSet)\n                    .build();\n              }\n\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n            };\n          }\n        };\n    builder.addAllLabelsToNodes(iterable);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/protocolrecords/impl/pb/GetLabelsToNodesResponsePBImpl.java"
    }
  }
}