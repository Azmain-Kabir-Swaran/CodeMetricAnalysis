{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GetSpaceUsed.java",
  "functionName": "build",
  "functionId": "build",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GetSpaceUsed.java",
  "functionStartLine": 144,
  "functionEndLine": 176,
  "numCommitsSeen": 3,
  "timeTaken": 1142,
  "changeHistory": [
    "a5bb1e8ee871df1111ff77d0f6921b13c8ffb50e",
    "35f07705552ef5636f8b8d2599a6af5ec1426203"
  ],
  "changeHistoryShort": {
    "a5bb1e8ee871df1111ff77d0f6921b13c8ffb50e": "Ybodychange",
    "35f07705552ef5636f8b8d2599a6af5ec1426203": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a5bb1e8ee871df1111ff77d0f6921b13c8ffb50e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14313. Get hdfs used space from FsDatasetImpl#volumeMap#ReplicaInfo in memory instead of df/du. Contributed by Lisheng Sun.\n",
      "commitDate": "06/08/19 7:18 PM",
      "commitName": "a5bb1e8ee871df1111ff77d0f6921b13c8ffb50e",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "16/06/16 4:48 PM",
      "commitNameOld": "bf780406f2b30e627bdf36ac07973f6931f81106",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1146.1,
      "commitsBetweenForRepo": 8739,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n     public GetSpaceUsed build() throws IOException {\n       GetSpaceUsed getSpaceUsed \u003d null;\n       try {\n-        Constructor\u003c? extends GetSpaceUsed\u003e cons \u003d\n-            getKlass().getConstructor(Builder.class);\n+        if (cons \u003d\u003d null) {\n+          cons \u003d getKlass().getConstructor(Builder.class);\n+        }\n+\n         getSpaceUsed \u003d cons.newInstance(this);\n       } catch (InstantiationException e) {\n         LOG.warn(\"Error trying to create an instance of \" + getKlass(), e);\n       } catch (IllegalAccessException e) {\n         LOG.warn(\"Error trying to create \" + getKlass(), e);\n       } catch (InvocationTargetException e) {\n         LOG.warn(\"Error trying to create \" + getKlass(), e);\n       } catch (NoSuchMethodException e) {\n         LOG.warn(\"Doesn\u0027t look like the class \" + getKlass() +\n             \" have the needed constructor\", e);\n       }\n       // If there were any exceptions then du will be null.\n       // Construct our best guess fallback.\n       if (getSpaceUsed \u003d\u003d null) {\n         if (Shell.WINDOWS) {\n           getSpaceUsed \u003d new WindowsGetSpaceUsed(this);\n         } else {\n           getSpaceUsed \u003d new DU(this);\n         }\n       }\n       // Call init after classes constructors have finished.\n       if (getSpaceUsed instanceof CachingGetSpaceUsed) {\n         ((CachingGetSpaceUsed) getSpaceUsed).init();\n       }\n       return getSpaceUsed;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public GetSpaceUsed build() throws IOException {\n      GetSpaceUsed getSpaceUsed \u003d null;\n      try {\n        if (cons \u003d\u003d null) {\n          cons \u003d getKlass().getConstructor(Builder.class);\n        }\n\n        getSpaceUsed \u003d cons.newInstance(this);\n      } catch (InstantiationException e) {\n        LOG.warn(\"Error trying to create an instance of \" + getKlass(), e);\n      } catch (IllegalAccessException e) {\n        LOG.warn(\"Error trying to create \" + getKlass(), e);\n      } catch (InvocationTargetException e) {\n        LOG.warn(\"Error trying to create \" + getKlass(), e);\n      } catch (NoSuchMethodException e) {\n        LOG.warn(\"Doesn\u0027t look like the class \" + getKlass() +\n            \" have the needed constructor\", e);\n      }\n      // If there were any exceptions then du will be null.\n      // Construct our best guess fallback.\n      if (getSpaceUsed \u003d\u003d null) {\n        if (Shell.WINDOWS) {\n          getSpaceUsed \u003d new WindowsGetSpaceUsed(this);\n        } else {\n          getSpaceUsed \u003d new DU(this);\n        }\n      }\n      // Call init after classes constructors have finished.\n      if (getSpaceUsed instanceof CachingGetSpaceUsed) {\n        ((CachingGetSpaceUsed) getSpaceUsed).init();\n      }\n      return getSpaceUsed;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GetSpaceUsed.java",
      "extendedDetails": {}
    },
    "35f07705552ef5636f8b8d2599a6af5ec1426203": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12973. Make DU pluggable. (Elliott Clark via cmccabe)\n",
      "commitDate": "12/04/16 4:28 PM",
      "commitName": "35f07705552ef5636f8b8d2599a6af5ec1426203",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,31 @@\n+    public GetSpaceUsed build() throws IOException {\n+      GetSpaceUsed getSpaceUsed \u003d null;\n+      try {\n+        Constructor\u003c? extends GetSpaceUsed\u003e cons \u003d\n+            getKlass().getConstructor(Builder.class);\n+        getSpaceUsed \u003d cons.newInstance(this);\n+      } catch (InstantiationException e) {\n+        LOG.warn(\"Error trying to create an instance of \" + getKlass(), e);\n+      } catch (IllegalAccessException e) {\n+        LOG.warn(\"Error trying to create \" + getKlass(), e);\n+      } catch (InvocationTargetException e) {\n+        LOG.warn(\"Error trying to create \" + getKlass(), e);\n+      } catch (NoSuchMethodException e) {\n+        LOG.warn(\"Doesn\u0027t look like the class \" + getKlass() +\n+            \" have the needed constructor\", e);\n+      }\n+      // If there were any exceptions then du will be null.\n+      // Construct our best guess fallback.\n+      if (getSpaceUsed \u003d\u003d null) {\n+        if (Shell.WINDOWS) {\n+          getSpaceUsed \u003d new WindowsGetSpaceUsed(this);\n+        } else {\n+          getSpaceUsed \u003d new DU(this);\n+        }\n+      }\n+      // Call init after classes constructors have finished.\n+      if (getSpaceUsed instanceof CachingGetSpaceUsed) {\n+        ((CachingGetSpaceUsed) getSpaceUsed).init();\n+      }\n+      return getSpaceUsed;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public GetSpaceUsed build() throws IOException {\n      GetSpaceUsed getSpaceUsed \u003d null;\n      try {\n        Constructor\u003c? extends GetSpaceUsed\u003e cons \u003d\n            getKlass().getConstructor(Builder.class);\n        getSpaceUsed \u003d cons.newInstance(this);\n      } catch (InstantiationException e) {\n        LOG.warn(\"Error trying to create an instance of \" + getKlass(), e);\n      } catch (IllegalAccessException e) {\n        LOG.warn(\"Error trying to create \" + getKlass(), e);\n      } catch (InvocationTargetException e) {\n        LOG.warn(\"Error trying to create \" + getKlass(), e);\n      } catch (NoSuchMethodException e) {\n        LOG.warn(\"Doesn\u0027t look like the class \" + getKlass() +\n            \" have the needed constructor\", e);\n      }\n      // If there were any exceptions then du will be null.\n      // Construct our best guess fallback.\n      if (getSpaceUsed \u003d\u003d null) {\n        if (Shell.WINDOWS) {\n          getSpaceUsed \u003d new WindowsGetSpaceUsed(this);\n        } else {\n          getSpaceUsed \u003d new DU(this);\n        }\n      }\n      // Call init after classes constructors have finished.\n      if (getSpaceUsed instanceof CachingGetSpaceUsed) {\n        ((CachingGetSpaceUsed) getSpaceUsed).init();\n      }\n      return getSpaceUsed;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GetSpaceUsed.java"
    }
  }
}