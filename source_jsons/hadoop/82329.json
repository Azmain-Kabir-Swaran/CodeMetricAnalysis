{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LightWeightGSet.java",
  "functionName": "computeCapacity",
  "functionId": "computeCapacity___maxMemory-long__percentage-double__mapName-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LightWeightGSet.java",
  "functionStartLine": 367,
  "functionEndLine": 404,
  "numCommitsSeen": 28,
  "timeTaken": 5791,
  "changeHistory": [
    "b1d6574a113fcee54aefb74d7c701123ebdb990b",
    "9dbd2e7efc6f06bee59a36c25f625cca16338937",
    "f680865d994b8b75c11fa85f3241b1b9c6851187",
    "fdf1e6e07e26e0659442b787da4d0f26676c2293",
    "c81aed0271d19cba404fc51572dd8d8a75266f67",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b1d6574a113fcee54aefb74d7c701123ebdb990b": "Ybodychange",
    "9dbd2e7efc6f06bee59a36c25f625cca16338937": "Yfilerename",
    "f680865d994b8b75c11fa85f3241b1b9c6851187": "Ybodychange",
    "fdf1e6e07e26e0659442b787da4d0f26676c2293": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "c81aed0271d19cba404fc51572dd8d8a75266f67": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Yfilerename",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Yfilerename",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1d6574a113fcee54aefb74d7c701123ebdb990b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10126. LightWeightGSet log message is confusing. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 11:42 AM",
      "commitName": "b1d6574a113fcee54aefb74d7c701123ebdb990b",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/10/13 5:19 PM",
      "commitNameOld": "af89caf9e4ff1b8113737d6b948bb43a42f1b715",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 41.81,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   static int computeCapacity(long maxMemory, double percentage,\n       String mapName) {\n     if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n       throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n           + \" must be greater than or equal to 0 \"\n           + \" and less than or equal to 100\");\n     }\n     if (maxMemory \u003c 0) {\n       throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n           + \" must be greater than or equal to 0\");\n     }\n     if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n       return 0;\n     }\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n     //Percentage of max memory\n     final double percentDivisor \u003d 100.0/percentage;\n     final double percentMemory \u003d maxMemory/percentDivisor;\n     \n     //compute capacity\n     final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n     LOG.info(\"Computing capacity for map \" + mapName);\n     LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n-    LOG.info(percentage + \"% max memory \u003d \"\n-        + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n+    LOG.info(percentage + \"% max memory \"\n+        + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1)\n+        + \" \u003d \"\n+        + StringUtils.TraditionalBinaryPrefix.long2String((long) percentMemory,\n+            \"B\", 1));\n     LOG.info(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n     return c;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LOG.info(\"Computing capacity for map \" + mapName);\n    LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LOG.info(percentage + \"% max memory \"\n        + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1)\n        + \" \u003d \"\n        + StringUtils.TraditionalBinaryPrefix.long2String((long) percentMemory,\n            \"B\", 1));\n    LOG.info(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LightWeightGSet.java",
      "extendedDetails": {}
    },
    "9dbd2e7efc6f06bee59a36c25f625cca16338937": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-9760. Move GSet and related classes to common from HDFS. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505875 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/13 6:40 PM",
      "commitName": "9dbd2e7efc6f06bee59a36c25f625cca16338937",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "22/07/13 5:00 PM",
      "commitNameOld": "ca35ed13bfdcbcf6fdfc58f83f1f182786bb3b22",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LOG.info(\"Computing capacity for map \" + mapName);\n    LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LOG.info(percentage + \"% max memory \u003d \"\n        + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n    LOG.info(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LightWeightGSet.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LightWeightGSet.java"
      }
    },
    "f680865d994b8b75c11fa85f3241b1b9c6851187": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3940. Add Gset#clear method and clear the block map when namenode is shutdown. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465851 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/13 6:21 PM",
      "commitName": "f680865d994b8b75c11fa85f3241b1b9c6851187",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "26/03/13 4:01 PM",
      "commitNameOld": "fdf1e6e07e26e0659442b787da4d0f26676c2293",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 13.1,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,35 @@\n   static int computeCapacity(long maxMemory, double percentage,\n       String mapName) {\n     if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n       throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n           + \" must be greater than or equal to 0 \"\n           + \" and less than or equal to 100\");\n     }\n     if (maxMemory \u003c 0) {\n       throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n           + \" must be greater than or equal to 0\");\n     }\n     if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n       return 0;\n     }\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n     //Percentage of max memory\n     final double percentDivisor \u003d 100.0/percentage;\n     final double percentMemory \u003d maxMemory/percentDivisor;\n     \n     //compute capacity\n     final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n-    if (LightWeightGSet.LOG.isDebugEnabled()) {\n-      LOG.debug(\"Computing capacity for map \" + mapName);\n-      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n-      LOG.debug(percentage + \"% max memory \u003d \"\n-          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n-      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n-    }\n+    LOG.info(\"Computing capacity for map \" + mapName);\n+    LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n+    LOG.info(percentage + \"% max memory \u003d \"\n+        + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n+    LOG.info(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n     return c;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LOG.info(\"Computing capacity for map \" + mapName);\n    LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LOG.info(percentage + \"% max memory \u003d \"\n        + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n    LOG.info(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
      "extendedDetails": {}
    },
    "fdf1e6e07e26e0659442b787da4d0f26676c2293": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-4635. Move BlockManager#computeCapacity to LightWeightGSet. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461364 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/13 4:01 PM",
      "commitName": "fdf1e6e07e26e0659442b787da4d0f26676c2293",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-4635. Move BlockManager#computeCapacity to LightWeightGSet. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461364 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/13 4:01 PM",
          "commitName": "fdf1e6e07e26e0659442b787da4d0f26676c2293",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "26/03/13 11:57 AM",
          "commitNameOld": "af7b7667f52869d88fd99738ea7e1affeccb60ce",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  private static int computeCapacity() {\n+  static int computeCapacity(long maxMemory, double percentage,\n+      String mapName) {\n+    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n+      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n+          + \" must be greater than or equal to 0 \"\n+          + \" and less than or equal to 100\");\n+    }\n+    if (maxMemory \u003c 0) {\n+      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n+          + \" must be greater than or equal to 0\");\n+    }\n+    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n+      return 0;\n+    }\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n-    //2% of max memory\n-    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n-\n+    //Percentage of max memory\n+    final double percentDivisor \u003d 100.0/percentage;\n+    final double percentMemory \u003d maxMemory/percentDivisor;\n+    \n     //compute capacity\n-    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n+    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n     if (LightWeightGSet.LOG.isDebugEnabled()) {\n-      LightWeightGSet.LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n-      LightWeightGSet.LOG.debug(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n-      LightWeightGSet.LOG.debug(\"capacity      \u003d 2^\" + exponent\n-          + \" \u003d \" + c + \" entries\");\n+      LOG.debug(\"Computing capacity for map \" + mapName);\n+      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n+      LOG.debug(percentage + \"% max memory \u003d \"\n+          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n+      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n     }\n     return c;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    if (LightWeightGSet.LOG.isDebugEnabled()) {\n      LOG.debug(\"Computing capacity for map \" + mapName);\n      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n      LOG.debug(percentage + \"% max memory \u003d \"\n          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    }\n    return c;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
            "oldMethodName": "computeCapacity",
            "newMethodName": "computeCapacity"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4635. Move BlockManager#computeCapacity to LightWeightGSet. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461364 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/13 4:01 PM",
          "commitName": "fdf1e6e07e26e0659442b787da4d0f26676c2293",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "26/03/13 11:57 AM",
          "commitNameOld": "af7b7667f52869d88fd99738ea7e1affeccb60ce",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  private static int computeCapacity() {\n+  static int computeCapacity(long maxMemory, double percentage,\n+      String mapName) {\n+    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n+      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n+          + \" must be greater than or equal to 0 \"\n+          + \" and less than or equal to 100\");\n+    }\n+    if (maxMemory \u003c 0) {\n+      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n+          + \" must be greater than or equal to 0\");\n+    }\n+    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n+      return 0;\n+    }\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n-    //2% of max memory\n-    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n-\n+    //Percentage of max memory\n+    final double percentDivisor \u003d 100.0/percentage;\n+    final double percentMemory \u003d maxMemory/percentDivisor;\n+    \n     //compute capacity\n-    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n+    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n     if (LightWeightGSet.LOG.isDebugEnabled()) {\n-      LightWeightGSet.LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n-      LightWeightGSet.LOG.debug(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n-      LightWeightGSet.LOG.debug(\"capacity      \u003d 2^\" + exponent\n-          + \" \u003d \" + c + \" entries\");\n+      LOG.debug(\"Computing capacity for map \" + mapName);\n+      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n+      LOG.debug(percentage + \"% max memory \u003d \"\n+          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n+      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n     }\n     return c;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    if (LightWeightGSet.LOG.isDebugEnabled()) {\n      LOG.debug(\"Computing capacity for map \" + mapName);\n      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n      LOG.debug(percentage + \"% max memory \u003d \"\n          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    }\n    return c;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4635. Move BlockManager#computeCapacity to LightWeightGSet. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461364 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/13 4:01 PM",
          "commitName": "fdf1e6e07e26e0659442b787da4d0f26676c2293",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "26/03/13 11:57 AM",
          "commitNameOld": "af7b7667f52869d88fd99738ea7e1affeccb60ce",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  private static int computeCapacity() {\n+  static int computeCapacity(long maxMemory, double percentage,\n+      String mapName) {\n+    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n+      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n+          + \" must be greater than or equal to 0 \"\n+          + \" and less than or equal to 100\");\n+    }\n+    if (maxMemory \u003c 0) {\n+      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n+          + \" must be greater than or equal to 0\");\n+    }\n+    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n+      return 0;\n+    }\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n-    //2% of max memory\n-    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n-\n+    //Percentage of max memory\n+    final double percentDivisor \u003d 100.0/percentage;\n+    final double percentMemory \u003d maxMemory/percentDivisor;\n+    \n     //compute capacity\n-    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n+    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n     if (LightWeightGSet.LOG.isDebugEnabled()) {\n-      LightWeightGSet.LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n-      LightWeightGSet.LOG.debug(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n-      LightWeightGSet.LOG.debug(\"capacity      \u003d 2^\" + exponent\n-          + \" \u003d \" + c + \" entries\");\n+      LOG.debug(\"Computing capacity for map \" + mapName);\n+      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n+      LOG.debug(percentage + \"% max memory \u003d \"\n+          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n+      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n     }\n     return c;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    if (LightWeightGSet.LOG.isDebugEnabled()) {\n      LOG.debug(\"Computing capacity for map \" + mapName);\n      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n      LOG.debug(percentage + \"% max memory \u003d \"\n          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    }\n    return c;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4635. Move BlockManager#computeCapacity to LightWeightGSet. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461364 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/13 4:01 PM",
          "commitName": "fdf1e6e07e26e0659442b787da4d0f26676c2293",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "26/03/13 11:57 AM",
          "commitNameOld": "af7b7667f52869d88fd99738ea7e1affeccb60ce",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  private static int computeCapacity() {\n+  static int computeCapacity(long maxMemory, double percentage,\n+      String mapName) {\n+    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n+      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n+          + \" must be greater than or equal to 0 \"\n+          + \" and less than or equal to 100\");\n+    }\n+    if (maxMemory \u003c 0) {\n+      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n+          + \" must be greater than or equal to 0\");\n+    }\n+    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n+      return 0;\n+    }\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n-    //2% of max memory\n-    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n-\n+    //Percentage of max memory\n+    final double percentDivisor \u003d 100.0/percentage;\n+    final double percentMemory \u003d maxMemory/percentDivisor;\n+    \n     //compute capacity\n-    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n+    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n     if (LightWeightGSet.LOG.isDebugEnabled()) {\n-      LightWeightGSet.LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n-      LightWeightGSet.LOG.debug(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n-      LightWeightGSet.LOG.debug(\"capacity      \u003d 2^\" + exponent\n-          + \" \u003d \" + c + \" entries\");\n+      LOG.debug(\"Computing capacity for map \" + mapName);\n+      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n+      LOG.debug(percentage + \"% max memory \u003d \"\n+          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n+      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n     }\n     return c;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static int computeCapacity(long maxMemory, double percentage,\n      String mapName) {\n    if (percentage \u003e 100.0 || percentage \u003c 0.0) {\n      throw new HadoopIllegalArgumentException(\"Percentage \" + percentage\n          + \" must be greater than or equal to 0 \"\n          + \" and less than or equal to 100\");\n    }\n    if (maxMemory \u003c 0) {\n      throw new HadoopIllegalArgumentException(\"Memory \" + maxMemory\n          + \" must be greater than or equal to 0\");\n    }\n    if (percentage \u003d\u003d 0.0 || maxMemory \u003d\u003d 0) {\n      return 0;\n    }\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //Percentage of max memory\n    final double percentDivisor \u003d 100.0/percentage;\n    final double percentMemory \u003d maxMemory/percentDivisor;\n    \n    //compute capacity\n    final int e1 \u003d (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    if (LightWeightGSet.LOG.isDebugEnabled()) {\n      LOG.debug(\"Computing capacity for map \" + mapName);\n      LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n      LOG.debug(percentage + \"% max memory \u003d \"\n          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, \"B\", 1));\n      LOG.debug(\"capacity      \u003d 2^\" + exponent + \" \u003d \" + c + \" entries\");\n    }\n    return c;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[maxMemory-long, percentage-double, mapName-String]"
          }
        }
      ]
    },
    "c81aed0271d19cba404fc51572dd8d8a75266f67": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3613. GSet prints some INFO level values, which aren\u0027t really very useful to all. Contributed by Andrew Wang. (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359999 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 8:15 PM",
      "commitName": "c81aed0271d19cba404fc51572dd8d8a75266f67",
      "commitAuthor": "Harsh J",
      "commitDateOld": "10/05/12 2:41 PM",
      "commitNameOld": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 61.23,
      "commitsBetweenForRepo": 298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   private static int computeCapacity() {\n     //VM detection\n     //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n     final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n \n     //2% of max memory\n     final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n \n     //compute capacity\n     final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n     final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n     final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n     final int c \u003d 1 \u003c\u003c exponent;\n \n-    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n-    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n-    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n-        + \" \u003d \" + c + \" entries\");\n+    if (LightWeightGSet.LOG.isDebugEnabled()) {\n+      LightWeightGSet.LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n+      LightWeightGSet.LOG.debug(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n+      LightWeightGSet.LOG.debug(\"capacity      \u003d 2^\" + exponent\n+          + \" \u003d \" + c + \" entries\");\n+    }\n     return c;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    if (LightWeightGSet.LOG.isDebugEnabled()) {\n      LightWeightGSet.LOG.debug(\"VM type       \u003d \" + vmBit + \"-bit\");\n      LightWeightGSet.LOG.debug(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n      LightWeightGSet.LOG.debug(\"capacity      \u003d 2^\" + exponent\n          + \" \u003d \" + c + \" entries\");\n    }\n    return c;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n        + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n        + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java"
      }
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 5:26 PM",
      "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n        + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlocksMap.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java"
      }
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Yfilerename",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 4:57 PM",
      "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n        + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlocksMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlocksMap.java"
      }
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/06/11 9:21 AM",
      "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n        + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlocksMap.java",
        "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlocksMap.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  private static int computeCapacity() {\n+    //VM detection\n+    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n+    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n+\n+    //2% of max memory\n+    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n+\n+    //compute capacity\n+    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n+    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n+    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n+    final int c \u003d 1 \u003c\u003c exponent;\n+\n+    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n+    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n+    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n+        + \" \u003d \" + c + \" entries\");\n+    return c;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static int computeCapacity() {\n    //VM detection\n    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n    final String vmBit \u003d System.getProperty(\"sun.arch.data.model\");\n\n    //2% of max memory\n    final double twoPC \u003d Runtime.getRuntime().maxMemory()/50.0;\n\n    //compute capacity\n    final int e1 \u003d (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n    final int e2 \u003d e1 - (\"32\".equals(vmBit)? 2: 3);\n    final int exponent \u003d e2 \u003c 0? 0: e2 \u003e 30? 30: e2;\n    final int c \u003d 1 \u003c\u003c exponent;\n\n    LightWeightGSet.LOG.info(\"VM type       \u003d \" + vmBit + \"-bit\");\n    LightWeightGSet.LOG.info(\"2% max memory \u003d \" + twoPC/(1 \u003c\u003c 20) + \" MB\");\n    LightWeightGSet.LOG.info(\"capacity      \u003d 2^\" + exponent\n        + \" \u003d \" + c + \" entries\");\n    return c;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlocksMap.java"
    }
  }
}