{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "relaunchContainer",
  "functionId": "relaunchContainer___ctx-ContainerRuntimeContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 895,
  "functionEndLine": 926,
  "numCommitsSeen": 91,
  "timeTaken": 3400,
  "changeHistory": [
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "502914ca32ac02b19116fd681eb8301b92fccbb3",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "c467f311d0c7155c09052d93fac12045af925583"
  ],
  "changeHistoryShort": {
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ybodychange",
    "502914ca32ac02b19116fd681eb8301b92fccbb3": "Ybodychange",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ybodychange",
    "c467f311d0c7155c09052d93fac12045af925583": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/07/18 5:12 PM",
      "commitNameOld": "8688a0c7f88f2adf1a7fce695e06f3dd1f745080",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void relaunchContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n     ContainerId containerId \u003d ctx.getContainer().getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     // Check to see if the container already exists for relaunch\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-        DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n+        DockerCommandExecutor.getContainerStatus(containerIdStr,\n             privilegedOperationExecutor, nmContext);\n     if (containerStatus !\u003d null \u0026\u0026\n         DockerCommandExecutor.isStartable(containerStatus)) {\n       DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n       String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n           containerId, nmContext);\n       PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n           startCommand);\n \n       // Some failures here are acceptable. Let the calling executor decide.\n       launchOp.disableFailureLogging();\n \n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             launchOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n         throw new ContainerExecutionException(\"Relaunch container failed\", e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     } else {\n       throw new ContainerExecutionException(\"Container is not in a startable \"\n           + \"state, unable to relaunch: \" + containerIdStr);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void relaunchContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    ContainerId containerId \u003d ctx.getContainer().getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    // Check to see if the container already exists for relaunch\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerIdStr,\n            privilegedOperationExecutor, nmContext);\n    if (containerStatus !\u003d null \u0026\u0026\n        DockerCommandExecutor.isStartable(containerStatus)) {\n      DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n      String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n          containerId, nmContext);\n      PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n          startCommand);\n\n      // Some failures here are acceptable. Let the calling executor decide.\n      launchOp.disableFailureLogging();\n\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            launchOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        throw new ContainerExecutionException(\"Relaunch container failed\", e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    } else {\n      throw new ContainerExecutionException(\"Container is not in a startable \"\n          + \"state, unable to relaunch: \" + containerIdStr);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "502914ca32ac02b19116fd681eb8301b92fccbb3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7818. Remove privileged operation warnings during container launch for the ContainerRuntimes. Contributed by Shane Kumpf\n",
      "commitDate": "04/05/18 8:53 AM",
      "commitName": "502914ca32ac02b19116fd681eb8301b92fccbb3",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "02/05/18 11:33 AM",
      "commitNameOld": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void relaunchContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n     ContainerId containerId \u003d ctx.getContainer().getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     // Check to see if the container already exists for relaunch\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n             privilegedOperationExecutor, nmContext);\n     if (containerStatus !\u003d null \u0026\u0026\n         DockerCommandExecutor.isStartable(containerStatus)) {\n       DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n       String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n           containerId, nmContext);\n       PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n           startCommand);\n \n+      // Some failures here are acceptable. Let the calling executor decide.\n+      launchOp.disableFailureLogging();\n+\n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             launchOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n-        LOG.warn(\"Relaunch container failed. Exception: \", e);\n-        LOG.info(\"Docker command used: \" + startCommand);\n-\n-        throw new ContainerExecutionException(\"Launch container failed\", e\n+        throw new ContainerExecutionException(\"Relaunch container failed\", e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     } else {\n       throw new ContainerExecutionException(\"Container is not in a startable \"\n           + \"state, unable to relaunch: \" + containerIdStr);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void relaunchContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    ContainerId containerId \u003d ctx.getContainer().getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    // Check to see if the container already exists for relaunch\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n            privilegedOperationExecutor, nmContext);\n    if (containerStatus !\u003d null \u0026\u0026\n        DockerCommandExecutor.isStartable(containerStatus)) {\n      DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n      String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n          containerId, nmContext);\n      PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n          startCommand);\n\n      // Some failures here are acceptable. Let the calling executor decide.\n      launchOp.disableFailureLogging();\n\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            launchOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        throw new ContainerExecutionException(\"Relaunch container failed\", e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    } else {\n      throw new ContainerExecutionException(\"Container is not in a startable \"\n          + \"state, unable to relaunch: \" + containerIdStr);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
      "commitDate": "02/05/18 11:33 AM",
      "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/04/18 4:12 PM",
      "commitNameOld": "a966ec6e23b3ac8e233b2cf9b9ddaa6628a8c996",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void relaunchContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n-    Container container \u003d ctx.getContainer();\n-    String containerIdStr \u003d container.getContainerId().toString();\n+    ContainerId containerId \u003d ctx.getContainer().getContainerId();\n+    String containerIdStr \u003d containerId.toString();\n     // Check to see if the container already exists for relaunch\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n             privilegedOperationExecutor, nmContext);\n     if (containerStatus !\u003d null \u0026\u0026\n         DockerCommandExecutor.isStartable(containerStatus)) {\n       DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n       String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n-          container, nmContext);\n+          containerId, nmContext);\n       PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n           startCommand);\n \n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             launchOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n         LOG.warn(\"Relaunch container failed. Exception: \", e);\n         LOG.info(\"Docker command used: \" + startCommand);\n \n         throw new ContainerExecutionException(\"Launch container failed\", e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     } else {\n       throw new ContainerExecutionException(\"Container is not in a startable \"\n           + \"state, unable to relaunch: \" + containerIdStr);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void relaunchContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    ContainerId containerId \u003d ctx.getContainer().getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    // Check to see if the container already exists for relaunch\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n            privilegedOperationExecutor, nmContext);\n    if (containerStatus !\u003d null \u0026\u0026\n        DockerCommandExecutor.isStartable(containerStatus)) {\n      DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n      String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n          containerId, nmContext);\n      PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n          startCommand);\n\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            launchOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        LOG.warn(\"Relaunch container failed. Exception: \", e);\n        LOG.info(\"Docker command used: \" + startCommand);\n\n        throw new ContainerExecutionException(\"Launch container failed\", e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    } else {\n      throw new ContainerExecutionException(\"Container is not in a startable \"\n          + \"state, unable to relaunch: \" + containerIdStr);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/04/18 11:24 AM",
      "commitNameOld": "933477e9e0526e2ed81ea454f8806de31981822a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void relaunchContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n     String containerIdStr \u003d container.getContainerId().toString();\n     // Check to see if the container already exists for relaunch\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n-            privilegedOperationExecutor);\n+            privilegedOperationExecutor, nmContext);\n     if (containerStatus !\u003d null \u0026\u0026\n         DockerCommandExecutor.isStartable(containerStatus)) {\n       DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n       String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n-          containerIdStr);\n+          container, nmContext);\n       PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n           startCommand);\n \n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             launchOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n         LOG.warn(\"Relaunch container failed. Exception: \", e);\n         LOG.info(\"Docker command used: \" + startCommand);\n \n         throw new ContainerExecutionException(\"Launch container failed\", e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     } else {\n       throw new ContainerExecutionException(\"Container is not in a startable \"\n           + \"state, unable to relaunch: \" + containerIdStr);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void relaunchContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    String containerIdStr \u003d container.getContainerId().toString();\n    // Check to see if the container already exists for relaunch\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n            privilegedOperationExecutor, nmContext);\n    if (containerStatus !\u003d null \u0026\u0026\n        DockerCommandExecutor.isStartable(containerStatus)) {\n      DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n      String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n          container, nmContext);\n      PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n          startCommand);\n\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            launchOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        LOG.warn(\"Relaunch container failed. Exception: \", e);\n        LOG.info(\"Docker command used: \" + startCommand);\n\n        throw new ContainerExecutionException(\"Launch container failed\", e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    } else {\n      throw new ContainerExecutionException(\"Container is not in a startable \"\n          + \"state, unable to relaunch: \" + containerIdStr);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,32 @@\n+  public void relaunchContainer(ContainerRuntimeContext ctx)\n+      throws ContainerExecutionException {\n+    Container container \u003d ctx.getContainer();\n+    String containerIdStr \u003d container.getContainerId().toString();\n+    // Check to see if the container already exists for relaunch\n+    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n+        DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n+            privilegedOperationExecutor);\n+    if (containerStatus !\u003d null \u0026\u0026\n+        DockerCommandExecutor.isStartable(containerStatus)) {\n+      DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n+      String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n+          containerIdStr);\n+      PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n+          startCommand);\n+\n+      try {\n+        privilegedOperationExecutor.executePrivilegedOperation(null,\n+            launchOp, null, null, false, false);\n+      } catch (PrivilegedOperationException e) {\n+        LOG.warn(\"Relaunch container failed. Exception: \", e);\n+        LOG.info(\"Docker command used: \" + startCommand);\n+\n+        throw new ContainerExecutionException(\"Launch container failed\", e\n+            .getExitCode(), e.getOutput(), e.getErrorOutput());\n+      }\n+    } else {\n+      throw new ContainerExecutionException(\"Container is not in a startable \"\n+          + \"state, unable to relaunch: \" + containerIdStr);\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void relaunchContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    String containerIdStr \u003d container.getContainerId().toString();\n    // Check to see if the container already exists for relaunch\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerIdStr, conf,\n            privilegedOperationExecutor);\n    if (containerStatus !\u003d null \u0026\u0026\n        DockerCommandExecutor.isStartable(containerStatus)) {\n      DockerStartCommand startCommand \u003d new DockerStartCommand(containerIdStr);\n      String commandFile \u003d dockerClient.writeCommandToTempFile(startCommand,\n          containerIdStr);\n      PrivilegedOperation launchOp \u003d buildLaunchOp(ctx, commandFile,\n          startCommand);\n\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            launchOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        LOG.warn(\"Relaunch container failed. Exception: \", e);\n        LOG.info(\"Docker command used: \" + startCommand);\n\n        throw new ContainerExecutionException(\"Launch container failed\", e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    } else {\n      throw new ContainerExecutionException(\"Container is not in a startable \"\n          + \"state, unable to relaunch: \" + containerIdStr);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}