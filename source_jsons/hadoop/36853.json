{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "listReservation",
  "functionId": "listReservation___queue-String(annotations-@QueryParam(RMWSConsts.QUEUE)-@DefaultValue(DEFAULT_QUEUE))__reservationId-String(annotations-@QueryParam(RMWSConsts.RESERVATION_ID)-@DefaultValue(DEFAULT_RESERVATION_ID))__startTime-long(annotations-@QueryParam(RMWSConsts.START_TIME)-@DefaultValue(DEFAULT_START_TIME))__endTime-long(annotations-@QueryParam(RMWSConsts.END_TIME)-@DefaultValue(DEFAULT_END_TIME))__includeResourceAllocations-boolean(annotations-@QueryParam(RMWSConsts.INCLUDE_RESOURCE)-@DefaultValue(DEFAULT_INCLUDE_RESOURCE))__hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2323,
  "functionEndLine": 2366,
  "numCommitsSeen": 169,
  "timeTaken": 3822,
  "changeHistory": [
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
    "b706cbc1bc0ab3572c01676fe7365df21eda7ffa"
  ],
  "changeHistoryShort": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": "Yparametermetachange",
    "b706cbc1bc0ab3572c01676fe7365df21eda7ffa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public Response listReservation(\n       @QueryParam(RMWSConsts.QUEUE) @DefaultValue(DEFAULT_QUEUE) String queue,\n       @QueryParam(RMWSConsts.RESERVATION_ID) @DefaultValue(DEFAULT_RESERVATION_ID) String reservationId,\n       @QueryParam(RMWSConsts.START_TIME) @DefaultValue(DEFAULT_START_TIME) long startTime,\n       @QueryParam(RMWSConsts.END_TIME) @DefaultValue(DEFAULT_END_TIME) long endTime,\n       @QueryParam(RMWSConsts.INCLUDE_RESOURCE) @DefaultValue(DEFAULT_INCLUDE_RESOURCE) boolean includeResourceAllocations,\n       @Context HttpServletRequest hsr) throws Exception {\n-    init();\n+    initForReadableEndpoints();\n \n     final ReservationListRequest request \u003d ReservationListRequest.newInstance(\n         queue, reservationId, startTime, endTime, includeResourceAllocations);\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     if (callerUGI \u003d\u003d null) {\n       throw new AuthorizationException(\n           \"Unable to obtain user name, \" + \"user not authenticated\");\n     }\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n       String msg \u003d \"The default static user cannot carry out this operation.\";\n       return Response.status(Status.FORBIDDEN).entity(msg).build();\n     }\n \n     ReservationListResponse resRespInfo;\n     try {\n       resRespInfo \u003d callerUGI\n           .doAs(new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n             @Override\n             public ReservationListResponse run()\n                 throws IOException, YarnException {\n               return rm.getClientRMService().listReservations(request);\n             }\n           });\n     } catch (UndeclaredThrowableException ue) {\n       if (ue.getCause() instanceof YarnException) {\n         throw new BadRequestException(ue.getCause().getMessage());\n       }\n       LOG.info(\"List reservation request failed\", ue);\n       throw ue;\n     }\n \n     ReservationListInfo resResponse \u003d\n         new ReservationListInfo(resRespInfo, includeResourceAllocations);\n     return Response.status(Status.OK).entity(resResponse).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response listReservation(\n      @QueryParam(RMWSConsts.QUEUE) @DefaultValue(DEFAULT_QUEUE) String queue,\n      @QueryParam(RMWSConsts.RESERVATION_ID) @DefaultValue(DEFAULT_RESERVATION_ID) String reservationId,\n      @QueryParam(RMWSConsts.START_TIME) @DefaultValue(DEFAULT_START_TIME) long startTime,\n      @QueryParam(RMWSConsts.END_TIME) @DefaultValue(DEFAULT_END_TIME) long endTime,\n      @QueryParam(RMWSConsts.INCLUDE_RESOURCE) @DefaultValue(DEFAULT_INCLUDE_RESOURCE) boolean includeResourceAllocations,\n      @Context HttpServletRequest hsr) throws Exception {\n    initForReadableEndpoints();\n\n    final ReservationListRequest request \u003d ReservationListRequest.newInstance(\n        queue, reservationId, startTime, endTime, includeResourceAllocations);\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI \u003d\u003d null) {\n      throw new AuthorizationException(\n          \"Unable to obtain user name, \" + \"user not authenticated\");\n    }\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n      String msg \u003d \"The default static user cannot carry out this operation.\";\n      return Response.status(Status.FORBIDDEN).entity(msg).build();\n    }\n\n    ReservationListResponse resRespInfo;\n    try {\n      resRespInfo \u003d callerUGI\n          .doAs(new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n            @Override\n            public ReservationListResponse run()\n                throws IOException, YarnException {\n              return rm.getClientRMService().listReservations(request);\n            }\n          });\n    } catch (UndeclaredThrowableException ue) {\n      if (ue.getCause() instanceof YarnException) {\n        throw new BadRequestException(ue.getCause().getMessage());\n      }\n      LOG.info(\"List reservation request failed\", ue);\n      throw ue;\n    }\n\n    ReservationListInfo resResponse \u003d\n        new ReservationListInfo(resRespInfo, includeResourceAllocations);\n    return Response.status(Status.OK).entity(resResponse).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": {
      "type": "Yparametermetachange",
      "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "07/06/17 1:41 PM",
      "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "08/12/16 2:23 AM",
      "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 181.43,
      "commitsBetweenForRepo": 954,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public Response listReservation(\n-          @QueryParam(\"queue\") @DefaultValue(\"default\") String queue,\n-          @QueryParam(\"reservation-id\") @DefaultValue(\"\") String reservationId,\n-          @QueryParam(\"start-time\") @DefaultValue(\"0\") long startTime,\n-          @QueryParam(\"end-time\") @DefaultValue(\"-1\") long endTime,\n-          @QueryParam(\"include-resource-allocations\") @DefaultValue(\"false\")\n-          boolean includeResourceAllocations, @Context HttpServletRequest hsr)\n-          throws Exception {\n+      @QueryParam(RMWSConsts.QUEUE) @DefaultValue(DEFAULT_QUEUE) String queue,\n+      @QueryParam(RMWSConsts.RESERVATION_ID) @DefaultValue(DEFAULT_RESERVATION_ID) String reservationId,\n+      @QueryParam(RMWSConsts.START_TIME) @DefaultValue(DEFAULT_START_TIME) long startTime,\n+      @QueryParam(RMWSConsts.END_TIME) @DefaultValue(DEFAULT_END_TIME) long endTime,\n+      @QueryParam(RMWSConsts.INCLUDE_RESOURCE) @DefaultValue(DEFAULT_INCLUDE_RESOURCE) boolean includeResourceAllocations,\n+      @Context HttpServletRequest hsr) throws Exception {\n     init();\n \n     final ReservationListRequest request \u003d ReservationListRequest.newInstance(\n-          queue, reservationId, startTime, endTime, includeResourceAllocations);\n+        queue, reservationId, startTime, endTime, includeResourceAllocations);\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     if (callerUGI \u003d\u003d null) {\n-      throw new AuthorizationException(\"Unable to obtain user name, \"\n-              + \"user not authenticated\");\n+      throw new AuthorizationException(\n+          \"Unable to obtain user name, \" + \"user not authenticated\");\n     }\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n       String msg \u003d \"The default static user cannot carry out this operation.\";\n       return Response.status(Status.FORBIDDEN).entity(msg).build();\n     }\n \n     ReservationListResponse resRespInfo;\n     try {\n-      resRespInfo \u003d callerUGI.doAs(\n-          new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n+      resRespInfo \u003d callerUGI\n+          .doAs(new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n             @Override\n-            public ReservationListResponse run() throws IOException,\n-                    YarnException {\n+            public ReservationListResponse run()\n+                throws IOException, YarnException {\n               return rm.getClientRMService().listReservations(request);\n             }\n           });\n     } catch (UndeclaredThrowableException ue) {\n       if (ue.getCause() instanceof YarnException) {\n         throw new BadRequestException(ue.getCause().getMessage());\n       }\n       LOG.info(\"List reservation request failed\", ue);\n       throw ue;\n     }\n \n-    ReservationListInfo resResponse \u003d new ReservationListInfo(resRespInfo,\n-            includeResourceAllocations);\n+    ReservationListInfo resResponse \u003d\n+        new ReservationListInfo(resRespInfo, includeResourceAllocations);\n     return Response.status(Status.OK).entity(resResponse).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response listReservation(\n      @QueryParam(RMWSConsts.QUEUE) @DefaultValue(DEFAULT_QUEUE) String queue,\n      @QueryParam(RMWSConsts.RESERVATION_ID) @DefaultValue(DEFAULT_RESERVATION_ID) String reservationId,\n      @QueryParam(RMWSConsts.START_TIME) @DefaultValue(DEFAULT_START_TIME) long startTime,\n      @QueryParam(RMWSConsts.END_TIME) @DefaultValue(DEFAULT_END_TIME) long endTime,\n      @QueryParam(RMWSConsts.INCLUDE_RESOURCE) @DefaultValue(DEFAULT_INCLUDE_RESOURCE) boolean includeResourceAllocations,\n      @Context HttpServletRequest hsr) throws Exception {\n    init();\n\n    final ReservationListRequest request \u003d ReservationListRequest.newInstance(\n        queue, reservationId, startTime, endTime, includeResourceAllocations);\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI \u003d\u003d null) {\n      throw new AuthorizationException(\n          \"Unable to obtain user name, \" + \"user not authenticated\");\n    }\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n      String msg \u003d \"The default static user cannot carry out this operation.\";\n      return Response.status(Status.FORBIDDEN).entity(msg).build();\n    }\n\n    ReservationListResponse resRespInfo;\n    try {\n      resRespInfo \u003d callerUGI\n          .doAs(new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n            @Override\n            public ReservationListResponse run()\n                throws IOException, YarnException {\n              return rm.getClientRMService().listReservations(request);\n            }\n          });\n    } catch (UndeclaredThrowableException ue) {\n      if (ue.getCause() instanceof YarnException) {\n        throw new BadRequestException(ue.getCause().getMessage());\n      }\n      LOG.info(\"List reservation request failed\", ue);\n      throw ue;\n    }\n\n    ReservationListInfo resResponse \u003d\n        new ReservationListInfo(resRespInfo, includeResourceAllocations);\n    return Response.status(Status.OK).entity(resResponse).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {
        "oldValue": "[queue-String(annotations-@QueryParam(\"queue\")-@DefaultValue(\"default\")), reservationId-String(annotations-@QueryParam(\"reservation-id\")-@DefaultValue(\"\")), startTime-long(annotations-@QueryParam(\"start-time\")-@DefaultValue(\"0\")), endTime-long(annotations-@QueryParam(\"end-time\")-@DefaultValue(\"-1\")), includeResourceAllocations-boolean(annotations-@QueryParam(\"include-resource-allocations\")-@DefaultValue(\"false\")), hsr-HttpServletRequest(annotations-@Context)]",
        "newValue": "[queue-String(annotations-@QueryParam(RMWSConsts.QUEUE)-@DefaultValue(DEFAULT_QUEUE)), reservationId-String(annotations-@QueryParam(RMWSConsts.RESERVATION_ID)-@DefaultValue(DEFAULT_RESERVATION_ID)), startTime-long(annotations-@QueryParam(RMWSConsts.START_TIME)-@DefaultValue(DEFAULT_START_TIME)), endTime-long(annotations-@QueryParam(RMWSConsts.END_TIME)-@DefaultValue(DEFAULT_END_TIME)), includeResourceAllocations-boolean(annotations-@QueryParam(RMWSConsts.INCLUDE_RESOURCE)-@DefaultValue(DEFAULT_INCLUDE_RESOURCE)), hsr-HttpServletRequest(annotations-@Context)]"
      }
    },
    "b706cbc1bc0ab3572c01676fe7365df21eda7ffa": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4420. Add REST API for List Reservations (Sean Po via curino)\n",
      "commitDate": "10/02/16 10:19 AM",
      "commitName": "b706cbc1bc0ab3572c01676fe7365df21eda7ffa",
      "commitAuthor": "\u003d",
      "diff": "@@ -0,0 +1,45 @@\n+  public Response listReservation(\n+          @QueryParam(\"queue\") @DefaultValue(\"default\") String queue,\n+          @QueryParam(\"reservation-id\") @DefaultValue(\"\") String reservationId,\n+          @QueryParam(\"start-time\") @DefaultValue(\"0\") long startTime,\n+          @QueryParam(\"end-time\") @DefaultValue(\"-1\") long endTime,\n+          @QueryParam(\"include-resource-allocations\") @DefaultValue(\"false\")\n+          boolean includeResourceAllocations, @Context HttpServletRequest hsr)\n+          throws Exception {\n+    init();\n+\n+    final ReservationListRequest request \u003d ReservationListRequest.newInstance(\n+          queue, reservationId, startTime, endTime, includeResourceAllocations);\n+\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    if (callerUGI \u003d\u003d null) {\n+      throw new AuthorizationException(\"Unable to obtain user name, \"\n+              + \"user not authenticated\");\n+    }\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n+      String msg \u003d \"The default static user cannot carry out this operation.\";\n+      return Response.status(Status.FORBIDDEN).entity(msg).build();\n+    }\n+\n+    ReservationListResponse resRespInfo;\n+    try {\n+      resRespInfo \u003d callerUGI.doAs(\n+          new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n+            @Override\n+            public ReservationListResponse run() throws IOException,\n+                    YarnException {\n+              return rm.getClientRMService().listReservations(request);\n+            }\n+          });\n+    } catch (UndeclaredThrowableException ue) {\n+      if (ue.getCause() instanceof YarnException) {\n+        throw new BadRequestException(ue.getCause().getMessage());\n+      }\n+      LOG.info(\"List reservation request failed\", ue);\n+      throw ue;\n+    }\n+\n+    ReservationListInfo resResponse \u003d new ReservationListInfo(resRespInfo,\n+            includeResourceAllocations);\n+    return Response.status(Status.OK).entity(resResponse).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response listReservation(\n          @QueryParam(\"queue\") @DefaultValue(\"default\") String queue,\n          @QueryParam(\"reservation-id\") @DefaultValue(\"\") String reservationId,\n          @QueryParam(\"start-time\") @DefaultValue(\"0\") long startTime,\n          @QueryParam(\"end-time\") @DefaultValue(\"-1\") long endTime,\n          @QueryParam(\"include-resource-allocations\") @DefaultValue(\"false\")\n          boolean includeResourceAllocations, @Context HttpServletRequest hsr)\n          throws Exception {\n    init();\n\n    final ReservationListRequest request \u003d ReservationListRequest.newInstance(\n          queue, reservationId, startTime, endTime, includeResourceAllocations);\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI \u003d\u003d null) {\n      throw new AuthorizationException(\"Unable to obtain user name, \"\n              + \"user not authenticated\");\n    }\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n      String msg \u003d \"The default static user cannot carry out this operation.\";\n      return Response.status(Status.FORBIDDEN).entity(msg).build();\n    }\n\n    ReservationListResponse resRespInfo;\n    try {\n      resRespInfo \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cReservationListResponse\u003e() {\n            @Override\n            public ReservationListResponse run() throws IOException,\n                    YarnException {\n              return rm.getClientRMService().listReservations(request);\n            }\n          });\n    } catch (UndeclaredThrowableException ue) {\n      if (ue.getCause() instanceof YarnException) {\n        throw new BadRequestException(ue.getCause().getMessage());\n      }\n      LOG.info(\"List reservation request failed\", ue);\n      throw ue;\n    }\n\n    ReservationListInfo resResponse \u003d new ReservationListInfo(resRespInfo,\n            includeResourceAllocations);\n    return Response.status(Status.OK).entity(resResponse).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}