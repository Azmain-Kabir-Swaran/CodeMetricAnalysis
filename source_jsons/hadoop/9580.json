{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Command.java",
  "functionName": "parseTopNodes",
  "functionId": "parseTopNodes___cmd-CommandLine(modifiers-final)__result-TextStringBuilder(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/Command.java",
  "functionStartLine": 504,
  "functionEndLine": 534,
  "numCommitsSeen": 46,
  "timeTaken": 1807,
  "changeHistory": [
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
    "2a48b3594c502c4dcf201f2b60386383c0d9ae91",
    "35c5943b8ba394191405555cdfc5e6127053ee97",
    "b502102bb1a1f416f43dd1227886c57ccad70fcc"
  ],
  "changeHistoryShort": {
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": "Yparameterchange",
    "2a48b3594c502c4dcf201f2b60386383c0d9ae91": "Ymultichange(Yexceptionschange,Ybodychange)",
    "35c5943b8ba394191405555cdfc5e6127053ee97": "Ybodychange",
    "b502102bb1a1f416f43dd1227886c57ccad70fcc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-15531. Use commons-text instead of commons-lang in some classes to fix deprecation warnings. Contributed by Takanobu Asanuma.\n",
      "commitDate": "13/07/18 8:42 AM",
      "commitName": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/06/18 10:17 AM",
      "commitNameOld": "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.93,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n-  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result)\n+  protected int parseTopNodes(final CommandLine cmd, final TextStringBuilder result)\n       throws IllegalArgumentException {\n     String outputLine \u003d \"\";\n     int nodes \u003d 0;\n     final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n     if (StringUtils.isBlank(topVal)) {\n       outputLine \u003d String.format(\n           \"No top limit specified, using default top value %d.\",\n           getDefaultTop());\n       LOG.info(outputLine);\n       result.appendln(outputLine);\n       nodes \u003d getDefaultTop();\n     } else {\n       try {\n         nodes \u003d Integer.parseInt(topVal);\n       } catch (NumberFormatException nfe) {\n         outputLine \u003d String.format(\n             \"Top limit input is not numeric, using default top value %d.\",\n             getDefaultTop());\n         LOG.info(outputLine);\n         result.appendln(outputLine);\n         nodes \u003d getDefaultTop();\n       }\n       if (nodes \u003c\u003d 0) {\n         throw new IllegalArgumentException(\n             \"Top limit input should be a positive numeric value\");\n       }\n     }\n \n     return Math.min(nodes, cluster.getNodes().size());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int parseTopNodes(final CommandLine cmd, final TextStringBuilder result)\n      throws IllegalArgumentException {\n    String outputLine \u003d \"\";\n    int nodes \u003d 0;\n    final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n    if (StringUtils.isBlank(topVal)) {\n      outputLine \u003d String.format(\n          \"No top limit specified, using default top value %d.\",\n          getDefaultTop());\n      LOG.info(outputLine);\n      result.appendln(outputLine);\n      nodes \u003d getDefaultTop();\n    } else {\n      try {\n        nodes \u003d Integer.parseInt(topVal);\n      } catch (NumberFormatException nfe) {\n        outputLine \u003d String.format(\n            \"Top limit input is not numeric, using default top value %d.\",\n            getDefaultTop());\n        LOG.info(outputLine);\n        result.appendln(outputLine);\n        nodes \u003d getDefaultTop();\n      }\n      if (nodes \u003c\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Top limit input should be a positive numeric value\");\n      }\n    }\n\n    return Math.min(nodes, cluster.getNodes().size());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/Command.java",
      "extendedDetails": {
        "oldValue": "[cmd-CommandLine(modifiers-final), result-StrBuilder(modifiers-final)]",
        "newValue": "[cmd-CommandLine(modifiers-final), result-TextStringBuilder(modifiers-final)]"
      }
    },
    "2a48b3594c502c4dcf201f2b60386383c0d9ae91": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-12948. DiskBalancer report command top option should only take positive numeric values. Contributed by Shashikant Banerjee.\n",
      "commitDate": "03/01/18 6:48 PM",
      "commitName": "2a48b3594c502c4dcf201f2b60386383c0d9ae91",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-12948. DiskBalancer report command top option should only take positive numeric values. Contributed by Shashikant Banerjee.\n",
          "commitDate": "03/01/18 6:48 PM",
          "commitName": "2a48b3594c502c4dcf201f2b60386383c0d9ae91",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "21/03/17 2:44 AM",
          "commitNameOld": "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 288.71,
          "commitsBetweenForRepo": 1952,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,31 @@\n-  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result) {\n+  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result)\n+      throws IllegalArgumentException {\n     String outputLine \u003d \"\";\n     int nodes \u003d 0;\n     final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n     if (StringUtils.isBlank(topVal)) {\n       outputLine \u003d String.format(\n           \"No top limit specified, using default top value %d.\",\n           getDefaultTop());\n       LOG.info(outputLine);\n       result.appendln(outputLine);\n       nodes \u003d getDefaultTop();\n     } else {\n       try {\n         nodes \u003d Integer.parseInt(topVal);\n       } catch (NumberFormatException nfe) {\n         outputLine \u003d String.format(\n             \"Top limit input is not numeric, using default top value %d.\",\n             getDefaultTop());\n         LOG.info(outputLine);\n         result.appendln(outputLine);\n         nodes \u003d getDefaultTop();\n       }\n+      if (nodes \u003c\u003d 0) {\n+        throw new IllegalArgumentException(\n+            \"Top limit input should be a positive numeric value\");\n+      }\n     }\n \n     return Math.min(nodes, cluster.getNodes().size());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result)\n      throws IllegalArgumentException {\n    String outputLine \u003d \"\";\n    int nodes \u003d 0;\n    final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n    if (StringUtils.isBlank(topVal)) {\n      outputLine \u003d String.format(\n          \"No top limit specified, using default top value %d.\",\n          getDefaultTop());\n      LOG.info(outputLine);\n      result.appendln(outputLine);\n      nodes \u003d getDefaultTop();\n    } else {\n      try {\n        nodes \u003d Integer.parseInt(topVal);\n      } catch (NumberFormatException nfe) {\n        outputLine \u003d String.format(\n            \"Top limit input is not numeric, using default top value %d.\",\n            getDefaultTop());\n        LOG.info(outputLine);\n        result.appendln(outputLine);\n        nodes \u003d getDefaultTop();\n      }\n      if (nodes \u003c\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Top limit input should be a positive numeric value\");\n      }\n    }\n\n    return Math.min(nodes, cluster.getNodes().size());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/Command.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IllegalArgumentException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12948. DiskBalancer report command top option should only take positive numeric values. Contributed by Shashikant Banerjee.\n",
          "commitDate": "03/01/18 6:48 PM",
          "commitName": "2a48b3594c502c4dcf201f2b60386383c0d9ae91",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "21/03/17 2:44 AM",
          "commitNameOld": "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 288.71,
          "commitsBetweenForRepo": 1952,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,31 @@\n-  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result) {\n+  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result)\n+      throws IllegalArgumentException {\n     String outputLine \u003d \"\";\n     int nodes \u003d 0;\n     final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n     if (StringUtils.isBlank(topVal)) {\n       outputLine \u003d String.format(\n           \"No top limit specified, using default top value %d.\",\n           getDefaultTop());\n       LOG.info(outputLine);\n       result.appendln(outputLine);\n       nodes \u003d getDefaultTop();\n     } else {\n       try {\n         nodes \u003d Integer.parseInt(topVal);\n       } catch (NumberFormatException nfe) {\n         outputLine \u003d String.format(\n             \"Top limit input is not numeric, using default top value %d.\",\n             getDefaultTop());\n         LOG.info(outputLine);\n         result.appendln(outputLine);\n         nodes \u003d getDefaultTop();\n       }\n+      if (nodes \u003c\u003d 0) {\n+        throw new IllegalArgumentException(\n+            \"Top limit input should be a positive numeric value\");\n+      }\n     }\n \n     return Math.min(nodes, cluster.getNodes().size());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result)\n      throws IllegalArgumentException {\n    String outputLine \u003d \"\";\n    int nodes \u003d 0;\n    final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n    if (StringUtils.isBlank(topVal)) {\n      outputLine \u003d String.format(\n          \"No top limit specified, using default top value %d.\",\n          getDefaultTop());\n      LOG.info(outputLine);\n      result.appendln(outputLine);\n      nodes \u003d getDefaultTop();\n    } else {\n      try {\n        nodes \u003d Integer.parseInt(topVal);\n      } catch (NumberFormatException nfe) {\n        outputLine \u003d String.format(\n            \"Top limit input is not numeric, using default top value %d.\",\n            getDefaultTop());\n        LOG.info(outputLine);\n        result.appendln(outputLine);\n        nodes \u003d getDefaultTop();\n      }\n      if (nodes \u003c\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Top limit input should be a positive numeric value\");\n      }\n    }\n\n    return Math.min(nodes, cluster.getNodes().size());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/Command.java",
          "extendedDetails": {}
        }
      ]
    },
    "35c5943b8ba394191405555cdfc5e6127053ee97": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10553. DiskBalancer: Rename Tools/DiskBalancer class to Tools/DiskBalancerCLI. Contributed by Manoj Govindassamy.\n",
      "commitDate": "08/09/16 7:26 PM",
      "commitName": "35c5943b8ba394191405555cdfc5e6127053ee97",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "30/08/16 6:42 PM",
      "commitNameOld": "20ae1fa259b36a7bc11b0f8de1ebf753c858f93c",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 9.03,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected int parseTopNodes(final CommandLine cmd, final StrBuilder result) {\n     String outputLine \u003d \"\";\n     int nodes \u003d 0;\n-    final String topVal \u003d cmd.getOptionValue(DiskBalancer.TOP);\n+    final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n     if (StringUtils.isBlank(topVal)) {\n       outputLine \u003d String.format(\n           \"No top limit specified, using default top value %d.\",\n           getDefaultTop());\n       LOG.info(outputLine);\n       result.appendln(outputLine);\n       nodes \u003d getDefaultTop();\n     } else {\n       try {\n         nodes \u003d Integer.parseInt(topVal);\n       } catch (NumberFormatException nfe) {\n         outputLine \u003d String.format(\n             \"Top limit input is not numeric, using default top value %d.\",\n             getDefaultTop());\n         LOG.info(outputLine);\n         result.appendln(outputLine);\n         nodes \u003d getDefaultTop();\n       }\n     }\n \n     return Math.min(nodes, cluster.getNodes().size());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result) {\n    String outputLine \u003d \"\";\n    int nodes \u003d 0;\n    final String topVal \u003d cmd.getOptionValue(DiskBalancerCLI.TOP);\n    if (StringUtils.isBlank(topVal)) {\n      outputLine \u003d String.format(\n          \"No top limit specified, using default top value %d.\",\n          getDefaultTop());\n      LOG.info(outputLine);\n      result.appendln(outputLine);\n      nodes \u003d getDefaultTop();\n    } else {\n      try {\n        nodes \u003d Integer.parseInt(topVal);\n      } catch (NumberFormatException nfe) {\n        outputLine \u003d String.format(\n            \"Top limit input is not numeric, using default top value %d.\",\n            getDefaultTop());\n        LOG.info(outputLine);\n        result.appendln(outputLine);\n        nodes \u003d getDefaultTop();\n      }\n    }\n\n    return Math.min(nodes, cluster.getNodes().size());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/Command.java",
      "extendedDetails": {}
    },
    "b502102bb1a1f416f43dd1227886c57ccad70fcc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9461. DiskBalancer: Add Report Command. Contributed by Xiaobing Zhou.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "b502102bb1a1f416f43dd1227886c57ccad70fcc",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,26 @@\n+  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result) {\n+    String outputLine \u003d \"\";\n+    int nodes \u003d 0;\n+    final String topVal \u003d cmd.getOptionValue(DiskBalancer.TOP);\n+    if (StringUtils.isBlank(topVal)) {\n+      outputLine \u003d String.format(\n+          \"No top limit specified, using default top value %d.\",\n+          getDefaultTop());\n+      LOG.info(outputLine);\n+      result.appendln(outputLine);\n+      nodes \u003d getDefaultTop();\n+    } else {\n+      try {\n+        nodes \u003d Integer.parseInt(topVal);\n+      } catch (NumberFormatException nfe) {\n+        outputLine \u003d String.format(\n+            \"Top limit input is not numeric, using default top value %d.\",\n+            getDefaultTop());\n+        LOG.info(outputLine);\n+        result.appendln(outputLine);\n+        nodes \u003d getDefaultTop();\n+      }\n+    }\n+\n+    return Math.min(nodes, cluster.getNodes().size());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int parseTopNodes(final CommandLine cmd, final StrBuilder result) {\n    String outputLine \u003d \"\";\n    int nodes \u003d 0;\n    final String topVal \u003d cmd.getOptionValue(DiskBalancer.TOP);\n    if (StringUtils.isBlank(topVal)) {\n      outputLine \u003d String.format(\n          \"No top limit specified, using default top value %d.\",\n          getDefaultTop());\n      LOG.info(outputLine);\n      result.appendln(outputLine);\n      nodes \u003d getDefaultTop();\n    } else {\n      try {\n        nodes \u003d Integer.parseInt(topVal);\n      } catch (NumberFormatException nfe) {\n        outputLine \u003d String.format(\n            \"Top limit input is not numeric, using default top value %d.\",\n            getDefaultTop());\n        LOG.info(outputLine);\n        result.appendln(outputLine);\n        nodes \u003d getDefaultTop();\n      }\n    }\n\n    return Math.min(nodes, cluster.getNodes().size());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/Command.java"
    }
  }
}