{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFuture.java",
  "functionName": "getDoneValue",
  "functionId": "getDoneValue___obj-Object",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java",
  "functionStartLine": 548,
  "functionEndLine": 564,
  "numCommitsSeen": 4,
  "timeTaken": 741,
  "changeHistory": [
    "d69a82c89c1e857a2a86ff614ae11fb5df993614"
  ],
  "changeHistoryShort": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11511. Support Timeout when checking single disk. Contributed by Hanisha Koneru.\n",
      "commitDate": "15/03/17 6:01 PM",
      "commitName": "d69a82c89c1e857a2a86ff614ae11fb5df993614",
      "commitAuthor": "Hanisha Koneru",
      "diff": "@@ -0,0 +1,17 @@\n+  private V getDoneValue(Object obj) throws ExecutionException {\n+    // While this seems like it might be too branch-y, simple benchmarking\n+    // proves it to be unmeasurable (comparing done AbstractFutures with\n+    // immediateFuture)\n+    if (obj instanceof Cancellation) {\n+      throw cancellationExceptionWithCause(\n+          \"Task was cancelled.\", ((Cancellation) obj).cause);\n+    } else if (obj instanceof Failure) {\n+      throw new ExecutionException(((Failure) obj).exception);\n+    } else if (obj \u003d\u003d NULL) {\n+      return null;\n+    } else {\n+      @SuppressWarnings(\"unchecked\") // this is the only other option\n+          V asV \u003d (V) obj;\n+      return asV;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private V getDoneValue(Object obj) throws ExecutionException {\n    // While this seems like it might be too branch-y, simple benchmarking\n    // proves it to be unmeasurable (comparing done AbstractFutures with\n    // immediateFuture)\n    if (obj instanceof Cancellation) {\n      throw cancellationExceptionWithCause(\n          \"Task was cancelled.\", ((Cancellation) obj).cause);\n    } else if (obj instanceof Failure) {\n      throw new ExecutionException(((Failure) obj).exception);\n    } else if (obj \u003d\u003d NULL) {\n      return null;\n    } else {\n      @SuppressWarnings(\"unchecked\") // this is the only other option\n          V asV \u003d (V) obj;\n      return asV;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java"
    }
  }
}