{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsAclHelper.java",
  "functionName": "removeAclEntriesInternal",
  "functionId": "removeAclEntriesInternal___aclEntries-Map__String,String____toRemoveEntries-Map__String,String__",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsAclHelper.java",
  "functionStartLine": 95,
  "functionEndLine": 143,
  "numCommitsSeen": 3,
  "timeTaken": 1059,
  "changeHistory": [
    "724c15007beb9ca36f2f37c829f1daa366d95bbf",
    "9c1e4e81399913f180131f4faa95604087c6d962"
  ],
  "changeHistoryShort": {
    "724c15007beb9ca36f2f37c829f1daa366d95bbf": "Ybodychange",
    "9c1e4e81399913f180131f4faa95604087c6d962": "Yintroduced"
  },
  "changeHistoryDetails": {
    "724c15007beb9ca36f2f37c829f1daa366d95bbf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15846. ABFS: fix mask related bugs in setAcl, modifyAclEntries and removeAclEntries.\n\nContributed by Junhua Gu.\n\n(cherry picked from commit 66715005f9e8f4f25faa352a06d142b75a029f0e)\n",
      "commitDate": "08/11/18 9:21 AM",
      "commitName": "724c15007beb9ca36f2f37c829f1daa366d95bbf",
      "commitAuthor": "Junhua Gu",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 51.89,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,49 @@\n   public static void removeAclEntriesInternal(Map\u003cString, String\u003e aclEntries, Map\u003cString, String\u003e toRemoveEntries)\n       throws AzureBlobFileSystemException {\n     boolean accessAclTouched \u003d false;\n     boolean defaultAclTouched \u003d false;\n \n     final Set\u003cString\u003e removeIndicationSet \u003d new HashSet\u003c\u003e();\n \n     for (String entryKey : toRemoveEntries.keySet()) {\n       final boolean isDefaultAcl \u003d isDefaultAce(entryKey);\n       if (removeNamedAceAndUpdateSet(entryKey, isDefaultAcl, removeIndicationSet, aclEntries)) {\n         if (isDefaultAcl) {\n           defaultAclTouched \u003d true;\n         } else {\n           accessAclTouched \u003d true;\n         }\n       }\n     }\n+\n+    if (removeIndicationSet.contains(AbfsHttpConstants.ACCESS_MASK) \u0026\u0026 containsNamedAce(aclEntries, false)) {\n+      throw new InvalidAclOperationException(\"Access mask is required when a named access acl is present.\");\n+    }\n+\n     if (accessAclTouched) {\n       if (removeIndicationSet.contains(AbfsHttpConstants.ACCESS_MASK)) {\n         aclEntries.remove(AbfsHttpConstants.ACCESS_MASK);\n       }\n       recalculateMask(aclEntries, false);\n     }\n+\n+    if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_MASK) \u0026\u0026 containsNamedAce(aclEntries, true)) {\n+      throw new InvalidAclOperationException(\"Default mask is required when a named default acl is present.\");\n+    }\n+\n     if (defaultAclTouched) {\n       if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_MASK)) {\n         aclEntries.remove(AbfsHttpConstants.DEFAULT_MASK);\n       }\n       if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_USER)) {\n         aclEntries.put(AbfsHttpConstants.DEFAULT_USER, aclEntries.get(AbfsHttpConstants.ACCESS_USER));\n       }\n       if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_GROUP)) {\n         aclEntries.put(AbfsHttpConstants.DEFAULT_GROUP, aclEntries.get(AbfsHttpConstants.ACCESS_GROUP));\n       }\n       if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_OTHER)) {\n         aclEntries.put(AbfsHttpConstants.DEFAULT_OTHER, aclEntries.get(AbfsHttpConstants.ACCESS_OTHER));\n       }\n       recalculateMask(aclEntries, true);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void removeAclEntriesInternal(Map\u003cString, String\u003e aclEntries, Map\u003cString, String\u003e toRemoveEntries)\n      throws AzureBlobFileSystemException {\n    boolean accessAclTouched \u003d false;\n    boolean defaultAclTouched \u003d false;\n\n    final Set\u003cString\u003e removeIndicationSet \u003d new HashSet\u003c\u003e();\n\n    for (String entryKey : toRemoveEntries.keySet()) {\n      final boolean isDefaultAcl \u003d isDefaultAce(entryKey);\n      if (removeNamedAceAndUpdateSet(entryKey, isDefaultAcl, removeIndicationSet, aclEntries)) {\n        if (isDefaultAcl) {\n          defaultAclTouched \u003d true;\n        } else {\n          accessAclTouched \u003d true;\n        }\n      }\n    }\n\n    if (removeIndicationSet.contains(AbfsHttpConstants.ACCESS_MASK) \u0026\u0026 containsNamedAce(aclEntries, false)) {\n      throw new InvalidAclOperationException(\"Access mask is required when a named access acl is present.\");\n    }\n\n    if (accessAclTouched) {\n      if (removeIndicationSet.contains(AbfsHttpConstants.ACCESS_MASK)) {\n        aclEntries.remove(AbfsHttpConstants.ACCESS_MASK);\n      }\n      recalculateMask(aclEntries, false);\n    }\n\n    if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_MASK) \u0026\u0026 containsNamedAce(aclEntries, true)) {\n      throw new InvalidAclOperationException(\"Default mask is required when a named default acl is present.\");\n    }\n\n    if (defaultAclTouched) {\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_MASK)) {\n        aclEntries.remove(AbfsHttpConstants.DEFAULT_MASK);\n      }\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_USER)) {\n        aclEntries.put(AbfsHttpConstants.DEFAULT_USER, aclEntries.get(AbfsHttpConstants.ACCESS_USER));\n      }\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_GROUP)) {\n        aclEntries.put(AbfsHttpConstants.DEFAULT_GROUP, aclEntries.get(AbfsHttpConstants.ACCESS_GROUP));\n      }\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_OTHER)) {\n        aclEntries.put(AbfsHttpConstants.DEFAULT_OTHER, aclEntries.get(AbfsHttpConstants.ACCESS_OTHER));\n      }\n      recalculateMask(aclEntries, true);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsAclHelper.java",
      "extendedDetails": {}
    },
    "9c1e4e81399913f180131f4faa95604087c6d962": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15661. ABFS: Add support for ACL.\nContributed by Junhua Gu and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,39 @@\n+  public static void removeAclEntriesInternal(Map\u003cString, String\u003e aclEntries, Map\u003cString, String\u003e toRemoveEntries)\n+      throws AzureBlobFileSystemException {\n+    boolean accessAclTouched \u003d false;\n+    boolean defaultAclTouched \u003d false;\n+\n+    final Set\u003cString\u003e removeIndicationSet \u003d new HashSet\u003c\u003e();\n+\n+    for (String entryKey : toRemoveEntries.keySet()) {\n+      final boolean isDefaultAcl \u003d isDefaultAce(entryKey);\n+      if (removeNamedAceAndUpdateSet(entryKey, isDefaultAcl, removeIndicationSet, aclEntries)) {\n+        if (isDefaultAcl) {\n+          defaultAclTouched \u003d true;\n+        } else {\n+          accessAclTouched \u003d true;\n+        }\n+      }\n+    }\n+    if (accessAclTouched) {\n+      if (removeIndicationSet.contains(AbfsHttpConstants.ACCESS_MASK)) {\n+        aclEntries.remove(AbfsHttpConstants.ACCESS_MASK);\n+      }\n+      recalculateMask(aclEntries, false);\n+    }\n+    if (defaultAclTouched) {\n+      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_MASK)) {\n+        aclEntries.remove(AbfsHttpConstants.DEFAULT_MASK);\n+      }\n+      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_USER)) {\n+        aclEntries.put(AbfsHttpConstants.DEFAULT_USER, aclEntries.get(AbfsHttpConstants.ACCESS_USER));\n+      }\n+      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_GROUP)) {\n+        aclEntries.put(AbfsHttpConstants.DEFAULT_GROUP, aclEntries.get(AbfsHttpConstants.ACCESS_GROUP));\n+      }\n+      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_OTHER)) {\n+        aclEntries.put(AbfsHttpConstants.DEFAULT_OTHER, aclEntries.get(AbfsHttpConstants.ACCESS_OTHER));\n+      }\n+      recalculateMask(aclEntries, true);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void removeAclEntriesInternal(Map\u003cString, String\u003e aclEntries, Map\u003cString, String\u003e toRemoveEntries)\n      throws AzureBlobFileSystemException {\n    boolean accessAclTouched \u003d false;\n    boolean defaultAclTouched \u003d false;\n\n    final Set\u003cString\u003e removeIndicationSet \u003d new HashSet\u003c\u003e();\n\n    for (String entryKey : toRemoveEntries.keySet()) {\n      final boolean isDefaultAcl \u003d isDefaultAce(entryKey);\n      if (removeNamedAceAndUpdateSet(entryKey, isDefaultAcl, removeIndicationSet, aclEntries)) {\n        if (isDefaultAcl) {\n          defaultAclTouched \u003d true;\n        } else {\n          accessAclTouched \u003d true;\n        }\n      }\n    }\n    if (accessAclTouched) {\n      if (removeIndicationSet.contains(AbfsHttpConstants.ACCESS_MASK)) {\n        aclEntries.remove(AbfsHttpConstants.ACCESS_MASK);\n      }\n      recalculateMask(aclEntries, false);\n    }\n    if (defaultAclTouched) {\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_MASK)) {\n        aclEntries.remove(AbfsHttpConstants.DEFAULT_MASK);\n      }\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_USER)) {\n        aclEntries.put(AbfsHttpConstants.DEFAULT_USER, aclEntries.get(AbfsHttpConstants.ACCESS_USER));\n      }\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_GROUP)) {\n        aclEntries.put(AbfsHttpConstants.DEFAULT_GROUP, aclEntries.get(AbfsHttpConstants.ACCESS_GROUP));\n      }\n      if (removeIndicationSet.contains(AbfsHttpConstants.DEFAULT_OTHER)) {\n        aclEntries.put(AbfsHttpConstants.DEFAULT_OTHER, aclEntries.get(AbfsHttpConstants.ACCESS_OTHER));\n      }\n      recalculateMask(aclEntries, true);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsAclHelper.java"
    }
  }
}