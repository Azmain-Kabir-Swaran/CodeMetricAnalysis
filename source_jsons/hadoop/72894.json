{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaKeyStoreProvider.java",
  "functionName": "locateKeystore",
  "functionId": "locateKeystore",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
  "functionStartLine": 145,
  "functionEndLine": 176,
  "numCommitsSeen": 26,
  "timeTaken": 1569,
  "changeHistory": [
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "7154ace71212e9fb9dd6209a92165fb075df7806",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa"
  ],
  "changeHistoryShort": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "7154ace71212e9fb9dd6209a92165fb075df7806": "Ybodychange",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "17/05/16 5:44 PM",
      "commitNameOld": "7154ace71212e9fb9dd6209a92165fb075df7806",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 181.76,
      "commitsBetweenForRepo": 1418,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private void locateKeystore() throws IOException {\n     try {\n       password \u003d ProviderUtils.locatePassword(KEYSTORE_PASSWORD_ENV_VAR,\n           getConf().get(KEYSTORE_PASSWORD_FILE_KEY));\n       if (password \u003d\u003d null) {\n         password \u003d KEYSTORE_PASSWORD_DEFAULT;\n       }\n       Path oldPath \u003d constructOldPath(path);\n       Path newPath \u003d constructNewPath(path);\n       keyStore \u003d KeyStore.getInstance(SCHEME_NAME);\n       FsPermission perm \u003d null;\n       if (fs.exists(path)) {\n         // flush did not proceed to completion\n         // _NEW should not exist\n         if (fs.exists(newPath)) {\n           throw new IOException(\n               String.format(\"Keystore not loaded due to some inconsistency \"\n               + \"(\u0027%s\u0027 and \u0027%s\u0027 should not exist together)!!\", path, newPath));\n         }\n         perm \u003d tryLoadFromPath(path, oldPath);\n       } else {\n         perm \u003d tryLoadIncompleteFlush(oldPath, newPath);\n       }\n       // Need to save off permissions in case we need to\n       // rewrite the keystore in flush()\n       permissions \u003d perm;\n     } catch (KeyStoreException e) {\n-      throw new IOException(\"Can\u0027t create keystore\", e);\n+      throw new IOException(\"Can\u0027t create keystore: \" + e, e);\n     } catch (GeneralSecurityException e) {\n-      throw new IOException(\"Can\u0027t load keystore \" + path, e);\n+      throw new IOException(\"Can\u0027t load keystore \" + path + \" : \" + e , e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void locateKeystore() throws IOException {\n    try {\n      password \u003d ProviderUtils.locatePassword(KEYSTORE_PASSWORD_ENV_VAR,\n          getConf().get(KEYSTORE_PASSWORD_FILE_KEY));\n      if (password \u003d\u003d null) {\n        password \u003d KEYSTORE_PASSWORD_DEFAULT;\n      }\n      Path oldPath \u003d constructOldPath(path);\n      Path newPath \u003d constructNewPath(path);\n      keyStore \u003d KeyStore.getInstance(SCHEME_NAME);\n      FsPermission perm \u003d null;\n      if (fs.exists(path)) {\n        // flush did not proceed to completion\n        // _NEW should not exist\n        if (fs.exists(newPath)) {\n          throw new IOException(\n              String.format(\"Keystore not loaded due to some inconsistency \"\n              + \"(\u0027%s\u0027 and \u0027%s\u0027 should not exist together)!!\", path, newPath));\n        }\n        perm \u003d tryLoadFromPath(path, oldPath);\n      } else {\n        perm \u003d tryLoadIncompleteFlush(oldPath, newPath);\n      }\n      // Need to save off permissions in case we need to\n      // rewrite the keystore in flush()\n      permissions \u003d perm;\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Can\u0027t create keystore: \" + e, e);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(\"Can\u0027t load keystore \" + path + \" : \" + e , e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "7154ace71212e9fb9dd6209a92165fb075df7806": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.\n",
      "commitDate": "17/05/16 5:44 PM",
      "commitName": "7154ace71212e9fb9dd6209a92165fb075df7806",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/05/16 11:30 AM",
      "commitNameOld": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthorOld": "Larry McCay",
      "daysBetweenCommits": 6.26,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private void locateKeystore() throws IOException {\n     try {\n-      password \u003d locatePassword();\n+      password \u003d ProviderUtils.locatePassword(KEYSTORE_PASSWORD_ENV_VAR,\n+          getConf().get(KEYSTORE_PASSWORD_FILE_KEY));\n       if (password \u003d\u003d null) {\n         password \u003d KEYSTORE_PASSWORD_DEFAULT;\n       }\n       Path oldPath \u003d constructOldPath(path);\n       Path newPath \u003d constructNewPath(path);\n       keyStore \u003d KeyStore.getInstance(SCHEME_NAME);\n       FsPermission perm \u003d null;\n       if (fs.exists(path)) {\n         // flush did not proceed to completion\n         // _NEW should not exist\n         if (fs.exists(newPath)) {\n           throw new IOException(\n               String.format(\"Keystore not loaded due to some inconsistency \"\n               + \"(\u0027%s\u0027 and \u0027%s\u0027 should not exist together)!!\", path, newPath));\n         }\n         perm \u003d tryLoadFromPath(path, oldPath);\n       } else {\n         perm \u003d tryLoadIncompleteFlush(oldPath, newPath);\n       }\n       // Need to save off permissions in case we need to\n       // rewrite the keystore in flush()\n       permissions \u003d perm;\n     } catch (KeyStoreException e) {\n       throw new IOException(\"Can\u0027t create keystore\", e);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(\"Can\u0027t load keystore \" + path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void locateKeystore() throws IOException {\n    try {\n      password \u003d ProviderUtils.locatePassword(KEYSTORE_PASSWORD_ENV_VAR,\n          getConf().get(KEYSTORE_PASSWORD_FILE_KEY));\n      if (password \u003d\u003d null) {\n        password \u003d KEYSTORE_PASSWORD_DEFAULT;\n      }\n      Path oldPath \u003d constructOldPath(path);\n      Path newPath \u003d constructNewPath(path);\n      keyStore \u003d KeyStore.getInstance(SCHEME_NAME);\n      FsPermission perm \u003d null;\n      if (fs.exists(path)) {\n        // flush did not proceed to completion\n        // _NEW should not exist\n        if (fs.exists(newPath)) {\n          throw new IOException(\n              String.format(\"Keystore not loaded due to some inconsistency \"\n              + \"(\u0027%s\u0027 and \u0027%s\u0027 should not exist together)!!\", path, newPath));\n        }\n        perm \u003d tryLoadFromPath(path, oldPath);\n      } else {\n        perm \u003d tryLoadIncompleteFlush(oldPath, newPath);\n      }\n      // Need to save off permissions in case we need to\n      // rewrite the keystore in flush()\n      permissions \u003d perm;\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Can\u0027t create keystore\", e);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(\"Can\u0027t load keystore \" + path, e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
      "commitDate": "11/05/16 11:30 AM",
      "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthor": "Larry McCay",
      "diff": "@@ -0,0 +1,31 @@\n+  private void locateKeystore() throws IOException {\n+    try {\n+      password \u003d locatePassword();\n+      if (password \u003d\u003d null) {\n+        password \u003d KEYSTORE_PASSWORD_DEFAULT;\n+      }\n+      Path oldPath \u003d constructOldPath(path);\n+      Path newPath \u003d constructNewPath(path);\n+      keyStore \u003d KeyStore.getInstance(SCHEME_NAME);\n+      FsPermission perm \u003d null;\n+      if (fs.exists(path)) {\n+        // flush did not proceed to completion\n+        // _NEW should not exist\n+        if (fs.exists(newPath)) {\n+          throw new IOException(\n+              String.format(\"Keystore not loaded due to some inconsistency \"\n+              + \"(\u0027%s\u0027 and \u0027%s\u0027 should not exist together)!!\", path, newPath));\n+        }\n+        perm \u003d tryLoadFromPath(path, oldPath);\n+      } else {\n+        perm \u003d tryLoadIncompleteFlush(oldPath, newPath);\n+      }\n+      // Need to save off permissions in case we need to\n+      // rewrite the keystore in flush()\n+      permissions \u003d perm;\n+    } catch (KeyStoreException e) {\n+      throw new IOException(\"Can\u0027t create keystore\", e);\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(\"Can\u0027t load keystore \" + path, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void locateKeystore() throws IOException {\n    try {\n      password \u003d locatePassword();\n      if (password \u003d\u003d null) {\n        password \u003d KEYSTORE_PASSWORD_DEFAULT;\n      }\n      Path oldPath \u003d constructOldPath(path);\n      Path newPath \u003d constructNewPath(path);\n      keyStore \u003d KeyStore.getInstance(SCHEME_NAME);\n      FsPermission perm \u003d null;\n      if (fs.exists(path)) {\n        // flush did not proceed to completion\n        // _NEW should not exist\n        if (fs.exists(newPath)) {\n          throw new IOException(\n              String.format(\"Keystore not loaded due to some inconsistency \"\n              + \"(\u0027%s\u0027 and \u0027%s\u0027 should not exist together)!!\", path, newPath));\n        }\n        perm \u003d tryLoadFromPath(path, oldPath);\n      } else {\n        perm \u003d tryLoadIncompleteFlush(oldPath, newPath);\n      }\n      // Need to save off permissions in case we need to\n      // rewrite the keystore in flush()\n      permissions \u003d perm;\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Can\u0027t create keystore\", e);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(\"Can\u0027t load keystore \" + path, e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java"
    }
  }
}