{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractSchedulerPlanFollower.java",
  "functionName": "cleanupExpiredQueues",
  "functionId": "cleanupExpiredQueues___planQueueName-String__shouldMove-boolean__toRemove-Set__String____defReservationQueue-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
  "functionStartLine": 249,
  "functionEndLine": 275,
  "numCommitsSeen": 12,
  "timeTaken": 2351,
  "changeHistory": [
    "f1461b2487d6c7a0b87e3799a8fdb5ade40ad898",
    "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
    "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe"
  ],
  "changeHistoryShort": {
    "f1461b2487d6c7a0b87e3799a8fdb5ade40ad898": "Ybodychange",
    "e7257acd8a7adb74d81cd1d009d4a99f023ed844": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f1461b2487d6c7a0b87e3799a8fdb5ade40ad898": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8164. Fix a potential NPE in AbstractSchedulerPlanFollower. Contributed by lujie.\n",
      "commitDate": "16/04/18 5:32 PM",
      "commitName": "f1461b2487d6c7a0b87e3799a8fdb5ade40ad898",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/09/17 4:46 PM",
      "commitNameOld": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 222.03,
      "commitsBetweenForRepo": 1698,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   protected void cleanupExpiredQueues(String planQueueName, boolean shouldMove,\n       Set\u003cString\u003e toRemove, String defReservationQueue) {\n     for (String expiredReservationId : toRemove) {\n       try {\n         // reduce entitlement to 0\n         String expiredReservation \u003d\n             getReservationQueueName(planQueueName, expiredReservationId);\n         setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n         if (shouldMove) {\n           moveAppsInQueueSync(expiredReservation, defReservationQueue);\n         }\n-        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n+        List\u003cApplicationAttemptId\u003e appsInQueue \u003d scheduler.\n+              getAppsInQueue(expiredReservation);\n+        int size \u003d (appsInQueue \u003d\u003d null ? 0 : appsInQueue.size());\n+        if (size \u003e 0) {\n           scheduler.killAllAppsInQueue(expiredReservation);\n           LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n         } else {\n           scheduler.removeQueue(expiredReservation);\n           LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n         }\n       } catch (YarnException e) {\n         LOG.warn(\"Exception while trying to expire reservation: {}\",\n             expiredReservationId, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void cleanupExpiredQueues(String planQueueName, boolean shouldMove,\n      Set\u003cString\u003e toRemove, String defReservationQueue) {\n    for (String expiredReservationId : toRemove) {\n      try {\n        // reduce entitlement to 0\n        String expiredReservation \u003d\n            getReservationQueueName(planQueueName, expiredReservationId);\n        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n        if (shouldMove) {\n          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n        }\n        List\u003cApplicationAttemptId\u003e appsInQueue \u003d scheduler.\n              getAppsInQueue(expiredReservation);\n        int size \u003d (appsInQueue \u003d\u003d null ? 0 : appsInQueue.size());\n        if (size \u003e 0) {\n          scheduler.killAllAppsInQueue(expiredReservation);\n          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n        } else {\n          scheduler.removeQueue(expiredReservation);\n          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n        }\n      } catch (YarnException e) {\n        LOG.warn(\"Exception while trying to expire reservation: {}\",\n            expiredReservationId, e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
      "extendedDetails": {}
    },
    "e7257acd8a7adb74d81cd1d009d4a99f023ed844": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-2998. Abstract out scheduler independent PlanFollower components. (Anubhav Dhoot via kasha)\n",
      "commitDate": "30/12/14 7:55 PM",
      "commitName": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-2998. Abstract out scheduler independent PlanFollower components. (Anubhav Dhoot via kasha)\n",
          "commitDate": "30/12/14 7:55 PM",
          "commitName": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/12/14 5:15 PM",
          "commitNameOld": "e2351c7ae24cea9b217af4174512d279c55e8efd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  private void cleanupExpiredQueues(boolean shouldMove, Set\u003cString\u003e toRemove,\n-      String defReservationQueue) {\n-    for (String expiredReservation : toRemove) {\n+  protected void cleanupExpiredQueues(String planQueueName,\n+      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n+    for (String expiredReservationId : toRemove) {\n       try {\n         // reduce entitlement to 0\n-        scheduler.setEntitlement(expiredReservation, new QueueEntitlement(0.0f,\n-            0.0f));\n+        String expiredReservation \u003d getReservationQueueName(planQueueName,\n+            expiredReservationId);\n+        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n         if (shouldMove) {\n           moveAppsInQueueSync(expiredReservation, defReservationQueue);\n         }\n         if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n           scheduler.killAllAppsInQueue(expiredReservation);\n           LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n         } else {\n           scheduler.removeQueue(expiredReservation);\n           LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n         }\n       } catch (YarnException e) {\n         LOG.warn(\"Exception while trying to expire reservation: {}\",\n-            expiredReservation, e);\n+            expiredReservationId, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void cleanupExpiredQueues(String planQueueName,\n      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n    for (String expiredReservationId : toRemove) {\n      try {\n        // reduce entitlement to 0\n        String expiredReservation \u003d getReservationQueueName(planQueueName,\n            expiredReservationId);\n        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n        if (shouldMove) {\n          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n        }\n        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n          scheduler.killAllAppsInQueue(expiredReservation);\n          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n        } else {\n          scheduler.removeQueue(expiredReservation);\n          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n        }\n      } catch (YarnException e) {\n        LOG.warn(\"Exception while trying to expire reservation: {}\",\n            expiredReservationId, e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacitySchedulerPlanFollower.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
            "oldMethodName": "cleanupExpiredQueues",
            "newMethodName": "cleanupExpiredQueues"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2998. Abstract out scheduler independent PlanFollower components. (Anubhav Dhoot via kasha)\n",
          "commitDate": "30/12/14 7:55 PM",
          "commitName": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/12/14 5:15 PM",
          "commitNameOld": "e2351c7ae24cea9b217af4174512d279c55e8efd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  private void cleanupExpiredQueues(boolean shouldMove, Set\u003cString\u003e toRemove,\n-      String defReservationQueue) {\n-    for (String expiredReservation : toRemove) {\n+  protected void cleanupExpiredQueues(String planQueueName,\n+      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n+    for (String expiredReservationId : toRemove) {\n       try {\n         // reduce entitlement to 0\n-        scheduler.setEntitlement(expiredReservation, new QueueEntitlement(0.0f,\n-            0.0f));\n+        String expiredReservation \u003d getReservationQueueName(planQueueName,\n+            expiredReservationId);\n+        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n         if (shouldMove) {\n           moveAppsInQueueSync(expiredReservation, defReservationQueue);\n         }\n         if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n           scheduler.killAllAppsInQueue(expiredReservation);\n           LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n         } else {\n           scheduler.removeQueue(expiredReservation);\n           LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n         }\n       } catch (YarnException e) {\n         LOG.warn(\"Exception while trying to expire reservation: {}\",\n-            expiredReservation, e);\n+            expiredReservationId, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void cleanupExpiredQueues(String planQueueName,\n      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n    for (String expiredReservationId : toRemove) {\n      try {\n        // reduce entitlement to 0\n        String expiredReservation \u003d getReservationQueueName(planQueueName,\n            expiredReservationId);\n        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n        if (shouldMove) {\n          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n        }\n        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n          scheduler.killAllAppsInQueue(expiredReservation);\n          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n        } else {\n          scheduler.removeQueue(expiredReservation);\n          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n        }\n      } catch (YarnException e) {\n        LOG.warn(\"Exception while trying to expire reservation: {}\",\n            expiredReservationId, e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2998. Abstract out scheduler independent PlanFollower components. (Anubhav Dhoot via kasha)\n",
          "commitDate": "30/12/14 7:55 PM",
          "commitName": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/12/14 5:15 PM",
          "commitNameOld": "e2351c7ae24cea9b217af4174512d279c55e8efd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  private void cleanupExpiredQueues(boolean shouldMove, Set\u003cString\u003e toRemove,\n-      String defReservationQueue) {\n-    for (String expiredReservation : toRemove) {\n+  protected void cleanupExpiredQueues(String planQueueName,\n+      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n+    for (String expiredReservationId : toRemove) {\n       try {\n         // reduce entitlement to 0\n-        scheduler.setEntitlement(expiredReservation, new QueueEntitlement(0.0f,\n-            0.0f));\n+        String expiredReservation \u003d getReservationQueueName(planQueueName,\n+            expiredReservationId);\n+        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n         if (shouldMove) {\n           moveAppsInQueueSync(expiredReservation, defReservationQueue);\n         }\n         if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n           scheduler.killAllAppsInQueue(expiredReservation);\n           LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n         } else {\n           scheduler.removeQueue(expiredReservation);\n           LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n         }\n       } catch (YarnException e) {\n         LOG.warn(\"Exception while trying to expire reservation: {}\",\n-            expiredReservation, e);\n+            expiredReservationId, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void cleanupExpiredQueues(String planQueueName,\n      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n    for (String expiredReservationId : toRemove) {\n      try {\n        // reduce entitlement to 0\n        String expiredReservation \u003d getReservationQueueName(planQueueName,\n            expiredReservationId);\n        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n        if (shouldMove) {\n          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n        }\n        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n          scheduler.killAllAppsInQueue(expiredReservation);\n          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n        } else {\n          scheduler.removeQueue(expiredReservation);\n          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n        }\n      } catch (YarnException e) {\n        LOG.warn(\"Exception while trying to expire reservation: {}\",\n            expiredReservationId, e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2998. Abstract out scheduler independent PlanFollower components. (Anubhav Dhoot via kasha)\n",
          "commitDate": "30/12/14 7:55 PM",
          "commitName": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "30/12/14 5:15 PM",
          "commitNameOld": "e2351c7ae24cea9b217af4174512d279c55e8efd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  private void cleanupExpiredQueues(boolean shouldMove, Set\u003cString\u003e toRemove,\n-      String defReservationQueue) {\n-    for (String expiredReservation : toRemove) {\n+  protected void cleanupExpiredQueues(String planQueueName,\n+      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n+    for (String expiredReservationId : toRemove) {\n       try {\n         // reduce entitlement to 0\n-        scheduler.setEntitlement(expiredReservation, new QueueEntitlement(0.0f,\n-            0.0f));\n+        String expiredReservation \u003d getReservationQueueName(planQueueName,\n+            expiredReservationId);\n+        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n         if (shouldMove) {\n           moveAppsInQueueSync(expiredReservation, defReservationQueue);\n         }\n         if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n           scheduler.killAllAppsInQueue(expiredReservation);\n           LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n         } else {\n           scheduler.removeQueue(expiredReservation);\n           LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n         }\n       } catch (YarnException e) {\n         LOG.warn(\"Exception while trying to expire reservation: {}\",\n-            expiredReservation, e);\n+            expiredReservationId, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void cleanupExpiredQueues(String planQueueName,\n      boolean shouldMove, Set\u003cString\u003e toRemove, String defReservationQueue) {\n    for (String expiredReservationId : toRemove) {\n      try {\n        // reduce entitlement to 0\n        String expiredReservation \u003d getReservationQueueName(planQueueName,\n            expiredReservationId);\n        setQueueEntitlement(planQueueName, expiredReservation, 0.0f, 0.0f);\n        if (shouldMove) {\n          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n        }\n        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n          scheduler.killAllAppsInQueue(expiredReservation);\n          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n        } else {\n          scheduler.removeQueue(expiredReservation);\n          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n        }\n      } catch (YarnException e) {\n        LOG.warn(\"Exception while trying to expire reservation: {}\",\n            expiredReservationId, e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractSchedulerPlanFollower.java",
          "extendedDetails": {
            "oldValue": "[shouldMove-boolean, toRemove-Set\u003cString\u003e, defReservationQueue-String]",
            "newValue": "[planQueueName-String, shouldMove-boolean, toRemove-Set\u003cString\u003e, defReservationQueue-String]"
          }
        }
      ]
    },
    "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1712. Plan follower that synchronizes the current state of reservation subsystem with the scheduler. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 169085319b8b76641f8b9f6840a3fef06d221e2b)\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,23 @@\n+  private void cleanupExpiredQueues(boolean shouldMove, Set\u003cString\u003e toRemove,\n+      String defReservationQueue) {\n+    for (String expiredReservation : toRemove) {\n+      try {\n+        // reduce entitlement to 0\n+        scheduler.setEntitlement(expiredReservation, new QueueEntitlement(0.0f,\n+            0.0f));\n+        if (shouldMove) {\n+          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n+        }\n+        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n+          scheduler.killAllAppsInQueue(expiredReservation);\n+          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n+        } else {\n+          scheduler.removeQueue(expiredReservation);\n+          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n+        }\n+      } catch (YarnException e) {\n+        LOG.warn(\"Exception while trying to expire reservation: {}\",\n+            expiredReservation, e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void cleanupExpiredQueues(boolean shouldMove, Set\u003cString\u003e toRemove,\n      String defReservationQueue) {\n    for (String expiredReservation : toRemove) {\n      try {\n        // reduce entitlement to 0\n        scheduler.setEntitlement(expiredReservation, new QueueEntitlement(0.0f,\n            0.0f));\n        if (shouldMove) {\n          moveAppsInQueueSync(expiredReservation, defReservationQueue);\n        }\n        if (scheduler.getAppsInQueue(expiredReservation).size() \u003e 0) {\n          scheduler.killAllAppsInQueue(expiredReservation);\n          LOG.info(\"Killing applications in queue: {}\", expiredReservation);\n        } else {\n          scheduler.removeQueue(expiredReservation);\n          LOG.info(\"Queue: \" + expiredReservation + \" removed\");\n        }\n      } catch (YarnException e) {\n        LOG.warn(\"Exception while trying to expire reservation: {}\",\n            expiredReservation, e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacitySchedulerPlanFollower.java"
    }
  }
}