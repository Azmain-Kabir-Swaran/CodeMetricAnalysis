{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContext.java",
  "functionName": "getAbstractFileSystem",
  "functionId": "getAbstractFileSystem___user-UserGroupInformation__uri-URI(modifiers-final)__conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
  "functionStartLine": 334,
  "functionEndLine": 358,
  "numCommitsSeen": 94,
  "timeTaken": 3000,
  "changeHistory": [
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "ccaf036662e22da14583942054898c99fa51dae5",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "625b099235cb10834738315a2e867d9bbf903956"
  ],
  "changeHistoryShort": {
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ybodychange",
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "625b099235cb10834738315a2e867d9bbf903956": "Yintroduced"
  },
  "changeHistoryDetails": {
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 45.36,
      "commitsBetweenForRepo": 388,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,25 @@\n   private static AbstractFileSystem getAbstractFileSystem(\n       UserGroupInformation user, final URI uri, final Configuration conf)\n       throws UnsupportedFileSystemException, IOException {\n     try {\n       return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n         @Override\n         public AbstractFileSystem run() throws UnsupportedFileSystemException {\n           return AbstractFileSystem.get(uri, conf);\n         }\n       });\n+    } catch (RuntimeException ex) {\n+      // RTEs can wrap other exceptions; if there is an IOException inner,\n+      // throw it direct.\n+      Throwable cause \u003d ex.getCause();\n+      if (cause instanceof IOException) {\n+        throw (IOException) cause;\n+      } else {\n+        throw ex;\n+      }\n     } catch (InterruptedException ex) {\n       LOG.error(ex.toString());\n       throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n           + uri, ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        @Override\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (RuntimeException ex) {\n      // RTEs can wrap other exceptions; if there is an IOException inner,\n      // throw it direct.\n      Throwable cause \u003d ex.getCause();\n      if (cause instanceof IOException) {\n        throw (IOException) cause;\n      } else {\n        throw ex;\n      }\n    } catch (InterruptedException ex) {\n      LOG.error(ex.toString());\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "06/09/16 11:02 AM",
      "commitNameOld": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 314.44,
      "commitsBetweenForRepo": 1842,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private static AbstractFileSystem getAbstractFileSystem(\n       UserGroupInformation user, final URI uri, final Configuration conf)\n       throws UnsupportedFileSystemException, IOException {\n     try {\n       return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n         @Override\n         public AbstractFileSystem run() throws UnsupportedFileSystemException {\n           return AbstractFileSystem.get(uri, conf);\n         }\n       });\n     } catch (InterruptedException ex) {\n-      LOG.error(ex);\n+      LOG.error(ex.toString());\n       throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n           + uri, ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        @Override\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (InterruptedException ex) {\n      LOG.error(ex.toString());\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "23/08/12 12:18 PM",
      "commitNameOld": "4f8e1f779b196ca83c49118c283286e3ee9ec386",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   private static AbstractFileSystem getAbstractFileSystem(\n       UserGroupInformation user, final URI uri, final Configuration conf)\n       throws UnsupportedFileSystemException, IOException {\n     try {\n       return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n+        @Override\n         public AbstractFileSystem run() throws UnsupportedFileSystemException {\n           return AbstractFileSystem.get(uri, conf);\n         }\n       });\n     } catch (InterruptedException ex) {\n       LOG.error(ex);\n       throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n           + uri, ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        @Override\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (InterruptedException ex) {\n      LOG.error(ex);\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (InterruptedException ex) {\n      LOG.error(ex);\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (InterruptedException ex) {\n      LOG.error(ex);\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (InterruptedException ex) {\n      LOG.error(ex);\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "625b099235cb10834738315a2e867d9bbf903956": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7171. Support UGI in FileContext API. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1092832 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/11 3:20 PM",
      "commitName": "625b099235cb10834738315a2e867d9bbf903956",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,15 @@\n+  private static AbstractFileSystem getAbstractFileSystem(\n+      UserGroupInformation user, final URI uri, final Configuration conf)\n+      throws UnsupportedFileSystemException, IOException {\n+    try {\n+      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n+        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n+          return AbstractFileSystem.get(uri, conf);\n+        }\n+      });\n+    } catch (InterruptedException ex) {\n+      LOG.error(ex);\n+      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n+          + uri, ex);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static AbstractFileSystem getAbstractFileSystem(\n      UserGroupInformation user, final URI uri, final Configuration conf)\n      throws UnsupportedFileSystemException, IOException {\n    try {\n      return user.doAs(new PrivilegedExceptionAction\u003cAbstractFileSystem\u003e() {\n        public AbstractFileSystem run() throws UnsupportedFileSystemException {\n          return AbstractFileSystem.get(uri, conf);\n        }\n      });\n    } catch (InterruptedException ex) {\n      LOG.error(ex);\n      throw new IOException(\"Failed to get the AbstractFileSystem for path: \"\n          + uri, ex);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}