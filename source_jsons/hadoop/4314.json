{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferServer.java",
  "functionName": "getSaslStreams",
  "functionId": "getSaslStreams___peer-Peer__underlyingOut-OutputStream__underlyingIn-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
  "functionStartLine": 288,
  "functionEndLine": 308,
  "numCommitsSeen": 16,
  "timeTaken": 2424,
  "changeHistory": [
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
    "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
    "8e33d4bdb35eed8b60cf197247fad465b1912ef7",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "3b54223c0f32d42a84436c670d80b791a8e9696d"
  ],
  "changeHistoryShort": {
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": "Ybodychange",
    "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822": "Yparameterchange",
    "8e33d4bdb35eed8b60cf197247fad465b1912ef7": "Ybodychange",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ybodychange",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "24/02/16 12:11 PM",
      "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
      "commitAuthor": "cnauroth",
      "commitDateOld": "03/09/15 3:32 PM",
      "commitNameOld": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 173.9,
      "commitsBetweenForRepo": 1199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n       InputStream underlyingIn) throws IOException {\n     if (peer.hasSecureChannel() ||\n         dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     }\n \n     SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n       getPeerAddress(peer));\n \n     CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n       new PasswordFunction() {\n         @Override\n         public char[] apply(String userName) throws IOException {\n           return buildServerPassword(userName);\n         }\n     });\n-    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+    return doSaslHandshake(peer, underlyingOut, underlyingIn, saslProps,\n         callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n      getPeerAddress(peer));\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return buildServerPassword(userName);\n        }\n    });\n    return doSaslHandshake(peer, underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {}
    },
    "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-7382. DataNode in secure mode may throw NullPointerException if client connects before DataNode registers itself with NameNode. Contributed by Chris Nauroth.\n",
      "commitDate": "08/11/14 10:24 PM",
      "commitName": "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
      "commitAuthor": "cnauroth",
      "commitDateOld": "05/11/14 8:31 PM",
      "commitNameOld": "8e33d4bdb35eed8b60cf197247fad465b1912ef7",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n-      InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n+      InputStream underlyingIn) throws IOException {\n     if (peer.hasSecureChannel() ||\n         dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     }\n \n     SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n       getPeerAddress(peer));\n \n     CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n       new PasswordFunction() {\n         @Override\n         public char[] apply(String userName) throws IOException {\n           return buildServerPassword(userName);\n         }\n     });\n     return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n         callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n      getPeerAddress(peer));\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return buildServerPassword(userName);\n        }\n    });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {
        "oldValue": "[peer-Peer, underlyingOut-OutputStream, underlyingIn-InputStream, datanodeId-DatanodeID(modifiers-final)]",
        "newValue": "[peer-Peer, underlyingOut-OutputStream, underlyingIn-InputStream]"
      }
    },
    "8e33d4bdb35eed8b60cf197247fad465b1912ef7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7367. HDFS short-circuit read cannot negotiate shared memory slot and file descriptors when SASL is enabled on DataTransferProtocol. Contributed by Chris Nauroth.\n",
      "commitDate": "05/11/14 8:31 PM",
      "commitName": "8e33d4bdb35eed8b60cf197247fad465b1912ef7",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/10/14 6:11 AM",
      "commitNameOld": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 8.64,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,21 @@\n   private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n       InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n+    if (peer.hasSecureChannel() ||\n+        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    }\n+\n     SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n       getPeerAddress(peer));\n \n     CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n       new PasswordFunction() {\n         @Override\n         public char[] apply(String userName) throws IOException {\n           return buildServerPassword(userName);\n         }\n     });\n     return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n         callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n      getPeerAddress(peer));\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return buildServerPassword(userName);\n        }\n    });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {}
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "14/07/14 11:10 AM",
      "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 67.43,
      "commitsBetweenForRepo": 657,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,16 @@\n   private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n       InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n     SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n-    if (saslPropsResolver \u003d\u003d null) {\n-      throw new IOException(String.format(\"Cannot create a secured \" +\n-        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n-        \"protection is defined in configuration property %s.\",\n-        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n-    }\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n       getPeerAddress(peer));\n \n     CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n       new PasswordFunction() {\n         @Override\n         public char[] apply(String userName) throws IOException {\n           return buildServerPassword(userName);\n         }\n     });\n     return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n         callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n    SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n      getPeerAddress(peer));\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return buildServerPassword(userName);\n        }\n    });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {}
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,22 @@\n+  private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n+      InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n+    SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n+    if (saslPropsResolver \u003d\u003d null) {\n+      throw new IOException(String.format(\"Cannot create a secured \" +\n+        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n+        \"protection is defined in configuration property %s.\",\n+        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n+    }\n+    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n+      getPeerAddress(peer));\n+\n+    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n+      new PasswordFunction() {\n+        @Override\n+        public char[] apply(String userName) throws IOException {\n+          return buildServerPassword(userName);\n+        }\n+    });\n+    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+        callbackHandler);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, final DatanodeID datanodeId) throws IOException {\n    SaslPropertiesResolver saslPropsResolver \u003d dnConf.getSaslPropsResolver();\n    if (saslPropsResolver \u003d\u003d null) {\n      throw new IOException(String.format(\"Cannot create a secured \" +\n        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n        \"protection is defined in configuration property %s.\",\n        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n    }\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getServerProperties(\n      getPeerAddress(peer));\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return buildServerPassword(userName);\n        }\n    });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java"
    }
  }
}