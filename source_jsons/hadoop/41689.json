{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "getTransferredContainers",
  "functionId": "getTransferredContainers___currentAttempt-ApplicationAttemptId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 281,
  "functionEndLine": 304,
  "numCommitsSeen": 115,
  "timeTaken": 3756,
  "changeHistory": [
    "fedabcad42067ac7dd24de40fab6be2d3485a540",
    "d4d2fd1acd2fdddf04f45e67897804eea30d79a1",
    "497c86b485b1bb8a2eba52308646d8e1ee76bce3",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "25bc68d15eb005180ab366e3b9470294018bd2b9"
  ],
  "changeHistoryShort": {
    "fedabcad42067ac7dd24de40fab6be2d3485a540": "Ybodychange",
    "d4d2fd1acd2fdddf04f45e67897804eea30d79a1": "Ybodychange",
    "497c86b485b1bb8a2eba52308646d8e1ee76bce3": "Ymultichange(Ymodifierchange,Ybodychange)",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "25bc68d15eb005180ab366e3b9470294018bd2b9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fedabcad42067ac7dd24de40fab6be2d3485a540": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6168. Restarted RM may not inform AM about all existing containers. Contributed by Chandni Singh\n",
      "commitDate": "27/11/17 10:19 AM",
      "commitName": "fedabcad42067ac7dd24de40fab6be2d3485a540",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/11/17 10:49 AM",
      "commitNameOld": "a1382a18dff8a70aa25240d6fbba6e22832a7679",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 17.98,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public List\u003cContainer\u003e getTransferredContainers(\n       ApplicationAttemptId currentAttempt) {\n     ApplicationId appId \u003d currentAttempt.getApplicationId();\n     SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n     List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n     if (app \u003d\u003d null) {\n       return containerList;\n     }\n-    Collection\u003cRMContainer\u003e liveContainers \u003d\n-        app.getCurrentAppAttempt().getLiveContainers();\n+    Collection\u003cRMContainer\u003e liveContainers \u003d app.getCurrentAppAttempt()\n+        .pullContainersToTransfer();\n     ContainerId amContainerId \u003d null;\n     // For UAM, amContainer would be null\n     if (rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n         .getMasterContainer() !\u003d null) {\n       amContainerId \u003d rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n           .getMasterContainer().getId();\n     }\n     for (RMContainer rmContainer : liveContainers) {\n       if (!rmContainer.getContainerId().equals(amContainerId)) {\n         containerList.add(rmContainer.getContainer());\n       }\n     }\n     return containerList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainer\u003e getTransferredContainers(\n      ApplicationAttemptId currentAttempt) {\n    ApplicationId appId \u003d currentAttempt.getApplicationId();\n    SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n    if (app \u003d\u003d null) {\n      return containerList;\n    }\n    Collection\u003cRMContainer\u003e liveContainers \u003d app.getCurrentAppAttempt()\n        .pullContainersToTransfer();\n    ContainerId amContainerId \u003d null;\n    // For UAM, amContainer would be null\n    if (rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n        .getMasterContainer() !\u003d null) {\n      amContainerId \u003d rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n          .getMasterContainer().getId();\n    }\n    for (RMContainer rmContainer : liveContainers) {\n      if (!rmContainer.getContainerId().equals(amContainerId)) {\n        containerList.add(rmContainer.getContainer());\n      }\n    }\n    return containerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "d4d2fd1acd2fdddf04f45e67897804eea30d79a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2037. Add work preserving restart support for Unmanaged AMs. (Botong Huang via Subru).\n",
      "commitDate": "02/10/17 6:14 PM",
      "commitName": "d4d2fd1acd2fdddf04f45e67897804eea30d79a1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "13/09/17 3:44 PM",
      "commitNameOld": "bb34ae955496c1aa595dc1186153d605a41f5378",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 19.1,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public List\u003cContainer\u003e getTransferredContainers(\n       ApplicationAttemptId currentAttempt) {\n     ApplicationId appId \u003d currentAttempt.getApplicationId();\n     SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n     List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n-    RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n-    if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n-      return containerList;\n-    }\n     if (app \u003d\u003d null) {\n       return containerList;\n     }\n     Collection\u003cRMContainer\u003e liveContainers \u003d\n         app.getCurrentAppAttempt().getLiveContainers();\n-    ContainerId amContainerId \u003d rmContext.getRMApps().get(appId)\n-        .getCurrentAppAttempt().getMasterContainer().getId();\n+    ContainerId amContainerId \u003d null;\n+    // For UAM, amContainer would be null\n+    if (rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n+        .getMasterContainer() !\u003d null) {\n+      amContainerId \u003d rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n+          .getMasterContainer().getId();\n+    }\n     for (RMContainer rmContainer : liveContainers) {\n       if (!rmContainer.getContainerId().equals(amContainerId)) {\n         containerList.add(rmContainer.getContainer());\n       }\n     }\n     return containerList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainer\u003e getTransferredContainers(\n      ApplicationAttemptId currentAttempt) {\n    ApplicationId appId \u003d currentAttempt.getApplicationId();\n    SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n    if (app \u003d\u003d null) {\n      return containerList;\n    }\n    Collection\u003cRMContainer\u003e liveContainers \u003d\n        app.getCurrentAppAttempt().getLiveContainers();\n    ContainerId amContainerId \u003d null;\n    // For UAM, amContainer would be null\n    if (rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n        .getMasterContainer() !\u003d null) {\n      amContainerId \u003d rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n          .getMasterContainer().getId();\n    }\n    for (RMContainer rmContainer : liveContainers) {\n      if (!rmContainer.getContainerId().equals(amContainerId)) {\n        containerList.add(rmContainer.getContainer());\n      }\n    }\n    return containerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "497c86b485b1bb8a2eba52308646d8e1ee76bce3": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3136. Fixed a synchronization problem of AbstractYarnScheduler#getTransferredContainers. Contributed by Sunil G\n",
      "commitDate": "18/04/15 12:46 PM",
      "commitName": "497c86b485b1bb8a2eba52308646d8e1ee76bce3",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3136. Fixed a synchronization problem of AbstractYarnScheduler#getTransferredContainers. Contributed by Sunil G\n",
          "commitDate": "18/04/15 12:46 PM",
          "commitName": "497c86b485b1bb8a2eba52308646d8e1ee76bce3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 1:36 PM",
          "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,24 @@\n-  public synchronized List\u003cContainer\u003e getTransferredContainers(\n+  public List\u003cContainer\u003e getTransferredContainers(\n       ApplicationAttemptId currentAttempt) {\n     ApplicationId appId \u003d currentAttempt.getApplicationId();\n     SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n     List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n     RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n     if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n       return containerList;\n     }\n+    if (app \u003d\u003d null) {\n+      return containerList;\n+    }\n     Collection\u003cRMContainer\u003e liveContainers \u003d\n         app.getCurrentAppAttempt().getLiveContainers();\n     ContainerId amContainerId \u003d\n         rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n           .getMasterContainer().getId();\n     for (RMContainer rmContainer : liveContainers) {\n       if (!rmContainer.getContainerId().equals(amContainerId)) {\n         containerList.add(rmContainer.getContainer());\n       }\n     }\n     return containerList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cContainer\u003e getTransferredContainers(\n      ApplicationAttemptId currentAttempt) {\n    ApplicationId appId \u003d currentAttempt.getApplicationId();\n    SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n    RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n    if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n      return containerList;\n    }\n    if (app \u003d\u003d null) {\n      return containerList;\n    }\n    Collection\u003cRMContainer\u003e liveContainers \u003d\n        app.getCurrentAppAttempt().getLiveContainers();\n    ContainerId amContainerId \u003d\n        rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n          .getMasterContainer().getId();\n    for (RMContainer rmContainer : liveContainers) {\n      if (!rmContainer.getContainerId().equals(amContainerId)) {\n        containerList.add(rmContainer.getContainer());\n      }\n    }\n    return containerList;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3136. Fixed a synchronization problem of AbstractYarnScheduler#getTransferredContainers. Contributed by Sunil G\n",
          "commitDate": "18/04/15 12:46 PM",
          "commitName": "497c86b485b1bb8a2eba52308646d8e1ee76bce3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 1:36 PM",
          "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,24 @@\n-  public synchronized List\u003cContainer\u003e getTransferredContainers(\n+  public List\u003cContainer\u003e getTransferredContainers(\n       ApplicationAttemptId currentAttempt) {\n     ApplicationId appId \u003d currentAttempt.getApplicationId();\n     SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n     List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n     RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n     if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n       return containerList;\n     }\n+    if (app \u003d\u003d null) {\n+      return containerList;\n+    }\n     Collection\u003cRMContainer\u003e liveContainers \u003d\n         app.getCurrentAppAttempt().getLiveContainers();\n     ContainerId amContainerId \u003d\n         rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n           .getMasterContainer().getId();\n     for (RMContainer rmContainer : liveContainers) {\n       if (!rmContainer.getContainerId().equals(amContainerId)) {\n         containerList.add(rmContainer.getContainer());\n       }\n     }\n     return containerList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cContainer\u003e getTransferredContainers(\n      ApplicationAttemptId currentAttempt) {\n    ApplicationId appId \u003d currentAttempt.getApplicationId();\n    SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n    RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n    if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n      return containerList;\n    }\n    if (app \u003d\u003d null) {\n      return containerList;\n    }\n    Collection\u003cRMContainer\u003e liveContainers \u003d\n        app.getCurrentAppAttempt().getLiveContainers();\n    ContainerId amContainerId \u003d\n        rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n          .getMasterContainer().getId();\n    for (RMContainer rmContainer : liveContainers) {\n      if (!rmContainer.getContainerId().equals(amContainerId)) {\n        containerList.add(rmContainer.getContainer());\n      }\n    }\n    return containerList;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 3:39 PM",
      "commitNameOld": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 91.25,
      "commitsBetweenForRepo": 650,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized List\u003cContainer\u003e getTransferredContainers(\n       ApplicationAttemptId currentAttempt) {\n     ApplicationId appId \u003d currentAttempt.getApplicationId();\n-    SchedulerApplication app \u003d applications.get(appId);\n+    SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n     List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n     RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n     if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n       return containerList;\n     }\n     Collection\u003cRMContainer\u003e liveContainers \u003d\n         app.getCurrentAppAttempt().getLiveContainers();\n     ContainerId amContainerId \u003d\n         rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n           .getMasterContainer().getId();\n     for (RMContainer rmContainer : liveContainers) {\n       if (!rmContainer.getContainerId().equals(amContainerId)) {\n         containerList.add(rmContainer.getContainer());\n       }\n     }\n     return containerList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cContainer\u003e getTransferredContainers(\n      ApplicationAttemptId currentAttempt) {\n    ApplicationId appId \u003d currentAttempt.getApplicationId();\n    SchedulerApplication\u003cT\u003e app \u003d applications.get(appId);\n    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n    RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n    if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n      return containerList;\n    }\n    Collection\u003cRMContainer\u003e liveContainers \u003d\n        app.getCurrentAppAttempt().getLiveContainers();\n    ContainerId amContainerId \u003d\n        rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n          .getMasterContainer().getId();\n    for (RMContainer rmContainer : liveContainers) {\n      if (!rmContainer.getContainerId().equals(amContainerId)) {\n        containerList.add(rmContainer.getContainer());\n      }\n    }\n    return containerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "25bc68d15eb005180ab366e3b9470294018bd2b9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1041. Added the ApplicationMasterProtocol API for applications to use the ability in ResourceManager to optionally not kill containers when the ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557318 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 11:07 PM",
      "commitName": "25bc68d15eb005180ab366e3b9470294018bd2b9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public synchronized List\u003cContainer\u003e getTransferredContainers(\n+      ApplicationAttemptId currentAttempt) {\n+    ApplicationId appId \u003d currentAttempt.getApplicationId();\n+    SchedulerApplication app \u003d applications.get(appId);\n+    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n+    RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n+    if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n+      return containerList;\n+    }\n+    Collection\u003cRMContainer\u003e liveContainers \u003d\n+        app.getCurrentAppAttempt().getLiveContainers();\n+    ContainerId amContainerId \u003d\n+        rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n+          .getMasterContainer().getId();\n+    for (RMContainer rmContainer : liveContainers) {\n+      if (!rmContainer.getContainerId().equals(amContainerId)) {\n+        containerList.add(rmContainer.getContainer());\n+      }\n+    }\n+    return containerList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cContainer\u003e getTransferredContainers(\n      ApplicationAttemptId currentAttempt) {\n    ApplicationId appId \u003d currentAttempt.getApplicationId();\n    SchedulerApplication app \u003d applications.get(appId);\n    List\u003cContainer\u003e containerList \u003d new ArrayList\u003cContainer\u003e();\n    RMApp appImpl \u003d this.rmContext.getRMApps().get(appId);\n    if (appImpl.getApplicationSubmissionContext().getUnmanagedAM()) {\n      return containerList;\n    }\n    Collection\u003cRMContainer\u003e liveContainers \u003d\n        app.getCurrentAppAttempt().getLiveContainers();\n    ContainerId amContainerId \u003d\n        rmContext.getRMApps().get(appId).getCurrentAppAttempt()\n          .getMasterContainer().getId();\n    for (RMContainer rmContainer : liveContainers) {\n      if (!rmContainer.getContainerId().equals(amContainerId)) {\n        containerList.add(rmContainer.getContainer());\n      }\n    }\n    return containerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}