{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderUtils.java",
  "functionName": "locatePassword",
  "functionId": "locatePassword___envWithPass-String__fileWithPass-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
  "functionStartLine": 212,
  "functionEndLine": 232,
  "numCommitsSeen": 31,
  "timeTaken": 2771,
  "changeHistory": [
    "d28c2d9f556372bce2d6a6d56fefabf0ba47094f",
    "7154ace71212e9fb9dd6209a92165fb075df7806",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa"
  ],
  "changeHistoryShort": {
    "d28c2d9f556372bce2d6a6d56fefabf0ba47094f": "Ybodychange",
    "7154ace71212e9fb9dd6209a92165fb075df7806": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d28c2d9f556372bce2d6a6d56fefabf0ba47094f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9353. Code and comment mismatch in JavaKeyStoreProvider. (Andras Bokor)\n",
      "commitDate": "02/08/16 3:17 PM",
      "commitName": "d28c2d9f556372bce2d6a6d56fefabf0ba47094f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "17/05/16 5:44 PM",
      "commitNameOld": "7154ace71212e9fb9dd6209a92165fb075df7806",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 76.9,
      "commitsBetweenForRepo": 627,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   public static char[] locatePassword(String envWithPass, String fileWithPass)\n       throws IOException {\n     char[] pass \u003d null;\n-    // Get the password file from the conf, if not present from the user\u0027s\n-    // environment var\n     if (System.getenv().containsKey(envWithPass)) {\n       pass \u003d System.getenv(envWithPass).toCharArray();\n     }\n     if (pass \u003d\u003d null) {\n       if (fileWithPass !\u003d null) {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n         URL pwdFile \u003d cl.getResource(fileWithPass);\n         if (pwdFile \u003d\u003d null) {\n           // Provided Password file does not exist\n           throw new IOException(\"Password file does not exist\");\n         }\n         try (InputStream is \u003d pwdFile.openStream()) {\n           pass \u003d IOUtils.toString(is).trim().toCharArray();\n         }\n       }\n     }\n     return pass;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static char[] locatePassword(String envWithPass, String fileWithPass)\n      throws IOException {\n    char[] pass \u003d null;\n    if (System.getenv().containsKey(envWithPass)) {\n      pass \u003d System.getenv(envWithPass).toCharArray();\n    }\n    if (pass \u003d\u003d null) {\n      if (fileWithPass !\u003d null) {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL pwdFile \u003d cl.getResource(fileWithPass);\n        if (pwdFile \u003d\u003d null) {\n          // Provided Password file does not exist\n          throw new IOException(\"Password file does not exist\");\n        }\n        try (InputStream is \u003d pwdFile.openStream()) {\n          pass \u003d IOUtils.toString(is).trim().toCharArray();\n        }\n      }\n    }\n    return pass;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
      "extendedDetails": {}
    },
    "7154ace71212e9fb9dd6209a92165fb075df7806": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.\n",
      "commitDate": "17/05/16 5:44 PM",
      "commitName": "7154ace71212e9fb9dd6209a92165fb075df7806",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.\n",
          "commitDate": "17/05/16 5:44 PM",
          "commitName": "7154ace71212e9fb9dd6209a92165fb075df7806",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/05/16 4:12 PM",
          "commitNameOld": "dd99f5fc7934c6501995c94b630a7c7e97e880d5",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private char[] locatePassword() throws IOException {\n+  public static char[] locatePassword(String envWithPass, String fileWithPass)\n+      throws IOException {\n     char[] pass \u003d null;\n     // Get the password file from the conf, if not present from the user\u0027s\n     // environment var\n-    if (System.getenv().containsKey(KEYSTORE_PASSWORD_ENV_VAR)) {\n-      pass \u003d System.getenv(KEYSTORE_PASSWORD_ENV_VAR).toCharArray();\n+    if (System.getenv().containsKey(envWithPass)) {\n+      pass \u003d System.getenv(envWithPass).toCharArray();\n     }\n     if (pass \u003d\u003d null) {\n-      String pwFile \u003d getConf().get(KEYSTORE_PASSWORD_FILE_KEY);\n-      if (pwFile !\u003d null) {\n+      if (fileWithPass !\u003d null) {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n-        URL pwdFile \u003d cl.getResource(pwFile);\n+        URL pwdFile \u003d cl.getResource(fileWithPass);\n         if (pwdFile \u003d\u003d null) {\n           // Provided Password file does not exist\n-          throw new IOException(\"Password file does not exists\");\n+          throw new IOException(\"Password file does not exist\");\n         }\n         try (InputStream is \u003d pwdFile.openStream()) {\n           pass \u003d IOUtils.toString(is).trim().toCharArray();\n         }\n       }\n     }\n     return pass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static char[] locatePassword(String envWithPass, String fileWithPass)\n      throws IOException {\n    char[] pass \u003d null;\n    // Get the password file from the conf, if not present from the user\u0027s\n    // environment var\n    if (System.getenv().containsKey(envWithPass)) {\n      pass \u003d System.getenv(envWithPass).toCharArray();\n    }\n    if (pass \u003d\u003d null) {\n      if (fileWithPass !\u003d null) {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL pwdFile \u003d cl.getResource(fileWithPass);\n        if (pwdFile \u003d\u003d null) {\n          // Provided Password file does not exist\n          throw new IOException(\"Password file does not exist\");\n        }\n        try (InputStream is \u003d pwdFile.openStream()) {\n          pass \u003d IOUtils.toString(is).trim().toCharArray();\n        }\n      }\n    }\n    return pass;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
            "oldMethodName": "locatePassword",
            "newMethodName": "locatePassword"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.\n",
          "commitDate": "17/05/16 5:44 PM",
          "commitName": "7154ace71212e9fb9dd6209a92165fb075df7806",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/05/16 4:12 PM",
          "commitNameOld": "dd99f5fc7934c6501995c94b630a7c7e97e880d5",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private char[] locatePassword() throws IOException {\n+  public static char[] locatePassword(String envWithPass, String fileWithPass)\n+      throws IOException {\n     char[] pass \u003d null;\n     // Get the password file from the conf, if not present from the user\u0027s\n     // environment var\n-    if (System.getenv().containsKey(KEYSTORE_PASSWORD_ENV_VAR)) {\n-      pass \u003d System.getenv(KEYSTORE_PASSWORD_ENV_VAR).toCharArray();\n+    if (System.getenv().containsKey(envWithPass)) {\n+      pass \u003d System.getenv(envWithPass).toCharArray();\n     }\n     if (pass \u003d\u003d null) {\n-      String pwFile \u003d getConf().get(KEYSTORE_PASSWORD_FILE_KEY);\n-      if (pwFile !\u003d null) {\n+      if (fileWithPass !\u003d null) {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n-        URL pwdFile \u003d cl.getResource(pwFile);\n+        URL pwdFile \u003d cl.getResource(fileWithPass);\n         if (pwdFile \u003d\u003d null) {\n           // Provided Password file does not exist\n-          throw new IOException(\"Password file does not exists\");\n+          throw new IOException(\"Password file does not exist\");\n         }\n         try (InputStream is \u003d pwdFile.openStream()) {\n           pass \u003d IOUtils.toString(is).trim().toCharArray();\n         }\n       }\n     }\n     return pass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static char[] locatePassword(String envWithPass, String fileWithPass)\n      throws IOException {\n    char[] pass \u003d null;\n    // Get the password file from the conf, if not present from the user\u0027s\n    // environment var\n    if (System.getenv().containsKey(envWithPass)) {\n      pass \u003d System.getenv(envWithPass).toCharArray();\n    }\n    if (pass \u003d\u003d null) {\n      if (fileWithPass !\u003d null) {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL pwdFile \u003d cl.getResource(fileWithPass);\n        if (pwdFile \u003d\u003d null) {\n          // Provided Password file does not exist\n          throw new IOException(\"Password file does not exist\");\n        }\n        try (InputStream is \u003d pwdFile.openStream()) {\n          pass \u003d IOUtils.toString(is).trim().toCharArray();\n        }\n      }\n    }\n    return pass;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.\n",
          "commitDate": "17/05/16 5:44 PM",
          "commitName": "7154ace71212e9fb9dd6209a92165fb075df7806",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/05/16 4:12 PM",
          "commitNameOld": "dd99f5fc7934c6501995c94b630a7c7e97e880d5",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private char[] locatePassword() throws IOException {\n+  public static char[] locatePassword(String envWithPass, String fileWithPass)\n+      throws IOException {\n     char[] pass \u003d null;\n     // Get the password file from the conf, if not present from the user\u0027s\n     // environment var\n-    if (System.getenv().containsKey(KEYSTORE_PASSWORD_ENV_VAR)) {\n-      pass \u003d System.getenv(KEYSTORE_PASSWORD_ENV_VAR).toCharArray();\n+    if (System.getenv().containsKey(envWithPass)) {\n+      pass \u003d System.getenv(envWithPass).toCharArray();\n     }\n     if (pass \u003d\u003d null) {\n-      String pwFile \u003d getConf().get(KEYSTORE_PASSWORD_FILE_KEY);\n-      if (pwFile !\u003d null) {\n+      if (fileWithPass !\u003d null) {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n-        URL pwdFile \u003d cl.getResource(pwFile);\n+        URL pwdFile \u003d cl.getResource(fileWithPass);\n         if (pwdFile \u003d\u003d null) {\n           // Provided Password file does not exist\n-          throw new IOException(\"Password file does not exists\");\n+          throw new IOException(\"Password file does not exist\");\n         }\n         try (InputStream is \u003d pwdFile.openStream()) {\n           pass \u003d IOUtils.toString(is).trim().toCharArray();\n         }\n       }\n     }\n     return pass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static char[] locatePassword(String envWithPass, String fileWithPass)\n      throws IOException {\n    char[] pass \u003d null;\n    // Get the password file from the conf, if not present from the user\u0027s\n    // environment var\n    if (System.getenv().containsKey(envWithPass)) {\n      pass \u003d System.getenv(envWithPass).toCharArray();\n    }\n    if (pass \u003d\u003d null) {\n      if (fileWithPass !\u003d null) {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL pwdFile \u003d cl.getResource(fileWithPass);\n        if (pwdFile \u003d\u003d null) {\n          // Provided Password file does not exist\n          throw new IOException(\"Password file does not exist\");\n        }\n        try (InputStream is \u003d pwdFile.openStream()) {\n          pass \u003d IOUtils.toString(is).trim().toCharArray();\n        }\n      }\n    }\n    return pass;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.\n",
          "commitDate": "17/05/16 5:44 PM",
          "commitName": "7154ace71212e9fb9dd6209a92165fb075df7806",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/05/16 4:12 PM",
          "commitNameOld": "dd99f5fc7934c6501995c94b630a7c7e97e880d5",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private char[] locatePassword() throws IOException {\n+  public static char[] locatePassword(String envWithPass, String fileWithPass)\n+      throws IOException {\n     char[] pass \u003d null;\n     // Get the password file from the conf, if not present from the user\u0027s\n     // environment var\n-    if (System.getenv().containsKey(KEYSTORE_PASSWORD_ENV_VAR)) {\n-      pass \u003d System.getenv(KEYSTORE_PASSWORD_ENV_VAR).toCharArray();\n+    if (System.getenv().containsKey(envWithPass)) {\n+      pass \u003d System.getenv(envWithPass).toCharArray();\n     }\n     if (pass \u003d\u003d null) {\n-      String pwFile \u003d getConf().get(KEYSTORE_PASSWORD_FILE_KEY);\n-      if (pwFile !\u003d null) {\n+      if (fileWithPass !\u003d null) {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n-        URL pwdFile \u003d cl.getResource(pwFile);\n+        URL pwdFile \u003d cl.getResource(fileWithPass);\n         if (pwdFile \u003d\u003d null) {\n           // Provided Password file does not exist\n-          throw new IOException(\"Password file does not exists\");\n+          throw new IOException(\"Password file does not exist\");\n         }\n         try (InputStream is \u003d pwdFile.openStream()) {\n           pass \u003d IOUtils.toString(is).trim().toCharArray();\n         }\n       }\n     }\n     return pass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static char[] locatePassword(String envWithPass, String fileWithPass)\n      throws IOException {\n    char[] pass \u003d null;\n    // Get the password file from the conf, if not present from the user\u0027s\n    // environment var\n    if (System.getenv().containsKey(envWithPass)) {\n      pass \u003d System.getenv(envWithPass).toCharArray();\n    }\n    if (pass \u003d\u003d null) {\n      if (fileWithPass !\u003d null) {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL pwdFile \u003d cl.getResource(fileWithPass);\n        if (pwdFile \u003d\u003d null) {\n          // Provided Password file does not exist\n          throw new IOException(\"Password file does not exist\");\n        }\n        try (InputStream is \u003d pwdFile.openStream()) {\n          pass \u003d IOUtils.toString(is).trim().toCharArray();\n        }\n      }\n    }\n    return pass;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[envWithPass-String, fileWithPass-String]"
          }
        }
      ]
    },
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
      "commitDate": "11/05/16 11:30 AM",
      "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthor": "Larry McCay",
      "diff": "@@ -0,0 +1,23 @@\n+  private char[] locatePassword() throws IOException {\n+    char[] pass \u003d null;\n+    // Get the password file from the conf, if not present from the user\u0027s\n+    // environment var\n+    if (System.getenv().containsKey(KEYSTORE_PASSWORD_ENV_VAR)) {\n+      pass \u003d System.getenv(KEYSTORE_PASSWORD_ENV_VAR).toCharArray();\n+    }\n+    if (pass \u003d\u003d null) {\n+      String pwFile \u003d getConf().get(KEYSTORE_PASSWORD_FILE_KEY);\n+      if (pwFile !\u003d null) {\n+        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n+        URL pwdFile \u003d cl.getResource(pwFile);\n+        if (pwdFile \u003d\u003d null) {\n+          // Provided Password file does not exist\n+          throw new IOException(\"Password file does not exists\");\n+        }\n+        try (InputStream is \u003d pwdFile.openStream()) {\n+          pass \u003d IOUtils.toString(is).trim().toCharArray();\n+        }\n+      }\n+    }\n+    return pass;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private char[] locatePassword() throws IOException {\n    char[] pass \u003d null;\n    // Get the password file from the conf, if not present from the user\u0027s\n    // environment var\n    if (System.getenv().containsKey(KEYSTORE_PASSWORD_ENV_VAR)) {\n      pass \u003d System.getenv(KEYSTORE_PASSWORD_ENV_VAR).toCharArray();\n    }\n    if (pass \u003d\u003d null) {\n      String pwFile \u003d getConf().get(KEYSTORE_PASSWORD_FILE_KEY);\n      if (pwFile !\u003d null) {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL pwdFile \u003d cl.getResource(pwFile);\n        if (pwdFile \u003d\u003d null) {\n          // Provided Password file does not exist\n          throw new IOException(\"Password file does not exists\");\n        }\n        try (InputStream is \u003d pwdFile.openStream()) {\n          pass \u003d IOUtils.toString(is).trim().toCharArray();\n        }\n      }\n    }\n    return pass;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java"
    }
  }
}