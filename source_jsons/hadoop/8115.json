{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ImageServlet.java",
  "functionName": "isValidRequestor",
  "functionId": "isValidRequestor___context-ServletContext__remoteUser-String__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
  "functionStartLine": 281,
  "functionEndLine": 334,
  "numCommitsSeen": 75,
  "timeTaken": 7867,
  "changeHistory": [
    "9eee97508f350ed4629abb04e7781514ffa04070",
    "49dfad942970459297f72632ed8dfd353e0c86de",
    "46b6d23e8fbed4c2ba537dd752116c173805bca7",
    "ba1d4ad25b301f7247f3f23df15e7f800e50feed",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
    "94a1632fcb677fda6f4d812614026417f1d0a360",
    "dbd22b23c2d68b97b4da47215897906f06f978e3",
    "0f595915a388305edbb3ce928415571811d304e8",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "1377709b4c58172c2a3f8abf78319b5a73fe1578",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c",
    "49ed783a3a68726264c68cdc6c958ba9ad26c2c9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "9eee97508f350ed4629abb04e7781514ffa04070": "Ybodychange",
    "49dfad942970459297f72632ed8dfd353e0c86de": "Ybodychange",
    "46b6d23e8fbed4c2ba537dd752116c173805bca7": "Ybodychange",
    "ba1d4ad25b301f7247f3f23df15e7f800e50feed": "Ybodychange",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": "Ybodychange",
    "94a1632fcb677fda6f4d812614026417f1d0a360": "Ymultichange(Yfilerename,Ybodychange)",
    "dbd22b23c2d68b97b4da47215897906f06f978e3": "Ymultichange(Yfilerename,Ybodychange)",
    "0f595915a388305edbb3ce928415571811d304e8": "Ymultichange(Ymovefromfile,Ybodychange)",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "1377709b4c58172c2a3f8abf78319b5a73fe1578": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": "Ybodychange",
    "49ed783a3a68726264c68cdc6c958ba9ad26c2c9": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9eee97508f350ed4629abb04e7781514ffa04070": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9022. Move NameNode.getAddress() and NameNode.getUri() to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "17/09/15 2:18 PM",
      "commitName": "9eee97508f350ed4629abb04e7781514ffa04070",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/06/15 5:26 PM",
      "commitNameOld": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 85.87,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n     if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(SecurityUtil.getServerPrincipal(conf\n         .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n-        NameNode.getAddress(conf).getHostName()));\n+        DFSUtilClient.getNNAddress(conf).getHostName()));\n     try {\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(conf\n               .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n               SecondaryNameNode.getHttpAddress(conf).getHostName()));\n     } catch (Exception e) {\n       // Don\u0027t halt if SecondaryNameNode principal could not be added.\n       LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n       String msg \u003d String.format(\n         \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n         DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n         conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n         conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n           DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n       LOG.warn(msg);\n     }\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       List\u003cConfiguration\u003e otherNnConfs \u003d HAUtil.getConfForOtherNodes(conf);\n       for (Configuration otherNnConf : otherNnConfs) {\n         validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n                 .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n-            NameNode.getAddress(otherNnConf).getHostName()));\n+            DFSUtilClient.getNNAddress(otherNnConf).getHostName()));\n       }\n     }\n \n     for (String v : validRequestors) {\n       if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n       LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n \n     LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        DFSUtilClient.getNNAddress(conf).getHostName()));\n    try {\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(conf\n              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    } catch (Exception e) {\n      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n      String msg \u003d String.format(\n        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n        conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n      LOG.warn(msg);\n    }\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      List\u003cConfiguration\u003e otherNnConfs \u003d HAUtil.getConfForOtherNodes(conf);\n      for (Configuration otherNnConf : otherNnConfs) {\n        validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n                .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n            DFSUtilClient.getNNAddress(otherNnConf).getHostName()));\n      }\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
      "extendedDetails": {}
    },
    "49dfad942970459297f72632ed8dfd353e0c86de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
      "commitDate": "23/06/15 5:26 PM",
      "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "12/02/15 5:40 PM",
      "commitNameOld": "46b6d23e8fbed4c2ba537dd752116c173805bca7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 130.95,
      "commitsBetweenForRepo": 1150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,54 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n     if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(SecurityUtil.getServerPrincipal(conf\n         .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         NameNode.getAddress(conf).getHostName()));\n     try {\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(conf\n               .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n               SecondaryNameNode.getHttpAddress(conf).getHostName()));\n     } catch (Exception e) {\n       // Don\u0027t halt if SecondaryNameNode principal could not be added.\n       LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n       String msg \u003d String.format(\n         \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n         DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n         conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n         conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n           DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n       LOG.warn(msg);\n     }\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n-      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n-          .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n-          NameNode.getAddress(otherNnConf).getHostName()));\n+      List\u003cConfiguration\u003e otherNnConfs \u003d HAUtil.getConfForOtherNodes(conf);\n+      for (Configuration otherNnConf : otherNnConfs) {\n+        validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n+                .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n+            NameNode.getAddress(otherNnConf).getHostName()));\n+      }\n     }\n \n     for (String v : validRequestors) {\n       if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n       LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n \n     LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    try {\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(conf\n              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    } catch (Exception e) {\n      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n      String msg \u003d String.format(\n        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n        conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n      LOG.warn(msg);\n    }\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      List\u003cConfiguration\u003e otherNnConfs \u003d HAUtil.getConfForOtherNodes(conf);\n      for (Configuration otherNnConf : otherNnConfs) {\n        validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n                .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n            NameNode.getAddress(otherNnConf).getHostName()));\n      }\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
      "extendedDetails": {}
    },
    "46b6d23e8fbed4c2ba537dd752116c173805bca7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7684. The host:port settings of the deamons should be trimmed before use. Contributed by Anu Engineer.\n",
      "commitDate": "12/02/15 5:40 PM",
      "commitName": "46b6d23e8fbed4c2ba537dd752116c173805bca7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "22/01/15 4:26 PM",
      "commitNameOld": "d3268c4b10a0f728b554ddb6d69b666a9ca13f12",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 21.05,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n     if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(SecurityUtil.getServerPrincipal(conf\n         .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         NameNode.getAddress(conf).getHostName()));\n     try {\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(conf\n               .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n               SecondaryNameNode.getHttpAddress(conf).getHostName()));\n     } catch (Exception e) {\n       // Don\u0027t halt if SecondaryNameNode principal could not be added.\n       LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n       String msg \u003d String.format(\n         \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n         DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n         conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n-        conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n+        conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n           DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n       LOG.warn(msg);\n     }\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n           .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n           NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for (String v : validRequestors) {\n       if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n       LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n \n     LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    try {\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(conf\n              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    } catch (Exception e) {\n      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n      String msg \u003d String.format(\n        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n        conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n      LOG.warn(msg);\n    }\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
      "extendedDetails": {}
    },
    "ba1d4ad25b301f7247f3f23df15e7f800e50feed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7359. NameNode in secured HA cluster fails to start if dfs.namenode.secondary.http-address cannot be interpreted as a network address. Contributed by Chris Nauroth.\n",
      "commitDate": "05/11/14 3:09 PM",
      "commitName": "ba1d4ad25b301f7247f3f23df15e7f800e50feed",
      "commitAuthor": "cnauroth",
      "commitDateOld": "23/04/14 1:20 PM",
      "commitNameOld": "7f635b8f53b59bae141177da80590753ff1eef72",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 196.12,
      "commitsBetweenForRepo": 1651,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,52 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n     if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(SecurityUtil.getServerPrincipal(conf\n         .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         NameNode.getAddress(conf).getHostName()));\n-    validRequestors.add(SecurityUtil.getServerPrincipal(\n+    try {\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(conf\n+              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n+              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    } catch (Exception e) {\n+      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n+      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n+      String msg \u003d String.format(\n+        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n+        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n         conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n-        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n+        conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n+          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n+      LOG.warn(msg);\n+    }\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n           .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n           NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for (String v : validRequestors) {\n       if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n       LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n \n     LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    try {\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(conf\n              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    } catch (Exception e) {\n      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n      String msg \u003d String.format(\n        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n        conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n      LOG.warn(msg);\n    }\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
      "extendedDetails": {}
    },
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6181. Fix the wrong property names in NFS user guide. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1585563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/14 11:55 AM",
      "commitName": "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "24/03/14 4:32 PM",
      "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 13.81,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n     if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(SecurityUtil.getServerPrincipal(conf\n-        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+        .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         NameNode.getAddress(conf).getHostName()));\n     validRequestors.add(SecurityUtil.getServerPrincipal(\n-        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n         SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n-          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+          .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n           NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for (String v : validRequestors) {\n       if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n       LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n \n     LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    validRequestors.add(SecurityUtil.getServerPrincipal(\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
      "extendedDetails": {}
    },
    "94a1632fcb677fda6f4d812614026417f1d0a360": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:25 PM",
      "commitName": "94a1632fcb677fda6f4d812614026417f1d0a360",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/03/14 1:25 PM",
          "commitName": "94a1632fcb677fda6f4d812614026417f1d0a360",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "08/03/14 1:15 PM",
          "commitNameOld": "dbd22b23c2d68b97b4da47215897906f06f978e3",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n-    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n-    \n+\n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n+        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+        NameNode.getAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(\n+        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(\n-          SecurityUtil.getServerPrincipal(otherNnConf\n-              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-              NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n+          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+          NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n-    for(String v : validRequestors) {\n-      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n+    for (String v : validRequestors) {\n+      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-    \n+\n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n-      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n+      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n-    \n-    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n+\n+    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    validRequestors.add(SecurityUtil.getServerPrincipal(\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/03/14 1:25 PM",
          "commitName": "94a1632fcb677fda6f4d812614026417f1d0a360",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "08/03/14 1:15 PM",
          "commitNameOld": "dbd22b23c2d68b97b4da47215897906f06f978e3",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n-    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n-    \n+\n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n+        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+        NameNode.getAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(\n+        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(\n-          SecurityUtil.getServerPrincipal(otherNnConf\n-              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-              NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n+          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+          NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n-    for(String v : validRequestors) {\n-      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n+    for (String v : validRequestors) {\n+      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-    \n+\n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n-      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n+      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n-    \n-    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n+\n+    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    validRequestors.add(SecurityUtil.getServerPrincipal(\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "dbd22b23c2d68b97b4da47215897906f06f978e3": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Revert HDFS-3405 for recommit with correct renamed files\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575610 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:15 PM",
      "commitName": "dbd22b23c2d68b97b4da47215897906f06f978e3",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert HDFS-3405 for recommit with correct renamed files\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575610 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/03/14 1:15 PM",
          "commitName": "dbd22b23c2d68b97b4da47215897906f06f978e3",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "08/03/14 1:11 PM",
          "commitNameOld": "98594ab787d2e2a6b499f576e0cbda10767eaf15",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n-    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n-\n+    \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n-        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-        NameNode.getAddress(conf).getHostName()));\n-    validRequestors.add(SecurityUtil.getServerPrincipal(\n-        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n+            .getAddress(conf).getHostName()));\n+    validRequestors.add(\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n-          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-          NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(otherNnConf\n+              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+              NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n-    for (String v : validRequestors) {\n-      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n+    for(String v : validRequestors) {\n+      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-\n+    \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n-      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n+      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n-\n-    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n+    \n+    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n    \n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n    \n    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert HDFS-3405 for recommit with correct renamed files\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575610 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/03/14 1:15 PM",
          "commitName": "dbd22b23c2d68b97b4da47215897906f06f978e3",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "08/03/14 1:11 PM",
          "commitNameOld": "98594ab787d2e2a6b499f576e0cbda10767eaf15",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n-    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n-\n+    \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n-        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-        NameNode.getAddress(conf).getHostName()));\n-    validRequestors.add(SecurityUtil.getServerPrincipal(\n-        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n+            .getAddress(conf).getHostName()));\n+    validRequestors.add(\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n-          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-          NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(otherNnConf\n+              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+              NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n-    for (String v : validRequestors) {\n-      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n+    for(String v : validRequestors) {\n+      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-\n+    \n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n-      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n+      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n-\n-    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n+    \n+    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n    \n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n    \n    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "0f595915a388305edbb3ce928415571811d304e8": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575457 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 4:39 PM",
      "commitName": "0f595915a388305edbb3ce928415571811d304e8",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575457 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/03/14 4:39 PM",
          "commitName": "0f595915a388305edbb3ce928415571811d304e8",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/03/14 3:47 PM",
          "commitNameOld": "1f6c2b09c6a5dc07f5caa1cad7036e0e1465f33e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n-    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n-    \n+\n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n+        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+        NameNode.getAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(\n+        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(\n-          SecurityUtil.getServerPrincipal(otherNnConf\n-              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-              NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n+          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+          NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n-    for(String v : validRequestors) {\n-      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n+    for (String v : validRequestors) {\n+      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-    \n+\n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n-      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n+      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n-    \n-    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n+\n+    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    validRequestors.add(SecurityUtil.getServerPrincipal(\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
            "oldMethodName": "isValidRequestor",
            "newMethodName": "isValidRequestor"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575457 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/03/14 4:39 PM",
          "commitName": "0f595915a388305edbb3ce928415571811d304e8",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/03/14 3:47 PM",
          "commitNameOld": "1f6c2b09c6a5dc07f5caa1cad7036e0e1465f33e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n-    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n-    \n+\n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n+        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+        NameNode.getAddress(conf).getHostName()));\n+    validRequestors.add(SecurityUtil.getServerPrincipal(\n+        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n-      validRequestors.add(\n-          SecurityUtil.getServerPrincipal(otherNnConf\n-              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n-              NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n+          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+          NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n-    for(String v : validRequestors) {\n-      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n+    for (String v : validRequestors) {\n+      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-    \n+\n     if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n-      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n+      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n-    \n-    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n+\n+    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(SecurityUtil.getServerPrincipal(conf\n        .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n        NameNode.getAddress(conf).getHostName()));\n    validRequestors.add(SecurityUtil.getServerPrincipal(\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n        SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf\n          .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n          NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"ImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n\n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"ImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n\n    LOG.info(\"ImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/12/13 4:30 PM",
      "commitNameOld": "0fc2929d13435a71d759f29579a7a171dc05990d",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 42.29,
      "commitsBetweenForRepo": 194,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   static boolean isValidRequestor(ServletContext context, String remoteUser,\n       Configuration conf) throws IOException {\n     if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n     \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n             .getAddress(conf).getHostName()));\n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n             SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(otherNnConf\n               .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n               NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for(String v : validRequestors) {\n       if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n     \n-    if (HttpServer.userHasAdministratorAccess(context, remoteUser)) {\n+    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n       LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n       return true;\n     }\n     \n     LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n    \n    if (HttpServer2.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n    \n    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
      "extendedDetails": {}
    },
    "1377709b4c58172c2a3f8abf78319b5a73fe1578": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3433. GetImageServlet should allow administrative requestors when security is enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339540 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 3:23 AM",
      "commitName": "1377709b4c58172c2a3f8abf78319b5a73fe1578",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3433. GetImageServlet should allow administrative requestors when security is enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339540 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/05/12 3:23 AM",
          "commitName": "1377709b4c58172c2a3f8abf78319b5a73fe1578",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "12/05/12 7:51 PM",
          "commitNameOld": "f22341ab1a9060a727abb0924a4cd996b2bd7fe7",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 4.31,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,41 @@\n-  static boolean isValidRequestor(String remoteUser, Configuration conf)\n-      throws IOException {\n+  static boolean isValidRequestor(ServletContext context, String remoteUser,\n+      Configuration conf) throws IOException {\n     if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n     \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n             .getAddress(conf).getHostName()));\n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n             SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(otherNnConf\n               .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n               NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for(String v : validRequestors) {\n       if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet allowing: \" + remoteUser);\n+        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-    if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n+    \n+    if (HttpServer.userHasAdministratorAccess(context, remoteUser)) {\n+      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n+      return true;\n+    }\n+    \n+    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n    \n    if (HttpServer.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n    \n    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
          "extendedDetails": {
            "oldValue": "[remoteUser-String, conf-Configuration]",
            "newValue": "[context-ServletContext, remoteUser-String, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3433. GetImageServlet should allow administrative requestors when security is enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339540 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/05/12 3:23 AM",
          "commitName": "1377709b4c58172c2a3f8abf78319b5a73fe1578",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "12/05/12 7:51 PM",
          "commitNameOld": "f22341ab1a9060a727abb0924a4cd996b2bd7fe7",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 4.31,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,41 @@\n-  static boolean isValidRequestor(String remoteUser, Configuration conf)\n-      throws IOException {\n+  static boolean isValidRequestor(ServletContext context, String remoteUser,\n+      Configuration conf) throws IOException {\n     if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n     \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n             .getAddress(conf).getHostName()));\n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n             SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(otherNnConf\n               .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n               NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for(String v : validRequestors) {\n       if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet allowing: \" + remoteUser);\n+        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n         return true;\n       }\n     }\n-    if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n+    \n+    if (HttpServer.userHasAdministratorAccess(context, remoteUser)) {\n+      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n+      return true;\n+    }\n+    \n+    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(ServletContext context, String remoteUser,\n      Configuration conf) throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        LOG.info(\"GetImageServlet allowing checkpointer: \" + remoteUser);\n        return true;\n      }\n    }\n    \n    if (HttpServer.userHasAdministratorAccess(context, remoteUser)) {\n      LOG.info(\"GetImageServlet allowing administrator: \" + remoteUser);\n      return true;\n    }\n    \n    LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2617. Replaced Kerberized SSL for image transfer and fsck with SPNEGO-based solution. Contributed by Jakob Homan, Alejandro Abdelnur, and Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/12 2:58 PM",
      "commitName": "5dbbe0e0a5d31689d3425e490865f95057dc051c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/05/12 6:44 PM",
      "commitNameOld": "cbc242429093ccabf76248f857de5e587a9682b0",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,35 @@\n   static boolean isValidRequestor(String remoteUser, Configuration conf)\n       throws IOException {\n     if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n     \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n             .getAddress(conf).getHostName()));\n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n             SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n       Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n       validRequestors.add(\n           SecurityUtil.getServerPrincipal(otherNnConf\n-              .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n-              NameNode.getAddress(otherNnConf).getHostName()));\n-      validRequestors.add(\n-          SecurityUtil.getServerPrincipal(otherNnConf\n               .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n               NameNode.getAddress(otherNnConf).getHostName()));\n     }\n \n     for(String v : validRequestors) {\n       if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n-        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n+        if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet allowing: \" + remoteUser);\n         return true;\n       }\n     }\n-    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n+    if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if(LOG.isInfoEnabled()) LOG.info(\"GetImageServlet rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
      "extendedDetails": {}
    },
    "49ed783a3a68726264c68cdc6c958ba9ad26c2c9": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-3305. GetImageServlet should consider SBN a valid requestor in a secure HA setup. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328115 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 1:43 PM",
      "commitName": "49ed783a3a68726264c68cdc6c958ba9ad26c2c9",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-3305. GetImageServlet should consider SBN a valid requestor in a secure HA setup. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328115 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/04/12 1:43 PM",
          "commitName": "49ed783a3a68726264c68cdc6c958ba9ad26c2c9",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "26/03/12 10:02 AM",
          "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 24.15,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,47 @@\n-  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n+  static boolean isValidRequestor(String remoteUser, Configuration conf)\n       throws IOException {\n     if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n+    \n+    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    String[] validRequestors \u003d {\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()),\n+            .getAddress(conf).getHostName()));\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()),\n+            .getAddress(conf).getHostName()));\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()) };\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+\n+    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n+      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(otherNnConf\n+              .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n+              NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(otherNnConf\n+              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+              NameNode.getAddress(otherNnConf).getHostName()));\n+    }\n \n     for(String v : validRequestors) {\n       if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n         return true;\n       }\n     }\n     if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3305. GetImageServlet should consider SBN a valid requestor in a secure HA setup. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328115 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/04/12 1:43 PM",
          "commitName": "49ed783a3a68726264c68cdc6c958ba9ad26c2c9",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "26/03/12 10:02 AM",
          "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 24.15,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,47 @@\n-  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n+  static boolean isValidRequestor(String remoteUser, Configuration conf)\n       throws IOException {\n     if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n       return false;\n     }\n+    \n+    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n \n-    String[] validRequestors \u003d {\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()),\n+            .getAddress(conf).getHostName()));\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()),\n+            .getAddress(conf).getHostName()));\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n             .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()) };\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+\n+    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n+      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(otherNnConf\n+              .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n+              NameNode.getAddress(otherNnConf).getHostName()));\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(otherNnConf\n+              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n+              NameNode.getAddress(otherNnConf).getHostName()));\n+    }\n \n     for(String v : validRequestors) {\n       if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n         if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n         return true;\n       }\n     }\n     if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n    \n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    if (HAUtil.isHAEnabled(conf, DFSUtil.getNamenodeNameServiceId(conf))) {\n      Configuration otherNnConf \u003d HAUtil.getConfForOtherNode(conf);\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(otherNnConf\n              .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),\n              NameNode.getAddress(otherNnConf).getHostName()));\n    }\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    String[] validRequestors \u003d {\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()) };\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    String[] validRequestors \u003d {\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()) };\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n+      throws IOException {\n+    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n+      return false;\n+    }\n+\n+    String[] validRequestors \u003d {\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n+            .getAddress(conf).getHostName()),\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n+            .getAddress(conf).getHostName()),\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()),\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()) };\n+\n+    for(String v : validRequestors) {\n+      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n+        return true;\n+      }\n+    }\n+    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if(remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to getImage servlet\");\n      return false;\n    }\n\n    String[] validRequestors \u003d {\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()) };\n\n    for(String v : validRequestors) {\n      if(v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if(LOG.isDebugEnabled()) LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/GetImageServlet.java"
    }
  }
}