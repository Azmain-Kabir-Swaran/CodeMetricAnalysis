{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "getRpcResponse",
  "functionId": "getRpcResponse___call-Call(modifiers-final)__connection-Connection(modifiers-final)__timeout-long(modifiers-final)__unit-TimeUnit(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 1545,
  "functionEndLine": 1576,
  "numCommitsSeen": 400,
  "timeTaken": 4943,
  "changeHistory": [
    "35f255b03b1bb5c94063ec1818af1d253ceee991",
    "574dcd34c0da1903d25e37dc5757642a584dc3d0",
    "e4450d47f19131818e1c040b6bd8d85ae8250475",
    "5360da8bd9f720384860f411bee081aef13b4bd4",
    "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
    "42c22f7e3d6e88bf1115f617f6e803288886d1ac",
    "a62637a413ad88c4273d3251892b8fc1c05afa34"
  ],
  "changeHistoryShort": {
    "35f255b03b1bb5c94063ec1818af1d253ceee991": "Ybodychange",
    "574dcd34c0da1903d25e37dc5757642a584dc3d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "e4450d47f19131818e1c040b6bd8d85ae8250475": "Ymultichange(Yparameterchange,Ybodychange)",
    "5360da8bd9f720384860f411bee081aef13b4bd4": "Ybodychange",
    "83f2f78c118a7e52aba5104bd97b0acedc96be7b": "Ybodychange",
    "42c22f7e3d6e88bf1115f617f6e803288886d1ac": "Ymultichange(Yparameterchange,Ybodychange)",
    "a62637a413ad88c4273d3251892b8fc1c05afa34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35f255b03b1bb5c94063ec1818af1d253ceee991": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
      "commitDate": "06/06/16 1:31 AM",
      "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/06/16 1:31 AM",
      "commitNameOld": "574dcd34c0da1903d25e37dc5757642a584dc3d0",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,32 @@\n   private Writable getRpcResponse(final Call call, final Connection connection,\n       final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n-              timeout, unit);\n-          call.wait(waitTimeout); // wait for the result\n-          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n+          AsyncGet.Util.wait(call, timeout, unit);\n+          if (timeout \u003e\u003d 0 \u0026\u0026 !call.done) {\n             return null;\n           }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          AsyncGet.Util.wait(call, timeout, unit);\n          if (timeout \u003e\u003d 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "574dcd34c0da1903d25e37dc5757642a584dc3d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"Revert \"HADOOP-13168. Support Future.get with timeout in ipc async calls.\"\"\n\nThis reverts commit e4450d47f19131818e1c040b6bd8d85ae8250475.\n",
      "commitDate": "06/06/16 1:31 AM",
      "commitName": "574dcd34c0da1903d25e37dc5757642a584dc3d0",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"Revert \"HADOOP-13168. Support Future.get with timeout in ipc async calls.\"\"\n\nThis reverts commit e4450d47f19131818e1c040b6bd8d85ae8250475.\n",
          "commitDate": "06/06/16 1:31 AM",
          "commitName": "574dcd34c0da1903d25e37dc5757642a584dc3d0",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "06/06/16 1:28 AM",
          "commitNameOld": "aa20fa150d522b9fe469dd99a8e24d7e27d888ea",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  private Writable getRpcResponse(final Call call, final Connection connection)\n-      throws IOException {\n+  private Writable getRpcResponse(final Call call, final Connection connection,\n+      final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          call.wait();                           // wait for the result\n+          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n+              timeout, unit);\n+          call.wait(waitTimeout); // wait for the result\n+          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n+            return null;\n+          }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n              timeout, unit);\n          call.wait(waitTimeout); // wait for the result\n          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[call-Call(modifiers-final), connection-Connection(modifiers-final)]",
            "newValue": "[call-Call(modifiers-final), connection-Connection(modifiers-final), timeout-long(modifiers-final), unit-TimeUnit(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"Revert \"HADOOP-13168. Support Future.get with timeout in ipc async calls.\"\"\n\nThis reverts commit e4450d47f19131818e1c040b6bd8d85ae8250475.\n",
          "commitDate": "06/06/16 1:31 AM",
          "commitName": "574dcd34c0da1903d25e37dc5757642a584dc3d0",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "06/06/16 1:28 AM",
          "commitNameOld": "aa20fa150d522b9fe469dd99a8e24d7e27d888ea",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  private Writable getRpcResponse(final Call call, final Connection connection)\n-      throws IOException {\n+  private Writable getRpcResponse(final Call call, final Connection connection,\n+      final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          call.wait();                           // wait for the result\n+          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n+              timeout, unit);\n+          call.wait(waitTimeout); // wait for the result\n+          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n+            return null;\n+          }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n              timeout, unit);\n          call.wait(waitTimeout); // wait for the result\n          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "e4450d47f19131818e1c040b6bd8d85ae8250475": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-13168. Support Future.get with timeout in ipc async calls.\"\n\nThis reverts commit 42c22f7e3d6e88bf1115f617f6e803288886d1ac.\n",
      "commitDate": "03/06/16 6:09 PM",
      "commitName": "e4450d47f19131818e1c040b6bd8d85ae8250475",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-13168. Support Future.get with timeout in ipc async calls.\"\n\nThis reverts commit 42c22f7e3d6e88bf1115f617f6e803288886d1ac.\n",
          "commitDate": "03/06/16 6:09 PM",
          "commitName": "e4450d47f19131818e1c040b6bd8d85ae8250475",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "03/06/16 6:09 PM",
          "commitNameOld": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  private Writable getRpcResponse(final Call call, final Connection connection,\n-      final long timeout, final TimeUnit unit) throws IOException {\n+  private Writable getRpcResponse(final Call call, final Connection connection)\n+      throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n-              timeout, unit);\n-          call.wait(waitTimeout); // wait for the result\n-          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n-            return null;\n-          }\n+          call.wait();                           // wait for the result\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection)\n      throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          call.wait();                           // wait for the result\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[call-Call(modifiers-final), connection-Connection(modifiers-final), timeout-long(modifiers-final), unit-TimeUnit(modifiers-final)]",
            "newValue": "[call-Call(modifiers-final), connection-Connection(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-13168. Support Future.get with timeout in ipc async calls.\"\n\nThis reverts commit 42c22f7e3d6e88bf1115f617f6e803288886d1ac.\n",
          "commitDate": "03/06/16 6:09 PM",
          "commitName": "e4450d47f19131818e1c040b6bd8d85ae8250475",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "03/06/16 6:09 PM",
          "commitNameOld": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  private Writable getRpcResponse(final Call call, final Connection connection,\n-      final long timeout, final TimeUnit unit) throws IOException {\n+  private Writable getRpcResponse(final Call call, final Connection connection)\n+      throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n-              timeout, unit);\n-          call.wait(waitTimeout); // wait for the result\n-          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n-            return null;\n-          }\n+          call.wait();                           // wait for the result\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection)\n      throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          call.wait();                           // wait for the result\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "5360da8bd9f720384860f411bee081aef13b4bd4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13226 Support async call retry and failover.\"\n\nThis reverts commit 83f2f78c118a7e52aba5104bd97b0acedc96be7b.\n",
      "commitDate": "03/06/16 6:09 PM",
      "commitName": "5360da8bd9f720384860f411bee081aef13b4bd4",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "31/05/16 4:30 PM",
      "commitNameOld": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   private Writable getRpcResponse(final Call call, final Connection connection,\n       final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          AsyncGet.Util.wait(call, timeout, unit);\n-          if (timeout \u003e\u003d 0 \u0026\u0026 !call.done) {\n+          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n+              timeout, unit);\n+          call.wait(waitTimeout); // wait for the result\n+          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n             return null;\n           }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n              timeout, unit);\n          call.wait(waitTimeout); // wait for the result\n          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "83f2f78c118a7e52aba5104bd97b0acedc96be7b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13226 Support async call retry and failover.\n",
      "commitDate": "31/05/16 4:30 PM",
      "commitName": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "19/05/16 3:34 PM",
      "commitNameOld": "42c22f7e3d6e88bf1115f617f6e803288886d1ac",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 12.04,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,32 @@\n   private Writable getRpcResponse(final Call call, final Connection connection,\n       final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n-              timeout, unit);\n-          call.wait(waitTimeout); // wait for the result\n-          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n+          AsyncGet.Util.wait(call, timeout, unit);\n+          if (timeout \u003e\u003d 0 \u0026\u0026 !call.done) {\n             return null;\n           }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          AsyncGet.Util.wait(call, timeout, unit);\n          if (timeout \u003e\u003d 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "42c22f7e3d6e88bf1115f617f6e803288886d1ac": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13168. Support Future.get with timeout in ipc async calls.\n",
      "commitDate": "19/05/16 3:34 PM",
      "commitName": "42c22f7e3d6e88bf1115f617f6e803288886d1ac",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13168. Support Future.get with timeout in ipc async calls.\n",
          "commitDate": "19/05/16 3:34 PM",
          "commitName": "42c22f7e3d6e88bf1115f617f6e803288886d1ac",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "02/05/16 11:16 AM",
          "commitNameOld": "1b9f18623ab55507bea94888317c7d63d0f4a6f2",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 17.18,
          "commitsBetweenForRepo": 134,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  private Writable getRpcResponse(final Call call, final Connection connection)\n-      throws IOException {\n+  private Writable getRpcResponse(final Call call, final Connection connection,\n+      final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          call.wait();                           // wait for the result\n+          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n+              timeout, unit);\n+          call.wait(waitTimeout); // wait for the result\n+          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n+            return null;\n+          }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n              timeout, unit);\n          call.wait(waitTimeout); // wait for the result\n          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[call-Call(modifiers-final), connection-Connection(modifiers-final)]",
            "newValue": "[call-Call(modifiers-final), connection-Connection(modifiers-final), timeout-long(modifiers-final), unit-TimeUnit(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13168. Support Future.get with timeout in ipc async calls.\n",
          "commitDate": "19/05/16 3:34 PM",
          "commitName": "42c22f7e3d6e88bf1115f617f6e803288886d1ac",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "02/05/16 11:16 AM",
          "commitNameOld": "1b9f18623ab55507bea94888317c7d63d0f4a6f2",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 17.18,
          "commitsBetweenForRepo": 134,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  private Writable getRpcResponse(final Call call, final Connection connection)\n-      throws IOException {\n+  private Writable getRpcResponse(final Call call, final Connection connection,\n+      final long timeout, final TimeUnit unit) throws IOException {\n     synchronized (call) {\n       while (!call.done) {\n         try {\n-          call.wait();                           // wait for the result\n+          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n+              timeout, unit);\n+          call.wait(waitTimeout); // wait for the result\n+          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n+            return null;\n+          }\n         } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\"Call interrupted\");\n         }\n       }\n \n       if (call.error !\u003d null) {\n         if (call.error instanceof RemoteException) {\n           call.error.fillInStackTrace();\n           throw call.error;\n         } else { // local exception\n           InetSocketAddress address \u003d connection.getRemoteAddress();\n           throw NetUtils.wrapException(address.getHostName(),\n                   address.getPort(),\n                   NetUtils.getHostname(),\n                   0,\n                   call.error);\n         }\n       } else {\n         return call.getRpcResponse();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection,\n      final long timeout, final TimeUnit unit) throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          final long waitTimeout \u003d AsyncGet.Util.asyncGetTimeout2WaitTimeout(\n              timeout, unit);\n          call.wait(waitTimeout); // wait for the result\n          if (waitTimeout \u003e 0 \u0026\u0026 !call.done) {\n            return null;\n          }\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "a62637a413ad88c4273d3251892b8fc1c05afa34": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12909. Change ipc.Client to support asynchronous calls.  Contributed by  Xiaobing Zhou\n",
      "commitDate": "06/04/16 11:02 PM",
      "commitName": "a62637a413ad88c4273d3251892b8fc1c05afa34",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,29 @@\n+  private Writable getRpcResponse(final Call call, final Connection connection)\n+      throws IOException {\n+    synchronized (call) {\n+      while (!call.done) {\n+        try {\n+          call.wait();                           // wait for the result\n+        } catch (InterruptedException ie) {\n+          Thread.currentThread().interrupt();\n+          throw new InterruptedIOException(\"Call interrupted\");\n+        }\n+      }\n+\n+      if (call.error !\u003d null) {\n+        if (call.error instanceof RemoteException) {\n+          call.error.fillInStackTrace();\n+          throw call.error;\n+        } else { // local exception\n+          InetSocketAddress address \u003d connection.getRemoteAddress();\n+          throw NetUtils.wrapException(address.getHostName(),\n+                  address.getPort(),\n+                  NetUtils.getHostname(),\n+                  0,\n+                  call.error);\n+        }\n+      } else {\n+        return call.getRpcResponse();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Writable getRpcResponse(final Call call, final Connection connection)\n      throws IOException {\n    synchronized (call) {\n      while (!call.done) {\n        try {\n          call.wait();                           // wait for the result\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\"Call interrupted\");\n        }\n      }\n\n      if (call.error !\u003d null) {\n        if (call.error instanceof RemoteException) {\n          call.error.fillInStackTrace();\n          throw call.error;\n        } else { // local exception\n          InetSocketAddress address \u003d connection.getRemoteAddress();\n          throw NetUtils.wrapException(address.getHostName(),\n                  address.getPort(),\n                  NetUtils.getHostname(),\n                  0,\n                  call.error);\n        }\n      } else {\n        return call.getRpcResponse();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}