{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageViewer.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageViewer.java",
  "functionStartLine": 211,
  "functionEndLine": 277,
  "numCommitsSeen": 12,
  "timeTaken": 2306,
  "changeHistory": [
    "63f594892ecd4687e37a99790288e36eb278849f",
    "97f58955a6045b373ab73653bf26ab5922b00cf3"
  ],
  "changeHistoryShort": {
    "63f594892ecd4687e37a99790288e36eb278849f": "Ybodychange",
    "97f58955a6045b373ab73653bf26ab5922b00cf3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "63f594892ecd4687e37a99790288e36eb278849f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10778. Add -format option to make the output of FileDistribution processor human-readable in OfflineImageViewer.\n",
      "commitDate": "07/09/16 11:13 PM",
      "commitName": "63f594892ecd4687e37a99790288e36eb278849f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "23/08/16 3:57 AM",
      "commitNameOld": "e90f3359de299ef5e3a54ca71070e3dfe1dbb98c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 15.8,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   public static void main(String[] args) throws IOException {\n     Options options \u003d buildOptions();\n     if(args.length \u003d\u003d 0) {\n       printUsage();\n       return;\n     }\n     \n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n \n     try {\n       cmd \u003d parser.parse(options, args);\n     } catch (ParseException e) {\n       System.out.println(\"Error parsing command-line options: \");\n       printUsage();\n       return;\n     }\n \n     if(cmd.hasOption(\"h\")) { // print help and exit\n       printUsage();\n       return;\n     }\n \n     boolean skipBlocks \u003d cmd.hasOption(\"skipBlocks\");\n     boolean printToScreen \u003d cmd.hasOption(\"printToScreen\");\n     String inputFile \u003d cmd.getOptionValue(\"i\");\n     String processor \u003d cmd.getOptionValue(\"p\", \"Ls\");\n     String outputFile \u003d cmd.getOptionValue(\"o\");\n     String delimiter \u003d cmd.getOptionValue(\"delimiter\");\n     \n     if( !(delimiter \u003d\u003d null || processor.equals(\"Delimited\")) ) {\n       System.out.println(\"Can only specify -delimiter with Delimited processor\");\n       printUsage();\n       return;\n     }\n     \n     ImageVisitor v;\n     if(processor.equals(\"Indented\")) {\n       v \u003d new IndentedImageVisitor(outputFile, printToScreen);\n     } else if (processor.equals(\"XML\")) {\n       v \u003d new XmlImageVisitor(outputFile, printToScreen);\n     } else if (processor.equals(\"Delimited\")) {\n       v \u003d delimiter \u003d\u003d null ?  \n                  new DelimitedImageVisitor(outputFile, printToScreen) :\n                  new DelimitedImageVisitor(outputFile, printToScreen, delimiter);\n       skipBlocks \u003d false;\n     } else if (processor.equals(\"FileDistribution\")) {\n       long maxSize \u003d Long.parseLong(cmd.getOptionValue(\"maxSize\", \"0\"));\n       int step \u003d Integer.parseInt(cmd.getOptionValue(\"step\", \"0\"));\n-      v \u003d new FileDistributionVisitor(outputFile, maxSize, step);\n+      boolean formatOutput \u003d cmd.hasOption(\"format\");\n+      v \u003d new FileDistributionVisitor(outputFile, maxSize, step, formatOutput);\n     } else if (processor.equals(\"NameDistribution\")) {\n       v \u003d new NameDistributionVisitor(outputFile, printToScreen);\n     } else {\n       v \u003d new LsImageVisitor(outputFile, printToScreen);\n       skipBlocks \u003d false;\n     }\n     \n     try {\n       OfflineImageViewer d \u003d new OfflineImageViewer(inputFile, v, skipBlocks);\n       d.go();\n     } catch (EOFException e) {\n       System.err.println(\"Input file ended unexpectedly.  Exiting\");\n     } catch(IOException e) {\n       System.err.println(\"Encountered exception.  Exiting: \" + e.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws IOException {\n    Options options \u003d buildOptions();\n    if(args.length \u003d\u003d 0) {\n      printUsage();\n      return;\n    }\n    \n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(\"Error parsing command-line options: \");\n      printUsage();\n      return;\n    }\n\n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printUsage();\n      return;\n    }\n\n    boolean skipBlocks \u003d cmd.hasOption(\"skipBlocks\");\n    boolean printToScreen \u003d cmd.hasOption(\"printToScreen\");\n    String inputFile \u003d cmd.getOptionValue(\"i\");\n    String processor \u003d cmd.getOptionValue(\"p\", \"Ls\");\n    String outputFile \u003d cmd.getOptionValue(\"o\");\n    String delimiter \u003d cmd.getOptionValue(\"delimiter\");\n    \n    if( !(delimiter \u003d\u003d null || processor.equals(\"Delimited\")) ) {\n      System.out.println(\"Can only specify -delimiter with Delimited processor\");\n      printUsage();\n      return;\n    }\n    \n    ImageVisitor v;\n    if(processor.equals(\"Indented\")) {\n      v \u003d new IndentedImageVisitor(outputFile, printToScreen);\n    } else if (processor.equals(\"XML\")) {\n      v \u003d new XmlImageVisitor(outputFile, printToScreen);\n    } else if (processor.equals(\"Delimited\")) {\n      v \u003d delimiter \u003d\u003d null ?  \n                 new DelimitedImageVisitor(outputFile, printToScreen) :\n                 new DelimitedImageVisitor(outputFile, printToScreen, delimiter);\n      skipBlocks \u003d false;\n    } else if (processor.equals(\"FileDistribution\")) {\n      long maxSize \u003d Long.parseLong(cmd.getOptionValue(\"maxSize\", \"0\"));\n      int step \u003d Integer.parseInt(cmd.getOptionValue(\"step\", \"0\"));\n      boolean formatOutput \u003d cmd.hasOption(\"format\");\n      v \u003d new FileDistributionVisitor(outputFile, maxSize, step, formatOutput);\n    } else if (processor.equals(\"NameDistribution\")) {\n      v \u003d new NameDistributionVisitor(outputFile, printToScreen);\n    } else {\n      v \u003d new LsImageVisitor(outputFile, printToScreen);\n      skipBlocks \u003d false;\n    }\n    \n    try {\n      OfflineImageViewer d \u003d new OfflineImageViewer(inputFile, v, skipBlocks);\n      d.go();\n    } catch (EOFException e) {\n      System.err.println(\"Input file ended unexpectedly.  Exiting\");\n    } catch(IOException e) {\n      System.err.println(\"Encountered exception.  Exiting: \" + e.getMessage());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageViewer.java",
      "extendedDetails": {}
    },
    "97f58955a6045b373ab73653bf26ab5922b00cf3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6293. Issues with OIV processing PB-based fsimages. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 6:15 PM",
      "commitName": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,66 @@\n+  public static void main(String[] args) throws IOException {\n+    Options options \u003d buildOptions();\n+    if(args.length \u003d\u003d 0) {\n+      printUsage();\n+      return;\n+    }\n+    \n+    CommandLineParser parser \u003d new PosixParser();\n+    CommandLine cmd;\n+\n+    try {\n+      cmd \u003d parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(\"Error parsing command-line options: \");\n+      printUsage();\n+      return;\n+    }\n+\n+    if(cmd.hasOption(\"h\")) { // print help and exit\n+      printUsage();\n+      return;\n+    }\n+\n+    boolean skipBlocks \u003d cmd.hasOption(\"skipBlocks\");\n+    boolean printToScreen \u003d cmd.hasOption(\"printToScreen\");\n+    String inputFile \u003d cmd.getOptionValue(\"i\");\n+    String processor \u003d cmd.getOptionValue(\"p\", \"Ls\");\n+    String outputFile \u003d cmd.getOptionValue(\"o\");\n+    String delimiter \u003d cmd.getOptionValue(\"delimiter\");\n+    \n+    if( !(delimiter \u003d\u003d null || processor.equals(\"Delimited\")) ) {\n+      System.out.println(\"Can only specify -delimiter with Delimited processor\");\n+      printUsage();\n+      return;\n+    }\n+    \n+    ImageVisitor v;\n+    if(processor.equals(\"Indented\")) {\n+      v \u003d new IndentedImageVisitor(outputFile, printToScreen);\n+    } else if (processor.equals(\"XML\")) {\n+      v \u003d new XmlImageVisitor(outputFile, printToScreen);\n+    } else if (processor.equals(\"Delimited\")) {\n+      v \u003d delimiter \u003d\u003d null ?  \n+                 new DelimitedImageVisitor(outputFile, printToScreen) :\n+                 new DelimitedImageVisitor(outputFile, printToScreen, delimiter);\n+      skipBlocks \u003d false;\n+    } else if (processor.equals(\"FileDistribution\")) {\n+      long maxSize \u003d Long.parseLong(cmd.getOptionValue(\"maxSize\", \"0\"));\n+      int step \u003d Integer.parseInt(cmd.getOptionValue(\"step\", \"0\"));\n+      v \u003d new FileDistributionVisitor(outputFile, maxSize, step);\n+    } else if (processor.equals(\"NameDistribution\")) {\n+      v \u003d new NameDistributionVisitor(outputFile, printToScreen);\n+    } else {\n+      v \u003d new LsImageVisitor(outputFile, printToScreen);\n+      skipBlocks \u003d false;\n+    }\n+    \n+    try {\n+      OfflineImageViewer d \u003d new OfflineImageViewer(inputFile, v, skipBlocks);\n+      d.go();\n+    } catch (EOFException e) {\n+      System.err.println(\"Input file ended unexpectedly.  Exiting\");\n+    } catch(IOException e) {\n+      System.err.println(\"Encountered exception.  Exiting: \" + e.getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws IOException {\n    Options options \u003d buildOptions();\n    if(args.length \u003d\u003d 0) {\n      printUsage();\n      return;\n    }\n    \n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n\n    try {\n      cmd \u003d parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(\"Error parsing command-line options: \");\n      printUsage();\n      return;\n    }\n\n    if(cmd.hasOption(\"h\")) { // print help and exit\n      printUsage();\n      return;\n    }\n\n    boolean skipBlocks \u003d cmd.hasOption(\"skipBlocks\");\n    boolean printToScreen \u003d cmd.hasOption(\"printToScreen\");\n    String inputFile \u003d cmd.getOptionValue(\"i\");\n    String processor \u003d cmd.getOptionValue(\"p\", \"Ls\");\n    String outputFile \u003d cmd.getOptionValue(\"o\");\n    String delimiter \u003d cmd.getOptionValue(\"delimiter\");\n    \n    if( !(delimiter \u003d\u003d null || processor.equals(\"Delimited\")) ) {\n      System.out.println(\"Can only specify -delimiter with Delimited processor\");\n      printUsage();\n      return;\n    }\n    \n    ImageVisitor v;\n    if(processor.equals(\"Indented\")) {\n      v \u003d new IndentedImageVisitor(outputFile, printToScreen);\n    } else if (processor.equals(\"XML\")) {\n      v \u003d new XmlImageVisitor(outputFile, printToScreen);\n    } else if (processor.equals(\"Delimited\")) {\n      v \u003d delimiter \u003d\u003d null ?  \n                 new DelimitedImageVisitor(outputFile, printToScreen) :\n                 new DelimitedImageVisitor(outputFile, printToScreen, delimiter);\n      skipBlocks \u003d false;\n    } else if (processor.equals(\"FileDistribution\")) {\n      long maxSize \u003d Long.parseLong(cmd.getOptionValue(\"maxSize\", \"0\"));\n      int step \u003d Integer.parseInt(cmd.getOptionValue(\"step\", \"0\"));\n      v \u003d new FileDistributionVisitor(outputFile, maxSize, step);\n    } else if (processor.equals(\"NameDistribution\")) {\n      v \u003d new NameDistributionVisitor(outputFile, printToScreen);\n    } else {\n      v \u003d new LsImageVisitor(outputFile, printToScreen);\n      skipBlocks \u003d false;\n    }\n    \n    try {\n      OfflineImageViewer d \u003d new OfflineImageViewer(inputFile, v, skipBlocks);\n      d.go();\n    } catch (EOFException e) {\n      System.err.println(\"Input file ended unexpectedly.  Exiting\");\n    } catch(IOException e) {\n      System.err.println(\"Encountered exception.  Exiting: \" + e.getMessage());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageViewer.java"
    }
  }
}