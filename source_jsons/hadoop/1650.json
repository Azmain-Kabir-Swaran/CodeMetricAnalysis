{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferClient.java",
  "functionName": "getSaslStreams",
  "functionId": "getSaslStreams___addr-InetAddress__underlyingOut-OutputStream__underlyingIn-InputStream__accessToken-Token__BlockTokenIdentifier____secretKey-SecretKey",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
  "functionStartLine": 418,
  "functionEndLine": 448,
  "numCommitsSeen": 18,
  "timeTaken": 4544,
  "changeHistory": [
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
    "626fec652b9f3dae10c9af78fd220b1240f19fc7",
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "3b54223c0f32d42a84436c670d80b791a8e9696d"
  ],
  "changeHistoryShort": {
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": "Ybodychange",
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Yparameterchange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Yfilerename",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ybodychange",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14611. Move handshake secret field from Token to BlockAccessToken. Contributed by Chen Liang.\n",
      "commitDate": "11/07/19 1:23 PM",
      "commitName": "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "03/05/19 10:14 AM",
      "commitNameOld": "1d59cc490cb46e99d1d72fe3bd0c2a396d98f2c8",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 69.13,
      "commitsBetweenForRepo": 498,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n   private IOStreamPair getSaslStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n       Token\u003cBlockTokenIdentifier\u003e accessToken,\n       SecretKey secretKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n \n     // secretKey !\u003d null only happens when this is called by DN\n     // sending to downstream DN. If called from client, this will be null,\n     // as there is no key for client to generate mac instance.\n     // So that, if a different QOP is desired for inter-DN communication,\n     // the check below will use new QOP to create a secret, which includes\n     // the new QOP.\n     if (secretKey !\u003d null) {\n       String newQOP \u003d conf\n           .get(DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY);\n       if (newQOP !\u003d null) {\n         saslProps.put(Sasl.QOP, newQOP);\n       }\n       LOG.debug(\"DataNode overwriting downstream QOP \" +\n           saslProps.get(Sasl.QOP));\n-      byte[] newSecret \u003d SecretManager.createPassword(\n-          saslProps.get(Sasl.QOP).getBytes(Charsets.UTF_8), secretKey);\n-      accessToken.setDNHandshakeSecret(newSecret);\n+      updateToken(accessToken, secretKey, saslProps);\n     }\n     targetQOP \u003d saslProps.get(Sasl.QOP);\n     String userName \u003d buildUserName(accessToken);\n     char[] password \u003d buildClientPassword(accessToken);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n     return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n         saslProps, callbackHandler, accessToken);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken,\n      SecretKey secretKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    // secretKey !\u003d null only happens when this is called by DN\n    // sending to downstream DN. If called from client, this will be null,\n    // as there is no key for client to generate mac instance.\n    // So that, if a different QOP is desired for inter-DN communication,\n    // the check below will use new QOP to create a secret, which includes\n    // the new QOP.\n    if (secretKey !\u003d null) {\n      String newQOP \u003d conf\n          .get(DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY);\n      if (newQOP !\u003d null) {\n        saslProps.put(Sasl.QOP, newQOP);\n      }\n      LOG.debug(\"DataNode overwriting downstream QOP \" +\n          saslProps.get(Sasl.QOP));\n      updateToken(accessToken, secretKey, saslProps);\n    }\n    targetQOP \u003d saslProps.get(Sasl.QOP);\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler, accessToken);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
      "commitDate": "12/04/19 5:37 PM",
      "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
      "commitAuthor": "Chen Liang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
          "commitDate": "12/04/19 5:37 PM",
          "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "31/01/18 10:47 AM",
          "commitNameOld": "37b753656849d0864ed3c8858edf3b85515cbf39",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 436.24,
          "commitsBetweenForRepo": 3917,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,33 @@\n   private IOStreamPair getSaslStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n-      Token\u003cBlockTokenIdentifier\u003e accessToken)\n+      Token\u003cBlockTokenIdentifier\u003e accessToken,\n+      SecretKey secretKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n \n+    // secretKey !\u003d null only happens when this is called by DN\n+    // sending to downstream DN. If called from client, this will be null,\n+    // as there is no key for client to generate mac instance.\n+    // So that, if a different QOP is desired for inter-DN communication,\n+    // the check below will use new QOP to create a secret, which includes\n+    // the new QOP.\n+    if (secretKey !\u003d null) {\n+      String newQOP \u003d conf\n+          .get(DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY);\n+      if (newQOP !\u003d null) {\n+        saslProps.put(Sasl.QOP, newQOP);\n+      }\n+      LOG.debug(\"DataNode overwriting downstream QOP \" +\n+          saslProps.get(Sasl.QOP));\n+      byte[] newSecret \u003d SecretManager.createPassword(\n+          saslProps.get(Sasl.QOP).getBytes(Charsets.UTF_8), secretKey);\n+      accessToken.setDNHandshakeSecret(newSecret);\n+    }\n+    targetQOP \u003d saslProps.get(Sasl.QOP);\n     String userName \u003d buildUserName(accessToken);\n     char[] password \u003d buildClientPassword(accessToken);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n     return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n-        saslProps, callbackHandler);\n+        saslProps, callbackHandler, accessToken);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken,\n      SecretKey secretKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    // secretKey !\u003d null only happens when this is called by DN\n    // sending to downstream DN. If called from client, this will be null,\n    // as there is no key for client to generate mac instance.\n    // So that, if a different QOP is desired for inter-DN communication,\n    // the check below will use new QOP to create a secret, which includes\n    // the new QOP.\n    if (secretKey !\u003d null) {\n      String newQOP \u003d conf\n          .get(DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY);\n      if (newQOP !\u003d null) {\n        saslProps.put(Sasl.QOP, newQOP);\n      }\n      LOG.debug(\"DataNode overwriting downstream QOP \" +\n          saslProps.get(Sasl.QOP));\n      byte[] newSecret \u003d SecretManager.createPassword(\n          saslProps.get(Sasl.QOP).getBytes(Charsets.UTF_8), secretKey);\n      accessToken.setDNHandshakeSecret(newSecret);\n    }\n    targetQOP \u003d saslProps.get(Sasl.QOP);\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler, accessToken);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {
            "oldValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, accessToken-Token\u003cBlockTokenIdentifier\u003e]",
            "newValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, accessToken-Token\u003cBlockTokenIdentifier\u003e, secretKey-SecretKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
          "commitDate": "12/04/19 5:37 PM",
          "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "31/01/18 10:47 AM",
          "commitNameOld": "37b753656849d0864ed3c8858edf3b85515cbf39",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 436.24,
          "commitsBetweenForRepo": 3917,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,33 @@\n   private IOStreamPair getSaslStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n-      Token\u003cBlockTokenIdentifier\u003e accessToken)\n+      Token\u003cBlockTokenIdentifier\u003e accessToken,\n+      SecretKey secretKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n \n+    // secretKey !\u003d null only happens when this is called by DN\n+    // sending to downstream DN. If called from client, this will be null,\n+    // as there is no key for client to generate mac instance.\n+    // So that, if a different QOP is desired for inter-DN communication,\n+    // the check below will use new QOP to create a secret, which includes\n+    // the new QOP.\n+    if (secretKey !\u003d null) {\n+      String newQOP \u003d conf\n+          .get(DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY);\n+      if (newQOP !\u003d null) {\n+        saslProps.put(Sasl.QOP, newQOP);\n+      }\n+      LOG.debug(\"DataNode overwriting downstream QOP \" +\n+          saslProps.get(Sasl.QOP));\n+      byte[] newSecret \u003d SecretManager.createPassword(\n+          saslProps.get(Sasl.QOP).getBytes(Charsets.UTF_8), secretKey);\n+      accessToken.setDNHandshakeSecret(newSecret);\n+    }\n+    targetQOP \u003d saslProps.get(Sasl.QOP);\n     String userName \u003d buildUserName(accessToken);\n     char[] password \u003d buildClientPassword(accessToken);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n     return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n-        saslProps, callbackHandler);\n+        saslProps, callbackHandler, accessToken);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken,\n      SecretKey secretKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    // secretKey !\u003d null only happens when this is called by DN\n    // sending to downstream DN. If called from client, this will be null,\n    // as there is no key for client to generate mac instance.\n    // So that, if a different QOP is desired for inter-DN communication,\n    // the check below will use new QOP to create a secret, which includes\n    // the new QOP.\n    if (secretKey !\u003d null) {\n      String newQOP \u003d conf\n          .get(DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY);\n      if (newQOP !\u003d null) {\n        saslProps.put(Sasl.QOP, newQOP);\n      }\n      LOG.debug(\"DataNode overwriting downstream QOP \" +\n          saslProps.get(Sasl.QOP));\n      byte[] newSecret \u003d SecretManager.createPassword(\n          saslProps.get(Sasl.QOP).getBytes(Charsets.UTF_8), secretKey);\n      accessToken.setDNHandshakeSecret(newSecret);\n    }\n    targetQOP \u003d saslProps.get(Sasl.QOP);\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler, accessToken);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "24/02/16 12:11 PM",
      "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
      "commitAuthor": "cnauroth",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 144.06,
      "commitsBetweenForRepo": 987,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private IOStreamPair getSaslStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n       Token\u003cBlockTokenIdentifier\u003e accessToken)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n \n     String userName \u003d buildUserName(accessToken);\n     char[] password \u003d buildClientPassword(accessToken);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n-    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n-        callbackHandler);\n+    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n+        saslProps, callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 3:32 PM",
      "commitNameOld": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 29.84,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private IOStreamPair getSaslStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n-      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n+      Token\u003cBlockTokenIdentifier\u003e accessToken)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n \n     String userName \u003d buildUserName(accessToken);\n     char[] password \u003d buildClientPassword(accessToken);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n-      password);\n+        password);\n     return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n-      callbackHandler);\n+        callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {
        "oldValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, accessToken-Token\u003cBlockTokenIdentifier\u003e, datanodeId-DatanodeID]",
        "newValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, accessToken-Token\u003cBlockTokenIdentifier\u003e]"
      }
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 1:26 PM",
      "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n      password);\n    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n      callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
      }
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "14/07/14 11:10 AM",
      "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 67.43,
      "commitsBetweenForRepo": 657,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,13 @@\n   private IOStreamPair getSaslStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n       Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n       throws IOException {\n-    if (saslPropsResolver \u003d\u003d null) {\n-      throw new IOException(String.format(\"Cannot create a secured \" +\n-        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n-        \"protection is defined in configuration property %s.\",\n-        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n-    }\n     Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n \n     String userName \u003d buildUserName(accessToken);\n     char[] password \u003d buildClientPassword(accessToken);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n       password);\n     return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n       callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n      password);\n    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n      callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,19 @@\n+  private IOStreamPair getSaslStreams(InetAddress addr,\n+      OutputStream underlyingOut, InputStream underlyingIn,\n+      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n+      throws IOException {\n+    if (saslPropsResolver \u003d\u003d null) {\n+      throw new IOException(String.format(\"Cannot create a secured \" +\n+        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n+        \"protection is defined in configuration property %s.\",\n+        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n+    }\n+    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n+\n+    String userName \u003d buildUserName(accessToken);\n+    char[] password \u003d buildClientPassword(accessToken);\n+    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n+      password);\n+    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n+      callbackHandler);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getSaslStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (saslPropsResolver \u003d\u003d null) {\n      throw new IOException(String.format(\"Cannot create a secured \" +\n        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n        \"protection is defined in configuration property %s.\",\n        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n    }\n    Map\u003cString, String\u003e saslProps \u003d saslPropsResolver.getClientProperties(addr);\n\n    String userName \u003d buildUserName(accessToken);\n    char[] password \u003d buildClientPassword(accessToken);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n      password);\n    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n      callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
    }
  }
}