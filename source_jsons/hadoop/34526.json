{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerImpl.java",
  "functionName": "doRelaunch",
  "functionId": "doRelaunch___container-ContainerImpl(modifiers-final)__remainingRetryAttempts-int__retryInterval-int(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java",
  "functionStartLine": 1673,
  "functionEndLine": 1704,
  "numCommitsSeen": 103,
  "timeTaken": 2543,
  "changeHistory": [
    "47ad98b2e1b4e9ad9304aca4d452da428778e7ee",
    "3552c2b99dff4f21489ff284f9dcba40e897a1e5"
  ],
  "changeHistoryShort": {
    "47ad98b2e1b4e9ad9304aca4d452da428778e7ee": "Ybodychange",
    "3552c2b99dff4f21489ff284f9dcba40e897a1e5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "47ad98b2e1b4e9ad9304aca4d452da428778e7ee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8910. Fixed misleading log statement when container max retries is infinite.\n           Contributed by Chandni Singh\n",
      "commitDate": "19/10/18 10:49 AM",
      "commitName": "47ad98b2e1b4e9ad9304aca4d452da428778e7ee",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "27/09/18 12:31 PM",
      "commitNameOld": "b237a0dd44ab285941983648d7ef26b99b30d624",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 21.93,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n     private void doRelaunch(final ContainerImpl container,\n         int remainingRetryAttempts, final int retryInterval) {\n-      LOG.info(\"Relaunching Container \" + container.getContainerId()\n-          + \". Remaining retry attempts(after relaunch) : \"\n-          + remainingRetryAttempts + \". Interval between retries is \"\n-          + retryInterval + \"ms\");\n+      if (remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n+        LOG.info(\"Relaunching Container {}. \" +\n+                \"retry interval {} ms\", container.getContainerId(),\n+            retryInterval);\n+      } else {\n+        LOG.info(\"Relaunching Container {}. \" +\n+                \"remaining retry attempts(after relaunch) {}, \" +\n+                \"retry interval {} ms\", container.getContainerId(),\n+            remainingRetryAttempts, retryInterval);\n+      }\n+\n       container.wasLaunched  \u003d false;\n       container.metrics.endRunningContainer();\n       if (retryInterval \u003d\u003d 0) {\n         container.sendRelaunchEvent();\n       } else {\n         // wait for some time, then send launch event\n         new Thread() {\n           @Override\n           public void run() {\n             try {\n               Thread.sleep(retryInterval);\n               container.sendRelaunchEvent();\n             } catch (InterruptedException e) {\n               return;\n             }\n           }\n         }.start();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doRelaunch(final ContainerImpl container,\n        int remainingRetryAttempts, final int retryInterval) {\n      if (remainingRetryAttempts \u003d\u003d ContainerRetryContext.RETRY_FOREVER) {\n        LOG.info(\"Relaunching Container {}. \" +\n                \"retry interval {} ms\", container.getContainerId(),\n            retryInterval);\n      } else {\n        LOG.info(\"Relaunching Container {}. \" +\n                \"remaining retry attempts(after relaunch) {}, \" +\n                \"retry interval {} ms\", container.getContainerId(),\n            remainingRetryAttempts, retryInterval);\n      }\n\n      container.wasLaunched  \u003d false;\n      container.metrics.endRunningContainer();\n      if (retryInterval \u003d\u003d 0) {\n        container.sendRelaunchEvent();\n      } else {\n        // wait for some time, then send launch event\n        new Thread() {\n          @Override\n          public void run() {\n            try {\n              Thread.sleep(retryInterval);\n              container.sendRelaunchEvent();\n            } catch (InterruptedException e) {\n              return;\n            }\n          }\n        }.start();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java",
      "extendedDetails": {}
    },
    "3552c2b99dff4f21489ff284f9dcba40e897a1e5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5637. Changes in NodeManager to support Container rollback and commit. (asuresh)\n",
      "commitDate": "18/09/16 10:55 AM",
      "commitName": "3552c2b99dff4f21489ff284f9dcba40e897a1e5",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,25 @@\n+    private void doRelaunch(final ContainerImpl container,\n+        int remainingRetryAttempts, final int retryInterval) {\n+      LOG.info(\"Relaunching Container \" + container.getContainerId()\n+          + \". Remaining retry attempts(after relaunch) : \"\n+          + remainingRetryAttempts + \". Interval between retries is \"\n+          + retryInterval + \"ms\");\n+      container.wasLaunched  \u003d false;\n+      container.metrics.endRunningContainer();\n+      if (retryInterval \u003d\u003d 0) {\n+        container.sendRelaunchEvent();\n+      } else {\n+        // wait for some time, then send launch event\n+        new Thread() {\n+          @Override\n+          public void run() {\n+            try {\n+              Thread.sleep(retryInterval);\n+              container.sendRelaunchEvent();\n+            } catch (InterruptedException e) {\n+              return;\n+            }\n+          }\n+        }.start();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void doRelaunch(final ContainerImpl container,\n        int remainingRetryAttempts, final int retryInterval) {\n      LOG.info(\"Relaunching Container \" + container.getContainerId()\n          + \". Remaining retry attempts(after relaunch) : \"\n          + remainingRetryAttempts + \". Interval between retries is \"\n          + retryInterval + \"ms\");\n      container.wasLaunched  \u003d false;\n      container.metrics.endRunningContainer();\n      if (retryInterval \u003d\u003d 0) {\n        container.sendRelaunchEvent();\n      } else {\n        // wait for some time, then send launch event\n        new Thread() {\n          @Override\n          public void run() {\n            try {\n              Thread.sleep(retryInterval);\n              container.sendRelaunchEvent();\n            } catch (InterruptedException e) {\n              return;\n            }\n          }\n        }.start();\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/container/ContainerImpl.java"
    }
  }
}