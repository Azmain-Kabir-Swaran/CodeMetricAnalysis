{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuditReplayThread.java",
  "functionName": "drainCounters",
  "functionId": "drainCounters___context-Mapper.Context",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/audit/AuditReplayThread.java",
  "functionStartLine": 117,
  "functionEndLine": 126,
  "numCommitsSeen": 2,
  "timeTaken": 386,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,10 @@\n+  void drainCounters(Mapper.Context context) {\n+    for (Map.Entry\u003cREPLAYCOUNTERS, Counter\u003e ent : replayCountersMap\n+        .entrySet()) {\n+      context.getCounter(ent.getKey()).increment(ent.getValue().getValue());\n+    }\n+    for (Map.Entry\u003cString, Counter\u003e ent : individualCommandsMap.entrySet()) {\n+      context.getCounter(INDIVIDUAL_COMMANDS_COUNTER_GROUP, ent.getKey())\n+          .increment(ent.getValue().getValue());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void drainCounters(Mapper.Context context) {\n    for (Map.Entry\u003cREPLAYCOUNTERS, Counter\u003e ent : replayCountersMap\n        .entrySet()) {\n      context.getCounter(ent.getKey()).increment(ent.getValue().getValue());\n    }\n    for (Map.Entry\u003cString, Counter\u003e ent : individualCommandsMap.entrySet()) {\n      context.getCounter(INDIVIDUAL_COMMANDS_COUNTER_GROUP, ent.getKey())\n          .increment(ent.getValue().getValue());\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/audit/AuditReplayThread.java"
    }
  }
}