{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___configuration-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 669,
  "functionEndLine": 885,
  "numCommitsSeen": 192,
  "timeTaken": 15133,
  "changeHistory": [
    "e966edd025332394701fe0d2cfa0d76731183aaf",
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55",
    "c2288ac45b748b4119442c46147ccc324926c340",
    "2f7712be09d5b68978547f95b1be2352cdd46266",
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35",
    "d4e63ccca0763b452e4a0169dd932b3f32066281",
    "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2",
    "1efb2b6f250022f41fe5911c1bb3028ec15c5447",
    "801c0988b5ad1eff1e896a2635c2937721c96b04",
    "a63d19d36520fa55bf523483f14329756f6eadd3",
    "218588be773123404af4fd26eed5c9e3625feaa7",
    "94a24567d65469091c8b521987dc2003d0327159",
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
    "dd43b895c2e50fa97cb7327be77509b87dad1823",
    "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94",
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081",
    "1ff6833bbacf5c4eeaff5e70553ac083a691bb21",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1",
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
    "5e3d9a477b5a7f8978a93d99fc0b4e8869193ad0",
    "4beff013546dbc29c004a1bad1b019dc9d2b751f",
    "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b",
    "65f395226ba6cc3750a268a308e288b916f8df1e",
    "db9304788187c700647c4d84caeb3b5ad6d868d8",
    "3ae716fa696b87e849dae40225dc59fb5ed114cb",
    "cfee02b3bdd1117370200c9d8ce216676cff8888",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
    "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b",
    "395275af8622c780b9071c243422b0780e096202",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "bdd3e2ce4975dda3fc33644dfb330ae7395003de",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "a4ba451802c6c61a0c804809740d46dd76059f25",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
    "c3cc855d27470edca7ca0bdc0aa8907b544b636e",
    "d841a0f47461af485d6c8320b54e761006c619a7",
    "48fb53bc4966acf42851a54df80f54ab27f8ac70",
    "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
    "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8"
  ],
  "changeHistoryShort": {
    "e966edd025332394701fe0d2cfa0d76731183aaf": "Ybodychange",
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": "Ybodychange",
    "c2288ac45b748b4119442c46147ccc324926c340": "Ybodychange",
    "2f7712be09d5b68978547f95b1be2352cdd46266": "Ybodychange",
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Ybodychange",
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35": "Ybodychange",
    "d4e63ccca0763b452e4a0169dd932b3f32066281": "Ybodychange",
    "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2": "Ybodychange",
    "1efb2b6f250022f41fe5911c1bb3028ec15c5447": "Ybodychange",
    "801c0988b5ad1eff1e896a2635c2937721c96b04": "Ybodychange",
    "a63d19d36520fa55bf523483f14329756f6eadd3": "Ybodychange",
    "218588be773123404af4fd26eed5c9e3625feaa7": "Ybodychange",
    "94a24567d65469091c8b521987dc2003d0327159": "Ybodychange",
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Ybodychange",
    "dd43b895c2e50fa97cb7327be77509b87dad1823": "Ybodychange",
    "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94": "Ybodychange",
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081": "Ybodychange",
    "1ff6833bbacf5c4eeaff5e70553ac083a691bb21": "Ybodychange",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": "Ybodychange",
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4": "Ybodychange",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Ybodychange",
    "5e3d9a477b5a7f8978a93d99fc0b4e8869193ad0": "Ybodychange",
    "4beff013546dbc29c004a1bad1b019dc9d2b751f": "Ybodychange",
    "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b": "Ybodychange",
    "65f395226ba6cc3750a268a308e288b916f8df1e": "Ybodychange",
    "db9304788187c700647c4d84caeb3b5ad6d868d8": "Ybodychange",
    "3ae716fa696b87e849dae40225dc59fb5ed114cb": "Ybodychange",
    "cfee02b3bdd1117370200c9d8ce216676cff8888": "Ybodychange",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": "Ybodychange",
    "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b": "Ybodychange",
    "395275af8622c780b9071c243422b0780e096202": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ybodychange",
    "bdd3e2ce4975dda3fc33644dfb330ae7395003de": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Ybodychange",
    "a4ba451802c6c61a0c804809740d46dd76059f25": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Ybodychange",
    "c3cc855d27470edca7ca0bdc0aa8907b544b636e": "Ybodychange",
    "d841a0f47461af485d6c8320b54e761006c619a7": "Ybodychange",
    "48fb53bc4966acf42851a54df80f54ab27f8ac70": "Ybodychange",
    "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8": "Ybodychange",
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc": "Ybodychange",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": "Ybodychange",
    "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e966edd025332394701fe0d2cfa0d76731183aaf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9644. First RMContext object is always leaked during switch over. Contributed by Bibin A Chundatt.\n",
      "commitDate": "01/07/19 11:48 PM",
      "commitName": "e966edd025332394701fe0d2cfa0d76731183aaf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 108.31,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,217 +1,217 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       NodeAttributesManager nam \u003d createNodeAttributesManager();\n       addService(nam);\n       rmContext.setNodeAttributesManager(nam);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n       MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n           createMultiNodeSortingManager();\n       multiNodeSortingManager.setRMContext(rmContext);\n       addService(multiNodeSortingManager);\n       rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       proxyCAManager \u003d new ProxyCAManager(new ProxyCA(), rmContext);\n       addService(proxyCAManager);\n       rmContext.setProxyCAManager(proxyCAManager);\n \n-      new RMNMInfo(rmContext, scheduler);\n+      rmnmInfo \u003d new RMNMInfo(rmContext, scheduler);\n \n       if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n           false)) {\n         SystemServiceManager systemServiceManager \u003d createServiceManager();\n         addIfService(systemServiceManager);\n       }\n \n       // Add volume manager to RM context when it is necessary\n       String[] amsProcessorList \u003d conf.getStrings(\n           YarnConfiguration.RM_APPLICATION_MASTER_SERVICE_PROCESSORS);\n       if (amsProcessorList !\u003d null\u0026\u0026 Arrays.stream(amsProcessorList)\n           .anyMatch(s -\u003e VolumeAMSProcessor.class.getName().equals(s))) {\n         VolumeManager volumeManager \u003d new VolumeManagerImpl();\n         rmContext.setVolumeManager(volumeManager);\n         addIfService(volumeManager);\n       }\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      NodeAttributesManager nam \u003d createNodeAttributesManager();\n      addService(nam);\n      rmContext.setNodeAttributesManager(nam);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n          createMultiNodeSortingManager();\n      multiNodeSortingManager.setRMContext(rmContext);\n      addService(multiNodeSortingManager);\n      rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      createAndRegisterOpportunisticDispatcher(masterService);\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      proxyCAManager \u003d new ProxyCAManager(new ProxyCA(), rmContext);\n      addService(proxyCAManager);\n      rmContext.setProxyCAManager(proxyCAManager);\n\n      rmnmInfo \u003d new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      // Add volume manager to RM context when it is necessary\n      String[] amsProcessorList \u003d conf.getStrings(\n          YarnConfiguration.RM_APPLICATION_MASTER_SERVICE_PROCESSORS);\n      if (amsProcessorList !\u003d null\u0026\u0026 Arrays.stream(amsProcessorList)\n          .anyMatch(s -\u003e VolumeAMSProcessor.class.getName().equals(s))) {\n        VolumeManager volumeManager \u003d new VolumeManagerImpl();\n        rmContext.setVolumeManager(volumeManager);\n        addIfService(volumeManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8902. [CSI] Add volume manager that manages CSI volume lifecycle. Contributed by Weiwei Yang.\n",
      "commitDate": "11/11/18 10:27 PM",
      "commitName": "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/10/18 9:24 PM",
      "commitNameOld": "285d2c07531a92067368ac4bdd21d309e6e81bc4",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 24.09,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,207 +1,217 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       NodeAttributesManager nam \u003d createNodeAttributesManager();\n       addService(nam);\n       rmContext.setNodeAttributesManager(nam);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n       MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n           createMultiNodeSortingManager();\n       multiNodeSortingManager.setRMContext(rmContext);\n       addService(multiNodeSortingManager);\n       rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       proxyCAManager \u003d new ProxyCAManager(new ProxyCA(), rmContext);\n       addService(proxyCAManager);\n       rmContext.setProxyCAManager(proxyCAManager);\n \n       new RMNMInfo(rmContext, scheduler);\n \n       if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n           false)) {\n         SystemServiceManager systemServiceManager \u003d createServiceManager();\n         addIfService(systemServiceManager);\n       }\n \n+      // Add volume manager to RM context when it is necessary\n+      String[] amsProcessorList \u003d conf.getStrings(\n+          YarnConfiguration.RM_APPLICATION_MASTER_SERVICE_PROCESSORS);\n+      if (amsProcessorList !\u003d null\u0026\u0026 Arrays.stream(amsProcessorList)\n+          .anyMatch(s -\u003e VolumeAMSProcessor.class.getName().equals(s))) {\n+        VolumeManager volumeManager \u003d new VolumeManagerImpl();\n+        rmContext.setVolumeManager(volumeManager);\n+        addIfService(volumeManager);\n+      }\n+\n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      NodeAttributesManager nam \u003d createNodeAttributesManager();\n      addService(nam);\n      rmContext.setNodeAttributesManager(nam);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n          createMultiNodeSortingManager();\n      multiNodeSortingManager.setRMContext(rmContext);\n      addService(multiNodeSortingManager);\n      rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      createAndRegisterOpportunisticDispatcher(masterService);\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      proxyCAManager \u003d new ProxyCAManager(new ProxyCA(), rmContext);\n      addService(proxyCAManager);\n      rmContext.setProxyCAManager(proxyCAManager);\n\n      new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      // Add volume manager to RM context when it is necessary\n      String[] amsProcessorList \u003d conf.getStrings(\n          YarnConfiguration.RM_APPLICATION_MASTER_SERVICE_PROCESSORS);\n      if (amsProcessorList !\u003d null\u0026\u0026 Arrays.stream(amsProcessorList)\n          .anyMatch(s -\u003e VolumeAMSProcessor.class.getName().equals(s))) {\n        VolumeManager volumeManager \u003d new VolumeManagerImpl();\n        rmContext.setVolumeManager(volumeManager);\n        addIfService(volumeManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 34.42,
      "commitsBetweenForRepo": 369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,203 +1,207 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       NodeAttributesManager nam \u003d createNodeAttributesManager();\n       addService(nam);\n       rmContext.setNodeAttributesManager(nam);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n       MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n           createMultiNodeSortingManager();\n       multiNodeSortingManager.setRMContext(rmContext);\n       addService(multiNodeSortingManager);\n       rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n+      proxyCAManager \u003d new ProxyCAManager(new ProxyCA(), rmContext);\n+      addService(proxyCAManager);\n+      rmContext.setProxyCAManager(proxyCAManager);\n+\n       new RMNMInfo(rmContext, scheduler);\n \n       if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n           false)) {\n         SystemServiceManager systemServiceManager \u003d createServiceManager();\n         addIfService(systemServiceManager);\n       }\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      NodeAttributesManager nam \u003d createNodeAttributesManager();\n      addService(nam);\n      rmContext.setNodeAttributesManager(nam);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n          createMultiNodeSortingManager();\n      multiNodeSortingManager.setRMContext(rmContext);\n      addService(multiNodeSortingManager);\n      rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      createAndRegisterOpportunisticDispatcher(masterService);\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      proxyCAManager \u003d new ProxyCAManager(new ProxyCA(), rmContext);\n      addService(proxyCAManager);\n      rmContext.setProxyCAManager(proxyCAManager);\n\n      new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "2f7712be09d5b68978547f95b1be2352cdd46266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6858. Attribute Manager to store and provide node attributes in RM. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthor": "Sunil G",
      "commitDateOld": "05/09/18 10:50 AM",
      "commitNameOld": "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.69,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,199 +1,203 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n+      NodeAttributesManager nam \u003d createNodeAttributesManager();\n+      addService(nam);\n+      rmContext.setNodeAttributesManager(nam);\n+\n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n       MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n           createMultiNodeSortingManager();\n       multiNodeSortingManager.setRMContext(rmContext);\n       addService(multiNodeSortingManager);\n       rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n           false)) {\n         SystemServiceManager systemServiceManager \u003d createServiceManager();\n         addIfService(systemServiceManager);\n       }\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      NodeAttributesManager nam \u003d createNodeAttributesManager();\n      addService(nam);\n      rmContext.setNodeAttributesManager(nam);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n          createMultiNodeSortingManager();\n      multiNodeSortingManager.setRMContext(rmContext);\n      addService(multiNodeSortingManager);\n      rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      createAndRegisterOpportunisticDispatcher(masterService);\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "14/08/18 5:19 PM",
      "commitNameOld": "363bd16e314490e31758cc82de584e75cd8357cc",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 6.6,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,193 +1,199 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n+      MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n+          createMultiNodeSortingManager();\n+      multiNodeSortingManager.setRMContext(rmContext);\n+      addService(multiNodeSortingManager);\n+      rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n+\n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n           false)) {\n         SystemServiceManager systemServiceManager \u003d createServiceManager();\n         addIfService(systemServiceManager);\n       }\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      MultiNodeSortingManager\u003cSchedulerNode\u003e multiNodeSortingManager \u003d\n          createMultiNodeSortingManager();\n      multiNodeSortingManager.setRMContext(rmContext);\n      addService(multiNodeSortingManager);\n      rmContext.setMultiNodeSortingManager(multiNodeSortingManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      createAndRegisterOpportunisticDispatcher(masterService);\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8606. Opportunistic scheduling does not work post RM failover. Contributed by Bibin A Chundatt.\n",
      "commitDate": "31/07/18 11:47 PM",
      "commitName": "a48a0cc7fd8e7ac1c07b260e6078077824f27c35",
      "commitAuthor": "Sunil G",
      "commitDateOld": "26/06/18 2:34 PM",
      "commitNameOld": "b69ba0f3307a90500aeb0c5db9e582fcda60b501",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 35.38,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,191 +1,193 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n+      createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n+\n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n           false)) {\n         SystemServiceManager systemServiceManager \u003d createServiceManager();\n         addIfService(systemServiceManager);\n       }\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      createAndRegisterOpportunisticDispatcher(masterService);\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "d4e63ccca0763b452e4a0169dd932b3f32066281": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8048. Support auto-spawning of admin configured services during bootstrap of RM (Rohith Sharma K S via wangda)\n\nChange-Id: I2d8d61ccad55e1118009294d7e17822df3cd0fd5\n",
      "commitDate": "06/04/18 9:24 PM",
      "commitName": "d4e63ccca0763b452e4a0169dd932b3f32066281",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/03/18 9:11 AM",
      "commitNameOld": "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 8.51,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,185 +1,191 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n       // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n       ResourceProfilesManager resourceProfilesManager \u003d\n           createResourceProfileManager();\n       resourceProfilesManager.init(conf);\n       rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n+      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n+          false)) {\n+        SystemServiceManager systemServiceManager \u003d createServiceManager();\n+        addIfService(systemServiceManager);\n+      }\n+\n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      if (conf.getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n          false)) {\n        SystemServiceManager systemServiceManager \u003d createServiceManager();\n        addIfService(systemServiceManager);\n      }\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8085. ResourceProfilesManager should be set in RMActiveServiceContext. Contributed by Tao Yang.\n",
      "commitDate": "29/03/18 9:11 AM",
      "commitName": "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "26/03/18 11:16 AM",
      "commitNameOld": "5d381570f83022b411a8740d58486a7f68ab2af6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,179 +1,185 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n       PlacementConstraintManagerService placementConstraintManager \u003d\n           createPlacementConstraintManager();\n       addService(placementConstraintManager);\n       rmContext.setPlacementConstraintManager(placementConstraintManager);\n \n+      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n+      ResourceProfilesManager resourceProfilesManager \u003d\n+          createResourceProfileManager();\n+      resourceProfilesManager.init(conf);\n+      rmContext.setResourceProfilesManager(resourceProfilesManager);\n+\n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n      ResourceProfilesManager resourceProfilesManager \u003d\n          createResourceProfileManager();\n      resourceProfilesManager.init(conf);\n      rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "1efb2b6f250022f41fe5911c1bb3028ec15c5447": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6596. Introduce Placement Constraint Manager module. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "1efb2b6f250022f41fe5911c1bb3028ec15c5447",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,174 +1,179 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       AllocationTagsManager allocationTagsManager \u003d\n           createAllocationTagsManager();\n       rmContext.setAllocationTagsManager(allocationTagsManager);\n \n+      PlacementConstraintManagerService placementConstraintManager \u003d\n+          createPlacementConstraintManager();\n+      addService(placementConstraintManager);\n+      rmContext.setPlacementConstraintManager(placementConstraintManager);\n+\n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      PlacementConstraintManagerService placementConstraintManager \u003d\n          createPlacementConstraintManager();\n      addService(placementConstraintManager);\n      rmContext.setPlacementConstraintManager(placementConstraintManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "801c0988b5ad1eff1e896a2635c2937721c96b04": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7522. Introduce AllocationTagsManager to associate allocation tags to nodes. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "801c0988b5ad1eff1e896a2635c2937721c96b04",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/01/18 7:00 AM",
      "commitNameOld": "3400d0c535aeb151c3f283cc41111b15d66990e5",
      "commitAuthorOld": "Jinjiang Ling",
      "daysBetweenCommits": 1.77,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,170 +1,174 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n+      AllocationTagsManager allocationTagsManager \u003d\n+          createAllocationTagsManager();\n+      rmContext.setAllocationTagsManager(allocationTagsManager);\n+\n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      AllocationTagsManager allocationTagsManager \u003d\n          createAllocationTagsManager();\n      rmContext.setAllocationTagsManager(allocationTagsManager);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a63d19d36520fa55bf523483f14329756f6eadd3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6124. Make SchedulingEditPolicy can be enabled / disabled / updated with RMAdmin -refreshQueues. (Zian Chen via wangda)\n\nChange-Id: Id93656f3af7dcd78cafa94e33663c78d410d43c2\n",
      "commitDate": "30/11/17 3:57 PM",
      "commitName": "a63d19d36520fa55bf523483f14329756f6eadd3",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/11/17 9:28 AM",
      "commitNameOld": "0940e4f692441f16e742666ac925f71a083eab27",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 13.27,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,172 +1,170 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n-      createSchedulerMonitors();\n-\n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "218588be773123404af4fd26eed5c9e3625feaa7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6952. Enable scheduling monitor in FS (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "11/08/17 2:04 PM",
      "commitName": "218588be773123404af4fd26eed5c9e3625feaa7",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "11/08/17 1:58 PM",
      "commitNameOld": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,173 +1,172 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n-      // creating monitors that handle preemption\n-      createPolicyMonitors();\n+      createSchedulerMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       if(HAUtil.isFederationEnabled(conf)) {\n         String cId \u003d YarnConfiguration.getClusterId(conf);\n         if (cId.isEmpty()) {\n           String errMsg \u003d\n               \"Cannot initialize RM as Federation is enabled\"\n                   + \" but cluster id is not configured.\";\n           LOG.error(errMsg);\n           throw new YarnRuntimeException(errMsg);\n         }\n         federationStateStoreService \u003d createFederationStateStoreService();\n         addIfService(federationStateStoreService);\n         LOG.info(\"Initialized Federation membership.\");\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      createSchedulerMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "94a24567d65469091c8b521987dc2003d0327159": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3671. Integrate Federation services with ResourceManager. Contributed by Subru Krishnan\n\n(cherry picked from commit 8573c286e27623155c715a632d56a68f23523c72)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/07/17 11:09 PM",
      "commitNameOld": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 8.76,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,159 +1,173 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n+      if(HAUtil.isFederationEnabled(conf)) {\n+        String cId \u003d YarnConfiguration.getClusterId(conf);\n+        if (cId.isEmpty()) {\n+          String errMsg \u003d\n+              \"Cannot initialize RM as Federation is enabled\"\n+                  + \" but cluster id is not configured.\";\n+          LOG.error(errMsg);\n+          throw new YarnRuntimeException(errMsg);\n+        }\n+        federationStateStoreService \u003d createFederationStateStoreService();\n+        addIfService(federationStateStoreService);\n+        LOG.info(\"Initialized Federation membership.\");\n+      }\n+\n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      if(HAUtil.isFederationEnabled(conf)) {\n        String cId \u003d YarnConfiguration.getClusterId(conf);\n        if (cId.isEmpty()) {\n          String errMsg \u003d\n              \"Cannot initialize RM as Federation is enabled\"\n                  + \" but cluster id is not configured.\";\n          LOG.error(errMsg);\n          throw new YarnRuntimeException(errMsg);\n        }\n        federationStateStoreService \u003d createFederationStateStoreService();\n        addIfService(federationStateStoreService);\n        LOG.info(\"Initialized Federation membership.\");\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "commitDateOld": "31/05/17 8:18 AM",
      "commitNameOld": "cbfed0e82f57e96b8d5309e0613057963840554f",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 53.62,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,162 +1,159 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n-      activeServiceContext \u003d new RMActiveServiceContext();\n-      rmContext.setActiveServiceContext(activeServiceContext);\n-\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "dd43b895c2e50fa97cb7327be77509b87dad1823": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6202. Configuration item Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY is disregarded\n(Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "19/04/17 11:44 AM",
      "commitName": "dd43b895c2e50fa97cb7327be77509b87dad1823",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "21/03/17 2:15 PM",
      "commitNameOld": "0a05c5c5989edeba2cffe16e80350245778cefce",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 28.9,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,163 +1,162 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       standByTransitionRunnable \u003d new StandByTransitionRunnable();\n \n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n-      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6061. Add an UncaughtExceptionHandler for critical threads in RM. (Yufei Gu via kasha)\n",
      "commitDate": "14/02/17 1:39 PM",
      "commitName": "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/01/17 5:10 PM",
      "commitNameOld": "a6b06f71797ad1ed9edbcef279bcf7d9e569f955",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 33.85,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,161 +1,163 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n+      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n+\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n       addService(rmAppLifetimeMonitor);\n       rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      standByTransitionRunnable \u003d new StandByTransitionRunnable();\n\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "2ae5a3a5bf5ea355370469a53eeccff0b5220081": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4205. Add a service for monitoring application life time out. Contributed by Rohith Sharma K S\n",
      "commitDate": "29/09/16 7:00 AM",
      "commitName": "2ae5a3a5bf5ea355370469a53eeccff0b5220081",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/09/16 2:56 PM",
      "commitNameOld": "bcb2528a51c33e4caff8d744c5e14c1accfc47d0",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,157 +1,161 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n+      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n+      addService(rmAppLifetimeMonitor);\n+      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n+\n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMAppLifetimeMonitor rmAppLifetimeMonitor \u003d createRMAppLifetimeMonitor();\n      addService(rmAppLifetimeMonitor);\n      rmContext.setRMAppLifetimeMonitor(rmAppLifetimeMonitor);\n\n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "1ff6833bbacf5c4eeaff5e70553ac083a691bb21": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5243. fix several rebase and other miscellaneous issues before merge. (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "1ff6833bbacf5c4eeaff5e70553ac083a691bb21",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,169 +1,157 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n-      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n-          createRMApplicationHistoryWriter();\n-      addService(rmApplicationHistoryWriter);\n-      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n-\n-      if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n-        RMTimelineCollectorManager timelineCollectorManager \u003d\n-            createRMTimelineCollectorManager();\n-        addService(timelineCollectorManager);\n-        rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n-      }\n-\n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4356. Ensure the timeline service v.2 is disabled cleanly and has no\nimpact when it\u0027s turned off. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,167 +1,169 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n-      RMTimelineCollectorManager timelineCollectorManager \u003d\n-          createRMTimelineCollectorManager();\n-      addService(timelineCollectorManager);\n-      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n+      if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n+        RMTimelineCollectorManager timelineCollectorManager \u003d\n+            createRMTimelineCollectorManager();\n+        addService(timelineCollectorManager);\n+        rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n+      }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\n        RMTimelineCollectorManager timelineCollectorManager \u003d\n            createRMTimelineCollectorManager();\n        addService(timelineCollectorManager);\n        rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4129. Refactor the SystemMetricPublisher in RM to better support newer events (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "f3c661e8dddc80726f1084ff27815d179540889c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,171 +1,167 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n-      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n-      addService(systemMetricsPublisher);\n-      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n-\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "5e3d9a477b5a7f8978a93d99fc0b4e8869193ad0",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,171 +1,171 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n-      RMTimelineCollector timelineCollector \u003d\n-          createRMTimelineCollector();\n-      addService(timelineCollector);\n-      rmContext.setRMTimelineCollector(timelineCollector);\n+      RMTimelineCollectorManager timelineCollectorManager \u003d\n+          createRMTimelineCollectorManager();\n+      addService(timelineCollectorManager);\n+      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5e3d9a477b5a7f8978a93d99fc0b4e8869193ad0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3034. Implement RM starting its timeline collector. Contributed by Naganarasimha G R\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5e3d9a477b5a7f8978a93d99fc0b4e8869193ad0",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 25.74,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,157 +1,171 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n+      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n+          createRMApplicationHistoryWriter();\n+      addService(rmApplicationHistoryWriter);\n+      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n+\n+      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n+      addService(systemMetricsPublisher);\n+      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n+\n+      RMTimelineCollector timelineCollector \u003d\n+          createRMTimelineCollector();\n+      addService(timelineCollector);\n+      rmContext.setRMTimelineCollector(timelineCollector);\n+\n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n       if (fromActive) {\n         JvmMetrics.reattach(ms, jvmMetrics);\n         UserGroupInformation.reattachMetrics();\n       } else {\n         jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       }\n \n       JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      RMTimelineCollector timelineCollector \u003d\n          createRMTimelineCollector();\n      addService(timelineCollector);\n      rmContext.setRMTimelineCollector(timelineCollector);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "4beff013546dbc29c004a1bad1b019dc9d2b751f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4983. JVM and UGI metrics disappear after RM transitioned to standby mode\n",
      "commitDate": "26/04/16 9:00 PM",
      "commitName": "4beff013546dbc29c004a1bad1b019dc9d2b751f",
      "commitAuthor": "Jian He",
      "commitDateOld": "26/04/16 8:12 PM",
      "commitNameOld": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,151 +1,157 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n             .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n-      DefaultMetricsSystem.initialize(\"ResourceManager\");\n-      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n-      pauseMonitor \u003d new JvmPauseMonitor();\n+      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n+      if (fromActive) {\n+        JvmMetrics.reattach(ms, jvmMetrics);\n+        UserGroupInformation.reattachMetrics();\n+      } else {\n+        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n+      }\n+\n+      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n-      jm.setPauseMonitor(pauseMonitor);\n+      jvmMetrics.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n      if (fromActive) {\n        JvmMetrics.reattach(ms, jvmMetrics);\n        UserGroupInformation.reattachMetrics();\n      } else {\n        jvmMetrics \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      }\n\n      JvmPauseMonitor pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jvmMetrics.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4559. Make leader elector and zk store share the same curator\nclient. Contributed by Jian He\n",
      "commitDate": "20/01/16 2:48 PM",
      "commitName": "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b",
      "commitAuthor": "Xuan",
      "commitDateOld": "11/01/16 10:12 PM",
      "commitNameOld": "da1e3e3c571e7cc76adff198bf433e3f23e8b683",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 8.69,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,154 +1,151 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n-      boolean isRecoveryEnabled \u003d conf.getBoolean(\n-          YarnConfiguration.RECOVERY_ENABLED,\n+      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n-      if (isRecoveryEnabled) {\n-        recoveryEnabled \u003d true;\n+      if (recoveryEnabled) {\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n-          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n+            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n-        recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n+        rmStore.setResourceManager(rm);\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n-        rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       pauseMonitor \u003d new JvmPauseMonitor();\n       addService(pauseMonitor);\n       jm.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      recoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (recoveryEnabled) {\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.setResourceManager(rm);\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jm.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "65f395226ba6cc3750a268a308e288b916f8df1e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12321. Make JvmPauseMonitor an AbstractService. (Sunil G via Stevel) [includes HDFS-8947 MAPREDUCE-6462 and YARN-4072]\n",
      "commitDate": "06/12/15 9:43 AM",
      "commitName": "65f395226ba6cc3750a268a308e288b916f8df1e",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/10/15 8:34 AM",
      "commitNameOld": "f8adeb712dc834c27cec15c04a986f2f635aba83",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 44.09,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,153 +1,154 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n           createRMDelegatedNodeLabelsUpdater();\n       if (delegatedNodeLabelsUpdater !\u003d null) {\n         addService(delegatedNodeLabelsUpdater);\n         rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n       }\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n-      pauseMonitor \u003d new JvmPauseMonitor(conf);\n+      pauseMonitor \u003d new JvmPauseMonitor();\n+      addService(pauseMonitor);\n       jm.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      pauseMonitor \u003d new JvmPauseMonitor();\n      addService(pauseMonitor);\n      jm.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "db9304788187c700647c4d84caeb3b5ad6d868d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3964. Support NodeLabelsProvider at Resource Manager side.\nContributed by Dian Fu.\n",
      "commitDate": "10/10/15 10:51 PM",
      "commitName": "db9304788187c700647c4d84caeb3b5ad6d868d8",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "20/09/15 9:29 PM",
      "commitNameOld": "c9cb6a5960ad335a3ee93a6ee219eae5aad372f9",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 20.06,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,146 +1,153 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n+      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n+          createRMDelegatedNodeLabelsUpdater();\n+      if (delegatedNodeLabelsUpdater !\u003d null) {\n+        addService(delegatedNodeLabelsUpdater);\n+        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n+      }\n+\n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       pauseMonitor \u003d new JvmPauseMonitor(conf);\n       jm.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater \u003d\n          createRMDelegatedNodeLabelsUpdater();\n      if (delegatedNodeLabelsUpdater !\u003d null) {\n        addService(delegatedNodeLabelsUpdater);\n        rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);\n      }\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      pauseMonitor \u003d new JvmPauseMonitor(conf);\n      jm.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "3ae716fa696b87e849dae40225dc59fb5ed114cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3999. RM hangs on draing events. Contributed by Jian He\n",
      "commitDate": "11/08/15 6:25 PM",
      "commitName": "3ae716fa696b87e849dae40225dc59fb5ed114cb",
      "commitAuthor": "Xuan",
      "commitDateOld": "06/08/15 6:49 AM",
      "commitNameOld": "cfee02b3bdd1117370200c9d8ce216676cff8888",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,156 +1,146 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n-\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n-      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n-          createRMApplicationHistoryWriter();\n-      addService(rmApplicationHistoryWriter);\n-      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n-\n-      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n-      addService(systemMetricsPublisher);\n-      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n-\n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n       pauseMonitor \u003d new JvmPauseMonitor(conf);\n       jm.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      pauseMonitor \u003d new JvmPauseMonitor(conf);\n      jm.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cfee02b3bdd1117370200c9d8ce216676cff8888": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4019. Add JvmPauseMonitor to ResourceManager and NodeManager. Contributed by Robert Kanter.\n",
      "commitDate": "06/08/15 6:49 AM",
      "commitName": "cfee02b3bdd1117370200c9d8ce216676cff8888",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/07/15 5:32 PM",
      "commitNameOld": "0e4b06690ff51fbde3ab26f68fde8aeb32af69af",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 35.55,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,154 +1,156 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n-      JvmMetrics.initSingleton(\"ResourceManager\", null);\n+      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n+      pauseMonitor \u003d new JvmPauseMonitor(conf);\n+      jm.setPauseMonitor(pauseMonitor);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics jm \u003d JvmMetrics.initSingleton(\"ResourceManager\", null);\n      pauseMonitor \u003d new JvmPauseMonitor(conf);\n      jm.setPauseMonitor(pauseMonitor);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2920. Changed CapacityScheduler to kill containers on nodes where node labels are changed. Contributed by  Wangda Tan\n",
      "commitDate": "22/12/14 4:51 PM",
      "commitName": "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/12/14 12:53 PM",
      "commitNameOld": "258623ff8bb1a1057ae3501d4f20982d5a59ea34",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.17,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,153 +1,154 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       activeServiceContext \u003d new RMActiveServiceContext();\n       rmContext.setActiveServiceContext(activeServiceContext);\n \n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n+      nlm.setRMContext(rmContext);\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      nlm.setRMContext(rmContext);\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks\n",
      "commitDate": "19/11/14 7:48 PM",
      "commitName": "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/11/14 7:43 PM",
      "commitNameOld": "df36edf751202db00d8f43103d7120ec56d70a04",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.0,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,150 +1,153 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n+      activeServiceContext \u003d new RMActiveServiceContext();\n+      rmContext.setActiveServiceContext(activeServiceContext);\n+\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      activeServiceContext \u003d new RMActiveServiceContext();\n      rmContext.setActiveServiceContext(activeServiceContext);\n\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "395275af8622c780b9071c243422b0780e096202": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2579. Fixed a deadlock issue when EmbeddedElectorService and FatalEventDispatcher try to transition RM to StandBy at the same time. Contributed by Rohith Sharmaks\n",
      "commitDate": "05/11/14 4:59 PM",
      "commitName": "395275af8622c780b9071c243422b0780e096202",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/11/14 3:30 PM",
      "commitNameOld": "834e931d8efe4d806347b266e7e62929ce05389b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,149 +1,150 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n       \n       RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n       addService(nlm);\n       rmContext.setNodeLabelManager(nlm);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n+        rmStore.setResourceManager(rm);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmStore.setResourceManager(rm);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/10/14 9:50 PM",
      "commitNameOld": "1220bb72d452521c6f09cebe1dd77341054ee9dd",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,145 +1,149 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n+      \n+      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n+      addService(nlm);\n+      rmContext.setNodeLabelManager(nlm);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // Initialize the Reservation system\n       if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n         reservationSystem \u003d createReservationSystem();\n         if (reservationSystem !\u003d null) {\n           reservationSystem.setRMContext(rmContext);\n           addIfService(reservationSystem);\n           rmContext.setReservationSystem(reservationSystem);\n           LOG.info(\"Initialized Reservation system\");\n         }\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n      \n      RMNodeLabelsManager nlm \u003d createNodeLabelManager();\n      addService(nlm);\n      rmContext.setNodeLabelManager(nlm);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "commitDateOld": "18/09/14 11:03 AM",
      "commitNameOld": "485c96e3cb9b0b05d6e490b4773506da83ebc61d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.19,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,145 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n       addService(systemMetricsPublisher);\n       rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n+      // Initialize the Reservation system\n+      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n+          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n+        reservationSystem \u003d createReservationSystem();\n+        if (reservationSystem !\u003d null) {\n+          reservationSystem.setRMContext(rmContext);\n+          addIfService(reservationSystem);\n+          rmContext.setReservationSystem(reservationSystem);\n+          LOG.info(\"Initialized Reservation system\");\n+        }\n+      }\n+\n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // Initialize the Reservation system\n      if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {\n        reservationSystem \u003d createReservationSystem();\n        if (reservationSystem !\u003d null) {\n          reservationSystem.setRMContext(rmContext);\n          addIfService(reservationSystem);\n          rmContext.setReservationSystem(reservationSystem);\n          LOG.info(\"Initialized Reservation system\");\n        }\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "19/08/14 10:49 AM",
      "commitNameOld": "375c221960abfd6a928677a25ab43503976c3e90",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 23.34,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,133 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n+      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n+      addService(systemMetricsPublisher);\n+      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n+\n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n      addService(systemMetricsPublisher);\n      rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bdd3e2ce4975dda3fc33644dfb330ae7395003de": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2337. ResourceManager sets ClientRMService in RMContext multiple times. (Zhihai Xu via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 5:13 PM",
      "commitName": "bdd3e2ce4975dda3fc33644dfb330ae7395003de",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "31/07/14 1:06 PM",
      "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 10.17,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,130 +1,129 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d RMStateStoreFactory.getStore(conf);\n         boolean isWorkPreservingRecoveryEnabled \u003d\n             conf.getBoolean(\n               YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n               YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n         rmContext\n           .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n-      rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/14 12:33 PM",
      "commitNameOld": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 8.32,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,130 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n-      if(isRecoveryEnabled) {\n+      if (isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n-        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n+        rmStore \u003d RMStateStoreFactory.getStore(conf);\n+        boolean isWorkPreservingRecoveryEnabled \u003d\n+            conf.getBoolean(\n+              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n+              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n+        rmContext\n+          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       scheduler.setRMContext(rmContext);\n       addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if (isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d RMStateStoreFactory.getStore(conf);\n        boolean isWorkPreservingRecoveryEnabled \u003d\n            conf.getBoolean(\n              YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,\n              YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);\n        rmContext\n          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a4ba451802c6c61a0c804809740d46dd76059f25": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1474. Make schedulers services. (Tsuyoshi Ozawa via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598908 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/14 12:33 PM",
      "commitName": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "13/05/14 1:00 PM",
      "commitNameOld": "2f87e77cb7f6cd7155b8b95922f5e1aaf88335b4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.98,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,128 +1,124 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n           createRMApplicationHistoryWriter();\n       addService(rmApplicationHistoryWriter);\n       rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n+      scheduler.setRMContext(rmContext);\n+      addIfService(scheduler);\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n-      try {\n-        scheduler.reinitialize(conf, rmContext);\n-      } catch (IOException ioe) {\n-        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n-      }\n-\n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      scheduler.setRMContext(rmContext);\n      addIfService(scheduler);\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/01/14 6:01 PM",
      "commitNameOld": "e0ce554b86fd1ecb9bfd184d15c8e1decea02d5e",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.12,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,123 +1,128 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n+      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n+          createRMApplicationHistoryWriter();\n+      addService(rmApplicationHistoryWriter);\n+      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n+\n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n          createRMApplicationHistoryWriter();\n      addService(rmApplicationHistoryWriter);\n      rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c3cc855d27470edca7ca0bdc0aa8907b544b636e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1029. Added embedded leader election in the ResourceManager. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 5:56 PM",
      "commitName": "c3cc855d27470edca7ca0bdc0aa8907b544b636e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/12/13 4:21 PM",
      "commitNameOld": "d841a0f47461af485d6c8320b54e761006c619a7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 12.07,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,123 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n-      rmDispatcher \u003d createDispatcher();\n-      addIfService(rmDispatcher);\n-      rmContext.setDispatcher(rmDispatcher);\n-\n       rmSecretManagerService \u003d createRMSecretManagerService();\n       addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n-        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n-            createRMStateStoreOperationFailedEventDispatcher());\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n \n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "d841a0f47461af485d6c8320b54e761006c619a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1172. Convert SecretManagers in RM to services (Tsuyoshi OZAWA via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1553431 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/12/13 4:21 PM",
      "commitName": "d841a0f47461af485d6c8320b54e761006c619a7",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/12/13 7:13 AM",
      "commitNameOld": "94e2e78ab751d1da775d0acf6e5ee6c0694ed746",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 14.38,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,140 +1,129 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmDispatcher \u003d createDispatcher();\n       addIfService(rmDispatcher);\n       rmContext.setDispatcher(rmDispatcher);\n \n-      clientToAMSecretManager \u003d new ClientToAMTokenSecretManagerInRM();\n-      rmContext.setClientToAMTokenSecretManager(clientToAMSecretManager);\n-\n-      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n-      rmContext.setAMRMTokenSecretManager(amRmTokenSecretManager);\n+      rmSecretManagerService \u003d createRMSecretManagerService();\n+      addService(rmSecretManagerService);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n-      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n-      rmContext.setContainerTokenSecretManager(containerTokenSecretManager);\n-\n-      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n-      rmContext.setNMTokenSecretManager(nmTokenSecretManager);\n-\n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n             createRMStateStoreOperationFailedEventDispatcher());\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n-      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n-      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n \n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmDispatcher \u003d createDispatcher();\n      addIfService(rmDispatcher);\n      rmContext.setDispatcher(rmDispatcher);\n\n      rmSecretManagerService \u003d createRMSecretManagerService();\n      addService(rmSecretManagerService);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n            createRMStateStoreOperationFailedEventDispatcher());\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "48fb53bc4966acf42851a54df80f54ab27f8ac70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1405. Fixed ResourceManager to not hang when init/start fails with an exception w.r.t state-store. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548992 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/13 8:30 PM",
      "commitName": "48fb53bc4966acf42851a54df80f54ab27f8ac70",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/12/13 2:18 PM",
      "commitNameOld": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.26,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,140 +1,140 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmDispatcher \u003d createDispatcher();\n       addIfService(rmDispatcher);\n       rmContext.setDispatcher(rmDispatcher);\n \n       clientToAMSecretManager \u003d new ClientToAMTokenSecretManagerInRM();\n       rmContext.setClientToAMTokenSecretManager(clientToAMSecretManager);\n \n       amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n       rmContext.setAMRMTokenSecretManager(amRmTokenSecretManager);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n       rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n       rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n       rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n       rmContext.setContainerTokenSecretManager(containerTokenSecretManager);\n \n       nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n       rmContext.setNMTokenSecretManager(nmTokenSecretManager);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n             createRMStateStoreOperationFailedEventDispatcher());\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n-        ExitUtil.terminate(1, e);\n+        throw e;\n       }\n       rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n         rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n       rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       rmContext.setScheduler(scheduler);\n \n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n       rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n       rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n       rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n \n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n       rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmDispatcher \u003d createDispatcher();\n      addIfService(rmDispatcher);\n      rmContext.setDispatcher(rmDispatcher);\n\n      clientToAMSecretManager \u003d new ClientToAMTokenSecretManagerInRM();\n      rmContext.setClientToAMTokenSecretManager(clientToAMSecretManager);\n\n      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n      rmContext.setAMRMTokenSecretManager(amRmTokenSecretManager);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n      rmContext.setContainerTokenSecretManager(containerTokenSecretManager);\n\n      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n      rmContext.setNMTokenSecretManager(nmTokenSecretManager);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n            createRMStateStoreOperationFailedEventDispatcher());\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        throw e;\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/12/13 2:18 PM",
      "commitName": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/11/13 3:22 PM",
      "commitNameOld": "6369c8d81972a9a0b6ef41f4508fcb60d34e3d78",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,140 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmDispatcher \u003d createDispatcher();\n       addIfService(rmDispatcher);\n+      rmContext.setDispatcher(rmDispatcher);\n+\n+      clientToAMSecretManager \u003d new ClientToAMTokenSecretManagerInRM();\n+      rmContext.setClientToAMTokenSecretManager(clientToAMSecretManager);\n \n       amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n+      rmContext.setAMRMTokenSecretManager(amRmTokenSecretManager);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n+      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n+      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n+      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n \n       containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n+      rmContext.setContainerTokenSecretManager(containerTokenSecretManager);\n+\n       nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n+      rmContext.setNMTokenSecretManager(nmTokenSecretManager);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n         rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n             createRMStateStoreOperationFailedEventDispatcher());\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         ExitUtil.terminate(1, e);\n       }\n+      rmContext.setStateStore(rmStore);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n+        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n       }\n \n-      rmContext \u003d new RMContextImpl(\n-          rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n-          amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n-          containerTokenSecretManager, nmTokenSecretManager,\n-          clientToAMSecretManager);\n-\n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n+      rmContext.setNodesListManager(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n+      rmContext.setScheduler(scheduler);\n+\n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n+      rmContext.setResourceTrackerService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n+      rmContext.setApplicationMasterService(masterService);\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n       rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n       rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n+\n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n-\n-      adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n-      addService(adminService);\n+      rmContext.setClientRMService(clientRM);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmDispatcher \u003d createDispatcher();\n      addIfService(rmDispatcher);\n      rmContext.setDispatcher(rmDispatcher);\n\n      clientToAMSecretManager \u003d new ClientToAMTokenSecretManagerInRM();\n      rmContext.setClientToAMTokenSecretManager(clientToAMSecretManager);\n\n      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n      rmContext.setAMRMTokenSecretManager(amRmTokenSecretManager);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n      rmContext.setContainerAllocationExpirer(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n      rmContext.setAMLivelinessMonitor(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n      rmContext.setAMFinishingMonitor(amFinishingMonitor);\n\n      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n      rmContext.setContainerTokenSecretManager(containerTokenSecretManager);\n\n      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n      rmContext.setNMTokenSecretManager(nmTokenSecretManager);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n            createRMStateStoreOperationFailedEventDispatcher());\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        ExitUtil.terminate(1, e);\n      }\n      rmContext.setStateStore(rmStore);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n        rmContext.setDelegationTokenRenewer(delegationTokenRenewer);\n      }\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n      rmContext.setNodesListManager(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      rmContext.setScheduler(scheduler);\n\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n      rmContext.setResourceTrackerService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n      rmContext.setApplicationMasterService(masterService);\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n      rmContext.setClientRMService(clientRM);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1222. Make improvements in ZKRMStateStore for fencing (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/13 9:53 AM",
      "commitName": "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "05/11/13 10:25 AM",
      "commitNameOld": "4550eac0998def6c5e49789a148c19531f365bca",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,129 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmDispatcher \u003d createDispatcher();\n       addIfService(rmDispatcher);\n \n       amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n \n       containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n       nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n+        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n+            createRMStateStoreOperationFailedEventDispatcher());\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         ExitUtil.terminate(1, e);\n       }\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n       }\n \n       rmContext \u003d new RMContextImpl(\n           rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n           amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n           containerTokenSecretManager, nmTokenSecretManager,\n           clientToAMSecretManager);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n       queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n \n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n       rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n       rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n \n       adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n       addService(adminService);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmDispatcher \u003d createDispatcher();\n      addIfService(rmDispatcher);\n\n      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n\n      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n        rmDispatcher.register(RMStateStoreOperationFailedEventType.class,\n            createRMStateStoreOperationFailedEventDispatcher());\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        ExitUtil.terminate(1, e);\n      }\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n      }\n\n      rmContext \u003d new RMContextImpl(\n          rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n          amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n          containerTokenSecretManager, nmTokenSecretManager,\n          clientToAMSecretManager);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n\n      adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n      addService(adminService);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": {
      "type": "Ybodychange",
      "commitMessage": "YARN-899. Added back queue level administrator-acls so that there is no regression w.r.t 1.x. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/13 1:21 AM",
      "commitName": "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/09/13 4:02 PM",
      "commitNameOld": "96c11fe6021ce9c14cb736a0d41dde856d92083c",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.39,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,127 @@\n     protected void serviceInit(Configuration configuration) throws Exception {\n       conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n       rmDispatcher \u003d createDispatcher();\n       addIfService(rmDispatcher);\n \n       amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n \n       containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n       addService(containerAllocationExpirer);\n \n       AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n       addService(amLivelinessMonitor);\n \n       AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n       addService(amFinishingMonitor);\n \n       containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n       nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n \n       boolean isRecoveryEnabled \u003d conf.getBoolean(\n           YarnConfiguration.RECOVERY_ENABLED,\n           YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n       RMStateStore rmStore \u003d null;\n       if(isRecoveryEnabled) {\n         recoveryEnabled \u003d true;\n         rmStore \u003d  RMStateStoreFactory.getStore(conf);\n       } else {\n         recoveryEnabled \u003d false;\n         rmStore \u003d new NullRMStateStore();\n       }\n \n       try {\n         rmStore.init(conf);\n         rmStore.setRMDispatcher(rmDispatcher);\n       } catch (Exception e) {\n         // the Exception from stateStore.init() needs to be handled for\n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to init state store\", e);\n         ExitUtil.terminate(1, e);\n       }\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         delegationTokenRenewer \u003d createDelegationTokenRenewer();\n       }\n \n       rmContext \u003d new RMContextImpl(\n           rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n           amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n           containerTokenSecretManager, nmTokenSecretManager,\n           clientToAMSecretManager);\n \n       // Register event handler for NodesListManager\n       nodesListManager \u003d new NodesListManager(rmContext);\n       rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n       addService(nodesListManager);\n \n       // Initialize the scheduler\n       scheduler \u003d createScheduler();\n       schedulerDispatcher \u003d createSchedulerEventDispatcher();\n       addIfService(schedulerDispatcher);\n       rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n \n       // Register event handler for RmAppEvents\n       rmDispatcher.register(RMAppEventType.class,\n           new ApplicationEventDispatcher(rmContext));\n \n       // Register event handler for RmAppAttemptEvents\n       rmDispatcher.register(RMAppAttemptEventType.class,\n           new ApplicationAttemptEventDispatcher(rmContext));\n \n       // Register event handler for RmNodes\n       rmDispatcher.register(\n           RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n \n       nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n       addService(nmLivelinessMonitor);\n \n       resourceTracker \u003d createResourceTrackerService();\n       addService(resourceTracker);\n \n       DefaultMetricsSystem.initialize(\"ResourceManager\");\n       JvmMetrics.initSingleton(\"ResourceManager\", null);\n \n       try {\n         scheduler.reinitialize(conf, rmContext);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n       }\n \n       // creating monitors that handle preemption\n       createPolicyMonitors();\n \n       masterService \u003d createApplicationMasterService();\n       addService(masterService) ;\n \n       applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n+      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n+\n       rmAppManager \u003d createRMAppManager();\n       // Register event handler for RMAppManagerEvents\n       rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n       rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n       rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n       clientRM \u003d createClientRMService();\n       rmContext.setClientRMService(clientRM);\n       addService(clientRM);\n \n       adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n       addService(adminService);\n \n       applicationMasterLauncher \u003d createAMLauncher();\n       rmDispatcher.register(AMLauncherEventType.class,\n           applicationMasterLauncher);\n \n       addService(applicationMasterLauncher);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         addService(delegationTokenRenewer);\n         delegationTokenRenewer.setRMContext(rmContext);\n       }\n \n       new RMNMInfo(rmContext, scheduler);\n \n       super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmDispatcher \u003d createDispatcher();\n      addIfService(rmDispatcher);\n\n      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n\n      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        ExitUtil.terminate(1, e);\n      }\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n      }\n\n      rmContext \u003d new RMContextImpl(\n          rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n          amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n          containerTokenSecretManager, nmTokenSecretManager,\n          clientToAMSecretManager);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      queueACLsManager \u003d createQueueACLsManager(scheduler, conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n\n      adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n      addService(adminService);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1098. Separate out RM services into Always On and Active (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 10:43 AM",
      "commitName": "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,125 @@\n+    protected void serviceInit(Configuration configuration) throws Exception {\n+      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n+\n+      rmDispatcher \u003d createDispatcher();\n+      addIfService(rmDispatcher);\n+\n+      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n+\n+      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n+      addService(containerAllocationExpirer);\n+\n+      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n+      addService(amLivelinessMonitor);\n+\n+      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n+      addService(amFinishingMonitor);\n+\n+      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n+      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n+\n+      boolean isRecoveryEnabled \u003d conf.getBoolean(\n+          YarnConfiguration.RECOVERY_ENABLED,\n+          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n+\n+      RMStateStore rmStore \u003d null;\n+      if(isRecoveryEnabled) {\n+        recoveryEnabled \u003d true;\n+        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n+      } else {\n+        recoveryEnabled \u003d false;\n+        rmStore \u003d new NullRMStateStore();\n+      }\n+\n+      try {\n+        rmStore.init(conf);\n+        rmStore.setRMDispatcher(rmDispatcher);\n+      } catch (Exception e) {\n+        // the Exception from stateStore.init() needs to be handled for\n+        // HA and we need to give up master status if we got fenced\n+        LOG.error(\"Failed to init state store\", e);\n+        ExitUtil.terminate(1, e);\n+      }\n+\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n+      }\n+\n+      rmContext \u003d new RMContextImpl(\n+          rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n+          amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n+          containerTokenSecretManager, nmTokenSecretManager,\n+          clientToAMSecretManager);\n+\n+      // Register event handler for NodesListManager\n+      nodesListManager \u003d new NodesListManager(rmContext);\n+      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n+      addService(nodesListManager);\n+\n+      // Initialize the scheduler\n+      scheduler \u003d createScheduler();\n+      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n+      addIfService(schedulerDispatcher);\n+      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n+\n+      // Register event handler for RmAppEvents\n+      rmDispatcher.register(RMAppEventType.class,\n+          new ApplicationEventDispatcher(rmContext));\n+\n+      // Register event handler for RmAppAttemptEvents\n+      rmDispatcher.register(RMAppAttemptEventType.class,\n+          new ApplicationAttemptEventDispatcher(rmContext));\n+\n+      // Register event handler for RmNodes\n+      rmDispatcher.register(\n+          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n+\n+      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n+      addService(nmLivelinessMonitor);\n+\n+      resourceTracker \u003d createResourceTrackerService();\n+      addService(resourceTracker);\n+\n+      DefaultMetricsSystem.initialize(\"ResourceManager\");\n+      JvmMetrics.initSingleton(\"ResourceManager\", null);\n+\n+      try {\n+        scheduler.reinitialize(conf, rmContext);\n+      } catch (IOException ioe) {\n+        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n+      }\n+\n+      // creating monitors that handle preemption\n+      createPolicyMonitors();\n+\n+      masterService \u003d createApplicationMasterService();\n+      addService(masterService) ;\n+\n+      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n+\n+      rmAppManager \u003d createRMAppManager();\n+      // Register event handler for RMAppManagerEvents\n+      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n+      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n+      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n+      clientRM \u003d createClientRMService();\n+      rmContext.setClientRMService(clientRM);\n+      addService(clientRM);\n+\n+      adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n+      addService(adminService);\n+\n+      applicationMasterLauncher \u003d createAMLauncher();\n+      rmDispatcher.register(AMLauncherEventType.class,\n+          applicationMasterLauncher);\n+\n+      addService(applicationMasterLauncher);\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        addService(delegationTokenRenewer);\n+        delegationTokenRenewer.setRMContext(rmContext);\n+      }\n+\n+      new RMNMInfo(rmContext, scheduler);\n+\n+      super.serviceInit(conf);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void serviceInit(Configuration configuration) throws Exception {\n      conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n      rmDispatcher \u003d createDispatcher();\n      addIfService(rmDispatcher);\n\n      amRmTokenSecretManager \u003d createAMRMTokenSecretManager(conf);\n\n      containerAllocationExpirer \u003d new ContainerAllocationExpirer(rmDispatcher);\n      addService(containerAllocationExpirer);\n\n      AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n      addService(amLivelinessMonitor);\n\n      AMLivelinessMonitor amFinishingMonitor \u003d createAMLivelinessMonitor();\n      addService(amFinishingMonitor);\n\n      containerTokenSecretManager \u003d createContainerTokenSecretManager(conf);\n      nmTokenSecretManager \u003d createNMTokenSecretManager(conf);\n\n      boolean isRecoveryEnabled \u003d conf.getBoolean(\n          YarnConfiguration.RECOVERY_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n      RMStateStore rmStore \u003d null;\n      if(isRecoveryEnabled) {\n        recoveryEnabled \u003d true;\n        rmStore \u003d  RMStateStoreFactory.getStore(conf);\n      } else {\n        recoveryEnabled \u003d false;\n        rmStore \u003d new NullRMStateStore();\n      }\n\n      try {\n        rmStore.init(conf);\n        rmStore.setRMDispatcher(rmDispatcher);\n      } catch (Exception e) {\n        // the Exception from stateStore.init() needs to be handled for\n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to init state store\", e);\n        ExitUtil.terminate(1, e);\n      }\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        delegationTokenRenewer \u003d createDelegationTokenRenewer();\n      }\n\n      rmContext \u003d new RMContextImpl(\n          rmDispatcher, rmStore, containerAllocationExpirer, amLivelinessMonitor,\n          amFinishingMonitor, delegationTokenRenewer, amRmTokenSecretManager,\n          containerTokenSecretManager, nmTokenSecretManager,\n          clientToAMSecretManager);\n\n      // Register event handler for NodesListManager\n      nodesListManager \u003d new NodesListManager(rmContext);\n      rmDispatcher.register(NodesListManagerEventType.class, nodesListManager);\n      addService(nodesListManager);\n\n      // Initialize the scheduler\n      scheduler \u003d createScheduler();\n      schedulerDispatcher \u003d createSchedulerEventDispatcher();\n      addIfService(schedulerDispatcher);\n      rmDispatcher.register(SchedulerEventType.class, schedulerDispatcher);\n\n      // Register event handler for RmAppEvents\n      rmDispatcher.register(RMAppEventType.class,\n          new ApplicationEventDispatcher(rmContext));\n\n      // Register event handler for RmAppAttemptEvents\n      rmDispatcher.register(RMAppAttemptEventType.class,\n          new ApplicationAttemptEventDispatcher(rmContext));\n\n      // Register event handler for RmNodes\n      rmDispatcher.register(\n          RMNodeEventType.class, new NodeEventDispatcher(rmContext));\n\n      nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n      addService(nmLivelinessMonitor);\n\n      resourceTracker \u003d createResourceTrackerService();\n      addService(resourceTracker);\n\n      DefaultMetricsSystem.initialize(\"ResourceManager\");\n      JvmMetrics.initSingleton(\"ResourceManager\", null);\n\n      try {\n        scheduler.reinitialize(conf, rmContext);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n      }\n\n      // creating monitors that handle preemption\n      createPolicyMonitors();\n\n      masterService \u003d createApplicationMasterService();\n      addService(masterService) ;\n\n      applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n      rmAppManager \u003d createRMAppManager();\n      // Register event handler for RMAppManagerEvents\n      rmDispatcher.register(RMAppManagerEventType.class, rmAppManager);\n      rmDTSecretManager \u003d createRMDelegationTokenSecretManager(rmContext);\n      rmContext.setRMDelegationTokenSecretManager(rmDTSecretManager);\n      clientRM \u003d createClientRMService();\n      rmContext.setClientRMService(clientRM);\n      addService(clientRM);\n\n      adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n      addService(adminService);\n\n      applicationMasterLauncher \u003d createAMLauncher();\n      rmDispatcher.register(AMLauncherEventType.class,\n          applicationMasterLauncher);\n\n      addService(applicationMasterLauncher);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        addService(delegationTokenRenewer);\n        delegationTokenRenewer.setRMContext(rmContext);\n      }\n\n      new RMNMInfo(rmContext, scheduler);\n\n      super.serviceInit(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}