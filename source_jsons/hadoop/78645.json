{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NflyFSystem.java",
  "functionName": "repairAndOpen",
  "functionId": "repairAndOpen___mrNodes-MRNflyNode[]__f-Path__bufferSize-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java",
  "functionStartLine": 636,
  "functionEndLine": 713,
  "numCommitsSeen": 3,
  "timeTaken": 735,
  "changeHistory": [
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0"
  ],
  "changeHistoryShort": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12077. Provide a multi-URI replication Inode for ViewFs. Contributed by Gera Shegalov\n",
      "commitDate": "05/09/17 11:51 PM",
      "commitName": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,78 @@\n+  private FSDataInputStream repairAndOpen(MRNflyNode[] mrNodes, Path f,\n+      int bufferSize) {\n+    long maxMtime \u003d 0L;\n+    for (final MRNflyNode srcNode : mrNodes) {\n+      if (srcNode.status \u003d\u003d null  // not available\n+          || srcNode.status.getLen() \u003c 0L) { // not found\n+        continue; // not available\n+      }\n+      if (srcNode.status.getModificationTime() \u003e maxMtime) {\n+        maxMtime \u003d srcNode.status.getModificationTime();\n+      }\n+\n+      // attempt to repair all notFound nodes with srcNode\n+      //\n+      for (final MRNflyNode dstNode : mrNodes) {\n+        if (dstNode.status \u003d\u003d null // not available\n+            || srcNode.compareTo(dstNode) \u003d\u003d 0) { // same mtime\n+          continue;\n+        }\n+\n+        try {\n+          // status is absolute from the underlying mount, making it chrooted\n+          //\n+          final FileStatus srcStatus \u003d srcNode.cloneStatus();\n+          srcStatus.setPath(f);\n+          final Path tmpPath \u003d getNflyTmpPath(f);\n+          FileUtil.copy(srcNode.getFs(), srcStatus, dstNode.getFs(), tmpPath,\n+              false,                // don\u0027t delete\n+              true,                 // overwrite\n+              getConf());\n+          dstNode.getFs().delete(f, false);\n+          if (dstNode.getFs().rename(tmpPath, f)) {\n+            try {\n+              dstNode.getFs().setTimes(f, srcNode.status.getModificationTime(),\n+                  srcNode.status.getAccessTime());\n+            } finally {\n+              // save getFileStatus rpc\n+              srcStatus.setPath(dstNode.getFs().makeQualified(f));\n+              dstNode.status \u003d srcStatus;\n+            }\n+          }\n+        } catch (IOException ioe) {\n+          // can blame the source by statusSet.clear(ai), however, it would\n+          // cost an extra RPC, so just rely on the loop below that will attempt\n+          // an open anyhow\n+          //\n+          LOG.info(f + \" \" + srcNode + \"-\u003e\" + dstNode + \": Failed to repair\",\n+                ioe);\n+        }\n+      }\n+    }\n+\n+    // Since Java7, QuickSort is used instead of MergeSort.\n+    // QuickSort may not be stable and thus the equal most recent nodes, may no\n+    // longer appear in the NetworkTopology order.\n+    //\n+    if (maxMtime \u003e 0) {\n+      final List\u003cMRNflyNode\u003e mrList \u003d new ArrayList\u003cMRNflyNode\u003e();\n+      for (final MRNflyNode openNode : mrNodes) {\n+        if (openNode.status !\u003d null \u0026\u0026 openNode.status.getLen() \u003e\u003d 0L) {\n+          if (openNode.status.getModificationTime() \u003d\u003d maxMtime) {\n+            mrList.add(openNode);\n+          }\n+        }\n+      }\n+      // assert mrList.size \u003e 0\n+      final MRNflyNode[] readNodes \u003d mrList.toArray(new MRNflyNode[0]);\n+      topology.sortByDistance(myNode, readNodes, readNodes.length);\n+      for (final MRNflyNode rNode : readNodes) {\n+        try {\n+          return rNode.getFs().open(f, bufferSize);\n+        } catch (IOException e) {\n+          LOG.info(f + \": Failed to open at \" + rNode.getFs().getUri());\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream repairAndOpen(MRNflyNode[] mrNodes, Path f,\n      int bufferSize) {\n    long maxMtime \u003d 0L;\n    for (final MRNflyNode srcNode : mrNodes) {\n      if (srcNode.status \u003d\u003d null  // not available\n          || srcNode.status.getLen() \u003c 0L) { // not found\n        continue; // not available\n      }\n      if (srcNode.status.getModificationTime() \u003e maxMtime) {\n        maxMtime \u003d srcNode.status.getModificationTime();\n      }\n\n      // attempt to repair all notFound nodes with srcNode\n      //\n      for (final MRNflyNode dstNode : mrNodes) {\n        if (dstNode.status \u003d\u003d null // not available\n            || srcNode.compareTo(dstNode) \u003d\u003d 0) { // same mtime\n          continue;\n        }\n\n        try {\n          // status is absolute from the underlying mount, making it chrooted\n          //\n          final FileStatus srcStatus \u003d srcNode.cloneStatus();\n          srcStatus.setPath(f);\n          final Path tmpPath \u003d getNflyTmpPath(f);\n          FileUtil.copy(srcNode.getFs(), srcStatus, dstNode.getFs(), tmpPath,\n              false,                // don\u0027t delete\n              true,                 // overwrite\n              getConf());\n          dstNode.getFs().delete(f, false);\n          if (dstNode.getFs().rename(tmpPath, f)) {\n            try {\n              dstNode.getFs().setTimes(f, srcNode.status.getModificationTime(),\n                  srcNode.status.getAccessTime());\n            } finally {\n              // save getFileStatus rpc\n              srcStatus.setPath(dstNode.getFs().makeQualified(f));\n              dstNode.status \u003d srcStatus;\n            }\n          }\n        } catch (IOException ioe) {\n          // can blame the source by statusSet.clear(ai), however, it would\n          // cost an extra RPC, so just rely on the loop below that will attempt\n          // an open anyhow\n          //\n          LOG.info(f + \" \" + srcNode + \"-\u003e\" + dstNode + \": Failed to repair\",\n                ioe);\n        }\n      }\n    }\n\n    // Since Java7, QuickSort is used instead of MergeSort.\n    // QuickSort may not be stable and thus the equal most recent nodes, may no\n    // longer appear in the NetworkTopology order.\n    //\n    if (maxMtime \u003e 0) {\n      final List\u003cMRNflyNode\u003e mrList \u003d new ArrayList\u003cMRNflyNode\u003e();\n      for (final MRNflyNode openNode : mrNodes) {\n        if (openNode.status !\u003d null \u0026\u0026 openNode.status.getLen() \u003e\u003d 0L) {\n          if (openNode.status.getModificationTime() \u003d\u003d maxMtime) {\n            mrList.add(openNode);\n          }\n        }\n      }\n      // assert mrList.size \u003e 0\n      final MRNflyNode[] readNodes \u003d mrList.toArray(new MRNflyNode[0]);\n      topology.sortByDistance(myNode, readNodes, readNodes.length);\n      for (final MRNflyNode rNode : readNodes) {\n        try {\n          return rNode.getFs().open(f, bufferSize);\n        } catch (IOException e) {\n          LOG.info(f + \": Failed to open at \" + rNode.getFs().getUri());\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java"
    }
  }
}