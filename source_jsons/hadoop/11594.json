{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativePmemMappedBlock.java",
  "functionName": "close",
  "functionId": "close",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/NativePmemMappedBlock.java",
  "functionStartLine": 67,
  "functionEndLine": 89,
  "numCommitsSeen": 2,
  "timeTaken": 1854,
  "changeHistory": [
    "d79cce20abbbf321f6dcce03f4087544124a7cd2",
    "d1aad444907e1fc5314e8e64529e57c51ed7561c"
  ],
  "changeHistoryShort": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": "Ybodychange",
    "d1aad444907e1fc5314e8e64529e57c51ed7561c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14740. Recover data blocks from persistent memory read cache during datanode restarts. Contributed by Feilong He.\n",
      "commitDate": "01/01/20 10:14 PM",
      "commitName": "d79cce20abbbf321f6dcce03f4087544124a7cd2",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "05/06/19 6:33 AM",
      "commitNameOld": "d1aad444907e1fc5314e8e64529e57c51ed7561c",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 210.7,
      "commitsBetweenForRepo": 1399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void close() {\n     if (pmemMappedAddress !\u003d -1L) {\n-      String cacheFilePath \u003d\n-          PmemVolumeManager.getInstance().getCachePath(key);\n       try {\n+        String cacheFilePath \u003d\n+            PmemVolumeManager.getInstance().getCachePath(key);\n         // Current libpmem will report error when pmem_unmap is called with\n         // length not aligned with page size, although the length is returned\n         // by pmem_map_file.\n         boolean success \u003d\n             NativeIO.POSIX.Pmem.unmapBlock(pmemMappedAddress, length);\n         if (!success) {\n           throw new IOException(\"Failed to unmap the mapped file from \" +\n               \"pmem address: \" + pmemMappedAddress);\n         }\n         pmemMappedAddress \u003d -1L;\n         FsDatasetUtil.deleteMappedFile(cacheFilePath);\n         LOG.info(\"Successfully uncached one replica:{} from persistent memory\"\n             + \", [cached path\u003d{}, length\u003d{}]\", key, cacheFilePath, length);\n       } catch (IOException e) {\n         LOG.warn(\"IOException occurred for block {}!\", key, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    if (pmemMappedAddress !\u003d -1L) {\n      try {\n        String cacheFilePath \u003d\n            PmemVolumeManager.getInstance().getCachePath(key);\n        // Current libpmem will report error when pmem_unmap is called with\n        // length not aligned with page size, although the length is returned\n        // by pmem_map_file.\n        boolean success \u003d\n            NativeIO.POSIX.Pmem.unmapBlock(pmemMappedAddress, length);\n        if (!success) {\n          throw new IOException(\"Failed to unmap the mapped file from \" +\n              \"pmem address: \" + pmemMappedAddress);\n        }\n        pmemMappedAddress \u003d -1L;\n        FsDatasetUtil.deleteMappedFile(cacheFilePath);\n        LOG.info(\"Successfully uncached one replica:{} from persistent memory\"\n            + \", [cached path\u003d{}, length\u003d{}]\", key, cacheFilePath, length);\n      } catch (IOException e) {\n        LOG.warn(\"IOException occurred for block {}!\", key, e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/NativePmemMappedBlock.java",
      "extendedDetails": {}
    },
    "d1aad444907e1fc5314e8e64529e57c51ed7561c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14356. Implement HDFS cache on SCM with native PMDK libs. Contributed by Feilong He.\n",
      "commitDate": "05/06/19 6:33 AM",
      "commitName": "d1aad444907e1fc5314e8e64529e57c51ed7561c",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,23 @@\n+  public void close() {\n+    if (pmemMappedAddress !\u003d -1L) {\n+      String cacheFilePath \u003d\n+          PmemVolumeManager.getInstance().getCachePath(key);\n+      try {\n+        // Current libpmem will report error when pmem_unmap is called with\n+        // length not aligned with page size, although the length is returned\n+        // by pmem_map_file.\n+        boolean success \u003d\n+            NativeIO.POSIX.Pmem.unmapBlock(pmemMappedAddress, length);\n+        if (!success) {\n+          throw new IOException(\"Failed to unmap the mapped file from \" +\n+              \"pmem address: \" + pmemMappedAddress);\n+        }\n+        pmemMappedAddress \u003d -1L;\n+        FsDatasetUtil.deleteMappedFile(cacheFilePath);\n+        LOG.info(\"Successfully uncached one replica:{} from persistent memory\"\n+            + \", [cached path\u003d{}, length\u003d{}]\", key, cacheFilePath, length);\n+      } catch (IOException e) {\n+        LOG.warn(\"IOException occurred for block {}!\", key, e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    if (pmemMappedAddress !\u003d -1L) {\n      String cacheFilePath \u003d\n          PmemVolumeManager.getInstance().getCachePath(key);\n      try {\n        // Current libpmem will report error when pmem_unmap is called with\n        // length not aligned with page size, although the length is returned\n        // by pmem_map_file.\n        boolean success \u003d\n            NativeIO.POSIX.Pmem.unmapBlock(pmemMappedAddress, length);\n        if (!success) {\n          throw new IOException(\"Failed to unmap the mapped file from \" +\n              \"pmem address: \" + pmemMappedAddress);\n        }\n        pmemMappedAddress \u003d -1L;\n        FsDatasetUtil.deleteMappedFile(cacheFilePath);\n        LOG.info(\"Successfully uncached one replica:{} from persistent memory\"\n            + \", [cached path\u003d{}, length\u003d{}]\", key, cacheFilePath, length);\n      } catch (IOException e) {\n        LOG.warn(\"IOException occurred for block {}!\", key, e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/NativePmemMappedBlock.java"
    }
  }
}