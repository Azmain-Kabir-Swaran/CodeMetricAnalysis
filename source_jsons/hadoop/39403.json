{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ManagedParentQueue.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___newlyParsedQueue-CSQueue__clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java",
  "functionStartLine": 75,
  "functionEndLine": 130,
  "numCommitsSeen": 8,
  "timeTaken": 4515,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "15fe1b34ddd134df1f413ca435a970fc34bae9f7",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "15fe1b34ddd134df1f413ca435a970fc34bae9f7": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Ybodychange",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 383.56,
      "commitsBetweenForRepo": 2259,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n       throws IOException {\n \n     writeLock.lock();\n     try {\n       validate(newlyParsedQueue);\n \n       shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n           csContext.getConfiguration()\n               .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                   getQueuePath());\n \n       //validate if capacity is exceeded for child queues\n       if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n         float childCap \u003d sumOfChildCapacities();\n         if (getCapacity() \u003c childCap) {\n           throw new IOException(\n               \"Total of Auto Created leaf queues guaranteed capacity : \"\n                   + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                   + \" guaranteed capacity \" + getCapacity() + \"\"\n                   + \".Cannot enforce policy to auto\"\n                   + \" create queues beyond parent queue\u0027s capacity\");\n         }\n       }\n \n       leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n \n       super.reinitialize(newlyParsedQueue, clusterResource);\n \n       // run reinitialize on each existing queue, to trigger absolute cap\n       // recomputations\n       for (CSQueue res : this.getChildQueues()) {\n         res.reinitialize(res, clusterResource);\n       }\n \n       //clear state in policy\n       reinitializeQueueManagementPolicy();\n \n       //reassign capacities according to policy\n       final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n           queueManagementPolicy.computeQueueManagementChanges();\n \n       validateAndApplyQueueManagementChanges(queueManagementChanges);\n \n       LOG.info(\n           \"Reinitialized Managed Parent Queue: [{}] with capacity [{}]\"\n               + \" with max capacity [{}]\",\n           queueName, super.getCapacity(), super.getMaximumCapacity());\n     } catch (YarnException ye) {\n       LOG.error(\"Exception while computing policy changes for leaf queue : \"\n-          + getQueueName(), ye);\n+          + getQueuePath(), ye);\n       throw new IOException(ye);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n\n    writeLock.lock();\n    try {\n      validate(newlyParsedQueue);\n\n      shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n          csContext.getConfiguration()\n              .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                  getQueuePath());\n\n      //validate if capacity is exceeded for child queues\n      if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n        float childCap \u003d sumOfChildCapacities();\n        if (getCapacity() \u003c childCap) {\n          throw new IOException(\n              \"Total of Auto Created leaf queues guaranteed capacity : \"\n                  + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                  + \" guaranteed capacity \" + getCapacity() + \"\"\n                  + \".Cannot enforce policy to auto\"\n                  + \" create queues beyond parent queue\u0027s capacity\");\n        }\n      }\n\n      leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n\n      super.reinitialize(newlyParsedQueue, clusterResource);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n\n      //clear state in policy\n      reinitializeQueueManagementPolicy();\n\n      //reassign capacities according to policy\n      final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n          queueManagementPolicy.computeQueueManagementChanges();\n\n      validateAndApplyQueueManagementChanges(queueManagementChanges);\n\n      LOG.info(\n          \"Reinitialized Managed Parent Queue: [{}] with capacity [{}]\"\n              + \" with max capacity [{}]\",\n          queueName, super.getCapacity(), super.getMaximumCapacity());\n    } catch (YarnException ye) {\n      LOG.error(\"Exception while computing policy changes for leaf queue : \"\n          + getQueuePath(), ye);\n      throw new IOException(ye);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/12/18 12:29 AM",
      "commitNameOld": "15fe1b34ddd134df1f413ca435a970fc34bae9f7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 69.55,
      "commitsBetweenForRepo": 524,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n       throws IOException {\n \n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       validate(newlyParsedQueue);\n \n       shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n           csContext.getConfiguration()\n               .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                   getQueuePath());\n \n       //validate if capacity is exceeded for child queues\n       if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n         float childCap \u003d sumOfChildCapacities();\n         if (getCapacity() \u003c childCap) {\n           throw new IOException(\n               \"Total of Auto Created leaf queues guaranteed capacity : \"\n                   + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                   + \" guaranteed capacity \" + getCapacity() + \"\"\n                   + \".Cannot enforce policy to auto\"\n                   + \" create queues beyond parent queue\u0027s capacity\");\n         }\n       }\n \n       leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n \n       super.reinitialize(newlyParsedQueue, clusterResource);\n \n       // run reinitialize on each existing queue, to trigger absolute cap\n       // recomputations\n       for (CSQueue res : this.getChildQueues()) {\n         res.reinitialize(res, clusterResource);\n       }\n \n       //clear state in policy\n       reinitializeQueueManagementPolicy();\n \n       //reassign capacities according to policy\n       final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n           queueManagementPolicy.computeQueueManagementChanges();\n \n       validateAndApplyQueueManagementChanges(queueManagementChanges);\n \n       LOG.info(\n           \"Reinitialized Managed Parent Queue: [{}] with capacity [{}]\"\n               + \" with max capacity [{}]\",\n           queueName, super.getCapacity(), super.getMaximumCapacity());\n     } catch (YarnException ye) {\n       LOG.error(\"Exception while computing policy changes for leaf queue : \"\n           + getQueueName(), ye);\n       throw new IOException(ye);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n\n    writeLock.lock();\n    try {\n      validate(newlyParsedQueue);\n\n      shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n          csContext.getConfiguration()\n              .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                  getQueuePath());\n\n      //validate if capacity is exceeded for child queues\n      if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n        float childCap \u003d sumOfChildCapacities();\n        if (getCapacity() \u003c childCap) {\n          throw new IOException(\n              \"Total of Auto Created leaf queues guaranteed capacity : \"\n                  + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                  + \" guaranteed capacity \" + getCapacity() + \"\"\n                  + \".Cannot enforce policy to auto\"\n                  + \" create queues beyond parent queue\u0027s capacity\");\n        }\n      }\n\n      leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n\n      super.reinitialize(newlyParsedQueue, clusterResource);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n\n      //clear state in policy\n      reinitializeQueueManagementPolicy();\n\n      //reassign capacities according to policy\n      final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n          queueManagementPolicy.computeQueueManagementChanges();\n\n      validateAndApplyQueueManagementChanges(queueManagementChanges);\n\n      LOG.info(\n          \"Reinitialized Managed Parent Queue: [{}] with capacity [{}]\"\n              + \" with max capacity [{}]\",\n          queueName, super.getCapacity(), super.getMaximumCapacity());\n    } catch (YarnException ye) {\n      LOG.error(\"Exception while computing policy changes for leaf queue : \"\n          + getQueueName(), ye);\n      throw new IOException(ye);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java",
      "extendedDetails": {}
    },
    "15fe1b34ddd134df1f413ca435a970fc34bae9f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8878. Remove StringBuffer from ManagedParentQueue.java. Contributed by BELUGA BEHR.\n",
      "commitDate": "28/12/18 12:29 AM",
      "commitName": "15fe1b34ddd134df1f413ca435a970fc34bae9f7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/04/18 8:47 AM",
      "commitNameOld": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 262.7,
      "commitsBetweenForRepo": 2578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,56 @@\n   public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n       throws IOException {\n \n     try {\n       writeLock.lock();\n       validate(newlyParsedQueue);\n \n       shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n           csContext.getConfiguration()\n               .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                   getQueuePath());\n \n       //validate if capacity is exceeded for child queues\n       if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n         float childCap \u003d sumOfChildCapacities();\n         if (getCapacity() \u003c childCap) {\n           throw new IOException(\n               \"Total of Auto Created leaf queues guaranteed capacity : \"\n                   + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                   + \" guaranteed capacity \" + getCapacity() + \"\"\n                   + \".Cannot enforce policy to auto\"\n                   + \" create queues beyond parent queue\u0027s capacity\");\n         }\n       }\n \n       leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n \n       super.reinitialize(newlyParsedQueue, clusterResource);\n \n       // run reinitialize on each existing queue, to trigger absolute cap\n       // recomputations\n       for (CSQueue res : this.getChildQueues()) {\n         res.reinitialize(res, clusterResource);\n       }\n \n       //clear state in policy\n       reinitializeQueueManagementPolicy();\n \n       //reassign capacities according to policy\n       final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n           queueManagementPolicy.computeQueueManagementChanges();\n \n       validateAndApplyQueueManagementChanges(queueManagementChanges);\n \n-      StringBuffer queueInfo \u003d new StringBuffer();\n-      queueInfo.append(\"Reinitialized Managed Parent Queue: \").append(queueName)\n-          .append(\"]\\nwith capacity: [\").append(super.getCapacity()).append(\n-          \"]\\nwith max capacity: [\").append(super.getMaximumCapacity()).append(\n-          \"].\");\n-      LOG.info(queueInfo.toString());\n+      LOG.info(\n+          \"Reinitialized Managed Parent Queue: [{}] with capacity [{}]\"\n+              + \" with max capacity [{}]\",\n+          queueName, super.getCapacity(), super.getMaximumCapacity());\n     } catch (YarnException ye) {\n       LOG.error(\"Exception while computing policy changes for leaf queue : \"\n           + getQueueName(), ye);\n       throw new IOException(ye);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n\n    try {\n      writeLock.lock();\n      validate(newlyParsedQueue);\n\n      shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n          csContext.getConfiguration()\n              .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                  getQueuePath());\n\n      //validate if capacity is exceeded for child queues\n      if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n        float childCap \u003d sumOfChildCapacities();\n        if (getCapacity() \u003c childCap) {\n          throw new IOException(\n              \"Total of Auto Created leaf queues guaranteed capacity : \"\n                  + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                  + \" guaranteed capacity \" + getCapacity() + \"\"\n                  + \".Cannot enforce policy to auto\"\n                  + \" create queues beyond parent queue\u0027s capacity\");\n        }\n      }\n\n      leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n\n      super.reinitialize(newlyParsedQueue, clusterResource);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n\n      //clear state in policy\n      reinitializeQueueManagementPolicy();\n\n      //reassign capacities according to policy\n      final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n          queueManagementPolicy.computeQueueManagementChanges();\n\n      validateAndApplyQueueManagementChanges(queueManagementChanges);\n\n      LOG.info(\n          \"Reinitialized Managed Parent Queue: [{}] with capacity [{}]\"\n              + \" with max capacity [{}]\",\n          queueName, super.getCapacity(), super.getMaximumCapacity());\n    } catch (YarnException ye) {\n      LOG.error(\"Exception while computing policy changes for leaf queue : \"\n          + getQueueName(), ye);\n      throw new IOException(ye);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/11/17 11:25 AM",
      "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 22.16,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,58 @@\n   public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n       throws IOException {\n-    validate(newlyParsedQueue);\n-    super.reinitialize(newlyParsedQueue, clusterResource);\n-    String leafQueueTemplateConfPrefix \u003d getLeafQueueConfigPrefix(\n-        csContext.getConfiguration());\n-    this.leafQueueTemplate \u003d initializeLeafQueueConfigs(\n-        leafQueueTemplateConfPrefix).build();\n+\n+    try {\n+      writeLock.lock();\n+      validate(newlyParsedQueue);\n+\n+      shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n+          csContext.getConfiguration()\n+              .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n+                  getQueuePath());\n+\n+      //validate if capacity is exceeded for child queues\n+      if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n+        float childCap \u003d sumOfChildCapacities();\n+        if (getCapacity() \u003c childCap) {\n+          throw new IOException(\n+              \"Total of Auto Created leaf queues guaranteed capacity : \"\n+                  + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n+                  + \" guaranteed capacity \" + getCapacity() + \"\"\n+                  + \".Cannot enforce policy to auto\"\n+                  + \" create queues beyond parent queue\u0027s capacity\");\n+        }\n+      }\n+\n+      leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n+\n+      super.reinitialize(newlyParsedQueue, clusterResource);\n+\n+      // run reinitialize on each existing queue, to trigger absolute cap\n+      // recomputations\n+      for (CSQueue res : this.getChildQueues()) {\n+        res.reinitialize(res, clusterResource);\n+      }\n+\n+      //clear state in policy\n+      reinitializeQueueManagementPolicy();\n+\n+      //reassign capacities according to policy\n+      final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n+          queueManagementPolicy.computeQueueManagementChanges();\n+\n+      validateAndApplyQueueManagementChanges(queueManagementChanges);\n+\n+      StringBuffer queueInfo \u003d new StringBuffer();\n+      queueInfo.append(\"Reinitialized Managed Parent Queue: \").append(queueName)\n+          .append(\"]\\nwith capacity: [\").append(super.getCapacity()).append(\n+          \"]\\nwith max capacity: [\").append(super.getMaximumCapacity()).append(\n+          \"].\");\n+      LOG.info(queueInfo.toString());\n+    } catch (YarnException ye) {\n+      LOG.error(\"Exception while computing policy changes for leaf queue : \"\n+          + getQueueName(), ye);\n+      throw new IOException(ye);\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n\n    try {\n      writeLock.lock();\n      validate(newlyParsedQueue);\n\n      shouldFailAutoCreationWhenGuaranteedCapacityExceeded \u003d\n          csContext.getConfiguration()\n              .getShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded(\n                  getQueuePath());\n\n      //validate if capacity is exceeded for child queues\n      if (shouldFailAutoCreationWhenGuaranteedCapacityExceeded) {\n        float childCap \u003d sumOfChildCapacities();\n        if (getCapacity() \u003c childCap) {\n          throw new IOException(\n              \"Total of Auto Created leaf queues guaranteed capacity : \"\n                  + childCap + \" exceeds Parent queue\u0027s \" + getQueuePath()\n                  + \" guaranteed capacity \" + getCapacity() + \"\"\n                  + \".Cannot enforce policy to auto\"\n                  + \" create queues beyond parent queue\u0027s capacity\");\n        }\n      }\n\n      leafQueueTemplate \u003d initializeLeafQueueConfigs().build();\n\n      super.reinitialize(newlyParsedQueue, clusterResource);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n\n      //clear state in policy\n      reinitializeQueueManagementPolicy();\n\n      //reassign capacities according to policy\n      final List\u003cQueueManagementChange\u003e queueManagementChanges \u003d\n          queueManagementPolicy.computeQueueManagementChanges();\n\n      validateAndApplyQueueManagementChanges(queueManagementChanges);\n\n      StringBuffer queueInfo \u003d new StringBuffer();\n      queueInfo.append(\"Reinitialized Managed Parent Queue: \").append(queueName)\n          .append(\"]\\nwith capacity: [\").append(super.getCapacity()).append(\n          \"]\\nwith max capacity: [\").append(super.getMaximumCapacity()).append(\n          \"].\");\n      LOG.info(queueInfo.toString());\n    } catch (YarnException ye) {\n      LOG.error(\"Exception while computing policy changes for leaf queue : \"\n          + getQueueName(), ye);\n      throw new IOException(ye);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java",
      "extendedDetails": {}
    },
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
      "commitDate": "16/11/17 11:25 AM",
      "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,9 @@\n+  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n+      throws IOException {\n+    validate(newlyParsedQueue);\n+    super.reinitialize(newlyParsedQueue, clusterResource);\n+    String leafQueueTemplateConfPrefix \u003d getLeafQueueConfigPrefix(\n+        csContext.getConfiguration());\n+    this.leafQueueTemplate \u003d initializeLeafQueueConfigs(\n+        leafQueueTemplateConfPrefix).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n    validate(newlyParsedQueue);\n    super.reinitialize(newlyParsedQueue, clusterResource);\n    String leafQueueTemplateConfPrefix \u003d getLeafQueueConfigPrefix(\n        csContext.getConfiguration());\n    this.leafQueueTemplate \u003d initializeLeafQueueConfigs(\n        leafQueueTemplateConfPrefix).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ManagedParentQueue.java"
    }
  }
}