{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpUtil.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/HttpUtil.java",
  "functionStartLine": 73,
  "functionEndLine": 103,
  "numCommitsSeen": 1,
  "timeTaken": 919,
  "changeHistory": [
    "d07e873b7db6cb317eccb4768607c1afb505c99b"
  ],
  "changeHistoryShort": {
    "d07e873b7db6cb317eccb4768607c1afb505c99b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d07e873b7db6cb317eccb4768607c1afb505c99b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8569. Create an interface to provide cluster information to application. Contributed by Eric Yang\n",
      "commitDate": "26/10/18 5:57 PM",
      "commitName": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,31 @@\n+          public String run() throws Exception {\n+            try {\n+              // This Oid for Kerberos GSS-API mechanism.\n+              Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n+              GSSManager manager \u003d GSSManager.getInstance();\n+              // GSS name for server\n+              GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n+                  GSSName.NT_HOSTBASED_SERVICE);\n+              // Create a GSSContext for authentication with the service.\n+              // We\u0027re passing client credentials as null since we want them to\n+              // be read from the Subject.\n+              GSSContext gssContext \u003d manager.createContext(\n+                  serverName.canonicalize(mechOid), mechOid, null,\n+                  GSSContext.DEFAULT_LIFETIME);\n+              gssContext.requestMutualAuth(true);\n+              gssContext.requestCredDeleg(true);\n+              // Establish context\n+              byte[] inToken \u003d new byte[0];\n+              byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n+                  inToken.length);\n+              gssContext.dispose();\n+              // Base64 encoded and stringified token for server\n+              LOG.debug(\"Got valid challenge for host {}\", serverName);\n+              return new String(BASE_64_CODEC.encode(outToken),\n+                  StandardCharsets.US_ASCII);\n+            } catch (GSSException | IllegalAccessException\n+                | NoSuchFieldException | ClassNotFoundException e) {\n+              LOG.error(\"Error: {}\", e);\n+              throw new AuthenticationException(e);\n+            }\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public String run() throws Exception {\n            try {\n              // This Oid for Kerberos GSS-API mechanism.\n              Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n              GSSManager manager \u003d GSSManager.getInstance();\n              // GSS name for server\n              GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n                  GSSName.NT_HOSTBASED_SERVICE);\n              // Create a GSSContext for authentication with the service.\n              // We\u0027re passing client credentials as null since we want them to\n              // be read from the Subject.\n              GSSContext gssContext \u003d manager.createContext(\n                  serverName.canonicalize(mechOid), mechOid, null,\n                  GSSContext.DEFAULT_LIFETIME);\n              gssContext.requestMutualAuth(true);\n              gssContext.requestCredDeleg(true);\n              // Establish context\n              byte[] inToken \u003d new byte[0];\n              byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n                  inToken.length);\n              gssContext.dispose();\n              // Base64 encoded and stringified token for server\n              LOG.debug(\"Got valid challenge for host {}\", serverName);\n              return new String(BASE_64_CODEC.encode(outToken),\n                  StandardCharsets.US_ASCII);\n            } catch (GSSException | IllegalAccessException\n                | NoSuchFieldException | ClassNotFoundException e) {\n              LOG.error(\"Error: {}\", e);\n              throw new AuthenticationException(e);\n            }\n          }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/HttpUtil.java"
    }
  }
}