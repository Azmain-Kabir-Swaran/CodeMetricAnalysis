{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "rename",
  "functionId": "rename___xdr-XDR__info-RpcInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 1327,
  "functionEndLine": 1329,
  "numCommitsSeen": 105,
  "timeTaken": 3868,
  "changeHistory": [
    "c9aa74743773c61be938cc1a6ea811ae1404bca2",
    "2ecab65e3e290a1ee192b39ec70868863853543a",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
    "05f35518f19d48890770128727289582cca3457b",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Ybodychange",
    "2ecab65e3e290a1ee192b39ec70868863853543a": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": "Ybodychange",
    "05f35518f19d48890770128727289582cca3457b": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Ymultichange(Yparameterchange,Ybodychange)",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Ymultichange(Yparameterchange,Ybodychange)",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,3 @@\n   public RENAME3Response rename(XDR xdr, RpcInfo info) {\n-    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n-    \n-    RENAME3Request request \u003d null;\n-    try {\n-      request \u003d new RENAME3Request(xdr);\n-    } catch (IOException e) {\n-      LOG.error(\"Invalid RENAME request\");\n-      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n-    }\n-\n-    FileHandle fromHandle \u003d request.getFromDirHandle();\n-    String fromName \u003d request.getFromName();\n-    FileHandle toHandle \u003d request.getToDirHandle();\n-    String toName \u003d request.getToName();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n-          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n-    }\n-\n-    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n-    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n-    Nfs3FileAttributes fromPreOpAttr \u003d null;\n-    Nfs3FileAttributes toPreOpAttr \u003d null;\n-    WccData fromDirWcc \u003d null;\n-    WccData toDirWcc \u003d null;\n-    try {\n-      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n-      if (fromPreOpAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n-            + fromHandle.getFileId());\n-        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n-      }\n-\n-      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n-      if (toPreOpAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n-        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n-      }\n-      \n-      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n-        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n-            fromPreOpAttr);\n-        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n-            toPreOpAttr);\n-        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n-      }\n-\n-      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n-      String dst \u003d toDirFileIdPath + \"/\" + toName;\n-\n-      dfsClient.rename(src, dst, Options.Rename.NONE);\n-\n-      // Assemble the reply\n-      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n-          dfsClient, fromDirFileIdPath, iug);\n-      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n-          dfsClient, toDirFileIdPath, iug);\n-      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n-    } catch (IOException e) {\n-      LOG.warn(\"Exception \", e);\n-      // Try to return correct WccData      \n-      try {\n-        fromDirWcc \u003d Nfs3Utils.createWccData(\n-            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n-            iug);\n-        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n-            dfsClient, toDirFileIdPath, iug);\n-      } catch (IOException e1) {\n-        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n-            + toDirFileIdPath, e1);\n-      }\n-      if (e instanceof AccessControlException) {\n-        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n-            toDirWcc);\n-      } else {\n-        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n-      }\n-    }\n+    return rename(xdr, getSecurityHandler(info), info.remoteAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RENAME3Response rename(XDR xdr, RpcInfo info) {\n    return rename(xdr, getSecurityHandler(info), info.remoteAddress());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "2ecab65e3e290a1ee192b39ec70868863853543a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 1:45 PM",
      "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,86 @@\n-  public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  public RENAME3Response rename(XDR xdr, RpcInfo info) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n     Nfs3FileAttributes fromPreOpAttr \u003d null;\n     Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n       fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n         WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n             fromPreOpAttr);\n         WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             toPreOpAttr);\n         return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n       }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n       fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n           dfsClient, fromDirFileIdPath, iug);\n       toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n           dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n         fromDirWcc \u003d Nfs3Utils.createWccData(\n             Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n             iug);\n         toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath, e1);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RENAME3Response rename(XDR xdr, RpcInfo info) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath, e1);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]",
            "newValue": "[xdr-XDR, info-RpcInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,86 @@\n-  public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  public RENAME3Response rename(XDR xdr, RpcInfo info) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n     Nfs3FileAttributes fromPreOpAttr \u003d null;\n     Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n       fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n         WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n             fromPreOpAttr);\n         WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             toPreOpAttr);\n         return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n       }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n       fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n           dfsClient, fromDirFileIdPath, iug);\n       toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n           dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n         fromDirWcc \u003d Nfs3Utils.createWccData(\n             Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n             iug);\n         toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath, e1);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RENAME3Response rename(XDR xdr, RpcInfo info) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(info, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath, e1);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6050. NFS does not handle exceptions correctly in a few places. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 1:49 PM",
      "commitName": "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "13/03/14 2:03 PM",
      "commitNameOld": "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,86 @@\n   public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n     Nfs3FileAttributes fromPreOpAttr \u003d null;\n     Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n       fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n             fromPreOpAttr);\n         WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             toPreOpAttr);\n         return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n       }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n       fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n           dfsClient, fromDirFileIdPath, iug);\n       toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n           dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n         fromDirWcc \u003d Nfs3Utils.createWccData(\n             Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n             iug);\n         toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n-            + toDirFileIdPath);\n+            + toDirFileIdPath, e1);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath, e1);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "05f35518f19d48890770128727289582cca3457b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5171. NFS should create input stream for a file and try to share it with multiple read requests. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:40 PM",
      "commitName": "05f35518f19d48890770128727289582cca3457b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "15/10/13 2:23 PM",
      "commitNameOld": "a9befa6f0a8a27b49b1e6483e749661f493f06cf",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.1,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,86 @@\n   public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n     Nfs3FileAttributes fromPreOpAttr \u003d null;\n     Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n       fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n             fromPreOpAttr);\n         WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             toPreOpAttr);\n         return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n       }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n       fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n           dfsClient, fromDirFileIdPath, iug);\n       toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n           dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n         fromDirWcc \u003d Nfs3Utils.createWccData(\n             Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n             iug);\n         toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RENAME3Response rename(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,86 @@\n-  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public RENAME3Response rename(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n     Nfs3FileAttributes fromPreOpAttr \u003d null;\n     Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n       fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n             fromPreOpAttr);\n         WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             toPreOpAttr);\n         return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n       }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n       fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n           dfsClient, fromDirFileIdPath, iug);\n       toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n           dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n         fromDirWcc \u003d Nfs3Utils.createWccData(\n             Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n             iug);\n         toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RENAME3Response rename(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,86 @@\n-  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public RENAME3Response rename(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n     Nfs3FileAttributes fromPreOpAttr \u003d null;\n     Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n       fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n             fromPreOpAttr);\n         WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             toPreOpAttr);\n         return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n       }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n       fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n           dfsClient, fromDirFileIdPath, iug);\n       toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n           dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n         fromDirWcc \u003d Nfs3Utils.createWccData(\n             Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n             iug);\n         toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n             dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RENAME3Response rename(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,86 @@\n-  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys) {\n+  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n-    WccAttr fromPreOpAttr \u003d null;\n-    WccAttr toPreOpAttr \u003d null;\n+    Nfs3FileAttributes fromPreOpAttr \u003d null;\n+    Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n-      fromPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fromDirFileIdPath);\n+      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n-      toPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, toDirFileIdPath);\n+      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n+      \n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n+            fromPreOpAttr);\n+        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n+            toPreOpAttr);\n+        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n+      }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n-      fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n-          fromDirFileIdPath, iug);\n-      toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n-          toDirFileIdPath, iug);\n+      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n+          dfsClient, fromDirFileIdPath, iug);\n+      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n+          dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n-\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n-        fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n-            fromDirFileIdPath, iug);\n-        toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n-            toDirFileIdPath, iug);\n+        fromDirWcc \u003d Nfs3Utils.createWccData(\n+            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n+            iug);\n+        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n+            dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys]",
            "newValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,86 @@\n-  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys) {\n+  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     RENAME3Request request \u003d null;\n     try {\n       request \u003d new RENAME3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid RENAME request\");\n       return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle fromHandle \u003d request.getFromDirHandle();\n     String fromName \u003d request.getFromName();\n     FileHandle toHandle \u003d request.getToDirHandle();\n     String toName \u003d request.getToName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n           + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n     }\n \n     String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n     String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n-    WccAttr fromPreOpAttr \u003d null;\n-    WccAttr toPreOpAttr \u003d null;\n+    Nfs3FileAttributes fromPreOpAttr \u003d null;\n+    Nfs3FileAttributes toPreOpAttr \u003d null;\n     WccData fromDirWcc \u003d null;\n     WccData toDirWcc \u003d null;\n     try {\n-      fromPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fromDirFileIdPath);\n+      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n       if (fromPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n             + fromHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n-      toPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, toDirFileIdPath);\n+      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n       if (toPreOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n         return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n+      \n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n+            fromPreOpAttr);\n+        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n+            toPreOpAttr);\n+        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n+      }\n \n       String src \u003d fromDirFileIdPath + \"/\" + fromName;\n       String dst \u003d toDirFileIdPath + \"/\" + toName;\n \n       dfsClient.rename(src, dst, Options.Rename.NONE);\n \n       // Assemble the reply\n-      fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n-          fromDirFileIdPath, iug);\n-      toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n-          toDirFileIdPath, iug);\n+      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n+          dfsClient, fromDirFileIdPath, iug);\n+      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n+          dfsClient, toDirFileIdPath, iug);\n       return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n-\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData      \n       try {\n-        fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n-            fromDirFileIdPath, iug);\n-        toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n-            toDirFileIdPath, iug);\n+        fromDirWcc \u003d Nfs3Utils.createWccData(\n+            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n+            iug);\n+        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n+            dfsClient, toDirFileIdPath, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n             + toDirFileIdPath);\n       }\n       if (e instanceof AccessControlException) {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n             toDirWcc);\n       } else {\n         return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    Nfs3FileAttributes fromPreOpAttr \u003d null;\n    Nfs3FileAttributes toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fromDirFileIdPath, iug);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, toDirFileIdPath, iug);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        WccData fromWcc \u003d new WccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n            fromPreOpAttr);\n        WccData toWcc \u003d new WccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            toPreOpAttr);\n        return new RENAME3Response(Nfs3Status.NFS3ERR_ACCES, fromWcc, toWcc);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(fromPreOpAttr),\n          dfsClient, fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n          dfsClient, toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(\n            Nfs3Utils.getWccAttr(fromPreOpAttr), dfsClient, fromDirFileIdPath,\n            iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(toPreOpAttr),\n            dfsClient, toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,78 @@\n+  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys) {\n+    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n+    String uname \u003d authSysCheck(authSys);\n+    DFSClient dfsClient \u003d clientCache.get(uname);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+    \n+    RENAME3Request request \u003d null;\n+    try {\n+      request \u003d new RENAME3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid RENAME request\");\n+      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+\n+    FileHandle fromHandle \u003d request.getFromDirHandle();\n+    String fromName \u003d request.getFromName();\n+    FileHandle toHandle \u003d request.getToDirHandle();\n+    String toName \u003d request.getToName();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n+          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n+    }\n+\n+    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n+    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n+    WccAttr fromPreOpAttr \u003d null;\n+    WccAttr toPreOpAttr \u003d null;\n+    WccData fromDirWcc \u003d null;\n+    WccData toDirWcc \u003d null;\n+    try {\n+      fromPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fromDirFileIdPath);\n+      if (fromPreOpAttr \u003d\u003d null) {\n+        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n+            + fromHandle.getFileId());\n+        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+\n+      toPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, toDirFileIdPath);\n+      if (toPreOpAttr \u003d\u003d null) {\n+        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n+        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+\n+      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n+      String dst \u003d toDirFileIdPath + \"/\" + toName;\n+\n+      dfsClient.rename(src, dst, Options.Rename.NONE);\n+\n+      // Assemble the reply\n+      fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n+          fromDirFileIdPath, iug);\n+      toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n+          toDirFileIdPath, iug);\n+      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n+\n+    } catch (IOException e) {\n+      LOG.warn(\"Exception \", e);\n+      // Try to return correct WccData      \n+      try {\n+        fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n+            fromDirFileIdPath, iug);\n+        toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n+            toDirFileIdPath, iug);\n+      } catch (IOException e1) {\n+        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n+            + toDirFileIdPath);\n+      }\n+      if (e instanceof AccessControlException) {\n+        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n+            toDirWcc);\n+      } else {\n+        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RENAME3Response rename(XDR xdr, RpcAuthSys authSys) {\n    RENAME3Response response \u003d new RENAME3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    RENAME3Request request \u003d null;\n    try {\n      request \u003d new RENAME3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid RENAME request\");\n      return new RENAME3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle fromHandle \u003d request.getFromDirHandle();\n    String fromName \u003d request.getFromName();\n    FileHandle toHandle \u003d request.getToDirHandle();\n    String toName \u003d request.getToName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS RENAME from: \" + fromHandle.getFileId() + \"/\" + fromName\n          + \" to: \" + toHandle.getFileId() + \"/\" + toName);\n    }\n\n    String fromDirFileIdPath \u003d Nfs3Utils.getFileIdPath(fromHandle);\n    String toDirFileIdPath \u003d Nfs3Utils.getFileIdPath(toHandle);\n    WccAttr fromPreOpAttr \u003d null;\n    WccAttr toPreOpAttr \u003d null;\n    WccData fromDirWcc \u003d null;\n    WccData toDirWcc \u003d null;\n    try {\n      fromPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, fromDirFileIdPath);\n      if (fromPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fromHandle fileId:\"\n            + fromHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      toPreOpAttr \u003d Nfs3Utils.getWccAttr(dfsClient, toDirFileIdPath);\n      if (toPreOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for toHandle fileId:\" + toHandle.getFileId());\n        return new RENAME3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String src \u003d fromDirFileIdPath + \"/\" + fromName;\n      String dst \u003d toDirFileIdPath + \"/\" + toName;\n\n      dfsClient.rename(src, dst, Options.Rename.NONE);\n\n      // Assemble the reply\n      fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n          fromDirFileIdPath, iug);\n      toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n          toDirFileIdPath, iug);\n      return new RENAME3Response(Nfs3Status.NFS3_OK, fromDirWcc, toDirWcc);\n\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData      \n      try {\n        fromDirWcc \u003d Nfs3Utils.createWccData(fromPreOpAttr, dfsClient,\n            fromDirFileIdPath, iug);\n        toDirWcc \u003d Nfs3Utils.createWccData(toPreOpAttr, dfsClient,\n            toDirFileIdPath, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpDirAttr for \" + fromDirFileIdPath + \" or\"\n            + toDirFileIdPath);\n      }\n      if (e instanceof AccessControlException) {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_PERM, fromDirWcc,\n            toDirWcc);\n      } else {\n        return new RENAME3Response(Nfs3Status.NFS3ERR_IO, fromDirWcc, toDirWcc);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}