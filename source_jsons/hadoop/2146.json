{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClient.java",
  "functionName": "getNNProxy",
  "functionId": "getNNProxy___token-Token__DelegationTokenIdentifier____conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
  "functionStartLine": 822,
  "functionEndLine": 846,
  "numCommitsSeen": 330,
  "timeTaken": 8004,
  "changeHistory": [
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "aa4a045925649949b2eaa5b7238edbd742cbcf9a"
  ],
  "changeHistoryShort": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": "Ybodychange",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ybodychange",
    "aa4a045925649949b2eaa5b7238edbd742cbcf9a": "Ybodychange"
  },
  "changeHistoryDetails": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private static ClientProtocol getNNProxy(\n        Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n        throws IOException {\n      URI uri \u003d HAUtilClient.getServiceUriFromToken(\n          HdfsConstants.HDFS_URI_SCHEME, token);\n      if (HAUtilClient.isTokenForLogicalUri(token) \u0026\u0026\n          !HAUtilClient.isLogicalUri(conf, uri)) {\n        // If the token is for a logical nameservice, but the configuration\n        // we have disagrees about that, we can\u0027t actually renew it.\n        // This can be the case in MR, for example, if the RM doesn\u0027t\n        // have all of the HA clusters configured in its configuration.\n        throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n            uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n            \"a failover proxy provider configured.\");\n      }\n      \n      ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n        NameNodeProxiesClient.createProxyWithClientProtocol(conf, uri, null);\n      assert info.getDelegationTokenService().equals(token.getService()) :\n        \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n        \"\u0027 doesn\u0027t match expected service \u0027\" +\n        token.getService().toString() + \"\u0027\";\n        \n      return info.getProxy();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
      "commitDate": "22/09/15 8:52 PM",
      "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/09/15 2:18 PM",
      "commitNameOld": "9eee97508f350ed4629abb04e7781514ffa04070",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 5.27,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private static ClientProtocol getNNProxy(\n         Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n         throws IOException {\n       URI uri \u003d HAUtilClient.getServiceUriFromToken(\n           HdfsConstants.HDFS_URI_SCHEME, token);\n       if (HAUtilClient.isTokenForLogicalUri(token) \u0026\u0026\n           !HAUtilClient.isLogicalUri(conf, uri)) {\n         // If the token is for a logical nameservice, but the configuration\n         // we have disagrees about that, we can\u0027t actually renew it.\n         // This can be the case in MR, for example, if the RM doesn\u0027t\n         // have all of the HA clusters configured in its configuration.\n         throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n             uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n             \"a failover proxy provider configured.\");\n       }\n       \n-      NameNodeProxies.ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n-        NameNodeProxies.createProxy(conf, uri, ClientProtocol.class);\n+      ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n+        NameNodeProxiesClient.createProxyWithClientProtocol(conf, uri, null);\n       assert info.getDelegationTokenService().equals(token.getService()) :\n         \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n         \"\u0027 doesn\u0027t match expected service \u0027\" +\n         token.getService().toString() + \"\u0027\";\n         \n       return info.getProxy();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static ClientProtocol getNNProxy(\n        Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n        throws IOException {\n      URI uri \u003d HAUtilClient.getServiceUriFromToken(\n          HdfsConstants.HDFS_URI_SCHEME, token);\n      if (HAUtilClient.isTokenForLogicalUri(token) \u0026\u0026\n          !HAUtilClient.isLogicalUri(conf, uri)) {\n        // If the token is for a logical nameservice, but the configuration\n        // we have disagrees about that, we can\u0027t actually renew it.\n        // This can be the case in MR, for example, if the RM doesn\u0027t\n        // have all of the HA clusters configured in its configuration.\n        throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n            uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n            \"a failover proxy provider configured.\");\n      }\n      \n      ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n        NameNodeProxiesClient.createProxyWithClientProtocol(conf, uri, null);\n      assert info.getDelegationTokenService().equals(token.getService()) :\n        \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n        \"\u0027 doesn\u0027t match expected service \u0027\" +\n        token.getService().toString() + \"\u0027\";\n        \n      return info.getProxy();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/04/15 3:42 PM",
      "commitNameOld": "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1.26,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private static ClientProtocol getNNProxy(\n         Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n         throws IOException {\n-      URI uri \u003d HAUtil.getServiceUriFromToken(HdfsConstants.HDFS_URI_SCHEME,\n-              token);\n-      if (HAUtil.isTokenForLogicalUri(token) \u0026\u0026\n-          !HAUtil.isLogicalUri(conf, uri)) {\n+      URI uri \u003d HAUtilClient.getServiceUriFromToken(\n+          HdfsConstants.HDFS_URI_SCHEME, token);\n+      if (HAUtilClient.isTokenForLogicalUri(token) \u0026\u0026\n+          !HAUtilClient.isLogicalUri(conf, uri)) {\n         // If the token is for a logical nameservice, but the configuration\n         // we have disagrees about that, we can\u0027t actually renew it.\n         // This can be the case in MR, for example, if the RM doesn\u0027t\n         // have all of the HA clusters configured in its configuration.\n         throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n             uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n             \"a failover proxy provider configured.\");\n       }\n       \n       NameNodeProxies.ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n         NameNodeProxies.createProxy(conf, uri, ClientProtocol.class);\n       assert info.getDelegationTokenService().equals(token.getService()) :\n         \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n         \"\u0027 doesn\u0027t match expected service \u0027\" +\n         token.getService().toString() + \"\u0027\";\n         \n       return info.getProxy();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static ClientProtocol getNNProxy(\n        Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n        throws IOException {\n      URI uri \u003d HAUtilClient.getServiceUriFromToken(\n          HdfsConstants.HDFS_URI_SCHEME, token);\n      if (HAUtilClient.isTokenForLogicalUri(token) \u0026\u0026\n          !HAUtilClient.isLogicalUri(conf, uri)) {\n        // If the token is for a logical nameservice, but the configuration\n        // we have disagrees about that, we can\u0027t actually renew it.\n        // This can be the case in MR, for example, if the RM doesn\u0027t\n        // have all of the HA clusters configured in its configuration.\n        throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n            uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n            \"a failover proxy provider configured.\");\n      }\n      \n      NameNodeProxies.ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n        NameNodeProxies.createProxy(conf, uri, ClientProtocol.class);\n      assert info.getDelegationTokenService().equals(token.getService()) :\n        \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n        \"\u0027 doesn\u0027t match expected service \u0027\" +\n        token.getService().toString() + \"\u0027\";\n        \n      return info.getProxy();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "aa4a045925649949b2eaa5b7238edbd742cbcf9a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6127. WebHDFS tokens cannot be renewed in HA setup. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579546 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/14 11:47 PM",
      "commitName": "aa4a045925649949b2eaa5b7238edbd742cbcf9a",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "12/03/14 3:54 PM",
      "commitNameOld": "b849dd5df9b5c2429f2ccd2b43a560724ca65b23",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 7.33,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     private static ClientProtocol getNNProxy(\n         Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n         throws IOException {\n-      URI uri \u003d HAUtil.getServiceUriFromToken(token);\n+      URI uri \u003d HAUtil.getServiceUriFromToken(HdfsConstants.HDFS_URI_SCHEME,\n+              token);\n       if (HAUtil.isTokenForLogicalUri(token) \u0026\u0026\n           !HAUtil.isLogicalUri(conf, uri)) {\n         // If the token is for a logical nameservice, but the configuration\n         // we have disagrees about that, we can\u0027t actually renew it.\n         // This can be the case in MR, for example, if the RM doesn\u0027t\n         // have all of the HA clusters configured in its configuration.\n         throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n             uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n             \"a failover proxy provider configured.\");\n       }\n       \n       NameNodeProxies.ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n         NameNodeProxies.createProxy(conf, uri, ClientProtocol.class);\n       assert info.getDelegationTokenService().equals(token.getService()) :\n         \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n         \"\u0027 doesn\u0027t match expected service \u0027\" +\n         token.getService().toString() + \"\u0027\";\n         \n       return info.getProxy();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static ClientProtocol getNNProxy(\n        Token\u003cDelegationTokenIdentifier\u003e token, Configuration conf)\n        throws IOException {\n      URI uri \u003d HAUtil.getServiceUriFromToken(HdfsConstants.HDFS_URI_SCHEME,\n              token);\n      if (HAUtil.isTokenForLogicalUri(token) \u0026\u0026\n          !HAUtil.isLogicalUri(conf, uri)) {\n        // If the token is for a logical nameservice, but the configuration\n        // we have disagrees about that, we can\u0027t actually renew it.\n        // This can be the case in MR, for example, if the RM doesn\u0027t\n        // have all of the HA clusters configured in its configuration.\n        throw new IOException(\"Unable to map logical nameservice URI \u0027\" +\n            uri + \"\u0027 to a NameNode. Local configuration does not have \" +\n            \"a failover proxy provider configured.\");\n      }\n      \n      NameNodeProxies.ProxyAndInfo\u003cClientProtocol\u003e info \u003d\n        NameNodeProxies.createProxy(conf, uri, ClientProtocol.class);\n      assert info.getDelegationTokenService().equals(token.getService()) :\n        \"Returned service \u0027\" + info.getDelegationTokenService().toString() +\n        \"\u0027 doesn\u0027t match expected service \u0027\" +\n        token.getService().toString() + \"\u0027\";\n        \n      return info.getProxy();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    }
  }
}