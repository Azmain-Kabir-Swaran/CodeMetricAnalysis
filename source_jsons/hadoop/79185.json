{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Path.java",
  "functionName": "toString",
  "functionId": "toString",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java",
  "functionStartLine": 454,
  "functionEndLine": 480,
  "numCommitsSeen": 35,
  "timeTaken": 1696,
  "changeHistory": [
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "0485fe23ba76f7d96a198aed00f392fd571124bc",
    "a5427fc7eb4155437261cbcf55144f6f82675809",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": "Ybodychange",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "0485fe23ba76f7d96a198aed00f392fd571124bc": "Ybodychange",
    "a5427fc7eb4155437261cbcf55144f6f82675809": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16029. Consecutive StringBuilder.append can be reused. Contributed by Ayush Saxena.\n",
      "commitDate": "11/01/19 10:54 AM",
      "commitName": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 197.55,
      "commitsBetweenForRepo": 1542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public String toString() {\n     // we can\u0027t use uri.toString(), which escapes everything, because we want\n     // illegal characters unescaped in the string, for glob processing, etc.\n     StringBuilder buffer \u003d new StringBuilder();\n     if (uri.getScheme() !\u003d null) {\n-      buffer.append(uri.getScheme());\n-      buffer.append(\":\");\n+      buffer.append(uri.getScheme())\n+          .append(\":\");\n     }\n     if (uri.getAuthority() !\u003d null) {\n-      buffer.append(\"//\");\n-      buffer.append(uri.getAuthority());\n+      buffer.append(\"//\")\n+          .append(uri.getAuthority());\n     }\n     if (uri.getPath() !\u003d null) {\n       String path \u003d uri.getPath();\n       if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n           hasWindowsDrive(path) \u0026\u0026                // has windows drive\n           uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n           uri.getAuthority() \u003d\u003d null)             // or authority\n         path \u003d path.substring(1);                 // remove slash before drive\n       buffer.append(path);\n     }\n     if (uri.getFragment() !\u003d null) {\n-      buffer.append(\"#\");\n-      buffer.append(uri.getFragment());\n+      buffer.append(\"#\")\n+          .append(uri.getFragment());\n     }\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuilder buffer \u003d new StringBuilder();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme())\n          .append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\")\n          .append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path) \u0026\u0026                // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\")\n          .append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {}
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "19/09/12 9:06 PM",
      "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 167.63,
      "commitsBetweenForRepo": 778,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public String toString() {\n     // we can\u0027t use uri.toString(), which escapes everything, because we want\n     // illegal characters unescaped in the string, for glob processing, etc.\n     StringBuilder buffer \u003d new StringBuilder();\n     if (uri.getScheme() !\u003d null) {\n       buffer.append(uri.getScheme());\n       buffer.append(\":\");\n     }\n     if (uri.getAuthority() !\u003d null) {\n       buffer.append(\"//\");\n       buffer.append(uri.getAuthority());\n     }\n     if (uri.getPath() !\u003d null) {\n       String path \u003d uri.getPath();\n       if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n-          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n+          hasWindowsDrive(path) \u0026\u0026                // has windows drive\n           uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n           uri.getAuthority() \u003d\u003d null)             // or authority\n         path \u003d path.substring(1);                 // remove slash before drive\n       buffer.append(path);\n     }\n     if (uri.getFragment() !\u003d null) {\n       buffer.append(\"#\");\n       buffer.append(uri.getFragment());\n     }\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuilder buffer \u003d new StringBuilder();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path) \u0026\u0026                // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\");\n      buffer.append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuilder buffer \u003d new StringBuilder();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\");\n      buffer.append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuilder buffer \u003d new StringBuilder();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\");\n      buffer.append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/Path.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuilder buffer \u003d new StringBuilder();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\");\n      buffer.append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/Path.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/Path.java"
      }
    },
    "0485fe23ba76f7d96a198aed00f392fd571124bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6471. StringBuffer -\u003e StringBuilder - conversion of references as necessary. Contributed by Kay Kay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@926256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/10 12:08 PM",
      "commitName": "0485fe23ba76f7d96a198aed00f392fd571124bc",
      "commitAuthor": "Thomas White",
      "commitDateOld": "10/03/10 1:24 PM",
      "commitNameOld": "74d409c4bb9638cabdf6141841ead719af20a423",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 11.91,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public String toString() {\n     // we can\u0027t use uri.toString(), which escapes everything, because we want\n     // illegal characters unescaped in the string, for glob processing, etc.\n-    StringBuffer buffer \u003d new StringBuffer();\n+    StringBuilder buffer \u003d new StringBuilder();\n     if (uri.getScheme() !\u003d null) {\n       buffer.append(uri.getScheme());\n       buffer.append(\":\");\n     }\n     if (uri.getAuthority() !\u003d null) {\n       buffer.append(\"//\");\n       buffer.append(uri.getAuthority());\n     }\n     if (uri.getPath() !\u003d null) {\n       String path \u003d uri.getPath();\n       if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n           hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n           uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n           uri.getAuthority() \u003d\u003d null)             // or authority\n         path \u003d path.substring(1);                 // remove slash before drive\n       buffer.append(path);\n     }\n     if (uri.getFragment() !\u003d null) {\n       buffer.append(\"#\");\n       buffer.append(uri.getFragment());\n     }\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuilder buffer \u003d new StringBuilder();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\");\n      buffer.append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "src/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {}
    },
    "a5427fc7eb4155437261cbcf55144f6f82675809": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6334.  Fix GenericOptionsParser and Path to have a better URI support.  Contributed by Amareshwari Sriramadasu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831412 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 11:21 AM",
      "commitName": "a5427fc7eb4155437261cbcf55144f6f82675809",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/09/09 3:27 PM",
      "commitNameOld": "0294c49df60150bd9b363af5cfbc312222c12c69",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 42.83,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   public String toString() {\n     // we can\u0027t use uri.toString(), which escapes everything, because we want\n     // illegal characters unescaped in the string, for glob processing, etc.\n     StringBuffer buffer \u003d new StringBuffer();\n     if (uri.getScheme() !\u003d null) {\n       buffer.append(uri.getScheme());\n       buffer.append(\":\");\n     }\n     if (uri.getAuthority() !\u003d null) {\n       buffer.append(\"//\");\n       buffer.append(uri.getAuthority());\n     }\n     if (uri.getPath() !\u003d null) {\n       String path \u003d uri.getPath();\n       if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n           hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n           uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n           uri.getAuthority() \u003d\u003d null)             // or authority\n         path \u003d path.substring(1);                 // remove slash before drive\n       buffer.append(path);\n     }\n+    if (uri.getFragment() !\u003d null) {\n+      buffer.append(\"#\");\n+      buffer.append(uri.getFragment());\n+    }\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuffer buffer \u003d new StringBuffer();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    if (uri.getFragment() !\u003d null) {\n      buffer.append(\"#\");\n      buffer.append(uri.getFragment());\n    }\n    return buffer.toString();\n  }",
      "path": "src/java/org/apache/hadoop/fs/Path.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,23 @@\n+  public String toString() {\n+    // we can\u0027t use uri.toString(), which escapes everything, because we want\n+    // illegal characters unescaped in the string, for glob processing, etc.\n+    StringBuffer buffer \u003d new StringBuffer();\n+    if (uri.getScheme() !\u003d null) {\n+      buffer.append(uri.getScheme());\n+      buffer.append(\":\");\n+    }\n+    if (uri.getAuthority() !\u003d null) {\n+      buffer.append(\"//\");\n+      buffer.append(uri.getAuthority());\n+    }\n+    if (uri.getPath() !\u003d null) {\n+      String path \u003d uri.getPath();\n+      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n+          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n+          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n+          uri.getAuthority() \u003d\u003d null)             // or authority\n+        path \u003d path.substring(1);                 // remove slash before drive\n+      buffer.append(path);\n+    }\n+    return buffer.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    // we can\u0027t use uri.toString(), which escapes everything, because we want\n    // illegal characters unescaped in the string, for glob processing, etc.\n    StringBuffer buffer \u003d new StringBuffer();\n    if (uri.getScheme() !\u003d null) {\n      buffer.append(uri.getScheme());\n      buffer.append(\":\");\n    }\n    if (uri.getAuthority() !\u003d null) {\n      buffer.append(\"//\");\n      buffer.append(uri.getAuthority());\n    }\n    if (uri.getPath() !\u003d null) {\n      String path \u003d uri.getPath();\n      if (path.indexOf(\u0027/\u0027)\u003d\u003d0 \u0026\u0026\n          hasWindowsDrive(path, true) \u0026\u0026          // has windows drive\n          uri.getScheme() \u003d\u003d null \u0026\u0026              // but no scheme\n          uri.getAuthority() \u003d\u003d null)             // or authority\n        path \u003d path.substring(1);                 // remove slash before drive\n      buffer.append(path);\n    }\n    return buffer.toString();\n  }",
      "path": "src/java/org/apache/hadoop/fs/Path.java"
    }
  }
}