{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "pread",
  "functionId": "pread___position-long__buffer-ByteBuffer",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 1473,
  "functionEndLine": 1522,
  "numCommitsSeen": 225,
  "timeTaken": 9414,
  "changeHistory": [
    "401db4fc65140979fe7665983e36905e886df971",
    "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
    "8808779db351fe444388d4acb3094766b5980718",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "bff5999d07e9416a22846c849487e509ede55040",
    "a42bb1cd915abe5dc33eda3c01e8c74c64f35748",
    "a97a1e73177974cff8afafad6ca43a96563f3c61",
    "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "401db4fc65140979fe7665983e36905e886df971": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b": "Ybodychange",
    "8808779db351fe444388d4acb3094766b5980718": "Ybodychange",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "bff5999d07e9416a22846c849487e509ede55040": "Ybodychange",
    "a42bb1cd915abe5dc33eda3c01e8c74c64f35748": "Ybodychange",
    "a97a1e73177974cff8afafad6ca43a96563f3c61": "Ybodychange",
    "7f6ed7fe365166e8075359f1d0ad035fa876c70f": "Ymultichange(Yrename,Ymodifierchange)",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "401db4fc65140979fe7665983e36905e886df971": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
      "commitDate": "08/09/16 11:54 AM",
      "commitName": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
          "commitDate": "08/09/16 11:54 AM",
          "commitName": "401db4fc65140979fe7665983e36905e886df971",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "24/08/16 6:57 AM",
          "commitNameOld": "793447f79924c97c2b562d5e41fa85adf19673fe",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 15.21,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,50 @@\n-  private int pread(long position, byte[] buffer, int offset, int length)\n+  private int pread(long position, ByteBuffer buffer)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n+    int length \u003d buffer.remaining();\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n-      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n+      int bytesToRead \u003d (int) Math.min(remaining,\n+          blk.getBlockSize() - targetStart);\n+      long targetEnd \u003d targetStart + bytesToRead - 1;\n       try {\n         if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n           hedgedFetchBlockByteRange(blk, targetStart,\n-              targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);\n+              targetEnd, buffer, corruptedBlocks);\n         } else {\n-          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n-              buffer, offset, corruptedBlocks);\n+          fetchBlockByteRange(blk, targetStart, targetEnd,\n+              buffer, corruptedBlocks);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n             false);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n-      offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     return realLen;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int pread(long position, ByteBuffer buffer)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int length \u003d buffer.remaining();\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n\n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      int bytesToRead \u003d (int) Math.min(remaining,\n          blk.getBlockSize() - targetStart);\n      long targetEnd \u003d targetStart + bytesToRead - 1;\n      try {\n        if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetEnd, buffer, corruptedBlocks);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetEnd,\n              buffer, corruptedBlocks);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n            false);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    return realLen;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[position-long, buffer-byte[], offset-int, length-int]",
            "newValue": "[position-long, buffer-ByteBuffer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
          "commitDate": "08/09/16 11:54 AM",
          "commitName": "401db4fc65140979fe7665983e36905e886df971",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "24/08/16 6:57 AM",
          "commitNameOld": "793447f79924c97c2b562d5e41fa85adf19673fe",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 15.21,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,50 @@\n-  private int pread(long position, byte[] buffer, int offset, int length)\n+  private int pread(long position, ByteBuffer buffer)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n+    int length \u003d buffer.remaining();\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n-      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n+      int bytesToRead \u003d (int) Math.min(remaining,\n+          blk.getBlockSize() - targetStart);\n+      long targetEnd \u003d targetStart + bytesToRead - 1;\n       try {\n         if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n           hedgedFetchBlockByteRange(blk, targetStart,\n-              targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);\n+              targetEnd, buffer, corruptedBlocks);\n         } else {\n-          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n-              buffer, offset, corruptedBlocks);\n+          fetchBlockByteRange(blk, targetStart, targetEnd,\n+              buffer, corruptedBlocks);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n             false);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n-      offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     return realLen;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int pread(long position, ByteBuffer buffer)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int length \u003d buffer.remaining();\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n\n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      int bytesToRead \u003d (int) Math.min(remaining,\n          blk.getBlockSize() - targetStart);\n      long targetEnd \u003d targetStart + bytesToRead - 1;\n      try {\n        if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetEnd, buffer, corruptedBlocks);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetEnd,\n              buffer, corruptedBlocks);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n            false);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    return realLen;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9579. Provide bytes-read-by-network-distance metrics at FileSystem.Statistics level (Ming Ma via sjlee)\n",
      "commitDate": "19/03/16 2:02 PM",
      "commitName": "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "25/02/16 9:55 AM",
      "commitNameOld": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 23.13,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,48 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n           hedgedFetchBlockByteRange(blk, targetStart,\n               targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n               buffer, offset, corruptedBlocks);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n             false);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n-    if (dfsClient.stats !\u003d null) {\n-      dfsClient.stats.incrementBytesRead(realLen);\n-    }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n\n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlocks);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n            false);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "8808779db351fe444388d4acb3094766b5980718": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
      "commitDate": "25/02/16 9:55 AM",
      "commitName": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "22/01/16 9:46 AM",
      "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 34.01,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n-    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \u003d new HashMap\u003c\u003e();\n+    CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n           hedgedFetchBlockByteRange(blk, targetStart,\n-              targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n+              targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n-              buffer, offset, corruptedBlockMap);\n+              buffer, offset, corruptedBlocks);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n-        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length,\n+        reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n             false);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n\n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    CorruptedBlocks corruptedBlocks \u003d new CorruptedBlocks();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetStart + bytesToRead - 1, buffer, offset, corruptedBlocks);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlocks);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlocks, blk.getLocations().length,\n            false);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
      "commitDate": "22/01/16 9:46 AM",
      "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "20/01/16 11:26 AM",
      "commitNameOld": "7905788db94d560e6668af0d4bed22b326961aaf",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \u003d new HashMap\u003c\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n           hedgedFetchBlockByteRange(blk, targetStart,\n               targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n               buffer, offset, corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n-        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n+        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length,\n+            false);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n\n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \u003d new HashMap\u003c\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length,\n            false);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n-    \n+\n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n-    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n-      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n+    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \u003d new HashMap\u003c\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n           hedgedFetchBlockByteRange(blk, targetStart,\n               targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n               buffer, offset, corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n\n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \u003d new HashMap\u003c\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled() \u0026\u0026 !blk.isStriped()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "bff5999d07e9416a22846c849487e509ede55040": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8703. Merge refactor of DFSInputStream from ErasureCoding branch (Contributed by Vinayakumar B)\n",
      "commitDate": "02/07/15 3:41 AM",
      "commitName": "bff5999d07e9416a22846c849487e509ede55040",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "04/06/15 10:51 AM",
      "commitNameOld": "ade6d9a61eb2e57a975f0efcdf8828d51ffec5fd",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 27.7,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n     \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled()) {\n-          hedgedFetchBlockByteRange(blk.getStartOffset(), targetStart,\n-              targetStart + bytesToRead - 1, buffer, offset,\n-              corruptedBlockMap);\n+          hedgedFetchBlockByteRange(blk, targetStart,\n+              targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n         } else {\n-          fetchBlockByteRange(blk.getStartOffset(), targetStart,\n-              targetStart + bytesToRead - 1, buffer, offset,\n-              corruptedBlockMap);\n+          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n+              buffer, offset, corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk, targetStart,\n              targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "a42bb1cd915abe5dc33eda3c01e8c74c64f35748": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8076. Code cleanup for DFSInputStream: use offset instead of LocatedBlock when possible. Contributed by Zhe Zhang.\n",
      "commitDate": "08/04/15 3:41 PM",
      "commitName": "a42bb1cd915abe5dc33eda3c01e8c74c64f35748",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "25/02/15 1:30 PM",
      "commitNameOld": "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 42.05,
      "commitsBetweenForRepo": 367,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n     \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled()) {\n-          hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n-              - 1, buffer, offset, corruptedBlockMap);\n+          hedgedFetchBlockByteRange(blk.getStartOffset(), targetStart,\n+              targetStart + bytesToRead - 1, buffer, offset,\n+              corruptedBlockMap);\n         } else {\n-          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n-              buffer, offset, corruptedBlockMap);\n+          fetchBlockByteRange(blk.getStartOffset(), targetStart,\n+              targetStart + bytesToRead - 1, buffer, offset,\n+              corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk.getStartOffset(), targetStart,\n              targetStart + bytesToRead - 1, buffer, offset,\n              corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk.getStartOffset(), targetStart,\n              targetStart + bytesToRead - 1, buffer, offset,\n              corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "a97a1e73177974cff8afafad6ca43a96563f3c61": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7494. Checking of closed in DFSInputStream#pread() should be protected by synchronization (Ted Yu via Colin P. McCabe)\n",
      "commitDate": "16/12/14 11:07 AM",
      "commitName": "a97a1e73177974cff8afafad6ca43a96563f3c61",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/12/14 8:57 PM",
      "commitNameOld": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 13.59,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private int pread(long position, byte[] buffer, int offset, int length)\n       throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n-    if (closed) {\n+    if (closed.get()) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n     \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled()) {\n           hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n               - 1, buffer, offset, corruptedBlockMap);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n               buffer, offset, corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed.get()) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n              - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "7f6ed7fe365166e8075359f1d0ad035fa876c70f": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "HDFS-7055. Add tracing to DFSInputStream (cmccabe)\n",
      "commitDate": "03/10/14 1:35 PM",
      "commitName": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7055. Add tracing to DFSInputStream (cmccabe)\n",
          "commitDate": "03/10/14 1:35 PM",
          "commitName": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "15/07/14 2:10 PM",
          "commitNameOld": "56c0bd4d37ab13b6cbcf860eda852da603ab2f62",
          "commitAuthorOld": "",
          "daysBetweenCommits": 79.98,
          "commitsBetweenForRepo": 820,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public int read(long position, byte[] buffer, int offset, int length)\n-    throws IOException {\n+  private int pread(long position, byte[] buffer, int offset, int length)\n+      throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n     \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled()) {\n           hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n               - 1, buffer, offset, corruptedBlockMap);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n               buffer, offset, corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n              - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "read",
            "newValue": "pread"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7055. Add tracing to DFSInputStream (cmccabe)\n",
          "commitDate": "03/10/14 1:35 PM",
          "commitName": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "15/07/14 2:10 PM",
          "commitNameOld": "56c0bd4d37ab13b6cbcf860eda852da603ab2f62",
          "commitAuthorOld": "",
          "daysBetweenCommits": 79.98,
          "commitsBetweenForRepo": 820,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public int read(long position, byte[] buffer, int offset, int length)\n-    throws IOException {\n+  private int pread(long position, byte[] buffer, int offset, int length)\n+      throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n     \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n         if (dfsClient.isHedgedReadsEnabled()) {\n           hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n               - 1, buffer, offset, corruptedBlockMap);\n         } else {\n           fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n               buffer, offset, corruptedBlockMap);\n         }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int pread(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n              - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5776 Support \u0027hedged\u0027 reads in DFSClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 2:34 PM",
      "commitName": "17db74a1c1972392a5aba48a3e0334dcd6c76487",
      "commitAuthor": "Michael Stack",
      "commitDateOld": "12/02/14 11:08 AM",
      "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 12.14,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,51 @@\n   public int read(long position, byte[] buffer, int offset, int length)\n     throws IOException {\n     // sanity checks\n     dfsClient.checkOpen();\n     if (closed) {\n       throw new IOException(\"Stream closed\");\n     }\n     failures \u003d 0;\n     long filelen \u003d getFileLength();\n     if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n       return -1;\n     }\n     int realLen \u003d length;\n     if ((position + length) \u003e filelen) {\n       realLen \u003d (int)(filelen - position);\n     }\n     \n     // determine the block and byte range within the block\n     // corresponding to position and realLen\n     List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n     int remaining \u003d realLen;\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     for (LocatedBlock blk : blockRange) {\n       long targetStart \u003d position - blk.getStartOffset();\n       long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n       try {\n-        fetchBlockByteRange(blk, targetStart, \n-            targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n+        if (dfsClient.isHedgedReadsEnabled()) {\n+          hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n+              - 1, buffer, offset, corruptedBlockMap);\n+        } else {\n+          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n+              buffer, offset, corruptedBlockMap);\n+        }\n       } finally {\n         // Check and report if any block replicas are corrupted.\n         // BlockMissingException may be caught if all block replicas are\n         // corrupted.\n         reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n       }\n \n       remaining -\u003d bytesToRead;\n       position +\u003d bytesToRead;\n       offset +\u003d bytesToRead;\n     }\n     assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n     if (dfsClient.stats !\u003d null) {\n       dfsClient.stats.incrementBytesRead(realLen);\n     }\n     return realLen;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n    throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        if (dfsClient.isHedgedReadsEnabled()) {\n          hedgedFetchBlockByteRange(blk, targetStart, targetStart + bytesToRead\n              - 1, buffer, offset, corruptedBlockMap);\n        } else {\n          fetchBlockByteRange(blk, targetStart, targetStart + bytesToRead - 1,\n              buffer, offset, corruptedBlockMap);\n        }\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n    throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        fetchBlockByteRange(blk, targetStart, \n            targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n    throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        fetchBlockByteRange(blk, targetStart, \n            targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  public int read(long position, byte[] buffer, int offset, int length)\n+    throws IOException {\n+    // sanity checks\n+    dfsClient.checkOpen();\n+    if (closed) {\n+      throw new IOException(\"Stream closed\");\n+    }\n+    failures \u003d 0;\n+    long filelen \u003d getFileLength();\n+    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n+      return -1;\n+    }\n+    int realLen \u003d length;\n+    if ((position + length) \u003e filelen) {\n+      realLen \u003d (int)(filelen - position);\n+    }\n+    \n+    // determine the block and byte range within the block\n+    // corresponding to position and realLen\n+    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n+    int remaining \u003d realLen;\n+    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n+      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n+    for (LocatedBlock blk : blockRange) {\n+      long targetStart \u003d position - blk.getStartOffset();\n+      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n+      try {\n+        fetchBlockByteRange(blk, targetStart, \n+            targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n+      } finally {\n+        // Check and report if any block replicas are corrupted.\n+        // BlockMissingException may be caught if all block replicas are\n+        // corrupted.\n+        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n+      }\n+\n+      remaining -\u003d bytesToRead;\n+      position +\u003d bytesToRead;\n+      offset +\u003d bytesToRead;\n+    }\n+    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n+    if (dfsClient.stats !\u003d null) {\n+      dfsClient.stats.incrementBytesRead(realLen);\n+    }\n+    return realLen;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n    throws IOException {\n    // sanity checks\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    failures \u003d 0;\n    long filelen \u003d getFileLength();\n    if ((position \u003c 0) || (position \u003e\u003d filelen)) {\n      return -1;\n    }\n    int realLen \u003d length;\n    if ((position + length) \u003e filelen) {\n      realLen \u003d (int)(filelen - position);\n    }\n    \n    // determine the block and byte range within the block\n    // corresponding to position and realLen\n    List\u003cLocatedBlock\u003e blockRange \u003d getBlockRange(position, realLen);\n    int remaining \u003d realLen;\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    for (LocatedBlock blk : blockRange) {\n      long targetStart \u003d position - blk.getStartOffset();\n      long bytesToRead \u003d Math.min(remaining, blk.getBlockSize() - targetStart);\n      try {\n        fetchBlockByteRange(blk, targetStart, \n            targetStart + bytesToRead - 1, buffer, offset, corruptedBlockMap);\n      } finally {\n        // Check and report if any block replicas are corrupted.\n        // BlockMissingException may be caught if all block replicas are\n        // corrupted.\n        reportCheckSumFailure(corruptedBlockMap, blk.getLocations().length);\n      }\n\n      remaining -\u003d bytesToRead;\n      position +\u003d bytesToRead;\n      offset +\u003d bytesToRead;\n    }\n    assert remaining \u003d\u003d 0 : \"Wrong number of bytes read.\";\n    if (dfsClient.stats !\u003d null) {\n      dfsClient.stats.incrementBytesRead(realLen);\n    }\n    return realLen;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}