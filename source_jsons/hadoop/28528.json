{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppAttemptBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
  "functionStartLine": 64,
  "functionEndLine": 195,
  "numCommitsSeen": 19,
  "timeTaken": 4975,
  "changeHistory": [
    "433e97cd34f0569f8ae7d165a27449d0b7f8bac8",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "722ee841948db1f246f0056acec9a1ac464fe1f9",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "0d3188fd25f31b83caf16b77773620f4ee237409",
    "1fa8075794894b3e0053d251788277fb88e85533",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6",
    "4e886eb9cbd2dcb128bbfd17309c734083093a4c",
    "658097d6da1b1aac8e01db459f0c3b456e99652f",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b",
    "c3003eba6f9802f15699564a5eb7c6e34424cb14",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "8314674947ec087899d2515ae6b668c6c39cabbd",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "433e97cd34f0569f8ae7d165a27449d0b7f8bac8": "Ybodychange",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "722ee841948db1f246f0056acec9a1ac464fe1f9": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "0d3188fd25f31b83caf16b77773620f4ee237409": "Ybodychange",
    "1fa8075794894b3e0053d251788277fb88e85533": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Ybodychange",
    "4e886eb9cbd2dcb128bbfd17309c734083093a4c": "Ybodychange",
    "658097d6da1b1aac8e01db459f0c3b456e99652f": "Ybodychange",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": "Ybodychange",
    "c3003eba6f9802f15699564a5eb7c6e34424cb14": "Ybodychange",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ybodychange",
    "8314674947ec087899d2515ae6b668c6c39cabbd": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "433e97cd34f0569f8ae7d165a27449d0b7f8bac8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9600. Support self-adaption width for columns of containers table on app attempt page. Contributed by Tao Yang.\n",
      "commitDate": "04/06/19 10:55 PM",
      "commitName": "433e97cd34f0569f8ae7d165a27449d0b7f8bac8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "13/07/18 8:42 AM",
      "commitNameOld": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 326.59,
      "commitsBetweenForRepo": 2461,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,132 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             getApplicationAttemptReport(request);\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return getApplicationAttemptReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d getContainers(request);\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  getContainers(request);\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         .__(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\").__();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html.__(InfoBlock.class);\n \n     createTablesForAttemptMetrics(html);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n-        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n+        html.table(\"#containers\").$style(\"width:100%\")\n+          .thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\").__().__().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeEcmaScript(StringEscapeUtils\n                 .escapeHtml4(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var containersTableData\u003d\" + containersTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            getApplicationAttemptReport(request);\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return getApplicationAttemptReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d getContainers(request);\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  getContainers(request);\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        .__(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\").__();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html.__(InfoBlock.class);\n\n    createTablesForAttemptMetrics(html);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").$style(\"width:100%\")\n          .thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\").__().__().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeEcmaScript(StringEscapeUtils\n                .escapeHtml4(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var containersTableData\u003d\" + containersTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "03/10/17 2:06 PM",
      "commitNameOld": "4a877737182808fe3392a116762ba59973a477a6",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 251.77,
      "commitsBetweenForRepo": 2389,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,131 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             getApplicationAttemptReport(request);\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return getApplicationAttemptReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d getContainers(request);\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  getContainers(request);\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         .__(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\").__();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html.__(InfoBlock.class);\n \n     createTablesForAttemptMetrics(html);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\").__().__().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n-            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n-                .escapeHtml(container.getNodeHttpAddress())))\n+            StringEscapeUtils.escapeEcmaScript(StringEscapeUtils\n+                .escapeHtml4(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var containersTableData\u003d\" + containersTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            getApplicationAttemptReport(request);\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return getApplicationAttemptReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d getContainers(request);\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  getContainers(request);\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        .__(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\").__();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html.__(InfoBlock.class);\n\n    createTablesForAttemptMetrics(html);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\").__().__().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeEcmaScript(StringEscapeUtils\n                .escapeHtml4(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var containersTableData\u003d\" + containersTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "722ee841948db1f246f0056acec9a1ac464fe1f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7163. RMContext need not to be injected to webapp and other Always Running services. Contributed by Rohith Sharma K S.\n",
      "commitDate": "10/09/17 9:58 PM",
      "commitName": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 45.2,
      "commitsBetweenForRepo": 399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,131 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n-            appBaseProt.getApplicationAttemptReport(request)\n-              .getApplicationAttemptReport();\n+            getApplicationAttemptReport(request);\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n-            return appBaseProt.getApplicationAttemptReport(request)\n-                .getApplicationAttemptReport();\n+            return getApplicationAttemptReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n-        containers \u003d appBaseProt.getContainers(request).getContainerList();\n+        containers \u003d getContainers(request);\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n-            return  appBaseProt.getContainers(request).getContainerList();\n+            return  getContainers(request);\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         .__(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\").__();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html.__(InfoBlock.class);\n \n     createTablesForAttemptMetrics(html);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\").__().__().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var containersTableData\u003d\" + containersTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            getApplicationAttemptReport(request);\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return getApplicationAttemptReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d getContainers(request);\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  getContainers(request);\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        .__(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\").__();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html.__(InfoBlock.class);\n\n    createTablesForAttemptMetrics(html);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\").__().__().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var containersTableData\u003d\" + containersTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 408.09,
      "commitsBetweenForRepo": 2572,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,133 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n-      html.p()._(message)._();\n+      html.p().__(message).__();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n-        ._(\n+        .__(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n-              + \".\")._();\n+              + \".\").__();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n-    html._(InfoBlock.class);\n+    html.__(InfoBlock.class);\n \n     createTablesForAttemptMetrics(html);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n-          .th(\".logs\", \"Logs\")._()._().tbody();\n+          .th(\".logs\", \"Logs\").__().__().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n-      ._(\"var containersTableData\u003d\" + containersTableData)._();\n+      .__(\"var containersTableData\u003d\" + containersTableData).__();\n \n-    tbody._()._();\n+    tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        .__(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\").__();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html.__(InfoBlock.class);\n\n    createTablesForAttemptMetrics(html);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\").__().__().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var containersTableData\u003d\" + containersTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/05/15 1:45 PM",
      "commitNameOld": "0d3188fd25f31b83caf16b77773620f4ee237409",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 405.06,
      "commitsBetweenForRepo": 2947,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,133 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n-      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n+      appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html._(InfoBlock.class);\n \n     createTablesForAttemptMetrics(html);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ApplicationAttemptId.fromString(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html._(InfoBlock.class);\n\n    createTablesForAttemptMetrics(html);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "0d3188fd25f31b83caf16b77773620f4ee237409": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3301. Fixed the format issue of the new RM attempt web page. Contributed by Xuan Gong\n",
      "commitDate": "06/05/15 1:45 PM",
      "commitName": "0d3188fd25f31b83caf16b77773620f4ee237409",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/04/15 8:04 AM",
      "commitNameOld": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 20.24,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,133 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html._(InfoBlock.class);\n \n+    createTablesForAttemptMetrics(html);\n+\n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html._(InfoBlock.class);\n\n    createTablesForAttemptMetrics(html);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "1fa8075794894b3e0053d251788277fb88e85533": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6300. Task list sort by task id broken. Contributed by Siqi Li.\n",
      "commitDate": "16/04/15 8:04 AM",
      "commitName": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/04/15 8:22 AM",
      "commitNameOld": "19a4feaf6fcf42ebbfe98b8a7153ade96d37fb14",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,131 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html._(InfoBlock.class);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n-      // ConatinerID numerical value parsed by parseHadoopID in\n-      // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html._(InfoBlock.class);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "commitDateOld": "19/03/15 10:27 PM",
      "commitNameOld": "4e886eb9cbd2dcb128bbfd17309c734083093a4c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 12.24,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,160 +1,133 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n-    ApplicationAttemptReport appAttemptReport \u003d null;\n+    ApplicationAttemptReport appAttemptReport;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n-    info(\"Application Attempt Overview\")\n-      ._(\n-        \"Application Attempt State:\",\n-        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n-          .getAppAttemptState())\n-      ._(\n-        \"AM Container:\",\n-        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n-            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n-            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n-        String.valueOf(appAttempt.getAmContainerId()))\n-      ._(\"Node:\", node)\n-      ._(\n-        \"Tracking URL:\",\n-        appAttempt.getTrackingUrl() \u003d\u003d null\n-            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n-            : root_url(appAttempt.getTrackingUrl()),\n-        appAttempt.getTrackingUrl() \u003d\u003d null\n-            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n-            ? \"Unassigned\"\n-            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n-                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n-                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n-                ? \"History\" : \"ApplicationMaster\")\n-      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n-          \"\" : appAttempt.getDiagnosticsInfo());\n-\n-\n+    generateOverview(appAttemptReport, containers, appAttempt, node);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     createAttemptHeadRoomTable(html);\n     html._(InfoBlock.class);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    generateOverview(appAttemptReport, containers, appAttempt, node);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html._(InfoBlock.class);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "4e886eb9cbd2dcb128bbfd17309c734083093a4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3379. Fixed missing data in localityTable and ResourceRequests table in RM WebUI. Contributed by Xuan Gong\n",
      "commitDate": "19/03/15 10:27 PM",
      "commitName": "4e886eb9cbd2dcb128bbfd17309c734083093a4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 9:30 PM",
      "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,176 +1,160 @@\n   protected void render(Block html) {\n-    String webUiType \u003d $(WEB_UI_TYPE);\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n-    ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport \u003d null;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n       ._(\n         \"Application Attempt State:\",\n         appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n           .getAppAttemptState())\n       ._(\n         \"AM Container:\",\n         appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n             || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n             ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n             : root_url(appAttempt.getTrackingUrl()),\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\"\n             : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                 ? \"History\" : \"ApplicationMaster\")\n       ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : appAttempt.getDiagnosticsInfo());\n \n \n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n-    // TODO need to render applicationHeadRoom value from\n-    // ApplicationAttemptMetrics after YARN-3284\n-    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n-      if (!isApplicationInFinalState(appAttempt.getAppAttemptState())) {\n-        DIV\u003cHamlet\u003e pdiv \u003d html._(InfoBlock.class).div(_INFO_WRAP);\n-        info(\"Application Attempt Overview\").clear();\n-        info(\"Application Attempt Metrics\")._(\n-            \"Application Attempt Headroom : \", 0);\n-        pdiv._();\n-      }\n-    }\n+    createAttemptHeadRoomTable(html);\n     html._(InfoBlock.class);\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n-\n-    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n-      createContainerLocalityTable(html); // TODO:YARN-3284\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport \u003d null;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\n        \"Application Attempt State:\",\n        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n          .getAppAttemptState())\n      ._(\n        \"AM Container:\",\n        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n            : root_url(appAttempt.getTrackingUrl()),\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\"\n            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                ? \"History\" : \"ApplicationMaster\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : appAttempt.getDiagnosticsInfo());\n\n\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    createAttemptHeadRoomTable(html);\n    html._(InfoBlock.class);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "658097d6da1b1aac8e01db459f0c3b456e99652f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3273. Improve scheduler UI to facilitate scheduling analysis and debugging. Contributed Rohith Sharmaks\n",
      "commitDate": "17/03/15 9:30 PM",
      "commitName": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/03/15 7:35 PM",
      "commitNameOld": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 6.08,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,163 +1,176 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport \u003d null;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n       ._(\n         \"Application Attempt State:\",\n         appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n           .getAppAttemptState())\n       ._(\n         \"AM Container:\",\n         appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n             || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n             ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n             : root_url(appAttempt.getTrackingUrl()),\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\"\n             : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                 ? \"History\" : \"ApplicationMaster\")\n       ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : appAttempt.getDiagnosticsInfo());\n \n-    html._(InfoBlock.class);\n+\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n+    // TODO need to render applicationHeadRoom value from\n+    // ApplicationAttemptMetrics after YARN-3284\n+    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n+      if (!isApplicationInFinalState(appAttempt.getAppAttemptState())) {\n+        DIV\u003cHamlet\u003e pdiv \u003d html._(InfoBlock.class).div(_INFO_WRAP);\n+        info(\"Application Attempt Overview\").clear();\n+        info(\"Application Attempt Metrics\")._(\n+            \"Application Attempt Headroom : \", 0);\n+        pdiv._();\n+      }\n+    }\n+    html._(InfoBlock.class);\n+\n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(\n           container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n               + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n         .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n \n     if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       createContainerLocalityTable(html); // TODO:YARN-3284\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport \u003d null;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\n        \"Application Attempt State:\",\n        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n          .getAppAttemptState())\n      ._(\n        \"AM Container:\",\n        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n            : root_url(appAttempt.getTrackingUrl()),\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\"\n            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                ? \"History\" : \"ApplicationMaster\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : appAttempt.getDiagnosticsInfo());\n\n\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // TODO need to render applicationHeadRoom value from\n    // ApplicationAttemptMetrics after YARN-3284\n    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      if (!isApplicationInFinalState(appAttempt.getAppAttemptState())) {\n        DIV\u003cHamlet\u003e pdiv \u003d html._(InfoBlock.class).div(_INFO_WRAP);\n        info(\"Application Attempt Overview\").clear();\n        info(\"Application Attempt Metrics\")._(\n            \"Application Attempt Headroom : \", 0);\n        pdiv._();\n      }\n    }\n    html._(InfoBlock.class);\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n\n    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      createContainerLocalityTable(html); // TODO:YARN-3284\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1884. Added nodeHttpAddress into ContainerReport and fixed the link to NM web page. Contributed by Xuan Gong.\n",
      "commitDate": "11/03/15 7:35 PM",
      "commitName": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "09/03/15 8:46 PM",
      "commitNameOld": "c3003eba6f9802f15699564a5eb7c6e34424cb14",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,161 +1,163 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport \u003d null;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n       ._(\n         \"Application Attempt State:\",\n         appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n           .getAppAttemptState())\n       ._(\n         \"AM Container:\",\n         appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n             || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n             ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n             : root_url(appAttempt.getTrackingUrl()),\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\"\n             : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                 ? \"History\" : \"ApplicationMaster\")\n       ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : appAttempt.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n-        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n+        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n+        .append(\n+          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n+              + container.getNodeHttpAddress())\n         .append(\"\u0027\u003e\")\n-        .append(container.getAssignedNodeId() \u003d\u003d null ? \"N/A\" :\n+        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n-                .escapeHtml(container.getAssignedNodeId())))\n+                .escapeHtml(container.getNodeHttpAddress())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n \n     if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       createContainerLocalityTable(html); // TODO:YARN-3284\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport \u003d null;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\n        \"Application Attempt State:\",\n        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n          .getAppAttemptState())\n      ._(\n        \"AM Container:\",\n        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n            : root_url(appAttempt.getTrackingUrl()),\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\"\n            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                ? \"History\" : \"ApplicationMaster\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : appAttempt.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(\n          container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : \"href\u003d\u0027\"\n              + container.getNodeHttpAddress())\n        .append(\"\u0027\u003e\")\n        .append(container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getNodeHttpAddress())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n\n    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      createContainerLocalityTable(html); // TODO:YARN-3284\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "c3003eba6f9802f15699564a5eb7c6e34424cb14": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3300. Outstanding_resource_requests table should not be shown in AHS. Contributed by Xuan Gong\n",
      "commitDate": "09/03/15 8:46 PM",
      "commitName": "c3003eba6f9802f15699564a5eb7c6e34424cb14",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/03/15 9:20 PM",
      "commitNameOld": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.94,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,156 +1,161 @@\n   protected void render(Block html) {\n+    String webUiType \u003d $(WEB_UI_TYPE);\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport \u003d null;\n     try {\n       final GetApplicationAttemptReportRequest request \u003d\n           GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         appAttemptReport \u003d\n             appBaseProt.getApplicationAttemptReport(request)\n               .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n             return appBaseProt.getApplicationAttemptReport(request)\n                 .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n \n     boolean exceptionWhenGetContainerReports \u003d false;\n     Collection\u003cContainerReport\u003e containers \u003d null;\n     try {\n       final GetContainersRequest request \u003d\n           GetContainersRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n         containers \u003d appBaseProt.getContainers(request).getContainerList();\n       } else {\n         containers \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n           @Override\n           public Collection\u003cContainerReport\u003e run() throws Exception {\n             return  appBaseProt.getContainers(request).getContainerList();\n           }\n         });\n       }\n     } catch (RuntimeException e) {\n       // have this block to suppress the findbugs warning\n       exceptionWhenGetContainerReports \u003d true;\n     } catch (Exception e) {\n       exceptionWhenGetContainerReports \u003d true;\n     }\n \n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n       ._(\n         \"Application Attempt State:\",\n         appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n           .getAppAttemptState())\n       ._(\n         \"AM Container:\",\n         appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n             || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n             ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n             : root_url(appAttempt.getTrackingUrl()),\n         appAttempt.getTrackingUrl() \u003d\u003d null\n             || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\"\n             : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                 || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                 ? \"History\" : \"ApplicationMaster\")\n       ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : appAttempt.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(\"#\") // TODO: replace with node http address (YARN-1884)\n         .append(\"\u0027\u003e\")\n         .append(container.getAssignedNodeId() \u003d\u003d null ? \"N/A\" :\n             StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                 .escapeHtml(container.getAssignedNodeId())))\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n+\n+    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n+      createContainerLocalityTable(html); // TODO:YARN-3284\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport \u003d null;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\n        \"Application Attempt State:\",\n        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n          .getAppAttemptState())\n      ._(\n        \"AM Container:\",\n        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n            : root_url(appAttempt.getTrackingUrl()),\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\"\n            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                ? \"History\" : \"ApplicationMaster\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : appAttempt.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n        .append(\"\u0027\u003e\")\n        .append(container.getAssignedNodeId() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getAssignedNodeId())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n\n    if (webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      createContainerLocalityTable(html); // TODO:YARN-3284\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong\n",
      "commitDate": "05/03/15 9:20 PM",
      "commitName": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 175.14,
      "commitsBetweenForRepo": 1474,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,134 +1,156 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n-    final ApplicationAttemptId appAttemptIdFinal \u003d appAttemptId;\n     UserGroupInformation callerUGI \u003d getCallerUGI();\n-    ApplicationAttemptReport appAttemptReport;\n+    ApplicationAttemptReport appAttemptReport \u003d null;\n     try {\n+      final GetApplicationAttemptReportRequest request \u003d\n+          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n       if (callerUGI \u003d\u003d null) {\n-        appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n+        appAttemptReport \u003d\n+            appBaseProt.getApplicationAttemptReport(request)\n+              .getApplicationAttemptReport();\n       } else {\n         appAttemptReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n           @Override\n           public ApplicationAttemptReport run() throws Exception {\n-            return appContext.getApplicationAttempt(appAttemptIdFinal);\n+            return appBaseProt.getApplicationAttemptReport(request)\n+                .getApplicationAttemptReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n+\n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n+\n+    boolean exceptionWhenGetContainerReports \u003d false;\n+    Collection\u003cContainerReport\u003e containers \u003d null;\n+    try {\n+      final GetContainersRequest request \u003d\n+          GetContainersRequest.newInstance(appAttemptId);\n+      if (callerUGI \u003d\u003d null) {\n+        containers \u003d appBaseProt.getContainers(request).getContainerList();\n+      } else {\n+        containers \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n+          @Override\n+          public Collection\u003cContainerReport\u003e run() throws Exception {\n+            return  appBaseProt.getContainers(request).getContainerList();\n+          }\n+        });\n+      }\n+    } catch (RuntimeException e) {\n+      // have this block to suppress the findbugs warning\n+      exceptionWhenGetContainerReports \u003d true;\n+    } catch (Exception e) {\n+      exceptionWhenGetContainerReports \u003d true;\n+    }\n+\n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n-      ._(\"State\", appAttempt.getAppAttemptState())\n       ._(\n-        \"Master Container\",\n-        appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n-          appAttempt.getAmContainerId()),\n+        \"Application Attempt State:\",\n+        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n+          .getAppAttemptState())\n+      ._(\n+        \"AM Container:\",\n+        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n+            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n+            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n-        appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n-          .getTrackingUrl()), \"History\")\n-      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n+        appAttempt.getTrackingUrl() \u003d\u003d null\n+            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n+            : root_url(appAttempt.getTrackingUrl()),\n+        appAttempt.getTrackingUrl() \u003d\u003d null\n+            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n+            ? \"Unassigned\"\n+            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n+                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n+                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n+                ? \"History\" : \"ApplicationMaster\")\n+      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n+          \"\" : appAttempt.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n-    Collection\u003cContainerReport\u003e containers;\n-    try {\n-      if (callerUGI \u003d\u003d null) {\n-        containers \u003d appContext.getContainers(appAttemptId).values();\n-      } else {\n-        containers \u003d callerUGI.doAs(\n-            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n-          @Override\n-          public Collection\u003cContainerReport\u003e run() throws Exception {\n-            return  appContext.getContainers(appAttemptIdFinal).values();\n-          }\n-        });\n-      }\n-    } catch (RuntimeException e) {\n-      // have this block to suppress the findbugs warning\n-      html\n-      .p()\n-      ._(\n-        \"Sorry, Failed to get containers for application attempt\" + attemptid\n-            + \".\")._();\n-      return;\n-    } catch (Exception e) {\n+    if (exceptionWhenGetContainerReports) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(container.getAssignedNodeId())\n+        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n         .append(\"\u0027\u003e\")\n-        .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n-            .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n+        .append(container.getAssignedNodeId() \u003d\u003d null ? \"N/A\" :\n+            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n+                .escapeHtml(container.getAssignedNodeId())))\n+        .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport \u003d null;\n    try {\n      final GetApplicationAttemptReportRequest request \u003d\n          GetApplicationAttemptReportRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d\n            appBaseProt.getApplicationAttemptReport(request)\n              .getApplicationAttemptReport();\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appBaseProt.getApplicationAttemptReport(request)\n                .getApplicationAttemptReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n\n    boolean exceptionWhenGetContainerReports \u003d false;\n    Collection\u003cContainerReport\u003e containers \u003d null;\n    try {\n      final GetContainersRequest request \u003d\n          GetContainersRequest.newInstance(appAttemptId);\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appBaseProt.getContainers(request).getContainerList();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appBaseProt.getContainers(request).getContainerList();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      exceptionWhenGetContainerReports \u003d true;\n    } catch (Exception e) {\n      exceptionWhenGetContainerReports \u003d true;\n    }\n\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\n        \"Application Attempt State:\",\n        appAttempt.getAppAttemptState() \u003d\u003d null ? UNAVAILABLE : appAttempt\n          .getAppAttemptState())\n      ._(\n        \"AM Container:\",\n        appAttempt.getAmContainerId() \u003d\u003d null || containers \u003d\u003d null\n            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)\n            ? null : root_url(\"container\", appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE ? null\n            : root_url(appAttempt.getTrackingUrl()),\n        appAttempt.getTrackingUrl() \u003d\u003d null\n            || appAttempt.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\"\n            : appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FINISHED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.FAILED\n                || appAttempt.getAppAttemptState() \u003d\u003d YarnApplicationAttemptState.KILLED\n                ? \"History\" : \"ApplicationMaster\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : appAttempt.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    if (exceptionWhenGetContainerReports) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n        .append(\"\u0027\u003e\")\n        .append(container.getAssignedNodeId() \u003d\u003d null ? \"N/A\" :\n            StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n                .escapeHtml(container.getAssignedNodeId())))\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "17/03/14 2:36 PM",
      "commitNameOld": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 178.19,
      "commitsBetweenForRepo": 1264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,134 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n+    final ApplicationAttemptId appAttemptIdFinal \u003d appAttemptId;\n+    UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationAttemptReport appAttemptReport;\n     try {\n-      appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n+      } else {\n+        appAttemptReport \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n+          @Override\n+          public ApplicationAttemptReport run() throws Exception {\n+            return appContext.getApplicationAttempt(appAttemptIdFinal);\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n       ._(\"State\", appAttempt.getAppAttemptState())\n       ._(\n         \"Master Container\",\n         appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n           appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n         appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n           .getTrackingUrl()), \"History\")\n       ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     Collection\u003cContainerReport\u003e containers;\n     try {\n-      containers \u003d appContext.getContainers(appAttemptId).values();\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        containers \u003d appContext.getContainers(appAttemptId).values();\n+      } else {\n+        containers \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n+          @Override\n+          public Collection\u003cContainerReport\u003e run() throws Exception {\n+            return  appContext.getContainers(appAttemptIdFinal).values();\n+          }\n+        });\n+      }\n+    } catch (RuntimeException e) {\n+      // have this block to suppress the findbugs warning\n+      html\n+      .p()\n+      ._(\n+        \"Sorry, Failed to get containers for application attempt\" + attemptid\n+            + \".\")._();\n+      return;\n+    } catch (Exception e) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getAssignedNodeId())\n         .append(\"\u0027\u003e\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n             .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n         .append(container.getLogUrl() \u003d\u003d null ?\n             \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    final ApplicationAttemptId appAttemptIdFinal \u003d appAttemptId;\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n      } else {\n        appAttemptReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationAttemptReport\u003e () {\n          @Override\n          public ApplicationAttemptReport run() throws Exception {\n            return appContext.getApplicationAttempt(appAttemptIdFinal);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\"State\", appAttempt.getAppAttemptState())\n      ._(\n        \"Master Container\",\n        appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n          appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n          .getTrackingUrl()), \"History\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cContainerReport\u003e containers;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        containers \u003d appContext.getContainers(appAttemptId).values();\n      } else {\n        containers \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cContainerReport\u003e\u003e () {\n          @Override\n          public Collection\u003cContainerReport\u003e run() throws Exception {\n            return  appContext.getContainers(appAttemptIdFinal).values();\n          }\n        });\n      }\n    } catch (RuntimeException e) {\n      // have this block to suppress the findbugs warning\n      html\n      .p()\n      ._(\n        \"Sorry, Failed to get containers for application attempt\" + attemptid\n            + \".\")._();\n      return;\n    } catch (Exception e) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getAssignedNodeId())\n        .append(\"\u0027\u003e\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n            .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "8314674947ec087899d2515ae6b668c6c39cabbd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1685. Fixed few bugs related to handling of containers\u0027 log-URLs on ResourceManager and history-service. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 2:36 PM",
      "commitName": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 50.7,
      "commitsBetweenForRepo": 471,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,104 @@\n   protected void render(Block html) {\n     String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n     if (attemptid.isEmpty()) {\n       puts(\"Bad request: requires application attempt ID\");\n       return;\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     try {\n       appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid application attempt ID: \" + attemptid);\n       return;\n     }\n \n     ApplicationAttemptReport appAttemptReport;\n     try {\n       appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n     } catch (IOException e) {\n       String message \u003d\n           \"Failed to read the application attempt \" + appAttemptId + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (appAttemptReport \u003d\u003d null) {\n       puts(\"Application Attempt not found: \" + attemptid);\n       return;\n     }\n     AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n \n     setTitle(join(\"Application Attempt \", attemptid));\n \n     String node \u003d \"N/A\";\n     if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n         \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n       node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n     }\n     info(\"Application Attempt Overview\")\n       ._(\"State\", appAttempt.getAppAttemptState())\n       ._(\n         \"Master Container\",\n         appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n           appAttempt.getAmContainerId()),\n         String.valueOf(appAttempt.getAmContainerId()))\n       ._(\"Node:\", node)\n       ._(\n         \"Tracking URL:\",\n         appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n           .getTrackingUrl()), \"History\")\n       ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     Collection\u003cContainerReport\u003e containers;\n     try {\n       containers \u003d appContext.getContainers(appAttemptId).values();\n     } catch (IOException e) {\n       html\n         .p()\n         ._(\n           \"Sorry, Failed to get containers for application attempt\" + attemptid\n               + \".\")._();\n       return;\n     }\n \n     // Container Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n           .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n           .th(\".logs\", \"Logs\")._()._().tbody();\n \n     StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n     for (ContainerReport containerReport : containers) {\n-      String logURL \u003d containerReport.getLogUrl();\n-      logURL \u003d getPartUrl(logURL, \"log\");\n       ContainerInfo container \u003d new ContainerInfo(containerReport);\n       // ConatinerID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       containersTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"container\", container.getContainerId()))\n         .append(\"\u0027\u003e\")\n         .append(container.getContainerId())\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(container.getAssignedNodeId())\n         .append(\"\u0027\u003e\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n             .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(logURL \u003d\u003d null ? \"#\" : url(logURL)).append(\"\u0027\u003e\")\n-        .append(logURL \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n+        .append(container.getLogUrl() \u003d\u003d null ?\n+            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n+        .append(container.getLogUrl() \u003d\u003d null ?\n+            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       containersTableData.delete(containersTableData.length() - 2,\n         containersTableData.length() - 1);\n     }\n     containersTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var containersTableData\u003d\" + containersTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n    } catch (IOException e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\"State\", appAttempt.getAppAttemptState())\n      ._(\n        \"Master Container\",\n        appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n          appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n          .getTrackingUrl()), \"History\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cContainerReport\u003e containers;\n    try {\n      containers \u003d appContext.getContainers(appAttemptId).values();\n    } catch (IOException e) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getAssignedNodeId())\n        .append(\"\u0027\u003e\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n            .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"#\" : container.getLogUrl()).append(\"\u0027\u003e\")\n        .append(container.getLogUrl() \u003d\u003d null ?\n            \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,104 @@\n+  protected void render(Block html) {\n+    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n+    if (attemptid.isEmpty()) {\n+      puts(\"Bad request: requires application attempt ID\");\n+      return;\n+    }\n+\n+    ApplicationAttemptId appAttemptId \u003d null;\n+    try {\n+      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n+    } catch (IllegalArgumentException e) {\n+      puts(\"Invalid application attempt ID: \" + attemptid);\n+      return;\n+    }\n+\n+    ApplicationAttemptReport appAttemptReport;\n+    try {\n+      appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n+    } catch (IOException e) {\n+      String message \u003d\n+          \"Failed to read the application attempt \" + appAttemptId + \".\";\n+      LOG.error(message, e);\n+      html.p()._(message)._();\n+      return;\n+    }\n+    if (appAttemptReport \u003d\u003d null) {\n+      puts(\"Application Attempt not found: \" + attemptid);\n+      return;\n+    }\n+    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n+\n+    setTitle(join(\"Application Attempt \", attemptid));\n+\n+    String node \u003d \"N/A\";\n+    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n+        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n+      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n+    }\n+    info(\"Application Attempt Overview\")\n+      ._(\"State\", appAttempt.getAppAttemptState())\n+      ._(\n+        \"Master Container\",\n+        appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n+          appAttempt.getAmContainerId()),\n+        String.valueOf(appAttempt.getAmContainerId()))\n+      ._(\"Node:\", node)\n+      ._(\n+        \"Tracking URL:\",\n+        appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n+          .getTrackingUrl()), \"History\")\n+      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n+\n+    html._(InfoBlock.class);\n+\n+    Collection\u003cContainerReport\u003e containers;\n+    try {\n+      containers \u003d appContext.getContainers(appAttemptId).values();\n+    } catch (IOException e) {\n+      html\n+        .p()\n+        ._(\n+          \"Sorry, Failed to get containers for application attempt\" + attemptid\n+              + \".\")._();\n+      return;\n+    }\n+\n+    // Container Table\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n+          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n+          .th(\".logs\", \"Logs\")._()._().tbody();\n+\n+    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n+    for (ContainerReport containerReport : containers) {\n+      String logURL \u003d containerReport.getLogUrl();\n+      logURL \u003d getPartUrl(logURL, \"log\");\n+      ContainerInfo container \u003d new ContainerInfo(containerReport);\n+      // ConatinerID numerical value parsed by parseHadoopID in\n+      // yarn.dt.plugins.js\n+      containersTableData\n+        .append(\"[\\\"\u003ca href\u003d\u0027\")\n+        .append(url(\"container\", container.getContainerId()))\n+        .append(\"\u0027\u003e\")\n+        .append(container.getContainerId())\n+        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n+        .append(container.getAssignedNodeId())\n+        .append(\"\u0027\u003e\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n+            .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n+        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n+        .append(logURL \u003d\u003d null ? \"#\" : url(logURL)).append(\"\u0027\u003e\")\n+        .append(logURL \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n+    }\n+    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      containersTableData.delete(containersTableData.length() - 2,\n+        containersTableData.length() - 1);\n+    }\n+    containersTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\")\n+      ._(\"var containersTableData\u003d\" + containersTableData)._();\n+\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String attemptid \u003d $(APPLICATION_ATTEMPT_ID);\n    if (attemptid.isEmpty()) {\n      puts(\"Bad request: requires application attempt ID\");\n      return;\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    try {\n      appAttemptId \u003d ConverterUtils.toApplicationAttemptId(attemptid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid application attempt ID: \" + attemptid);\n      return;\n    }\n\n    ApplicationAttemptReport appAttemptReport;\n    try {\n      appAttemptReport \u003d appContext.getApplicationAttempt(appAttemptId);\n    } catch (IOException e) {\n      String message \u003d\n          \"Failed to read the application attempt \" + appAttemptId + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appAttemptReport \u003d\u003d null) {\n      puts(\"Application Attempt not found: \" + attemptid);\n      return;\n    }\n    AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n\n    setTitle(join(\"Application Attempt \", attemptid));\n\n    String node \u003d \"N/A\";\n    if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n        \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n      node \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n    }\n    info(\"Application Attempt Overview\")\n      ._(\"State\", appAttempt.getAppAttemptState())\n      ._(\n        \"Master Container\",\n        appAttempt.getAmContainerId() \u003d\u003d null ? \"#\" : root_url(\"container\",\n          appAttempt.getAmContainerId()),\n        String.valueOf(appAttempt.getAmContainerId()))\n      ._(\"Node:\", node)\n      ._(\n        \"Tracking URL:\",\n        appAttempt.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(appAttempt\n          .getTrackingUrl()), \"History\")\n      ._(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cContainerReport\u003e containers;\n    try {\n      containers \u003d appContext.getContainers(appAttemptId).values();\n    } catch (IOException e) {\n      html\n        .p()\n        ._(\n          \"Sorry, Failed to get containers for application attempt\" + attemptid\n              + \".\")._();\n      return;\n    }\n\n    // Container Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#containers\").thead().tr().th(\".id\", \"Container ID\")\n          .th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\")\n          .th(\".logs\", \"Logs\")._()._().tbody();\n\n    StringBuilder containersTableData \u003d new StringBuilder(\"[\\n\");\n    for (ContainerReport containerReport : containers) {\n      String logURL \u003d containerReport.getLogUrl();\n      logURL \u003d getPartUrl(logURL, \"log\");\n      ContainerInfo container \u003d new ContainerInfo(containerReport);\n      // ConatinerID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      containersTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"container\", container.getContainerId()))\n        .append(\"\u0027\u003e\")\n        .append(container.getContainerId())\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(container.getAssignedNodeId())\n        .append(\"\u0027\u003e\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils\n            .escapeHtml(container.getAssignedNodeId()))).append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(container.getContainerExitStatus()).append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(logURL \u003d\u003d null ? \"#\" : url(logURL)).append(\"\u0027\u003e\")\n        .append(logURL \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (containersTableData.charAt(containersTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      containersTableData.delete(containersTableData.length() - 2,\n        containersTableData.length() - 1);\n    }\n    containersTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var containersTableData\u003d\" + containersTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppAttemptBlock.java"
    }
  }
}