{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "updatePlacementRules",
  "functionId": "updatePlacementRules",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 693,
  "functionEndLine": 745,
  "numCommitsSeen": 239,
  "timeTaken": 7611,
  "changeHistory": [
    "35010120fbbcad8618f99abf7130e53f98879a33",
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
    "a90471b3e65326cc18ed31fe21aef654833b5883",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
    "9845bea59c0009b8ffff7050403e5ba270054164",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23"
  ],
  "changeHistoryShort": {
    "35010120fbbcad8618f99abf7130e53f98879a33": "Ybodychange",
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": "Ybodychange",
    "a90471b3e65326cc18ed31fe21aef654833b5883": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": "Ymodifierchange",
    "9845bea59c0009b8ffff7050403e5ba270054164": "Ybodychange",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35010120fbbcad8618f99abf7130e53f98879a33": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9017. PlacementRule order is not maintained in CS. Contributed by Bilwa S T.\n",
      "commitDate": "06/05/20 1:22 PM",
      "commitName": "35010120fbbcad8618f99abf7130e53f98879a33",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "29/04/20 6:53 AM",
      "commitNameOld": "410c605aec308a2ccd903f60aade3aaeefcaa610",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 7.27,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,53 @@\n   public void updatePlacementRules() throws IOException {\n     // Initialize placement rules\n     Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n         YarnConfiguration.QUEUE_PLACEMENT_RULES);\n     List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n     Set\u003cString\u003e distinguishRuleSet \u003d CapacitySchedulerConfigValidator\n             .validatePlacementRules(placementRuleStrs);\n \n-    // add UserGroupMappingPlacementRule if absent\n-    distinguishRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n+    // add UserGroupMappingPlacementRule if empty,default value of\n+    // yarn.scheduler.queue-placement-rules is user-group\n+    if (distinguishRuleSet.isEmpty()) {\n+      distinguishRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n+    }\n \n     placementRuleStrs \u003d new ArrayList\u003c\u003e(distinguishRuleSet);\n \n     for (String placementRuleStr : placementRuleStrs) {\n       switch (placementRuleStr) {\n       case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n         PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n         if (null !\u003d ugRule) {\n           placementRules.add(ugRule);\n         }\n         break;\n       case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n         PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n         if (null !\u003d anRule) {\n           placementRules.add(anRule);\n         }\n         break;\n       default:\n         boolean isMappingNotEmpty;\n         try {\n           PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n               placementRuleStr, conf);\n           if (null !\u003d rule) {\n             try {\n               isMappingNotEmpty \u003d rule.initialize(this);\n             } catch (IOException ie) {\n               throw new IOException(ie);\n             }\n             if (isMappingNotEmpty) {\n               placementRules.add(rule);\n             }\n           }\n         } catch (ClassNotFoundException cnfe) {\n           throw new IOException(cnfe);\n         }\n       }\n     }\n \n     rmContext.getQueuePlacementManager().updateRules(placementRules);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updatePlacementRules() throws IOException {\n    // Initialize placement rules\n    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    Set\u003cString\u003e distinguishRuleSet \u003d CapacitySchedulerConfigValidator\n            .validatePlacementRules(placementRuleStrs);\n\n    // add UserGroupMappingPlacementRule if empty,default value of\n    // yarn.scheduler.queue-placement-rules is user-group\n    if (distinguishRuleSet.isEmpty()) {\n      distinguishRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n    }\n\n    placementRuleStrs \u003d new ArrayList\u003c\u003e(distinguishRuleSet);\n\n    for (String placementRuleStr : placementRuleStrs) {\n      switch (placementRuleStr) {\n      case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n        PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n        if (null !\u003d ugRule) {\n          placementRules.add(ugRule);\n        }\n        break;\n      case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n        PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n        if (null !\u003d anRule) {\n          placementRules.add(anRule);\n        }\n        break;\n      default:\n        boolean isMappingNotEmpty;\n        try {\n          PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n              placementRuleStr, conf);\n          if (null !\u003d rule) {\n            try {\n              isMappingNotEmpty \u003d rule.initialize(this);\n            } catch (IOException ie) {\n              throw new IOException(ie);\n            }\n            if (isMappingNotEmpty) {\n              placementRules.add(rule);\n            }\n          }\n        } catch (ClassNotFoundException cnfe) {\n          throw new IOException(cnfe);\n        }\n      }\n    }\n\n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10022. RM Rest API to validate the CapacityScheduler Configuration change\n\nContributed by Kinga Marton.\n",
      "commitDate": "28/01/20 9:46 AM",
      "commitName": "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "05/12/19 11:21 PM",
      "commitNameOld": "e575df5ca6f9630199b5c1696136184e88af3160",
      "commitAuthorOld": "prabhujoseph",
      "daysBetweenCommits": 53.43,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,50 @@\n   public void updatePlacementRules() throws IOException {\n     // Initialize placement rules\n     Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n         YarnConfiguration.QUEUE_PLACEMENT_RULES);\n     List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n-    Set\u003cString\u003e distingushRuleSet \u003d new HashSet\u003c\u003e();\n-    // fail the case if we get duplicate placementRule add in\n-    for (String pls : placementRuleStrs) {\n-      if (!distingushRuleSet.add(pls)) {\n-        throw new IOException(\"Invalid PlacementRule inputs which \"\n-            + \"contains duplicate rule strings\");\n-      }\n-    }\n+    Set\u003cString\u003e distinguishRuleSet \u003d CapacitySchedulerConfigValidator\n+            .validatePlacementRules(placementRuleStrs);\n \n     // add UserGroupMappingPlacementRule if absent\n-    distingushRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n+    distinguishRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n \n-    placementRuleStrs \u003d new ArrayList\u003c\u003e(distingushRuleSet);\n+    placementRuleStrs \u003d new ArrayList\u003c\u003e(distinguishRuleSet);\n \n     for (String placementRuleStr : placementRuleStrs) {\n       switch (placementRuleStr) {\n       case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n         PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n         if (null !\u003d ugRule) {\n           placementRules.add(ugRule);\n         }\n         break;\n       case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n         PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n         if (null !\u003d anRule) {\n           placementRules.add(anRule);\n         }\n         break;\n       default:\n         boolean isMappingNotEmpty;\n         try {\n           PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n               placementRuleStr, conf);\n           if (null !\u003d rule) {\n             try {\n               isMappingNotEmpty \u003d rule.initialize(this);\n             } catch (IOException ie) {\n               throw new IOException(ie);\n             }\n             if (isMappingNotEmpty) {\n               placementRules.add(rule);\n             }\n           }\n         } catch (ClassNotFoundException cnfe) {\n           throw new IOException(cnfe);\n         }\n       }\n     }\n \n     rmContext.getQueuePlacementManager().updateRules(placementRules);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updatePlacementRules() throws IOException {\n    // Initialize placement rules\n    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    Set\u003cString\u003e distinguishRuleSet \u003d CapacitySchedulerConfigValidator\n            .validatePlacementRules(placementRuleStrs);\n\n    // add UserGroupMappingPlacementRule if absent\n    distinguishRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n\n    placementRuleStrs \u003d new ArrayList\u003c\u003e(distinguishRuleSet);\n\n    for (String placementRuleStr : placementRuleStrs) {\n      switch (placementRuleStr) {\n      case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n        PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n        if (null !\u003d ugRule) {\n          placementRules.add(ugRule);\n        }\n        break;\n      case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n        PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n        if (null !\u003d anRule) {\n          placementRules.add(anRule);\n        }\n        break;\n      default:\n        boolean isMappingNotEmpty;\n        try {\n          PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n              placementRuleStr, conf);\n          if (null !\u003d rule) {\n            try {\n              isMappingNotEmpty \u003d rule.initialize(this);\n            } catch (IOException ie) {\n              throw new IOException(ie);\n            }\n            if (isMappingNotEmpty) {\n              placementRules.add(rule);\n            }\n          }\n        } catch (ClassNotFoundException cnfe) {\n          throw new IOException(cnfe);\n        }\n      }\n    }\n\n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "a90471b3e65326cc18ed31fe21aef654833b5883": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8016. Refine PlacementRule interface and add a app-name queue mapping rule as an example. (Zian Chen via wangda)\n\nChange-Id: I35caf1480e0f76f5f3a53528af09312e39414bbb\n",
      "commitDate": "23/03/18 4:43 PM",
      "commitName": "a90471b3e65326cc18ed31fe21aef654833b5883",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8016. Refine PlacementRule interface and add a app-name queue mapping rule as an example. (Zian Chen via wangda)\n\nChange-Id: I35caf1480e0f76f5f3a53528af09312e39414bbb\n",
          "commitDate": "23/03/18 4:43 PM",
          "commitName": "a90471b3e65326cc18ed31fe21aef654833b5883",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/18 2:23 PM",
          "commitNameOld": "0b489e564ce5a50324a530e29c18aa8a75276c50",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 36.06,
          "commitsBetweenForRepo": 384,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,56 @@\n-  void updatePlacementRules() throws IOException {\n+  public void updatePlacementRules() throws IOException {\n     // Initialize placement rules\n     Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n         YarnConfiguration.QUEUE_PLACEMENT_RULES);\n     List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n-    if (placementRuleStrs.isEmpty()) {\n-      PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n-      if (null !\u003d ugRule) {\n-        placementRules.add(ugRule);\n+    Set\u003cString\u003e distingushRuleSet \u003d new HashSet\u003c\u003e();\n+    // fail the case if we get duplicate placementRule add in\n+    for (String pls : placementRuleStrs) {\n+      if (!distingushRuleSet.add(pls)) {\n+        throw new IOException(\"Invalid PlacementRule inputs which \"\n+            + \"contains duplicate rule strings\");\n       }\n-    } else {\n-      for (String placementRuleStr : placementRuleStrs) {\n-        switch (placementRuleStr) {\n-        case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n-          PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n-          if (null !\u003d ugRule) {\n-            placementRules.add(ugRule);\n-          }\n-          break;\n-        default:\n-          try {\n-            PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n-                placementRuleStr, conf);\n-            if (null !\u003d rule) {\n+    }\n+\n+    // add UserGroupMappingPlacementRule if absent\n+    distingushRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n+\n+    placementRuleStrs \u003d new ArrayList\u003c\u003e(distingushRuleSet);\n+\n+    for (String placementRuleStr : placementRuleStrs) {\n+      switch (placementRuleStr) {\n+      case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n+        PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n+        if (null !\u003d ugRule) {\n+          placementRules.add(ugRule);\n+        }\n+        break;\n+      case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n+        PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n+        if (null !\u003d anRule) {\n+          placementRules.add(anRule);\n+        }\n+        break;\n+      default:\n+        boolean isMappingNotEmpty;\n+        try {\n+          PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n+              placementRuleStr, conf);\n+          if (null !\u003d rule) {\n+            try {\n+              isMappingNotEmpty \u003d rule.initialize(this);\n+            } catch (IOException ie) {\n+              throw new IOException(ie);\n+            }\n+            if (isMappingNotEmpty) {\n               placementRules.add(rule);\n             }\n-          } catch (ClassNotFoundException cnfe) {\n-            throw new IOException(cnfe);\n           }\n+        } catch (ClassNotFoundException cnfe) {\n+          throw new IOException(cnfe);\n         }\n       }\n     }\n+\n     rmContext.getQueuePlacementManager().updateRules(placementRules);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updatePlacementRules() throws IOException {\n    // Initialize placement rules\n    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    Set\u003cString\u003e distingushRuleSet \u003d new HashSet\u003c\u003e();\n    // fail the case if we get duplicate placementRule add in\n    for (String pls : placementRuleStrs) {\n      if (!distingushRuleSet.add(pls)) {\n        throw new IOException(\"Invalid PlacementRule inputs which \"\n            + \"contains duplicate rule strings\");\n      }\n    }\n\n    // add UserGroupMappingPlacementRule if absent\n    distingushRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n\n    placementRuleStrs \u003d new ArrayList\u003c\u003e(distingushRuleSet);\n\n    for (String placementRuleStr : placementRuleStrs) {\n      switch (placementRuleStr) {\n      case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n        PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n        if (null !\u003d ugRule) {\n          placementRules.add(ugRule);\n        }\n        break;\n      case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n        PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n        if (null !\u003d anRule) {\n          placementRules.add(anRule);\n        }\n        break;\n      default:\n        boolean isMappingNotEmpty;\n        try {\n          PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n              placementRuleStr, conf);\n          if (null !\u003d rule) {\n            try {\n              isMappingNotEmpty \u003d rule.initialize(this);\n            } catch (IOException ie) {\n              throw new IOException(ie);\n            }\n            if (isMappingNotEmpty) {\n              placementRules.add(rule);\n            }\n          }\n        } catch (ClassNotFoundException cnfe) {\n          throw new IOException(cnfe);\n        }\n      }\n    }\n\n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8016. Refine PlacementRule interface and add a app-name queue mapping rule as an example. (Zian Chen via wangda)\n\nChange-Id: I35caf1480e0f76f5f3a53528af09312e39414bbb\n",
          "commitDate": "23/03/18 4:43 PM",
          "commitName": "a90471b3e65326cc18ed31fe21aef654833b5883",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/18 2:23 PM",
          "commitNameOld": "0b489e564ce5a50324a530e29c18aa8a75276c50",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 36.06,
          "commitsBetweenForRepo": 384,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,56 @@\n-  void updatePlacementRules() throws IOException {\n+  public void updatePlacementRules() throws IOException {\n     // Initialize placement rules\n     Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n         YarnConfiguration.QUEUE_PLACEMENT_RULES);\n     List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n-    if (placementRuleStrs.isEmpty()) {\n-      PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n-      if (null !\u003d ugRule) {\n-        placementRules.add(ugRule);\n+    Set\u003cString\u003e distingushRuleSet \u003d new HashSet\u003c\u003e();\n+    // fail the case if we get duplicate placementRule add in\n+    for (String pls : placementRuleStrs) {\n+      if (!distingushRuleSet.add(pls)) {\n+        throw new IOException(\"Invalid PlacementRule inputs which \"\n+            + \"contains duplicate rule strings\");\n       }\n-    } else {\n-      for (String placementRuleStr : placementRuleStrs) {\n-        switch (placementRuleStr) {\n-        case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n-          PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n-          if (null !\u003d ugRule) {\n-            placementRules.add(ugRule);\n-          }\n-          break;\n-        default:\n-          try {\n-            PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n-                placementRuleStr, conf);\n-            if (null !\u003d rule) {\n+    }\n+\n+    // add UserGroupMappingPlacementRule if absent\n+    distingushRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n+\n+    placementRuleStrs \u003d new ArrayList\u003c\u003e(distingushRuleSet);\n+\n+    for (String placementRuleStr : placementRuleStrs) {\n+      switch (placementRuleStr) {\n+      case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n+        PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n+        if (null !\u003d ugRule) {\n+          placementRules.add(ugRule);\n+        }\n+        break;\n+      case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n+        PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n+        if (null !\u003d anRule) {\n+          placementRules.add(anRule);\n+        }\n+        break;\n+      default:\n+        boolean isMappingNotEmpty;\n+        try {\n+          PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n+              placementRuleStr, conf);\n+          if (null !\u003d rule) {\n+            try {\n+              isMappingNotEmpty \u003d rule.initialize(this);\n+            } catch (IOException ie) {\n+              throw new IOException(ie);\n+            }\n+            if (isMappingNotEmpty) {\n               placementRules.add(rule);\n             }\n-          } catch (ClassNotFoundException cnfe) {\n-            throw new IOException(cnfe);\n           }\n+        } catch (ClassNotFoundException cnfe) {\n+          throw new IOException(cnfe);\n         }\n       }\n     }\n+\n     rmContext.getQueuePlacementManager().updateRules(placementRules);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updatePlacementRules() throws IOException {\n    // Initialize placement rules\n    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    Set\u003cString\u003e distingushRuleSet \u003d new HashSet\u003c\u003e();\n    // fail the case if we get duplicate placementRule add in\n    for (String pls : placementRuleStrs) {\n      if (!distingushRuleSet.add(pls)) {\n        throw new IOException(\"Invalid PlacementRule inputs which \"\n            + \"contains duplicate rule strings\");\n      }\n    }\n\n    // add UserGroupMappingPlacementRule if absent\n    distingushRuleSet.add(YarnConfiguration.USER_GROUP_PLACEMENT_RULE);\n\n    placementRuleStrs \u003d new ArrayList\u003c\u003e(distingushRuleSet);\n\n    for (String placementRuleStr : placementRuleStrs) {\n      switch (placementRuleStr) {\n      case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n        PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n        if (null !\u003d ugRule) {\n          placementRules.add(ugRule);\n        }\n        break;\n      case YarnConfiguration.APP_NAME_PLACEMENT_RULE:\n        PlacementRule anRule \u003d getAppNameMappingPlacementRule();\n        if (null !\u003d anRule) {\n          placementRules.add(anRule);\n        }\n        break;\n      default:\n        boolean isMappingNotEmpty;\n        try {\n          PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n              placementRuleStr, conf);\n          if (null !\u003d rule) {\n            try {\n              isMappingNotEmpty \u003d rule.initialize(this);\n            } catch (IOException ie) {\n              throw new IOException(ie);\n            }\n            if (isMappingNotEmpty) {\n              placementRules.add(rule);\n            }\n          }\n        } catch (ClassNotFoundException cnfe) {\n          throw new IOException(cnfe);\n        }\n      }\n    }\n\n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
      "commitDate": "16/11/17 11:25 AM",
      "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/11/17 1:01 PM",
      "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 6.93,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n-  private void updatePlacementRules() throws IOException {\n+  void updatePlacementRules() throws IOException {\n     // Initialize placement rules\n     Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n         YarnConfiguration.QUEUE_PLACEMENT_RULES);\n     List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n     if (placementRuleStrs.isEmpty()) {\n       PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n       if (null !\u003d ugRule) {\n         placementRules.add(ugRule);\n       }\n     } else {\n       for (String placementRuleStr : placementRuleStrs) {\n         switch (placementRuleStr) {\n         case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n           PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n           if (null !\u003d ugRule) {\n             placementRules.add(ugRule);\n           }\n           break;\n         default:\n           try {\n             PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n                 placementRuleStr, conf);\n             if (null !\u003d rule) {\n               placementRules.add(rule);\n             }\n           } catch (ClassNotFoundException cnfe) {\n             throw new IOException(cnfe);\n           }\n         }\n       }\n     }\n     rmContext.getQueuePlacementManager().updateRules(placementRules);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updatePlacementRules() throws IOException {\n    // Initialize placement rules\n    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    if (placementRuleStrs.isEmpty()) {\n      PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n      if (null !\u003d ugRule) {\n        placementRules.add(ugRule);\n      }\n    } else {\n      for (String placementRuleStr : placementRuleStrs) {\n        switch (placementRuleStr) {\n        case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n          PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n          if (null !\u003d ugRule) {\n            placementRules.add(ugRule);\n          }\n          break;\n        default:\n          try {\n            PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n                placementRuleStr, conf);\n            if (null !\u003d rule) {\n              placementRules.add(rule);\n            }\n          } catch (ClassNotFoundException cnfe) {\n            throw new IOException(cnfe);\n          }\n        }\n      }\n    }\n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "9845bea59c0009b8ffff7050403e5ba270054164": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6689. PlacementRule should be configurable. (Jonathan Hung via xgong)\n",
      "commitDate": "12/07/17 3:40 PM",
      "commitName": "9845bea59c0009b8ffff7050403e5ba270054164",
      "commitAuthor": "Xuan",
      "commitDateOld": "11/07/17 2:22 AM",
      "commitNameOld": "34f113df5cff2cc330fb671296932b8227b11975",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 1.55,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,34 @@\n   private void updatePlacementRules() throws IOException {\n+    // Initialize placement rules\n+    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n+        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n     List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n-\n-    // Initialize UserGroupMappingPlacementRule\n-    // TODO, need make this defineable by configuration.\n-    UserGroupMappingPlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n-    if (null !\u003d ugRule) {\n-      placementRules.add(ugRule);\n+    if (placementRuleStrs.isEmpty()) {\n+      PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n+      if (null !\u003d ugRule) {\n+        placementRules.add(ugRule);\n+      }\n+    } else {\n+      for (String placementRuleStr : placementRuleStrs) {\n+        switch (placementRuleStr) {\n+        case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n+          PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n+          if (null !\u003d ugRule) {\n+            placementRules.add(ugRule);\n+          }\n+          break;\n+        default:\n+          try {\n+            PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n+                placementRuleStr, conf);\n+            if (null !\u003d rule) {\n+              placementRules.add(rule);\n+            }\n+          } catch (ClassNotFoundException cnfe) {\n+            throw new IOException(cnfe);\n+          }\n+        }\n+      }\n     }\n-\n     rmContext.getQueuePlacementManager().updateRules(placementRules);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePlacementRules() throws IOException {\n    // Initialize placement rules\n    Collection\u003cString\u003e placementRuleStrs \u003d conf.getStringCollection(\n        YarnConfiguration.QUEUE_PLACEMENT_RULES);\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    if (placementRuleStrs.isEmpty()) {\n      PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n      if (null !\u003d ugRule) {\n        placementRules.add(ugRule);\n      }\n    } else {\n      for (String placementRuleStr : placementRuleStrs) {\n        switch (placementRuleStr) {\n        case YarnConfiguration.USER_GROUP_PLACEMENT_RULE:\n          PlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n          if (null !\u003d ugRule) {\n            placementRules.add(ugRule);\n          }\n          break;\n        default:\n          try {\n            PlacementRule rule \u003d PlacementFactory.getPlacementRule(\n                placementRuleStr, conf);\n            if (null !\u003d rule) {\n              placementRules.add(rule);\n            }\n          } catch (ClassNotFoundException cnfe) {\n            throw new IOException(cnfe);\n          }\n        }\n      }\n    }\n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3635. Refactored current queue mapping implementation in CapacityScheduler to use a generic PlacementManager framework. Contributed by Wangda Tan\n",
      "commitDate": "15/09/15 12:39 AM",
      "commitName": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,12 @@\n+  private void updatePlacementRules() throws IOException {\n+    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n+    \n+    // Initialize UserGroupMappingPlacementRule\n+    // TODO, need make this defineable by configuration.\n+    UserGroupMappingPlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n+    if (null !\u003d ugRule) {\n+      placementRules.add(ugRule);\n+    }\n+    \n+    rmContext.getQueuePlacementManager().updateRules(placementRules);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePlacementRules() throws IOException {\n    List\u003cPlacementRule\u003e placementRules \u003d new ArrayList\u003c\u003e();\n    \n    // Initialize UserGroupMappingPlacementRule\n    // TODO, need make this defineable by configuration.\n    UserGroupMappingPlacementRule ugRule \u003d getUserGroupMappingPlacementRule();\n    if (null !\u003d ugRule) {\n      placementRules.add(ugRule);\n    }\n    \n    rmContext.getQueuePlacementManager().updateRules(placementRules);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}