{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuthenticationFilter.java",
  "functionName": "constructSecretProvider",
  "functionId": "constructSecretProvider___ctx-ServletContext__config-Properties__disallowFallbackToRandomSecretProvider-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
  "functionStartLine": 220,
  "functionEndLine": 260,
  "numCommitsSeen": 33,
  "timeTaken": 833,
  "changeHistory": [
    "90e07d55ace7221081a58a90e54b360ad68fa1ef"
  ],
  "changeHistoryShort": {
    "90e07d55ace7221081a58a90e54b360ad68fa1ef": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90e07d55ace7221081a58a90e54b360ad68fa1ef": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11754. RM fails to start in non-secure mode due to authentication filter failure. Contributed by Haohui Mai.\n",
      "commitDate": "30/03/15 11:44 AM",
      "commitName": "90e07d55ace7221081a58a90e54b360ad68fa1ef",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,41 @@\n+  public static SignerSecretProvider constructSecretProvider(\n+      ServletContext ctx, Properties config,\n+      boolean disallowFallbackToRandomSecretProvider) throws Exception {\n+    String name \u003d config.getProperty(SIGNER_SECRET_PROVIDER, \"file\");\n+    long validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY,\n+                                                      \"36000\")) * 1000;\n+\n+    if (!disallowFallbackToRandomSecretProvider\n+        \u0026\u0026 \"file\".equals(name)\n+        \u0026\u0026 config.getProperty(SIGNATURE_SECRET_FILE) \u003d\u003d null) {\n+      name \u003d \"random\";\n+    }\n+\n+    SignerSecretProvider provider;\n+    if (\"file\".equals(name)) {\n+      provider \u003d new FileSignerSecretProvider();\n+      try {\n+        provider.init(config, ctx, validity);\n+      } catch (Exception e) {\n+        if (!disallowFallbackToRandomSecretProvider) {\n+          LOG.info(\"Unable to initialize FileSignerSecretProvider, \" +\n+                       \"falling back to use random secrets.\");\n+          provider \u003d new RandomSignerSecretProvider();\n+          provider.init(config, ctx, validity);\n+        } else {\n+          throw e;\n+        }\n+      }\n+    } else if (\"random\".equals(name)) {\n+      provider \u003d new RandomSignerSecretProvider();\n+      provider.init(config, ctx, validity);\n+    } else if (\"zookeeper\".equals(name)) {\n+      provider \u003d new ZKSignerSecretProvider();\n+      provider.init(config, ctx, validity);\n+    } else {\n+      provider \u003d (SignerSecretProvider) Thread.currentThread().\n+          getContextClassLoader().loadClass(name).newInstance();\n+      provider.init(config, ctx, validity);\n+    }\n+    return provider;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SignerSecretProvider constructSecretProvider(\n      ServletContext ctx, Properties config,\n      boolean disallowFallbackToRandomSecretProvider) throws Exception {\n    String name \u003d config.getProperty(SIGNER_SECRET_PROVIDER, \"file\");\n    long validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY,\n                                                      \"36000\")) * 1000;\n\n    if (!disallowFallbackToRandomSecretProvider\n        \u0026\u0026 \"file\".equals(name)\n        \u0026\u0026 config.getProperty(SIGNATURE_SECRET_FILE) \u003d\u003d null) {\n      name \u003d \"random\";\n    }\n\n    SignerSecretProvider provider;\n    if (\"file\".equals(name)) {\n      provider \u003d new FileSignerSecretProvider();\n      try {\n        provider.init(config, ctx, validity);\n      } catch (Exception e) {\n        if (!disallowFallbackToRandomSecretProvider) {\n          LOG.info(\"Unable to initialize FileSignerSecretProvider, \" +\n                       \"falling back to use random secrets.\");\n          provider \u003d new RandomSignerSecretProvider();\n          provider.init(config, ctx, validity);\n        } else {\n          throw e;\n        }\n      }\n    } else if (\"random\".equals(name)) {\n      provider \u003d new RandomSignerSecretProvider();\n      provider.init(config, ctx, validity);\n    } else if (\"zookeeper\".equals(name)) {\n      provider \u003d new ZKSignerSecretProvider();\n      provider.init(config, ctx, validity);\n    } else {\n      provider \u003d (SignerSecretProvider) Thread.currentThread().\n          getContextClassLoader().loadClass(name).newInstance();\n      provider.init(config, ctx, validity);\n    }\n    return provider;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java"
    }
  }
}