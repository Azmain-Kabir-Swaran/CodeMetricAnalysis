{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupElasticMemoryController.java",
  "functionName": "watchAndLogOOMState",
  "functionId": "watchAndLogOOMState___start-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupElasticMemoryController.java",
  "functionStartLine": 361,
  "functionEndLine": 397,
  "numCommitsSeen": 2,
  "timeTaken": 900,
  "changeHistory": [
    "d9964799544eefcf424fcc178d987525f5356cdf"
  ],
  "changeHistoryShort": {
    "d9964799544eefcf424fcc178d987525f5356cdf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d9964799544eefcf424fcc178d987525f5356cdf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4599. Set OOM control for memory cgroups. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "23/05/18 4:35 PM",
      "commitName": "d9964799544eefcf424fcc178d987525f5356cdf",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,37 @@\n+  private boolean watchAndLogOOMState(long start) {\n+    long lastLog \u003d start;\n+    try {\n+      long end \u003d start;\n+      // Throw an error, if we are still in OOM after 5 seconds\n+      while(end - start \u003c timeoutMS) {\n+        end \u003d clock.getTime();\n+        String underOOM \u003d cgroups.getCGroupParam(\n+            CGroupsHandler.CGroupController.MEMORY,\n+            \"\",\n+            CGROUP_PARAM_MEMORY_OOM_CONTROL);\n+        if (underOOM.contains(CGroupsHandler.UNDER_OOM)) {\n+          if (end - lastLog \u003e 1000) {\n+            LOG.warn(String.format(\n+                \"OOM not resolved in %d ms\", end - start));\n+            lastLog \u003d end;\n+          }\n+        } else {\n+          LOG.info(String.format(\n+              \"Resolved OOM in %d ms\", end - start));\n+          return true;\n+        }\n+        // We do not want to saturate the CPU\n+        // leaving the resources to the actual OOM killer\n+        // but we want to be fast, too.\n+        Thread.sleep(10);\n+      }\n+    } catch (InterruptedException ex) {\n+      LOG.debug(\"Watchdog interrupted\");\n+    } catch (Exception e) {\n+      LOG.warn(\"Exception running logging thread\", e);\n+    }\n+    LOG.warn(String.format(\"OOM was not resolved in %d ms\",\n+        clock.getTime() - start));\n+    stopListening();\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean watchAndLogOOMState(long start) {\n    long lastLog \u003d start;\n    try {\n      long end \u003d start;\n      // Throw an error, if we are still in OOM after 5 seconds\n      while(end - start \u003c timeoutMS) {\n        end \u003d clock.getTime();\n        String underOOM \u003d cgroups.getCGroupParam(\n            CGroupsHandler.CGroupController.MEMORY,\n            \"\",\n            CGROUP_PARAM_MEMORY_OOM_CONTROL);\n        if (underOOM.contains(CGroupsHandler.UNDER_OOM)) {\n          if (end - lastLog \u003e 1000) {\n            LOG.warn(String.format(\n                \"OOM not resolved in %d ms\", end - start));\n            lastLog \u003d end;\n          }\n        } else {\n          LOG.info(String.format(\n              \"Resolved OOM in %d ms\", end - start));\n          return true;\n        }\n        // We do not want to saturate the CPU\n        // leaving the resources to the actual OOM killer\n        // but we want to be fast, too.\n        Thread.sleep(10);\n      }\n    } catch (InterruptedException ex) {\n      LOG.debug(\"Watchdog interrupted\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception running logging thread\", e);\n    }\n    LOG.warn(String.format(\"OOM was not resolved in %d ms\",\n        clock.getTime() - start));\n    stopListening();\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupElasticMemoryController.java"
    }
  }
}