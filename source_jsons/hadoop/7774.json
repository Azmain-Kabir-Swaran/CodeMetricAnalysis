{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionUpdater.java",
  "functionName": "throttle",
  "functionId": "throttle",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
  "functionStartLine": 524,
  "functionEndLine": 550,
  "numCommitsSeen": 5,
  "timeTaken": 1769,
  "changeHistory": [
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,27 @@\n+  private void throttle() throws InterruptedException {\n+    if (throttleLimitRatio \u003e\u003d 1.0) {\n+      return;\n+    }\n+\n+    final long expect \u003d (long) (throttleTimerAll.now(TimeUnit.MILLISECONDS)\n+        * throttleLimitRatio);\n+    final long actual \u003d throttleTimerLocked.now(TimeUnit.MILLISECONDS);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Re-encryption updater throttling expect: {}, actual: {},\"\n+              + \" throttleTimerAll:{}\", expect, actual,\n+          throttleTimerAll.now(TimeUnit.MILLISECONDS));\n+    }\n+    if (expect - actual \u003c 0) {\n+      // in case throttleLimitHandlerRatio is very small, expect will be 0.\n+      // so sleepMs should not be calculated from expect, to really meet the\n+      // ratio. e.g. if ratio is 0.001, expect \u003d 0 and actual \u003d 1, sleepMs\n+      // should be 1000 - throttleTimerAll.now()\n+      final long sleepMs \u003d\n+          (long) (actual / throttleLimitRatio) - throttleTimerAll\n+              .now(TimeUnit.MILLISECONDS);\n+      LOG.debug(\"Throttling re-encryption, sleeping for {} ms\", sleepMs);\n+      Thread.sleep(sleepMs);\n+    }\n+    throttleTimerAll.reset().start();\n+    throttleTimerLocked.reset();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void throttle() throws InterruptedException {\n    if (throttleLimitRatio \u003e\u003d 1.0) {\n      return;\n    }\n\n    final long expect \u003d (long) (throttleTimerAll.now(TimeUnit.MILLISECONDS)\n        * throttleLimitRatio);\n    final long actual \u003d throttleTimerLocked.now(TimeUnit.MILLISECONDS);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Re-encryption updater throttling expect: {}, actual: {},\"\n              + \" throttleTimerAll:{}\", expect, actual,\n          throttleTimerAll.now(TimeUnit.MILLISECONDS));\n    }\n    if (expect - actual \u003c 0) {\n      // in case throttleLimitHandlerRatio is very small, expect will be 0.\n      // so sleepMs should not be calculated from expect, to really meet the\n      // ratio. e.g. if ratio is 0.001, expect \u003d 0 and actual \u003d 1, sleepMs\n      // should be 1000 - throttleTimerAll.now()\n      final long sleepMs \u003d\n          (long) (actual / throttleLimitRatio) - throttleTimerAll\n              .now(TimeUnit.MILLISECONDS);\n      LOG.debug(\"Throttling re-encryption, sleeping for {} ms\", sleepMs);\n      Thread.sleep(sleepMs);\n    }\n    throttleTimerAll.reset().start();\n    throttleTimerLocked.reset();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java"
    }
  }
}