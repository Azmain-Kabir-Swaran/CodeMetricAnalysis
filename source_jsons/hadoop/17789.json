{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StateStoreService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___config-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
  "functionStartLine": 138,
  "functionEndLine": 210,
  "numCommitsSeen": 12,
  "timeTaken": 4998,
  "changeHistory": [
    "64d4abf489a0267a265591026f8e6c84bc78591e",
    "0dbd87874a16403f537ef31f45ab0fe05924af6f",
    "b6dae26f4490bbd03360b8df19ef00cf843430f3",
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "7721fff74494eb7fbbbba7f8bb4b4692d880d301",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
    "6f0de2731806628b5b01bd1350225692147590da",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
    "4bf877b03f0e01c4bcedc689c66689701e62b560"
  ],
  "changeHistoryShort": {
    "64d4abf489a0267a265591026f8e6c84bc78591e": "Ybodychange",
    "0dbd87874a16403f537ef31f45ab0fe05924af6f": "Ybodychange",
    "b6dae26f4490bbd03360b8df19ef00cf843430f3": "Ybodychange",
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Ymultichange(Yfilerename,Ybodychange)",
    "7721fff74494eb7fbbbba7f8bb4b4692d880d301": "Ybodychange",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": "Ybodychange",
    "6f0de2731806628b5b01bd1350225692147590da": "Ybodychange",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Ybodychange",
    "4bf877b03f0e01c4bcedc689c66689701e62b560": "Yintroduced"
  },
  "changeHistoryDetails": {
    "64d4abf489a0267a265591026f8e6c84bc78591e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14593. RBF: Implement deletion feature for expired records in State Store. Contributed by  Takanobu Asanuma.\n",
      "commitDate": "15/07/19 10:08 AM",
      "commitName": "64d4abf489a0267a265591026f8e6c84bc78591e",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "0dbd87874a16403f537ef31f45ab0fe05924af6f",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 21.02,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,73 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n     addRecordStore(RouterStoreImpl.class);\n     addRecordStore(DisabledNameserviceStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n-    MembershipState.setExpirationMs(conf.getLong(\n+    MembershipState.setExpirationMs(conf.getTimeDuration(\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n-        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n+        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT,\n+        TimeUnit.MILLISECONDS));\n+\n+    MembershipState.setDeletionMs(conf.getTimeDuration(\n+        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_DELETION_MS,\n+        RBFConfigKeys\n+            .FEDERATION_STORE_MEMBERSHIP_EXPIRATION_DELETION_MS_DEFAULT,\n+        TimeUnit.MILLISECONDS));\n \n     RouterState.setExpirationMs(conf.getTimeDuration(\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n         TimeUnit.MILLISECONDS));\n \n+    RouterState.setDeletionMs(conf.getTimeDuration(\n+        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_DELETION_MS,\n+        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_DELETION_MS_DEFAULT,\n+        TimeUnit.MILLISECONDS));\n+\n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     if (conf.getBoolean(RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE,\n         RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE_DEFAULT)) {\n       // Create metrics for the State Store\n       this.metrics \u003d StateStoreMetrics.create(conf);\n \n       // Adding JMX interface\n       try {\n         StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n         ObjectName registeredObject \u003d\n             MBeans.register(\"Router\", \"StateStore\", bean);\n         LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n       } catch (NotCompliantMBeanException e) {\n         throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n       } catch (MetricsException e) {\n         LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n       }\n     } else {\n       LOG.info(\"State Store metrics not enabled\");\n       this.metrics \u003d new NullStateStoreMetrics();\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n    addRecordStore(DisabledNameserviceStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    MembershipState.setDeletionMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_DELETION_MS,\n        RBFConfigKeys\n            .FEDERATION_STORE_MEMBERSHIP_EXPIRATION_DELETION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    RouterState.setDeletionMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_DELETION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_DELETION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    if (conf.getBoolean(RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE,\n        RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE_DEFAULT)) {\n      // Create metrics for the State Store\n      this.metrics \u003d StateStoreMetrics.create(conf);\n\n      // Adding JMX interface\n      try {\n        StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n        ObjectName registeredObject \u003d\n            MBeans.register(\"Router\", \"StateStore\", bean);\n        LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n      } catch (NotCompliantMBeanException e) {\n        throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n      } catch (MetricsException e) {\n        LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n      }\n    } else {\n      LOG.info(\"State Store metrics not enabled\");\n      this.metrics \u003d new NullStateStoreMetrics();\n    }\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "0dbd87874a16403f537ef31f45ab0fe05924af6f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14388. RBF: Prevent loading metric system when disabled. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "0dbd87874a16403f537ef31f45ab0fe05924af6f",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "02/10/18 8:48 PM",
      "commitNameOld": "fa7f7078a713c44783425195a891582bcf8a6d5c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 264.53,
      "commitsBetweenForRepo": 1976,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,61 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n     addRecordStore(RouterStoreImpl.class);\n     addRecordStore(DisabledNameserviceStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     RouterState.setExpirationMs(conf.getTimeDuration(\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n         TimeUnit.MILLISECONDS));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n-    // Create metrics for the State Store\n-    this.metrics \u003d StateStoreMetrics.create(conf);\n+    if (conf.getBoolean(RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE,\n+        RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE_DEFAULT)) {\n+      // Create metrics for the State Store\n+      this.metrics \u003d StateStoreMetrics.create(conf);\n \n-    // Adding JMX interface\n-    try {\n-      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n-      ObjectName registeredObject \u003d\n-          MBeans.register(\"Router\", \"StateStore\", bean);\n-      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n-    } catch (NotCompliantMBeanException e) {\n-      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n-    } catch (MetricsException e) {\n-      LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n+      // Adding JMX interface\n+      try {\n+        StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n+        ObjectName registeredObject \u003d\n+            MBeans.register(\"Router\", \"StateStore\", bean);\n+        LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n+      } catch (NotCompliantMBeanException e) {\n+        throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n+      } catch (MetricsException e) {\n+        LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n+      }\n+    } else {\n+      LOG.info(\"State Store metrics not enabled\");\n+      this.metrics \u003d new NullStateStoreMetrics();\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n    addRecordStore(DisabledNameserviceStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    if (conf.getBoolean(RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE,\n        RBFConfigKeys.DFS_ROUTER_METRICS_ENABLE_DEFAULT)) {\n      // Create metrics for the State Store\n      this.metrics \u003d StateStoreMetrics.create(conf);\n\n      // Adding JMX interface\n      try {\n        StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n        ObjectName registeredObject \u003d\n            MBeans.register(\"Router\", \"StateStore\", bean);\n        LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n      } catch (NotCompliantMBeanException e) {\n        throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n      } catch (MetricsException e) {\n        LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n      }\n    } else {\n      LOG.info(\"State Store metrics not enabled\");\n      this.metrics \u003d new NullStateStoreMetrics();\n    }\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "b6dae26f4490bbd03360b8df19ef00cf843430f3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13478. RBF: Disabled Nameservice store API. Contributed by Inigo Goiri.\n",
      "commitDate": "20/04/18 10:19 PM",
      "commitName": "b6dae26f4490bbd03360b8df19ef00cf843430f3",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "16/04/18 8:23 PM",
      "commitNameOld": "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 4.08,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n     addRecordStore(RouterStoreImpl.class);\n+    addRecordStore(DisabledNameserviceStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     RouterState.setExpirationMs(conf.getTimeDuration(\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n         TimeUnit.MILLISECONDS));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     // Create metrics for the State Store\n     this.metrics \u003d StateStoreMetrics.create(conf);\n \n     // Adding JMX interface\n     try {\n       StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n       ObjectName registeredObject \u003d\n           MBeans.register(\"Router\", \"StateStore\", bean);\n       LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n     } catch (NotCompliantMBeanException e) {\n       throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n     } catch (MetricsException e) {\n       LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n    addRecordStore(DisabledNameserviceStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    // Create metrics for the State Store\n    this.metrics \u003d StateStoreMetrics.create(conf);\n\n    // Adding JMX interface\n    try {\n      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n      ObjectName registeredObject \u003d\n          MBeans.register(\"Router\", \"StateStore\", bean);\n      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n    } catch (NotCompliantMBeanException e) {\n      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n    } catch (MetricsException e) {\n      LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n    }\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13435. RBF: Improve the error loggings for printing the stack trace.\n",
      "commitDate": "16/04/18 8:23 PM",
      "commitName": "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "19/03/18 10:13 PM",
      "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthorOld": "weiy",
      "daysBetweenCommits": 27.92,
      "commitsBetweenForRepo": 306,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n     addRecordStore(RouterStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     RouterState.setExpirationMs(conf.getTimeDuration(\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n         RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n         TimeUnit.MILLISECONDS));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     // Create metrics for the State Store\n     this.metrics \u003d StateStoreMetrics.create(conf);\n \n     // Adding JMX interface\n     try {\n       StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n       ObjectName registeredObject \u003d\n           MBeans.register(\"Router\", \"StateStore\", bean);\n       LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n     } catch (NotCompliantMBeanException e) {\n       throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n     } catch (MetricsException e) {\n-      LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n+      LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    // Create metrics for the State Store\n    this.metrics \u003d StateStoreMetrics.create(conf);\n\n    // Adding JMX interface\n    try {\n      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n      ObjectName registeredObject \u003d\n          MBeans.register(\"Router\", \"StateStore\", bean);\n      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n    } catch (NotCompliantMBeanException e) {\n      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n    } catch (MetricsException e) {\n      LOG.error(\"Failed to register State Store bean {}\", e.getMessage());\n    }\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
          "commitDate": "19/03/18 10:13 PM",
          "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthor": "weiy",
          "commitDateOld": "19/03/18 5:19 PM",
          "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.2,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n-        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n-        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n+        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n+        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n     addRecordStore(RouterStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n-        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n-        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n+        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n+        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     RouterState.setExpirationMs(conf.getTimeDuration(\n-        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n-        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n+        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n+        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n         TimeUnit.MILLISECONDS));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     // Create metrics for the State Store\n     this.metrics \u003d StateStoreMetrics.create(conf);\n \n     // Adding JMX interface\n     try {\n       StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n       ObjectName registeredObject \u003d\n           MBeans.register(\"Router\", \"StateStore\", bean);\n       LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n     } catch (NotCompliantMBeanException e) {\n       throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n     } catch (MetricsException e) {\n       LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    // Create metrics for the State Store\n    this.metrics \u003d StateStoreMetrics.create(conf);\n\n    // Adding JMX interface\n    try {\n      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n      ObjectName registeredObject \u003d\n          MBeans.register(\"Router\", \"StateStore\", bean);\n      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n    } catch (NotCompliantMBeanException e) {\n      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n    } catch (MetricsException e) {\n      LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n    }\n\n    super.serviceInit(this.conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
          "commitDate": "19/03/18 10:13 PM",
          "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthor": "weiy",
          "commitDateOld": "19/03/18 5:19 PM",
          "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.2,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n-        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n-        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n+        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n+        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n     addRecordStore(RouterStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n-        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n-        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n+        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n+        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     RouterState.setExpirationMs(conf.getTimeDuration(\n-        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n-        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n+        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n+        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n         TimeUnit.MILLISECONDS));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     // Create metrics for the State Store\n     this.metrics \u003d StateStoreMetrics.create(conf);\n \n     // Adding JMX interface\n     try {\n       StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n       ObjectName registeredObject \u003d\n           MBeans.register(\"Router\", \"StateStore\", bean);\n       LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n     } catch (NotCompliantMBeanException e) {\n       throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n     } catch (MetricsException e) {\n       LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        RBFConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        RBFConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    // Create metrics for the State Store\n    this.metrics \u003d StateStoreMetrics.create(conf);\n\n    // Adding JMX interface\n    try {\n      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n      ObjectName registeredObject \u003d\n          MBeans.register(\"Router\", \"StateStore\", bean);\n      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n    } catch (NotCompliantMBeanException e) {\n      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n    } catch (MetricsException e) {\n      LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n    }\n\n    super.serviceInit(this.conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
          "extendedDetails": {}
        }
      ]
    },
    "7721fff74494eb7fbbbba7f8bb4b4692d880d301": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13042. RBF: Heartbeat Router State. Contributed by Inigo Goiri.\n",
      "commitDate": "24/01/18 11:51 PM",
      "commitName": "7721fff74494eb7fbbbba7f8bb4b4692d880d301",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 110.25,
      "commitsBetweenForRepo": 733,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,54 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n+    addRecordStore(RouterStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n         DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n         DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n+    RouterState.setExpirationMs(conf.getTimeDuration(\n+        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n+        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n+        TimeUnit.MILLISECONDS));\n+\n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     // Create metrics for the State Store\n     this.metrics \u003d StateStoreMetrics.create(conf);\n \n     // Adding JMX interface\n     try {\n       StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n       ObjectName registeredObject \u003d\n           MBeans.register(\"Router\", \"StateStore\", bean);\n       LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n     } catch (NotCompliantMBeanException e) {\n       throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n     } catch (MetricsException e) {\n       LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n     }\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n    addRecordStore(RouterStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    RouterState.setExpirationMs(conf.getTimeDuration(\n        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS,\n        DFSConfigKeys.FEDERATION_STORE_ROUTER_EXPIRATION_MS_DEFAULT,\n        TimeUnit.MILLISECONDS));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    // Create metrics for the State Store\n    this.metrics \u003d StateStoreMetrics.create(conf);\n\n    // Adding JMX interface\n    try {\n      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n      ObjectName registeredObject \u003d\n          MBeans.register(\"Router\", \"StateStore\", bean);\n      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n    } catch (NotCompliantMBeanException e) {\n      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n    } catch (MetricsException e) {\n      LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n    }\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12335. Federation Metrics. Contributed by Inigo Goiri.\n\n(cherry picked from commit 3b19e77752afce87936f5c0d1e6d272fba798d7b)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "6f0de2731806628b5b01bd1350225692147590da",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,48 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n     addRecordStore(MountTableStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n         DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n         DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n+    // Create metrics for the State Store\n+    this.metrics \u003d StateStoreMetrics.create(conf);\n+\n+    // Adding JMX interface\n+    try {\n+      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n+      ObjectName registeredObject \u003d\n+          MBeans.register(\"Router\", \"StateStore\", bean);\n+      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n+    } catch (NotCompliantMBeanException e) {\n+      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n+    } catch (MetricsException e) {\n+      LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n+    }\n+\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    // Create metrics for the State Store\n    this.metrics \u003d StateStoreMetrics.create(conf);\n\n    // Adding JMX interface\n    try {\n      StandardMBean bean \u003d new StandardMBean(metrics, StateStoreMBean.class);\n      ObjectName registeredObject \u003d\n          MBeans.register(\"Router\", \"StateStore\", bean);\n      LOG.info(\"Registered StateStoreMBean: {}\", registeredObject);\n    } catch (NotCompliantMBeanException e) {\n      throw new RuntimeException(\"Bad StateStoreMBean setup\", e);\n    } catch (MetricsException e) {\n      LOG.info(\"Failed to register State Store bean {}\", e.getMessage());\n    }\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "6f0de2731806628b5b01bd1350225692147590da": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10880. Federation Mount Table State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 58b97df661441150d35abd44b3a8606206b46441)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "6f0de2731806628b5b01bd1350225692147590da",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n     // Add supported record stores\n     addRecordStore(MembershipStoreImpl.class);\n+    addRecordStore(MountTableStoreImpl.class);\n \n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n     // Set expirations intervals for each record\n     MembershipState.setExpirationMs(conf.getLong(\n         DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n         DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n \n     // Cache update service\n     this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n     addService(this.cacheUpdater);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n    addRecordStore(MountTableStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "4bf877b03f0e01c4bcedc689c66689701e62b560",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,32 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     this.conf \u003d config;\n \n     // Create implementation of State Store\n     Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n         DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n         StateStoreDriver.class);\n     this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n \n     if (this.driver \u003d\u003d null) {\n       throw new IOException(\"Cannot create driver for the State Store\");\n     }\n \n+    // Add supported record stores\n+    addRecordStore(MembershipStoreImpl.class);\n+\n     // Check the connection to the State Store periodically\n     this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n     this.addService(monitorService);\n \n+    // Set expirations intervals for each record\n+    MembershipState.setExpirationMs(conf.getLong(\n+        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n+        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n+\n+    // Cache update service\n+    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n+    addService(this.cacheUpdater);\n+\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Add supported record stores\n    addRecordStore(MembershipStoreImpl.class);\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    // Set expirations intervals for each record\n    MembershipState.setExpirationMs(conf.getLong(\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS,\n        DFSConfigKeys.FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS_DEFAULT));\n\n    // Cache update service\n    this.cacheUpdater \u003d new StateStoreCacheUpdateService(this);\n    addService(this.cacheUpdater);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java",
      "extendedDetails": {}
    },
    "4bf877b03f0e01c4bcedc689c66689701e62b560": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10630. Federation State Store FS Implementation. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit c6e0bd640cdaf83a660fa050809cad6f1d4c6f4d)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "4bf877b03f0e01c4bcedc689c66689701e62b560",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,20 @@\n+  protected void serviceInit(Configuration config) throws Exception {\n+    this.conf \u003d config;\n+\n+    // Create implementation of State Store\n+    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n+        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n+        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n+        StateStoreDriver.class);\n+    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n+\n+    if (this.driver \u003d\u003d null) {\n+      throw new IOException(\"Cannot create driver for the State Store\");\n+    }\n+\n+    // Check the connection to the State Store periodically\n+    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n+    this.addService(monitorService);\n+\n+    super.serviceInit(this.conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    this.conf \u003d config;\n\n    // Create implementation of State Store\n    Class\u003c? extends StateStoreDriver\u003e driverClass \u003d this.conf.getClass(\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,\n        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,\n        StateStoreDriver.class);\n    this.driver \u003d ReflectionUtils.newInstance(driverClass, this.conf);\n\n    if (this.driver \u003d\u003d null) {\n      throw new IOException(\"Cannot create driver for the State Store\");\n    }\n\n    // Check the connection to the State Store periodically\n    this.monitorService \u003d new StateStoreConnectionMonitorService(this);\n    this.addService(monitorService);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/StateStoreService.java"
    }
  }
}