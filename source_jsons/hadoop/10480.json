{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "recoverTransitionRead",
  "functionId": "recoverTransitionRead___datanode-DataNode__nsInfo-NamespaceInfo__dataDirs-Collection__StorageLocation____startOpt-StartupOption",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 559,
  "functionEndLine": 564,
  "numCommitsSeen": 75,
  "timeTaken": 3633,
  "changeHistory": [
    "15e3873dc3d46016344887570e5d4aa8d20ca264",
    "efc73d7896e65a8a03d226ac21309257a7dc126c",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
    "eca80dca3ee0888304519ec96e9e4113cc35b112",
    "9d21180c1a625295bb9da0d9d5d8c55740944008",
    "dbf14320c093991d2ca97b3608efe1c3c0af9888",
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
    "00067895a01c66d53715b50bbcb3605efd6425f2"
  ],
  "changeHistoryShort": {
    "15e3873dc3d46016344887570e5d4aa8d20ca264": "Ybodychange",
    "efc73d7896e65a8a03d226ac21309257a7dc126c": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": "Ymultichange(Ymodifierchange,Ybodychange)",
    "eca80dca3ee0888304519ec96e9e4113cc35b112": "Ybodychange",
    "9d21180c1a625295bb9da0d9d5d8c55740944008": "Ybodychange",
    "dbf14320c093991d2ca97b3608efe1c3c0af9888": "Ybodychange",
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange"
  },
  "changeHistoryDetails": {
    "15e3873dc3d46016344887570e5d4aa8d20ca264": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11571. Typo in DataStorage exception message (Contributed by Anna Budai via Daniel Templeton)\n",
      "commitDate": "29/03/17 10:56 AM",
      "commitName": "15e3873dc3d46016344887570e5d4aa8d20ca264",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "24/03/17 6:06 PM",
      "commitNameOld": "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n   void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n       Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n     if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n-      throw new IOException(\"All specified directories are failed to load.\");\n+      throw new IOException(\"All specified directories have failed to load.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n      throw new IOException(\"All specified directories have failed to load.\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "efc73d7896e65a8a03d226ac21309257a7dc126c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9372. Remove dead code in DataStorage.recoverTransitionRead. Contributed by Duo Zhang.\n",
      "commitDate": "05/11/15 10:00 AM",
      "commitName": "efc73d7896e65a8a03d226ac21309257a7dc126c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "13/10/15 8:04 AM",
      "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 23.12,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,6 @@\n   void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n       Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n-    if (this.initialized) {\n-      LOG.info(\"DataNode version: \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n-      this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n-      // mark DN storage is initialized\n-      this.initialized \u003d true;\n-    }\n-\n     if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n       throw new IOException(\"All specified directories are failed to load.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n      throw new IOException(\"All specified directories are failed to load.\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/03/15 3:25 PM",
      "commitNameOld": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.78,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n       Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n     if (this.initialized) {\n-      LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+      LOG.info(\"DataNode version: \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n           + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n       this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n       // mark DN storage is initialized\n       this.initialized \u003d true;\n     }\n \n     if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n       throw new IOException(\"All specified directories are failed to load.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n    if (this.initialized) {\n      LOG.info(\"DataNode version: \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n      this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n      // mark DN storage is initialized\n      this.initialized \u003d true;\n    }\n\n    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n      throw new IOException(\"All specified directories are failed to load.\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
      "commitDate": "30/10/14 5:31 PM",
      "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
          "commitDate": "30/10/14 5:31 PM",
          "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "22/09/14 6:00 PM",
          "commitNameOld": "889122bd5580b6a83d35ef945db7ec001b7b550a",
          "commitAuthorOld": "",
          "daysBetweenCommits": 37.98,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,14 @@\n-  synchronized void recoverTransitionRead(DataNode datanode,\n-      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n-      StartupOption startOpt)\n-      throws IOException {\n-    if (initialized) {\n-      // DN storage has been initialized, no need to do anything\n-      return;\n+  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n+      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n+    if (this.initialized) {\n+      LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n+      this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n+      // mark DN storage is initialized\n+      this.initialized \u003d true;\n     }\n-    LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n-        + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n \n-    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n-    addStorageLocations(datanode, nsInfo, dataDirs, startOpt, true, false);\n-    \n-    // mark DN storage is initialized\n-    this.initialized \u003d true;\n+    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n+      throw new IOException(\"All specified directories are failed to load.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n    if (this.initialized) {\n      LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n      this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n      // mark DN storage is initialized\n      this.initialized \u003d true;\n    }\n\n    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n      throw new IOException(\"All specified directories are failed to load.\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
          "commitDate": "30/10/14 5:31 PM",
          "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "22/09/14 6:00 PM",
          "commitNameOld": "889122bd5580b6a83d35ef945db7ec001b7b550a",
          "commitAuthorOld": "",
          "daysBetweenCommits": 37.98,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,14 @@\n-  synchronized void recoverTransitionRead(DataNode datanode,\n-      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n-      StartupOption startOpt)\n-      throws IOException {\n-    if (initialized) {\n-      // DN storage has been initialized, no need to do anything\n-      return;\n+  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n+      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n+    if (this.initialized) {\n+      LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n+      this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n+      // mark DN storage is initialized\n+      this.initialized \u003d true;\n     }\n-    LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n-        + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n \n-    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n-    addStorageLocations(datanode, nsInfo, dataDirs, startOpt, true, false);\n-    \n-    // mark DN storage is initialized\n-    this.initialized \u003d true;\n+    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n+      throw new IOException(\"All specified directories are failed to load.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection\u003cStorageLocation\u003e dataDirs, StartupOption startOpt) throws IOException {\n    if (this.initialized) {\n      LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n      this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n      // mark DN storage is initialized\n      this.initialized \u003d true;\n    }\n\n    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n      throw new IOException(\"All specified directories are failed to load.\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "eca80dca3ee0888304519ec96e9e4113cc35b112": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6728. Dynamically add new volumes to DataStorage, formatted if necessary. Contributed by Lei Xu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616615 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 3:46 PM",
      "commitName": "eca80dca3ee0888304519ec96e9e4113cc35b112",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "01/08/14 1:41 PM",
      "commitNameOld": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,17 @@\n   synchronized void recoverTransitionRead(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt)\n       throws IOException {\n     if (initialized) {\n       // DN storage has been initialized, no need to do anything\n       return;\n     }\n-    LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n-        + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n-    \n-    // 1. For each data directory calculate its state and \n-    // check whether all is consistent before transitioning.\n-    // Format and recover.\n+    LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+        + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n+\n     this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n-    ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n-    for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n-      File dataDir \u003d it.next().getFile();\n-      StorageDirectory sd \u003d new StorageDirectory(dataDir);\n-      StorageState curState;\n-      try {\n-        curState \u003d sd.analyzeStorage(startOpt, this);\n-        // sd is locked but not opened\n-        switch(curState) {\n-        case NORMAL:\n-          break;\n-        case NON_EXISTENT:\n-          // ignore this storage\n-          LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n-          it.remove();\n-          continue;\n-        case NOT_FORMATTED: // format\n-          LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n-          LOG.info(\"Formatting ...\");\n-          format(sd, nsInfo, datanode.getDatanodeUuid());\n-          break;\n-        default:  // recovery part is common\n-          sd.doRecover(curState);\n-        }\n-      } catch (IOException ioe) {\n-        sd.unlock();\n-        LOG.warn(\"Ignoring storage directory \" + dataDir\n-            + \" due to an exception\", ioe);\n-        //continue with other good dirs\n-        continue;\n-      }\n-      // add to the storage list\n-      addStorageDir(sd);\n-      dataDirStates.add(curState);\n-    }\n-\n-    if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n-      throw new IOException(\n-          \"All specified directories are not accessible or do not exist.\");\n-\n-    // 2. Do transitions\n-    // Each storage directory is treated individually.\n-    // During startup some of them can upgrade or rollback \n-    // while others could be uptodate for the regular startup.\n-    try {\n-      for (int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n-        doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n-        createStorageID(getStorageDir(idx));\n-      }\n-    } catch (IOException e) {\n-      unlockAll();\n-      throw e;\n-    }\n-\n-    // 3. Update all storages. Some of them might have just been formatted.\n-    this.writeAll();\n+    addStorageLocations(datanode, nsInfo, dataDirs, startOpt, true, false);\n     \n-    // 4. mark DN storage is initialized\n+    // mark DN storage is initialized\n     this.initialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void recoverTransitionRead(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt)\n      throws IOException {\n    if (initialized) {\n      // DN storage has been initialized, no need to do anything\n      return;\n    }\n    LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n\n    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n    addStorageLocations(datanode, nsInfo, dataDirs, startOpt, true, false);\n    \n    // mark DN storage is initialized\n    this.initialized \u003d true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "9d21180c1a625295bb9da0d9d5d8c55740944008": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2882. DN continues to start up, even if block pool fails to initialize (Contributed by Vinayakumar B)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1590941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/14 3:27 AM",
      "commitName": "9d21180c1a625295bb9da0d9d5d8c55740944008",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "24/03/14 10:51 PM",
      "commitNameOld": "3a61d25457606b93f7e99a48fe8f66984f4084b0",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 35.19,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,75 @@\n   synchronized void recoverTransitionRead(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt)\n       throws IOException {\n     if (initialized) {\n       // DN storage has been initialized, no need to do anything\n       return;\n     }\n     LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n         + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n     \n     // 1. For each data directory calculate its state and \n     // check whether all is consistent before transitioning.\n     // Format and recover.\n     this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n     ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n     for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n       File dataDir \u003d it.next().getFile();\n       StorageDirectory sd \u003d new StorageDirectory(dataDir);\n       StorageState curState;\n       try {\n         curState \u003d sd.analyzeStorage(startOpt, this);\n         // sd is locked but not opened\n         switch(curState) {\n         case NORMAL:\n           break;\n         case NON_EXISTENT:\n           // ignore this storage\n           LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n           it.remove();\n           continue;\n         case NOT_FORMATTED: // format\n           LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n           LOG.info(\"Formatting ...\");\n           format(sd, nsInfo, datanode.getDatanodeUuid());\n           break;\n         default:  // recovery part is common\n           sd.doRecover(curState);\n         }\n       } catch (IOException ioe) {\n         sd.unlock();\n         LOG.warn(\"Ignoring storage directory \" + dataDir\n             + \" due to an exception\", ioe);\n         //continue with other good dirs\n         continue;\n       }\n       // add to the storage list\n       addStorageDir(sd);\n       dataDirStates.add(curState);\n     }\n \n     if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n       throw new IOException(\n           \"All specified directories are not accessible or do not exist.\");\n \n     // 2. Do transitions\n     // Each storage directory is treated individually.\n     // During startup some of them can upgrade or rollback \n     // while others could be uptodate for the regular startup.\n-    for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n-      doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n-      createStorageID(getStorageDir(idx));\n+    try {\n+      for (int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n+        doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n+        createStorageID(getStorageDir(idx));\n+      }\n+    } catch (IOException e) {\n+      unlockAll();\n+      throw e;\n     }\n-    \n+\n     // 3. Update all storages. Some of them might have just been formatted.\n     this.writeAll();\n     \n     // 4. mark DN storage is initialized\n     this.initialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void recoverTransitionRead(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt)\n      throws IOException {\n    if (initialized) {\n      // DN storage has been initialized, no need to do anything\n      return;\n    }\n    LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n    \n    // 1. For each data directory calculate its state and \n    // check whether all is consistent before transitioning.\n    // Format and recover.\n    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n    ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n    for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n      File dataDir \u003d it.next().getFile();\n      StorageDirectory sd \u003d new StorageDirectory(dataDir);\n      StorageState curState;\n      try {\n        curState \u003d sd.analyzeStorage(startOpt, this);\n        // sd is locked but not opened\n        switch(curState) {\n        case NORMAL:\n          break;\n        case NON_EXISTENT:\n          // ignore this storage\n          LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n          it.remove();\n          continue;\n        case NOT_FORMATTED: // format\n          LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n          LOG.info(\"Formatting ...\");\n          format(sd, nsInfo, datanode.getDatanodeUuid());\n          break;\n        default:  // recovery part is common\n          sd.doRecover(curState);\n        }\n      } catch (IOException ioe) {\n        sd.unlock();\n        LOG.warn(\"Ignoring storage directory \" + dataDir\n            + \" due to an exception\", ioe);\n        //continue with other good dirs\n        continue;\n      }\n      // add to the storage list\n      addStorageDir(sd);\n      dataDirStates.add(curState);\n    }\n\n    if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n      throw new IOException(\n          \"All specified directories are not accessible or do not exist.\");\n\n    // 2. Do transitions\n    // Each storage directory is treated individually.\n    // During startup some of them can upgrade or rollback \n    // while others could be uptodate for the regular startup.\n    try {\n      for (int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n        doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n        createStorageID(getStorageDir(idx));\n      }\n    } catch (IOException e) {\n      unlockAll();\n      throw e;\n    }\n\n    // 3. Update all storages. Some of them might have just been formatted.\n    this.writeAll();\n    \n    // 4. mark DN storage is initialized\n    this.initialized \u003d true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "dbf14320c093991d2ca97b3608efe1c3c0af9888": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6005. Simplify Datanode rollback and downgrade. (Contributed by Suresh Srinivas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571431 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 12:46 PM",
      "commitName": "dbf14320c093991d2ca97b3608efe1c3c0af9888",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/02/14 8:37 AM",
      "commitNameOld": "5df82fa01d26c18685ad7617128dbc2913547cb3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 10.17,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   synchronized void recoverTransitionRead(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt)\n       throws IOException {\n     if (initialized) {\n       // DN storage has been initialized, no need to do anything\n       return;\n     }\n     LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n         + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n     \n     // 1. For each data directory calculate its state and \n     // check whether all is consistent before transitioning.\n     // Format and recover.\n     this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n     ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n     for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n       File dataDir \u003d it.next().getFile();\n       StorageDirectory sd \u003d new StorageDirectory(dataDir);\n       StorageState curState;\n       try {\n         curState \u003d sd.analyzeStorage(startOpt, this);\n         // sd is locked but not opened\n         switch(curState) {\n         case NORMAL:\n           break;\n         case NON_EXISTENT:\n           // ignore this storage\n           LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n           it.remove();\n           continue;\n         case NOT_FORMATTED: // format\n           LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n           LOG.info(\"Formatting ...\");\n           format(sd, nsInfo, datanode.getDatanodeUuid());\n           break;\n         default:  // recovery part is common\n           sd.doRecover(curState);\n         }\n       } catch (IOException ioe) {\n         sd.unlock();\n         LOG.warn(\"Ignoring storage directory \" + dataDir\n             + \" due to an exception\", ioe);\n         //continue with other good dirs\n         continue;\n       }\n       // add to the storage list\n       addStorageDir(sd);\n       dataDirStates.add(curState);\n     }\n \n     if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n       throw new IOException(\n           \"All specified directories are not accessible or do not exist.\");\n \n     // 2. Do transitions\n     // Each storage directory is treated individually.\n     // During startup some of them can upgrade or rollback \n     // while others could be uptodate for the regular startup.\n     for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n       doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n       createStorageID(getStorageDir(idx));\n     }\n     \n     // 3. Update all storages. Some of them might have just been formatted.\n     this.writeAll();\n     \n-    // 4. mark DN storage is initilized\n+    // 4. mark DN storage is initialized\n     this.initialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void recoverTransitionRead(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt)\n      throws IOException {\n    if (initialized) {\n      // DN storage has been initialized, no need to do anything\n      return;\n    }\n    LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n    \n    // 1. For each data directory calculate its state and \n    // check whether all is consistent before transitioning.\n    // Format and recover.\n    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n    ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n    for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n      File dataDir \u003d it.next().getFile();\n      StorageDirectory sd \u003d new StorageDirectory(dataDir);\n      StorageState curState;\n      try {\n        curState \u003d sd.analyzeStorage(startOpt, this);\n        // sd is locked but not opened\n        switch(curState) {\n        case NORMAL:\n          break;\n        case NON_EXISTENT:\n          // ignore this storage\n          LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n          it.remove();\n          continue;\n        case NOT_FORMATTED: // format\n          LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n          LOG.info(\"Formatting ...\");\n          format(sd, nsInfo, datanode.getDatanodeUuid());\n          break;\n        default:  // recovery part is common\n          sd.doRecover(curState);\n        }\n      } catch (IOException ioe) {\n        sd.unlock();\n        LOG.warn(\"Ignoring storage directory \" + dataDir\n            + \" due to an exception\", ioe);\n        //continue with other good dirs\n        continue;\n      }\n      // add to the storage list\n      addStorageDir(sd);\n      dataDirStates.add(curState);\n    }\n\n    if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n      throw new IOException(\n          \"All specified directories are not accessible or do not exist.\");\n\n    // 2. Do transitions\n    // Each storage directory is treated individually.\n    // During startup some of them can upgrade or rollback \n    // while others could be uptodate for the regular startup.\n    for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n      doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n      createStorageID(getStorageDir(idx));\n    }\n    \n    // 3. Update all storages. Some of them might have just been formatted.\n    this.writeAll();\n    \n    // 4. mark DN storage is initialized\n    this.initialized \u003d true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5874. Should not compare DataNode current layout version with that of NameNode in DataStrorage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1565750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 10:25 AM",
      "commitName": "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/01/14 7:21 PM",
      "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.63,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,70 @@\n   synchronized void recoverTransitionRead(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt)\n       throws IOException {\n     if (initialized) {\n       // DN storage has been initialized, no need to do anything\n       return;\n     }\n-    if( HdfsConstants.DATANODE_LAYOUT_VERSION \u003d\u003d nsInfo.getLayoutVersion())\n-      LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION + \n-      \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n+    LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+        + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n     \n     // 1. For each data directory calculate its state and \n     // check whether all is consistent before transitioning.\n     // Format and recover.\n     this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n     ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n     for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n       File dataDir \u003d it.next().getFile();\n       StorageDirectory sd \u003d new StorageDirectory(dataDir);\n       StorageState curState;\n       try {\n         curState \u003d sd.analyzeStorage(startOpt, this);\n         // sd is locked but not opened\n         switch(curState) {\n         case NORMAL:\n           break;\n         case NON_EXISTENT:\n           // ignore this storage\n           LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n           it.remove();\n           continue;\n         case NOT_FORMATTED: // format\n           LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n           LOG.info(\"Formatting ...\");\n           format(sd, nsInfo, datanode.getDatanodeUuid());\n           break;\n         default:  // recovery part is common\n           sd.doRecover(curState);\n         }\n       } catch (IOException ioe) {\n         sd.unlock();\n         LOG.warn(\"Ignoring storage directory \" + dataDir\n             + \" due to an exception\", ioe);\n         //continue with other good dirs\n         continue;\n       }\n       // add to the storage list\n       addStorageDir(sd);\n       dataDirStates.add(curState);\n     }\n \n     if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n       throw new IOException(\n           \"All specified directories are not accessible or do not exist.\");\n \n     // 2. Do transitions\n     // Each storage directory is treated individually.\n     // During startup some of them can upgrade or rollback \n     // while others could be uptodate for the regular startup.\n     for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n       doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n-      assert this.getLayoutVersion() \u003d\u003d nsInfo.getLayoutVersion() :\n-        \"Data-node and name-node layout versions must be the same.\";\n       createStorageID(getStorageDir(idx));\n     }\n     \n     // 3. Update all storages. Some of them might have just been formatted.\n     this.writeAll();\n     \n     // 4. mark DN storage is initilized\n     this.initialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void recoverTransitionRead(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt)\n      throws IOException {\n    if (initialized) {\n      // DN storage has been initialized, no need to do anything\n      return;\n    }\n    LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n    \n    // 1. For each data directory calculate its state and \n    // check whether all is consistent before transitioning.\n    // Format and recover.\n    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n    ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n    for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n      File dataDir \u003d it.next().getFile();\n      StorageDirectory sd \u003d new StorageDirectory(dataDir);\n      StorageState curState;\n      try {\n        curState \u003d sd.analyzeStorage(startOpt, this);\n        // sd is locked but not opened\n        switch(curState) {\n        case NORMAL:\n          break;\n        case NON_EXISTENT:\n          // ignore this storage\n          LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n          it.remove();\n          continue;\n        case NOT_FORMATTED: // format\n          LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n          LOG.info(\"Formatting ...\");\n          format(sd, nsInfo, datanode.getDatanodeUuid());\n          break;\n        default:  // recovery part is common\n          sd.doRecover(curState);\n        }\n      } catch (IOException ioe) {\n        sd.unlock();\n        LOG.warn(\"Ignoring storage directory \" + dataDir\n            + \" due to an exception\", ioe);\n        //continue with other good dirs\n        continue;\n      }\n      // add to the storage list\n      addStorageDir(sd);\n      dataDirStates.add(curState);\n    }\n\n    if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n      throw new IOException(\n          \"All specified directories are not accessible or do not exist.\");\n\n    // 2. Do transitions\n    // Each storage directory is treated individually.\n    // During startup some of them can upgrade or rollback \n    // while others could be uptodate for the regular startup.\n    for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n      doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n      createStorageID(getStorageDir(idx));\n    }\n    \n    // 3. Update all storages. Some of them might have just been formatted.\n    this.writeAll();\n    \n    // 4. mark DN storage is initilized\n    this.initialized \u003d true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/12/13 9:41 AM",
      "commitNameOld": "18159be495f96bde4bd4fa2cacb14aafb87e87bc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.4,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,73 @@\n   synchronized void recoverTransitionRead(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt)\n       throws IOException {\n     if (initialized) {\n       // DN storage has been initialized, no need to do anything\n       return;\n     }\n-    assert HdfsConstants.LAYOUT_VERSION \u003d\u003d nsInfo.getLayoutVersion() :\n-      \"Data-node version \" + HdfsConstants.LAYOUT_VERSION + \n-      \" and name-node layout version \" + nsInfo.getLayoutVersion() + \n-      \" must be the same.\";\n+    if( HdfsConstants.DATANODE_LAYOUT_VERSION \u003d\u003d nsInfo.getLayoutVersion())\n+      LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION + \n+      \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n     \n     // 1. For each data directory calculate its state and \n     // check whether all is consistent before transitioning.\n     // Format and recover.\n     this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n     ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n     for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n       File dataDir \u003d it.next().getFile();\n       StorageDirectory sd \u003d new StorageDirectory(dataDir);\n       StorageState curState;\n       try {\n         curState \u003d sd.analyzeStorage(startOpt, this);\n         // sd is locked but not opened\n         switch(curState) {\n         case NORMAL:\n           break;\n         case NON_EXISTENT:\n           // ignore this storage\n           LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n           it.remove();\n           continue;\n         case NOT_FORMATTED: // format\n           LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n           LOG.info(\"Formatting ...\");\n           format(sd, nsInfo, datanode.getDatanodeUuid());\n           break;\n         default:  // recovery part is common\n           sd.doRecover(curState);\n         }\n       } catch (IOException ioe) {\n         sd.unlock();\n         LOG.warn(\"Ignoring storage directory \" + dataDir\n             + \" due to an exception\", ioe);\n         //continue with other good dirs\n         continue;\n       }\n       // add to the storage list\n       addStorageDir(sd);\n       dataDirStates.add(curState);\n     }\n \n     if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n       throw new IOException(\n           \"All specified directories are not accessible or do not exist.\");\n \n     // 2. Do transitions\n     // Each storage directory is treated individually.\n     // During startup some of them can upgrade or rollback \n     // while others could be uptodate for the regular startup.\n     for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n       doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n       assert this.getLayoutVersion() \u003d\u003d nsInfo.getLayoutVersion() :\n         \"Data-node and name-node layout versions must be the same.\";\n       createStorageID(getStorageDir(idx));\n     }\n     \n     // 3. Update all storages. Some of them might have just been formatted.\n     this.writeAll();\n     \n     // 4. mark DN storage is initilized\n     this.initialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void recoverTransitionRead(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt)\n      throws IOException {\n    if (initialized) {\n      // DN storage has been initialized, no need to do anything\n      return;\n    }\n    if( HdfsConstants.DATANODE_LAYOUT_VERSION \u003d\u003d nsInfo.getLayoutVersion())\n      LOG.info(\"Data-node version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION + \n      \" and name-node layout version: \" + nsInfo.getLayoutVersion());\n    \n    // 1. For each data directory calculate its state and \n    // check whether all is consistent before transitioning.\n    // Format and recover.\n    this.storageDirs \u003d new ArrayList\u003cStorageDirectory\u003e(dataDirs.size());\n    ArrayList\u003cStorageState\u003e dataDirStates \u003d new ArrayList\u003cStorageState\u003e(dataDirs.size());\n    for(Iterator\u003cStorageLocation\u003e it \u003d dataDirs.iterator(); it.hasNext();) {\n      File dataDir \u003d it.next().getFile();\n      StorageDirectory sd \u003d new StorageDirectory(dataDir);\n      StorageState curState;\n      try {\n        curState \u003d sd.analyzeStorage(startOpt, this);\n        // sd is locked but not opened\n        switch(curState) {\n        case NORMAL:\n          break;\n        case NON_EXISTENT:\n          // ignore this storage\n          LOG.info(\"Storage directory \" + dataDir + \" does not exist\");\n          it.remove();\n          continue;\n        case NOT_FORMATTED: // format\n          LOG.info(\"Storage directory \" + dataDir + \" is not formatted\");\n          LOG.info(\"Formatting ...\");\n          format(sd, nsInfo, datanode.getDatanodeUuid());\n          break;\n        default:  // recovery part is common\n          sd.doRecover(curState);\n        }\n      } catch (IOException ioe) {\n        sd.unlock();\n        LOG.warn(\"Ignoring storage directory \" + dataDir\n            + \" due to an exception\", ioe);\n        //continue with other good dirs\n        continue;\n      }\n      // add to the storage list\n      addStorageDir(sd);\n      dataDirStates.add(curState);\n    }\n\n    if (dataDirs.size() \u003d\u003d 0 || dataDirStates.size() \u003d\u003d 0)  // none of the data dirs exist\n      throw new IOException(\n          \"All specified directories are not accessible or do not exist.\");\n\n    // 2. Do transitions\n    // Each storage directory is treated individually.\n    // During startup some of them can upgrade or rollback \n    // while others could be uptodate for the regular startup.\n    for(int idx \u003d 0; idx \u003c getNumStorageDirs(); idx++) {\n      doTransition(datanode, getStorageDir(idx), nsInfo, startOpt);\n      assert this.getLayoutVersion() \u003d\u003d nsInfo.getLayoutVersion() :\n        \"Data-node and name-node layout versions must be the same.\";\n      createStorageID(getStorageDir(idx));\n    }\n    \n    // 3. Update all storages. Some of them might have just been formatted.\n    this.writeAll();\n    \n    // 4. mark DN storage is initilized\n    this.initialized \u003d true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    }
  }
}