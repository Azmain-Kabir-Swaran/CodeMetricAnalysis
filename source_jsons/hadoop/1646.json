{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferClient.java",
  "functionName": "getEncryptedStreams",
  "functionId": "getEncryptedStreams___addr-InetAddress__underlyingOut-OutputStream__underlyingIn-InputStream__encryptionKey-DataEncryptionKey__accessToken-Token__BlockTokenIdentifier____secretKey-SecretKey",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
  "functionStartLine": 312,
  "functionEndLine": 335,
  "numCommitsSeen": 19,
  "timeTaken": 4526,
  "changeHistory": [
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
    "626fec652b9f3dae10c9af78fd220b1240f19fc7",
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "3b54223c0f32d42a84436c670d80b791a8e9696d"
  ],
  "changeHistoryShort": {
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": "Ybodychange",
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": "Ymultichange(Yparameterchange,Ybodychange)",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Yfilerename",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14611. Move handshake secret field from Token to BlockAccessToken. Contributed by Chen Liang.\n",
      "commitDate": "11/07/19 1:23 PM",
      "commitName": "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "03/05/19 10:14 AM",
      "commitNameOld": "1d59cc490cb46e99d1d72fe3bd0c2a396d98f2c8",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 69.13,
      "commitsBetweenForRepo": 498,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   private IOStreamPair getEncryptedStreams(InetAddress addr,\n       OutputStream underlyingOut, InputStream underlyingIn,\n       DataEncryptionKey encryptionKey,\n       Token\u003cBlockTokenIdentifier\u003e accessToken,\n       SecretKey secretKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n         encryptionKey.encryptionAlgorithm);\n     if (secretKey !\u003d null) {\n       LOG.debug(\"DataNode overwriting downstream QOP\" +\n           saslProps.get(Sasl.QOP));\n-      byte[] newSecret \u003d  SecretManager.createPassword(saslProps.get(Sasl.QOP)\n-          .getBytes(Charsets.UTF_8), secretKey);\n-      accessToken.setDNHandshakeSecret(newSecret);\n+      updateToken(accessToken, secretKey, saslProps);\n     }\n \n     LOG.debug(\"Client using encryption algorithm {}\",\n         encryptionKey.encryptionAlgorithm);\n \n     String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n     char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n     return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n         saslProps, callbackHandler, accessToken);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getEncryptedStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken,\n      SecretKey secretKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n        encryptionKey.encryptionAlgorithm);\n    if (secretKey !\u003d null) {\n      LOG.debug(\"DataNode overwriting downstream QOP\" +\n          saslProps.get(Sasl.QOP));\n      updateToken(accessToken, secretKey, saslProps);\n    }\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n        encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler, accessToken);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
      "commitDate": "12/04/19 5:37 PM",
      "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
      "commitAuthor": "Chen Liang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
          "commitDate": "12/04/19 5:37 PM",
          "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "31/01/18 10:47 AM",
          "commitNameOld": "37b753656849d0864ed3c8858edf3b85515cbf39",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 436.24,
          "commitsBetweenForRepo": 3917,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,26 @@\n   private IOStreamPair getEncryptedStreams(InetAddress addr,\n-      OutputStream underlyingOut,\n-      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n+      OutputStream underlyingOut, InputStream underlyingIn,\n+      DataEncryptionKey encryptionKey,\n+      Token\u003cBlockTokenIdentifier\u003e accessToken,\n+      SecretKey secretKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n         encryptionKey.encryptionAlgorithm);\n+    if (secretKey !\u003d null) {\n+      LOG.debug(\"DataNode overwriting downstream QOP\" +\n+          saslProps.get(Sasl.QOP));\n+      byte[] newSecret \u003d  SecretManager.createPassword(saslProps.get(Sasl.QOP)\n+          .getBytes(Charsets.UTF_8), secretKey);\n+      accessToken.setDNHandshakeSecret(newSecret);\n+    }\n \n     LOG.debug(\"Client using encryption algorithm {}\",\n         encryptionKey.encryptionAlgorithm);\n \n     String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n     char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n     return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n-        saslProps, callbackHandler);\n+        saslProps, callbackHandler, accessToken);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken,\n      SecretKey secretKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n        encryptionKey.encryptionAlgorithm);\n    if (secretKey !\u003d null) {\n      LOG.debug(\"DataNode overwriting downstream QOP\" +\n          saslProps.get(Sasl.QOP));\n      byte[] newSecret \u003d  SecretManager.createPassword(saslProps.get(Sasl.QOP)\n          .getBytes(Charsets.UTF_8), secretKey);\n      accessToken.setDNHandshakeSecret(newSecret);\n    }\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n        encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler, accessToken);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {
            "oldValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey]",
            "newValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey, accessToken-Token\u003cBlockTokenIdentifier\u003e, secretKey-SecretKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
          "commitDate": "12/04/19 5:37 PM",
          "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "31/01/18 10:47 AM",
          "commitNameOld": "37b753656849d0864ed3c8858edf3b85515cbf39",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 436.24,
          "commitsBetweenForRepo": 3917,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,26 @@\n   private IOStreamPair getEncryptedStreams(InetAddress addr,\n-      OutputStream underlyingOut,\n-      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n+      OutputStream underlyingOut, InputStream underlyingIn,\n+      DataEncryptionKey encryptionKey,\n+      Token\u003cBlockTokenIdentifier\u003e accessToken,\n+      SecretKey secretKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n         encryptionKey.encryptionAlgorithm);\n+    if (secretKey !\u003d null) {\n+      LOG.debug(\"DataNode overwriting downstream QOP\" +\n+          saslProps.get(Sasl.QOP));\n+      byte[] newSecret \u003d  SecretManager.createPassword(saslProps.get(Sasl.QOP)\n+          .getBytes(Charsets.UTF_8), secretKey);\n+      accessToken.setDNHandshakeSecret(newSecret);\n+    }\n \n     LOG.debug(\"Client using encryption algorithm {}\",\n         encryptionKey.encryptionAlgorithm);\n \n     String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n     char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n     return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n-        saslProps, callbackHandler);\n+        saslProps, callbackHandler, accessToken);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(InetAddress addr,\n      OutputStream underlyingOut, InputStream underlyingIn,\n      DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken,\n      SecretKey secretKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n        encryptionKey.encryptionAlgorithm);\n    if (secretKey !\u003d null) {\n      LOG.debug(\"DataNode overwriting downstream QOP\" +\n          saslProps.get(Sasl.QOP));\n      byte[] newSecret \u003d  SecretManager.createPassword(saslProps.get(Sasl.QOP)\n          .getBytes(Charsets.UTF_8), secretKey);\n      accessToken.setDNHandshakeSecret(newSecret);\n    }\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n        encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler, accessToken);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "24/02/16 12:11 PM",
      "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
          "commitDate": "24/02/16 12:11 PM",
          "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
          "commitAuthor": "cnauroth",
          "commitDateOld": "03/10/15 11:38 AM",
          "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 144.06,
          "commitsBetweenForRepo": 987,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private IOStreamPair getEncryptedStreams(OutputStream underlyingOut,\n+  private IOStreamPair getEncryptedStreams(InetAddress addr,\n+      OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n         encryptionKey.encryptionAlgorithm);\n \n     LOG.debug(\"Client using encryption algorithm {}\",\n         encryptionKey.encryptionAlgorithm);\n \n     String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n     char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n-    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n-        callbackHandler);\n+    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n+        saslProps, callbackHandler);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(InetAddress addr,\n      OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n        encryptionKey.encryptionAlgorithm);\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n        encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {
            "oldValue": "[underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey]",
            "newValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
          "commitDate": "24/02/16 12:11 PM",
          "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
          "commitAuthor": "cnauroth",
          "commitDateOld": "03/10/15 11:38 AM",
          "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 144.06,
          "commitsBetweenForRepo": 987,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private IOStreamPair getEncryptedStreams(OutputStream underlyingOut,\n+  private IOStreamPair getEncryptedStreams(InetAddress addr,\n+      OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey)\n       throws IOException {\n     Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n         encryptionKey.encryptionAlgorithm);\n \n     LOG.debug(\"Client using encryption algorithm {}\",\n         encryptionKey.encryptionAlgorithm);\n \n     String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n     char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n     CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n         password);\n-    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n-        callbackHandler);\n+    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n+        saslProps, callbackHandler);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(InetAddress addr,\n      OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n        encryptionKey.encryptionAlgorithm);\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n        encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n        password);\n    return doSaslHandshake(addr, underlyingOut, underlyingIn, userName,\n        saslProps, callbackHandler);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 1:26 PM",
      "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private IOStreamPair getEncryptedStreams(OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      encryptionKey.encryptionAlgorithm);\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n      encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n      password);\n    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n      callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
      }
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,16 @@\n+  private IOStreamPair getEncryptedStreams(OutputStream underlyingOut,\n+      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n+      throws IOException {\n+    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n+      encryptionKey.encryptionAlgorithm);\n+\n+    LOG.debug(\"Client using encryption algorithm {}\",\n+      encryptionKey.encryptionAlgorithm);\n+\n+    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n+    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n+    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n+      password);\n+    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n+      callbackHandler);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getEncryptedStreams(OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey)\n      throws IOException {\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      encryptionKey.encryptionAlgorithm);\n\n    LOG.debug(\"Client using encryption algorithm {}\",\n      encryptionKey.encryptionAlgorithm);\n\n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    char[] password \u003d encryptionKeyToPassword(encryptionKey.encryptionKey);\n    CallbackHandler callbackHandler \u003d new SaslClientCallbackHandler(userName,\n      password);\n    return doSaslHandshake(underlyingOut, underlyingIn, userName, saslProps,\n      callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
    }
  }
}