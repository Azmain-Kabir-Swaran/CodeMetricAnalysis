{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirEncryptionZoneOp.java",
  "functionName": "ensureKeyIsInitialized",
  "functionId": "ensureKeyIsInitialized___fsd-FSDirectory(modifiers-final)__keyName-String(modifiers-final)__src-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
  "functionStartLine": 113,
  "functionEndLine": 140,
  "numCommitsSeen": 25,
  "timeTaken": 1772,
  "changeHistory": [
    "b63dcd583f0b98e785831004f41bd7c7de8b3c18",
    "71a81b6257c0000475ad62eb69292a20d45d269c"
  ],
  "changeHistoryShort": {
    "b63dcd583f0b98e785831004f41bd7c7de8b3c18": "Ybodychange",
    "71a81b6257c0000475ad62eb69292a20d45d269c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b63dcd583f0b98e785831004f41bd7c7de8b3c18": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12974. Exception message is not printed when creating an encryption zone fails with AuthorizationException. Contributed by fang zhenyi.\n",
      "commitDate": "28/01/18 10:19 PM",
      "commitName": "b63dcd583f0b98e785831004f41bd7c7de8b3c18",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "20/10/17 4:25 PM",
      "commitNameOld": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 100.29,
      "commitsBetweenForRepo": 645,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   static KeyProvider.Metadata ensureKeyIsInitialized(final FSDirectory fsd,\n       final String keyName, final String src) throws IOException {\n     KeyProviderCryptoExtension provider \u003d fsd.getProvider();\n     if (provider \u003d\u003d null) {\n       throw new IOException(\"Can\u0027t create an encryption zone for \" + src\n           + \" since no key provider is available.\");\n     }\n     if (keyName \u003d\u003d null || keyName.isEmpty()) {\n       throw new IOException(\"Must specify a key name when creating an \"\n           + \"encryption zone\");\n     }\n+    EncryptionFaultInjector.getInstance().ensureKeyIsInitialized();\n     KeyProvider.Metadata metadata \u003d provider.getMetadata(keyName);\n     if (metadata \u003d\u003d null) {\n       /*\n        * It would be nice if we threw something more specific than\n        * IOException when the key is not found, but the KeyProvider API\n        * doesn\u0027t provide for that. If that API is ever changed to throw\n        * something more specific (e.g. UnknownKeyException) then we can\n        * update this to match it, or better yet, just rethrow the\n        * KeyProvider\u0027s exception.\n        */\n       throw new IOException(\"Key \" + keyName + \" doesn\u0027t exist.\");\n     }\n     // If the provider supports pool for EDEKs, this will fill in the pool\n     provider.warmUpEncryptedKeys(keyName);\n     return metadata;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static KeyProvider.Metadata ensureKeyIsInitialized(final FSDirectory fsd,\n      final String keyName, final String src) throws IOException {\n    KeyProviderCryptoExtension provider \u003d fsd.getProvider();\n    if (provider \u003d\u003d null) {\n      throw new IOException(\"Can\u0027t create an encryption zone for \" + src\n          + \" since no key provider is available.\");\n    }\n    if (keyName \u003d\u003d null || keyName.isEmpty()) {\n      throw new IOException(\"Must specify a key name when creating an \"\n          + \"encryption zone\");\n    }\n    EncryptionFaultInjector.getInstance().ensureKeyIsInitialized();\n    KeyProvider.Metadata metadata \u003d provider.getMetadata(keyName);\n    if (metadata \u003d\u003d null) {\n      /*\n       * It would be nice if we threw something more specific than\n       * IOException when the key is not found, but the KeyProvider API\n       * doesn\u0027t provide for that. If that API is ever changed to throw\n       * something more specific (e.g. UnknownKeyException) then we can\n       * update this to match it, or better yet, just rethrow the\n       * KeyProvider\u0027s exception.\n       */\n      throw new IOException(\"Key \" + keyName + \" doesn\u0027t exist.\");\n    }\n    // If the provider supports pool for EDEKs, this will fill in the pool\n    provider.warmUpEncryptedKeys(keyName);\n    return metadata;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "71a81b6257c0000475ad62eb69292a20d45d269c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
      "commitDate": "24/09/15 8:34 AM",
      "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,27 @@\n+  static KeyProvider.Metadata ensureKeyIsInitialized(final FSDirectory fsd,\n+      final String keyName, final String src) throws IOException {\n+    KeyProviderCryptoExtension provider \u003d fsd.getProvider();\n+    if (provider \u003d\u003d null) {\n+      throw new IOException(\"Can\u0027t create an encryption zone for \" + src\n+          + \" since no key provider is available.\");\n+    }\n+    if (keyName \u003d\u003d null || keyName.isEmpty()) {\n+      throw new IOException(\"Must specify a key name when creating an \"\n+          + \"encryption zone\");\n+    }\n+    KeyProvider.Metadata metadata \u003d provider.getMetadata(keyName);\n+    if (metadata \u003d\u003d null) {\n+      /*\n+       * It would be nice if we threw something more specific than\n+       * IOException when the key is not found, but the KeyProvider API\n+       * doesn\u0027t provide for that. If that API is ever changed to throw\n+       * something more specific (e.g. UnknownKeyException) then we can\n+       * update this to match it, or better yet, just rethrow the\n+       * KeyProvider\u0027s exception.\n+       */\n+      throw new IOException(\"Key \" + keyName + \" doesn\u0027t exist.\");\n+    }\n+    // If the provider supports pool for EDEKs, this will fill in the pool\n+    provider.warmUpEncryptedKeys(keyName);\n+    return metadata;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static KeyProvider.Metadata ensureKeyIsInitialized(final FSDirectory fsd,\n      final String keyName, final String src) throws IOException {\n    KeyProviderCryptoExtension provider \u003d fsd.getProvider();\n    if (provider \u003d\u003d null) {\n      throw new IOException(\"Can\u0027t create an encryption zone for \" + src\n          + \" since no key provider is available.\");\n    }\n    if (keyName \u003d\u003d null || keyName.isEmpty()) {\n      throw new IOException(\"Must specify a key name when creating an \"\n          + \"encryption zone\");\n    }\n    KeyProvider.Metadata metadata \u003d provider.getMetadata(keyName);\n    if (metadata \u003d\u003d null) {\n      /*\n       * It would be nice if we threw something more specific than\n       * IOException when the key is not found, but the KeyProvider API\n       * doesn\u0027t provide for that. If that API is ever changed to throw\n       * something more specific (e.g. UnknownKeyException) then we can\n       * update this to match it, or better yet, just rethrow the\n       * KeyProvider\u0027s exception.\n       */\n      throw new IOException(\"Key \" + keyName + \" doesn\u0027t exist.\");\n    }\n    // If the provider supports pool for EDEKs, this will fill in the pool\n    provider.warmUpEncryptedKeys(keyName);\n    return metadata;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java"
    }
  }
}