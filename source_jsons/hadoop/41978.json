{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMasterService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
  "functionStartLine": 183,
  "functionEndLine": 223,
  "numCommitsSeen": 135,
  "timeTaken": 11173,
  "changeHistory": [
    "ed13cf84068ad50a78e66211132c1f08238fb65b",
    "5252562edf1f65a9c5d502016df8bb92fbe78095",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
    "5766a04428f65bb008b5c451f6f09e61e1000300",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "c23cf3cddff9d4d52c2e892b26ba20e5640501e0",
    "32bc200d54928d39acdc837c2c77b4c443fb46be",
    "7d0c43d7cff6d250613a04fea9449f139988e901",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "0928502029ef141759008997335ea2cd836a7154",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "48414b08277b86cdbc34ae36d7c4d204fd838294",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "fe7711df98b9dd16259f6534e8461a29f24caadc",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "ed13cf84068ad50a78e66211132c1f08238fb65b": "Ybodychange",
    "5252562edf1f65a9c5d502016df8bb92fbe78095": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Ybodychange",
    "5766a04428f65bb008b5c451f6f09e61e1000300": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Ybodychange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "c23cf3cddff9d4d52c2e892b26ba20e5640501e0": "Ybodychange",
    "32bc200d54928d39acdc837c2c77b4c443fb46be": "Ybodychange",
    "7d0c43d7cff6d250613a04fea9449f139988e901": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "48414b08277b86cdbc34ae36d7c4d204fd838294": "Ybodychange",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": "Ybodychange",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "fe7711df98b9dd16259f6534e8461a29f24caadc": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ed13cf84068ad50a78e66211132c1f08238fb65b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9317. Avoid repeated YarnConfiguration#timelineServiceV2Enabled check. Contributed by Prabhu Joseph\n",
      "commitDate": "22/02/19 7:31 AM",
      "commitName": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "24/09/18 11:37 AM",
      "commitNameOld": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 150.87,
      "commitsBetweenForRepo": 1138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d getServer(rpc, serverConf, masterServiceAddress,\n         this.rmContext.getAMRMTokenSecretManager());\n     // TODO more exceptions could be added later.\n     this.server.addTerseExceptions(\n         ApplicationMasterNotRegisteredException.class);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.server.start();\n     this.masterServiceAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n+    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n+        timelineServiceV2Enabled(conf);\n+\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d getServer(rpc, serverConf, masterServiceAddress,\n        this.rmContext.getAMRMTokenSecretManager());\n    // TODO more exceptions could be added later.\n    this.server.addTerseExceptions(\n        ApplicationMasterNotRegisteredException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    this.masterServiceAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                               YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "5252562edf1f65a9c5d502016df8bb92fbe78095": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5297. Avoid printing a stack trace when recovering an app after the RM restarts. (Junping Du via Varun Saxena).\n",
      "commitDate": "08/07/16 11:39 AM",
      "commitName": "5252562edf1f65a9c5d502016df8bb92fbe78095",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 74.54,
      "commitsBetweenForRepo": 504,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d getServer(rpc, serverConf, masterServiceAddress,\n         this.rmContext.getAMRMTokenSecretManager());\n-    \n+    // TODO more exceptions could be added later.\n+    this.server.addTerseExceptions(\n+        ApplicationMasterNotRegisteredException.class);\n+\n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.server.start();\n     this.masterServiceAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d getServer(rpc, serverConf, masterServiceAddress,\n        this.rmContext.getAMRMTokenSecretManager());\n    // TODO more exceptions could be added later.\n    this.server.addTerseExceptions(\n        ApplicationMasterNotRegisteredException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    this.masterServiceAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                               YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "16/10/15 3:26 PM",
      "commitNameOld": "f9da5cdb2b2dd071fd60fc01ea1edf0f79c0819b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 191.3,
      "commitsBetweenForRepo": 1245,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n-    this.server \u003d\n-      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n-          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n-          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n-              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n+    this.server \u003d getServer(rpc, serverConf, masterServiceAddress,\n+        this.rmContext.getAMRMTokenSecretManager());\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n-    \n+\n     this.server.start();\n     this.masterServiceAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d getServer(rpc, serverConf, masterServiceAddress,\n        this.rmContext.getAMRMTokenSecretManager());\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    this.masterServiceAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                               YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "5766a04428f65bb008b5c451f6f09e61e1000300": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3749. We should make a copy of configuration when init\nMiniYARNCluster with multiple RMs. Contributed by Chun Chen\n",
      "commitDate": "03/06/15 5:20 PM",
      "commitName": "5766a04428f65bb008b5c451f6f09e61e1000300",
      "commitAuthor": "Xuan",
      "commitDateOld": "15/05/15 3:09 PM",
      "commitNameOld": "f7e051c4310024d4040ad466c34432c72e88b0fc",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 19.09,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,38 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n-    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n-        YarnConfiguration.RM_BIND_HOST,\n-        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n-\n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           serverConf, this.rmContext.getAMRMTokenSecretManager(),\n           serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n-    this.bindAddress \u003d\n+    this.masterServiceAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    this.masterServiceAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                               YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "24/06/14 9:42 PM",
      "commitNameOld": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 36.64,
      "commitsBetweenForRepo": 241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           serverConf, this.rmContext.getAMRMTokenSecretManager(),\n           serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n-        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+        conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n+                               YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+                               YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                               YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1758. Fixed ResourceManager to not mandate the presence of site specific configuration files and thus fix failures in downstream tests. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/14 11:41 AM",
      "commitName": "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/02/14 6:07 PM",
      "commitNameOld": "faddccc216f4ba5b503a7d21ce699217d75fb400",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 4.73,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,41 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           serverConf, this.rmContext.getAMRMTokenSecretManager(),\n           serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      conf.addResource(this.rmContext.getConfigurationProvider()\n-          .getConfigurationInputStream(conf,\n-              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n+      InputStream inputStream \u003d\n+          this.rmContext.getConfigurationProvider()\n+              .getConfigurationInputStream(conf,\n+                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n+      if (inputStream !\u003d null) {\n+        conf.addResource(inputStream);\n+      }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 9:49 AM",
      "commitNameOld": "996acc834e969bcb71b3d9808854a259490cb32d",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           serverConf, this.rmContext.getAMRMTokenSecretManager(),\n           serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(\n-          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n-              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n-          RMPolicyProvider.getInstance());\n+      conf.addResource(this.rmContext.getConfigurationProvider()\n+          .getConfigurationInputStream(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n+      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      conf.addResource(this.rmContext.getConfigurationProvider()\n          .getConfigurationInputStream(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     Configuration serverConf \u003d conf;\n     // If the auth is not-simple, enforce it to be token-based.\n     serverConf \u003d new Configuration(conf);\n     serverConf.set(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n         SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           serverConf, this.rmContext.getAMRMTokenSecretManager(),\n           serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(conf, new RMPolicyProvider());\n+      refreshServiceAcls(\n+          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n+          RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(\n          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n          RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "c23cf3cddff9d4d52c2e892b26ba20e5640501e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-961. Changed ContainerManager to enforce Token auth irrespective of security. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 3:23 PM",
      "commitName": "c23cf3cddff9d4d52c2e892b26ba20e5640501e0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/07/13 5:57 PM",
      "commitNameOld": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.89,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     Configuration serverConf \u003d conf;\n-    if (!UserGroupInformation.isSecurityEnabled()) {\n-      // If the auth is not-simple, enforce it to be token-based.\n-      serverConf \u003d new Configuration(conf);\n-      serverConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n-        UserGroupInformation.AuthenticationMethod.TOKEN.toString());\n-    }\n+    // If the auth is not-simple, enforce it to be token-based.\n+    serverConf \u003d new Configuration(conf);\n+    serverConf.set(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n+        SaslRpcServer.AuthMethod.TOKEN.toString());\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           serverConf, this.rmContext.getAMRMTokenSecretManager(),\n           serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    Configuration serverConf \u003d conf;\n    // If the auth is not-simple, enforce it to be token-based.\n    serverConf \u003d new Configuration(conf);\n    serverConf.set(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        SaslRpcServer.AuthMethod.TOKEN.toString());\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "32bc200d54928d39acdc837c2c77b4c443fb46be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-701. Use application tokens irrespective of secure or non-secure mode. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504604 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 12:03 PM",
      "commitName": "32bc200d54928d39acdc837c2c77b4c443fb46be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/07/13 12:31 AM",
      "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.48,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n+    Configuration serverConf \u003d conf;\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      // If the auth is not-simple, enforce it to be token-based.\n+      serverConf \u003d new Configuration(conf);\n+      serverConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n+        UserGroupInformation.AuthenticationMethod.TOKEN.toString());\n+    }\n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n-          conf, this.rmContext.getAMRMTokenSecretManager(),\n-          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n+          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n+          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    Configuration serverConf \u003d conf;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      // If the auth is not-simple, enforce it to be token-based.\n      serverConf \u003d new Configuration(conf);\n      serverConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        UserGroupInformation.AuthenticationMethod.TOKEN.toString());\n    }\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          serverConf, this.rmContext.getAMRMTokenSecretManager(),\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "7d0c43d7cff6d250613a04fea9449f139988e901": {
      "type": "Ybodychange",
      "commitMessage": "YARN-822. Renamed ApplicationToken to be AMRMToken, and similarly the corresponding TokenSelector and SecretManager. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 12:11 PM",
      "commitName": "7d0c43d7cff6d250613a04fea9449f139988e901",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n-          conf, this.rmContext.getApplicationTokenSecretManager(),\n+          conf, this.rmContext.getAMRMTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getAMRMTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/06/13 6:59 AM",
      "commitNameOld": "98d97d316cd6be7ea62a1550e2593f94e3214feb",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n-      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n+      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(ApplicationMasterProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n         conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                                server.getListenerAddress());\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java"
      }
    },
    "48414b08277b86cdbc34ae36d7c4d204fd838294": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4163. consistently set the bind address (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 11:35 AM",
      "commitName": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/04/12 1:33 PM",
      "commitNameOld": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,28 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     this.bindAddress \u003d\n-        NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n-          this.server.getPort());\n-    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n-      String resolvedAddress \u003d\n-        this.server.getListenerAddress().getHostName() + \":\" + this.server.getListenerAddress().getPort();\n-      conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, resolvedAddress);\n-    }\n+        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+                               server.getListenerAddress());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        conf.updateConnectAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n                               server.getListenerAddress());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3867. MiniMRYarn/MiniYarn uses fixed ports (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 1:33 PM",
      "commitName": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n-\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n           this.server.getPort());\n-\n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      String resolvedAddress \u003d\n+        this.server.getListenerAddress().getHostName() + \":\" + this.server.getListenerAddress().getPort();\n+      conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, resolvedAddress);\n+    }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n          this.server.getPort());\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String resolvedAddress \u003d\n        this.server.getListenerAddress().getHostName() + \":\" + this.server.getListenerAddress().getPort();\n      conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, resolvedAddress);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "17/04/12 11:48 AM",
      "commitNameOld": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,30 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n-    String bindAddressStr \u003d\n-        conf.get(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n-    InetSocketAddress masterServiceAddress \u003d\n-        NetUtils.createSocketAddr(bindAddressStr,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT,\n-          YarnConfiguration.RM_SCHEDULER_ADDRESS);\n+    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n \n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n           this.server.getPort());\n \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress masterServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n          this.server.getPort());\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "fe7711df98b9dd16259f6534e8461a29f24caadc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3942. Randomize master key generation for ApplicationTokenSecretManager and roll it every so often. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 11:48 AM",
      "commitName": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "25/03/12 10:45 PM",
      "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.54,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,33 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n+\n+    String bindAddressStr \u003d\n+        conf.get(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n+    InetSocketAddress masterServiceAddress \u003d\n+        NetUtils.createSocketAddr(bindAddressStr,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT,\n+          YarnConfiguration.RM_SCHEDULER_ADDRESS);\n+\n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n-          conf, this.appTokenManager,\n+          conf, this.rmContext.getApplicationTokenSecretManager(),\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n+\n+    this.bindAddress \u003d\n+        NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n+          this.server.getPort());\n+\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    String bindAddressStr \u003d\n        conf.get(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n    InetSocketAddress masterServiceAddress \u003d\n        NetUtils.createSocketAddr(bindAddressStr,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT,\n          YarnConfiguration.RM_SCHEDULER_ADDRESS);\n\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.rmContext.getApplicationTokenSecretManager(),\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(masterServiceAddress.getHostName(),\n          this.server.getPort());\n\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,19 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           conf, this.appTokenManager,\n           conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n+    \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n+        false)) {\n+      refreshServiceAcls(conf, new RMPolicyProvider());\n+    }\n+    \n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.appTokenManager,\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/09/11 5:46 AM",
      "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,11 @@\n   public void start() {\n-    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    Configuration serverConf \u003d new Configuration(getConfig());\n-    serverConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n-        SchedulerSecurityInfo.class, SecurityInfo.class);\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n-          serverConf, this.appTokenManager,\n-          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT,\n+          conf, this.appTokenManager,\n+          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          conf, this.appTokenManager,\n          conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 6:24 PM",
      "commitNameOld": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public void start() {\n     YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     Configuration serverConf \u003d new Configuration(getConfig());\n     serverConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n         SchedulerSecurityInfo.class, SecurityInfo.class);\n     this.server \u003d\n       rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n           serverConf, this.appTokenManager,\n-          serverConf.getInt(RMConfig.RM_AM_THREADS, \n-              RMConfig.DEFAULT_RM_AM_THREADS));\n+          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n+              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration serverConf \u003d new Configuration(getConfig());\n    serverConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        SchedulerSecurityInfo.class, SecurityInfo.class);\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          serverConf, this.appTokenManager,\n          serverConf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration serverConf \u003d new Configuration(getConfig());\n    serverConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        SchedulerSecurityInfo.class, SecurityInfo.class);\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          serverConf, this.appTokenManager,\n          serverConf.getInt(RMConfig.RM_AM_THREADS, \n              RMConfig.DEFAULT_RM_AM_THREADS));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,13 @@\n+  public void start() {\n+    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+    Configuration serverConf \u003d new Configuration(getConfig());\n+    serverConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n+        SchedulerSecurityInfo.class, SecurityInfo.class);\n+    this.server \u003d\n+      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n+          serverConf, this.appTokenManager,\n+          serverConf.getInt(RMConfig.RM_AM_THREADS, \n+              RMConfig.DEFAULT_RM_AM_THREADS));\n+    this.server.start();\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration serverConf \u003d new Configuration(getConfig());\n    serverConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        SchedulerSecurityInfo.class, SecurityInfo.class);\n    this.server \u003d\n      rpc.getServer(AMRMProtocol.class, this, masterServiceAddress,\n          serverConf, this.appTokenManager,\n          serverConf.getInt(RMConfig.RM_AM_THREADS, \n              RMConfig.DEFAULT_RM_AM_THREADS));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java"
    }
  }
}