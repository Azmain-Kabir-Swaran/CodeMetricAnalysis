{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QuorumJournalManager.java",
  "functionName": "hasSomeData",
  "functionId": "hasSomeData",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
  "functionStartLine": 269,
  "functionEndLine": 296,
  "numCommitsSeen": 42,
  "timeTaken": 1854,
  "changeHistory": [
    "b9e423fa8d30ea89244f6ec018a8064cc87d94a9",
    "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
    "f765fdb65701e61887daedb2b369af4be12cb432"
  ],
  "changeHistoryShort": {
    "b9e423fa8d30ea89244f6ec018a8064cc87d94a9": "Ybodychange",
    "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38": "Ybodychange",
    "f765fdb65701e61887daedb2b369af4be12cb432": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b9e423fa8d30ea89244f6ec018a8064cc87d94a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12496. Make QuorumJournalManager timeout properties configurable. Contributed by Ajay Kumar.\n",
      "commitDate": "21/09/17 8:44 AM",
      "commitName": "b9e423fa8d30ea89244f6ec018a8064cc87d94a9",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/02/17 4:33 PM",
      "commitNameOld": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 210.63,
      "commitsBetweenForRepo": 1366,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public boolean hasSomeData() throws IOException {\n     QuorumCall\u003cAsyncLogger, Boolean\u003e call \u003d\n         loggers.isFormatted();\n \n     try {\n-      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS, \"hasSomeData\");\n+      call.waitFor(loggers.size(), 0, 0, timeoutMs, \"hasSomeData\");\n     } catch (InterruptedException e) {\n       throw new IOException(\"Interrupted while determining if JNs have data\");\n     } catch (TimeoutException e) {\n       throw new IOException(\"Timed out waiting for response from loggers\");\n     }\n     \n     if (call.countExceptions() \u003e 0) {\n       call.rethrowException(\n           \"Unable to check if JNs are ready for formatting\");\n     }\n     \n     // If any of the loggers returned with a non-empty manifest, then\n     // we should prompt for format.\n     for (Boolean hasData : call.getResults().values()) {\n       if (hasData) {\n         return true;\n       }\n     }\n \n     // Otherwise, none were formatted, we can safely format.\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasSomeData() throws IOException {\n    QuorumCall\u003cAsyncLogger, Boolean\u003e call \u003d\n        loggers.isFormatted();\n\n    try {\n      call.waitFor(loggers.size(), 0, 0, timeoutMs, \"hasSomeData\");\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted while determining if JNs have data\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting for response from loggers\");\n    }\n    \n    if (call.countExceptions() \u003e 0) {\n      call.rethrowException(\n          \"Unable to check if JNs are ready for formatting\");\n    }\n    \n    // If any of the loggers returned with a non-empty manifest, then\n    // we should prompt for format.\n    for (Boolean hasData : call.getResults().values()) {\n      if (hasData) {\n        return true;\n      }\n    }\n\n    // Otherwise, none were formatted, we can safely format.\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3906. QJM: quorum timeout on failover with large log segment. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/12 11:31 PM",
      "commitName": "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "05/09/12 11:57 PM",
      "commitNameOld": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 4.98,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public boolean hasSomeData() throws IOException {\n     QuorumCall\u003cAsyncLogger, Boolean\u003e call \u003d\n         loggers.isFormatted();\n \n     try {\n-      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS);\n+      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS, \"hasSomeData\");\n     } catch (InterruptedException e) {\n       throw new IOException(\"Interrupted while determining if JNs have data\");\n     } catch (TimeoutException e) {\n       throw new IOException(\"Timed out waiting for response from loggers\");\n     }\n     \n     if (call.countExceptions() \u003e 0) {\n       call.rethrowException(\n           \"Unable to check if JNs are ready for formatting\");\n     }\n     \n     // If any of the loggers returned with a non-empty manifest, then\n     // we should prompt for format.\n     for (Boolean hasData : call.getResults().values()) {\n       if (hasData) {\n         return true;\n       }\n     }\n \n     // Otherwise, none were formatted, we can safely format.\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasSomeData() throws IOException {\n    QuorumCall\u003cAsyncLogger, Boolean\u003e call \u003d\n        loggers.isFormatted();\n\n    try {\n      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS, \"hasSomeData\");\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted while determining if JNs have data\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting for response from loggers\");\n    }\n    \n    if (call.countExceptions() \u003e 0) {\n      call.rethrowException(\n          \"Unable to check if JNs are ready for formatting\");\n    }\n    \n    // If any of the loggers returned with a non-empty manifest, then\n    // we should prompt for format.\n    for (Boolean hasData : call.getResults().values()) {\n      if (hasData) {\n        return true;\n      }\n    }\n\n    // Otherwise, none were formatted, we can safely format.\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "f765fdb65701e61887daedb2b369af4be12cb432": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3793. Implement genericized format() in QJM. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1373177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:48 PM",
      "commitName": "f765fdb65701e61887daedb2b369af4be12cb432",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,28 @@\n+  public boolean hasSomeData() throws IOException {\n+    QuorumCall\u003cAsyncLogger, Boolean\u003e call \u003d\n+        loggers.isFormatted();\n+\n+    try {\n+      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS);\n+    } catch (InterruptedException e) {\n+      throw new IOException(\"Interrupted while determining if JNs have data\");\n+    } catch (TimeoutException e) {\n+      throw new IOException(\"Timed out waiting for response from loggers\");\n+    }\n+    \n+    if (call.countExceptions() \u003e 0) {\n+      call.rethrowException(\n+          \"Unable to check if JNs are ready for formatting\");\n+    }\n+    \n+    // If any of the loggers returned with a non-empty manifest, then\n+    // we should prompt for format.\n+    for (Boolean hasData : call.getResults().values()) {\n+      if (hasData) {\n+        return true;\n+      }\n+    }\n+\n+    // Otherwise, none were formatted, we can safely format.\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasSomeData() throws IOException {\n    QuorumCall\u003cAsyncLogger, Boolean\u003e call \u003d\n        loggers.isFormatted();\n\n    try {\n      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS);\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted while determining if JNs have data\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting for response from loggers\");\n    }\n    \n    if (call.countExceptions() \u003e 0) {\n      call.rethrowException(\n          \"Unable to check if JNs are ready for formatting\");\n    }\n    \n    // If any of the loggers returned with a non-empty manifest, then\n    // we should prompt for format.\n    for (Boolean hasData : call.getResults().values()) {\n      if (hasData) {\n        return true;\n      }\n    }\n\n    // Otherwise, none were formatted, we can safely format.\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java"
    }
  }
}