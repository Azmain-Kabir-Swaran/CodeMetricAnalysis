{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UpgradeComponentsFinder.java",
  "functionName": "findTargetComponentSpecs",
  "functionId": "findTargetComponentSpecs___currentDef-Service__targetDef-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/UpgradeComponentsFinder.java",
  "functionStartLine": 43,
  "functionEndLine": 157,
  "numCommitsSeen": 5,
  "timeTaken": 2487,
  "changeHistory": [
    "ccdd982e51f4413bc2e98d03e0a05b1133042a31",
    "3bfd214a59a60263aff67850c4d646c64fd76a01",
    "91357c22ef0fb89652dd2898cf488b47234452ce",
    "a0bde7d525911680f9e5fb0a939604865eb8e164",
    "27d60a16342fd39973d43b61008f54a8815a6237"
  ],
  "changeHistoryShort": {
    "ccdd982e51f4413bc2e98d03e0a05b1133042a31": "Ybodychange",
    "3bfd214a59a60263aff67850c4d646c64fd76a01": "Ybodychange",
    "91357c22ef0fb89652dd2898cf488b47234452ce": "Ybodychange",
    "a0bde7d525911680f9e5fb0a939604865eb8e164": "Ybodychange",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccdd982e51f4413bc2e98d03e0a05b1133042a31": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9084.  Reset container state and defer readiness check for upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/12/18 3:02 PM",
      "commitName": "ccdd982e51f4413bc2e98d03e0a05b1133042a31",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/10/18 3:54 PM",
      "commitNameOld": "3bfd214a59a60263aff67850c4d646c64fd76a01",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 63.01,
      "commitsBetweenForRepo": 452,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,115 @@\n     public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n         Service targetDef) {\n       if (currentDef.getComponents().size() !\u003d\n           targetDef.getComponents().size()) {\n         throw new UnsupportedOperationException(\n             \"addition/deletion of components not supported by upgrade\");\n       }\n       if (!currentDef.getKerberosPrincipal().equals(\n           targetDef.getKerberosPrincipal())) {\n         throw new UnsupportedOperationException(\"changes to kerberos \" +\n             \"principal not supported by upgrade\");\n       }\n       if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n         throw new UnsupportedOperationException(\"changes to queue \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n         throw new UnsupportedOperationException(\"changes to resource \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getDescription(),\n           targetDef.getDescription())) {\n         throw new UnsupportedOperationException(\"changes to description \" +\n             \"not supported by upgrade\");\n       }\n \n-      if (!Objects.equals(currentDef.getQuicklinks(),\n-          targetDef.getQuicklinks())) {\n-        throw new UnsupportedOperationException(\"changes to quick links \" +\n-            \"not supported by upgrade\");\n-      }\n-\n       if (!Objects.equals(currentDef.getLaunchTime(),\n           targetDef.getLaunchTime())) {\n         throw new UnsupportedOperationException(\"changes to launch time \" +\n             \"not supported by upgrade\");\n       }\n \n \n       if (!Objects.equals(currentDef.getLifetime(),\n           targetDef.getLifetime())) {\n         throw new UnsupportedOperationException(\"changes to lifetime \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getConfiguration(),\n           targetDef.getConfiguration())) {\n         return targetDef.getComponents();\n       }\n \n       if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n         return targetDef.getComponents();\n       }\n \n       List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n       targetDef.getComponents().forEach(component -\u003e {\n         Component currentComp \u003d currentDef.getComponent(component.getName());\n \n         if (currentComp !\u003d null) {\n           if (!Objects.equals(currentComp.getName(), component.getName())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component name not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getDependencies(),\n               component.getDependencies())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component dependencies not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getReadinessCheck(),\n               component.getReadinessCheck())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component readiness check not supported by \"\n                     + \"upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getResource(),\n               component.getResource())) {\n \n             throw new UnsupportedOperationException(\n                 \"changes to component resource not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n               component.getRunPrivilegedContainer())) {\n             throw new UnsupportedOperationException(\n                 \"changes to run privileged container not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getPlacementPolicy(),\n               component.getPlacementPolicy())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component placement policy not supported by \"\n                     + \"upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getQuicklinks(),\n               component.getQuicklinks())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component quick links not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getArtifact(),\n               component.getArtifact()) || !Objects.equals(\n               currentComp.getLaunchCommand(), component.getLaunchCommand())\n               || !Objects.equals(currentComp.getConfiguration(),\n               component.getConfiguration())) {\n             targetComps.add(component);\n           }\n         } else{\n           throw new UnsupportedOperationException(\n               \"addition/deletion of components not supported by upgrade. \"\n                   + \"Could not find component \" + component.getName() + \" in \"\n                   + \"current service definition.\");\n         }\n       });\n       return targetComps;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n        Service targetDef) {\n      if (currentDef.getComponents().size() !\u003d\n          targetDef.getComponents().size()) {\n        throw new UnsupportedOperationException(\n            \"addition/deletion of components not supported by upgrade\");\n      }\n      if (!currentDef.getKerberosPrincipal().equals(\n          targetDef.getKerberosPrincipal())) {\n        throw new UnsupportedOperationException(\"changes to kerberos \" +\n            \"principal not supported by upgrade\");\n      }\n      if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n        throw new UnsupportedOperationException(\"changes to queue \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n        throw new UnsupportedOperationException(\"changes to resource \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getDescription(),\n          targetDef.getDescription())) {\n        throw new UnsupportedOperationException(\"changes to description \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getLaunchTime(),\n          targetDef.getLaunchTime())) {\n        throw new UnsupportedOperationException(\"changes to launch time \" +\n            \"not supported by upgrade\");\n      }\n\n\n      if (!Objects.equals(currentDef.getLifetime(),\n          targetDef.getLifetime())) {\n        throw new UnsupportedOperationException(\"changes to lifetime \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getConfiguration(),\n          targetDef.getConfiguration())) {\n        return targetDef.getComponents();\n      }\n\n      if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n        return targetDef.getComponents();\n      }\n\n      List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n      targetDef.getComponents().forEach(component -\u003e {\n        Component currentComp \u003d currentDef.getComponent(component.getName());\n\n        if (currentComp !\u003d null) {\n          if (!Objects.equals(currentComp.getName(), component.getName())) {\n            throw new UnsupportedOperationException(\n                \"changes to component name not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getDependencies(),\n              component.getDependencies())) {\n            throw new UnsupportedOperationException(\n                \"changes to component dependencies not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getReadinessCheck(),\n              component.getReadinessCheck())) {\n            throw new UnsupportedOperationException(\n                \"changes to component readiness check not supported by \"\n                    + \"upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getResource(),\n              component.getResource())) {\n\n            throw new UnsupportedOperationException(\n                \"changes to component resource not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n              component.getRunPrivilegedContainer())) {\n            throw new UnsupportedOperationException(\n                \"changes to run privileged container not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getPlacementPolicy(),\n              component.getPlacementPolicy())) {\n            throw new UnsupportedOperationException(\n                \"changes to component placement policy not supported by \"\n                    + \"upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getQuicklinks(),\n              component.getQuicklinks())) {\n            throw new UnsupportedOperationException(\n                \"changes to component quick links not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getArtifact(),\n              component.getArtifact()) || !Objects.equals(\n              currentComp.getLaunchCommand(), component.getLaunchCommand())\n              || !Objects.equals(currentComp.getConfiguration(),\n              component.getConfiguration())) {\n            targetComps.add(component);\n          }\n        } else{\n          throw new UnsupportedOperationException(\n              \"addition/deletion of components not supported by upgrade. \"\n                  + \"Could not find component \" + component.getName() + \" in \"\n                  + \"current service definition.\");\n        }\n      });\n      return targetComps;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/UpgradeComponentsFinder.java",
      "extendedDetails": {}
    },
    "3bfd214a59a60263aff67850c4d646c64fd76a01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8810.  Fixed a YARN service bug in comparing ConfigFile object.\n            Contributed by Chandni Singh\n",
      "commitDate": "16/10/18 3:54 PM",
      "commitName": "3bfd214a59a60263aff67850c4d646c64fd76a01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/05/18 9:38 AM",
      "commitNameOld": "91357c22ef0fb89652dd2898cf488b47234452ce",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 153.26,
      "commitsBetweenForRepo": 1265,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,121 @@\n     public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n         Service targetDef) {\n       if (currentDef.getComponents().size() !\u003d\n           targetDef.getComponents().size()) {\n         throw new UnsupportedOperationException(\n             \"addition/deletion of components not supported by upgrade\");\n       }\n       if (!currentDef.getKerberosPrincipal().equals(\n           targetDef.getKerberosPrincipal())) {\n         throw new UnsupportedOperationException(\"changes to kerberos \" +\n             \"principal not supported by upgrade\");\n       }\n       if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n         throw new UnsupportedOperationException(\"changes to queue \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n         throw new UnsupportedOperationException(\"changes to resource \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getDescription(),\n           targetDef.getDescription())) {\n         throw new UnsupportedOperationException(\"changes to description \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getQuicklinks(),\n           targetDef.getQuicklinks())) {\n         throw new UnsupportedOperationException(\"changes to quick links \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getLaunchTime(),\n           targetDef.getLaunchTime())) {\n         throw new UnsupportedOperationException(\"changes to launch time \" +\n             \"not supported by upgrade\");\n       }\n \n \n       if (!Objects.equals(currentDef.getLifetime(),\n           targetDef.getLifetime())) {\n         throw new UnsupportedOperationException(\"changes to lifetime \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getConfiguration(),\n-          currentDef.getConfiguration())) {\n+          targetDef.getConfiguration())) {\n         return targetDef.getComponents();\n       }\n \n       if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n         return targetDef.getComponents();\n       }\n \n       List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n       targetDef.getComponents().forEach(component -\u003e {\n         Component currentComp \u003d currentDef.getComponent(component.getName());\n \n         if (currentComp !\u003d null) {\n           if (!Objects.equals(currentComp.getName(), component.getName())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component name not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getDependencies(),\n               component.getDependencies())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component dependencies not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getReadinessCheck(),\n               component.getReadinessCheck())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component readiness check not supported by \"\n                     + \"upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getResource(),\n               component.getResource())) {\n \n             throw new UnsupportedOperationException(\n                 \"changes to component resource not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n               component.getRunPrivilegedContainer())) {\n             throw new UnsupportedOperationException(\n                 \"changes to run privileged container not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getPlacementPolicy(),\n               component.getPlacementPolicy())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component placement policy not supported by \"\n                     + \"upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getQuicklinks(),\n               component.getQuicklinks())) {\n             throw new UnsupportedOperationException(\n                 \"changes to component quick links not supported by upgrade\");\n           }\n \n           if (!Objects.equals(currentComp.getArtifact(),\n               component.getArtifact()) || !Objects.equals(\n               currentComp.getLaunchCommand(), component.getLaunchCommand())\n               || !Objects.equals(currentComp.getConfiguration(),\n               component.getConfiguration())) {\n             targetComps.add(component);\n           }\n         } else{\n           throw new UnsupportedOperationException(\n               \"addition/deletion of components not supported by upgrade. \"\n                   + \"Could not find component \" + component.getName() + \" in \"\n                   + \"current service definition.\");\n         }\n       });\n       return targetComps;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n        Service targetDef) {\n      if (currentDef.getComponents().size() !\u003d\n          targetDef.getComponents().size()) {\n        throw new UnsupportedOperationException(\n            \"addition/deletion of components not supported by upgrade\");\n      }\n      if (!currentDef.getKerberosPrincipal().equals(\n          targetDef.getKerberosPrincipal())) {\n        throw new UnsupportedOperationException(\"changes to kerberos \" +\n            \"principal not supported by upgrade\");\n      }\n      if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n        throw new UnsupportedOperationException(\"changes to queue \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n        throw new UnsupportedOperationException(\"changes to resource \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getDescription(),\n          targetDef.getDescription())) {\n        throw new UnsupportedOperationException(\"changes to description \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getQuicklinks(),\n          targetDef.getQuicklinks())) {\n        throw new UnsupportedOperationException(\"changes to quick links \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getLaunchTime(),\n          targetDef.getLaunchTime())) {\n        throw new UnsupportedOperationException(\"changes to launch time \" +\n            \"not supported by upgrade\");\n      }\n\n\n      if (!Objects.equals(currentDef.getLifetime(),\n          targetDef.getLifetime())) {\n        throw new UnsupportedOperationException(\"changes to lifetime \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getConfiguration(),\n          targetDef.getConfiguration())) {\n        return targetDef.getComponents();\n      }\n\n      if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n        return targetDef.getComponents();\n      }\n\n      List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n      targetDef.getComponents().forEach(component -\u003e {\n        Component currentComp \u003d currentDef.getComponent(component.getName());\n\n        if (currentComp !\u003d null) {\n          if (!Objects.equals(currentComp.getName(), component.getName())) {\n            throw new UnsupportedOperationException(\n                \"changes to component name not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getDependencies(),\n              component.getDependencies())) {\n            throw new UnsupportedOperationException(\n                \"changes to component dependencies not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getReadinessCheck(),\n              component.getReadinessCheck())) {\n            throw new UnsupportedOperationException(\n                \"changes to component readiness check not supported by \"\n                    + \"upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getResource(),\n              component.getResource())) {\n\n            throw new UnsupportedOperationException(\n                \"changes to component resource not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n              component.getRunPrivilegedContainer())) {\n            throw new UnsupportedOperationException(\n                \"changes to run privileged container not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getPlacementPolicy(),\n              component.getPlacementPolicy())) {\n            throw new UnsupportedOperationException(\n                \"changes to component placement policy not supported by \"\n                    + \"upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getQuicklinks(),\n              component.getQuicklinks())) {\n            throw new UnsupportedOperationException(\n                \"changes to component quick links not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getArtifact(),\n              component.getArtifact()) || !Objects.equals(\n              currentComp.getLaunchCommand(), component.getLaunchCommand())\n              || !Objects.equals(currentComp.getConfiguration(),\n              component.getConfiguration())) {\n            targetComps.add(component);\n          }\n        } else{\n          throw new UnsupportedOperationException(\n              \"addition/deletion of components not supported by upgrade. \"\n                  + \"Could not find component \" + component.getName() + \" in \"\n                  + \"current service definition.\");\n        }\n      });\n      return targetComps;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/UpgradeComponentsFinder.java",
      "extendedDetails": {}
    },
    "91357c22ef0fb89652dd2898cf488b47234452ce": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8300.  Fixed NPE in DefaultUpgradeComponentsFinder.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "16/05/18 9:38 AM",
      "commitName": "91357c22ef0fb89652dd2898cf488b47234452ce",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/04/18 7:26 AM",
      "commitNameOld": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 44.09,
      "commitsBetweenForRepo": 818,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,121 @@\n     public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n         Service targetDef) {\n       if (currentDef.getComponents().size() !\u003d\n           targetDef.getComponents().size()) {\n         throw new UnsupportedOperationException(\n             \"addition/deletion of components not supported by upgrade\");\n       }\n       if (!currentDef.getKerberosPrincipal().equals(\n           targetDef.getKerberosPrincipal())) {\n         throw new UnsupportedOperationException(\"changes to kerberos \" +\n             \"principal not supported by upgrade\");\n       }\n       if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n         throw new UnsupportedOperationException(\"changes to queue \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n         throw new UnsupportedOperationException(\"changes to resource \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getDescription(),\n           targetDef.getDescription())) {\n         throw new UnsupportedOperationException(\"changes to description \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getQuicklinks(),\n           targetDef.getQuicklinks())) {\n         throw new UnsupportedOperationException(\"changes to quick links \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getLaunchTime(),\n           targetDef.getLaunchTime())) {\n         throw new UnsupportedOperationException(\"changes to launch time \" +\n             \"not supported by upgrade\");\n       }\n \n \n       if (!Objects.equals(currentDef.getLifetime(),\n           targetDef.getLifetime())) {\n         throw new UnsupportedOperationException(\"changes to lifetime \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getConfiguration(),\n           currentDef.getConfiguration())) {\n         return targetDef.getComponents();\n       }\n \n       if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n         return targetDef.getComponents();\n       }\n \n       List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n       targetDef.getComponents().forEach(component -\u003e {\n         Component currentComp \u003d currentDef.getComponent(component.getName());\n \n-        if (!Objects.equals(currentComp.getName(), component.getName())) {\n+        if (currentComp !\u003d null) {\n+          if (!Objects.equals(currentComp.getName(), component.getName())) {\n+            throw new UnsupportedOperationException(\n+                \"changes to component name not supported by upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getDependencies(),\n+              component.getDependencies())) {\n+            throw new UnsupportedOperationException(\n+                \"changes to component dependencies not supported by upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getReadinessCheck(),\n+              component.getReadinessCheck())) {\n+            throw new UnsupportedOperationException(\n+                \"changes to component readiness check not supported by \"\n+                    + \"upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getResource(),\n+              component.getResource())) {\n+\n+            throw new UnsupportedOperationException(\n+                \"changes to component resource not supported by upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n+              component.getRunPrivilegedContainer())) {\n+            throw new UnsupportedOperationException(\n+                \"changes to run privileged container not supported by upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getPlacementPolicy(),\n+              component.getPlacementPolicy())) {\n+            throw new UnsupportedOperationException(\n+                \"changes to component placement policy not supported by \"\n+                    + \"upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getQuicklinks(),\n+              component.getQuicklinks())) {\n+            throw new UnsupportedOperationException(\n+                \"changes to component quick links not supported by upgrade\");\n+          }\n+\n+          if (!Objects.equals(currentComp.getArtifact(),\n+              component.getArtifact()) || !Objects.equals(\n+              currentComp.getLaunchCommand(), component.getLaunchCommand())\n+              || !Objects.equals(currentComp.getConfiguration(),\n+              component.getConfiguration())) {\n+            targetComps.add(component);\n+          }\n+        } else{\n           throw new UnsupportedOperationException(\n-              \"changes to component name not supported by upgrade\");\n-        }\n-\n-        if (!Objects.equals(currentComp.getDependencies(),\n-            component.getDependencies())) {\n-          throw new UnsupportedOperationException(\n-              \"changes to component dependencies not supported by upgrade\");\n-        }\n-\n-        if (!Objects.equals(currentComp.getReadinessCheck(),\n-            component.getReadinessCheck())) {\n-          throw new UnsupportedOperationException(\n-              \"changes to component readiness check not supported by upgrade\");\n-        }\n-\n-        if (!Objects.equals(currentComp.getResource(),\n-            component.getResource())) {\n-          throw new UnsupportedOperationException(\n-              \"changes to component resource not supported by upgrade\");\n-        }\n-\n-\n-        if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n-            component.getRunPrivilegedContainer())) {\n-          throw new UnsupportedOperationException(\n-              \"changes to run privileged container not supported by upgrade\");\n-        }\n-\n-        if (!Objects.equals(currentComp.getPlacementPolicy(),\n-            component.getPlacementPolicy())) {\n-          throw new UnsupportedOperationException(\n-              \"changes to component placement policy not supported by upgrade\");\n-        }\n-\n-        if (!Objects.equals(currentComp.getQuicklinks(),\n-            component.getQuicklinks())) {\n-          throw new UnsupportedOperationException(\n-              \"changes to component quick links not supported by upgrade\");\n-        }\n-\n-        if (!Objects.equals(currentComp.getArtifact(),\n-            component.getArtifact()) ||\n-            !Objects.equals(currentComp.getLaunchCommand(),\n-                component.getLaunchCommand()) ||\n-            !Objects.equals(currentComp.getConfiguration(),\n-                component.getConfiguration())) {\n-          targetComps.add(component);\n+              \"addition/deletion of components not supported by upgrade. \"\n+                  + \"Could not find component \" + component.getName() + \" in \"\n+                  + \"current service definition.\");\n         }\n       });\n       return targetComps;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n        Service targetDef) {\n      if (currentDef.getComponents().size() !\u003d\n          targetDef.getComponents().size()) {\n        throw new UnsupportedOperationException(\n            \"addition/deletion of components not supported by upgrade\");\n      }\n      if (!currentDef.getKerberosPrincipal().equals(\n          targetDef.getKerberosPrincipal())) {\n        throw new UnsupportedOperationException(\"changes to kerberos \" +\n            \"principal not supported by upgrade\");\n      }\n      if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n        throw new UnsupportedOperationException(\"changes to queue \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n        throw new UnsupportedOperationException(\"changes to resource \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getDescription(),\n          targetDef.getDescription())) {\n        throw new UnsupportedOperationException(\"changes to description \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getQuicklinks(),\n          targetDef.getQuicklinks())) {\n        throw new UnsupportedOperationException(\"changes to quick links \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getLaunchTime(),\n          targetDef.getLaunchTime())) {\n        throw new UnsupportedOperationException(\"changes to launch time \" +\n            \"not supported by upgrade\");\n      }\n\n\n      if (!Objects.equals(currentDef.getLifetime(),\n          targetDef.getLifetime())) {\n        throw new UnsupportedOperationException(\"changes to lifetime \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getConfiguration(),\n          currentDef.getConfiguration())) {\n        return targetDef.getComponents();\n      }\n\n      if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n        return targetDef.getComponents();\n      }\n\n      List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n      targetDef.getComponents().forEach(component -\u003e {\n        Component currentComp \u003d currentDef.getComponent(component.getName());\n\n        if (currentComp !\u003d null) {\n          if (!Objects.equals(currentComp.getName(), component.getName())) {\n            throw new UnsupportedOperationException(\n                \"changes to component name not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getDependencies(),\n              component.getDependencies())) {\n            throw new UnsupportedOperationException(\n                \"changes to component dependencies not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getReadinessCheck(),\n              component.getReadinessCheck())) {\n            throw new UnsupportedOperationException(\n                \"changes to component readiness check not supported by \"\n                    + \"upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getResource(),\n              component.getResource())) {\n\n            throw new UnsupportedOperationException(\n                \"changes to component resource not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n              component.getRunPrivilegedContainer())) {\n            throw new UnsupportedOperationException(\n                \"changes to run privileged container not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getPlacementPolicy(),\n              component.getPlacementPolicy())) {\n            throw new UnsupportedOperationException(\n                \"changes to component placement policy not supported by \"\n                    + \"upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getQuicklinks(),\n              component.getQuicklinks())) {\n            throw new UnsupportedOperationException(\n                \"changes to component quick links not supported by upgrade\");\n          }\n\n          if (!Objects.equals(currentComp.getArtifact(),\n              component.getArtifact()) || !Objects.equals(\n              currentComp.getLaunchCommand(), component.getLaunchCommand())\n              || !Objects.equals(currentComp.getConfiguration(),\n              component.getConfiguration())) {\n            targetComps.add(component);\n          }\n        } else{\n          throw new UnsupportedOperationException(\n              \"addition/deletion of components not supported by upgrade. \"\n                  + \"Could not find component \" + component.getName() + \" in \"\n                  + \"current service definition.\");\n        }\n      });\n      return targetComps;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/UpgradeComponentsFinder.java",
      "extendedDetails": {}
    },
    "a0bde7d525911680f9e5fb0a939604865eb8e164": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7142. Support placement policy in yarn native services. (Gour Saha via wangda)\n\nChange-Id: I166c67a7a34430627c17365f60bac75b6da1b434\n",
      "commitDate": "02/04/18 7:26 AM",
      "commitName": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.65,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,113 @@\n     public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n         Service targetDef) {\n       if (currentDef.getComponents().size() !\u003d\n           targetDef.getComponents().size()) {\n         throw new UnsupportedOperationException(\n             \"addition/deletion of components not supported by upgrade\");\n       }\n       if (!currentDef.getKerberosPrincipal().equals(\n           targetDef.getKerberosPrincipal())) {\n         throw new UnsupportedOperationException(\"changes to kerberos \" +\n             \"principal not supported by upgrade\");\n       }\n       if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n         throw new UnsupportedOperationException(\"changes to queue \" +\n             \"not supported by upgrade\");\n       }\n-      if (!Objects.equals(currentDef.getPlacementPolicy(),\n-          targetDef.getPlacementPolicy())) {\n-        throw new UnsupportedOperationException(\"changes to placement policy \" +\n-            \"not supported by upgrade\");\n-      }\n \n       if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n         throw new UnsupportedOperationException(\"changes to resource \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getDescription(),\n           targetDef.getDescription())) {\n         throw new UnsupportedOperationException(\"changes to description \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getQuicklinks(),\n           targetDef.getQuicklinks())) {\n         throw new UnsupportedOperationException(\"changes to quick links \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getLaunchTime(),\n           targetDef.getLaunchTime())) {\n         throw new UnsupportedOperationException(\"changes to launch time \" +\n             \"not supported by upgrade\");\n       }\n \n \n       if (!Objects.equals(currentDef.getLifetime(),\n           targetDef.getLifetime())) {\n         throw new UnsupportedOperationException(\"changes to lifetime \" +\n             \"not supported by upgrade\");\n       }\n \n       if (!Objects.equals(currentDef.getConfiguration(),\n           currentDef.getConfiguration())) {\n         return targetDef.getComponents();\n       }\n \n       if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n         return targetDef.getComponents();\n       }\n \n       List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n       targetDef.getComponents().forEach(component -\u003e {\n         Component currentComp \u003d currentDef.getComponent(component.getName());\n \n         if (!Objects.equals(currentComp.getName(), component.getName())) {\n           throw new UnsupportedOperationException(\n               \"changes to component name not supported by upgrade\");\n         }\n \n         if (!Objects.equals(currentComp.getDependencies(),\n             component.getDependencies())) {\n           throw new UnsupportedOperationException(\n               \"changes to component dependencies not supported by upgrade\");\n         }\n \n         if (!Objects.equals(currentComp.getReadinessCheck(),\n             component.getReadinessCheck())) {\n           throw new UnsupportedOperationException(\n               \"changes to component readiness check not supported by upgrade\");\n         }\n \n         if (!Objects.equals(currentComp.getResource(),\n             component.getResource())) {\n           throw new UnsupportedOperationException(\n               \"changes to component resource not supported by upgrade\");\n         }\n \n \n         if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n             component.getRunPrivilegedContainer())) {\n           throw new UnsupportedOperationException(\n               \"changes to run privileged container not supported by upgrade\");\n         }\n \n         if (!Objects.equals(currentComp.getPlacementPolicy(),\n             component.getPlacementPolicy())) {\n           throw new UnsupportedOperationException(\n               \"changes to component placement policy not supported by upgrade\");\n         }\n \n         if (!Objects.equals(currentComp.getQuicklinks(),\n             component.getQuicklinks())) {\n           throw new UnsupportedOperationException(\n               \"changes to component quick links not supported by upgrade\");\n         }\n \n         if (!Objects.equals(currentComp.getArtifact(),\n             component.getArtifact()) ||\n             !Objects.equals(currentComp.getLaunchCommand(),\n                 component.getLaunchCommand()) ||\n             !Objects.equals(currentComp.getConfiguration(),\n                 component.getConfiguration())) {\n           targetComps.add(component);\n         }\n       });\n       return targetComps;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n        Service targetDef) {\n      if (currentDef.getComponents().size() !\u003d\n          targetDef.getComponents().size()) {\n        throw new UnsupportedOperationException(\n            \"addition/deletion of components not supported by upgrade\");\n      }\n      if (!currentDef.getKerberosPrincipal().equals(\n          targetDef.getKerberosPrincipal())) {\n        throw new UnsupportedOperationException(\"changes to kerberos \" +\n            \"principal not supported by upgrade\");\n      }\n      if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n        throw new UnsupportedOperationException(\"changes to queue \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n        throw new UnsupportedOperationException(\"changes to resource \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getDescription(),\n          targetDef.getDescription())) {\n        throw new UnsupportedOperationException(\"changes to description \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getQuicklinks(),\n          targetDef.getQuicklinks())) {\n        throw new UnsupportedOperationException(\"changes to quick links \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getLaunchTime(),\n          targetDef.getLaunchTime())) {\n        throw new UnsupportedOperationException(\"changes to launch time \" +\n            \"not supported by upgrade\");\n      }\n\n\n      if (!Objects.equals(currentDef.getLifetime(),\n          targetDef.getLifetime())) {\n        throw new UnsupportedOperationException(\"changes to lifetime \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getConfiguration(),\n          currentDef.getConfiguration())) {\n        return targetDef.getComponents();\n      }\n\n      if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n        return targetDef.getComponents();\n      }\n\n      List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n      targetDef.getComponents().forEach(component -\u003e {\n        Component currentComp \u003d currentDef.getComponent(component.getName());\n\n        if (!Objects.equals(currentComp.getName(), component.getName())) {\n          throw new UnsupportedOperationException(\n              \"changes to component name not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getDependencies(),\n            component.getDependencies())) {\n          throw new UnsupportedOperationException(\n              \"changes to component dependencies not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getReadinessCheck(),\n            component.getReadinessCheck())) {\n          throw new UnsupportedOperationException(\n              \"changes to component readiness check not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getResource(),\n            component.getResource())) {\n          throw new UnsupportedOperationException(\n              \"changes to component resource not supported by upgrade\");\n        }\n\n\n        if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n            component.getRunPrivilegedContainer())) {\n          throw new UnsupportedOperationException(\n              \"changes to run privileged container not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getPlacementPolicy(),\n            component.getPlacementPolicy())) {\n          throw new UnsupportedOperationException(\n              \"changes to component placement policy not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getQuicklinks(),\n            component.getQuicklinks())) {\n          throw new UnsupportedOperationException(\n              \"changes to component quick links not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getArtifact(),\n            component.getArtifact()) ||\n            !Objects.equals(currentComp.getLaunchCommand(),\n                component.getLaunchCommand()) ||\n            !Objects.equals(currentComp.getConfiguration(),\n                component.getConfiguration())) {\n          targetComps.add(component);\n        }\n      });\n      return targetComps;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/UpgradeComponentsFinder.java",
      "extendedDetails": {}
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,118 @@\n+    public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n+        Service targetDef) {\n+      if (currentDef.getComponents().size() !\u003d\n+          targetDef.getComponents().size()) {\n+        throw new UnsupportedOperationException(\n+            \"addition/deletion of components not supported by upgrade\");\n+      }\n+      if (!currentDef.getKerberosPrincipal().equals(\n+          targetDef.getKerberosPrincipal())) {\n+        throw new UnsupportedOperationException(\"changes to kerberos \" +\n+            \"principal not supported by upgrade\");\n+      }\n+      if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n+        throw new UnsupportedOperationException(\"changes to queue \" +\n+            \"not supported by upgrade\");\n+      }\n+      if (!Objects.equals(currentDef.getPlacementPolicy(),\n+          targetDef.getPlacementPolicy())) {\n+        throw new UnsupportedOperationException(\"changes to placement policy \" +\n+            \"not supported by upgrade\");\n+      }\n+\n+      if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n+        throw new UnsupportedOperationException(\"changes to resource \" +\n+            \"not supported by upgrade\");\n+      }\n+\n+      if (!Objects.equals(currentDef.getDescription(),\n+          targetDef.getDescription())) {\n+        throw new UnsupportedOperationException(\"changes to description \" +\n+            \"not supported by upgrade\");\n+      }\n+\n+      if (!Objects.equals(currentDef.getQuicklinks(),\n+          targetDef.getQuicklinks())) {\n+        throw new UnsupportedOperationException(\"changes to quick links \" +\n+            \"not supported by upgrade\");\n+      }\n+\n+      if (!Objects.equals(currentDef.getLaunchTime(),\n+          targetDef.getLaunchTime())) {\n+        throw new UnsupportedOperationException(\"changes to launch time \" +\n+            \"not supported by upgrade\");\n+      }\n+\n+\n+      if (!Objects.equals(currentDef.getLifetime(),\n+          targetDef.getLifetime())) {\n+        throw new UnsupportedOperationException(\"changes to lifetime \" +\n+            \"not supported by upgrade\");\n+      }\n+\n+      if (!Objects.equals(currentDef.getConfiguration(),\n+          currentDef.getConfiguration())) {\n+        return targetDef.getComponents();\n+      }\n+\n+      if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n+        return targetDef.getComponents();\n+      }\n+\n+      List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n+      targetDef.getComponents().forEach(component -\u003e {\n+        Component currentComp \u003d currentDef.getComponent(component.getName());\n+\n+        if (!Objects.equals(currentComp.getName(), component.getName())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to component name not supported by upgrade\");\n+        }\n+\n+        if (!Objects.equals(currentComp.getDependencies(),\n+            component.getDependencies())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to component dependencies not supported by upgrade\");\n+        }\n+\n+        if (!Objects.equals(currentComp.getReadinessCheck(),\n+            component.getReadinessCheck())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to component readiness check not supported by upgrade\");\n+        }\n+\n+        if (!Objects.equals(currentComp.getResource(),\n+            component.getResource())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to component resource not supported by upgrade\");\n+        }\n+\n+\n+        if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n+            component.getRunPrivilegedContainer())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to run privileged container not supported by upgrade\");\n+        }\n+\n+        if (!Objects.equals(currentComp.getPlacementPolicy(),\n+            component.getPlacementPolicy())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to component placement policy not supported by upgrade\");\n+        }\n+\n+        if (!Objects.equals(currentComp.getQuicklinks(),\n+            component.getQuicklinks())) {\n+          throw new UnsupportedOperationException(\n+              \"changes to component quick links not supported by upgrade\");\n+        }\n+\n+        if (!Objects.equals(currentComp.getArtifact(),\n+            component.getArtifact()) ||\n+            !Objects.equals(currentComp.getLaunchCommand(),\n+                component.getLaunchCommand()) ||\n+            !Objects.equals(currentComp.getConfiguration(),\n+                component.getConfiguration())) {\n+          targetComps.add(component);\n+        }\n+      });\n+      return targetComps;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cComponent\u003e findTargetComponentSpecs(Service currentDef,\n        Service targetDef) {\n      if (currentDef.getComponents().size() !\u003d\n          targetDef.getComponents().size()) {\n        throw new UnsupportedOperationException(\n            \"addition/deletion of components not supported by upgrade\");\n      }\n      if (!currentDef.getKerberosPrincipal().equals(\n          targetDef.getKerberosPrincipal())) {\n        throw new UnsupportedOperationException(\"changes to kerberos \" +\n            \"principal not supported by upgrade\");\n      }\n      if (!Objects.equals(currentDef.getQueue(), targetDef.getQueue())) {\n        throw new UnsupportedOperationException(\"changes to queue \" +\n            \"not supported by upgrade\");\n      }\n      if (!Objects.equals(currentDef.getPlacementPolicy(),\n          targetDef.getPlacementPolicy())) {\n        throw new UnsupportedOperationException(\"changes to placement policy \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getResource(), targetDef.getResource())) {\n        throw new UnsupportedOperationException(\"changes to resource \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getDescription(),\n          targetDef.getDescription())) {\n        throw new UnsupportedOperationException(\"changes to description \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getQuicklinks(),\n          targetDef.getQuicklinks())) {\n        throw new UnsupportedOperationException(\"changes to quick links \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getLaunchTime(),\n          targetDef.getLaunchTime())) {\n        throw new UnsupportedOperationException(\"changes to launch time \" +\n            \"not supported by upgrade\");\n      }\n\n\n      if (!Objects.equals(currentDef.getLifetime(),\n          targetDef.getLifetime())) {\n        throw new UnsupportedOperationException(\"changes to lifetime \" +\n            \"not supported by upgrade\");\n      }\n\n      if (!Objects.equals(currentDef.getConfiguration(),\n          currentDef.getConfiguration())) {\n        return targetDef.getComponents();\n      }\n\n      if (!Objects.equals(currentDef.getArtifact(), targetDef.getArtifact())) {\n        return targetDef.getComponents();\n      }\n\n      List\u003cComponent\u003e targetComps \u003d new ArrayList\u003c\u003e();\n      targetDef.getComponents().forEach(component -\u003e {\n        Component currentComp \u003d currentDef.getComponent(component.getName());\n\n        if (!Objects.equals(currentComp.getName(), component.getName())) {\n          throw new UnsupportedOperationException(\n              \"changes to component name not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getDependencies(),\n            component.getDependencies())) {\n          throw new UnsupportedOperationException(\n              \"changes to component dependencies not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getReadinessCheck(),\n            component.getReadinessCheck())) {\n          throw new UnsupportedOperationException(\n              \"changes to component readiness check not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getResource(),\n            component.getResource())) {\n          throw new UnsupportedOperationException(\n              \"changes to component resource not supported by upgrade\");\n        }\n\n\n        if (!Objects.equals(currentComp.getRunPrivilegedContainer(),\n            component.getRunPrivilegedContainer())) {\n          throw new UnsupportedOperationException(\n              \"changes to run privileged container not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getPlacementPolicy(),\n            component.getPlacementPolicy())) {\n          throw new UnsupportedOperationException(\n              \"changes to component placement policy not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getQuicklinks(),\n            component.getQuicklinks())) {\n          throw new UnsupportedOperationException(\n              \"changes to component quick links not supported by upgrade\");\n        }\n\n        if (!Objects.equals(currentComp.getArtifact(),\n            component.getArtifact()) ||\n            !Objects.equals(currentComp.getLaunchCommand(),\n                component.getLaunchCommand()) ||\n            !Objects.equals(currentComp.getConfiguration(),\n                component.getConfiguration())) {\n          targetComps.add(component);\n        }\n      });\n      return targetComps;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/UpgradeComponentsFinder.java"
    }
  }
}