{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRAMSimulator.java",
  "functionName": "processResponseQueue",
  "functionId": "processResponseQueue",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
  "functionStartLine": 167,
  "functionEndLine": 245,
  "numCommitsSeen": 12,
  "timeTaken": 1580,
  "changeHistory": [
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "b32ffa2753e83615b980721b6067fcc35ce54372",
    "28d99db99236ff2a6e4a605802820e2b512225f9",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "b32ffa2753e83615b980721b6067fcc35ce54372": "Ymultichange(Yexceptionschange,Ybodychange)",
    "28d99db99236ff2a6e4a605802820e2b512225f9": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "20/04/17 9:54 PM",
      "commitNameOld": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 59.97,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,79 @@\n   protected void processResponseQueue() throws Exception {\n     while (! responseQueue.isEmpty()) {\n       AllocateResponse response \u003d responseQueue.take();\n \n       // check completed containers\n       if (! response.getCompletedContainersStatuses().isEmpty()) {\n         for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n           ContainerId containerId \u003d cs.getContainerId();\n           if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n             if (assignedMaps.containsKey(containerId)) {\n-              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n-                      \"mapper finished ({1}).\", appId, containerId));\n+              LOG.debug(\"Application {} has one mapper finished ({}).\",\n+                  appId, containerId);\n               assignedMaps.remove(containerId);\n               mapFinished ++;\n               finishedContainers ++;\n             } else if (assignedReduces.containsKey(containerId)) {\n-              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n-                      \"reducer finished ({1}).\", appId, containerId));\n+              LOG.debug(\"Application {} has one reducer finished ({}).\",\n+                  appId, containerId);\n               assignedReduces.remove(containerId);\n               reduceFinished ++;\n               finishedContainers ++;\n             } else if (amContainer.getId().equals(containerId)){\n               // am container released event\n               isFinished \u003d true;\n-              LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n-                      \"finish.\", appId));\n+              LOG.info(\"Application {} goes to finish.\", appId);\n             }\n \n             if (mapFinished \u003e\u003d mapTotal \u0026\u0026 reduceFinished \u003e\u003d reduceTotal) {\n               lastStep();\n             }\n           } else {\n             // container to be killed\n             if (assignedMaps.containsKey(containerId)) {\n-              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n-                      \"mapper killed ({1}).\", appId, containerId));\n+              LOG.debug(\"Application {} has one mapper killed ({}).\",\n+                  appId, containerId);\n               pendingFailedMaps.add(assignedMaps.remove(containerId));\n             } else if (assignedReduces.containsKey(containerId)) {\n-              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n-                      \"reducer killed ({1}).\", appId, containerId));\n+              LOG.debug(\"Application {} has one reducer killed ({}).\",\n+                  appId, containerId);\n               pendingFailedReduces.add(assignedReduces.remove(containerId));\n             } else if (amContainer.getId().equals(containerId)){\n-              LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n-                      \"going to be killed. Waiting for rescheduling...\", appId));\n+              LOG.info(\"Application {}\u0027s AM is \" +\n+                  \"going to be killed. Waiting for rescheduling...\", appId);\n             }\n           }\n         }\n       }\n       \n       // check finished\n       if (isAMContainerRunning \u0026\u0026\n               (mapFinished \u003e\u003d mapTotal) \u0026\u0026\n               (reduceFinished \u003e\u003d reduceTotal)) {\n         isAMContainerRunning \u003d false;\n-        LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n-                \"to clean up its AM container.\", appId));\n+        LOG.debug(\"Application {} sends out event to clean up\"\n+            + \" its AM container.\", appId);\n         isFinished \u003d true;\n         break;\n       }\n \n       // check allocated containers\n       for (Container container : response.getAllocatedContainers()) {\n         if (! scheduledMaps.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledMaps.remove();\n-          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n-                  \"launch a mapper ({1}).\", appId, container.getId()));\n+          LOG.debug(\"Application {} starts to launch a mapper ({}).\",\n+              appId, container.getId());\n           assignedMaps.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         } else if (! this.scheduledReduces.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledReduces.remove();\n-          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n-                  \"launch a reducer ({1}).\", appId, container.getId()));\n+          LOG.debug(\"Application {} starts to launch a reducer ({}).\",\n+              appId, container.getId());\n           assignedReduces.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processResponseQueue() throws Exception {\n    while (! responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (! response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(\"Application {} has one mapper finished ({}).\",\n                  appId, containerId);\n              assignedMaps.remove(containerId);\n              mapFinished ++;\n              finishedContainers ++;\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(\"Application {} has one reducer finished ({}).\",\n                  appId, containerId);\n              assignedReduces.remove(containerId);\n              reduceFinished ++;\n              finishedContainers ++;\n            } else if (amContainer.getId().equals(containerId)){\n              // am container released event\n              isFinished \u003d true;\n              LOG.info(\"Application {} goes to finish.\", appId);\n            }\n\n            if (mapFinished \u003e\u003d mapTotal \u0026\u0026 reduceFinished \u003e\u003d reduceTotal) {\n              lastStep();\n            }\n          } else {\n            // container to be killed\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(\"Application {} has one mapper killed ({}).\",\n                  appId, containerId);\n              pendingFailedMaps.add(assignedMaps.remove(containerId));\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(\"Application {} has one reducer killed ({}).\",\n                  appId, containerId);\n              pendingFailedReduces.add(assignedReduces.remove(containerId));\n            } else if (amContainer.getId().equals(containerId)){\n              LOG.info(\"Application {}\u0027s AM is \" +\n                  \"going to be killed. Waiting for rescheduling...\", appId);\n            }\n          }\n        }\n      }\n      \n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n              (mapFinished \u003e\u003d mapTotal) \u0026\u0026\n              (reduceFinished \u003e\u003d reduceTotal)) {\n        isAMContainerRunning \u003d false;\n        LOG.debug(\"Application {} sends out event to clean up\"\n            + \" its AM container.\", appId);\n        isFinished \u003d true;\n        break;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (! scheduledMaps.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledMaps.remove();\n          LOG.debug(\"Application {} starts to launch a mapper ({}).\",\n              appId, container.getId());\n          assignedMaps.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        } else if (! this.scheduledReduces.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledReduces.remove();\n          LOG.debug(\"Application {} starts to launch a reducer ({}).\",\n              appId, container.getId());\n          assignedReduces.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
      "extendedDetails": {}
    },
    "b32ffa2753e83615b980721b6067fcc35ce54372": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
      "commitDate": "24/02/17 8:09 AM",
      "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
          "commitDate": "24/02/17 8:09 AM",
          "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/09/14 3:13 PM",
          "commitNameOld": "28d99db99236ff2a6e4a605802820e2b512225f9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 898.75,
          "commitsBetweenForRepo": 6750,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,101 +1,80 @@\n-  protected void processResponseQueue()\n-          throws InterruptedException, YarnException, IOException {\n-    // Check whether receive the am container\n-    if (!isAMContainerRunning) {\n-      if (!responseQueue.isEmpty()) {\n-        AllocateResponse response \u003d responseQueue.take();\n-        if (response !\u003d null\n-            \u0026\u0026 !response.getAllocatedContainers().isEmpty()) {\n-          // Get AM container\n-          Container container \u003d response.getAllocatedContainers().get(0);\n-          se.getNmMap().get(container.getNodeId())\n-              .addNewContainer(container, -1L);\n-          // Start AM container\n-          amContainer \u003d container;\n-          LOG.debug(MessageFormat.format(\"Application {0} starts its \" +\n-              \"AM container ({1}).\", appId, amContainer.getId()));\n-          isAMContainerRunning \u003d true;\n-        }\n-      }\n-      return;\n-    }\n-\n+  protected void processResponseQueue() throws Exception {\n     while (! responseQueue.isEmpty()) {\n       AllocateResponse response \u003d responseQueue.take();\n \n       // check completed containers\n       if (! response.getCompletedContainersStatuses().isEmpty()) {\n         for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n           ContainerId containerId \u003d cs.getContainerId();\n           if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n             if (assignedMaps.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                       \"mapper finished ({1}).\", appId, containerId));\n               assignedMaps.remove(containerId);\n               mapFinished ++;\n               finishedContainers ++;\n             } else if (assignedReduces.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                       \"reducer finished ({1}).\", appId, containerId));\n               assignedReduces.remove(containerId);\n               reduceFinished ++;\n               finishedContainers ++;\n-            } else {\n+            } else if (amContainer.getId().equals(containerId)){\n               // am container released event\n               isFinished \u003d true;\n               LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                       \"finish.\", appId));\n             }\n+\n+            if (mapFinished \u003e\u003d mapTotal \u0026\u0026 reduceFinished \u003e\u003d reduceTotal) {\n+              lastStep();\n+            }\n           } else {\n             // container to be killed\n             if (assignedMaps.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                       \"mapper killed ({1}).\", appId, containerId));\n               pendingFailedMaps.add(assignedMaps.remove(containerId));\n             } else if (assignedReduces.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                       \"reducer killed ({1}).\", appId, containerId));\n               pendingFailedReduces.add(assignedReduces.remove(containerId));\n-            } else {\n+            } else if (amContainer.getId().equals(containerId)){\n               LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n-                      \"going to be killed. Restarting...\", appId));\n-              restart();\n+                      \"going to be killed. Waiting for rescheduling...\", appId));\n             }\n           }\n         }\n       }\n       \n       // check finished\n       if (isAMContainerRunning \u0026\u0026\n-              (mapFinished \u003d\u003d mapTotal) \u0026\u0026\n-              (reduceFinished \u003d\u003d reduceTotal)) {\n-        // to release the AM container\n-        se.getNmMap().get(amContainer.getNodeId())\n-                .cleanupContainer(amContainer.getId());\n+              (mapFinished \u003e\u003d mapTotal) \u0026\u0026\n+              (reduceFinished \u003e\u003d reduceTotal)) {\n         isAMContainerRunning \u003d false;\n         LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                 \"to clean up its AM container.\", appId));\n         isFinished \u003d true;\n         break;\n       }\n \n       // check allocated containers\n       for (Container container : response.getAllocatedContainers()) {\n         if (! scheduledMaps.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledMaps.remove();\n           LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                   \"launch a mapper ({1}).\", appId, container.getId()));\n           assignedMaps.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         } else if (! this.scheduledReduces.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledReduces.remove();\n           LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                   \"launch a reducer ({1}).\", appId, container.getId()));\n           assignedReduces.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void processResponseQueue() throws Exception {\n    while (! responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (! response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"mapper finished ({1}).\", appId, containerId));\n              assignedMaps.remove(containerId);\n              mapFinished ++;\n              finishedContainers ++;\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"reducer finished ({1}).\", appId, containerId));\n              assignedReduces.remove(containerId);\n              reduceFinished ++;\n              finishedContainers ++;\n            } else if (amContainer.getId().equals(containerId)){\n              // am container released event\n              isFinished \u003d true;\n              LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                      \"finish.\", appId));\n            }\n\n            if (mapFinished \u003e\u003d mapTotal \u0026\u0026 reduceFinished \u003e\u003d reduceTotal) {\n              lastStep();\n            }\n          } else {\n            // container to be killed\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"mapper killed ({1}).\", appId, containerId));\n              pendingFailedMaps.add(assignedMaps.remove(containerId));\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"reducer killed ({1}).\", appId, containerId));\n              pendingFailedReduces.add(assignedReduces.remove(containerId));\n            } else if (amContainer.getId().equals(containerId)){\n              LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n                      \"going to be killed. Waiting for rescheduling...\", appId));\n            }\n          }\n        }\n      }\n      \n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n              (mapFinished \u003e\u003d mapTotal) \u0026\u0026\n              (reduceFinished \u003e\u003d reduceTotal)) {\n        isAMContainerRunning \u003d false;\n        LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                \"to clean up its AM container.\", appId));\n        isFinished \u003d true;\n        break;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (! scheduledMaps.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledMaps.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a mapper ({1}).\", appId, container.getId()));\n          assignedMaps.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        } else if (! this.scheduledReduces.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledReduces.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a reducer ({1}).\", appId, container.getId()));\n          assignedReduces.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[InterruptedException, YarnException, IOException]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
          "commitDate": "24/02/17 8:09 AM",
          "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/09/14 3:13 PM",
          "commitNameOld": "28d99db99236ff2a6e4a605802820e2b512225f9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 898.75,
          "commitsBetweenForRepo": 6750,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,101 +1,80 @@\n-  protected void processResponseQueue()\n-          throws InterruptedException, YarnException, IOException {\n-    // Check whether receive the am container\n-    if (!isAMContainerRunning) {\n-      if (!responseQueue.isEmpty()) {\n-        AllocateResponse response \u003d responseQueue.take();\n-        if (response !\u003d null\n-            \u0026\u0026 !response.getAllocatedContainers().isEmpty()) {\n-          // Get AM container\n-          Container container \u003d response.getAllocatedContainers().get(0);\n-          se.getNmMap().get(container.getNodeId())\n-              .addNewContainer(container, -1L);\n-          // Start AM container\n-          amContainer \u003d container;\n-          LOG.debug(MessageFormat.format(\"Application {0} starts its \" +\n-              \"AM container ({1}).\", appId, amContainer.getId()));\n-          isAMContainerRunning \u003d true;\n-        }\n-      }\n-      return;\n-    }\n-\n+  protected void processResponseQueue() throws Exception {\n     while (! responseQueue.isEmpty()) {\n       AllocateResponse response \u003d responseQueue.take();\n \n       // check completed containers\n       if (! response.getCompletedContainersStatuses().isEmpty()) {\n         for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n           ContainerId containerId \u003d cs.getContainerId();\n           if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n             if (assignedMaps.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                       \"mapper finished ({1}).\", appId, containerId));\n               assignedMaps.remove(containerId);\n               mapFinished ++;\n               finishedContainers ++;\n             } else if (assignedReduces.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                       \"reducer finished ({1}).\", appId, containerId));\n               assignedReduces.remove(containerId);\n               reduceFinished ++;\n               finishedContainers ++;\n-            } else {\n+            } else if (amContainer.getId().equals(containerId)){\n               // am container released event\n               isFinished \u003d true;\n               LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                       \"finish.\", appId));\n             }\n+\n+            if (mapFinished \u003e\u003d mapTotal \u0026\u0026 reduceFinished \u003e\u003d reduceTotal) {\n+              lastStep();\n+            }\n           } else {\n             // container to be killed\n             if (assignedMaps.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                       \"mapper killed ({1}).\", appId, containerId));\n               pendingFailedMaps.add(assignedMaps.remove(containerId));\n             } else if (assignedReduces.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                       \"reducer killed ({1}).\", appId, containerId));\n               pendingFailedReduces.add(assignedReduces.remove(containerId));\n-            } else {\n+            } else if (amContainer.getId().equals(containerId)){\n               LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n-                      \"going to be killed. Restarting...\", appId));\n-              restart();\n+                      \"going to be killed. Waiting for rescheduling...\", appId));\n             }\n           }\n         }\n       }\n       \n       // check finished\n       if (isAMContainerRunning \u0026\u0026\n-              (mapFinished \u003d\u003d mapTotal) \u0026\u0026\n-              (reduceFinished \u003d\u003d reduceTotal)) {\n-        // to release the AM container\n-        se.getNmMap().get(amContainer.getNodeId())\n-                .cleanupContainer(amContainer.getId());\n+              (mapFinished \u003e\u003d mapTotal) \u0026\u0026\n+              (reduceFinished \u003e\u003d reduceTotal)) {\n         isAMContainerRunning \u003d false;\n         LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                 \"to clean up its AM container.\", appId));\n         isFinished \u003d true;\n         break;\n       }\n \n       // check allocated containers\n       for (Container container : response.getAllocatedContainers()) {\n         if (! scheduledMaps.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledMaps.remove();\n           LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                   \"launch a mapper ({1}).\", appId, container.getId()));\n           assignedMaps.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         } else if (! this.scheduledReduces.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledReduces.remove();\n           LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                   \"launch a reducer ({1}).\", appId, container.getId()));\n           assignedReduces.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void processResponseQueue() throws Exception {\n    while (! responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (! response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"mapper finished ({1}).\", appId, containerId));\n              assignedMaps.remove(containerId);\n              mapFinished ++;\n              finishedContainers ++;\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"reducer finished ({1}).\", appId, containerId));\n              assignedReduces.remove(containerId);\n              reduceFinished ++;\n              finishedContainers ++;\n            } else if (amContainer.getId().equals(containerId)){\n              // am container released event\n              isFinished \u003d true;\n              LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                      \"finish.\", appId));\n            }\n\n            if (mapFinished \u003e\u003d mapTotal \u0026\u0026 reduceFinished \u003e\u003d reduceTotal) {\n              lastStep();\n            }\n          } else {\n            // container to be killed\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"mapper killed ({1}).\", appId, containerId));\n              pendingFailedMaps.add(assignedMaps.remove(containerId));\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"reducer killed ({1}).\", appId, containerId));\n              pendingFailedReduces.add(assignedReduces.remove(containerId));\n            } else if (amContainer.getId().equals(containerId)){\n              LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n                      \"going to be killed. Waiting for rescheduling...\", appId));\n            }\n          }\n        }\n      }\n      \n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n              (mapFinished \u003e\u003d mapTotal) \u0026\u0026\n              (reduceFinished \u003e\u003d reduceTotal)) {\n        isAMContainerRunning \u003d false;\n        LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                \"to clean up its AM container.\", appId));\n        isFinished \u003d true;\n        break;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (! scheduledMaps.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledMaps.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a mapper ({1}).\", appId, container.getId()));\n          assignedMaps.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        } else if (! this.scheduledReduces.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledReduces.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a reducer ({1}).\", appId, container.getId()));\n          assignedReduces.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "28d99db99236ff2a6e4a605802820e2b512225f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2526. SLS can deadlock when all the threads are taken by AMSimulators. (Wei Yan via kasha)\n",
      "commitDate": "09/09/14 3:13 PM",
      "commitName": "28d99db99236ff2a6e4a605802820e2b512225f9",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/07/14 6:29 PM",
      "commitNameOld": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 45.86,
      "commitsBetweenForRepo": 347,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,101 @@\n   protected void processResponseQueue()\n           throws InterruptedException, YarnException, IOException {\n+    // Check whether receive the am container\n+    if (!isAMContainerRunning) {\n+      if (!responseQueue.isEmpty()) {\n+        AllocateResponse response \u003d responseQueue.take();\n+        if (response !\u003d null\n+            \u0026\u0026 !response.getAllocatedContainers().isEmpty()) {\n+          // Get AM container\n+          Container container \u003d response.getAllocatedContainers().get(0);\n+          se.getNmMap().get(container.getNodeId())\n+              .addNewContainer(container, -1L);\n+          // Start AM container\n+          amContainer \u003d container;\n+          LOG.debug(MessageFormat.format(\"Application {0} starts its \" +\n+              \"AM container ({1}).\", appId, amContainer.getId()));\n+          isAMContainerRunning \u003d true;\n+        }\n+      }\n+      return;\n+    }\n+\n     while (! responseQueue.isEmpty()) {\n       AllocateResponse response \u003d responseQueue.take();\n \n       // check completed containers\n       if (! response.getCompletedContainersStatuses().isEmpty()) {\n         for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n           ContainerId containerId \u003d cs.getContainerId();\n           if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n             if (assignedMaps.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                       \"mapper finished ({1}).\", appId, containerId));\n               assignedMaps.remove(containerId);\n               mapFinished ++;\n               finishedContainers ++;\n             } else if (assignedReduces.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                       \"reducer finished ({1}).\", appId, containerId));\n               assignedReduces.remove(containerId);\n               reduceFinished ++;\n               finishedContainers ++;\n             } else {\n               // am container released event\n               isFinished \u003d true;\n               LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                       \"finish.\", appId));\n             }\n           } else {\n             // container to be killed\n             if (assignedMaps.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                       \"mapper killed ({1}).\", appId, containerId));\n               pendingFailedMaps.add(assignedMaps.remove(containerId));\n             } else if (assignedReduces.containsKey(containerId)) {\n               LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                       \"reducer killed ({1}).\", appId, containerId));\n               pendingFailedReduces.add(assignedReduces.remove(containerId));\n             } else {\n               LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n                       \"going to be killed. Restarting...\", appId));\n               restart();\n             }\n           }\n         }\n       }\n       \n       // check finished\n       if (isAMContainerRunning \u0026\u0026\n               (mapFinished \u003d\u003d mapTotal) \u0026\u0026\n               (reduceFinished \u003d\u003d reduceTotal)) {\n         // to release the AM container\n         se.getNmMap().get(amContainer.getNodeId())\n                 .cleanupContainer(amContainer.getId());\n         isAMContainerRunning \u003d false;\n         LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                 \"to clean up its AM container.\", appId));\n         isFinished \u003d true;\n+        break;\n       }\n \n       // check allocated containers\n       for (Container container : response.getAllocatedContainers()) {\n         if (! scheduledMaps.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledMaps.remove();\n           LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                   \"launch a mapper ({1}).\", appId, container.getId()));\n           assignedMaps.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         } else if (! this.scheduledReduces.isEmpty()) {\n           ContainerSimulator cs \u003d scheduledReduces.remove();\n           LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                   \"launch a reducer ({1}).\", appId, container.getId()));\n           assignedReduces.put(container.getId(), cs);\n           se.getNmMap().get(container.getNodeId())\n                   .addNewContainer(container, cs.getLifeTime());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processResponseQueue()\n          throws InterruptedException, YarnException, IOException {\n    // Check whether receive the am container\n    if (!isAMContainerRunning) {\n      if (!responseQueue.isEmpty()) {\n        AllocateResponse response \u003d responseQueue.take();\n        if (response !\u003d null\n            \u0026\u0026 !response.getAllocatedContainers().isEmpty()) {\n          // Get AM container\n          Container container \u003d response.getAllocatedContainers().get(0);\n          se.getNmMap().get(container.getNodeId())\n              .addNewContainer(container, -1L);\n          // Start AM container\n          amContainer \u003d container;\n          LOG.debug(MessageFormat.format(\"Application {0} starts its \" +\n              \"AM container ({1}).\", appId, amContainer.getId()));\n          isAMContainerRunning \u003d true;\n        }\n      }\n      return;\n    }\n\n    while (! responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (! response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"mapper finished ({1}).\", appId, containerId));\n              assignedMaps.remove(containerId);\n              mapFinished ++;\n              finishedContainers ++;\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"reducer finished ({1}).\", appId, containerId));\n              assignedReduces.remove(containerId);\n              reduceFinished ++;\n              finishedContainers ++;\n            } else {\n              // am container released event\n              isFinished \u003d true;\n              LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                      \"finish.\", appId));\n            }\n          } else {\n            // container to be killed\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"mapper killed ({1}).\", appId, containerId));\n              pendingFailedMaps.add(assignedMaps.remove(containerId));\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"reducer killed ({1}).\", appId, containerId));\n              pendingFailedReduces.add(assignedReduces.remove(containerId));\n            } else {\n              LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n                      \"going to be killed. Restarting...\", appId));\n              restart();\n            }\n          }\n        }\n      }\n      \n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n              (mapFinished \u003d\u003d mapTotal) \u0026\u0026\n              (reduceFinished \u003d\u003d reduceTotal)) {\n        // to release the AM container\n        se.getNmMap().get(amContainer.getNodeId())\n                .cleanupContainer(amContainer.getId());\n        isAMContainerRunning \u003d false;\n        LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                \"to clean up its AM container.\", appId));\n        isFinished \u003d true;\n        break;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (! scheduledMaps.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledMaps.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a mapper ({1}).\", appId, container.getId()));\n          assignedMaps.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        } else if (! this.scheduledReduces.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledReduces.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a reducer ({1}).\", appId, container.getId()));\n          assignedReduces.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,80 @@\n+  protected void processResponseQueue()\n+          throws InterruptedException, YarnException, IOException {\n+    while (! responseQueue.isEmpty()) {\n+      AllocateResponse response \u003d responseQueue.take();\n+\n+      // check completed containers\n+      if (! response.getCompletedContainersStatuses().isEmpty()) {\n+        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n+          ContainerId containerId \u003d cs.getContainerId();\n+          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n+            if (assignedMaps.containsKey(containerId)) {\n+              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n+                      \"mapper finished ({1}).\", appId, containerId));\n+              assignedMaps.remove(containerId);\n+              mapFinished ++;\n+              finishedContainers ++;\n+            } else if (assignedReduces.containsKey(containerId)) {\n+              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n+                      \"reducer finished ({1}).\", appId, containerId));\n+              assignedReduces.remove(containerId);\n+              reduceFinished ++;\n+              finishedContainers ++;\n+            } else {\n+              // am container released event\n+              isFinished \u003d true;\n+              LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n+                      \"finish.\", appId));\n+            }\n+          } else {\n+            // container to be killed\n+            if (assignedMaps.containsKey(containerId)) {\n+              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n+                      \"mapper killed ({1}).\", appId, containerId));\n+              pendingFailedMaps.add(assignedMaps.remove(containerId));\n+            } else if (assignedReduces.containsKey(containerId)) {\n+              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n+                      \"reducer killed ({1}).\", appId, containerId));\n+              pendingFailedReduces.add(assignedReduces.remove(containerId));\n+            } else {\n+              LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n+                      \"going to be killed. Restarting...\", appId));\n+              restart();\n+            }\n+          }\n+        }\n+      }\n+      \n+      // check finished\n+      if (isAMContainerRunning \u0026\u0026\n+              (mapFinished \u003d\u003d mapTotal) \u0026\u0026\n+              (reduceFinished \u003d\u003d reduceTotal)) {\n+        // to release the AM container\n+        se.getNmMap().get(amContainer.getNodeId())\n+                .cleanupContainer(amContainer.getId());\n+        isAMContainerRunning \u003d false;\n+        LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n+                \"to clean up its AM container.\", appId));\n+        isFinished \u003d true;\n+      }\n+\n+      // check allocated containers\n+      for (Container container : response.getAllocatedContainers()) {\n+        if (! scheduledMaps.isEmpty()) {\n+          ContainerSimulator cs \u003d scheduledMaps.remove();\n+          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n+                  \"launch a mapper ({1}).\", appId, container.getId()));\n+          assignedMaps.put(container.getId(), cs);\n+          se.getNmMap().get(container.getNodeId())\n+                  .addNewContainer(container, cs.getLifeTime());\n+        } else if (! this.scheduledReduces.isEmpty()) {\n+          ContainerSimulator cs \u003d scheduledReduces.remove();\n+          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n+                  \"launch a reducer ({1}).\", appId, container.getId()));\n+          assignedReduces.put(container.getId(), cs);\n+          se.getNmMap().get(container.getNodeId())\n+                  .addNewContainer(container, cs.getLifeTime());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processResponseQueue()\n          throws InterruptedException, YarnException, IOException {\n    while (! responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (! response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"mapper finished ({1}).\", appId, containerId));\n              assignedMaps.remove(containerId);\n              mapFinished ++;\n              finishedContainers ++;\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one\" +\n                      \"reducer finished ({1}).\", appId, containerId));\n              assignedReduces.remove(containerId);\n              reduceFinished ++;\n              finishedContainers ++;\n            } else {\n              // am container released event\n              isFinished \u003d true;\n              LOG.info(MessageFormat.format(\"Application {0} goes to \" +\n                      \"finish.\", appId));\n            }\n          } else {\n            // container to be killed\n            if (assignedMaps.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"mapper killed ({1}).\", appId, containerId));\n              pendingFailedMaps.add(assignedMaps.remove(containerId));\n            } else if (assignedReduces.containsKey(containerId)) {\n              LOG.debug(MessageFormat.format(\"Application {0} has one \" +\n                      \"reducer killed ({1}).\", appId, containerId));\n              pendingFailedReduces.add(assignedReduces.remove(containerId));\n            } else {\n              LOG.info(MessageFormat.format(\"Application {0}\u0027s AM is \" +\n                      \"going to be killed. Restarting...\", appId));\n              restart();\n            }\n          }\n        }\n      }\n      \n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n              (mapFinished \u003d\u003d mapTotal) \u0026\u0026\n              (reduceFinished \u003d\u003d reduceTotal)) {\n        // to release the AM container\n        se.getNmMap().get(amContainer.getNodeId())\n                .cleanupContainer(amContainer.getId());\n        isAMContainerRunning \u003d false;\n        LOG.debug(MessageFormat.format(\"Application {0} sends out event \" +\n                \"to clean up its AM container.\", appId));\n        isFinished \u003d true;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (! scheduledMaps.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledMaps.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a mapper ({1}).\", appId, container.getId()));\n          assignedMaps.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        } else if (! this.scheduledReduces.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledReduces.remove();\n          LOG.debug(MessageFormat.format(\"Application {0} starts a \" +\n                  \"launch a reducer ({1}).\", appId, container.getId()));\n          assignedReduces.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n                  .addNewContainer(container, cs.getLifeTime());\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java"
    }
  }
}