{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "visitAll",
  "functionId": "visitAll___visitor-StatisticsAggregator__T__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 4005,
  "functionEndLine": 4012,
  "numCommitsSeen": 143,
  "timeTaken": 3903,
  "changeHistory": [
    "8e1bdc17d9134e01115ae7c929503d8ac0325207",
    "e86f4a2e25c755311a42c0b34481f816912f9a43"
  ],
  "changeHistoryShort": {
    "8e1bdc17d9134e01115ae7c929503d8ac0325207": "Ybodychange",
    "e86f4a2e25c755311a42c0b34481f816912f9a43": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e1bdc17d9134e01115ae7c929503d8ac0325207": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12107. long running apps may have a huge number of StatisticsData instances under FileSystem (Sangjin Lee via Ming Ma)\n",
      "commitDate": "29/06/15 2:37 PM",
      "commitName": "8e1bdc17d9134e01115ae7c929503d8ac0325207",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "28/06/15 11:14 AM",
      "commitNameOld": "3dfa8161f9412bcb040f3c29c471344f25f24337",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.14,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,8 @@\n     private synchronized \u003cT\u003e T visitAll(StatisticsAggregator\u003cT\u003e visitor) {\n       visitor.accept(rootData);\n-      if (allData !\u003d null) {\n-        for (Iterator\u003cStatisticsData\u003e iter \u003d allData.iterator();\n-            iter.hasNext(); ) {\n-          StatisticsData data \u003d iter.next();\n-          visitor.accept(data);\n-          if (data.owner.get() \u003d\u003d null) {\n-            /*\n-             * If the thread that created this thread-local data no\n-             * longer exists, remove the StatisticsData from our list\n-             * and fold the values into rootData.\n-             */\n-            rootData.add(data);\n-            iter.remove();\n-          }\n-        }\n+      for (StatisticsDataReference ref: allData) {\n+        StatisticsData data \u003d ref.getData();\n+        visitor.accept(data);\n       }\n       return visitor.aggregate();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized \u003cT\u003e T visitAll(StatisticsAggregator\u003cT\u003e visitor) {\n      visitor.accept(rootData);\n      for (StatisticsDataReference ref: allData) {\n        StatisticsData data \u003d ref.getData();\n        visitor.accept(data);\n      }\n      return visitor.aggregate();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "e86f4a2e25c755311a42c0b34481f816912f9a43": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5276. FileSystem.Statistics should use thread-local counters to avoid multi-threaded performance issues on read/write.  (Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1533668 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/13 5:17 PM",
      "commitName": "e86f4a2e25c755311a42c0b34481f816912f9a43",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,20 @@\n+    private synchronized \u003cT\u003e T visitAll(StatisticsAggregator\u003cT\u003e visitor) {\n+      visitor.accept(rootData);\n+      if (allData !\u003d null) {\n+        for (Iterator\u003cStatisticsData\u003e iter \u003d allData.iterator();\n+            iter.hasNext(); ) {\n+          StatisticsData data \u003d iter.next();\n+          visitor.accept(data);\n+          if (data.owner.get() \u003d\u003d null) {\n+            /*\n+             * If the thread that created this thread-local data no\n+             * longer exists, remove the StatisticsData from our list\n+             * and fold the values into rootData.\n+             */\n+            rootData.add(data);\n+            iter.remove();\n+          }\n+        }\n+      }\n+      return visitor.aggregate();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized \u003cT\u003e T visitAll(StatisticsAggregator\u003cT\u003e visitor) {\n      visitor.accept(rootData);\n      if (allData !\u003d null) {\n        for (Iterator\u003cStatisticsData\u003e iter \u003d allData.iterator();\n            iter.hasNext(); ) {\n          StatisticsData data \u003d iter.next();\n          visitor.accept(data);\n          if (data.owner.get() \u003d\u003d null) {\n            /*\n             * If the thread that created this thread-local data no\n             * longer exists, remove the StatisticsData from our list\n             * and fold the values into rootData.\n             */\n            rootData.add(data);\n            iter.remove();\n          }\n        }\n      }\n      return visitor.aggregate();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}