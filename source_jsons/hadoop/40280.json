{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "createContainer",
  "functionId": "createContainer___node-FiCaSchedulerNode__capability-Resource__schedulerKey-SchedulerRequestKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 708,
  "functionEndLine": 721,
  "numCommitsSeen": 239,
  "timeTaken": 13467,
  "changeHistory": [
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "ba2313d6145a1234777938a747187373f4cd58d9",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
    "b16c5638b5190c56f9d854d873589cb5c11c8b32",
    "fbb55784d93e1a819daf55d936e864d344579cbf",
    "90ba993bc72e374f99c44d0770f55aeaa8342f2d",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
    "126dd6adefeb00e4ba81ea137d63a8a76b75c3bd",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383": "Ybodychange",
    "b16c5638b5190c56f9d854d873589cb5c11c8b32": "Ybodychange",
    "fbb55784d93e1a819daf55d936e864d344579cbf": "Ybodychange",
    "90ba993bc72e374f99c44d0770f55aeaa8342f2d": "Ymultichange(Ymodifierchange,Ybodychange)",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": "Ybodychange",
    "126dd6adefeb00e4ba81ea137d63a8a76b75c3bd": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": "Ybodychange",
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/09/16 2:08 AM",
      "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 49.38,
      "commitsBetweenForRepo": 429,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   private Container createContainer(FiCaSchedulerNode node, Resource capability,\n       SchedulerRequestKey schedulerKey) {\n-\n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n-    ContainerId containerId \u003d\n-        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n-            application.getNewContainerId());\n \n     // Create the container\n-    return BuilderUtils.newContainer(containerId, nodeId,\n+    // Now set the containerId to null first, because it is possible the\n+    // container will be rejected because of concurrent resource allocation.\n+    // new containerId will be generated and assigned to the container\n+    // after confirmed.\n+    return BuilderUtils.newContainer(null, nodeId,\n         node.getRMNode().getHttpAddress(), capability,\n         schedulerKey.getPriority(), null,\n         schedulerKey.getAllocationRequestId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      SchedulerRequestKey schedulerKey) {\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n\n    // Create the container\n    // Now set the containerId to null first, because it is possible the\n    // container will be rejected because of concurrent resource allocation.\n    // new containerId will be generated and assigned to the container\n    // after confirmed.\n    return BuilderUtils.newContainer(null, nodeId,\n        node.getRMNode().getHttpAddress(), capability,\n        schedulerKey.getPriority(), null,\n        schedulerKey.getAllocationRequestId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4888. Changes in scheduler to identify resource-requests explicitly by allocation-id. (Subru Krishnan via wangda)\n",
      "commitDate": "05/08/16 10:43 AM",
      "commitName": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/08/16 10:27 AM",
      "commitNameOld": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   private Container createContainer(FiCaSchedulerNode node, Resource capability,\n       SchedulerRequestKey schedulerKey) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d\n         BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n             application.getNewContainerId());\n \n     // Create the container\n-    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-        .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n+    return BuilderUtils.newContainer(containerId, nodeId,\n+        node.getRMNode().getHttpAddress(), capability,\n+        schedulerKey.getPriority(), null,\n+        schedulerKey.getAllocationRequestId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      SchedulerRequestKey schedulerKey) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n            application.getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability,\n        schedulerKey.getPriority(), null,\n        schedulerKey.getAllocationRequestId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n   private Container createContainer(FiCaSchedulerNode node, Resource capability,\n-      Priority priority) {\n+      SchedulerRequestKey schedulerKey) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d\n         BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n             application.getNewContainerId());\n \n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-        .getHttpAddress(), capability, priority, null);\n+        .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      SchedulerRequestKey schedulerKey) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n            application.getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[node-FiCaSchedulerNode, capability-Resource, priority-Priority]",
            "newValue": "[node-FiCaSchedulerNode, capability-Resource, schedulerKey-SchedulerRequestKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n   private Container createContainer(FiCaSchedulerNode node, Resource capability,\n-      Priority priority) {\n+      SchedulerRequestKey schedulerKey) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d\n         BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n             application.getNewContainerId());\n \n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-        .getHttpAddress(), capability, priority, null);\n+        .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      SchedulerRequestKey schedulerKey) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n            application.getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  Container createContainer(FiCaSchedulerNode node, Resource capability,\n+  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n       Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d\n-        BuilderUtils.newContainerId(getApplicationAttemptId(),\n-            getNewContainerId());\n+        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n+            application.getNewContainerId());\n \n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n         .getHttpAddress(), capability, priority, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n            application.getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, priority, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
            "oldMethodName": "createContainer",
            "newMethodName": "createContainer"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  Container createContainer(FiCaSchedulerNode node, Resource capability,\n+  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n       Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d\n-        BuilderUtils.newContainerId(getApplicationAttemptId(),\n-            getNewContainerId());\n+        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n+            application.getNewContainerId());\n \n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n         .getHttpAddress(), capability, priority, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n            application.getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, priority, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  Container createContainer(FiCaSchedulerNode node, Resource capability,\n+  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n       Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d\n-        BuilderUtils.newContainerId(getApplicationAttemptId(),\n-            getNewContainerId());\n+        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n+            application.getNewContainerId());\n \n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n         .getHttpAddress(), capability, priority, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container createContainer(FiCaSchedulerNode node, Resource capability,\n      Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(application.getApplicationAttemptId(),\n            application.getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, priority, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n-      Resource capability, Priority priority) {\n-  \n+  Container createContainer(FiCaSchedulerNode node, Resource capability,\n+      Priority priority) {\n+\n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n-    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n-        .getApplicationAttemptId(), application.getNewContainerId());\n-  \n+    ContainerId containerId \u003d\n+        BuilderUtils.newContainerId(getApplicationAttemptId(),\n+            getNewContainerId());\n+\n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-      .getHttpAddress(), capability, priority, null);\n-\n+        .getHttpAddress(), capability, priority, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Container createContainer(FiCaSchedulerNode node, Resource capability,\n      Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(getApplicationAttemptId(),\n            getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, priority, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "oldMethodName": "createContainer",
            "newMethodName": "createContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n-      Resource capability, Priority priority) {\n-  \n+  Container createContainer(FiCaSchedulerNode node, Resource capability,\n+      Priority priority) {\n+\n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n-    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n-        .getApplicationAttemptId(), application.getNewContainerId());\n-  \n+    ContainerId containerId \u003d\n+        BuilderUtils.newContainerId(getApplicationAttemptId(),\n+            getNewContainerId());\n+\n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-      .getHttpAddress(), capability, priority, null);\n-\n+        .getHttpAddress(), capability, priority, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Container createContainer(FiCaSchedulerNode node, Resource capability,\n      Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(getApplicationAttemptId(),\n            getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, priority, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n-      Resource capability, Priority priority) {\n-  \n+  Container createContainer(FiCaSchedulerNode node, Resource capability,\n+      Priority priority) {\n+\n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n-    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n-        .getApplicationAttemptId(), application.getNewContainerId());\n-  \n+    ContainerId containerId \u003d\n+        BuilderUtils.newContainerId(getApplicationAttemptId(),\n+            getNewContainerId());\n+\n     // Create the container\n     return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-      .getHttpAddress(), capability, priority, null);\n-\n+        .getHttpAddress(), capability, priority, null);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Container createContainer(FiCaSchedulerNode node, Resource capability,\n      Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d\n        BuilderUtils.newContainerId(getApplicationAttemptId(),\n            getNewContainerId());\n\n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n        .getHttpAddress(), capability, priority, null);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[application-FiCaSchedulerApp, node-FiCaSchedulerNode, capability-Resource, priority-Priority]",
            "newValue": "[node-FiCaSchedulerNode, capability-Resource, priority-Priority]"
          }
        }
      ]
    },
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3293. Track and display capacity scheduler health metrics in web\nUI. Contributed by Varun Vasudev\n",
      "commitDate": "09/04/15 11:38 PM",
      "commitName": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/03/15 1:54 PM",
      "commitNameOld": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.41,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,12 @@\n   Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n   \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n   \n     // Create the container\n-    Container container \u003d\n-        BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-          .getHttpAddress(), capability, priority, null);\n-  \n-    return container;\n+    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n+      .getHttpAddress(), capability, priority, null);\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n  \n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n  \n    // Create the container\n    return BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n      .getHttpAddress(), capability, priority, null);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "b16c5638b5190c56f9d854d873589cb5c11c8b32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-719. Move RMIdentifier from Container to ContainerTokenIdentifier. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 9:59 PM",
      "commitName": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "16/05/13 11:36 PM",
      "commitNameOld": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.93,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n   \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n   \n     // Create the container\n-    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n-        node.getRMNode().getHttpAddress(), capability, priority,\n-        null, ResourceManager.clusterTimeStamp);\n+    Container container \u003d\n+        BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n+          .getHttpAddress(), capability, priority, null);\n   \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n  \n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n  \n    // Create the container\n    Container container \u003d\n        BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n          .getHttpAddress(), capability, priority, null);\n  \n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "fbb55784d93e1a819daf55d936e864d344579cbf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-562. Modified NM to reject any containers allocated by a previous ResourceManager. Contributed by Jian He.\nMAPREDUCE-5167. Update MR App after YARN-562 to use the new builder API for the container. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476034 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 8:50 PM",
      "commitName": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/04/13 8:30 AM",
      "commitNameOld": "18757c126761d1813dfffb57d5032d6b5b3c96de",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 20.51,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n   \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n   \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n-        null);\n+        null, ResourceManager.clusterTimeStamp);\n   \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n  \n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n  \n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        null, ResourceManager.clusterTimeStamp);\n  \n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "90ba993bc72e374f99c44d0770f55aeaa8342f2d": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-180. Capacity scheduler - containers that get reserved create container token to early (acmurthy and bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401703 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 7:16 AM",
      "commitName": "90ba993bc72e374f99c44d0770f55aeaa8342f2d",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-180. Capacity scheduler - containers that get reserved create container token to early (acmurthy and bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401703 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/10/12 7:16 AM",
          "commitName": "90ba993bc72e374f99c44d0770f55aeaa8342f2d",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "24/10/12 6:21 AM",
          "commitNameOld": "cc523683cfa76c1255667a3aedc48b08e5daabc7",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,14 @@\n-  public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n+  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n-\n+  \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n-    ContainerToken containerToken \u003d null;\n-\n-    // If security is enabled, send the container-tokens too.\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      containerToken \u003d\n-          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n-            application.getUser(), capability);\n-      if (containerToken \u003d\u003d null) {\n-        return null; // Try again later.\n-      }\n-    }\n-\n+  \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n-        containerToken);\n-\n+        null);\n+  \n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n  \n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n  \n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        null);\n  \n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-180. Capacity scheduler - containers that get reserved create container token to early (acmurthy and bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401703 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/10/12 7:16 AM",
          "commitName": "90ba993bc72e374f99c44d0770f55aeaa8342f2d",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "24/10/12 6:21 AM",
          "commitNameOld": "cc523683cfa76c1255667a3aedc48b08e5daabc7",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,14 @@\n-  public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n+  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n-\n+  \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n-    ContainerToken containerToken \u003d null;\n-\n-    // If security is enabled, send the container-tokens too.\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      containerToken \u003d\n-          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n-            application.getUser(), capability);\n-      if (containerToken \u003d\u003d null) {\n-        return null; // Try again later.\n-      }\n-    }\n-\n+  \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n-        containerToken);\n-\n+        null);\n+  \n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n  \n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n  \n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        null);\n  \n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": {
      "type": "Ybodychange",
      "commitMessage": "Fix NodeManager to verify the application\u0027s user-name.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:43 PM",
      "commitName": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/09/12 10:10 PM",
      "commitNameOld": "56d72dfdf1f33272f32794a02f3b08cfeee85343",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 19.94,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n     ContainerToken containerToken \u003d null;\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       containerToken \u003d\n           containerTokenSecretManager.createContainerToken(containerId, nodeId,\n-            capability);\n+            application.getUser(), capability);\n       if (containerToken \u003d\u003d null) {\n         return null; // Try again later.\n       }\n     }\n \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n         containerToken);\n \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n    ContainerToken containerToken \u003d null;\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      containerToken \u003d\n          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n            application.getUser(), capability);\n      if (containerToken \u003d\u003d null) {\n        return null; // Try again later.\n      }\n    }\n\n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        containerToken);\n\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n    ContainerToken containerToken \u003d null;\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      containerToken \u003d\n          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n            capability);\n      if (containerToken \u003d\u003d null) {\n        return null; // Try again later.\n      }\n    }\n\n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        containerToken);\n\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-  public Container createContainer(SchedulerApp application, SchedulerNode node, \n+  public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n       Resource capability, Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n     ContainerToken containerToken \u003d null;\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       containerToken \u003d\n           containerTokenSecretManager.createContainerToken(containerId, nodeId,\n             capability);\n       if (containerToken \u003d\u003d null) {\n         return null; // Try again later.\n       }\n     }\n \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n         containerToken);\n \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(FiCaSchedulerApp application, FiCaSchedulerNode node, \n      Resource capability, Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n    ContainerToken containerToken \u003d null;\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      containerToken \u003d\n          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n            capability);\n      if (containerToken \u003d\u003d null) {\n        return null; // Try again later.\n      }\n    }\n\n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        containerToken);\n\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[application-SchedulerApp, node-SchedulerNode, capability-Resource, priority-Priority]",
        "newValue": "[application-FiCaSchedulerApp, node-FiCaSchedulerNode, capability-Resource, priority-Priority]"
      }
    },
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3940. ContainerTokens should have an expiry interval. Contributed by Siddharth Seth and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359910 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 2:26 PM",
      "commitName": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/06/12 11:14 AM",
      "commitNameOld": "126dd6adefeb00e4ba81ea137d63a8a76b75c3bd",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 19.13,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,25 @@\n   public Container createContainer(SchedulerApp application, SchedulerNode node, \n       Resource capability, Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n     ContainerToken containerToken \u003d null;\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n-      ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n-          containerId, nodeId.toString(), capability);\n-      try {\n-        containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n-            .wrap(containerTokenSecretManager\n-                .createPassword(tokenIdentifier)), tokenIdentifier);\n-      } catch (IllegalArgumentException e) {\n-         // this could be because DNS is down - in which case we just want\n-         // to retry and not bring RM down\n-         LOG.error(\"Error trying to create new container\", e);\n-         return null;\n+      containerToken \u003d\n+          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n+            capability);\n+      if (containerToken \u003d\u003d null) {\n+        return null; // Try again later.\n       }\n     }\n \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n         containerToken);\n \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability, Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n    ContainerToken containerToken \u003d null;\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      containerToken \u003d\n          containerTokenSecretManager.createContainerToken(containerId, nodeId,\n            capability);\n      if (containerToken \u003d\u003d null) {\n        return null; // Try again later.\n      }\n    }\n\n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        containerToken);\n\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "126dd6adefeb00e4ba81ea137d63a8a76b75c3bd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4295. RM crashes due to DNS issue (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1352638 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/12 11:14 AM",
      "commitName": "126dd6adefeb00e4ba81ea137d63a8a76b75c3bd",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "21/05/12 12:15 PM",
      "commitNameOld": "d74bec2f883b562d377cc564ca86473c498a618a",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 30.96,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,31 @@\n   public Container createContainer(SchedulerApp application, SchedulerNode node, \n       Resource capability, Priority priority) {\n \n     NodeId nodeId \u003d node.getRMNode().getNodeID();\n     ContainerId containerId \u003d BuilderUtils.newContainerId(application\n         .getApplicationAttemptId(), application.getNewContainerId());\n     ContainerToken containerToken \u003d null;\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n           containerId, nodeId.toString(), capability);\n-      containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n-          .wrap(containerTokenSecretManager\n-              .createPassword(tokenIdentifier)), tokenIdentifier);\n+      try {\n+        containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n+            .wrap(containerTokenSecretManager\n+                .createPassword(tokenIdentifier)), tokenIdentifier);\n+      } catch (IllegalArgumentException e) {\n+         // this could be because DNS is down - in which case we just want\n+         // to retry and not bring RM down\n+         LOG.error(\"Error trying to create new container\", e);\n+         return null;\n+      }\n     }\n \n     // Create the container\n     Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n         node.getRMNode().getHttpAddress(), capability, priority,\n         containerToken);\n \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability, Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n    ContainerToken containerToken \u003d null;\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n          containerId, nodeId.toString(), capability);\n      try {\n        containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n            .wrap(containerTokenSecretManager\n                .createPassword(tokenIdentifier)), tokenIdentifier);\n      } catch (IllegalArgumentException e) {\n         // this could be because DNS is down - in which case we just want\n         // to retry and not bring RM down\n         LOG.error(\"Error trying to create new container\", e);\n         return null;\n      }\n    }\n\n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        containerToken);\n\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/10/11 11:24 AM",
      "commitNameOld": "b8f0836f9420e71652404c41471653bb15f62a48",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 8.72,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,24 @@\n   public Container createContainer(SchedulerApp application, SchedulerNode node, \n       Resource capability, Priority priority) {\n-    Container container \u003d \n-          BuilderUtils.newContainer(this.recordFactory,\n-              application.getApplicationAttemptId(),\n-              application.getNewContainerId(),\n-              node.getNodeID(), node.getHttpAddress(), \n-              capability, priority);\n+\n+    NodeId nodeId \u003d node.getRMNode().getNodeID();\n+    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n+        .getApplicationAttemptId(), application.getNewContainerId());\n+    ContainerToken containerToken \u003d null;\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n-      ContainerToken containerToken \u003d \n-          this.recordFactory.newRecordInstance(ContainerToken.class);\n-      NodeId nodeId \u003d container.getNodeId();\n-      ContainerTokenIdentifier tokenidentifier \u003d new ContainerTokenIdentifier(\n-          container.getId(), nodeId.toString(), container.getResource());\n-      containerToken.setIdentifier(\n-          ByteBuffer.wrap(tokenidentifier.getBytes()));\n-      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n-      containerToken.setPassword(\n-          ByteBuffer.wrap(\n-              containerTokenSecretManager.createPassword(tokenidentifier))\n-          );\n-      // RPC layer client expects ip:port as service for tokens\n-      InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n-          nodeId.getPort());\n-      containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n-          + addr.getPort());\n-      container.setContainerToken(containerToken);\n+      ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n+          containerId, nodeId.toString(), capability);\n+      containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n+          .wrap(containerTokenSecretManager\n+              .createPassword(tokenIdentifier)), tokenIdentifier);\n     }\n \n+    // Create the container\n+    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n+        node.getRMNode().getHttpAddress(), capability, priority,\n+        containerToken);\n+\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability, Priority priority) {\n\n    NodeId nodeId \u003d node.getRMNode().getNodeID();\n    ContainerId containerId \u003d BuilderUtils.newContainerId(application\n        .getApplicationAttemptId(), application.getNewContainerId());\n    ContainerToken containerToken \u003d null;\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n          containerId, nodeId.toString(), capability);\n      containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n          .wrap(containerTokenSecretManager\n              .createPassword(tokenIdentifier)), tokenIdentifier);\n    }\n\n    // Create the container\n    Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n        node.getRMNode().getHttpAddress(), capability, priority,\n        containerToken);\n\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2792. Replace usage of node ip-addresses with hostnames. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:21 PM",
      "commitName": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "30/09/11 3:19 PM",
      "commitNameOld": "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.04,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public Container createContainer(SchedulerApp application, SchedulerNode node, \n       Resource capability, Priority priority) {\n     Container container \u003d \n           BuilderUtils.newContainer(this.recordFactory,\n               application.getApplicationAttemptId(),\n               application.getNewContainerId(),\n               node.getNodeID(), node.getHttpAddress(), \n               capability, priority);\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d \n           this.recordFactory.newRecordInstance(ContainerToken.class);\n-      ContainerTokenIdentifier tokenidentifier \u003d\n-          new ContainerTokenIdentifier(container.getId(),\n-              container.getNodeId().toString(), container.getResource());\n+      NodeId nodeId \u003d container.getNodeId();\n+      ContainerTokenIdentifier tokenidentifier \u003d new ContainerTokenIdentifier(\n+          container.getId(), nodeId.toString(), container.getResource());\n       containerToken.setIdentifier(\n           ByteBuffer.wrap(tokenidentifier.getBytes()));\n       containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n       containerToken.setPassword(\n           ByteBuffer.wrap(\n               containerTokenSecretManager.createPassword(tokenidentifier))\n           );\n-      containerToken.setService(container.getNodeId().toString());\n+      // RPC layer client expects ip:port as service for tokens\n+      InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n+          nodeId.getPort());\n+      containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n+          + addr.getPort());\n       container.setContainerToken(containerToken);\n     }\n \n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability, Priority priority) {\n    Container container \u003d \n          BuilderUtils.newContainer(this.recordFactory,\n              application.getApplicationAttemptId(),\n              application.getNewContainerId(),\n              node.getNodeID(), node.getHttpAddress(), \n              capability, priority);\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d \n          this.recordFactory.newRecordInstance(ContainerToken.class);\n      NodeId nodeId \u003d container.getNodeId();\n      ContainerTokenIdentifier tokenidentifier \u003d new ContainerTokenIdentifier(\n          container.getId(), nodeId.toString(), container.getResource());\n      containerToken.setIdentifier(\n          ByteBuffer.wrap(tokenidentifier.getBytes()));\n      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n      containerToken.setPassword(\n          ByteBuffer.wrap(\n              containerTokenSecretManager.createPassword(tokenidentifier))\n          );\n      // RPC layer client expects ip:port as service for tokens\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n          nodeId.getPort());\n      containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n          + addr.getPort());\n      container.setContainerToken(containerToken);\n    }\n\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/11 6:25 AM",
      "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/11 6:25 AM",
          "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "20/09/11 6:14 PM",
          "commitNameOld": "339b85b88ead760c6d4dc0f63a72780d6d5df8c2",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 5.51,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   public Container createContainer(SchedulerApp application, SchedulerNode node, \n-      Resource capability) {\n+      Resource capability, Priority priority) {\n     Container container \u003d \n           BuilderUtils.newContainer(this.recordFactory,\n               application.getApplicationAttemptId(),\n               application.getNewContainerId(),\n-              node.getNodeID(),\n-              node.getHttpAddress(), capability);\n+              node.getNodeID(), node.getHttpAddress(), \n+              capability, priority);\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d \n           this.recordFactory.newRecordInstance(ContainerToken.class);\n       ContainerTokenIdentifier tokenidentifier \u003d\n           new ContainerTokenIdentifier(container.getId(),\n               container.getNodeId().toString(), container.getResource());\n       containerToken.setIdentifier(\n           ByteBuffer.wrap(tokenidentifier.getBytes()));\n       containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n       containerToken.setPassword(\n           ByteBuffer.wrap(\n               containerTokenSecretManager.createPassword(tokenidentifier))\n           );\n       containerToken.setService(container.getNodeId().toString());\n       container.setContainerToken(containerToken);\n     }\n \n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability, Priority priority) {\n    Container container \u003d \n          BuilderUtils.newContainer(this.recordFactory,\n              application.getApplicationAttemptId(),\n              application.getNewContainerId(),\n              node.getNodeID(), node.getHttpAddress(), \n              capability, priority);\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d \n          this.recordFactory.newRecordInstance(ContainerToken.class);\n      ContainerTokenIdentifier tokenidentifier \u003d\n          new ContainerTokenIdentifier(container.getId(),\n              container.getNodeId().toString(), container.getResource());\n      containerToken.setIdentifier(\n          ByteBuffer.wrap(tokenidentifier.getBytes()));\n      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n      containerToken.setPassword(\n          ByteBuffer.wrap(\n              containerTokenSecretManager.createPassword(tokenidentifier))\n          );\n      containerToken.setService(container.getNodeId().toString());\n      container.setContainerToken(containerToken);\n    }\n\n    return container;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApp, node-SchedulerNode, capability-Resource]",
            "newValue": "[application-SchedulerApp, node-SchedulerNode, capability-Resource, priority-Priority]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/11 6:25 AM",
          "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "20/09/11 6:14 PM",
          "commitNameOld": "339b85b88ead760c6d4dc0f63a72780d6d5df8c2",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 5.51,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   public Container createContainer(SchedulerApp application, SchedulerNode node, \n-      Resource capability) {\n+      Resource capability, Priority priority) {\n     Container container \u003d \n           BuilderUtils.newContainer(this.recordFactory,\n               application.getApplicationAttemptId(),\n               application.getNewContainerId(),\n-              node.getNodeID(),\n-              node.getHttpAddress(), capability);\n+              node.getNodeID(), node.getHttpAddress(), \n+              capability, priority);\n \n     // If security is enabled, send the container-tokens too.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d \n           this.recordFactory.newRecordInstance(ContainerToken.class);\n       ContainerTokenIdentifier tokenidentifier \u003d\n           new ContainerTokenIdentifier(container.getId(),\n               container.getNodeId().toString(), container.getResource());\n       containerToken.setIdentifier(\n           ByteBuffer.wrap(tokenidentifier.getBytes()));\n       containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n       containerToken.setPassword(\n           ByteBuffer.wrap(\n               containerTokenSecretManager.createPassword(tokenidentifier))\n           );\n       containerToken.setService(container.getNodeId().toString());\n       container.setContainerToken(containerToken);\n     }\n \n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability, Priority priority) {\n    Container container \u003d \n          BuilderUtils.newContainer(this.recordFactory,\n              application.getApplicationAttemptId(),\n              application.getNewContainerId(),\n              node.getNodeID(), node.getHttpAddress(), \n              capability, priority);\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d \n          this.recordFactory.newRecordInstance(ContainerToken.class);\n      ContainerTokenIdentifier tokenidentifier \u003d\n          new ContainerTokenIdentifier(container.getId(),\n              container.getNodeId().toString(), container.getResource());\n      containerToken.setIdentifier(\n          ByteBuffer.wrap(tokenidentifier.getBytes()));\n      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n      containerToken.setPassword(\n          ByteBuffer.wrap(\n              containerTokenSecretManager.createPassword(tokenidentifier))\n          );\n      containerToken.setService(container.getNodeId().toString());\n      container.setContainerToken(containerToken);\n    }\n\n    return container;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability) {\n    Container container \u003d \n          BuilderUtils.newContainer(this.recordFactory,\n              application.getApplicationAttemptId(),\n              application.getNewContainerId(),\n              node.getNodeID(),\n              node.getHttpAddress(), capability);\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d \n          this.recordFactory.newRecordInstance(ContainerToken.class);\n      ContainerTokenIdentifier tokenidentifier \u003d\n          new ContainerTokenIdentifier(container.getId(),\n              container.getNodeId().toString(), container.getResource());\n      containerToken.setIdentifier(\n          ByteBuffer.wrap(tokenidentifier.getBytes()));\n      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n      containerToken.setPassword(\n          ByteBuffer.wrap(\n              containerTokenSecretManager.createPassword(tokenidentifier))\n          );\n      containerToken.setService(container.getNodeId().toString());\n      container.setContainerToken(containerToken);\n    }\n\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  public Container createContainer(SchedulerApp application, SchedulerNode node, \n+      Resource capability) {\n+    Container container \u003d \n+          BuilderUtils.newContainer(this.recordFactory,\n+              application.getApplicationAttemptId(),\n+              application.getNewContainerId(),\n+              node.getNodeID(),\n+              node.getHttpAddress(), capability);\n+\n+    // If security is enabled, send the container-tokens too.\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      ContainerToken containerToken \u003d \n+          this.recordFactory.newRecordInstance(ContainerToken.class);\n+      ContainerTokenIdentifier tokenidentifier \u003d\n+          new ContainerTokenIdentifier(container.getId(),\n+              container.getNodeId().toString(), container.getResource());\n+      containerToken.setIdentifier(\n+          ByteBuffer.wrap(tokenidentifier.getBytes()));\n+      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n+      containerToken.setPassword(\n+          ByteBuffer.wrap(\n+              containerTokenSecretManager.createPassword(tokenidentifier))\n+          );\n+      containerToken.setService(container.getNodeId().toString());\n+      container.setContainerToken(containerToken);\n+    }\n+\n+    return container;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Container createContainer(SchedulerApp application, SchedulerNode node, \n      Resource capability) {\n    Container container \u003d \n          BuilderUtils.newContainer(this.recordFactory,\n              application.getApplicationAttemptId(),\n              application.getNewContainerId(),\n              node.getNodeID(),\n              node.getHttpAddress(), capability);\n\n    // If security is enabled, send the container-tokens too.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d \n          this.recordFactory.newRecordInstance(ContainerToken.class);\n      ContainerTokenIdentifier tokenidentifier \u003d\n          new ContainerTokenIdentifier(container.getId(),\n              container.getNodeId().toString(), container.getResource());\n      containerToken.setIdentifier(\n          ByteBuffer.wrap(tokenidentifier.getBytes()));\n      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n      containerToken.setPassword(\n          ByteBuffer.wrap(\n              containerTokenSecretManager.createPassword(tokenidentifier))\n          );\n      containerToken.setService(container.getNodeId().toString());\n      container.setContainerToken(containerToken);\n    }\n\n    return container;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}