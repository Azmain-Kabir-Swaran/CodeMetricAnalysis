{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Paths.java",
  "functionName": "addUUID",
  "functionId": "addUUID___pathStr-String__uuid-String",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/commit/staging/Paths.java",
  "functionStartLine": 74,
  "functionEndLine": 97,
  "numCommitsSeen": 3,
  "timeTaken": 1187,
  "changeHistory": [
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c"
  ],
  "changeHistoryShort": {
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,24 @@\n+  public static String addUUID(String pathStr, String uuid) {\n+    Preconditions.checkArgument(StringUtils.isNotEmpty(pathStr), \"empty path\");\n+    Preconditions.checkArgument(StringUtils.isNotEmpty(uuid), \"empty uuid\");\n+    // In some cases, Spark will add the UUID to the filename itself.\n+    if (pathStr.contains(uuid)) {\n+      return pathStr;\n+    }\n+\n+    int dot; // location of the first \u0027.\u0027 in the file name\n+    int lastSlash \u003d pathStr.lastIndexOf(\u0027/\u0027);\n+    if (lastSlash \u003e\u003d 0) {\n+      Preconditions.checkState(lastSlash + 1 \u003c pathStr.length(),\n+          \"Bad path: \" + pathStr);\n+      dot \u003d pathStr.indexOf(\u0027.\u0027, lastSlash);\n+    } else {\n+      dot \u003d pathStr.indexOf(\u0027.\u0027);\n+    }\n+\n+    if (dot \u003e\u003d 0) {\n+      return pathStr.substring(0, dot) + \"-\" + uuid + pathStr.substring(dot);\n+    } else {\n+      return pathStr + \"-\" + uuid;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String addUUID(String pathStr, String uuid) {\n    Preconditions.checkArgument(StringUtils.isNotEmpty(pathStr), \"empty path\");\n    Preconditions.checkArgument(StringUtils.isNotEmpty(uuid), \"empty uuid\");\n    // In some cases, Spark will add the UUID to the filename itself.\n    if (pathStr.contains(uuid)) {\n      return pathStr;\n    }\n\n    int dot; // location of the first \u0027.\u0027 in the file name\n    int lastSlash \u003d pathStr.lastIndexOf(\u0027/\u0027);\n    if (lastSlash \u003e\u003d 0) {\n      Preconditions.checkState(lastSlash + 1 \u003c pathStr.length(),\n          \"Bad path: \" + pathStr);\n      dot \u003d pathStr.indexOf(\u0027.\u0027, lastSlash);\n    } else {\n      dot \u003d pathStr.indexOf(\u0027.\u0027);\n    }\n\n    if (dot \u003e\u003d 0) {\n      return pathStr.substring(0, dot) + \"-\" + uuid + pathStr.substring(dot);\n    } else {\n      return pathStr + \"-\" + uuid;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/commit/staging/Paths.java"
    }
  }
}