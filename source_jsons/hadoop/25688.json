{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobHistoryEventHandler.java",
  "functionName": "processDoneFiles",
  "functionId": "processDoneFiles___jobId-JobId",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
  "functionStartLine": 1455,
  "functionEndLine": 1537,
  "numCommitsSeen": 69,
  "timeTaken": 2457,
  "changeHistory": [
    "735fce5bec17f4e1799daf922625c475cf588114",
    "6785661e554114a4613b5fe7dabec9bfa80c41d9",
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9"
  ],
  "changeHistoryShort": {
    "735fce5bec17f4e1799daf922625c475cf588114": "Ybodychange",
    "6785661e554114a4613b5fe7dabec9bfa80c41d9": "Ybodychange",
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "735fce5bec17f4e1799daf922625c475cf588114": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6927. MR job should only set tracking url if history was successfully written. Contributed by Eric Badger\n",
      "commitDate": "08/08/17 12:46 PM",
      "commitName": "735fce5bec17f4e1799daf922625c475cf588114",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "16/02/17 11:41 AM",
      "commitNameOld": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 173.0,
      "commitsBetweenForRepo": 984,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,83 @@\n   protected void processDoneFiles(JobId jobId) throws IOException {\n \n     final MetaInfo mi \u003d fileMap.get(jobId);\n     if (mi \u003d\u003d null) {\n       throw new IOException(\"No MetaInfo found for JobId: [\" + jobId + \"]\");\n     }\n \n     if (mi.getHistoryFile() \u003d\u003d null) {\n       LOG.warn(\"No file for job-history with \" + jobId + \" found in cache!\");\n     }\n     if (mi.getConfFile() \u003d\u003d null) {\n       LOG.warn(\"No file for jobconf with \" + jobId + \" found in cache!\");\n     }\n       \n     // Writing out the summary file.\n     // TODO JH enhancement - reuse this file to store additional indexing info\n     // like ACLs, etc. JHServer can use HDFS append to build an index file\n     // with more info than is available via the filename.\n     Path qualifiedSummaryDoneFile \u003d null;\n     FSDataOutputStream summaryFileOut \u003d null;\n     try {\n       String doneSummaryFileName \u003d getTempFileName(JobHistoryUtils\n           .getIntermediateSummaryFileName(jobId));\n       qualifiedSummaryDoneFile \u003d doneDirFS.makeQualified(new Path(\n           doneDirPrefixPath, doneSummaryFileName));\n       summaryFileOut \u003d doneDirFS.create(qualifiedSummaryDoneFile, true);\n       summaryFileOut.writeUTF(mi.getJobSummary().getJobSummaryString());\n       summaryFileOut.close();\n       doneDirFS.setPermission(qualifiedSummaryDoneFile, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));\n     } catch (IOException e) {\n       LOG.info(\"Unable to write out JobSummaryInfo to [\"\n           + qualifiedSummaryDoneFile + \"]\", e);\n       throw e;\n     }\n \n     try {\n \n       // Move historyFile to Done Folder.\n       Path qualifiedDoneFile \u003d null;\n       if (mi.getHistoryFile() !\u003d null) {\n         Path historyFile \u003d mi.getHistoryFile();\n         Path qualifiedLogFile \u003d stagingDirFS.makeQualified(historyFile);\n         int jobNameLimit \u003d\n             getConfig().getInt(JHAdminConfig.MR_HS_JOBNAME_LIMIT,\n             JHAdminConfig.DEFAULT_MR_HS_JOBNAME_LIMIT);\n         String doneJobHistoryFileName \u003d\n             getTempFileName(FileNameIndexUtils.getDoneFileName(mi\n                 .getJobIndexInfo(), jobNameLimit));\n         qualifiedDoneFile \u003d\n             doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                 doneJobHistoryFileName));\n-        moveToDoneNow(qualifiedLogFile, qualifiedDoneFile);\n+        if(moveToDoneNow(qualifiedLogFile, qualifiedDoneFile)) {\n+          String historyUrl \u003d MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(\n+              getConfig(), context.getApplicationID());\n+          context.setHistoryUrl(historyUrl);\n+          LOG.info(\"Set historyUrl to \" + historyUrl);\n+        }\n       }\n \n       // Move confFile to Done Folder\n       Path qualifiedConfDoneFile \u003d null;\n       if (mi.getConfFile() !\u003d null) {\n         Path confFile \u003d mi.getConfFile();\n         Path qualifiedConfFile \u003d stagingDirFS.makeQualified(confFile);\n         String doneConfFileName \u003d\n             getTempFileName(JobHistoryUtils\n                 .getIntermediateConfFileName(jobId));\n         qualifiedConfDoneFile \u003d\n             doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                 doneConfFileName));\n         moveToDoneNow(qualifiedConfFile, qualifiedConfDoneFile);\n       }\n       \n       moveTmpToDone(qualifiedSummaryDoneFile);\n       moveTmpToDone(qualifiedConfDoneFile);\n       moveTmpToDone(qualifiedDoneFile);\n \n     } catch (IOException e) {\n       LOG.error(\"Error closing writer for JobID: \" + jobId);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processDoneFiles(JobId jobId) throws IOException {\n\n    final MetaInfo mi \u003d fileMap.get(jobId);\n    if (mi \u003d\u003d null) {\n      throw new IOException(\"No MetaInfo found for JobId: [\" + jobId + \"]\");\n    }\n\n    if (mi.getHistoryFile() \u003d\u003d null) {\n      LOG.warn(\"No file for job-history with \" + jobId + \" found in cache!\");\n    }\n    if (mi.getConfFile() \u003d\u003d null) {\n      LOG.warn(\"No file for jobconf with \" + jobId + \" found in cache!\");\n    }\n      \n    // Writing out the summary file.\n    // TODO JH enhancement - reuse this file to store additional indexing info\n    // like ACLs, etc. JHServer can use HDFS append to build an index file\n    // with more info than is available via the filename.\n    Path qualifiedSummaryDoneFile \u003d null;\n    FSDataOutputStream summaryFileOut \u003d null;\n    try {\n      String doneSummaryFileName \u003d getTempFileName(JobHistoryUtils\n          .getIntermediateSummaryFileName(jobId));\n      qualifiedSummaryDoneFile \u003d doneDirFS.makeQualified(new Path(\n          doneDirPrefixPath, doneSummaryFileName));\n      summaryFileOut \u003d doneDirFS.create(qualifiedSummaryDoneFile, true);\n      summaryFileOut.writeUTF(mi.getJobSummary().getJobSummaryString());\n      summaryFileOut.close();\n      doneDirFS.setPermission(qualifiedSummaryDoneFile, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));\n    } catch (IOException e) {\n      LOG.info(\"Unable to write out JobSummaryInfo to [\"\n          + qualifiedSummaryDoneFile + \"]\", e);\n      throw e;\n    }\n\n    try {\n\n      // Move historyFile to Done Folder.\n      Path qualifiedDoneFile \u003d null;\n      if (mi.getHistoryFile() !\u003d null) {\n        Path historyFile \u003d mi.getHistoryFile();\n        Path qualifiedLogFile \u003d stagingDirFS.makeQualified(historyFile);\n        int jobNameLimit \u003d\n            getConfig().getInt(JHAdminConfig.MR_HS_JOBNAME_LIMIT,\n            JHAdminConfig.DEFAULT_MR_HS_JOBNAME_LIMIT);\n        String doneJobHistoryFileName \u003d\n            getTempFileName(FileNameIndexUtils.getDoneFileName(mi\n                .getJobIndexInfo(), jobNameLimit));\n        qualifiedDoneFile \u003d\n            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                doneJobHistoryFileName));\n        if(moveToDoneNow(qualifiedLogFile, qualifiedDoneFile)) {\n          String historyUrl \u003d MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(\n              getConfig(), context.getApplicationID());\n          context.setHistoryUrl(historyUrl);\n          LOG.info(\"Set historyUrl to \" + historyUrl);\n        }\n      }\n\n      // Move confFile to Done Folder\n      Path qualifiedConfDoneFile \u003d null;\n      if (mi.getConfFile() !\u003d null) {\n        Path confFile \u003d mi.getConfFile();\n        Path qualifiedConfFile \u003d stagingDirFS.makeQualified(confFile);\n        String doneConfFileName \u003d\n            getTempFileName(JobHistoryUtils\n                .getIntermediateConfFileName(jobId));\n        qualifiedConfDoneFile \u003d\n            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                doneConfFileName));\n        moveToDoneNow(qualifiedConfFile, qualifiedConfDoneFile);\n      }\n      \n      moveTmpToDone(qualifiedSummaryDoneFile);\n      moveTmpToDone(qualifiedConfDoneFile);\n      moveTmpToDone(qualifiedDoneFile);\n\n    } catch (IOException e) {\n      LOG.error(\"Error closing writer for JobID: \" + jobId);\n      throw e;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "6785661e554114a4613b5fe7dabec9bfa80c41d9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6350. JobHistory doesn\u0027t support fully-functional search.\nContributed by Siqi Li.\n",
      "commitDate": "10/06/15 12:10 AM",
      "commitName": "6785661e554114a4613b5fe7dabec9bfa80c41d9",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "04/05/15 1:39 PM",
      "commitNameOld": "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 36.44,
      "commitsBetweenForRepo": 374,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,78 @@\n   protected void processDoneFiles(JobId jobId) throws IOException {\n \n     final MetaInfo mi \u003d fileMap.get(jobId);\n     if (mi \u003d\u003d null) {\n       throw new IOException(\"No MetaInfo found for JobId: [\" + jobId + \"]\");\n     }\n \n     if (mi.getHistoryFile() \u003d\u003d null) {\n       LOG.warn(\"No file for job-history with \" + jobId + \" found in cache!\");\n     }\n     if (mi.getConfFile() \u003d\u003d null) {\n       LOG.warn(\"No file for jobconf with \" + jobId + \" found in cache!\");\n     }\n       \n     // Writing out the summary file.\n     // TODO JH enhancement - reuse this file to store additional indexing info\n     // like ACLs, etc. JHServer can use HDFS append to build an index file\n     // with more info than is available via the filename.\n     Path qualifiedSummaryDoneFile \u003d null;\n     FSDataOutputStream summaryFileOut \u003d null;\n     try {\n       String doneSummaryFileName \u003d getTempFileName(JobHistoryUtils\n           .getIntermediateSummaryFileName(jobId));\n       qualifiedSummaryDoneFile \u003d doneDirFS.makeQualified(new Path(\n           doneDirPrefixPath, doneSummaryFileName));\n       summaryFileOut \u003d doneDirFS.create(qualifiedSummaryDoneFile, true);\n       summaryFileOut.writeUTF(mi.getJobSummary().getJobSummaryString());\n       summaryFileOut.close();\n       doneDirFS.setPermission(qualifiedSummaryDoneFile, new FsPermission(\n           JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));\n     } catch (IOException e) {\n       LOG.info(\"Unable to write out JobSummaryInfo to [\"\n           + qualifiedSummaryDoneFile + \"]\", e);\n       throw e;\n     }\n \n     try {\n \n       // Move historyFile to Done Folder.\n       Path qualifiedDoneFile \u003d null;\n       if (mi.getHistoryFile() !\u003d null) {\n         Path historyFile \u003d mi.getHistoryFile();\n         Path qualifiedLogFile \u003d stagingDirFS.makeQualified(historyFile);\n+        int jobNameLimit \u003d\n+            getConfig().getInt(JHAdminConfig.MR_HS_JOBNAME_LIMIT,\n+            JHAdminConfig.DEFAULT_MR_HS_JOBNAME_LIMIT);\n         String doneJobHistoryFileName \u003d\n             getTempFileName(FileNameIndexUtils.getDoneFileName(mi\n-                .getJobIndexInfo()));\n+                .getJobIndexInfo(), jobNameLimit));\n         qualifiedDoneFile \u003d\n             doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                 doneJobHistoryFileName));\n         moveToDoneNow(qualifiedLogFile, qualifiedDoneFile);\n       }\n \n       // Move confFile to Done Folder\n       Path qualifiedConfDoneFile \u003d null;\n       if (mi.getConfFile() !\u003d null) {\n         Path confFile \u003d mi.getConfFile();\n         Path qualifiedConfFile \u003d stagingDirFS.makeQualified(confFile);\n         String doneConfFileName \u003d\n             getTempFileName(JobHistoryUtils\n                 .getIntermediateConfFileName(jobId));\n         qualifiedConfDoneFile \u003d\n             doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                 doneConfFileName));\n         moveToDoneNow(qualifiedConfFile, qualifiedConfDoneFile);\n       }\n       \n       moveTmpToDone(qualifiedSummaryDoneFile);\n       moveTmpToDone(qualifiedConfDoneFile);\n       moveTmpToDone(qualifiedDoneFile);\n \n     } catch (IOException e) {\n       LOG.error(\"Error closing writer for JobID: \" + jobId);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processDoneFiles(JobId jobId) throws IOException {\n\n    final MetaInfo mi \u003d fileMap.get(jobId);\n    if (mi \u003d\u003d null) {\n      throw new IOException(\"No MetaInfo found for JobId: [\" + jobId + \"]\");\n    }\n\n    if (mi.getHistoryFile() \u003d\u003d null) {\n      LOG.warn(\"No file for job-history with \" + jobId + \" found in cache!\");\n    }\n    if (mi.getConfFile() \u003d\u003d null) {\n      LOG.warn(\"No file for jobconf with \" + jobId + \" found in cache!\");\n    }\n      \n    // Writing out the summary file.\n    // TODO JH enhancement - reuse this file to store additional indexing info\n    // like ACLs, etc. JHServer can use HDFS append to build an index file\n    // with more info than is available via the filename.\n    Path qualifiedSummaryDoneFile \u003d null;\n    FSDataOutputStream summaryFileOut \u003d null;\n    try {\n      String doneSummaryFileName \u003d getTempFileName(JobHistoryUtils\n          .getIntermediateSummaryFileName(jobId));\n      qualifiedSummaryDoneFile \u003d doneDirFS.makeQualified(new Path(\n          doneDirPrefixPath, doneSummaryFileName));\n      summaryFileOut \u003d doneDirFS.create(qualifiedSummaryDoneFile, true);\n      summaryFileOut.writeUTF(mi.getJobSummary().getJobSummaryString());\n      summaryFileOut.close();\n      doneDirFS.setPermission(qualifiedSummaryDoneFile, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));\n    } catch (IOException e) {\n      LOG.info(\"Unable to write out JobSummaryInfo to [\"\n          + qualifiedSummaryDoneFile + \"]\", e);\n      throw e;\n    }\n\n    try {\n\n      // Move historyFile to Done Folder.\n      Path qualifiedDoneFile \u003d null;\n      if (mi.getHistoryFile() !\u003d null) {\n        Path historyFile \u003d mi.getHistoryFile();\n        Path qualifiedLogFile \u003d stagingDirFS.makeQualified(historyFile);\n        int jobNameLimit \u003d\n            getConfig().getInt(JHAdminConfig.MR_HS_JOBNAME_LIMIT,\n            JHAdminConfig.DEFAULT_MR_HS_JOBNAME_LIMIT);\n        String doneJobHistoryFileName \u003d\n            getTempFileName(FileNameIndexUtils.getDoneFileName(mi\n                .getJobIndexInfo(), jobNameLimit));\n        qualifiedDoneFile \u003d\n            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                doneJobHistoryFileName));\n        moveToDoneNow(qualifiedLogFile, qualifiedDoneFile);\n      }\n\n      // Move confFile to Done Folder\n      Path qualifiedConfDoneFile \u003d null;\n      if (mi.getConfFile() !\u003d null) {\n        Path confFile \u003d mi.getConfFile();\n        Path qualifiedConfFile \u003d stagingDirFS.makeQualified(confFile);\n        String doneConfFileName \u003d\n            getTempFileName(JobHistoryUtils\n                .getIntermediateConfFileName(jobId));\n        qualifiedConfDoneFile \u003d\n            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                doneConfFileName));\n        moveToDoneNow(qualifiedConfFile, qualifiedConfDoneFile);\n      }\n      \n      moveTmpToDone(qualifiedSummaryDoneFile);\n      moveTmpToDone(qualifiedConfDoneFile);\n      moveTmpToDone(qualifiedDoneFile);\n\n    } catch (IOException e) {\n      LOG.error(\"Error closing writer for JobID: \" + jobId);\n      throw e;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5466. Changed MR AM to not promote history files of intermediate AMs in case they are exiting because of errors and thus help history-server pick up the right history file for the last successful AM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 11:16 AM",
      "commitName": "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,75 @@\n+  protected void processDoneFiles(JobId jobId) throws IOException {\n+\n+    final MetaInfo mi \u003d fileMap.get(jobId);\n+    if (mi \u003d\u003d null) {\n+      throw new IOException(\"No MetaInfo found for JobId: [\" + jobId + \"]\");\n+    }\n+\n+    if (mi.getHistoryFile() \u003d\u003d null) {\n+      LOG.warn(\"No file for job-history with \" + jobId + \" found in cache!\");\n+    }\n+    if (mi.getConfFile() \u003d\u003d null) {\n+      LOG.warn(\"No file for jobconf with \" + jobId + \" found in cache!\");\n+    }\n+      \n+    // Writing out the summary file.\n+    // TODO JH enhancement - reuse this file to store additional indexing info\n+    // like ACLs, etc. JHServer can use HDFS append to build an index file\n+    // with more info than is available via the filename.\n+    Path qualifiedSummaryDoneFile \u003d null;\n+    FSDataOutputStream summaryFileOut \u003d null;\n+    try {\n+      String doneSummaryFileName \u003d getTempFileName(JobHistoryUtils\n+          .getIntermediateSummaryFileName(jobId));\n+      qualifiedSummaryDoneFile \u003d doneDirFS.makeQualified(new Path(\n+          doneDirPrefixPath, doneSummaryFileName));\n+      summaryFileOut \u003d doneDirFS.create(qualifiedSummaryDoneFile, true);\n+      summaryFileOut.writeUTF(mi.getJobSummary().getJobSummaryString());\n+      summaryFileOut.close();\n+      doneDirFS.setPermission(qualifiedSummaryDoneFile, new FsPermission(\n+          JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));\n+    } catch (IOException e) {\n+      LOG.info(\"Unable to write out JobSummaryInfo to [\"\n+          + qualifiedSummaryDoneFile + \"]\", e);\n+      throw e;\n+    }\n+\n+    try {\n+\n+      // Move historyFile to Done Folder.\n+      Path qualifiedDoneFile \u003d null;\n+      if (mi.getHistoryFile() !\u003d null) {\n+        Path historyFile \u003d mi.getHistoryFile();\n+        Path qualifiedLogFile \u003d stagingDirFS.makeQualified(historyFile);\n+        String doneJobHistoryFileName \u003d\n+            getTempFileName(FileNameIndexUtils.getDoneFileName(mi\n+                .getJobIndexInfo()));\n+        qualifiedDoneFile \u003d\n+            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n+                doneJobHistoryFileName));\n+        moveToDoneNow(qualifiedLogFile, qualifiedDoneFile);\n+      }\n+\n+      // Move confFile to Done Folder\n+      Path qualifiedConfDoneFile \u003d null;\n+      if (mi.getConfFile() !\u003d null) {\n+        Path confFile \u003d mi.getConfFile();\n+        Path qualifiedConfFile \u003d stagingDirFS.makeQualified(confFile);\n+        String doneConfFileName \u003d\n+            getTempFileName(JobHistoryUtils\n+                .getIntermediateConfFileName(jobId));\n+        qualifiedConfDoneFile \u003d\n+            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n+                doneConfFileName));\n+        moveToDoneNow(qualifiedConfFile, qualifiedConfDoneFile);\n+      }\n+      \n+      moveTmpToDone(qualifiedSummaryDoneFile);\n+      moveTmpToDone(qualifiedConfDoneFile);\n+      moveTmpToDone(qualifiedDoneFile);\n+\n+    } catch (IOException e) {\n+      LOG.error(\"Error closing writer for JobID: \" + jobId);\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processDoneFiles(JobId jobId) throws IOException {\n\n    final MetaInfo mi \u003d fileMap.get(jobId);\n    if (mi \u003d\u003d null) {\n      throw new IOException(\"No MetaInfo found for JobId: [\" + jobId + \"]\");\n    }\n\n    if (mi.getHistoryFile() \u003d\u003d null) {\n      LOG.warn(\"No file for job-history with \" + jobId + \" found in cache!\");\n    }\n    if (mi.getConfFile() \u003d\u003d null) {\n      LOG.warn(\"No file for jobconf with \" + jobId + \" found in cache!\");\n    }\n      \n    // Writing out the summary file.\n    // TODO JH enhancement - reuse this file to store additional indexing info\n    // like ACLs, etc. JHServer can use HDFS append to build an index file\n    // with more info than is available via the filename.\n    Path qualifiedSummaryDoneFile \u003d null;\n    FSDataOutputStream summaryFileOut \u003d null;\n    try {\n      String doneSummaryFileName \u003d getTempFileName(JobHistoryUtils\n          .getIntermediateSummaryFileName(jobId));\n      qualifiedSummaryDoneFile \u003d doneDirFS.makeQualified(new Path(\n          doneDirPrefixPath, doneSummaryFileName));\n      summaryFileOut \u003d doneDirFS.create(qualifiedSummaryDoneFile, true);\n      summaryFileOut.writeUTF(mi.getJobSummary().getJobSummaryString());\n      summaryFileOut.close();\n      doneDirFS.setPermission(qualifiedSummaryDoneFile, new FsPermission(\n          JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));\n    } catch (IOException e) {\n      LOG.info(\"Unable to write out JobSummaryInfo to [\"\n          + qualifiedSummaryDoneFile + \"]\", e);\n      throw e;\n    }\n\n    try {\n\n      // Move historyFile to Done Folder.\n      Path qualifiedDoneFile \u003d null;\n      if (mi.getHistoryFile() !\u003d null) {\n        Path historyFile \u003d mi.getHistoryFile();\n        Path qualifiedLogFile \u003d stagingDirFS.makeQualified(historyFile);\n        String doneJobHistoryFileName \u003d\n            getTempFileName(FileNameIndexUtils.getDoneFileName(mi\n                .getJobIndexInfo()));\n        qualifiedDoneFile \u003d\n            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                doneJobHistoryFileName));\n        moveToDoneNow(qualifiedLogFile, qualifiedDoneFile);\n      }\n\n      // Move confFile to Done Folder\n      Path qualifiedConfDoneFile \u003d null;\n      if (mi.getConfFile() !\u003d null) {\n        Path confFile \u003d mi.getConfFile();\n        Path qualifiedConfFile \u003d stagingDirFS.makeQualified(confFile);\n        String doneConfFileName \u003d\n            getTempFileName(JobHistoryUtils\n                .getIntermediateConfFileName(jobId));\n        qualifiedConfDoneFile \u003d\n            doneDirFS.makeQualified(new Path(doneDirPrefixPath,\n                doneConfFileName));\n        moveToDoneNow(qualifiedConfFile, qualifiedConfDoneFile);\n      }\n      \n      moveTmpToDone(qualifiedSummaryDoneFile);\n      moveTmpToDone(qualifiedConfDoneFile);\n      moveTmpToDone(qualifiedDoneFile);\n\n    } catch (IOException e) {\n      LOG.error(\"Error closing writer for JobID: \" + jobId);\n      throw e;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java"
    }
  }
}