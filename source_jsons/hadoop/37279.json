{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "shift",
  "functionId": "shift___delta-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 517,
  "functionEndLine": 536,
  "numCommitsSeen": 11,
  "timeTaken": 1152,
  "changeHistory": [
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0"
  ],
  "changeHistoryShort": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,20 @@\n+  public void shift(long delta) {\n+    writeLock.lock();\n+    try {\n+      TreeMap\u003cLong, Resource\u003e newCum \u003d new TreeMap\u003c\u003e();\n+      long start;\n+      for (Map.Entry\u003cLong, Resource\u003e entry : cumulativeCapacity.entrySet()) {\n+        if (delta \u003e 0) {\n+          start \u003d (entry.getKey() \u003d\u003d Long.MAX_VALUE) ? Long.MAX_VALUE\n+              : entry.getKey() + delta;\n+        } else {\n+          start \u003d (entry.getKey() \u003d\u003d Long.MIN_VALUE) ? Long.MIN_VALUE\n+              : entry.getKey() + delta;\n+        }\n+        newCum.put(start, entry.getValue());\n+      }\n+      cumulativeCapacity \u003d newCum;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void shift(long delta) {\n    writeLock.lock();\n    try {\n      TreeMap\u003cLong, Resource\u003e newCum \u003d new TreeMap\u003c\u003e();\n      long start;\n      for (Map.Entry\u003cLong, Resource\u003e entry : cumulativeCapacity.entrySet()) {\n        if (delta \u003e 0) {\n          start \u003d (entry.getKey() \u003d\u003d Long.MAX_VALUE) ? Long.MAX_VALUE\n              : entry.getKey() + delta;\n        } else {\n          start \u003d (entry.getKey() \u003d\u003d Long.MIN_VALUE) ? Long.MIN_VALUE\n              : entry.getKey() + delta;\n        }\n        newCum.put(start, entry.getValue());\n      }\n      cumulativeCapacity \u003d newCum;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}