{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProtocolProxy.java",
  "functionName": "fetchServerMethods",
  "functionId": "fetchServerMethods___method-Method",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java",
  "functionStartLine": 57,
  "functionEndLine": 78,
  "numCommitsSeen": 9,
  "timeTaken": 951,
  "changeHistory": [
    "65200998c01b17e017d1814e8b1f4d82ac334a23",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "78a7b9768dcde23face399d9924f6168e4b1c1a8"
  ],
  "changeHistoryShort": {
    "65200998c01b17e017d1814e8b1f4d82ac334a23": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "78a7b9768dcde23face399d9924f6168e4b1c1a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65200998c01b17e017d1814e8b1f4d82ac334a23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/11 12:44 PM",
      "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 101.85,
      "commitsBetweenForRepo": 693,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,22 @@\n   private void fetchServerMethods(Method method) throws IOException {\n     long clientVersion;\n-    try {\n-      Field versionField \u003d method.getDeclaringClass().getField(\"versionID\");\n-      versionField.setAccessible(true);\n-      clientVersion \u003d versionField.getLong(method.getDeclaringClass());\n-    } catch (NoSuchFieldException ex) {\n-      throw new RuntimeException(ex);\n-    } catch (IllegalAccessException ex) {\n-      throw new RuntimeException(ex);\n-    }\n+    clientVersion \u003d RPC.getProtocolVersion(method.getDeclaringClass());\n     int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n         .getDeclaringClass().getMethods());\n     ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n-        .getProtocolSignature(protocol.getName(), clientVersion,\n+        .getProtocolSignature(RPC.getProtocolName(protocol), clientVersion,\n             clientMethodsHash);\n     long serverVersion \u003d serverInfo.getVersion();\n     if (serverVersion !\u003d clientVersion) {\n       throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n           serverVersion);\n     }\n     int[] serverMethodsCodes \u003d serverInfo.getMethods();\n     if (serverMethodsCodes !\u003d null) {\n       serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n       for (int m : serverMethodsCodes) {\n         this.serverMethods.add(Integer.valueOf(m));\n       }\n     }\n     serverMethodsFetched \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void fetchServerMethods(Method method) throws IOException {\n    long clientVersion;\n    clientVersion \u003d RPC.getProtocolVersion(method.getDeclaringClass());\n    int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n        .getDeclaringClass().getMethods());\n    ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n        .getProtocolSignature(RPC.getProtocolName(protocol), clientVersion,\n            clientMethodsHash);\n    long serverVersion \u003d serverInfo.getVersion();\n    if (serverVersion !\u003d clientVersion) {\n      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n          serverVersion);\n    }\n    int[] serverMethodsCodes \u003d serverInfo.getMethods();\n    if (serverMethodsCodes !\u003d null) {\n      serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n      for (int m : serverMethodsCodes) {\n        this.serverMethods.add(Integer.valueOf(m));\n      }\n    }\n    serverMethodsFetched \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void fetchServerMethods(Method method) throws IOException {\n    long clientVersion;\n    try {\n      Field versionField \u003d method.getDeclaringClass().getField(\"versionID\");\n      versionField.setAccessible(true);\n      clientVersion \u003d versionField.getLong(method.getDeclaringClass());\n    } catch (NoSuchFieldException ex) {\n      throw new RuntimeException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new RuntimeException(ex);\n    }\n    int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n        .getDeclaringClass().getMethods());\n    ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n        .getProtocolSignature(protocol.getName(), clientVersion,\n            clientMethodsHash);\n    long serverVersion \u003d serverInfo.getVersion();\n    if (serverVersion !\u003d clientVersion) {\n      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n          serverVersion);\n    }\n    int[] serverMethodsCodes \u003d serverInfo.getMethods();\n    if (serverMethodsCodes !\u003d null) {\n      serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n      for (int m : serverMethodsCodes) {\n        this.serverMethods.add(Integer.valueOf(m));\n      }\n    }\n    serverMethodsFetched \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void fetchServerMethods(Method method) throws IOException {\n    long clientVersion;\n    try {\n      Field versionField \u003d method.getDeclaringClass().getField(\"versionID\");\n      versionField.setAccessible(true);\n      clientVersion \u003d versionField.getLong(method.getDeclaringClass());\n    } catch (NoSuchFieldException ex) {\n      throw new RuntimeException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new RuntimeException(ex);\n    }\n    int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n        .getDeclaringClass().getMethods());\n    ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n        .getProtocolSignature(protocol.getName(), clientVersion,\n            clientMethodsHash);\n    long serverVersion \u003d serverInfo.getVersion();\n    if (serverVersion !\u003d clientVersion) {\n      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n          serverVersion);\n    }\n    int[] serverMethodsCodes \u003d serverInfo.getMethods();\n    if (serverMethodsCodes !\u003d null) {\n      serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n      for (int m : serverMethodsCodes) {\n        this.serverMethods.add(Integer.valueOf(m));\n      }\n    }\n    serverMethodsFetched \u003d true;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/ProtocolProxy.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtocolProxy.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void fetchServerMethods(Method method) throws IOException {\n    long clientVersion;\n    try {\n      Field versionField \u003d method.getDeclaringClass().getField(\"versionID\");\n      versionField.setAccessible(true);\n      clientVersion \u003d versionField.getLong(method.getDeclaringClass());\n    } catch (NoSuchFieldException ex) {\n      throw new RuntimeException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new RuntimeException(ex);\n    }\n    int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n        .getDeclaringClass().getMethods());\n    ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n        .getProtocolSignature(protocol.getName(), clientVersion,\n            clientMethodsHash);\n    long serverVersion \u003d serverInfo.getVersion();\n    if (serverVersion !\u003d clientVersion) {\n      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n          serverVersion);\n    }\n    int[] serverMethodsCodes \u003d serverInfo.getMethods();\n    if (serverMethodsCodes !\u003d null) {\n      serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n      for (int m : serverMethodsCodes) {\n        this.serverMethods.add(Integer.valueOf(m));\n      }\n    }\n    serverMethodsFetched \u003d true;\n  }",
      "path": "common/src/java/org/apache/hadoop/ipc/ProtocolProxy.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/ProtocolProxy.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/ProtocolProxy.java"
      }
    },
    "78a7b9768dcde23face399d9924f6168e4b1c1a8": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7227. Remove protocol version check at proxy creation in Hadoop RPC. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099284 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/11 3:16 PM",
      "commitName": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,30 @@\n+  private void fetchServerMethods(Method method) throws IOException {\n+    long clientVersion;\n+    try {\n+      Field versionField \u003d method.getDeclaringClass().getField(\"versionID\");\n+      versionField.setAccessible(true);\n+      clientVersion \u003d versionField.getLong(method.getDeclaringClass());\n+    } catch (NoSuchFieldException ex) {\n+      throw new RuntimeException(ex);\n+    } catch (IllegalAccessException ex) {\n+      throw new RuntimeException(ex);\n+    }\n+    int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n+        .getDeclaringClass().getMethods());\n+    ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n+        .getProtocolSignature(protocol.getName(), clientVersion,\n+            clientMethodsHash);\n+    long serverVersion \u003d serverInfo.getVersion();\n+    if (serverVersion !\u003d clientVersion) {\n+      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n+          serverVersion);\n+    }\n+    int[] serverMethodsCodes \u003d serverInfo.getMethods();\n+    if (serverMethodsCodes !\u003d null) {\n+      serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n+      for (int m : serverMethodsCodes) {\n+        this.serverMethods.add(Integer.valueOf(m));\n+      }\n+    }\n+    serverMethodsFetched \u003d true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void fetchServerMethods(Method method) throws IOException {\n    long clientVersion;\n    try {\n      Field versionField \u003d method.getDeclaringClass().getField(\"versionID\");\n      versionField.setAccessible(true);\n      clientVersion \u003d versionField.getLong(method.getDeclaringClass());\n    } catch (NoSuchFieldException ex) {\n      throw new RuntimeException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new RuntimeException(ex);\n    }\n    int clientMethodsHash \u003d ProtocolSignature.getFingerprint(method\n        .getDeclaringClass().getMethods());\n    ProtocolSignature serverInfo \u003d ((VersionedProtocol) proxy)\n        .getProtocolSignature(protocol.getName(), clientVersion,\n            clientMethodsHash);\n    long serverVersion \u003d serverInfo.getVersion();\n    if (serverVersion !\u003d clientVersion) {\n      throw new RPC.VersionMismatch(protocol.getName(), clientVersion,\n          serverVersion);\n    }\n    int[] serverMethodsCodes \u003d serverInfo.getMethods();\n    if (serverMethodsCodes !\u003d null) {\n      serverMethods \u003d new HashSet\u003cInteger\u003e(serverMethodsCodes.length);\n      for (int m : serverMethodsCodes) {\n        this.serverMethods.add(Integer.valueOf(m));\n      }\n    }\n    serverMethodsFetched \u003d true;\n  }",
      "path": "src/java/org/apache/hadoop/ipc/ProtocolProxy.java"
    }
  }
}