{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerConfiguration.java",
  "functionName": "getMultiNodesSortingAlgorithmPolicy",
  "functionId": "getMultiNodesSortingAlgorithmPolicy___queue-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
  "functionStartLine": 2237,
  "functionEndLine": 2263,
  "numCommitsSeen": 90,
  "timeTaken": 2270,
  "changeHistory": [
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181"
  ],
  "changeHistoryShort": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,27 @@\n+  public String getMultiNodesSortingAlgorithmPolicy(\n+      String queue) {\n+\n+    String policyName \u003d get(\n+        getQueuePrefix(queue) + \"multi-node-sorting.policy\");\n+\n+    if (policyName \u003d\u003d null) {\n+      policyName \u003d get(MULTI_NODE_SORTING_POLICY_NAME);\n+    }\n+\n+    // If node sorting policy is not configured in queue and in cluster level,\n+    // it is been assumed that this queue is not enabled with multi-node lookup.\n+    if (policyName \u003d\u003d null || policyName.isEmpty()) {\n+      return null;\n+    }\n+\n+    String policyClassName \u003d get(MULTI_NODE_SORTING_POLICY_NAME + DOT\n+        + policyName.trim() + DOT + \"class\");\n+\n+    if (policyClassName \u003d\u003d null || policyClassName.isEmpty()) {\n+      throw new YarnRuntimeException(\n+          policyName.trim() + \" Class is not configured or not an instance of \"\n+              + MultiNodeLookupPolicy.class.getCanonicalName());\n+    }\n+\n+    return normalizePolicyName(policyClassName.trim());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getMultiNodesSortingAlgorithmPolicy(\n      String queue) {\n\n    String policyName \u003d get(\n        getQueuePrefix(queue) + \"multi-node-sorting.policy\");\n\n    if (policyName \u003d\u003d null) {\n      policyName \u003d get(MULTI_NODE_SORTING_POLICY_NAME);\n    }\n\n    // If node sorting policy is not configured in queue and in cluster level,\n    // it is been assumed that this queue is not enabled with multi-node lookup.\n    if (policyName \u003d\u003d null || policyName.isEmpty()) {\n      return null;\n    }\n\n    String policyClassName \u003d get(MULTI_NODE_SORTING_POLICY_NAME + DOT\n        + policyName.trim() + DOT + \"class\");\n\n    if (policyClassName \u003d\u003d null || policyClassName.isEmpty()) {\n      throw new YarnRuntimeException(\n          policyName.trim() + \" Class is not configured or not an instance of \"\n              + MultiNodeLookupPolicy.class.getCanonicalName());\n    }\n\n    return normalizePolicyName(policyClassName.trim());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java"
    }
  }
}