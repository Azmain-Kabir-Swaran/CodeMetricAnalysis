{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PrivilegedOperationExecutor.java",
  "functionName": "executePrivilegedInteractiveOperation",
  "functionId": "executePrivilegedInteractiveOperation___prefixCommands-List__String____operation-PrivilegedOperation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java",
  "functionStartLine": 219,
  "functionEndLine": 263,
  "numCommitsSeen": 11,
  "timeTaken": 1789,
  "changeHistory": [
    "1f9c4f32e842529be5980e395587f135452372bb"
  ],
  "changeHistoryShort": {
    "1f9c4f32e842529be5980e395587f135452372bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f9c4f32e842529be5980e395587f135452372bb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8776. Implement Container Exec feature in LinuxContainerExecutor. Contributed by Eric Yang\n",
      "commitDate": "12/11/18 10:42 AM",
      "commitName": "1f9c4f32e842529be5980e395587f135452372bb",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,45 @@\n+  public IOStreamPair executePrivilegedInteractiveOperation(\n+      List\u003cString\u003e prefixCommands, PrivilegedOperation operation)\n+      throws PrivilegedOperationException, InterruptedException {\n+    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand(\n+        prefixCommands, operation);\n+    ProcessBuilder pb \u003d new ProcessBuilder(fullCommandArray);\n+    OutputStream stdin;\n+    InputStream stdout;\n+    try {\n+      pb.redirectErrorStream(true);\n+      Process p \u003d pb.start();\n+      stdin \u003d p.getOutputStream();\n+      stdout \u003d p.getInputStream();\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"command array:\");\n+        LOG.debug(Arrays.toString(fullCommandArray));\n+      }\n+    } catch (ExitCodeException e) {\n+      if (operation.isFailureLoggingEnabled()) {\n+        StringBuilder logBuilder \u003d new StringBuilder(\n+            \"Interactive Shell execution returned exit code: \")\n+            .append(e.getExitCode())\n+            .append(\". Privileged Interactive Operation Stderr: \")\n+            .append(System.lineSeparator())\n+            .append(e.getMessage())\n+            .append(System.lineSeparator());\n+        logBuilder.append(\"Full command array for failed execution: \")\n+            .append(System.lineSeparator());\n+        logBuilder.append(Arrays.toString(fullCommandArray));\n+\n+        LOG.warn(logBuilder.toString());\n+      }\n+\n+      //stderr from shell executor seems to be stuffed into the exception\n+      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n+      throw new PrivilegedOperationException(e, e.getExitCode(),\n+          pb.redirectError().toString(), e.getMessage());\n+    } catch (IOException e) {\n+      LOG.warn(\"IOException executing command: \", e);\n+      throw new PrivilegedOperationException(e);\n+    }\n+\n+    return new IOStreamPair(stdout, stdin);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public IOStreamPair executePrivilegedInteractiveOperation(\n      List\u003cString\u003e prefixCommands, PrivilegedOperation operation)\n      throws PrivilegedOperationException, InterruptedException {\n    String[] fullCommandArray \u003d getPrivilegedOperationExecutionCommand(\n        prefixCommands, operation);\n    ProcessBuilder pb \u003d new ProcessBuilder(fullCommandArray);\n    OutputStream stdin;\n    InputStream stdout;\n    try {\n      pb.redirectErrorStream(true);\n      Process p \u003d pb.start();\n      stdin \u003d p.getOutputStream();\n      stdout \u003d p.getInputStream();\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"command array:\");\n        LOG.debug(Arrays.toString(fullCommandArray));\n      }\n    } catch (ExitCodeException e) {\n      if (operation.isFailureLoggingEnabled()) {\n        StringBuilder logBuilder \u003d new StringBuilder(\n            \"Interactive Shell execution returned exit code: \")\n            .append(e.getExitCode())\n            .append(\". Privileged Interactive Operation Stderr: \")\n            .append(System.lineSeparator())\n            .append(e.getMessage())\n            .append(System.lineSeparator());\n        logBuilder.append(\"Full command array for failed execution: \")\n            .append(System.lineSeparator());\n        logBuilder.append(Arrays.toString(fullCommandArray));\n\n        LOG.warn(logBuilder.toString());\n      }\n\n      //stderr from shell executor seems to be stuffed into the exception\n      //\u0027message\u0027 - so, we have to extract it and set it as the error out\n      throw new PrivilegedOperationException(e, e.getExitCode(),\n          pb.redirectError().toString(), e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(\"IOException executing command: \", e);\n      throw new PrivilegedOperationException(e);\n    }\n\n    return new IOStreamPair(stdout, stdin);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/privileged/PrivilegedOperationExecutor.java"
    }
  }
}