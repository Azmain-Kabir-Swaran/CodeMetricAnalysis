{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAttrOp.java",
  "functionName": "setReplication",
  "functionId": "setReplication___fsd-FSDirectory__pc-FSPermissionChecker__bm-BlockManager__src-String__replication-short(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
  "functionStartLine": 126,
  "functionEndLine": 148,
  "numCommitsSeen": 561,
  "timeTaken": 12604,
  "changeHistory": [
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "48b9d5fd2a96728b1118be217ca597c4098e99ca",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "745d04be59accf80feda0ad38efcc74ba362f2ca",
    "7e091de1366f4b57b5433bc19d738199dc05313d",
    "6e3fcffe291faec40fa9214f4880a35a952836c4",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "c95b878abf313507666ea018f9e6033c4c166e10"
  ],
  "changeHistoryShort": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "745d04be59accf80feda0ad38efcc74ba362f2ca": "Ybodychange",
    "7e091de1366f4b57b5433bc19d738199dc05313d": "Ybodychange",
    "6e3fcffe291faec40fa9214f4880a35a952836c4": "Ybodychange",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": "Ybodychange",
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ybodychange",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange"
  },
  "changeHistoryDetails": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "20/12/17 8:55 AM",
          "commitNameOld": "a78db9919065d06ced8122229530f44cc7369857",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 64.11,
          "commitsBetweenForRepo": 331,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   static boolean setReplication(\n-      FSDirectory fsd, BlockManager bm, String src, final short replication)\n-      throws IOException {\n+      FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src,\n+      final short replication) throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.writeLock();\n     try {\n       final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                            replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src,\n      final short replication) throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    fsd.writeLock();\n    try {\n      final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, bm-BlockManager, src-String, replication-short(modifiers-final)]",
            "newValue": "[fsd-FSDirectory, pc-FSPermissionChecker, bm-BlockManager, src-String, replication-short(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "20/12/17 8:55 AM",
          "commitNameOld": "a78db9919065d06ced8122229530f44cc7369857",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 64.11,
          "commitsBetweenForRepo": 331,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   static boolean setReplication(\n-      FSDirectory fsd, BlockManager bm, String src, final short replication)\n-      throws IOException {\n+      FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src,\n+      final short replication) throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.writeLock();\n     try {\n       final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                            replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src,\n      final short replication) throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    fsd.writeLock();\n    try {\n      final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 2:33 PM",
      "commitNameOld": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.03,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.writeLock();\n     try {\n-      final INodesInPath iip \u003d fsd.resolvePathForWrite(pc, src);\n+      final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                            replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.writeLock();\n    try {\n      final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "48b9d5fd2a96728b1118be217ca597c4098e99ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10955. Pass IIP for FSDirAttr methods. Contributed by Daryn Sharp.\n",
      "commitDate": "06/10/16 2:33 PM",
      "commitName": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "23/09/16 10:37 AM",
      "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 13.16,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.writeLock();\n     try {\n       final INodesInPath iip \u003d fsd.resolvePathForWrite(pc, src);\n-      src \u003d iip.getPath();\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n-      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n+      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                            replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n-        fsd.getEditLog().logSetReplication(src, replication);\n+        fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.writeLock();\n    try {\n      final INodesInPath iip \u003d fsd.resolvePathForWrite(pc, src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, iip,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(iip.getPath(), replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.writeLock();\n     try {\n-      src \u003d fsd.resolvePath(pc, src);\n-      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+      final INodesInPath iip \u003d fsd.resolvePathForWrite(pc, src);\n+      src \u003d iip.getPath();\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n                                                            replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(src, replication);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.writeLock();\n    try {\n      final INodesInPath iip \u003d fsd.resolvePathForWrite(pc, src);\n      src \u003d iip.getPath();\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/03/16 6:35 PM",
      "commitNameOld": "27941a1811831e0f2144a2f463d807755cd850b2",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 165.8,
      "commitsBetweenForRepo": 1182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     fsd.writeLock();\n     try {\n-      src \u003d fsd.resolvePath(pc, src, pathComponents);\n+      src \u003d fsd.resolvePath(pc, src);\n       final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n                                                            replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(src, replication);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "745d04be59accf80feda0ad38efcc74ba362f2ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8823. Move replication factor into individual blocks. Contributed by Haohui Mai.\n",
      "commitDate": "22/08/15 12:09 AM",
      "commitName": "745d04be59accf80feda0ad38efcc74ba362f2ca",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/08/15 10:40 PM",
      "commitNameOld": "cc71ad80e184fc6e5043729e8cfcf6a62ca3e71f",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 16.06,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     fsd.writeLock();\n     try {\n       src \u003d fsd.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n-      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n       final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n-          replication, blockRepls);\n+                                                           replication);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(src, replication);\n-        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n                                                           replication);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "7e091de1366f4b57b5433bc19d738199dc05313d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8058. Erasure coding: use BlockInfo[] for both striped and contiguous blocks in INodeFile. Contributed by Zhe Zhang and Yi Liu.\n",
      "commitDate": "15/07/15 9:49 AM",
      "commitName": "7e091de1366f4b57b5433bc19d738199dc05313d",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 12:07 PM",
      "commitNameOld": "3d734df24cba53ec56074b4d28e3bcdce7d2894e",
      "commitAuthorOld": "Walter Su",
      "daysBetweenCommits": 49.9,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     fsd.writeLock();\n     try {\n       src \u003d fsd.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final BlockInfoContiguous[] blocks \u003d unprotectedSetReplication(fsd, src,\n+      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n           replication, blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(src, replication);\n         bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n          replication, blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "6e3fcffe291faec40fa9214f4880a35a952836c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8608. Merge HDFS-7912 to trunk and branch-2 (track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks). Contributed by Zhe Zhang.\n",
      "commitDate": "17/06/15 8:05 AM",
      "commitName": "6e3fcffe291faec40fa9214f4880a35a952836c4",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/05/15 6:29 AM",
      "commitNameOld": "6d5da9484185ca9f585195d6da069b9cd5be4044",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 271,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     fsd.writeLock();\n     try {\n       src \u003d fsd.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n-                                                       blockRepls);\n+      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n+          replication, blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(src, replication);\n         bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final BlockInfo[] blocks \u003d unprotectedSetReplication(fsd, src,\n          replication, blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7912. Erasure Coding: track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:41 AM",
      "commitName": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/05/15 6:29 AM",
      "commitNameOld": "6d5da9484185ca9f585195d6da069b9cd5be4044",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 14.22,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   static boolean setReplication(\n       FSDirectory fsd, BlockManager bm, String src, final short replication)\n       throws IOException {\n     bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     fsd.writeLock();\n     try {\n       src \u003d fsd.resolvePath(pc, src, pathComponents);\n       final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n-                                                       blockRepls);\n+      final BlockInfoContiguous[] blocks \u003d unprotectedSetReplication(fsd, src,\n+          replication, blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         fsd.getEditLog().logSetReplication(src, replication);\n         bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n       fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final BlockInfoContiguous[] blocks \u003d unprotectedSetReplication(fsd, src,\n          replication, blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
      "extendedDetails": {}
    },
    "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "15/12/14 10:40 AM",
      "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,28 @@\n-  private boolean setReplicationInt(final String srcArg,\n-      final short replication) throws IOException {\n-    String src \u003d srcArg;\n-    blockManager.verifyReplication(src, replication, null);\n+  static boolean setReplication(\n+      FSDirectory fsd, BlockManager bm, String src, final short replication)\n+      throws IOException {\n+    bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    waitForLoadingFSImage();\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      if (isPermissionEnabled) {\n-        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n+      src \u003d fsd.resolvePath(pc, src, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n+      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n+                                                       blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n-        getEditLog().logSetReplication(src, replication);\n-        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n+        fsd.getEditLog().logSetReplication(src, replication);\n+        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n-      writeUnlock();\n-    }\n-\n-    getEditLog().logSync();\n-    if (isFile) {\n-      logAuditEvent(true, \"setReplication\", srcArg);\n+      fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n                                                       blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
            "oldMethodName": "setReplicationInt",
            "newMethodName": "setReplication"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,28 @@\n-  private boolean setReplicationInt(final String srcArg,\n-      final short replication) throws IOException {\n-    String src \u003d srcArg;\n-    blockManager.verifyReplication(src, replication, null);\n+  static boolean setReplication(\n+      FSDirectory fsd, BlockManager bm, String src, final short replication)\n+      throws IOException {\n+    bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    waitForLoadingFSImage();\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      if (isPermissionEnabled) {\n-        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n+      src \u003d fsd.resolvePath(pc, src, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n+      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n+                                                       blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n-        getEditLog().logSetReplication(src, replication);\n-        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n+        fsd.getEditLog().logSetReplication(src, replication);\n+        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n-      writeUnlock();\n-    }\n-\n-    getEditLog().logSync();\n-    if (isFile) {\n-      logAuditEvent(true, \"setReplication\", srcArg);\n+      fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n                                                       blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,28 @@\n-  private boolean setReplicationInt(final String srcArg,\n-      final short replication) throws IOException {\n-    String src \u003d srcArg;\n-    blockManager.verifyReplication(src, replication, null);\n+  static boolean setReplication(\n+      FSDirectory fsd, BlockManager bm, String src, final short replication)\n+      throws IOException {\n+    bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    waitForLoadingFSImage();\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      if (isPermissionEnabled) {\n-        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n+      src \u003d fsd.resolvePath(pc, src, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n+      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n+                                                       blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n-        getEditLog().logSetReplication(src, replication);\n-        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n+        fsd.getEditLog().logSetReplication(src, replication);\n+        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n-      writeUnlock();\n-    }\n-\n-    getEditLog().logSync();\n-    if (isFile) {\n-      logAuditEvent(true, \"setReplication\", srcArg);\n+      fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n                                                       blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,28 @@\n-  private boolean setReplicationInt(final String srcArg,\n-      final short replication) throws IOException {\n-    String src \u003d srcArg;\n-    blockManager.verifyReplication(src, replication, null);\n+  static boolean setReplication(\n+      FSDirectory fsd, BlockManager bm, String src, final short replication)\n+      throws IOException {\n+    bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    waitForLoadingFSImage();\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      if (isPermissionEnabled) {\n-        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n+      src \u003d fsd.resolvePath(pc, src, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n+      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n+                                                       blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n-        getEditLog().logSetReplication(src, replication);\n-        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n+        fsd.getEditLog().logSetReplication(src, replication);\n+        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n-      writeUnlock();\n-    }\n-\n-    getEditLog().logSync();\n-    if (isFile) {\n-      logAuditEvent(true, \"setReplication\", srcArg);\n+      fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n                                                       blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "setReplicationInt",
            "newValue": "setReplication"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7506. Consolidate implementation of setting inode attributes into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "15/12/14 10:40 AM",
          "commitName": "832ebd8cb63d91b4aa4bfed412b9799b3b9be4a7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/12/14 10:30 AM",
          "commitNameOld": "6e13fc62e1f284f22fd0089f06ce281198bc7c2a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,28 @@\n-  private boolean setReplicationInt(final String srcArg,\n-      final short replication) throws IOException {\n-    String src \u003d srcArg;\n-    blockManager.verifyReplication(src, replication, null);\n+  static boolean setReplication(\n+      FSDirectory fsd, BlockManager bm, String src, final short replication)\n+      throws IOException {\n+    bm.verifyReplication(src, replication, null);\n     final boolean isFile;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    waitForLoadingFSImage();\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      if (isPermissionEnabled) {\n-        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n+      src \u003d fsd.resolvePath(pc, src, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n-      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n+      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n+                                                       blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n-        getEditLog().logSetReplication(src, replication);\n-        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n+        fsd.getEditLog().logSetReplication(src, replication);\n+        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n-      writeUnlock();\n-    }\n-\n-    getEditLog().logSync();\n-    if (isFile) {\n-      logAuditEvent(true, \"setReplication\", srcArg);\n+      fsd.writeUnlock();\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean setReplication(\n      FSDirectory fsd, BlockManager bm, String src, final short replication)\n      throws IOException {\n    bm.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    fsd.writeLock();\n    try {\n      src \u003d fsd.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d unprotectedSetReplication(fsd, src, replication,\n                                                       blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        fsd.getEditLog().logSetReplication(src, replication);\n        bm.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      fsd.writeUnlock();\n    }\n    return isFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAttrOp.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), replication-short(modifiers-final)]",
            "newValue": "[fsd-FSDirectory, bm-BlockManager, src-String, replication-short(modifiers-final)]"
          }
        }
      ]
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "05/12/14 10:55 AM",
      "commitNameOld": "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private boolean setReplicationInt(final String srcArg,\n       final short replication) throws IOException {\n     String src \u003d srcArg;\n     blockManager.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     waitForLoadingFSImage();\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n+      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n       if (isPermissionEnabled) {\n-        checkPathAccess(pc, src, FsAction.WRITE);\n+        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n       final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         getEditLog().logSetReplication(src, replication);\n         blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n       writeUnlock();\n     }\n \n     getEditLog().logSync();\n     if (isFile) {\n       logAuditEvent(true, \"setReplication\", srcArg);\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean setReplicationInt(final String srcArg,\n      final short replication) throws IOException {\n    String src \u003d srcArg;\n    blockManager.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    waitForLoadingFSImage();\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      if (isPermissionEnabled) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        getEditLog().logSetReplication(src, replication);\n        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n    if (isFile) {\n      logAuditEvent(true, \"setReplication\", srcArg);\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private boolean setReplicationInt(final String srcArg,\n       final short replication) throws IOException {\n     String src \u003d srcArg;\n     blockManager.verifyReplication(src, replication, null);\n     final boolean isFile;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     waitForLoadingFSImage();\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n-      src \u003d resolvePath(src, pathComponents);\n+      src \u003d dir.resolvePath(pc, src, pathComponents);\n       if (isPermissionEnabled) {\n         checkPathAccess(pc, src, FsAction.WRITE);\n       }\n \n       final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n       final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n       isFile \u003d blocks !\u003d null;\n       if (isFile) {\n         getEditLog().logSetReplication(src, replication);\n         blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n       }\n     } finally {\n       writeUnlock();\n     }\n \n     getEditLog().logSync();\n     if (isFile) {\n       logAuditEvent(true, \"setReplication\", srcArg);\n     }\n     return isFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean setReplicationInt(final String srcArg,\n      final short replication) throws IOException {\n    String src \u003d srcArg;\n    blockManager.verifyReplication(src, replication, null);\n    final boolean isFile;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    waitForLoadingFSImage();\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot set replication for \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      if (isPermissionEnabled) {\n        checkPathAccess(pc, src, FsAction.WRITE);\n      }\n\n      final short[] blockRepls \u003d new short[2]; // 0: old, 1: new\n      final Block[] blocks \u003d dir.setReplication(src, replication, blockRepls);\n      isFile \u003d blocks !\u003d null;\n      if (isFile) {\n        getEditLog().logSetReplication(src, replication);\n        blockManager.setReplication(blockRepls[0], blockRepls[1], src, blocks);\n      }\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n    if (isFile) {\n      logAuditEvent(true, \"setReplication\", srcArg);\n    }\n    return isFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}