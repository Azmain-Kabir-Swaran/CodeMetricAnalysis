{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Job.java",
  "functionName": "setUseNewAPI",
  "functionId": "setUseNewAPI",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
  "functionStartLine": 1273,
  "functionEndLine": 1311,
  "numCommitsSeen": 43,
  "timeTaken": 5173,
  "changeHistory": [
    "5cc44d18aa946ce2a7a9ffbd7bcce57b07e9e1cb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "5cc44d18aa946ce2a7a9ffbd7bcce57b07e9e1cb": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5cc44d18aa946ce2a7a9ffbd7bcce57b07e9e1cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6601. Fix typo in Job#setUseNewAPI. Contributed by Kai Sasaki.\n",
      "commitDate": "14/01/16 7:44 AM",
      "commitName": "5cc44d18aa946ce2a7a9ffbd7bcce57b07e9e1cb",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/11/15 2:07 PM",
      "commitNameOld": "f634505d48d97e4d461980d68a0cbdf87223646d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 50.73,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void setUseNewAPI() throws IOException {\n     int numReduces \u003d conf.getNumReduceTasks();\n     String oldMapperClass \u003d \"mapred.mapper.class\";\n     String oldReduceClass \u003d \"mapred.reducer.class\";\n     conf.setBooleanIfUnset(\"mapred.mapper.new-api\",\n                            conf.get(oldMapperClass) \u003d\u003d null);\n     if (conf.getUseNewMapper()) {\n       String mode \u003d \"new map API\";\n       ensureNotSet(\"mapred.input.format.class\", mode);\n       ensureNotSet(oldMapperClass, mode);\n       if (numReduces !\u003d 0) {\n         ensureNotSet(\"mapred.partitioner.class\", mode);\n        } else {\n         ensureNotSet(\"mapred.output.format.class\", mode);\n       }      \n     } else {\n-      String mode \u003d \"map compatability\";\n+      String mode \u003d \"map compatibility\";\n       ensureNotSet(INPUT_FORMAT_CLASS_ATTR, mode);\n       ensureNotSet(MAP_CLASS_ATTR, mode);\n       if (numReduces !\u003d 0) {\n         ensureNotSet(PARTITIONER_CLASS_ATTR, mode);\n        } else {\n         ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n       }\n     }\n     if (numReduces !\u003d 0) {\n       conf.setBooleanIfUnset(\"mapred.reducer.new-api\",\n                              conf.get(oldReduceClass) \u003d\u003d null);\n       if (conf.getUseNewReducer()) {\n         String mode \u003d \"new reduce API\";\n         ensureNotSet(\"mapred.output.format.class\", mode);\n         ensureNotSet(oldReduceClass, mode);   \n       } else {\n-        String mode \u003d \"reduce compatability\";\n+        String mode \u003d \"reduce compatibility\";\n         ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n         ensureNotSet(REDUCE_CLASS_ATTR, mode);   \n       }\n     }   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setUseNewAPI() throws IOException {\n    int numReduces \u003d conf.getNumReduceTasks();\n    String oldMapperClass \u003d \"mapred.mapper.class\";\n    String oldReduceClass \u003d \"mapred.reducer.class\";\n    conf.setBooleanIfUnset(\"mapred.mapper.new-api\",\n                           conf.get(oldMapperClass) \u003d\u003d null);\n    if (conf.getUseNewMapper()) {\n      String mode \u003d \"new map API\";\n      ensureNotSet(\"mapred.input.format.class\", mode);\n      ensureNotSet(oldMapperClass, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(\"mapred.partitioner.class\", mode);\n       } else {\n        ensureNotSet(\"mapred.output.format.class\", mode);\n      }      \n    } else {\n      String mode \u003d \"map compatibility\";\n      ensureNotSet(INPUT_FORMAT_CLASS_ATTR, mode);\n      ensureNotSet(MAP_CLASS_ATTR, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(PARTITIONER_CLASS_ATTR, mode);\n       } else {\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n      }\n    }\n    if (numReduces !\u003d 0) {\n      conf.setBooleanIfUnset(\"mapred.reducer.new-api\",\n                             conf.get(oldReduceClass) \u003d\u003d null);\n      if (conf.getUseNewReducer()) {\n        String mode \u003d \"new reduce API\";\n        ensureNotSet(\"mapred.output.format.class\", mode);\n        ensureNotSet(oldReduceClass, mode);   \n      } else {\n        String mode \u003d \"reduce compatibility\";\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n        ensureNotSet(REDUCE_CLASS_ATTR, mode);   \n      }\n    }   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setUseNewAPI() throws IOException {\n    int numReduces \u003d conf.getNumReduceTasks();\n    String oldMapperClass \u003d \"mapred.mapper.class\";\n    String oldReduceClass \u003d \"mapred.reducer.class\";\n    conf.setBooleanIfUnset(\"mapred.mapper.new-api\",\n                           conf.get(oldMapperClass) \u003d\u003d null);\n    if (conf.getUseNewMapper()) {\n      String mode \u003d \"new map API\";\n      ensureNotSet(\"mapred.input.format.class\", mode);\n      ensureNotSet(oldMapperClass, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(\"mapred.partitioner.class\", mode);\n       } else {\n        ensureNotSet(\"mapred.output.format.class\", mode);\n      }      \n    } else {\n      String mode \u003d \"map compatability\";\n      ensureNotSet(INPUT_FORMAT_CLASS_ATTR, mode);\n      ensureNotSet(MAP_CLASS_ATTR, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(PARTITIONER_CLASS_ATTR, mode);\n       } else {\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n      }\n    }\n    if (numReduces !\u003d 0) {\n      conf.setBooleanIfUnset(\"mapred.reducer.new-api\",\n                             conf.get(oldReduceClass) \u003d\u003d null);\n      if (conf.getUseNewReducer()) {\n        String mode \u003d \"new reduce API\";\n        ensureNotSet(\"mapred.output.format.class\", mode);\n        ensureNotSet(oldReduceClass, mode);   \n      } else {\n        String mode \u003d \"reduce compatability\";\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n        ensureNotSet(REDUCE_CLASS_ATTR, mode);   \n      }\n    }   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setUseNewAPI() throws IOException {\n    int numReduces \u003d conf.getNumReduceTasks();\n    String oldMapperClass \u003d \"mapred.mapper.class\";\n    String oldReduceClass \u003d \"mapred.reducer.class\";\n    conf.setBooleanIfUnset(\"mapred.mapper.new-api\",\n                           conf.get(oldMapperClass) \u003d\u003d null);\n    if (conf.getUseNewMapper()) {\n      String mode \u003d \"new map API\";\n      ensureNotSet(\"mapred.input.format.class\", mode);\n      ensureNotSet(oldMapperClass, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(\"mapred.partitioner.class\", mode);\n       } else {\n        ensureNotSet(\"mapred.output.format.class\", mode);\n      }      \n    } else {\n      String mode \u003d \"map compatability\";\n      ensureNotSet(INPUT_FORMAT_CLASS_ATTR, mode);\n      ensureNotSet(MAP_CLASS_ATTR, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(PARTITIONER_CLASS_ATTR, mode);\n       } else {\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n      }\n    }\n    if (numReduces !\u003d 0) {\n      conf.setBooleanIfUnset(\"mapred.reducer.new-api\",\n                             conf.get(oldReduceClass) \u003d\u003d null);\n      if (conf.getUseNewReducer()) {\n        String mode \u003d \"new reduce API\";\n        ensureNotSet(\"mapred.output.format.class\", mode);\n        ensureNotSet(oldReduceClass, mode);   \n      } else {\n        String mode \u003d \"reduce compatability\";\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n        ensureNotSet(REDUCE_CLASS_ATTR, mode);   \n      }\n    }   \n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/Job.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,39 @@\n+  private void setUseNewAPI() throws IOException {\n+    int numReduces \u003d conf.getNumReduceTasks();\n+    String oldMapperClass \u003d \"mapred.mapper.class\";\n+    String oldReduceClass \u003d \"mapred.reducer.class\";\n+    conf.setBooleanIfUnset(\"mapred.mapper.new-api\",\n+                           conf.get(oldMapperClass) \u003d\u003d null);\n+    if (conf.getUseNewMapper()) {\n+      String mode \u003d \"new map API\";\n+      ensureNotSet(\"mapred.input.format.class\", mode);\n+      ensureNotSet(oldMapperClass, mode);\n+      if (numReduces !\u003d 0) {\n+        ensureNotSet(\"mapred.partitioner.class\", mode);\n+       } else {\n+        ensureNotSet(\"mapred.output.format.class\", mode);\n+      }      \n+    } else {\n+      String mode \u003d \"map compatability\";\n+      ensureNotSet(INPUT_FORMAT_CLASS_ATTR, mode);\n+      ensureNotSet(MAP_CLASS_ATTR, mode);\n+      if (numReduces !\u003d 0) {\n+        ensureNotSet(PARTITIONER_CLASS_ATTR, mode);\n+       } else {\n+        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n+      }\n+    }\n+    if (numReduces !\u003d 0) {\n+      conf.setBooleanIfUnset(\"mapred.reducer.new-api\",\n+                             conf.get(oldReduceClass) \u003d\u003d null);\n+      if (conf.getUseNewReducer()) {\n+        String mode \u003d \"new reduce API\";\n+        ensureNotSet(\"mapred.output.format.class\", mode);\n+        ensureNotSet(oldReduceClass, mode);   \n+      } else {\n+        String mode \u003d \"reduce compatability\";\n+        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n+        ensureNotSet(REDUCE_CLASS_ATTR, mode);   \n+      }\n+    }   \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setUseNewAPI() throws IOException {\n    int numReduces \u003d conf.getNumReduceTasks();\n    String oldMapperClass \u003d \"mapred.mapper.class\";\n    String oldReduceClass \u003d \"mapred.reducer.class\";\n    conf.setBooleanIfUnset(\"mapred.mapper.new-api\",\n                           conf.get(oldMapperClass) \u003d\u003d null);\n    if (conf.getUseNewMapper()) {\n      String mode \u003d \"new map API\";\n      ensureNotSet(\"mapred.input.format.class\", mode);\n      ensureNotSet(oldMapperClass, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(\"mapred.partitioner.class\", mode);\n       } else {\n        ensureNotSet(\"mapred.output.format.class\", mode);\n      }      \n    } else {\n      String mode \u003d \"map compatability\";\n      ensureNotSet(INPUT_FORMAT_CLASS_ATTR, mode);\n      ensureNotSet(MAP_CLASS_ATTR, mode);\n      if (numReduces !\u003d 0) {\n        ensureNotSet(PARTITIONER_CLASS_ATTR, mode);\n       } else {\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n      }\n    }\n    if (numReduces !\u003d 0) {\n      conf.setBooleanIfUnset(\"mapred.reducer.new-api\",\n                             conf.get(oldReduceClass) \u003d\u003d null);\n      if (conf.getUseNewReducer()) {\n        String mode \u003d \"new reduce API\";\n        ensureNotSet(\"mapred.output.format.class\", mode);\n        ensureNotSet(oldReduceClass, mode);   \n      } else {\n        String mode \u003d \"reduce compatability\";\n        ensureNotSet(OUTPUT_FORMAT_CLASS_ATTR, mode);\n        ensureNotSet(REDUCE_CLASS_ATTR, mode);   \n      }\n    }   \n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/Job.java"
    }
  }
}