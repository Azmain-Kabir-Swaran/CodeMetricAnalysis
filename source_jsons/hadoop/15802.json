{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSAuthenticationFilter.java",
  "functionName": "getConfiguration",
  "functionId": "getConfiguration___configPrefix-String__filterConfig-FilterConfig",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
  "functionStartLine": 70,
  "functionEndLine": 124,
  "numCommitsSeen": 14,
  "timeTaken": 3138,
  "changeHistory": [
    "3f89084ac756c9296d412821d76ff2bee57d0c2f",
    "35f1014b3e10eee27f1976f4af9815a0c2d7dacd",
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "12c8fdceaf263425661169cba25402df89d444c1",
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
    "971dc838ecf8bf55a9bd64128ce2447e4613ea76",
    "20660b7a67b7f2815b1e27b98dce2b2682399505",
    "be9c67930b57c516723d566625f9036a88a84055"
  ],
  "changeHistoryShort": {
    "3f89084ac756c9296d412821d76ff2bee57d0c2f": "Ybodychange",
    "35f1014b3e10eee27f1976f4af9815a0c2d7dacd": "Ybodychange",
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "12c8fdceaf263425661169cba25402df89d444c1": "Ybodychange",
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7": "Ybodychange",
    "971dc838ecf8bf55a9bd64128ce2447e4613ea76": "Ybodychange",
    "20660b7a67b7f2815b1e27b98dce2b2682399505": "Ybodychange",
    "be9c67930b57c516723d566625f9036a88a84055": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3f89084ac756c9296d412821d76ff2bee57d0c2f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14845. Ignore AuthenticationFilterInitializer for HttpFSServerWebServer and honor hadoop.http.authentication configs.\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "24/09/19 6:19 PM",
      "commitName": "3f89084ac756c9296d412821d76ff2bee57d0c2f",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "30/05/19 6:29 PM",
      "commitNameOld": "35f1014b3e10eee27f1976f4af9815a0c2d7dacd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 116.99,
      "commitsBetweenForRepo": 1014,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,55 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n+      if (name.startsWith(HADOOP_HTTP_CONF_PREFIX)) {\n+        name \u003d name.substring(HADOOP_HTTP_CONF_PREFIX.length());\n+        props.setProperty(name, entry.getValue());\n+      }\n+    }\n+\n+    // Replace Hadoop Http Authentication Configs with HttpFS specific Configs\n+    for (Map.Entry\u003cString, String\u003e entry : conf) {\n+      String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \"\n           + SIGNATURE_SECRET_FILE);\n     }\n \n     if (!isRandomSecret(filterConfig)) {\n       try (Reader reader \u003d new InputStreamReader(Files.newInputStream(\n           Paths.get(signatureSecretFile)), StandardCharsets.UTF_8)) {\n         StringBuilder secret \u003d new StringBuilder();\n         int c \u003d reader.read();\n         while (c \u003e -1) {\n           secret.append((char) c);\n           c \u003d reader.read();\n         }\n         props.setProperty(AuthenticationFilter.SIGNATURE_SECRET,\n             secret.toString());\n       } catch (IOException ex) {\n         throw new RuntimeException(\"Could not read HttpFS signature \"\n             + \"secret file: \" + signatureSecretFile);\n       }\n     }\n     setAuthHandlerClass(props);\n     String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n     if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n       dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n     }\n     props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                       dtkind);\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(HADOOP_HTTP_CONF_PREFIX)) {\n        name \u003d name.substring(HADOOP_HTTP_CONF_PREFIX.length());\n        props.setProperty(name, entry.getValue());\n      }\n    }\n\n    // Replace Hadoop Http Authentication Configs with HttpFS specific Configs\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \"\n          + SIGNATURE_SECRET_FILE);\n    }\n\n    if (!isRandomSecret(filterConfig)) {\n      try (Reader reader \u003d new InputStreamReader(Files.newInputStream(\n          Paths.get(signatureSecretFile)), StandardCharsets.UTF_8)) {\n        StringBuilder secret \u003d new StringBuilder();\n        int c \u003d reader.read();\n        while (c \u003e -1) {\n          secret.append((char) c);\n          c \u003d reader.read();\n        }\n        props.setProperty(AuthenticationFilter.SIGNATURE_SECRET,\n            secret.toString());\n      } catch (IOException ex) {\n        throw new RuntimeException(\"Could not read HttpFS signature \"\n            + \"secret file: \" + signatureSecretFile);\n      }\n    }\n    setAuthHandlerClass(props);\n    String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n    if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n      dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n    }\n    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                      dtkind);\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "35f1014b3e10eee27f1976f4af9815a0c2d7dacd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13654. Use a random secret when a secret file doesn\u0027t exist in HttpFS. This should be default.\n",
      "commitDate": "30/05/19 6:29 PM",
      "commitName": "35f1014b3e10eee27f1976f4af9815a0c2d7dacd",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "02/05/19 12:58 PM",
      "commitNameOld": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 28.23,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n-      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n+      throw new RuntimeException(\"Undefined property: \"\n+          + SIGNATURE_SECRET_FILE);\n     }\n \n-    try {\n-      StringBuilder secret \u003d new StringBuilder();\n-      Reader reader \u003d new InputStreamReader(Files.newInputStream(Paths.get(\n-          signatureSecretFile)), StandardCharsets.UTF_8);\n-      int c \u003d reader.read();\n-      while (c \u003e -1) {\n-        secret.append((char)c);\n-        c \u003d reader.read();\n+    if (!isRandomSecret(filterConfig)) {\n+      try (Reader reader \u003d new InputStreamReader(Files.newInputStream(\n+          Paths.get(signatureSecretFile)), StandardCharsets.UTF_8)) {\n+        StringBuilder secret \u003d new StringBuilder();\n+        int c \u003d reader.read();\n+        while (c \u003e -1) {\n+          secret.append((char) c);\n+          c \u003d reader.read();\n+        }\n+        props.setProperty(AuthenticationFilter.SIGNATURE_SECRET,\n+            secret.toString());\n+      } catch (IOException ex) {\n+        throw new RuntimeException(\"Could not read HttpFS signature \"\n+            + \"secret file: \" + signatureSecretFile);\n       }\n-      reader.close();\n-      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n-    } catch (IOException ex) {\n-      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     setAuthHandlerClass(props);\n     String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n     if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n       dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n     }\n     props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                       dtkind);\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \"\n          + SIGNATURE_SECRET_FILE);\n    }\n\n    if (!isRandomSecret(filterConfig)) {\n      try (Reader reader \u003d new InputStreamReader(Files.newInputStream(\n          Paths.get(signatureSecretFile)), StandardCharsets.UTF_8)) {\n        StringBuilder secret \u003d new StringBuilder();\n        int c \u003d reader.read();\n        while (c \u003e -1) {\n          secret.append((char) c);\n          c \u003d reader.read();\n        }\n        props.setProperty(AuthenticationFilter.SIGNATURE_SECRET,\n            secret.toString());\n      } catch (IOException ex) {\n        throw new RuntimeException(\"Could not read HttpFS signature \"\n            + \"secret file: \" + signatureSecretFile);\n      }\n    }\n    setAuthHandlerClass(props);\n    String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n    if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n      dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n    }\n    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                      dtkind);\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "11/07/17 11:19 AM",
      "commitNameOld": "12c8fdceaf263425661169cba25402df89d444c1",
      "commitAuthorOld": "John Zhuge",
      "daysBetweenCommits": 660.07,
      "commitsBetweenForRepo": 5560,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n-      Reader reader \u003d new InputStreamReader(new FileInputStream(\n-          signatureSecretFile), StandardCharsets.UTF_8);\n+      Reader reader \u003d new InputStreamReader(Files.newInputStream(Paths.get(\n+          signatureSecretFile)), StandardCharsets.UTF_8);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     setAuthHandlerClass(props);\n     String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n     if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n       dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n     }\n     props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                       dtkind);\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new InputStreamReader(Files.newInputStream(Paths.get(\n          signatureSecretFile)), StandardCharsets.UTF_8);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    setAuthHandlerClass(props);\n    String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n    if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n      dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n    }\n    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                      dtkind);\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "12c8fdceaf263425661169cba25402df89d444c1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12052. Set SWEBHDFS delegation token kind when ssl is enabled in HttpFS. Contributed by Zoran Dimitrijevic.\n",
      "commitDate": "11/07/17 11:19 AM",
      "commitName": "12c8fdceaf263425661169cba25402df89d444c1",
      "commitAuthor": "John Zhuge",
      "commitDateOld": "07/02/17 9:36 AM",
      "commitNameOld": "69b23632c48297ac844c58fd3e21aad10c093cc8",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 154.03,
      "commitsBetweenForRepo": 830,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new InputStreamReader(new FileInputStream(\n           signatureSecretFile), StandardCharsets.UTF_8);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     setAuthHandlerClass(props);\n+    String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n+    if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n+      dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n+    }\n     props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n-        WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString());\n+                      dtkind);\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new InputStreamReader(new FileInputStream(\n          signatureSecretFile), StandardCharsets.UTF_8);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    setAuthHandlerClass(props);\n    String dtkind \u003d WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString();\n    if (conf.getBoolean(HttpFSServerWebServer.SSL_ENABLED_KEY, false)) {\n      dtkind \u003d WebHdfsConstants.SWEBHDFS_TOKEN_KIND.toString();\n    }\n    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n                      dtkind);\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10707. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "02/08/16 1:07 AM",
      "commitName": "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "19/06/15 11:39 PM",
      "commitNameOld": "971dc838ecf8bf55a9bd64128ce2447e4613ea76",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 409.06,
      "commitsBetweenForRepo": 2815,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new InputStreamReader(new FileInputStream(\n-          signatureSecretFile), Charsets.UTF_8);\n+          signatureSecretFile), StandardCharsets.UTF_8);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     setAuthHandlerClass(props);\n     props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n         WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString());\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new InputStreamReader(new FileInputStream(\n          signatureSecretFile), StandardCharsets.UTF_8);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    setAuthHandlerClass(props);\n    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n        WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString());\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "971dc838ecf8bf55a9bd64128ce2447e4613ea76": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8337. Accessing httpfs via webhdfs doesn\u0027t work from a jar with kerberos. Contributed by Yongjun Zhang.\n",
      "commitDate": "19/06/15 11:39 PM",
      "commitName": "971dc838ecf8bf55a9bd64128ce2447e4613ea76",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "05/02/15 2:57 AM",
      "commitNameOld": "20660b7a67b7f2815b1e27b98dce2b2682399505",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 134.82,
      "commitsBetweenForRepo": 1247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new InputStreamReader(new FileInputStream(\n           signatureSecretFile), Charsets.UTF_8);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n+    setAuthHandlerClass(props);\n+    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n+        WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString());\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new InputStreamReader(new FileInputStream(\n          signatureSecretFile), Charsets.UTF_8);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    setAuthHandlerClass(props);\n    props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,\n        WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString());\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "20660b7a67b7f2815b1e27b98dce2b2682399505": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7709. Fix findbug warnings in httpfs. Contributed by Rakesh R.\n",
      "commitDate": "05/02/15 2:57 AM",
      "commitName": "20660b7a67b7f2815b1e27b98dce2b2682399505",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "10/12/14 2:54 PM",
      "commitNameOld": "92916ae4876e4e24f85b22ccf9418f347d8d9666",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 56.5,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException{\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n-      Reader reader \u003d new FileReader(signatureSecretFile);\n+      Reader reader \u003d new InputStreamReader(new FileInputStream(\n+          signatureSecretFile), Charsets.UTF_8);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new InputStreamReader(new FileInputStream(\n          signatureSecretFile), Charsets.UTF_8);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "be9c67930b57c516723d566625f9036a88a84055": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:58 PM",
      "commitName": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,35 @@\n+  protected Properties getConfiguration(String configPrefix,\n+      FilterConfig filterConfig) throws ServletException{\n+    Properties props \u003d new Properties();\n+    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n+\n+    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n+    for (Map.Entry\u003cString, String\u003e entry : conf) {\n+      String name \u003d entry.getKey();\n+      if (name.startsWith(CONF_PREFIX)) {\n+        String value \u003d conf.get(name);\n+        name \u003d name.substring(CONF_PREFIX.length());\n+        props.setProperty(name, value);\n+      }\n+    }\n+\n+    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n+    if (signatureSecretFile \u003d\u003d null) {\n+      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n+    }\n+\n+    try {\n+      StringBuilder secret \u003d new StringBuilder();\n+      Reader reader \u003d new FileReader(signatureSecretFile);\n+      int c \u003d reader.read();\n+      while (c \u003e -1) {\n+        secret.append((char)c);\n+        c \u003d reader.read();\n+      }\n+      reader.close();\n+      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n+    } catch (IOException ex) {\n+      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n+    }\n+    return props;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException{\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java"
    }
  }
}