{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JMXGet.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
  "functionStartLine": 295,
  "functionEndLine": 359,
  "numCommitsSeen": 8,
  "timeTaken": 4514,
  "changeHistory": [
    "a19b956975116a7e743f23fc6d465b41d6258388",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "a19b956975116a7e743f23fc6d465b41d6258388": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a19b956975116a7e743f23fc6d465b41d6258388": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4511. Cover package org.apache.hadoop.hdfs.tools with unit test (Andrey Klochkov via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1533270 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/10/13 2:49 PM",
      "commitName": "a19b956975116a7e743f23fc6d465b41d6258388",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "08/01/13 1:05 PM",
      "commitNameOld": "5cdb7e5ce7f0c3129749be8f29e2f11c0e0f2269",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 282.03,
      "commitsBetweenForRepo": 1718,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   public static void main(String[] args) {\n \n     int res \u003d -1;\n \n     // parse arguments\n     Options opts \u003d new Options();\n     CommandLine commandLine \u003d null;\n     try {\n       commandLine \u003d parseArgs(opts, args);\n     } catch (IllegalArgumentException iae) {\n       commandLine \u003d null;\n     }\n \n     if (commandLine \u003d\u003d null) {\n       // invalid arguments\n       err(\"Invalid args\");\n       printUsage(opts);\n-      System.exit(-1);\n+      ExitUtil.terminate(-1);      \n     }\n \n     JMXGet jm \u003d new JMXGet();\n \n     if (commandLine.hasOption(\"port\")) {\n       jm.setPort(commandLine.getOptionValue(\"port\"));\n     }\n     if (commandLine.hasOption(\"service\")) {\n       jm.setService(commandLine.getOptionValue(\"service\"));\n     }\n     if (commandLine.hasOption(\"server\")) {\n       jm.setServer(commandLine.getOptionValue(\"server\"));\n     }\n \n     if (commandLine.hasOption(\"localVM\")) {\n       // from the file /tmp/hsperfdata*\n       jm.setLocalVMUrl(commandLine.getOptionValue(\"localVM\"));\n     }\n \n     if (commandLine.hasOption(\"help\")) {\n       printUsage(opts);\n-      System.exit(0);\n+      ExitUtil.terminate(0);\n     }\n \n     // rest of args\n     args \u003d commandLine.getArgs();\n \n     try {\n       jm.init();\n \n       if (args.length \u003d\u003d 0) {\n         jm.printAllValues();\n       } else {\n         for (String key : args) {\n           err(\"key \u003d \" + key);\n           String val \u003d jm.getValue(key);\n           if (val !\u003d null)\n             System.out.format(JMXGet.format, key, val);\n         }\n       }\n       res \u003d 0;\n     } catch (Exception re) {\n       re.printStackTrace();\n       res \u003d -1;\n     }\n \n-    System.exit(res);\n+    ExitUtil.terminate(res);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n\n    int res \u003d -1;\n\n    // parse arguments\n    Options opts \u003d new Options();\n    CommandLine commandLine \u003d null;\n    try {\n      commandLine \u003d parseArgs(opts, args);\n    } catch (IllegalArgumentException iae) {\n      commandLine \u003d null;\n    }\n\n    if (commandLine \u003d\u003d null) {\n      // invalid arguments\n      err(\"Invalid args\");\n      printUsage(opts);\n      ExitUtil.terminate(-1);      \n    }\n\n    JMXGet jm \u003d new JMXGet();\n\n    if (commandLine.hasOption(\"port\")) {\n      jm.setPort(commandLine.getOptionValue(\"port\"));\n    }\n    if (commandLine.hasOption(\"service\")) {\n      jm.setService(commandLine.getOptionValue(\"service\"));\n    }\n    if (commandLine.hasOption(\"server\")) {\n      jm.setServer(commandLine.getOptionValue(\"server\"));\n    }\n\n    if (commandLine.hasOption(\"localVM\")) {\n      // from the file /tmp/hsperfdata*\n      jm.setLocalVMUrl(commandLine.getOptionValue(\"localVM\"));\n    }\n\n    if (commandLine.hasOption(\"help\")) {\n      printUsage(opts);\n      ExitUtil.terminate(0);\n    }\n\n    // rest of args\n    args \u003d commandLine.getArgs();\n\n    try {\n      jm.init();\n\n      if (args.length \u003d\u003d 0) {\n        jm.printAllValues();\n      } else {\n        for (String key : args) {\n          err(\"key \u003d \" + key);\n          String val \u003d jm.getValue(key);\n          if (val !\u003d null)\n            System.out.format(JMXGet.format, key, val);\n        }\n      }\n      res \u003d 0;\n    } catch (Exception re) {\n      re.printStackTrace();\n      res \u003d -1;\n    }\n\n    ExitUtil.terminate(res);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) {\n\n    int res \u003d -1;\n\n    // parse arguments\n    Options opts \u003d new Options();\n    CommandLine commandLine \u003d null;\n    try {\n      commandLine \u003d parseArgs(opts, args);\n    } catch (IllegalArgumentException iae) {\n      commandLine \u003d null;\n    }\n\n    if (commandLine \u003d\u003d null) {\n      // invalid arguments\n      err(\"Invalid args\");\n      printUsage(opts);\n      System.exit(-1);\n    }\n\n    JMXGet jm \u003d new JMXGet();\n\n    if (commandLine.hasOption(\"port\")) {\n      jm.setPort(commandLine.getOptionValue(\"port\"));\n    }\n    if (commandLine.hasOption(\"service\")) {\n      jm.setService(commandLine.getOptionValue(\"service\"));\n    }\n    if (commandLine.hasOption(\"server\")) {\n      jm.setServer(commandLine.getOptionValue(\"server\"));\n    }\n\n    if (commandLine.hasOption(\"localVM\")) {\n      // from the file /tmp/hsperfdata*\n      jm.setLocalVMUrl(commandLine.getOptionValue(\"localVM\"));\n    }\n\n    if (commandLine.hasOption(\"help\")) {\n      printUsage(opts);\n      System.exit(0);\n    }\n\n    // rest of args\n    args \u003d commandLine.getArgs();\n\n    try {\n      jm.init();\n\n      if (args.length \u003d\u003d 0) {\n        jm.printAllValues();\n      } else {\n        for (String key : args) {\n          err(\"key \u003d \" + key);\n          String val \u003d jm.getValue(key);\n          if (val !\u003d null)\n            System.out.format(JMXGet.format, key, val);\n        }\n      }\n      res \u003d 0;\n    } catch (Exception re) {\n      re.printStackTrace();\n      res \u003d -1;\n    }\n\n    System.exit(res);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) {\n\n    int res \u003d -1;\n\n    // parse arguments\n    Options opts \u003d new Options();\n    CommandLine commandLine \u003d null;\n    try {\n      commandLine \u003d parseArgs(opts, args);\n    } catch (IllegalArgumentException iae) {\n      commandLine \u003d null;\n    }\n\n    if (commandLine \u003d\u003d null) {\n      // invalid arguments\n      err(\"Invalid args\");\n      printUsage(opts);\n      System.exit(-1);\n    }\n\n    JMXGet jm \u003d new JMXGet();\n\n    if (commandLine.hasOption(\"port\")) {\n      jm.setPort(commandLine.getOptionValue(\"port\"));\n    }\n    if (commandLine.hasOption(\"service\")) {\n      jm.setService(commandLine.getOptionValue(\"service\"));\n    }\n    if (commandLine.hasOption(\"server\")) {\n      jm.setServer(commandLine.getOptionValue(\"server\"));\n    }\n\n    if (commandLine.hasOption(\"localVM\")) {\n      // from the file /tmp/hsperfdata*\n      jm.setLocalVMUrl(commandLine.getOptionValue(\"localVM\"));\n    }\n\n    if (commandLine.hasOption(\"help\")) {\n      printUsage(opts);\n      System.exit(0);\n    }\n\n    // rest of args\n    args \u003d commandLine.getArgs();\n\n    try {\n      jm.init();\n\n      if (args.length \u003d\u003d 0) {\n        jm.printAllValues();\n      } else {\n        for (String key : args) {\n          err(\"key \u003d \" + key);\n          String val \u003d jm.getValue(key);\n          if (val !\u003d null)\n            System.out.format(JMXGet.format, key, val);\n        }\n      }\n      res \u003d 0;\n    } catch (Exception re) {\n      re.printStackTrace();\n      res \u003d -1;\n    }\n\n    System.exit(res);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/JMXGet.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/JMXGet.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,66 @@\n+  public static void main(String[] args) {\n+\n+    int res \u003d -1;\n+\n+    // parse arguments\n+    Options opts \u003d new Options();\n+    CommandLine commandLine \u003d null;\n+    try {\n+      commandLine \u003d parseArgs(opts, args);\n+    } catch (IllegalArgumentException iae) {\n+      commandLine \u003d null;\n+    }\n+\n+    if (commandLine \u003d\u003d null) {\n+      // invalid arguments\n+      err(\"Invalid args\");\n+      printUsage(opts);\n+      System.exit(-1);\n+    }\n+\n+    JMXGet jm \u003d new JMXGet();\n+\n+    if (commandLine.hasOption(\"port\")) {\n+      jm.setPort(commandLine.getOptionValue(\"port\"));\n+    }\n+    if (commandLine.hasOption(\"service\")) {\n+      jm.setService(commandLine.getOptionValue(\"service\"));\n+    }\n+    if (commandLine.hasOption(\"server\")) {\n+      jm.setServer(commandLine.getOptionValue(\"server\"));\n+    }\n+\n+    if (commandLine.hasOption(\"localVM\")) {\n+      // from the file /tmp/hsperfdata*\n+      jm.setLocalVMUrl(commandLine.getOptionValue(\"localVM\"));\n+    }\n+\n+    if (commandLine.hasOption(\"help\")) {\n+      printUsage(opts);\n+      System.exit(0);\n+    }\n+\n+    // rest of args\n+    args \u003d commandLine.getArgs();\n+\n+    try {\n+      jm.init();\n+\n+      if (args.length \u003d\u003d 0) {\n+        jm.printAllValues();\n+      } else {\n+        for (String key : args) {\n+          err(\"key \u003d \" + key);\n+          String val \u003d jm.getValue(key);\n+          if (val !\u003d null)\n+            System.out.format(JMXGet.format, key, val);\n+        }\n+      }\n+      res \u003d 0;\n+    } catch (Exception re) {\n+      re.printStackTrace();\n+      res \u003d -1;\n+    }\n+\n+    System.exit(res);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n\n    int res \u003d -1;\n\n    // parse arguments\n    Options opts \u003d new Options();\n    CommandLine commandLine \u003d null;\n    try {\n      commandLine \u003d parseArgs(opts, args);\n    } catch (IllegalArgumentException iae) {\n      commandLine \u003d null;\n    }\n\n    if (commandLine \u003d\u003d null) {\n      // invalid arguments\n      err(\"Invalid args\");\n      printUsage(opts);\n      System.exit(-1);\n    }\n\n    JMXGet jm \u003d new JMXGet();\n\n    if (commandLine.hasOption(\"port\")) {\n      jm.setPort(commandLine.getOptionValue(\"port\"));\n    }\n    if (commandLine.hasOption(\"service\")) {\n      jm.setService(commandLine.getOptionValue(\"service\"));\n    }\n    if (commandLine.hasOption(\"server\")) {\n      jm.setServer(commandLine.getOptionValue(\"server\"));\n    }\n\n    if (commandLine.hasOption(\"localVM\")) {\n      // from the file /tmp/hsperfdata*\n      jm.setLocalVMUrl(commandLine.getOptionValue(\"localVM\"));\n    }\n\n    if (commandLine.hasOption(\"help\")) {\n      printUsage(opts);\n      System.exit(0);\n    }\n\n    // rest of args\n    args \u003d commandLine.getArgs();\n\n    try {\n      jm.init();\n\n      if (args.length \u003d\u003d 0) {\n        jm.printAllValues();\n      } else {\n        for (String key : args) {\n          err(\"key \u003d \" + key);\n          String val \u003d jm.getValue(key);\n          if (val !\u003d null)\n            System.out.format(JMXGet.format, key, val);\n        }\n      }\n      res \u003d 0;\n    } catch (Exception re) {\n      re.printStackTrace();\n      res \u003d -1;\n    }\n\n    System.exit(res);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/JMXGet.java"
    }
  }
}