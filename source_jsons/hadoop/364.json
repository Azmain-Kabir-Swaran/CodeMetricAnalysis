{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HdfsUtils.java",
  "functionName": "isHealthy",
  "functionId": "isHealthy___uri-URI",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java",
  "functionStartLine": 50,
  "functionEndLine": 85,
  "numCommitsSeen": 3,
  "timeTaken": 1697,
  "changeHistory": [
    "92e5e9159850c01635091ea6ded0d8ee76691a9a",
    "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4",
    "5572f73d45842308aba890c0eb89fe456154cd00"
  ],
  "changeHistoryShort": {
    "92e5e9159850c01635091ea6ded0d8ee76691a9a": "Ymultichange(Yfilerename,Ybodychange)",
    "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4": "Ybodychange",
    "5572f73d45842308aba890c0eb89fe456154cd00": "Yintroduced"
  },
  "changeHistoryDetails": {
    "92e5e9159850c01635091ea6ded0d8ee76691a9a": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-10914. Move remnants of oah.hdfs.client to hadoop-hdfs-client.\n",
      "commitDate": "28/09/16 4:01 PM",
      "commitName": "92e5e9159850c01635091ea6ded0d8ee76691a9a",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-10914. Move remnants of oah.hdfs.client to hadoop-hdfs-client.\n",
          "commitDate": "28/09/16 4:01 PM",
          "commitName": "92e5e9159850c01635091ea6ded0d8ee76691a9a",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "28/09/16 3:57 PM",
          "commitNameOld": "5f34402adae191232fe78e62990396ca07f314bb",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public static boolean isHealthy(URI uri) {\n     //check scheme\n     final String scheme \u003d uri.getScheme();\n     if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n       throw new IllegalArgumentException(\"The scheme is not \"\n           + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n     }\n-    \n+\n     final Configuration conf \u003d new Configuration();\n     //disable FileSystem cache\n     conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n     //disable client retry for rpc connection and rpc calls\n     conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, false);\n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n \n     DistributedFileSystem fs \u003d null;\n     try {\n       fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n       final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n       }\n \n       fs.close();\n       fs \u003d null;\n       return !safemode;\n     } catch(IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n       }\n       return false;\n     } finally {\n-      IOUtils.cleanup(LOG, fs);\n+      IOUtils.closeQuietly(fs);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean isHealthy(URI uri) {\n    //check scheme\n    final String scheme \u003d uri.getScheme();\n    if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n      throw new IllegalArgumentException(\"The scheme is not \"\n          + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n    }\n\n    final Configuration conf \u003d new Configuration();\n    //disable FileSystem cache\n    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n    //disable client retry for rpc connection and rpc calls\n    conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, false);\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n\n    DistributedFileSystem fs \u003d null;\n    try {\n      fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n      final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n      }\n\n      fs.close();\n      fs \u003d null;\n      return !safemode;\n    } catch(IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n      }\n      return false;\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10914. Move remnants of oah.hdfs.client to hadoop-hdfs-client.\n",
          "commitDate": "28/09/16 4:01 PM",
          "commitName": "92e5e9159850c01635091ea6ded0d8ee76691a9a",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "28/09/16 3:57 PM",
          "commitNameOld": "5f34402adae191232fe78e62990396ca07f314bb",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public static boolean isHealthy(URI uri) {\n     //check scheme\n     final String scheme \u003d uri.getScheme();\n     if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n       throw new IllegalArgumentException(\"The scheme is not \"\n           + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n     }\n-    \n+\n     final Configuration conf \u003d new Configuration();\n     //disable FileSystem cache\n     conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n     //disable client retry for rpc connection and rpc calls\n     conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, false);\n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n \n     DistributedFileSystem fs \u003d null;\n     try {\n       fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n       final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n       }\n \n       fs.close();\n       fs \u003d null;\n       return !safemode;\n     } catch(IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n       }\n       return false;\n     } finally {\n-      IOUtils.cleanup(LOG, fs);\n+      IOUtils.closeQuietly(fs);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean isHealthy(URI uri) {\n    //check scheme\n    final String scheme \u003d uri.getScheme();\n    if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n      throw new IllegalArgumentException(\"The scheme is not \"\n          + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n    }\n\n    final Configuration conf \u003d new Configuration();\n    //disable FileSystem cache\n    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n    //disable client retry for rpc connection and rpc calls\n    conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, false);\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n\n    DistributedFileSystem fs \u003d null;\n    try {\n      fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n      final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n      }\n\n      fs.close();\n      fs \u003d null;\n      return !safemode;\n    } catch(IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n      }\n      return false;\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8079. Move dfs.client.retry.* confs from DFSConfigKeys to HdfsClientConfigKeys.Retry.\n",
      "commitDate": "07/04/15 7:48 PM",
      "commitName": "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "15/06/12 4:00 PM",
      "commitNameOld": "5572f73d45842308aba890c0eb89fe456154cd00",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1026.16,
      "commitsBetweenForRepo": 7035,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public static boolean isHealthy(URI uri) {\n     //check scheme\n     final String scheme \u003d uri.getScheme();\n     if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n       throw new IllegalArgumentException(\"The scheme is not \"\n           + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n     }\n     \n     final Configuration conf \u003d new Configuration();\n     //disable FileSystem cache\n     conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n     //disable client retry for rpc connection and rpc calls\n-    conf.setBoolean(DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, false);\n+    conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, false);\n     conf.setInt(\n         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n \n     DistributedFileSystem fs \u003d null;\n     try {\n       fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n       final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n       }\n \n       fs.close();\n       fs \u003d null;\n       return !safemode;\n     } catch(IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n       }\n       return false;\n     } finally {\n       IOUtils.cleanup(LOG, fs);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean isHealthy(URI uri) {\n    //check scheme\n    final String scheme \u003d uri.getScheme();\n    if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n      throw new IllegalArgumentException(\"The scheme is not \"\n          + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n    }\n    \n    final Configuration conf \u003d new Configuration();\n    //disable FileSystem cache\n    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n    //disable client retry for rpc connection and rpc calls\n    conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, false);\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n\n    DistributedFileSystem fs \u003d null;\n    try {\n      fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n      final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n      }\n\n      fs.close();\n      fs \u003d null;\n      return !safemode;\n    } catch(IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n      }\n      return false;\n    } finally {\n      IOUtils.cleanup(LOG, fs);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java",
      "extendedDetails": {}
    },
    "5572f73d45842308aba890c0eb89fe456154cd00": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3518. Add a utility method HdfsUtils.isHealthy(uri) for checking if the given HDFS is healthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1350825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/12 4:00 PM",
      "commitName": "5572f73d45842308aba890c0eb89fe456154cd00",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,36 @@\n+  public static boolean isHealthy(URI uri) {\n+    //check scheme\n+    final String scheme \u003d uri.getScheme();\n+    if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n+      throw new IllegalArgumentException(\"The scheme is not \"\n+          + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n+    }\n+    \n+    final Configuration conf \u003d new Configuration();\n+    //disable FileSystem cache\n+    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n+    //disable client retry for rpc connection and rpc calls\n+    conf.setBoolean(DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, false);\n+    conf.setInt(\n+        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n+\n+    DistributedFileSystem fs \u003d null;\n+    try {\n+      fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n+      final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n+      }\n+\n+      fs.close();\n+      fs \u003d null;\n+      return !safemode;\n+    } catch(IOException e) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n+      }\n+      return false;\n+    } finally {\n+      IOUtils.cleanup(LOG, fs);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean isHealthy(URI uri) {\n    //check scheme\n    final String scheme \u003d uri.getScheme();\n    if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {\n      throw new IllegalArgumentException(\"The scheme is not \"\n          + HdfsConstants.HDFS_URI_SCHEME + \", uri\u003d\" + uri);\n    }\n    \n    final Configuration conf \u003d new Configuration();\n    //disable FileSystem cache\n    conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", scheme), true);\n    //disable client retry for rpc connection and rpc calls\n    conf.setBoolean(DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, false);\n    conf.setInt(\n        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\n\n    DistributedFileSystem fs \u003d null;\n    try {\n      fs \u003d (DistributedFileSystem)FileSystem.get(uri, conf);\n      final boolean safemode \u003d fs.setSafeMode(SafeModeAction.SAFEMODE_GET);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Is namenode in safemode? \" + safemode + \"; uri\u003d\" + uri);\n      }\n\n      fs.close();\n      fs \u003d null;\n      return !safemode;\n    } catch(IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got an exception for uri\u003d\" + uri, e);\n      }\n      return false;\n    } finally {\n      IOUtils.cleanup(LOG, fs);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/HdfsUtils.java"
    }
  }
}