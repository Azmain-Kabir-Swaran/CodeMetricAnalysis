{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeManager.java",
  "functionName": "initAndStartNodeManager",
  "functionId": "initAndStartNodeManager___conf-Configuration__hasToReboot-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
  "functionStartLine": 937,
  "functionEndLine": 968,
  "numCommitsSeen": 128,
  "timeTaken": 3676,
  "changeHistory": [
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "c017171da00a6cd71a2901c84a0298ce14a49e23",
    "f1c19b9365cbac88e45a9eed516fbfc6c9aa9947",
    "e13b671aa510f553f4a6a232b4694b6a4cce88ae",
    "4da8e2613ec192bb0f29340cac0378bbadf15dde",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5",
    "b9fd9e17598c606d0acd54a68b4693f482ffb3ac"
  ],
  "changeHistoryShort": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "c017171da00a6cd71a2901c84a0298ce14a49e23": "Ybodychange",
    "f1c19b9365cbac88e45a9eed516fbfc6c9aa9947": "Ybodychange",
    "e13b671aa510f553f4a6a232b4694b6a4cce88ae": "Ybodychange",
    "4da8e2613ec192bb0f29340cac0378bbadf15dde": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5": "Ybodychange",
    "b9fd9e17598c606d0acd54a68b4693f482ffb3ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/05/17 3:14 PM",
      "commitNameOld": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 105.42,
      "commitsBetweenForRepo": 607,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n     try {\n       // Failed to start if we\u0027re a Unix based system but we don\u0027t have bash.\n       // Bash is necessary to launch containers under Unix-based systems.\n       if (!Shell.WINDOWS) {\n         if (!Shell.checkIsBashSupported()) {\n           String message \u003d\n               \"Failing NodeManager start since we\u0027re on a \"\n                   + \"Unix-based system but bash doesn\u0027t seem to be available.\";\n-          LOG.fatal(message);\n+          LOG.error(message);\n           throw new YarnRuntimeException(message);\n         }\n       }\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n         ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n       ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                 SHUTDOWN_HOOK_PRIORITY);\n       // System exit should be called only when NodeManager is instantiated from\n       // main() funtion\n       this.shouldExitOnShutdownEvent \u003d true;\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n-      LOG.fatal(\"Error starting NodeManager\", t);\n+      LOG.error(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n    try {\n      // Failed to start if we\u0027re a Unix based system but we don\u0027t have bash.\n      // Bash is necessary to launch containers under Unix-based systems.\n      if (!Shell.WINDOWS) {\n        if (!Shell.checkIsBashSupported()) {\n          String message \u003d\n              \"Failing NodeManager start since we\u0027re on a \"\n                  + \"Unix-based system but bash doesn\u0027t seem to be available.\";\n          LOG.error(message);\n          throw new YarnRuntimeException(message);\n        }\n      }\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n      // System exit should be called only when NodeManager is instantiated from\n      // main() funtion\n      this.shouldExitOnShutdownEvent \u003d true;\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.error(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "c017171da00a6cd71a2901c84a0298ce14a49e23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13770. Shell.checkIsBashSupported swallowed an interrupted exception. Contributed by Wei-Chiu Chuang\n",
      "commitDate": "28/10/16 7:57 AM",
      "commitName": "c017171da00a6cd71a2901c84a0298ce14a49e23",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "29/09/16 3:11 PM",
      "commitNameOld": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 28.7,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n     try {\n       // Failed to start if we\u0027re a Unix based system but we don\u0027t have bash.\n       // Bash is necessary to launch containers under Unix-based systems.\n       if (!Shell.WINDOWS) {\n-        if (!Shell.isBashSupported) {\n+        if (!Shell.checkIsBashSupported()) {\n           String message \u003d\n               \"Failing NodeManager start since we\u0027re on a \"\n                   + \"Unix-based system but bash doesn\u0027t seem to be available.\";\n           LOG.fatal(message);\n           throw new YarnRuntimeException(message);\n         }\n       }\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n         ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n       ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                 SHUTDOWN_HOOK_PRIORITY);\n       // System exit should be called only when NodeManager is instantiated from\n       // main() funtion\n       this.shouldExitOnShutdownEvent \u003d true;\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n    try {\n      // Failed to start if we\u0027re a Unix based system but we don\u0027t have bash.\n      // Bash is necessary to launch containers under Unix-based systems.\n      if (!Shell.WINDOWS) {\n        if (!Shell.checkIsBashSupported()) {\n          String message \u003d\n              \"Failing NodeManager start since we\u0027re on a \"\n                  + \"Unix-based system but bash doesn\u0027t seem to be available.\";\n          LOG.fatal(message);\n          throw new YarnRuntimeException(message);\n        }\n      }\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n      // System exit should be called only when NodeManager is instantiated from\n      // main() funtion\n      this.shouldExitOnShutdownEvent \u003d true;\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "f1c19b9365cbac88e45a9eed516fbfc6c9aa9947": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12441. Fixed shell-kill command behaviour to work correctly on some Linux distributions after HADOOP-12317. Contributed by Wangda Tan.\n",
      "commitDate": "05/10/15 10:56 AM",
      "commitName": "f1c19b9365cbac88e45a9eed516fbfc6c9aa9947",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 11.89,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,32 @@\n   private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n     try {\n+      // Failed to start if we\u0027re a Unix based system but we don\u0027t have bash.\n+      // Bash is necessary to launch containers under Unix-based systems.\n+      if (!Shell.WINDOWS) {\n+        if (!Shell.isBashSupported) {\n+          String message \u003d\n+              \"Failing NodeManager start since we\u0027re on a \"\n+                  + \"Unix-based system but bash doesn\u0027t seem to be available.\";\n+          LOG.fatal(message);\n+          throw new YarnRuntimeException(message);\n+        }\n+      }\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n         ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n       ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                 SHUTDOWN_HOOK_PRIORITY);\n       // System exit should be called only when NodeManager is instantiated from\n       // main() funtion\n       this.shouldExitOnShutdownEvent \u003d true;\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n    try {\n      // Failed to start if we\u0027re a Unix based system but we don\u0027t have bash.\n      // Bash is necessary to launch containers under Unix-based systems.\n      if (!Shell.WINDOWS) {\n        if (!Shell.isBashSupported) {\n          String message \u003d\n              \"Failing NodeManager start since we\u0027re on a \"\n                  + \"Unix-based system but bash doesn\u0027t seem to be available.\";\n          LOG.fatal(message);\n          throw new YarnRuntimeException(message);\n        }\n      }\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n      // System exit should be called only when NodeManager is instantiated from\n      // main() funtion\n      this.shouldExitOnShutdownEvent \u003d true;\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "e13b671aa510f553f4a6a232b4694b6a4cce88ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3585. NodeManager cannot exit on SHUTDOWN event triggered and NM recovery is enabled. Contributed by Rohith Sharmaks\n",
      "commitDate": "03/06/15 12:44 PM",
      "commitName": "e13b671aa510f553f4a6a232b4694b6a4cce88ae",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/05/15 2:06 PM",
      "commitNameOld": "711d77cc54a64b2c3db70bdacc6bf2245c896a4b",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 20.94,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n     try {\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n         ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n       ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                 SHUTDOWN_HOOK_PRIORITY);\n-\n+      // System exit should be called only when NodeManager is instantiated from\n+      // main() funtion\n+      this.shouldExitOnShutdownEvent \u003d true;\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n    try {\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n      // System exit should be called only when NodeManager is instantiated from\n      // main() funtion\n      this.shouldExitOnShutdownEvent \u003d true;\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "4da8e2613ec192bb0f29340cac0378bbadf15dde": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-174. Modify NodeManager to pass the user\u0027s configuration even when rebooting. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/10/12 2:25 PM",
      "commitName": "4da8e2613ec192bb0f29340cac0378bbadf15dde",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-174. Modify NodeManager to pass the user\u0027s configuration even when rebooting. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401086 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/10/12 2:25 PM",
          "commitName": "4da8e2613ec192bb0f29340cac0378bbadf15dde",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/08/12 7:18 PM",
          "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 58.8,
          "commitsBetweenForRepo": 350,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n-  private void initAndStartNodeManager(boolean hasToReboot) {\n+  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n     try {\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n         ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n       ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                 SHUTDOWN_HOOK_PRIORITY);\n \n-      YarnConfiguration conf \u003d new YarnConfiguration();\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n    try {\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
          "extendedDetails": {
            "oldValue": "[hasToReboot-boolean]",
            "newValue": "[conf-Configuration, hasToReboot-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-174. Modify NodeManager to pass the user\u0027s configuration even when rebooting. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401086 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/10/12 2:25 PM",
          "commitName": "4da8e2613ec192bb0f29340cac0378bbadf15dde",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/08/12 7:18 PM",
          "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 58.8,
          "commitsBetweenForRepo": 350,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n-  private void initAndStartNodeManager(boolean hasToReboot) {\n+  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n     try {\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n         ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n       ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                 SHUTDOWN_HOOK_PRIORITY);\n \n-      YarnConfiguration conf \u003d new YarnConfiguration();\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initAndStartNodeManager(Configuration conf, boolean hasToReboot) {\n    try {\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initAndStartNodeManager(boolean hasToReboot) {\n    try {\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n\n      YarnConfiguration conf \u003d new YarnConfiguration();\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java"
      }
    },
    "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4205. retrofit all JVM shutdown hooks to use ShutdownHookManager (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 8:20 PM",
      "commitName": "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "05/03/12 4:52 PM",
      "commitNameOld": "b9fd9e17598c606d0acd54a68b4693f482ffb3ac",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 59.1,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private void initAndStartNodeManager(boolean hasToReboot) {\n     try {\n \n       // Remove the old hook if we are rebooting.\n       if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n-        Runtime.getRuntime().removeShutdownHook(nodeManagerShutdownHook);\n+        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n       }\n \n       nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n-      Runtime.getRuntime().addShutdownHook(nodeManagerShutdownHook);\n+      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n+                                                SHUTDOWN_HOOK_PRIORITY);\n \n       YarnConfiguration conf \u003d new YarnConfiguration();\n       this.init(conf);\n       this.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting NodeManager\", t);\n       System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initAndStartNodeManager(boolean hasToReboot) {\n    try {\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        ShutdownHookManager.get().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      ShutdownHookManager.get().addShutdownHook(nodeManagerShutdownHook,\n                                                SHUTDOWN_HOOK_PRIORITY);\n\n      YarnConfiguration conf \u003d new YarnConfiguration();\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "b9fd9e17598c606d0acd54a68b4693f482ffb3ac": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3034. Ensure NodeManager reboots itself on direction from ResourceManager. Contributed by Devaraj K \u0026 Eric Payne. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/12 4:52 PM",
      "commitName": "b9fd9e17598c606d0acd54a68b4693f482ffb3ac",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,19 @@\n+  private void initAndStartNodeManager(boolean hasToReboot) {\n+    try {\n+\n+      // Remove the old hook if we are rebooting.\n+      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n+        Runtime.getRuntime().removeShutdownHook(nodeManagerShutdownHook);\n+      }\n+\n+      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n+      Runtime.getRuntime().addShutdownHook(nodeManagerShutdownHook);\n+\n+      YarnConfiguration conf \u003d new YarnConfiguration();\n+      this.init(conf);\n+      this.start();\n+    } catch (Throwable t) {\n+      LOG.fatal(\"Error starting NodeManager\", t);\n+      System.exit(-1);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initAndStartNodeManager(boolean hasToReboot) {\n    try {\n\n      // Remove the old hook if we are rebooting.\n      if (hasToReboot \u0026\u0026 null !\u003d nodeManagerShutdownHook) {\n        Runtime.getRuntime().removeShutdownHook(nodeManagerShutdownHook);\n      }\n\n      nodeManagerShutdownHook \u003d new CompositeServiceShutdownHook(this);\n      Runtime.getRuntime().addShutdownHook(nodeManagerShutdownHook);\n\n      YarnConfiguration conf \u003d new YarnConfiguration();\n      this.init(conf);\n      this.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting NodeManager\", t);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java"
    }
  }
}