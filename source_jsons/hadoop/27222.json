{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemTimelineReaderImpl.java",
  "functionName": "getFlowRunPath",
  "functionId": "getFlowRunPath___userId-String__clusterId-String__flowName-String__flowRunId-Long__appId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
  "functionStartLine": 164,
  "functionEndLine": 194,
  "numCommitsSeen": 25,
  "timeTaken": 1813,
  "changeHistory": [
    "bca928d3c7b88f39e9bc1784889596f0b00964d4",
    "56142171b9528646f26072e022902549a16c8f27",
    "8ef546c1ee9fce0b171813547253374d268566ba",
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59"
  ],
  "changeHistoryShort": {
    "bca928d3c7b88f39e9bc1784889596f0b00964d4": "Ybodychange",
    "56142171b9528646f26072e022902549a16c8f27": "Ybodychange",
    "8ef546c1ee9fce0b171813547253374d268566ba": "Ymultichange(Yparameterchange,Ybodychange)",
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bca928d3c7b88f39e9bc1784889596f0b00964d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3879 [Storage implementation] Create HDFS backing storage implementation for ATS reads. Contributed by Abhishek Modi.\n",
      "commitDate": "11/10/18 9:14 PM",
      "commitName": "bca928d3c7b88f39e9bc1784889596f0b00964d4",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 407.93,
      "commitsBetweenForRepo": 3724,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private String getFlowRunPath(String userId, String clusterId,\n       String flowName, Long flowRunId, String appId) throws IOException {\n     if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n       return userId + File.separator + flowName + File.separator + flowRunId;\n     }\n     if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n       throw new IOException(\"Unable to get flow info\");\n     }\n-    String appFlowMappingFile \u003d rootPath + File.separator +  ENTITIES_DIR +\n-        File.separator + clusterId + File.separator + APP_FLOW_MAPPING_FILE;\n+    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n+    Path appFlowMappingFilePath \u003d new Path(clusterIdPath,\n+            APP_FLOW_MAPPING_FILE);\n     try (BufferedReader reader \u003d\n              new BufferedReader(new InputStreamReader(\n-                 new FileInputStream(\n-                     appFlowMappingFile), Charset.forName(\"UTF-8\")));\n+                 fs.open(appFlowMappingFilePath), Charset.forName(\"UTF-8\")));\n          CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n       for (CSVRecord record : parser.getRecords()) {\n         if (record.size() \u003c 4) {\n           continue;\n         }\n         String applicationId \u003d record.get(\"APP\");\n         if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n             !applicationId.trim().equals(appId)) {\n           continue;\n         }\n         return record.get(1).trim() + File.separator + record.get(2).trim() +\n             File.separator + record.get(3).trim();\n       }\n       parser.close();\n     }\n     throw new IOException(\"Unable to get flow info\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getFlowRunPath(String userId, String clusterId,\n      String flowName, Long flowRunId, String appId) throws IOException {\n    if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n      return userId + File.separator + flowName + File.separator + flowRunId;\n    }\n    if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n      throw new IOException(\"Unable to get flow info\");\n    }\n    Path clusterIdPath \u003d new Path(entitiesPath, clusterId);\n    Path appFlowMappingFilePath \u003d new Path(clusterIdPath,\n            APP_FLOW_MAPPING_FILE);\n    try (BufferedReader reader \u003d\n             new BufferedReader(new InputStreamReader(\n                 fs.open(appFlowMappingFilePath), Charset.forName(\"UTF-8\")));\n         CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n      for (CSVRecord record : parser.getRecords()) {\n        if (record.size() \u003c 4) {\n          continue;\n        }\n        String applicationId \u003d record.get(\"APP\");\n        if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n            !applicationId.trim().equals(appId)) {\n          continue;\n        }\n        return record.get(1).trim() + File.separator + record.get(2).trim() +\n            File.separator + record.get(3).trim();\n      }\n      parser.close();\n    }\n    throw new IOException(\"Unable to get flow info\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
      "extendedDetails": {}
    },
    "56142171b9528646f26072e022902549a16c8f27": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5359. FileSystemTimelineReader/Writer uses unix-specific default storage path (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "13/07/16 8:45 AM",
      "commitName": "56142171b9528646f26072e022902549a16c8f27",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "0a9b085f052b5ebaf319bec7609c77d7f1684a4a",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private String getFlowRunPath(String userId, String clusterId,\n       String flowName, Long flowRunId, String appId) throws IOException {\n     if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n-      return userId + \"/\" + flowName + \"/\" + flowRunId;\n+      return userId + File.separator + flowName + File.separator + flowRunId;\n     }\n     if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n       throw new IOException(\"Unable to get flow info\");\n     }\n-    String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n-        clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n+    String appFlowMappingFile \u003d rootPath + File.separator +  ENTITIES_DIR +\n+        File.separator + clusterId + File.separator + APP_FLOW_MAPPING_FILE;\n     try (BufferedReader reader \u003d\n              new BufferedReader(new InputStreamReader(\n                  new FileInputStream(\n                      appFlowMappingFile), Charset.forName(\"UTF-8\")));\n          CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n       for (CSVRecord record : parser.getRecords()) {\n         if (record.size() \u003c 4) {\n           continue;\n         }\n         String applicationId \u003d record.get(\"APP\");\n         if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n             !applicationId.trim().equals(appId)) {\n           continue;\n         }\n-        return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n-            record.get(3).trim();\n+        return record.get(1).trim() + File.separator + record.get(2).trim() +\n+            File.separator + record.get(3).trim();\n       }\n       parser.close();\n     }\n     throw new IOException(\"Unable to get flow info\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getFlowRunPath(String userId, String clusterId,\n      String flowName, Long flowRunId, String appId) throws IOException {\n    if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n      return userId + File.separator + flowName + File.separator + flowRunId;\n    }\n    if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n      throw new IOException(\"Unable to get flow info\");\n    }\n    String appFlowMappingFile \u003d rootPath + File.separator +  ENTITIES_DIR +\n        File.separator + clusterId + File.separator + APP_FLOW_MAPPING_FILE;\n    try (BufferedReader reader \u003d\n             new BufferedReader(new InputStreamReader(\n                 new FileInputStream(\n                     appFlowMappingFile), Charset.forName(\"UTF-8\")));\n         CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n      for (CSVRecord record : parser.getRecords()) {\n        if (record.size() \u003c 4) {\n          continue;\n        }\n        String applicationId \u003d record.get(\"APP\");\n        if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n            !applicationId.trim().equals(appId)) {\n          continue;\n        }\n        return record.get(1).trim() + File.separator + record.get(2).trim() +\n            File.separator + record.get(3).trim();\n      }\n      parser.close();\n    }\n    throw new IOException(\"Unable to get flow info\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
      "extendedDetails": {}
    },
    "8ef546c1ee9fce0b171813547253374d268566ba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  private String getFlowRunPath(String userId, String clusterId, String flowId,\n+  private String getFlowRunPath(String userId, String clusterId, String flowName,\n       Long flowRunId, String appId)\n       throws IOException {\n-    if (userId !\u003d null \u0026\u0026 flowId !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n-      return userId + \"/\" + flowId + \"/\" + flowRunId;\n+    if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n+      return userId + \"/\" + flowName + \"/\" + flowRunId;\n     }\n     if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n       throw new IOException(\"Unable to get flow info\");\n     }\n     String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n         clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n     try (BufferedReader reader \u003d\n              new BufferedReader(new InputStreamReader(\n                  new FileInputStream(\n                      appFlowMappingFile), Charset.forName(\"UTF-8\")));\n          CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n       for (CSVRecord record : parser.getRecords()) {\n         if (record.size() \u003c 4) {\n           continue;\n         }\n         String applicationId \u003d record.get(\"APP\");\n         if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n             !applicationId.trim().equals(appId)) {\n           continue;\n         }\n         return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n             record.get(3).trim();\n       }\n       parser.close();\n     }\n     throw new IOException(\"Unable to get flow info\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String getFlowRunPath(String userId, String clusterId, String flowName,\n      Long flowRunId, String appId)\n      throws IOException {\n    if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n      return userId + \"/\" + flowName + \"/\" + flowRunId;\n    }\n    if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n      throw new IOException(\"Unable to get flow info\");\n    }\n    String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n        clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n    try (BufferedReader reader \u003d\n             new BufferedReader(new InputStreamReader(\n                 new FileInputStream(\n                     appFlowMappingFile), Charset.forName(\"UTF-8\")));\n         CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n      for (CSVRecord record : parser.getRecords()) {\n        if (record.size() \u003c 4) {\n          continue;\n        }\n        String applicationId \u003d record.get(\"APP\");\n        if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n            !applicationId.trim().equals(appId)) {\n          continue;\n        }\n        return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n            record.get(3).trim();\n      }\n      parser.close();\n    }\n    throw new IOException(\"Unable to get flow info\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
          "extendedDetails": {
            "oldValue": "[userId-String, clusterId-String, flowId-String, flowRunId-Long, appId-String]",
            "newValue": "[userId-String, clusterId-String, flowName-String, flowRunId-Long, appId-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  private String getFlowRunPath(String userId, String clusterId, String flowId,\n+  private String getFlowRunPath(String userId, String clusterId, String flowName,\n       Long flowRunId, String appId)\n       throws IOException {\n-    if (userId !\u003d null \u0026\u0026 flowId !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n-      return userId + \"/\" + flowId + \"/\" + flowRunId;\n+    if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n+      return userId + \"/\" + flowName + \"/\" + flowRunId;\n     }\n     if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n       throw new IOException(\"Unable to get flow info\");\n     }\n     String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n         clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n     try (BufferedReader reader \u003d\n              new BufferedReader(new InputStreamReader(\n                  new FileInputStream(\n                      appFlowMappingFile), Charset.forName(\"UTF-8\")));\n          CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n       for (CSVRecord record : parser.getRecords()) {\n         if (record.size() \u003c 4) {\n           continue;\n         }\n         String applicationId \u003d record.get(\"APP\");\n         if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n             !applicationId.trim().equals(appId)) {\n           continue;\n         }\n         return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n             record.get(3).trim();\n       }\n       parser.close();\n     }\n     throw new IOException(\"Unable to get flow info\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String getFlowRunPath(String userId, String clusterId, String flowName,\n      Long flowRunId, String appId)\n      throws IOException {\n    if (userId !\u003d null \u0026\u0026 flowName !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n      return userId + \"/\" + flowName + \"/\" + flowRunId;\n    }\n    if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n      throw new IOException(\"Unable to get flow info\");\n    }\n    String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n        clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n    try (BufferedReader reader \u003d\n             new BufferedReader(new InputStreamReader(\n                 new FileInputStream(\n                     appFlowMappingFile), Charset.forName(\"UTF-8\")));\n         CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n      for (CSVRecord record : parser.getRecords()) {\n        if (record.size() \u003c 4) {\n          continue;\n        }\n        String applicationId \u003d record.get(\"APP\");\n        if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n            !applicationId.trim().equals(appId)) {\n          continue;\n        }\n        return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n            record.get(3).trim();\n      }\n      parser.close();\n    }\n    throw new IOException(\"Unable to get flow info\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3051. Created storage oriented reader interface for fetching raw entity data and made the filesystem based implementation. Contributed by Varun Saxena.\n\n(cherry picked from commit 499ce52c7b645ec0b1cc8ac62dc9a3127b987a20)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2d59bc4458eaeba6e5b98709340db6f0f1204b59",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,32 @@\n+  private String getFlowRunPath(String userId, String clusterId, String flowId,\n+      Long flowRunId, String appId)\n+      throws IOException {\n+    if (userId !\u003d null \u0026\u0026 flowId !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n+      return userId + \"/\" + flowId + \"/\" + flowRunId;\n+    }\n+    if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n+      throw new IOException(\"Unable to get flow info\");\n+    }\n+    String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n+        clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n+    try (BufferedReader reader \u003d\n+        new BufferedReader(new InputStreamReader(\n+            new FileInputStream(\n+                appFlowMappingFile), Charset.forName(\"UTF-8\")));\n+        CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n+      for (CSVRecord record : parser.getRecords()) {\n+        if (record.size() \u003c 4) {\n+          continue;\n+        }\n+        String applicationId \u003d record.get(\"APP\");\n+        if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n+            !applicationId.trim().equals(appId)) {\n+          continue;\n+        }\n+        return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n+            record.get(3).trim();\n+      }\n+      parser.close();\n+    }\n+    throw new IOException(\"Unable to get flow info\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String getFlowRunPath(String userId, String clusterId, String flowId,\n      Long flowRunId, String appId)\n      throws IOException {\n    if (userId !\u003d null \u0026\u0026 flowId !\u003d null \u0026\u0026 flowRunId !\u003d null) {\n      return userId + \"/\" + flowId + \"/\" + flowRunId;\n    }\n    if (clusterId \u003d\u003d null || appId \u003d\u003d null) {\n      throw new IOException(\"Unable to get flow info\");\n    }\n    String appFlowMappingFile \u003d rootPath + \"/\" +  ENTITIES_DIR + \"/\" +\n        clusterId + \"/\" + APP_FLOW_MAPPING_FILE;\n    try (BufferedReader reader \u003d\n        new BufferedReader(new InputStreamReader(\n            new FileInputStream(\n                appFlowMappingFile), Charset.forName(\"UTF-8\")));\n        CSVParser parser \u003d new CSVParser(reader, csvFormat)) {\n      for (CSVRecord record : parser.getRecords()) {\n        if (record.size() \u003c 4) {\n          continue;\n        }\n        String applicationId \u003d record.get(\"APP\");\n        if (applicationId !\u003d null \u0026\u0026 !applicationId.trim().isEmpty() \u0026\u0026\n            !applicationId.trim().equals(appId)) {\n          continue;\n        }\n        return record.get(1).trim() + \"/\" + record.get(2).trim() + \"/\" +\n            record.get(3).trim();\n      }\n      parser.close();\n    }\n    throw new IOException(\"Unable to get flow info\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java"
    }
  }
}