{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActivitiesManager.java",
  "functionName": "getSummarizedAppAllocation",
  "functionId": "getSummarizedAppAllocation___allocations-List__AppAllocation____maxTimeInSeconds-double",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
  "functionStartLine": 175,
  "functionEndLine": 205,
  "numCommitsSeen": 16,
  "timeTaken": 1853,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "28/06/19 8:24 AM",
      "commitNameOld": "cbae2413201bc470b5f16421ea69d1cd9edb64a8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 61.78,
      "commitsBetweenForRepo": 517,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n   private AppAllocation getSummarizedAppAllocation(\n       List\u003cAppAllocation\u003e allocations, double maxTimeInSeconds) {\n     if (allocations \u003d\u003d null || allocations.isEmpty()) {\n       return null;\n     }\n     long startTime \u003d allocations.get(allocations.size() - 1).getTime()\n         - (long) (maxTimeInSeconds * 1000);\n     Map\u003cString, ActivityNode\u003e nodeActivities \u003d new HashMap\u003c\u003e();\n     for (int i \u003d allocations.size() - 1; i \u003e\u003d 0; i--) {\n       AppAllocation appAllocation \u003d allocations.get(i);\n       if (startTime \u003e appAllocation.getTime()) {\n         break;\n       }\n       List\u003cActivityNode\u003e activityNodes \u003d appAllocation.getAllocationAttempts();\n       for (ActivityNode an : activityNodes) {\n-        if (an.getNodeId() !\u003d null) {\n-          nodeActivities.putIfAbsent(\n-              an.getRequestPriority() + \"_\" + an.getAllocationRequestId() + \"_\"\n-                  + an.getNodeId(), an);\n-        }\n+        nodeActivities.putIfAbsent(\n+            an.getRequestPriority() + \"_\" + an.getAllocationRequestId() + \"_\"\n+                + an.getNodeId(), an);\n       }\n     }\n     AppAllocation lastAppAllocation \u003d allocations.get(allocations.size() - 1);\n     AppAllocation summarizedAppAllocation \u003d\n         new AppAllocation(lastAppAllocation.getPriority(), null,\n             lastAppAllocation.getQueueName());\n-    summarizedAppAllocation\n-        .updateAppContainerStateAndTime(null, lastAppAllocation.getAppState(),\n-            lastAppAllocation.getTime(), lastAppAllocation.getDiagnostic());\n+    summarizedAppAllocation.updateAppContainerStateAndTime(null,\n+        lastAppAllocation.getActivityState(), lastAppAllocation.getTime(),\n+        lastAppAllocation.getDiagnostic());\n     summarizedAppAllocation\n         .setAllocationAttempts(new ArrayList\u003c\u003e(nodeActivities.values()));\n     return summarizedAppAllocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private AppAllocation getSummarizedAppAllocation(\n      List\u003cAppAllocation\u003e allocations, double maxTimeInSeconds) {\n    if (allocations \u003d\u003d null || allocations.isEmpty()) {\n      return null;\n    }\n    long startTime \u003d allocations.get(allocations.size() - 1).getTime()\n        - (long) (maxTimeInSeconds * 1000);\n    Map\u003cString, ActivityNode\u003e nodeActivities \u003d new HashMap\u003c\u003e();\n    for (int i \u003d allocations.size() - 1; i \u003e\u003d 0; i--) {\n      AppAllocation appAllocation \u003d allocations.get(i);\n      if (startTime \u003e appAllocation.getTime()) {\n        break;\n      }\n      List\u003cActivityNode\u003e activityNodes \u003d appAllocation.getAllocationAttempts();\n      for (ActivityNode an : activityNodes) {\n        nodeActivities.putIfAbsent(\n            an.getRequestPriority() + \"_\" + an.getAllocationRequestId() + \"_\"\n                + an.getNodeId(), an);\n      }\n    }\n    AppAllocation lastAppAllocation \u003d allocations.get(allocations.size() - 1);\n    AppAllocation summarizedAppAllocation \u003d\n        new AppAllocation(lastAppAllocation.getPriority(), null,\n            lastAppAllocation.getQueueName());\n    summarizedAppAllocation.updateAppContainerStateAndTime(null,\n        lastAppAllocation.getActivityState(), lastAppAllocation.getTime(),\n        lastAppAllocation.getDiagnostic());\n    summarizedAppAllocation\n        .setAllocationAttempts(new ArrayList\u003c\u003e(nodeActivities.values()));\n    return summarizedAppAllocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
      "extendedDetails": {}
    },
    "970b0b0c02bb8fbe8ff227c78e2332df623d1aea": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9578. Add limit/actions/summarize options for app activities REST API. Contributed by Tao Yang.\n",
      "commitDate": "12/06/19 7:44 PM",
      "commitName": "970b0b0c02bb8fbe8ff227c78e2332df623d1aea",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,33 @@\n+  private AppAllocation getSummarizedAppAllocation(\n+      List\u003cAppAllocation\u003e allocations, double maxTimeInSeconds) {\n+    if (allocations \u003d\u003d null || allocations.isEmpty()) {\n+      return null;\n+    }\n+    long startTime \u003d allocations.get(allocations.size() - 1).getTime()\n+        - (long) (maxTimeInSeconds * 1000);\n+    Map\u003cString, ActivityNode\u003e nodeActivities \u003d new HashMap\u003c\u003e();\n+    for (int i \u003d allocations.size() - 1; i \u003e\u003d 0; i--) {\n+      AppAllocation appAllocation \u003d allocations.get(i);\n+      if (startTime \u003e appAllocation.getTime()) {\n+        break;\n+      }\n+      List\u003cActivityNode\u003e activityNodes \u003d appAllocation.getAllocationAttempts();\n+      for (ActivityNode an : activityNodes) {\n+        if (an.getNodeId() !\u003d null) {\n+          nodeActivities.putIfAbsent(\n+              an.getRequestPriority() + \"_\" + an.getAllocationRequestId() + \"_\"\n+                  + an.getNodeId(), an);\n+        }\n+      }\n+    }\n+    AppAllocation lastAppAllocation \u003d allocations.get(allocations.size() - 1);\n+    AppAllocation summarizedAppAllocation \u003d\n+        new AppAllocation(lastAppAllocation.getPriority(), null,\n+            lastAppAllocation.getQueueName());\n+    summarizedAppAllocation\n+        .updateAppContainerStateAndTime(null, lastAppAllocation.getAppState(),\n+            lastAppAllocation.getTime(), lastAppAllocation.getDiagnostic());\n+    summarizedAppAllocation\n+        .setAllocationAttempts(new ArrayList\u003c\u003e(nodeActivities.values()));\n+    return summarizedAppAllocation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AppAllocation getSummarizedAppAllocation(\n      List\u003cAppAllocation\u003e allocations, double maxTimeInSeconds) {\n    if (allocations \u003d\u003d null || allocations.isEmpty()) {\n      return null;\n    }\n    long startTime \u003d allocations.get(allocations.size() - 1).getTime()\n        - (long) (maxTimeInSeconds * 1000);\n    Map\u003cString, ActivityNode\u003e nodeActivities \u003d new HashMap\u003c\u003e();\n    for (int i \u003d allocations.size() - 1; i \u003e\u003d 0; i--) {\n      AppAllocation appAllocation \u003d allocations.get(i);\n      if (startTime \u003e appAllocation.getTime()) {\n        break;\n      }\n      List\u003cActivityNode\u003e activityNodes \u003d appAllocation.getAllocationAttempts();\n      for (ActivityNode an : activityNodes) {\n        if (an.getNodeId() !\u003d null) {\n          nodeActivities.putIfAbsent(\n              an.getRequestPriority() + \"_\" + an.getAllocationRequestId() + \"_\"\n                  + an.getNodeId(), an);\n        }\n      }\n    }\n    AppAllocation lastAppAllocation \u003d allocations.get(allocations.size() - 1);\n    AppAllocation summarizedAppAllocation \u003d\n        new AppAllocation(lastAppAllocation.getPriority(), null,\n            lastAppAllocation.getQueueName());\n    summarizedAppAllocation\n        .updateAppContainerStateAndTime(null, lastAppAllocation.getAppState(),\n            lastAppAllocation.getTime(), lastAppAllocation.getDiagnostic());\n    summarizedAppAllocation\n        .setAllocationAttempts(new ArrayList\u003c\u003e(nodeActivities.values()));\n    return summarizedAppAllocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java"
    }
  }
}