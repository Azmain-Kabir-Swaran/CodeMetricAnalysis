{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdlFileSystem.java",
  "functionName": "propagateAccountOptions",
  "functionId": "propagateAccountOptions___source-Configuration__accountName-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFileSystem.java",
  "functionStartLine": 1009,
  "functionEndLine": 1037,
  "numCommitsSeen": 19,
  "timeTaken": 1187,
  "changeHistory": [
    "481d79fedc48942654dab08e23e71e80c8eb2aca"
  ],
  "changeHistoryShort": {
    "481d79fedc48942654dab08e23e71e80c8eb2aca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "481d79fedc48942654dab08e23e71e80c8eb2aca": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13972. ADLS to support per-store configuration.\nContributed by Sharad Sonker.\n\n(cherry picked from commit 050f5287b79324b7f6231b879c0bfc608203b980)\n",
      "commitDate": "15/02/18 8:27 AM",
      "commitName": "481d79fedc48942654dab08e23e71e80c8eb2aca",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,29 @@\n+  public static Configuration propagateAccountOptions(Configuration source,\n+      String accountName) {\n+\n+    Preconditions.checkArgument(StringUtils.isNotEmpty(accountName),\n+        \"accountName\");\n+    final String accountPrefix \u003d AZURE_AD_ACCOUNT_PREFIX + accountName +\u0027.\u0027;\n+    LOG.debug(\"Propagating entries under {}\", accountPrefix);\n+    final Configuration dest \u003d new Configuration(source);\n+    for (Map.Entry\u003cString, String\u003e entry : source) {\n+      final String key \u003d entry.getKey();\n+      // get the (unexpanded) value.\n+      final String value \u003d entry.getValue();\n+      if (!key.startsWith(accountPrefix) || accountPrefix.equals(key)) {\n+        continue;\n+      }\n+      // there\u0027s a account prefix, so strip it\n+      final String stripped \u003d key.substring(accountPrefix.length());\n+\n+      // propagate the value, building a new origin field.\n+      // to track overwrites, the generic key is overwritten even if\n+      // already matches the new one.\n+      String origin \u003d \"[\" + StringUtils.join(\n+              source.getPropertySources(key), \", \") +\"]\";\n+      final String generic \u003d AZURE_AD_PREFIX + stripped;\n+      LOG.debug(\"Updating {} from {}\", generic, origin);\n+      dest.set(generic, value, key + \" via \" + origin);\n+    }\n+    return dest;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration propagateAccountOptions(Configuration source,\n      String accountName) {\n\n    Preconditions.checkArgument(StringUtils.isNotEmpty(accountName),\n        \"accountName\");\n    final String accountPrefix \u003d AZURE_AD_ACCOUNT_PREFIX + accountName +\u0027.\u0027;\n    LOG.debug(\"Propagating entries under {}\", accountPrefix);\n    final Configuration dest \u003d new Configuration(source);\n    for (Map.Entry\u003cString, String\u003e entry : source) {\n      final String key \u003d entry.getKey();\n      // get the (unexpanded) value.\n      final String value \u003d entry.getValue();\n      if (!key.startsWith(accountPrefix) || accountPrefix.equals(key)) {\n        continue;\n      }\n      // there\u0027s a account prefix, so strip it\n      final String stripped \u003d key.substring(accountPrefix.length());\n\n      // propagate the value, building a new origin field.\n      // to track overwrites, the generic key is overwritten even if\n      // already matches the new one.\n      String origin \u003d \"[\" + StringUtils.join(\n              source.getPropertySources(key), \", \") +\"]\";\n      final String generic \u003d AZURE_AD_PREFIX + stripped;\n      LOG.debug(\"Updating {} from {}\", generic, origin);\n      dest.set(generic, value, key + \" via \" + origin);\n    }\n    return dest;\n  }",
      "path": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFileSystem.java"
    }
  }
}