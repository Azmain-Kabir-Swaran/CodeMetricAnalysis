{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "signalToContainer",
  "functionId": "signalToContainer___request-SignalContainerRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1692,
  "functionEndLine": 1746,
  "numCommitsSeen": 209,
  "timeTaken": 3829,
  "changeHistory": [
    "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
    "8f08532bde153811368e1b8336446fba4743f9d2"
  ],
  "changeHistoryShort": {
    "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5": "Yrename",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": "Ybodychange",
    "8f08532bde153811368e1b8336446fba4743f9d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5": {
      "type": "Yrename",
      "commitMessage": "MAPREDUCE-5044. Have AM trigger jstack on task attempts that timeout before killing them. (Eric Payne and Gera Shegalov via mingma)\n",
      "commitDate": "06/06/16 2:30 PM",
      "commitName": "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "25/05/16 4:55 PM",
      "commitNameOld": "013532a95e63d7c53e601be530021d6d5a15ab7f",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 11.9,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n-  public SignalContainerResponse signalContainer(\n+  public SignalContainerResponse signalToContainer(\n       SignalContainerRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     ApplicationId applicationId \u003d containerId.getApplicationAttemptId().\n         getApplicationId();\n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to signal an absent container\", applicationId, containerId, null);\n       throw RPCUtil\n           .getRemoteException(\"Trying to signal an absent container \"\n               + containerId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     RMContainer container \u003d scheduler.getRMContainer(containerId);\n     if (container !\u003d null) {\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),\n               request));\n       RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"ClientRMService\", applicationId,\n           containerId, null);\n     } else {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to signal an absent container\", applicationId, containerId, null);\n       throw RPCUtil\n           .getRemoteException(\"Trying to signal an absent container \"\n               + containerId);\n     }\n \n     return recordFactory\n         .newRecordInstance(SignalContainerResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SignalContainerResponse signalToContainer(\n      SignalContainerRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    ApplicationId applicationId \u003d containerId.getApplicationAttemptId().\n        getApplicationId();\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to signal an absent container\", applicationId, containerId, null);\n      throw RPCUtil\n          .getRemoteException(\"Trying to signal an absent container \"\n              + containerId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    RMContainer container \u003d scheduler.getRMContainer(containerId);\n    if (container !\u003d null) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),\n              request));\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"ClientRMService\", applicationId,\n          containerId, null);\n    } else {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to signal an absent container\", applicationId, containerId, null);\n      throw RPCUtil\n          .getRemoteException(\"Trying to signal an absent container \"\n              + containerId);\n    }\n\n    return recordFactory\n        .newRecordInstance(SignalContainerResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldValue": "signalContainer",
        "newValue": "signalToContainer"
      }
    },
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5003. Add container resource to RM audit log. Contributed by Nathan Roberts\n",
      "commitDate": "03/05/16 1:03 PM",
      "commitName": "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "24/03/16 9:59 AM",
      "commitNameOld": "d82e797b652f248e238bdf1818e6b4a5b91cea7a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 40.13,
      "commitsBetweenForRepo": 248,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public SignalContainerResponse signalContainer(\n       SignalContainerRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     ApplicationId applicationId \u003d containerId.getApplicationAttemptId().\n         getApplicationId();\n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n-          \"Trying to signal an absent container\", applicationId, containerId);\n+          \"Trying to signal an absent container\", applicationId, containerId, null);\n       throw RPCUtil\n           .getRemoteException(\"Trying to signal an absent container \"\n               + containerId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     RMContainer container \u003d scheduler.getRMContainer(containerId);\n     if (container !\u003d null) {\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),\n               request));\n       RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"ClientRMService\", applicationId,\n-          containerId);\n+          containerId, null);\n     } else {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n-          \"Trying to signal an absent container\", applicationId, containerId);\n+          \"Trying to signal an absent container\", applicationId, containerId, null);\n       throw RPCUtil\n           .getRemoteException(\"Trying to signal an absent container \"\n               + containerId);\n     }\n \n     return recordFactory\n         .newRecordInstance(SignalContainerResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SignalContainerResponse signalContainer(\n      SignalContainerRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    ApplicationId applicationId \u003d containerId.getApplicationAttemptId().\n        getApplicationId();\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to signal an absent container\", applicationId, containerId, null);\n      throw RPCUtil\n          .getRemoteException(\"Trying to signal an absent container \"\n              + containerId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    RMContainer container \u003d scheduler.getRMContainer(containerId);\n    if (container !\u003d null) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),\n              request));\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"ClientRMService\", applicationId,\n          containerId, null);\n    } else {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to signal an absent container\", applicationId, containerId, null);\n      throw RPCUtil\n          .getRemoteException(\"Trying to signal an absent container \"\n              + containerId);\n    }\n\n    return recordFactory\n        .newRecordInstance(SignalContainerResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "8f08532bde153811368e1b8336446fba4743f9d2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma\n",
      "commitDate": "02/10/15 6:50 PM",
      "commitName": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,55 @@\n+  public SignalContainerResponse signalContainer(\n+      SignalContainerRequest request) throws YarnException, IOException {\n+    ContainerId containerId \u003d request.getContainerId();\n+\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n+    ApplicationId applicationId \u003d containerId.getApplicationAttemptId().\n+        getApplicationId();\n+    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n+    if (application \u003d\u003d null) {\n+      RMAuditLogger.logFailure(callerUGI.getUserName(),\n+          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n+          \"Trying to signal an absent container\", applicationId, containerId);\n+      throw RPCUtil\n+          .getRemoteException(\"Trying to signal an absent container \"\n+              + containerId);\n+    }\n+\n+    if (!checkAccess(callerUGI, application.getUser(),\n+        ApplicationAccessType.MODIFY_APP, application)) {\n+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n+          AuditConstants.SIGNAL_CONTAINER, \"User doesn\u0027t have permissions to \"\n+              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n+          AuditConstants.UNAUTHORIZED_USER, applicationId);\n+      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n+          + callerUGI.getShortUserName() + \" cannot perform operation \"\n+          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n+    }\n+\n+    RMContainer container \u003d scheduler.getRMContainer(containerId);\n+    if (container !\u003d null) {\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),\n+              request));\n+      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+          AuditConstants.SIGNAL_CONTAINER, \"ClientRMService\", applicationId,\n+          containerId);\n+    } else {\n+      RMAuditLogger.logFailure(callerUGI.getUserName(),\n+          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n+          \"Trying to signal an absent container\", applicationId, containerId);\n+      throw RPCUtil\n+          .getRemoteException(\"Trying to signal an absent container \"\n+              + containerId);\n+    }\n+\n+    return recordFactory\n+        .newRecordInstance(SignalContainerResponse.class);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SignalContainerResponse signalContainer(\n      SignalContainerRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    ApplicationId applicationId \u003d containerId.getApplicationAttemptId().\n        getApplicationId();\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to signal an absent container\", applicationId, containerId);\n      throw RPCUtil\n          .getRemoteException(\"Trying to signal an absent container \"\n              + containerId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    RMContainer container \u003d scheduler.getRMContainer(containerId);\n    if (container !\u003d null) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),\n              request));\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"ClientRMService\", applicationId,\n          containerId);\n    } else {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.SIGNAL_CONTAINER, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to signal an absent container\", applicationId, containerId);\n      throw RPCUtil\n          .getRemoteException(\"Trying to signal an absent container \"\n              + containerId);\n    }\n\n    return recordFactory\n        .newRecordInstance(SignalContainerResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}