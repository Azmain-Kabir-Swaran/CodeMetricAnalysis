{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "doResponse",
  "functionId": "doResponse___t-Throwable__status-RpcStatusProto",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 1080,
  "functionEndLine": 1099,
  "numCommitsSeen": 654,
  "timeTaken": 10382,
  "changeHistory": [
    "ef3e1929dd64b264c6975224da696a5a605ff66a",
    "e27708c2daf663086380cdf5215cffcab1a0b00c",
    "e880660a204b6fd0e5a0799393a4d36359765a54",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "2d8227605fe22c1c05f31729edc8939013763c05"
  ],
  "changeHistoryShort": {
    "ef3e1929dd64b264c6975224da696a5a605ff66a": "Ymultichange(Yparameterchange,Ybodychange)",
    "e27708c2daf663086380cdf5215cffcab1a0b00c": "Ybodychange",
    "e880660a204b6fd0e5a0799393a4d36359765a54": "Ybodychange",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "2d8227605fe22c1c05f31729edc8939013763c05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef3e1929dd64b264c6975224da696a5a605ff66a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14146. [SBN read] Handle exceptions from and prevent handler threads from blocking within internalQueueCall. Contributed by Chao Sun.\n",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "ef3e1929dd64b264c6975224da696a5a605ff66a",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14146. [SBN read] Handle exceptions from and prevent handler threads from blocking within internalQueueCall. Contributed by Chao Sun.\n",
          "commitDate": "24/12/18 9:34 AM",
          "commitName": "ef3e1929dd64b264c6975224da696a5a605ff66a",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "24/12/18 9:34 AM",
          "commitNameOld": "cae279610b1559371a7f04606353d8369b50969b",
          "commitAuthorOld": "Chen Liang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-    void doResponse(Throwable t) throws IOException {\n+    void doResponse(Throwable t, RpcStatusProto status) throws IOException {\n       RpcCall call \u003d this;\n       if (t !\u003d null) {\n+        if (status \u003d\u003d null) {\n+          status \u003d RpcStatusProto.FATAL;\n+        }\n         // clone the call to prevent a race with another thread stomping\n         // on the response while being sent.  the original call is\n         // effectively discarded since the wait count won\u0027t hit zero\n         call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+        setupResponse(call, status, RpcErrorCodeProto.ERROR_RPC_SERVER,\n             null, t.getClass().getName(), StringUtils.stringifyException(t));\n       } else {\n         setupResponse(call, call.responseParams.returnStatus,\n             call.responseParams.detailedErr, call.rv,\n             call.responseParams.errorClass,\n             call.responseParams.error);\n       }\n       connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t, RpcStatusProto status) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        if (status \u003d\u003d null) {\n          status \u003d RpcStatusProto.FATAL;\n        }\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call, status, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      } else {\n        setupResponse(call, call.responseParams.returnStatus,\n            call.responseParams.detailedErr, call.rv,\n            call.responseParams.errorClass,\n            call.responseParams.error);\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[t-Throwable]",
            "newValue": "[t-Throwable, status-RpcStatusProto]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14146. [SBN read] Handle exceptions from and prevent handler threads from blocking within internalQueueCall. Contributed by Chao Sun.\n",
          "commitDate": "24/12/18 9:34 AM",
          "commitName": "ef3e1929dd64b264c6975224da696a5a605ff66a",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "24/12/18 9:34 AM",
          "commitNameOld": "cae279610b1559371a7f04606353d8369b50969b",
          "commitAuthorOld": "Chen Liang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-    void doResponse(Throwable t) throws IOException {\n+    void doResponse(Throwable t, RpcStatusProto status) throws IOException {\n       RpcCall call \u003d this;\n       if (t !\u003d null) {\n+        if (status \u003d\u003d null) {\n+          status \u003d RpcStatusProto.FATAL;\n+        }\n         // clone the call to prevent a race with another thread stomping\n         // on the response while being sent.  the original call is\n         // effectively discarded since the wait count won\u0027t hit zero\n         call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+        setupResponse(call, status, RpcErrorCodeProto.ERROR_RPC_SERVER,\n             null, t.getClass().getName(), StringUtils.stringifyException(t));\n       } else {\n         setupResponse(call, call.responseParams.returnStatus,\n             call.responseParams.detailedErr, call.rv,\n             call.responseParams.errorClass,\n             call.responseParams.error);\n       }\n       connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t, RpcStatusProto status) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        if (status \u003d\u003d null) {\n          status \u003d RpcStatusProto.FATAL;\n        }\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call, status, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      } else {\n        setupResponse(call, call.responseParams.returnStatus,\n            call.responseParams.detailedErr, call.rv,\n            call.responseParams.errorClass,\n            call.responseParams.error);\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "e27708c2daf663086380cdf5215cffcab1a0b00c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13665. [SBN read] Move RPC response serialization into Server.doResponse(). Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "e27708c2daf663086380cdf5215cffcab1a0b00c",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,18 @@\n     void doResponse(Throwable t) throws IOException {\n       RpcCall call \u003d this;\n       if (t !\u003d null) {\n         // clone the call to prevent a race with another thread stomping\n         // on the response while being sent.  the original call is\n         // effectively discarded since the wait count won\u0027t hit zero\n         call \u003d new RpcCall(this);\n         setupResponse(call,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n             null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      } else if (alignmentContext !\u003d null) {\n-        // rebuild response with state context in header\n-        RpcResponseHeaderProto.Builder responseHeader \u003d\n-            call.bufferedHeader.toBuilder();\n-        alignmentContext.updateResponseState(responseHeader);\n-        RpcResponseHeaderProto builtHeader \u003d responseHeader.build();\n-        setupResponse(call, builtHeader, call.bufferedRv);\n+      } else {\n+        setupResponse(call, call.responseParams.returnStatus,\n+            call.responseParams.detailedErr, call.rv,\n+            call.responseParams.errorClass,\n+            call.responseParams.error);\n       }\n       connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      } else {\n        setupResponse(call, call.responseParams.returnStatus,\n            call.responseParams.detailedErr, call.rv,\n            call.responseParams.errorClass,\n            call.responseParams.error);\n      }\n      connection.sendResponse(call);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "e880660a204b6fd0e5a0799393a4d36359765a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13399. [SBN read] Make Client field AlignmentContext non-static. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "9bf0696c7348879678693176da0071628ca42566",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,20 @@\n     void doResponse(Throwable t) throws IOException {\n       RpcCall call \u003d this;\n       if (t !\u003d null) {\n         // clone the call to prevent a race with another thread stomping\n         // on the response while being sent.  the original call is\n         // effectively discarded since the wait count won\u0027t hit zero\n         call \u003d new RpcCall(this);\n         setupResponse(call,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n             null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      } else if (alignmentContext !\u003d null) {\n+        // rebuild response with state context in header\n+        RpcResponseHeaderProto.Builder responseHeader \u003d\n+            call.bufferedHeader.toBuilder();\n+        alignmentContext.updateResponseState(responseHeader);\n+        RpcResponseHeaderProto builtHeader \u003d responseHeader.build();\n+        setupResponse(call, builtHeader, call.bufferedRv);\n       }\n       connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      } else if (alignmentContext !\u003d null) {\n        // rebuild response with state context in header\n        RpcResponseHeaderProto.Builder responseHeader \u003d\n            call.bufferedHeader.toBuilder();\n        alignmentContext.updateResponseState(responseHeader);\n        RpcResponseHeaderProto builtHeader \u003d responseHeader.build();\n        setupResponse(call, builtHeader, call.bufferedRv);\n      }\n      connection.sendResponse(call);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/09/16 11:32 AM",
          "commitNameOld": "3069df75513180a5b56130a7e05c6e339ab0a66a",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
            "oldMethodName": "abortResponse",
            "newMethodName": "doResponse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/09/16 11:32 AM",
          "commitNameOld": "3069df75513180a5b56130a7e05c6e339ab0a66a",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/09/16 11:32 AM",
          "commitNameOld": "3069df75513180a5b56130a7e05c6e339ab0a66a",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/09/16 11:32 AM",
          "commitNameOld": "3069df75513180a5b56130a7e05c6e339ab0a66a",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "abortResponse",
            "newValue": "doResponse"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/09/16 11:32 AM",
          "commitNameOld": "3069df75513180a5b56130a7e05c6e339ab0a66a",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(call);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(call);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[call-Call, t-Throwable]",
            "newValue": "[t-Throwable]"
          }
        }
      ]
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:50 AM",
          "commitNameOld": "1360bd2d545134b582e70f2add33a105710dc80b",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,10 @@\n-    void doResponse(Throwable t) throws IOException {\n-      RpcCall call \u003d this;\n-      if (t !\u003d null) {\n-        // clone the call to prevent a race with another thread stomping\n-        // on the response while being sent.  the original call is\n-        // effectively discarded since the wait count won\u0027t hit zero\n-        call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-            null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      }\n-      connection.sendResponse(this);\n+    private void abortResponse(Call call, Throwable t) throws IOException {\n+      // clone the call to prevent a race with the other thread stomping\n+      // on the response while being sent.  the original call is\n+      // effectively discarded since the wait count won\u0027t hit zero\n+      call \u003d new Call(call);\n+      setupResponse(call,\n+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+          null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      call.sendResponse();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void abortResponse(Call call, Throwable t) throws IOException {\n      // clone the call to prevent a race with the other thread stomping\n      // on the response while being sent.  the original call is\n      // effectively discarded since the wait count won\u0027t hit zero\n      call \u003d new Call(call);\n      setupResponse(call,\n          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n          null, t.getClass().getName(), StringUtils.stringifyException(t));\n      call.sendResponse();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
            "oldMethodName": "doResponse",
            "newMethodName": "abortResponse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:50 AM",
          "commitNameOld": "1360bd2d545134b582e70f2add33a105710dc80b",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,10 @@\n-    void doResponse(Throwable t) throws IOException {\n-      RpcCall call \u003d this;\n-      if (t !\u003d null) {\n-        // clone the call to prevent a race with another thread stomping\n-        // on the response while being sent.  the original call is\n-        // effectively discarded since the wait count won\u0027t hit zero\n-        call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-            null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      }\n-      connection.sendResponse(this);\n+    private void abortResponse(Call call, Throwable t) throws IOException {\n+      // clone the call to prevent a race with the other thread stomping\n+      // on the response while being sent.  the original call is\n+      // effectively discarded since the wait count won\u0027t hit zero\n+      call \u003d new Call(call);\n+      setupResponse(call,\n+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+          null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      call.sendResponse();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void abortResponse(Call call, Throwable t) throws IOException {\n      // clone the call to prevent a race with the other thread stomping\n      // on the response while being sent.  the original call is\n      // effectively discarded since the wait count won\u0027t hit zero\n      call \u003d new Call(call);\n      setupResponse(call,\n          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n          null, t.getClass().getName(), StringUtils.stringifyException(t));\n      call.sendResponse();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:50 AM",
          "commitNameOld": "1360bd2d545134b582e70f2add33a105710dc80b",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,10 @@\n-    void doResponse(Throwable t) throws IOException {\n-      RpcCall call \u003d this;\n-      if (t !\u003d null) {\n-        // clone the call to prevent a race with another thread stomping\n-        // on the response while being sent.  the original call is\n-        // effectively discarded since the wait count won\u0027t hit zero\n-        call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-            null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      }\n-      connection.sendResponse(this);\n+    private void abortResponse(Call call, Throwable t) throws IOException {\n+      // clone the call to prevent a race with the other thread stomping\n+      // on the response while being sent.  the original call is\n+      // effectively discarded since the wait count won\u0027t hit zero\n+      call \u003d new Call(call);\n+      setupResponse(call,\n+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+          null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      call.sendResponse();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void abortResponse(Call call, Throwable t) throws IOException {\n      // clone the call to prevent a race with the other thread stomping\n      // on the response while being sent.  the original call is\n      // effectively discarded since the wait count won\u0027t hit zero\n      call \u003d new Call(call);\n      setupResponse(call,\n          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n          null, t.getClass().getName(), StringUtils.stringifyException(t));\n      call.sendResponse();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:50 AM",
          "commitNameOld": "1360bd2d545134b582e70f2add33a105710dc80b",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,10 @@\n-    void doResponse(Throwable t) throws IOException {\n-      RpcCall call \u003d this;\n-      if (t !\u003d null) {\n-        // clone the call to prevent a race with another thread stomping\n-        // on the response while being sent.  the original call is\n-        // effectively discarded since the wait count won\u0027t hit zero\n-        call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-            null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      }\n-      connection.sendResponse(this);\n+    private void abortResponse(Call call, Throwable t) throws IOException {\n+      // clone the call to prevent a race with the other thread stomping\n+      // on the response while being sent.  the original call is\n+      // effectively discarded since the wait count won\u0027t hit zero\n+      call \u003d new Call(call);\n+      setupResponse(call,\n+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+          null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      call.sendResponse();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void abortResponse(Call call, Throwable t) throws IOException {\n      // clone the call to prevent a race with the other thread stomping\n      // on the response while being sent.  the original call is\n      // effectively discarded since the wait count won\u0027t hit zero\n      call \u003d new Call(call);\n      setupResponse(call,\n          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n          null, t.getClass().getName(), StringUtils.stringifyException(t));\n      call.sendResponse();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "doResponse",
            "newValue": "abortResponse"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:50 AM",
          "commitNameOld": "1360bd2d545134b582e70f2add33a105710dc80b",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,10 @@\n-    void doResponse(Throwable t) throws IOException {\n-      RpcCall call \u003d this;\n-      if (t !\u003d null) {\n-        // clone the call to prevent a race with another thread stomping\n-        // on the response while being sent.  the original call is\n-        // effectively discarded since the wait count won\u0027t hit zero\n-        call \u003d new RpcCall(this);\n-        setupResponse(call,\n-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-            null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      }\n-      connection.sendResponse(this);\n+    private void abortResponse(Call call, Throwable t) throws IOException {\n+      // clone the call to prevent a race with the other thread stomping\n+      // on the response while being sent.  the original call is\n+      // effectively discarded since the wait count won\u0027t hit zero\n+      call \u003d new Call(call);\n+      setupResponse(call,\n+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+          null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      call.sendResponse();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void abortResponse(Call call, Throwable t) throws IOException {\n      // clone the call to prevent a race with the other thread stomping\n      // on the response while being sent.  the original call is\n      // effectively discarded since the wait count won\u0027t hit zero\n      call \u003d new Call(call);\n      setupResponse(call,\n          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n          null, t.getClass().getName(), StringUtils.stringifyException(t));\n      call.sendResponse();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[t-Throwable]",
            "newValue": "[call-Call, t-Throwable]"
          }
        }
      ]
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:00 AM",
          "commitNameOld": "4da5000dd33cf013e7212848ed2c44f1e60e860e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(this);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(this);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
            "oldMethodName": "abortResponse",
            "newMethodName": "doResponse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:00 AM",
          "commitNameOld": "4da5000dd33cf013e7212848ed2c44f1e60e860e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(this);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(this);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:00 AM",
          "commitNameOld": "4da5000dd33cf013e7212848ed2c44f1e60e860e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(this);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(this);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:00 AM",
          "commitNameOld": "4da5000dd33cf013e7212848ed2c44f1e60e860e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(this);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(this);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "abortResponse",
            "newValue": "doResponse"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:00 AM",
          "commitNameOld": "4da5000dd33cf013e7212848ed2c44f1e60e860e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,13 @@\n-    private void abortResponse(Call call, Throwable t) throws IOException {\n-      // clone the call to prevent a race with the other thread stomping\n-      // on the response while being sent.  the original call is\n-      // effectively discarded since the wait count won\u0027t hit zero\n-      call \u003d new Call(call);\n-      setupResponse(call,\n-          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n-          null, t.getClass().getName(), StringUtils.stringifyException(t));\n-      call.sendResponse();\n+    void doResponse(Throwable t) throws IOException {\n+      RpcCall call \u003d this;\n+      if (t !\u003d null) {\n+        // clone the call to prevent a race with another thread stomping\n+        // on the response while being sent.  the original call is\n+        // effectively discarded since the wait count won\u0027t hit zero\n+        call \u003d new RpcCall(this);\n+        setupResponse(call,\n+            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+            null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      }\n+      connection.sendResponse(this);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void doResponse(Throwable t) throws IOException {\n      RpcCall call \u003d this;\n      if (t !\u003d null) {\n        // clone the call to prevent a race with another thread stomping\n        // on the response while being sent.  the original call is\n        // effectively discarded since the wait count won\u0027t hit zero\n        call \u003d new RpcCall(this);\n        setupResponse(call,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n            null, t.getClass().getName(), StringUtils.stringifyException(t));\n      }\n      connection.sendResponse(this);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[call-Call, t-Throwable]",
            "newValue": "[t-Throwable]"
          }
        }
      ]
    },
    "2d8227605fe22c1c05f31729edc8939013763c05": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 7:31 AM",
      "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,10 @@\n+    private void abortResponse(Call call, Throwable t) throws IOException {\n+      // clone the call to prevent a race with the other thread stomping\n+      // on the response while being sent.  the original call is\n+      // effectively discarded since the wait count won\u0027t hit zero\n+      call \u003d new Call(call);\n+      setupResponse(call,\n+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n+          null, t.getClass().getName(), StringUtils.stringifyException(t));\n+      call.sendResponse();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void abortResponse(Call call, Throwable t) throws IOException {\n      // clone the call to prevent a race with the other thread stomping\n      // on the response while being sent.  the original call is\n      // effectively discarded since the wait count won\u0027t hit zero\n      call \u003d new Call(call);\n      setupResponse(call,\n          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,\n          null, t.getClass().getName(), StringUtils.stringifyException(t));\n      call.sendResponse();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}