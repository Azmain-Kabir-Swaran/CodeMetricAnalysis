{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "connect",
  "functionId": "connect___op-HttpOpParam.Op(modifiers-final)__url-URL(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 745,
  "functionEndLine": 781,
  "numCommitsSeen": 258,
  "timeTaken": 5200,
  "changeHistory": [
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "5d1889a66d91608d34ca9411fb6e9161e637e9d3",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
    "53cb787d48eead93bfa47faac469d88ec464146a",
    "cb787968c5deac3dd5d10291aae39c36656a1487"
  ],
  "changeHistoryShort": {
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ybodychange",
    "5d1889a66d91608d34ca9411fb6e9161e637e9d3": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "e4ee1d111be15ae6cca2f79be7ca73c204288d2b": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "53cb787d48eead93bfa47faac469d88ec464146a": "Ybodychange",
    "cb787968c5deac3dd5d10291aae39c36656a1487": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/12/17 10:40 AM",
      "commitNameOld": "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 56.2,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n     private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n         throws IOException {\n       final HttpURLConnection conn \u003d\n           (HttpURLConnection)connectionFactory.openConnection(url);\n       final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n       if (restCsrfCustomHeader !\u003d null \u0026\u0026\n           !restCsrfMethodsToIgnore.contains(op.getType().name())) {\n         // The value of the header is unimportant.  Only its presence matters.\n         conn.setRequestProperty(restCsrfCustomHeader, \"\\\"\\\"\");\n       }\n+      conn.setRequestProperty(EZ_HEADER, \"true\");\n       switch (op.getType()) {\n       // if not sending a message body for a POST or PUT operation, need\n       // to ensure the server/proxy knows this\n       case POST:\n       case PUT: {\n         conn.setDoOutput(true);\n         if (!doOutput) {\n           // explicitly setting content-length to 0 won\u0027t do spnego!!\n           // opening and closing the stream will send \"Content-Length: 0\"\n           conn.getOutputStream().close();\n         } else {\n           conn.setRequestProperty(\"Content-Type\",\n               MediaType.APPLICATION_OCTET_STREAM);\n           conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n         }\n         break;\n       }\n       default:\n         conn.setDoOutput(doOutput);\n         break;\n       }\n       conn.connect();\n       return conn;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      if (restCsrfCustomHeader !\u003d null \u0026\u0026\n          !restCsrfMethodsToIgnore.contains(op.getType().name())) {\n        // The value of the header is unimportant.  Only its presence matters.\n        conn.setRequestProperty(restCsrfCustomHeader, \"\\\"\\\"\");\n      }\n      conn.setRequestProperty(EZ_HEADER, \"true\");\n      switch (op.getType()) {\n      // if not sending a message body for a POST or PUT operation, need\n      // to ensure the server/proxy knows this\n      case POST:\n      case PUT: {\n        conn.setDoOutput(true);\n        if (!doOutput) {\n          // explicitly setting content-length to 0 won\u0027t do spnego!!\n          // opening and closing the stream will send \"Content-Length: 0\"\n          conn.getOutputStream().close();\n        } else {\n          conn.setRequestProperty(\"Content-Type\",\n              MediaType.APPLICATION_OCTET_STREAM);\n          conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n        }\n        break;\n      }\n      default:\n        conn.setDoOutput(doOutput);\n        break;\n      }\n      conn.connect();\n      return conn;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "5d1889a66d91608d34ca9411fb6e9161e637e9d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9711. Integrate CSRF prevention filter in WebHDFS. Contributed by Chris Nauroth.\n",
      "commitDate": "18/02/16 10:07 AM",
      "commitName": "5d1889a66d91608d34ca9411fb6e9161e637e9d3",
      "commitAuthor": "cnauroth",
      "commitDateOld": "04/02/16 11:34 AM",
      "commitNameOld": "1bcfab8e7fd8562f1829ac484d2f6c91f7afe3d6",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 13.94,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,36 @@\n     private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n         throws IOException {\n       final HttpURLConnection conn \u003d\n           (HttpURLConnection)connectionFactory.openConnection(url);\n       final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n+      if (restCsrfCustomHeader !\u003d null \u0026\u0026\n+          !restCsrfMethodsToIgnore.contains(op.getType().name())) {\n+        // The value of the header is unimportant.  Only its presence matters.\n+        conn.setRequestProperty(restCsrfCustomHeader, \"\\\"\\\"\");\n+      }\n       switch (op.getType()) {\n       // if not sending a message body for a POST or PUT operation, need\n       // to ensure the server/proxy knows this\n       case POST:\n       case PUT: {\n         conn.setDoOutput(true);\n         if (!doOutput) {\n           // explicitly setting content-length to 0 won\u0027t do spnego!!\n           // opening and closing the stream will send \"Content-Length: 0\"\n           conn.getOutputStream().close();\n         } else {\n           conn.setRequestProperty(\"Content-Type\",\n               MediaType.APPLICATION_OCTET_STREAM);\n           conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n         }\n         break;\n       }\n       default:\n         conn.setDoOutput(doOutput);\n         break;\n       }\n       conn.connect();\n       return conn;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      if (restCsrfCustomHeader !\u003d null \u0026\u0026\n          !restCsrfMethodsToIgnore.contains(op.getType().name())) {\n        // The value of the header is unimportant.  Only its presence matters.\n        conn.setRequestProperty(restCsrfCustomHeader, \"\\\"\\\"\");\n      }\n      switch (op.getType()) {\n      // if not sending a message body for a POST or PUT operation, need\n      // to ensure the server/proxy knows this\n      case POST:\n      case PUT: {\n        conn.setDoOutput(true);\n        if (!doOutput) {\n          // explicitly setting content-length to 0 won\u0027t do spnego!!\n          // opening and closing the stream will send \"Content-Length: 0\"\n          conn.getOutputStream().close();\n        } else {\n          conn.setRequestProperty(\"Content-Type\",\n              MediaType.APPLICATION_OCTET_STREAM);\n          conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n        }\n        break;\n      }\n      default:\n        conn.setDoOutput(doOutput);\n        break;\n      }\n      conn.connect();\n      return conn;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:52 PM",
      "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n     private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n         throws IOException {\n       final HttpURLConnection conn \u003d\n           (HttpURLConnection)connectionFactory.openConnection(url);\n       final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n       switch (op.getType()) {\n-        // if not sending a message body for a POST or PUT operation, need\n-        // to ensure the server/proxy knows this\n-        case POST:\n-        case PUT: {\n-          conn.setDoOutput(true);\n-          if (!doOutput) {\n-            // explicitly setting content-length to 0 won\u0027t do spnego!!\n-            // opening and closing the stream will send \"Content-Length: 0\"\n-            conn.getOutputStream().close();\n-          } else {\n-            conn.setRequestProperty(\"Content-Type\",\n-                MediaType.APPLICATION_OCTET_STREAM);\n-            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n-          }\n-          break;\n+      // if not sending a message body for a POST or PUT operation, need\n+      // to ensure the server/proxy knows this\n+      case POST:\n+      case PUT: {\n+        conn.setDoOutput(true);\n+        if (!doOutput) {\n+          // explicitly setting content-length to 0 won\u0027t do spnego!!\n+          // opening and closing the stream will send \"Content-Length: 0\"\n+          conn.getOutputStream().close();\n+        } else {\n+          conn.setRequestProperty(\"Content-Type\",\n+              MediaType.APPLICATION_OCTET_STREAM);\n+          conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n         }\n-        default: {\n-          conn.setDoOutput(doOutput);\n-          break;\n-        }\n+        break;\n+      }\n+      default:\n+        conn.setDoOutput(doOutput);\n+        break;\n       }\n       conn.connect();\n       return conn;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      switch (op.getType()) {\n      // if not sending a message body for a POST or PUT operation, need\n      // to ensure the server/proxy knows this\n      case POST:\n      case PUT: {\n        conn.setDoOutput(true);\n        if (!doOutput) {\n          // explicitly setting content-length to 0 won\u0027t do spnego!!\n          // opening and closing the stream will send \"Content-Length: 0\"\n          conn.getOutputStream().close();\n        } else {\n          conn.setRequestProperty(\"Content-Type\",\n              MediaType.APPLICATION_OCTET_STREAM);\n          conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n        }\n        break;\n      }\n      default:\n        conn.setDoOutput(doOutput);\n        break;\n      }\n      conn.connect();\n      return conn;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n         throws IOException {\n       final HttpURLConnection conn \u003d\n           (HttpURLConnection)connectionFactory.openConnection(url);\n       final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n       switch (op.getType()) {\n         // if not sending a message body for a POST or PUT operation, need\n-        // to ensure the server/proxy knows this \n+        // to ensure the server/proxy knows this\n         case POST:\n         case PUT: {\n           conn.setDoOutput(true);\n           if (!doOutput) {\n             // explicitly setting content-length to 0 won\u0027t do spnego!!\n             // opening and closing the stream will send \"Content-Length: 0\"\n             conn.getOutputStream().close();\n           } else {\n             conn.setRequestProperty(\"Content-Type\",\n                 MediaType.APPLICATION_OCTET_STREAM);\n             conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n           }\n           break;\n         }\n         default: {\n           conn.setDoOutput(doOutput);\n           break;\n         }\n       }\n       conn.connect();\n       return conn;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      switch (op.getType()) {\n        // if not sending a message body for a POST or PUT operation, need\n        // to ensure the server/proxy knows this\n        case POST:\n        case PUT: {\n          conn.setDoOutput(true);\n          if (!doOutput) {\n            // explicitly setting content-length to 0 won\u0027t do spnego!!\n            // opening and closing the stream will send \"Content-Length: 0\"\n            conn.getOutputStream().close();\n          } else {\n            conn.setRequestProperty(\"Content-Type\",\n                MediaType.APPLICATION_OCTET_STREAM);\n            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n          }\n          break;\n        }\n        default: {\n          conn.setDoOutput(doOutput);\n          break;\n        }\n      }\n      conn.connect();\n      return conn;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "e4ee1d111be15ae6cca2f79be7ca73c204288d2b": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 9:40 AM",
      "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
      "commitAuthor": "Jonathan Turner Eagles",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 9:40 AM",
          "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
          "commitAuthor": "Jonathan Turner Eagles",
          "commitDateOld": "13/05/14 9:19 AM",
          "commitNameOld": "33ade356b35223654a077103ed7fbed89f3f2321",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,32 @@\n-    private void connect(boolean doOutput) throws IOException {\n+    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n+        throws IOException {\n+      final HttpURLConnection conn \u003d\n+          (HttpURLConnection)connectionFactory.openConnection(url);\n+      final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n       switch (op.getType()) {\n         // if not sending a message body for a POST or PUT operation, need\n         // to ensure the server/proxy knows this \n         case POST:\n         case PUT: {\n           conn.setDoOutput(true);\n           if (!doOutput) {\n             // explicitly setting content-length to 0 won\u0027t do spnego!!\n             // opening and closing the stream will send \"Content-Length: 0\"\n             conn.getOutputStream().close();\n+          } else {\n+            conn.setRequestProperty(\"Content-Type\",\n+                MediaType.APPLICATION_OCTET_STREAM);\n+            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n           }\n           break;\n         }\n         default: {\n           conn.setDoOutput(doOutput);\n           break;\n         }\n       }\n       conn.connect();\n+      return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      switch (op.getType()) {\n        // if not sending a message body for a POST or PUT operation, need\n        // to ensure the server/proxy knows this \n        case POST:\n        case PUT: {\n          conn.setDoOutput(true);\n          if (!doOutput) {\n            // explicitly setting content-length to 0 won\u0027t do spnego!!\n            // opening and closing the stream will send \"Content-Length: 0\"\n            conn.getOutputStream().close();\n          } else {\n            conn.setRequestProperty(\"Content-Type\",\n                MediaType.APPLICATION_OCTET_STREAM);\n            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n          }\n          break;\n        }\n        default: {\n          conn.setDoOutput(doOutput);\n          break;\n        }\n      }\n      conn.connect();\n      return conn;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[doOutput-boolean]",
            "newValue": "[op-HttpOpParam.Op(modifiers-final), url-URL(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 9:40 AM",
          "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
          "commitAuthor": "Jonathan Turner Eagles",
          "commitDateOld": "13/05/14 9:19 AM",
          "commitNameOld": "33ade356b35223654a077103ed7fbed89f3f2321",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,32 @@\n-    private void connect(boolean doOutput) throws IOException {\n+    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n+        throws IOException {\n+      final HttpURLConnection conn \u003d\n+          (HttpURLConnection)connectionFactory.openConnection(url);\n+      final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n       switch (op.getType()) {\n         // if not sending a message body for a POST or PUT operation, need\n         // to ensure the server/proxy knows this \n         case POST:\n         case PUT: {\n           conn.setDoOutput(true);\n           if (!doOutput) {\n             // explicitly setting content-length to 0 won\u0027t do spnego!!\n             // opening and closing the stream will send \"Content-Length: 0\"\n             conn.getOutputStream().close();\n+          } else {\n+            conn.setRequestProperty(\"Content-Type\",\n+                MediaType.APPLICATION_OCTET_STREAM);\n+            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n           }\n           break;\n         }\n         default: {\n           conn.setDoOutput(doOutput);\n           break;\n         }\n       }\n       conn.connect();\n+      return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      switch (op.getType()) {\n        // if not sending a message body for a POST or PUT operation, need\n        // to ensure the server/proxy knows this \n        case POST:\n        case PUT: {\n          conn.setDoOutput(true);\n          if (!doOutput) {\n            // explicitly setting content-length to 0 won\u0027t do spnego!!\n            // opening and closing the stream will send \"Content-Length: 0\"\n            conn.getOutputStream().close();\n          } else {\n            conn.setRequestProperty(\"Content-Type\",\n                MediaType.APPLICATION_OCTET_STREAM);\n            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n          }\n          break;\n        }\n        default: {\n          conn.setDoOutput(doOutput);\n          break;\n        }\n      }\n      conn.connect();\n      return conn;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "HttpURLConnection"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 9:40 AM",
          "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
          "commitAuthor": "Jonathan Turner Eagles",
          "commitDateOld": "13/05/14 9:19 AM",
          "commitNameOld": "33ade356b35223654a077103ed7fbed89f3f2321",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,32 @@\n-    private void connect(boolean doOutput) throws IOException {\n+    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n+        throws IOException {\n+      final HttpURLConnection conn \u003d\n+          (HttpURLConnection)connectionFactory.openConnection(url);\n+      final boolean doOutput \u003d op.getDoOutput();\n       conn.setRequestMethod(op.getType().toString());\n       conn.setInstanceFollowRedirects(false);\n       switch (op.getType()) {\n         // if not sending a message body for a POST or PUT operation, need\n         // to ensure the server/proxy knows this \n         case POST:\n         case PUT: {\n           conn.setDoOutput(true);\n           if (!doOutput) {\n             // explicitly setting content-length to 0 won\u0027t do spnego!!\n             // opening and closing the stream will send \"Content-Length: 0\"\n             conn.getOutputStream().close();\n+          } else {\n+            conn.setRequestProperty(\"Content-Type\",\n+                MediaType.APPLICATION_OCTET_STREAM);\n+            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n           }\n           break;\n         }\n         default: {\n           conn.setDoOutput(doOutput);\n           break;\n         }\n       }\n       conn.connect();\n+      return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private HttpURLConnection connect(final HttpOpParam.Op op, final URL url)\n        throws IOException {\n      final HttpURLConnection conn \u003d\n          (HttpURLConnection)connectionFactory.openConnection(url);\n      final boolean doOutput \u003d op.getDoOutput();\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      switch (op.getType()) {\n        // if not sending a message body for a POST or PUT operation, need\n        // to ensure the server/proxy knows this \n        case POST:\n        case PUT: {\n          conn.setDoOutput(true);\n          if (!doOutput) {\n            // explicitly setting content-length to 0 won\u0027t do spnego!!\n            // opening and closing the stream will send \"Content-Length: 0\"\n            conn.getOutputStream().close();\n          } else {\n            conn.setRequestProperty(\"Content-Type\",\n                MediaType.APPLICATION_OCTET_STREAM);\n            conn.setChunkedStreamingMode(32 \u003c\u003c 10); //32kB-chunk\n          }\n          break;\n        }\n        default: {\n          conn.setDoOutput(doOutput);\n          break;\n        }\n      }\n      conn.connect();\n      return conn;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "53cb787d48eead93bfa47faac469d88ec464146a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6217. Webhdfs PUT operations may not work via a http proxy. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589528 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/14 3:00 PM",
      "commitName": "53cb787d48eead93bfa47faac469d88ec464146a",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "07/04/14 6:39 PM",
      "commitNameOld": "bcf1f33acdb7b602998b6e99277d6e78e78745da",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 15.85,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,23 @@\n     private void connect(boolean doOutput) throws IOException {\n       conn.setRequestMethod(op.getType().toString());\n-      conn.setDoOutput(doOutput);\n       conn.setInstanceFollowRedirects(false);\n+      switch (op.getType()) {\n+        // if not sending a message body for a POST or PUT operation, need\n+        // to ensure the server/proxy knows this \n+        case POST:\n+        case PUT: {\n+          conn.setDoOutput(true);\n+          if (!doOutput) {\n+            // explicitly setting content-length to 0 won\u0027t do spnego!!\n+            // opening and closing the stream will send \"Content-Length: 0\"\n+            conn.getOutputStream().close();\n+          }\n+          break;\n+        }\n+        default: {\n+          conn.setDoOutput(doOutput);\n+          break;\n+        }\n+      }\n       conn.connect();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void connect(boolean doOutput) throws IOException {\n      conn.setRequestMethod(op.getType().toString());\n      conn.setInstanceFollowRedirects(false);\n      switch (op.getType()) {\n        // if not sending a message body for a POST or PUT operation, need\n        // to ensure the server/proxy knows this \n        case POST:\n        case PUT: {\n          conn.setDoOutput(true);\n          if (!doOutput) {\n            // explicitly setting content-length to 0 won\u0027t do spnego!!\n            // opening and closing the stream will send \"Content-Length: 0\"\n            conn.getOutputStream().close();\n          }\n          break;\n        }\n        default: {\n          conn.setDoOutput(doOutput);\n          break;\n        }\n      }\n      conn.connect();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "cb787968c5deac3dd5d10291aae39c36656a1487": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 6:41 PM",
      "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,6 @@\n+    private void connect(boolean doOutput) throws IOException {\n+      conn.setRequestMethod(op.getType().toString());\n+      conn.setDoOutput(doOutput);\n+      conn.setInstanceFollowRedirects(false);\n+      conn.connect();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void connect(boolean doOutput) throws IOException {\n      conn.setRequestMethod(op.getType().toString());\n      conn.setDoOutput(doOutput);\n      conn.setInstanceFollowRedirects(false);\n      conn.connect();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}