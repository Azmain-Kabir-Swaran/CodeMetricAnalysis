{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "setupBadVersionResponse",
  "functionId": "setupBadVersionResponse___clientVersion-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2390,
  "functionEndLine": 2419,
  "numCommitsSeen": 205,
  "timeTaken": 7403,
  "changeHistory": [
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "2d8227605fe22c1c05f31729edc8939013763c05",
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
    "8724ceb2359af66c800043e665c17a2a30981c7d",
    "725623534ce7ab20c28af6e0cdf57bd7278551dd",
    "357472001725e786f28b27560bac8aca54c3c983",
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "90a926261184cbdbea4bd487918990d5875da440"
  ],
  "changeHistoryShort": {
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": "Ybodychange",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Ybodychange",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Ybodychange",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Ybodychange",
    "2d8227605fe22c1c05f31729edc8939013763c05": "Ybodychange",
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3": "Ybodychange",
    "8724ceb2359af66c800043e665c17a2a30981c7d": "Ybodychange",
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": "Ybodychange",
    "357472001725e786f28b27560bac8aca54c3c983": "Ybodychange",
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "90a926261184cbdbea4bd487918990d5875da440": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 8:47 AM",
      "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "28/11/16 9:07 PM",
      "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 72.49,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n         RpcCall fakeCall \u003d new RpcCall(this, -1);\n         setupResponse(fakeCall,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n-        fakeCall.sendResponse();\n+        sendResponse(fakeCall);\n       } else if (clientVersion \u003e\u003d 3) {\n         RpcCall fakeCall \u003d new RpcCall(this, -1);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n-        fakeCall.sendResponse();\n+        sendResponse(fakeCall);\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n         RpcCall fakeCall \u003d new RpcCall(this, 0);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n-        fakeCall.sendResponse();\n+        sendResponse(fakeCall);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        RpcCall fakeCall \u003d new RpcCall(this, -1);\n        setupResponse(fakeCall,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        sendResponse(fakeCall);\n      } else if (clientVersion \u003e\u003d 3) {\n        RpcCall fakeCall \u003d new RpcCall(this, -1);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        sendResponse(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        RpcCall fakeCall \u003d new RpcCall(this, 0);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        sendResponse(fakeCall);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 2:04 PM",
      "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,30 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n-        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n-            this);\n+        RpcCall fakeCall \u003d new RpcCall(this, -1);\n         setupResponse(fakeCall,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n         fakeCall.sendResponse();\n       } else if (clientVersion \u003e\u003d 3) {\n-        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n-            this);\n+        RpcCall fakeCall \u003d new RpcCall(this, -1);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         fakeCall.sendResponse();\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n-        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n-            this);\n+        RpcCall fakeCall \u003d new RpcCall(this, 0);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         fakeCall.sendResponse();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        RpcCall fakeCall \u003d new RpcCall(this, -1);\n        setupResponse(fakeCall,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003e\u003d 3) {\n        RpcCall fakeCall \u003d new RpcCall(this, -1);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        RpcCall fakeCall \u003d new RpcCall(this, 0);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        fakeCall.sendResponse();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 9:44 AM",
      "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n-        RpcCall fakeCall \u003d new RpcCall(this, -1);\n+        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n+            this);\n         setupResponse(fakeCall,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n         fakeCall.sendResponse();\n       } else if (clientVersion \u003e\u003d 3) {\n-        RpcCall fakeCall \u003d new RpcCall(this, -1);\n+        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n+            this);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         fakeCall.sendResponse();\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n-        RpcCall fakeCall \u003d new RpcCall(this, 0);\n+        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n+            this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         fakeCall.sendResponse();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        setupResponse(fakeCall,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        fakeCall.sendResponse();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 11:22 AM",
      "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 21.93,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,30 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n-        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n-            this);\n+        RpcCall fakeCall \u003d new RpcCall(this, -1);\n         setupResponse(fakeCall,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n         fakeCall.sendResponse();\n       } else if (clientVersion \u003e\u003d 3) {\n-        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n-            this);\n+        RpcCall fakeCall \u003d new RpcCall(this, -1);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         fakeCall.sendResponse();\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n-        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n-            this);\n+        RpcCall fakeCall \u003d new RpcCall(this, 0);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         fakeCall.sendResponse();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        RpcCall fakeCall \u003d new RpcCall(this, -1);\n        setupResponse(fakeCall,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003e\u003d 3) {\n        RpcCall fakeCall \u003d new RpcCall(this, -1);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        RpcCall fakeCall \u003d new RpcCall(this, 0);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        fakeCall.sendResponse();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "2d8227605fe22c1c05f31729edc8939013763c05": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 7:31 AM",
      "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/08/16 8:40 AM",
      "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n         Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n             this);\n-        setupResponse(buffer, fakeCall, \n+        setupResponse(fakeCall,\n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n         fakeCall.sendResponse();\n       } else if (clientVersion \u003e\u003d 3) {\n         Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n             this);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         fakeCall.sendResponse();\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n         Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n             this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         fakeCall.sendResponse();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        setupResponse(fakeCall,\n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        fakeCall.sendResponse();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10300. Allowed deferred sending of call responses. (Daryn Sharp via yliu)\n",
      "commitDate": "12/10/15 1:09 AM",
      "commitName": "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
      "commitAuthor": "yliu",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 13.73,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,33 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n         Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n             this);\n         setupResponse(buffer, fakeCall, \n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n-        responder.doRespond(fakeCall);\n+        fakeCall.sendResponse();\n       } else if (clientVersion \u003e\u003d 3) {\n         Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n             this);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n-        responder.doRespond(fakeCall);\n+        fakeCall.sendResponse();\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n         Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n             this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n-        \n-        responder.doRespond(fakeCall);\n+        fakeCall.sendResponse();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        setupResponse(buffer, fakeCall, \n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        fakeCall.sendResponse();\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        fakeCall.sendResponse();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "8724ceb2359af66c800043e665c17a2a30981c7d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9717. Add retry attempt count to the RPC requests. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 4:44 PM",
      "commitName": "8724ceb2359af66c800043e665c17a2a30981c7d",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "17/07/13 9:42 PM",
      "commitNameOld": "7ec67c5118e8d13e2cb0ab09d04f0609b645a676",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n-        Call fakeCall \u003d  new Call(-1, null, this);\n+        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n+            this);\n         setupResponse(buffer, fakeCall, \n             RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n         responder.doRespond(fakeCall);\n       } else if (clientVersion \u003e\u003d 3) {\n-        Call fakeCall \u003d  new Call(-1, null, this);\n+        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n+            this);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         responder.doRespond(fakeCall);\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n-        Call fakeCall \u003d  new Call(0, null, this);\n+        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n+            this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         \n         responder.doRespond(fakeCall);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        setupResponse(buffer, fakeCall, \n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d new Call(-1, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d new Call(0, RpcConstants.INVALID_RETRY_COUNT, null,\n            this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 10:51 AM",
      "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "27/03/13 11:51 AM",
      "commitNameOld": "fc0a4de670c3e6dcf5d30305d3969fe4946a0fed",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 37.96,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 9) {\n         // Versions \u003e\u003e9  understand the normal response\n         Call fakeCall \u003d  new Call(-1, null, this);\n-        setupResponse(buffer, fakeCall, RpcStatusProto.FATAL,\n+        setupResponse(buffer, fakeCall, \n+            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n             null, VersionMismatch.class.getName(), errMsg);\n         responder.doRespond(fakeCall);\n       } else if (clientVersion \u003e\u003d 3) {\n         Call fakeCall \u003d  new Call(-1, null, this);\n         // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         responder.doRespond(fakeCall);\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n         Call fakeCall \u003d  new Call(0, null, this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         \n         responder.doRespond(fakeCall);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        Call fakeCall \u003d  new Call(-1, null, this);\n        setupResponse(buffer, fakeCall, \n            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,\n            null, VersionMismatch.class.getName(), errMsg);\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "357472001725e786f28b27560bac8aca54c3c983": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9380 Add totalLength to rpc response  (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459392 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/13 9:41 AM",
      "commitName": "357472001725e786f28b27560bac8aca54c3c983",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "08/03/13 1:47 PM",
      "commitNameOld": "a4c20088b5d35e6f986ece0db3c5e438dd9c3df1",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 12.79,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n-      if (clientVersion \u003e\u003d 3) {\n+      if (clientVersion \u003e\u003d 9) {\n+        // Versions \u003e\u003e9  understand the normal response\n         Call fakeCall \u003d  new Call(-1, null, this);\n-        // Versions 3 and greater can interpret this exception\n-        // response in the same manner\n+        setupResponse(buffer, fakeCall, RpcStatusProto.FATAL,\n+            null, VersionMismatch.class.getName(), errMsg);\n+        responder.doRespond(fakeCall);\n+      } else if (clientVersion \u003e\u003d 3) {\n+        Call fakeCall \u003d  new Call(-1, null, this);\n+        // Versions 3 to 8 use older response\n         setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         responder.doRespond(fakeCall);\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n         Call fakeCall \u003d  new Call(0, null, this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         \n         responder.doRespond(fakeCall);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 9) {\n        // Versions \u003e\u003e9  understand the normal response\n        Call fakeCall \u003d  new Call(-1, null, this);\n        setupResponse(buffer, fakeCall, RpcStatusProto.FATAL,\n            null, VersionMismatch.class.getName(), errMsg);\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 to 8 use older response\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/12 9:56 AM",
      "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "02/05/12 11:35 PM",
      "commitNameOld": "d94899877709836153244c2f0c5f14c37c9d4795",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 8.43,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private void setupBadVersionResponse(int clientVersion) throws IOException {\n       String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n       \" cannot communicate with client version \" + clientVersion;\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       \n       if (clientVersion \u003e\u003d 3) {\n         Call fakeCall \u003d  new Call(-1, null, this);\n         // Versions 3 and greater can interpret this exception\n         // response in the same manner\n-        setupResponse(buffer, fakeCall, Status.FATAL,\n+        setupResponseOldVersionFatal(buffer, fakeCall,\n             null, VersionMismatch.class.getName(), errMsg);\n \n         responder.doRespond(fakeCall);\n       } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n         Call fakeCall \u003d  new Call(0, null, this);\n         DataOutputStream out \u003d new DataOutputStream(buffer);\n         out.writeInt(0); // call ID\n         out.writeBoolean(true); // error\n         WritableUtils.writeString(out, VersionMismatch.class.getName());\n         WritableUtils.writeString(out, errMsg);\n         fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n         \n         responder.doRespond(fakeCall);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 and greater can interpret this exception\n        // response in the same manner\n        setupResponseOldVersionFatal(buffer, fakeCall,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 and greater can interpret this exception\n        // response in the same manner\n        setupResponse(buffer, fakeCall, Status.FATAL,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 and greater can interpret this exception\n        // response in the same manner\n        setupResponse(buffer, fakeCall, Status.FATAL,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 and greater can interpret this exception\n        // response in the same manner\n        setupResponse(buffer, fakeCall, Status.FATAL,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "90a926261184cbdbea4bd487918990d5875da440": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7346. Send back nicer error message to clients using outdated IPC version. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1131254 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/11 2:36 PM",
      "commitName": "90a926261184cbdbea4bd487918990d5875da440",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,25 @@\n+    private void setupBadVersionResponse(int clientVersion) throws IOException {\n+      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n+      \" cannot communicate with client version \" + clientVersion;\n+      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n+      \n+      if (clientVersion \u003e\u003d 3) {\n+        Call fakeCall \u003d  new Call(-1, null, this);\n+        // Versions 3 and greater can interpret this exception\n+        // response in the same manner\n+        setupResponse(buffer, fakeCall, Status.FATAL,\n+            null, VersionMismatch.class.getName(), errMsg);\n+\n+        responder.doRespond(fakeCall);\n+      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n+        Call fakeCall \u003d  new Call(0, null, this);\n+        DataOutputStream out \u003d new DataOutputStream(buffer);\n+        out.writeInt(0); // call ID\n+        out.writeBoolean(true); // error\n+        WritableUtils.writeString(out, VersionMismatch.class.getName());\n+        WritableUtils.writeString(out, errMsg);\n+        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n+        \n+        responder.doRespond(fakeCall);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void setupBadVersionResponse(int clientVersion) throws IOException {\n      String errMsg \u003d \"Server IPC version \" + CURRENT_VERSION +\n      \" cannot communicate with client version \" + clientVersion;\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      \n      if (clientVersion \u003e\u003d 3) {\n        Call fakeCall \u003d  new Call(-1, null, this);\n        // Versions 3 and greater can interpret this exception\n        // response in the same manner\n        setupResponse(buffer, fakeCall, Status.FATAL,\n            null, VersionMismatch.class.getName(), errMsg);\n\n        responder.doRespond(fakeCall);\n      } else if (clientVersion \u003d\u003d 2) { // Hadoop 0.18.3\n        Call fakeCall \u003d  new Call(0, null, this);\n        DataOutputStream out \u003d new DataOutputStream(buffer);\n        out.writeInt(0); // call ID\n        out.writeBoolean(true); // error\n        WritableUtils.writeString(out, VersionMismatch.class.getName());\n        WritableUtils.writeString(out, errMsg);\n        fakeCall.setResponse(ByteBuffer.wrap(buffer.toByteArray()));\n        \n        responder.doRespond(fakeCall);\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}