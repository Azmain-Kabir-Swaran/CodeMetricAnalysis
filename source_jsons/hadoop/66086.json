{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RenameOperation.java",
  "functionName": "removeSourceObjects",
  "functionId": "removeSourceObjects___keys-List__DeleteObjectsRequest.KeyVersion__(modifiers-final)__paths-List__Path__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/RenameOperation.java",
  "functionStartLine": 483,
  "functionEndLine": 510,
  "numCommitsSeen": 3,
  "timeTaken": 1780,
  "changeHistory": [
    "511df1e837b19ccb9271520589452d82d50ac69d",
    "e02eb24e0a9139418120027b694492e0738df20a"
  ],
  "changeHistoryShort": {
    "511df1e837b19ccb9271520589452d82d50ac69d": "Ybodychange",
    "e02eb24e0a9139418120027b694492e0738df20a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "511df1e837b19ccb9271520589452d82d50ac69d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
      "commitDate": "05/09/19 6:25 AM",
      "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "20/06/19 1:56 AM",
      "commitNameOld": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 77.19,
      "commitsBetweenForRepo": 691,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,28 @@\n   private void removeSourceObjects(\n       final List\u003cDeleteObjectsRequest.KeyVersion\u003e keys,\n       final List\u003cPath\u003e paths)\n       throws IOException {\n     List\u003cPath\u003e undeletedObjects \u003d new ArrayList\u003c\u003e();\n     try {\n       // remove the keys\n       // this will update the metastore on a failure, but on\n       // a successful operation leaves the store as is.\n-      callbacks.removeKeys(keys, false, undeletedObjects);\n+      callbacks.removeKeys(\n+          keys,\n+          false,\n+          undeletedObjects,\n+          renameTracker.getOperationState(),\n+          true);\n       // and clear the list.\n     } catch (AmazonClientException | IOException e) {\n       // Failed.\n       // Notify the rename operation.\n       // removeKeys will have already purged the metastore of\n       // all keys it has known to delete; this is just a final\n       // bit of housekeeping and a chance to tune exception\n-      // reporting\n+      // reporting.\n+      // The returned IOE is rethrown.\n       throw renameTracker.deleteFailed(e, paths, undeletedObjects);\n     }\n     renameTracker.sourceObjectsDeleted(paths);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeSourceObjects(\n      final List\u003cDeleteObjectsRequest.KeyVersion\u003e keys,\n      final List\u003cPath\u003e paths)\n      throws IOException {\n    List\u003cPath\u003e undeletedObjects \u003d new ArrayList\u003c\u003e();\n    try {\n      // remove the keys\n      // this will update the metastore on a failure, but on\n      // a successful operation leaves the store as is.\n      callbacks.removeKeys(\n          keys,\n          false,\n          undeletedObjects,\n          renameTracker.getOperationState(),\n          true);\n      // and clear the list.\n    } catch (AmazonClientException | IOException e) {\n      // Failed.\n      // Notify the rename operation.\n      // removeKeys will have already purged the metastore of\n      // all keys it has known to delete; this is just a final\n      // bit of housekeeping and a chance to tune exception\n      // reporting.\n      // The returned IOE is rethrown.\n      throw renameTracker.deleteFailed(e, paths, undeletedObjects);\n    }\n    renameTracker.sourceObjectsDeleted(paths);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/RenameOperation.java",
      "extendedDetails": {}
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,22 @@\n+  private void removeSourceObjects(\n+      final List\u003cDeleteObjectsRequest.KeyVersion\u003e keys,\n+      final List\u003cPath\u003e paths)\n+      throws IOException {\n+    List\u003cPath\u003e undeletedObjects \u003d new ArrayList\u003c\u003e();\n+    try {\n+      // remove the keys\n+      // this will update the metastore on a failure, but on\n+      // a successful operation leaves the store as is.\n+      callbacks.removeKeys(keys, false, undeletedObjects);\n+      // and clear the list.\n+    } catch (AmazonClientException | IOException e) {\n+      // Failed.\n+      // Notify the rename operation.\n+      // removeKeys will have already purged the metastore of\n+      // all keys it has known to delete; this is just a final\n+      // bit of housekeeping and a chance to tune exception\n+      // reporting\n+      throw renameTracker.deleteFailed(e, paths, undeletedObjects);\n+    }\n+    renameTracker.sourceObjectsDeleted(paths);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeSourceObjects(\n      final List\u003cDeleteObjectsRequest.KeyVersion\u003e keys,\n      final List\u003cPath\u003e paths)\n      throws IOException {\n    List\u003cPath\u003e undeletedObjects \u003d new ArrayList\u003c\u003e();\n    try {\n      // remove the keys\n      // this will update the metastore on a failure, but on\n      // a successful operation leaves the store as is.\n      callbacks.removeKeys(keys, false, undeletedObjects);\n      // and clear the list.\n    } catch (AmazonClientException | IOException e) {\n      // Failed.\n      // Notify the rename operation.\n      // removeKeys will have already purged the metastore of\n      // all keys it has known to delete; this is just a final\n      // bit of housekeeping and a chance to tune exception\n      // reporting\n      throw renameTracker.deleteFailed(e, paths, undeletedObjects);\n    }\n    renameTracker.sourceObjectsDeleted(paths);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/RenameOperation.java"
    }
  }
}