{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerNode.java",
  "functionName": "releaseContainer",
  "functionId": "releaseContainer___containerId-ContainerId__releasedByNode-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
  "functionStartLine": 275,
  "functionEndLine": 309,
  "numCommitsSeen": 84,
  "timeTaken": 11650,
  "changeHistory": [
    "752dcce5f4cf0f6ebcb40a61f622f1a885c4bda7",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "752dcce5f4cf0f6ebcb40a61f622f1a885c4bda7": "Ybodychange",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": "Ymultichange(Yparameterchange,Ybodychange)",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ymovefromfile",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "752dcce5f4cf0f6ebcb40a61f622f1a885c4bda7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8511. When AM releases a container, RM removes allocation tags before it is released by NM. (Weiwei Yang via wangda)\n\nChange-Id: I6f9f409f2ef685b405cbff547dea9623bf3322d9\n",
      "commitDate": "16/07/18 10:54 AM",
      "commitName": "752dcce5f4cf0f6ebcb40a61f622f1a885c4bda7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "c23980c4f2cf4c751a99fd310e60149cb32ea7c7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 166.35,
      "commitsBetweenForRepo": 1768,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,35 @@\n   public synchronized void releaseContainer(ContainerId containerId,\n       boolean releasedByNode) {\n     ContainerInfo info \u003d launchedContainers.get(containerId);\n     if (info \u003d\u003d null) {\n       return;\n     }\n     if (!releasedByNode \u0026\u0026 info.launchedOnNode) {\n       // wait until node reports container has completed\n       return;\n     }\n \n     launchedContainers.remove(containerId);\n     Container container \u003d info.container.getContainer();\n+\n+    // We remove allocation tags when a container is actually\n+    // released on NM. This is to avoid running into situation\n+    // when AM releases a container and NM has some delay to\n+    // actually release it, then the tag can still be visible\n+    // at RM so that RM can respect it during scheduling new containers.\n+    if (rmContext !\u003d null \u0026\u0026 rmContext.getAllocationTagsManager() !\u003d null) {\n+      rmContext.getAllocationTagsManager()\n+          .removeContainer(container.getNodeId(),\n+              container.getId(), container.getAllocationTags());\n+    }\n+\n     updateResourceForReleasedContainer(container);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n               + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n               + \", which currently has \" + numContainers + \" containers, \"\n               + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n               + \" available\" + \", release resources\u003d\" + true);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(ContainerId containerId,\n      boolean releasedByNode) {\n    ContainerInfo info \u003d launchedContainers.get(containerId);\n    if (info \u003d\u003d null) {\n      return;\n    }\n    if (!releasedByNode \u0026\u0026 info.launchedOnNode) {\n      // wait until node reports container has completed\n      return;\n    }\n\n    launchedContainers.remove(containerId);\n    Container container \u003d info.container.getContainer();\n\n    // We remove allocation tags when a container is actually\n    // released on NM. This is to avoid running into situation\n    // when AM releases a container and NM has some delay to\n    // actually release it, then the tag can still be visible\n    // at RM so that RM can respect it during scheduling new containers.\n    if (rmContext !\u003d null \u0026\u0026 rmContext.getAllocationTagsManager() !\u003d null) {\n      rmContext.getAllocationTagsManager()\n          .removeContainer(container.getNodeId(),\n              container.getId(), container.getAllocationTags());\n    }\n\n    updateResourceForReleasedContainer(container);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n              + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n              + \", which currently has \" + numContainers + \" containers, \"\n              + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n              + \" available\" + \", release resources\u003d\" + true);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
      "commitDate": "09/01/17 6:14 PM",
      "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
          "commitDate": "09/01/17 6:14 PM",
          "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
          "commitAuthor": "Junping Du",
          "commitDateOld": "27/12/16 12:40 PM",
          "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 13.23,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,24 @@\n-  public synchronized void releaseContainer(Container container) {\n-    if (!isValidContainer(container.getId())) {\n-      LOG.error(\"Invalid container released \" + container);\n+  public synchronized void releaseContainer(ContainerId containerId,\n+      boolean releasedByNode) {\n+    ContainerInfo info \u003d launchedContainers.get(containerId);\n+    if (info \u003d\u003d null) {\n       return;\n     }\n \n-    // Remove the containers from the nodemanger\n-    if (null !\u003d launchedContainers.remove(container.getId())) {\n-      updateResourceForReleasedContainer(container);\n+    if (!releasedByNode \u0026\u0026 info.launchedOnNode) {\n+      // wait until node reports container has completed\n+      return;\n     }\n \n+    launchedContainers.remove(containerId);\n+    Container container \u003d info.container.getContainer();\n+    updateResourceForReleasedContainer(container);\n+\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n               + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n               + \", which currently has \" + numContainers + \" containers, \"\n               + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n               + \" available\" + \", release resources\u003d\" + true);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void releaseContainer(ContainerId containerId,\n      boolean releasedByNode) {\n    ContainerInfo info \u003d launchedContainers.get(containerId);\n    if (info \u003d\u003d null) {\n      return;\n    }\n\n    if (!releasedByNode \u0026\u0026 info.launchedOnNode) {\n      // wait until node reports container has completed\n      return;\n    }\n\n    launchedContainers.remove(containerId);\n    Container container \u003d info.container.getContainer();\n    updateResourceForReleasedContainer(container);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n              + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n              + \", which currently has \" + numContainers + \" containers, \"\n              + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n              + \" available\" + \", release resources\u003d\" + true);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
          "extendedDetails": {
            "oldValue": "[container-Container]",
            "newValue": "[containerId-ContainerId, releasedByNode-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
          "commitDate": "09/01/17 6:14 PM",
          "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
          "commitAuthor": "Junping Du",
          "commitDateOld": "27/12/16 12:40 PM",
          "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 13.23,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,24 @@\n-  public synchronized void releaseContainer(Container container) {\n-    if (!isValidContainer(container.getId())) {\n-      LOG.error(\"Invalid container released \" + container);\n+  public synchronized void releaseContainer(ContainerId containerId,\n+      boolean releasedByNode) {\n+    ContainerInfo info \u003d launchedContainers.get(containerId);\n+    if (info \u003d\u003d null) {\n       return;\n     }\n \n-    // Remove the containers from the nodemanger\n-    if (null !\u003d launchedContainers.remove(container.getId())) {\n-      updateResourceForReleasedContainer(container);\n+    if (!releasedByNode \u0026\u0026 info.launchedOnNode) {\n+      // wait until node reports container has completed\n+      return;\n     }\n \n+    launchedContainers.remove(containerId);\n+    Container container \u003d info.container.getContainer();\n+    updateResourceForReleasedContainer(container);\n+\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n               + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n               + \", which currently has \" + numContainers + \" containers, \"\n               + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n               + \" available\" + \", release resources\u003d\" + true);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void releaseContainer(ContainerId containerId,\n      boolean releasedByNode) {\n    ContainerInfo info \u003d launchedContainers.get(containerId);\n    if (info \u003d\u003d null) {\n      return;\n    }\n\n    if (!releasedByNode \u0026\u0026 info.launchedOnNode) {\n      // wait until node reports container has completed\n      return;\n    }\n\n    launchedContainers.remove(containerId);\n    Container container \u003d info.container.getContainer();\n    updateResourceForReleasedContainer(container);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n              + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n              + \", which currently has \" + numContainers + \" containers, \"\n              + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n              + \" available\" + \", release resources\u003d\" + true);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "26/04/16 5:10 AM",
      "commitNameOld": "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.32,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public synchronized void releaseContainer(Container container) {\n     if (!isValidContainer(container.getId())) {\n       LOG.error(\"Invalid container released \" + container);\n       return;\n     }\n \n     // Remove the containers from the nodemanger\n     if (null !\u003d launchedContainers.remove(container.getId())) {\n-      updateResource(container);\n+      updateResourceForReleasedContainer(container);\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n               + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n               + \", which currently has \" + numContainers + \" containers, \"\n               + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n               + \" available\" + \", release resources\u003d\" + true);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container.getId())) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    // Remove the containers from the nodemanger\n    if (null !\u003d launchedContainers.remove(container.getId())) {\n      updateResourceForReleasedContainer(container);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n              + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n              + \", which currently has \" + numContainers + \" containers, \"\n              + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n              + \" available\" + \", release resources\u003d\" + true);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1297. FairScheduler: Move some logs to debug and check if debug logging is enabled\n",
      "commitDate": "26/04/16 5:10 AM",
      "commitName": "4b1dcbbe0c1d0036f65283be4b25d9b2211abed3",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 40.51,
      "commitsBetweenForRepo": 236,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n   public synchronized void releaseContainer(Container container) {\n     if (!isValidContainer(container.getId())) {\n       LOG.error(\"Invalid container released \" + container);\n       return;\n     }\n \n     // Remove the containers from the nodemanger\n     if (null !\u003d launchedContainers.remove(container.getId())) {\n       updateResource(container);\n     }\n \n-    LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n-        + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n-        + \", which currently has \" + numContainers + \" containers, \"\n-        + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n-        + \" available\" + \", release resources\u003d\" + true);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n+              + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n+              + \", which currently has \" + numContainers + \" containers, \"\n+              + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n+              + \" available\" + \", release resources\u003d\" + true);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container.getId())) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    // Remove the containers from the nodemanger\n    if (null !\u003d launchedContainers.remove(container.getId())) {\n      updateResource(container);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Released container \" + container.getId() + \" of capacity \"\n              + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n              + \", which currently has \" + numContainers + \" containers, \"\n              + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n              + \" available\" + \", release resources\u003d\" + true);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/12/15 1:18 PM",
      "commitNameOld": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 73.85,
      "commitsBetweenForRepo": 474,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public synchronized void releaseContainer(Container container) {\n     if (!isValidContainer(container.getId())) {\n       LOG.error(\"Invalid container released \" + container);\n       return;\n     }\n \n-    /* remove the containers from the nodemanger */\n+    // Remove the containers from the nodemanger\n     if (null !\u003d launchedContainers.remove(container.getId())) {\n       updateResource(container);\n     }\n \n     LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n         + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n         + \", which currently has \" + numContainers + \" containers, \"\n-        + getUsedResource() + \" used and \" + getAvailableResource()\n+        + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n         + \" available\" + \", release resources\u003d\" + true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container.getId())) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    // Remove the containers from the nodemanger\n    if (null !\u003d launchedContainers.remove(container.getId())) {\n      updateResource(container);\n    }\n\n    LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n        + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n        + \", which currently has \" + numContainers + \" containers, \"\n        + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/05/14 10:32 PM",
      "commitNameOld": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.9,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public synchronized void releaseContainer(Container container) {\n-    if (!isValidContainer(container)) {\n+    if (!isValidContainer(container.getId())) {\n       LOG.error(\"Invalid container released \" + container);\n       return;\n     }\n \n     /* remove the containers from the nodemanger */\n     if (null !\u003d launchedContainers.remove(container.getId())) {\n       updateResource(container);\n     }\n \n     LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n         + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n         + \", which currently has \" + numContainers + \" containers, \"\n         + getUsedResource() + \" used and \" + getAvailableResource()\n         + \" available\" + \", release resources\u003d\" + true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container.getId())) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    if (null !\u003d launchedContainers.remove(container.getId())) {\n      updateResource(container);\n    }\n\n    LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n        + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n        + \", which currently has \" + numContainers + \" containers, \"\n        + getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/05/14 9:50 PM",
      "commitNameOld": "6b2e615f5fa034d679be0de8fb300b878a2d801a",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public synchronized void releaseContainer(Container container) {\n     if (!isValidContainer(container)) {\n       LOG.error(\"Invalid container released \" + container);\n       return;\n     }\n \n     /* remove the containers from the nodemanger */\n     if (null !\u003d launchedContainers.remove(container.getId())) {\n       updateResource(container);\n     }\n \n-    LOG.info(\"Released container \" + container.getId() + \n-        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n-        \", which currently has \" + numContainers + \" containers, \" + \n-        getUsedResource() + \" used and \" + getAvailableResource()\n+    LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n+        + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n+        + \", which currently has \" + numContainers + \" containers, \"\n+        + getUsedResource() + \" used and \" + getAvailableResource()\n         + \" available\" + \", release resources\u003d\" + true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container)) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    if (null !\u003d launchedContainers.remove(container.getId())) {\n      updateResource(container);\n    }\n\n    LOG.info(\"Released container \" + container.getId() + \" of capacity \"\n        + container.getResource() + \" on host \" + rmNode.getNodeAddress()\n        + \", which currently has \" + numContainers + \" containers, \"\n        + getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
        "oldMethodName": "releaseContainer",
        "newMethodName": "releaseContainer"
      }
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Ybodychange",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "21/06/13 11:28 AM",
      "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   public synchronized void releaseContainer(Container container) {\n     if (!isValidContainer(container)) {\n       LOG.error(\"Invalid container released \" + container);\n       return;\n     }\n \n     /* remove the containers from the nodemanger */\n-    launchedContainers.remove(container.getId());\n-    updateResource(container);\n+    if (null !\u003d launchedContainers.remove(container.getId())) {\n+      updateResource(container);\n+    }\n \n     LOG.info(\"Released container \" + container.getId() + \n         \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n         \", which currently has \" + numContainers + \" containers, \" + \n         getUsedResource() + \" used and \" + getAvailableResource()\n         + \" available\" + \", release resources\u003d\" + true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container)) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    if (null !\u003d launchedContainers.remove(container.getId())) {\n      updateResource(container);\n    }\n\n    LOG.info(\"Released container \" + container.getId() + \n        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n        \", which currently has \" + numContainers + \" containers, \" + \n        getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container)) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    launchedContainers.remove(container.getId());\n    updateResource(container);\n\n    LOG.info(\"Released container \" + container.getId() + \n        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n        \", which currently has \" + numContainers + \" containers, \" + \n        getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/07/12 3:41 PM",
      "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container)) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    launchedContainers.remove(container.getId());\n    updateResource(container);\n\n    LOG.info(\"Released container \" + container.getId() + \n        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n        \", which currently has \" + numContainers + \" containers, \" + \n        getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
        "oldMethodName": "releaseContainer",
        "newMethodName": "releaseContainer"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container)) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    launchedContainers.remove(container.getId());\n    updateResource(container);\n\n    LOG.info(\"Released container \" + container.getId() + \n        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n        \", which currently has \" + numContainers + \" containers, \" + \n        getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  public synchronized void releaseContainer(Container container) {\n+    if (!isValidContainer(container)) {\n+      LOG.error(\"Invalid container released \" + container);\n+      return;\n+    }\n+\n+    /* remove the containers from the nodemanger */\n+    launchedContainers.remove(container.getId());\n+    updateResource(container);\n+\n+    LOG.info(\"Released container \" + container.getId() + \n+        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n+        \", which currently has \" + numContainers + \" containers, \" + \n+        getUsedResource() + \" used and \" + getAvailableResource()\n+        + \" available\" + \", release resources\u003d\" + true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void releaseContainer(Container container) {\n    if (!isValidContainer(container)) {\n      LOG.error(\"Invalid container released \" + container);\n      return;\n    }\n\n    /* remove the containers from the nodemanger */\n    launchedContainers.remove(container.getId());\n    updateResource(container);\n\n    LOG.info(\"Released container \" + container.getId() + \n        \" of capacity \" + container.getResource() + \" on host \" + rmNode.getNodeAddress() + \n        \", which currently has \" + numContainers + \" containers, \" + \n        getUsedResource() + \" used and \" + getAvailableResource()\n        + \" available\" + \", release resources\u003d\" + true);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
    }
  }
}