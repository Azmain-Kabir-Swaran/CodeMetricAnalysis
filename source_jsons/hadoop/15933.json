{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParametersProvider.java",
  "functionName": "getValue",
  "functionId": "getValue___httpContext-HttpContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/wsrs/ParametersProvider.java",
  "functionStartLine": 61,
  "functionEndLine": 105,
  "numCommitsSeen": 6,
  "timeTaken": 1379,
  "changeHistory": [
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "46162a213f60f915df76c60b0412f45a021e1e7e",
    "d263653ae22217439d1740c936d1c78e1644d73e"
  ],
  "changeHistoryShort": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "46162a213f60f915df76c60b0412f45a021e1e7e": "Ybodychange",
    "d263653ae22217439d1740c936d1c78e1644d73e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public Parameters getValue(HttpContext httpContext) {\n     Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n     Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n       httpContext.getRequest().getQueryParameters();\n     String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n         getFirst(driverParam);\n     if (str \u003d\u003d null) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                              driverParam));\n     }\n     Enum op;\n     try {\n-      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n+      op \u003d Enum.valueOf(enumClass, StringUtils.toUpperCase(str));\n     } catch (IllegalArgumentException ex) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Invalid Operation [{0}]\", str));\n     }\n     if (!paramsDef.containsKey(op)) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n     }\n     for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n       Param\u003c?\u003e param \u003d newParam(paramClass);\n       List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n       List\u003cString\u003e ps \u003d queryString.get(param.getName());\n       if (ps !\u003d null) {\n         for (String p : ps) {\n           try {\n             param.parseParam(p);\n           }\n           catch (Exception ex) {\n             throw new IllegalArgumentException(ex.toString(), ex);\n           }\n           paramList.add(param);\n           param \u003d newParam(paramClass);\n         }\n       } else {\n         paramList.add(param);\n       }\n \n       map.put(param.getName(), paramList);\n     }\n     return new Parameters(map);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Parameters getValue(HttpContext httpContext) {\n    Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n    Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n      httpContext.getRequest().getQueryParameters();\n    String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n        getFirst(driverParam);\n    if (str \u003d\u003d null) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                             driverParam));\n    }\n    Enum op;\n    try {\n      op \u003d Enum.valueOf(enumClass, StringUtils.toUpperCase(str));\n    } catch (IllegalArgumentException ex) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Invalid Operation [{0}]\", str));\n    }\n    if (!paramsDef.containsKey(op)) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n    }\n    for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n      Param\u003c?\u003e param \u003d newParam(paramClass);\n      List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n      List\u003cString\u003e ps \u003d queryString.get(param.getName());\n      if (ps !\u003d null) {\n        for (String p : ps) {\n          try {\n            param.parseParam(p);\n          }\n          catch (Exception ex) {\n            throw new IllegalArgumentException(ex.toString(), ex);\n          }\n          paramList.add(param);\n          param \u003d newParam(paramClass);\n        }\n      } else {\n        paramList.add(param);\n      }\n\n      map.put(param.getName(), paramList);\n    }\n    return new Parameters(map);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/wsrs/ParametersProvider.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public Parameters getValue(HttpContext httpContext) {\n     Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n     Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n       httpContext.getRequest().getQueryParameters();\n     String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n         getFirst(driverParam);\n     if (str \u003d\u003d null) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                              driverParam));\n     }\n     Enum op;\n     try {\n-      op \u003d Enum.valueOf(enumClass, str.toUpperCase(Locale.ENGLISH));\n+      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n     } catch (IllegalArgumentException ex) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Invalid Operation [{0}]\", str));\n     }\n     if (!paramsDef.containsKey(op)) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n     }\n     for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n       Param\u003c?\u003e param \u003d newParam(paramClass);\n       List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n       List\u003cString\u003e ps \u003d queryString.get(param.getName());\n       if (ps !\u003d null) {\n         for (String p : ps) {\n           try {\n             param.parseParam(p);\n           }\n           catch (Exception ex) {\n             throw new IllegalArgumentException(ex.toString(), ex);\n           }\n           paramList.add(param);\n           param \u003d newParam(paramClass);\n         }\n       } else {\n         paramList.add(param);\n       }\n \n       map.put(param.getName(), paramList);\n     }\n     return new Parameters(map);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Parameters getValue(HttpContext httpContext) {\n    Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n    Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n      httpContext.getRequest().getQueryParameters();\n    String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n        getFirst(driverParam);\n    if (str \u003d\u003d null) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                             driverParam));\n    }\n    Enum op;\n    try {\n      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n    } catch (IllegalArgumentException ex) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Invalid Operation [{0}]\", str));\n    }\n    if (!paramsDef.containsKey(op)) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n    }\n    for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n      Param\u003c?\u003e param \u003d newParam(paramClass);\n      List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n      List\u003cString\u003e ps \u003d queryString.get(param.getName());\n      if (ps !\u003d null) {\n        for (String p : ps) {\n          try {\n            param.parseParam(p);\n          }\n          catch (Exception ex) {\n            throw new IllegalArgumentException(ex.toString(), ex);\n          }\n          paramList.add(param);\n          param \u003d newParam(paramClass);\n        }\n      } else {\n        paramList.add(param);\n      }\n\n      map.put(param.getName(), paramList);\n    }\n    return new Parameters(map);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/wsrs/ParametersProvider.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/06/14 8:59 AM",
      "commitNameOld": "46162a213f60f915df76c60b0412f45a021e1e7e",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 239.5,
      "commitsBetweenForRepo": 2073,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public Parameters getValue(HttpContext httpContext) {\n     Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n     Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n       httpContext.getRequest().getQueryParameters();\n     String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n         getFirst(driverParam);\n     if (str \u003d\u003d null) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                              driverParam));\n     }\n     Enum op;\n     try {\n-      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n+      op \u003d Enum.valueOf(enumClass, str.toUpperCase(Locale.ENGLISH));\n     } catch (IllegalArgumentException ex) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Invalid Operation [{0}]\", str));\n     }\n     if (!paramsDef.containsKey(op)) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n     }\n     for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n       Param\u003c?\u003e param \u003d newParam(paramClass);\n       List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n       List\u003cString\u003e ps \u003d queryString.get(param.getName());\n       if (ps !\u003d null) {\n         for (String p : ps) {\n           try {\n             param.parseParam(p);\n           }\n           catch (Exception ex) {\n             throw new IllegalArgumentException(ex.toString(), ex);\n           }\n           paramList.add(param);\n           param \u003d newParam(paramClass);\n         }\n       } else {\n         paramList.add(param);\n       }\n \n       map.put(param.getName(), paramList);\n     }\n     return new Parameters(map);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Parameters getValue(HttpContext httpContext) {\n    Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n    Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n      httpContext.getRequest().getQueryParameters();\n    String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n        getFirst(driverParam);\n    if (str \u003d\u003d null) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                             driverParam));\n    }\n    Enum op;\n    try {\n      op \u003d Enum.valueOf(enumClass, str.toUpperCase(Locale.ENGLISH));\n    } catch (IllegalArgumentException ex) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Invalid Operation [{0}]\", str));\n    }\n    if (!paramsDef.containsKey(op)) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n    }\n    for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n      Param\u003c?\u003e param \u003d newParam(paramClass);\n      List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n      List\u003cString\u003e ps \u003d queryString.get(param.getName());\n      if (ps !\u003d null) {\n        for (String p : ps) {\n          try {\n            param.parseParam(p);\n          }\n          catch (Exception ex) {\n            throw new IllegalArgumentException(ex.toString(), ex);\n          }\n          paramList.add(param);\n          param \u003d newParam(paramClass);\n        }\n      } else {\n        paramList.add(param);\n      }\n\n      map.put(param.getName(), paramList);\n    }\n    return new Parameters(map);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/wsrs/ParametersProvider.java",
      "extendedDetails": {}
    },
    "46162a213f60f915df76c60b0412f45a021e1e7e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6430. HTTPFS - Implement XAttr support. (Yi Liu via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:59 AM",
      "commitName": "46162a213f60f915df76c60b0412f45a021e1e7e",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "01/08/12 4:14 PM",
      "commitNameOld": "08e89662170010dd619c0df859c670cb37b630dd",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 691.7,
      "commitsBetweenForRepo": 4284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   public Parameters getValue(HttpContext httpContext) {\n-    Map\u003cString, Param\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Param\u003c?\u003e\u003e();\n-    MultivaluedMap\u003cString, String\u003e queryString \u003d\n+    Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n+    Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n       httpContext.getRequest().getQueryParameters();\n-    String str \u003d queryString.getFirst(driverParam);\n+    String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n+        getFirst(driverParam);\n     if (str \u003d\u003d null) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                              driverParam));\n     }\n     Enum op;\n     try {\n       op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n     } catch (IllegalArgumentException ex) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Invalid Operation [{0}]\", str));\n     }\n     if (!paramsDef.containsKey(op)) {\n       throw new IllegalArgumentException(\n         MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n     }\n     for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n-      Param\u003c?\u003e param;\n-      try {\n-        param \u003d paramClass.newInstance();\n-      } catch (Exception ex) {\n-        throw new UnsupportedOperationException(\n-          MessageFormat.format(\n-            \"Param class [{0}] does not have default constructor\",\n-            paramClass.getName()));\n+      Param\u003c?\u003e param \u003d newParam(paramClass);\n+      List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n+      List\u003cString\u003e ps \u003d queryString.get(param.getName());\n+      if (ps !\u003d null) {\n+        for (String p : ps) {\n+          try {\n+            param.parseParam(p);\n+          }\n+          catch (Exception ex) {\n+            throw new IllegalArgumentException(ex.toString(), ex);\n+          }\n+          paramList.add(param);\n+          param \u003d newParam(paramClass);\n+        }\n+      } else {\n+        paramList.add(param);\n       }\n-      try {\n-        param.parseParam(queryString.getFirst(param.getName()));\n-      }\n-      catch (Exception ex) {\n-        throw new IllegalArgumentException(ex.toString(), ex);\n-      }\n-      map.put(param.getName(), param);\n+\n+      map.put(param.getName(), paramList);\n     }\n     return new Parameters(map);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Parameters getValue(HttpContext httpContext) {\n    Map\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e map \u003d new HashMap\u003cString, List\u003cParam\u003c?\u003e\u003e\u003e();\n    Map\u003cString, List\u003cString\u003e\u003e queryString \u003d\n      httpContext.getRequest().getQueryParameters();\n    String str \u003d ((MultivaluedMap\u003cString, String\u003e) queryString).\n        getFirst(driverParam);\n    if (str \u003d\u003d null) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                             driverParam));\n    }\n    Enum op;\n    try {\n      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n    } catch (IllegalArgumentException ex) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Invalid Operation [{0}]\", str));\n    }\n    if (!paramsDef.containsKey(op)) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n    }\n    for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n      Param\u003c?\u003e param \u003d newParam(paramClass);\n      List\u003cParam\u003c?\u003e\u003e paramList \u003d Lists.newArrayList();\n      List\u003cString\u003e ps \u003d queryString.get(param.getName());\n      if (ps !\u003d null) {\n        for (String p : ps) {\n          try {\n            param.parseParam(p);\n          }\n          catch (Exception ex) {\n            throw new IllegalArgumentException(ex.toString(), ex);\n          }\n          paramList.add(param);\n          param \u003d newParam(paramClass);\n        }\n      } else {\n        paramList.add(param);\n      }\n\n      map.put(param.getName(), paramList);\n    }\n    return new Parameters(map);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/wsrs/ParametersProvider.java",
      "extendedDetails": {}
    },
    "d263653ae22217439d1740c936d1c78e1644d73e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/12 9:06 AM",
      "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,41 @@\n+  public Parameters getValue(HttpContext httpContext) {\n+    Map\u003cString, Param\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Param\u003c?\u003e\u003e();\n+    MultivaluedMap\u003cString, String\u003e queryString \u003d\n+      httpContext.getRequest().getQueryParameters();\n+    String str \u003d queryString.getFirst(driverParam);\n+    if (str \u003d\u003d null) {\n+      throw new IllegalArgumentException(\n+        MessageFormat.format(\"Missing Operation parameter [{0}]\",\n+                             driverParam));\n+    }\n+    Enum op;\n+    try {\n+      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n+    } catch (IllegalArgumentException ex) {\n+      throw new IllegalArgumentException(\n+        MessageFormat.format(\"Invalid Operation [{0}]\", str));\n+    }\n+    if (!paramsDef.containsKey(op)) {\n+      throw new IllegalArgumentException(\n+        MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n+    }\n+    for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n+      Param\u003c?\u003e param;\n+      try {\n+        param \u003d paramClass.newInstance();\n+      } catch (Exception ex) {\n+        throw new UnsupportedOperationException(\n+          MessageFormat.format(\n+            \"Param class [{0}] does not have default constructor\",\n+            paramClass.getName()));\n+      }\n+      try {\n+        param.parseParam(queryString.getFirst(param.getName()));\n+      }\n+      catch (Exception ex) {\n+        throw new IllegalArgumentException(ex.toString(), ex);\n+      }\n+      map.put(param.getName(), param);\n+    }\n+    return new Parameters(map);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Parameters getValue(HttpContext httpContext) {\n    Map\u003cString, Param\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Param\u003c?\u003e\u003e();\n    MultivaluedMap\u003cString, String\u003e queryString \u003d\n      httpContext.getRequest().getQueryParameters();\n    String str \u003d queryString.getFirst(driverParam);\n    if (str \u003d\u003d null) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Missing Operation parameter [{0}]\",\n                             driverParam));\n    }\n    Enum op;\n    try {\n      op \u003d Enum.valueOf(enumClass, str.toUpperCase());\n    } catch (IllegalArgumentException ex) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Invalid Operation [{0}]\", str));\n    }\n    if (!paramsDef.containsKey(op)) {\n      throw new IllegalArgumentException(\n        MessageFormat.format(\"Unsupported Operation [{0}]\", op));\n    }\n    for (Class\u003cParam\u003c?\u003e\u003e paramClass : paramsDef.get(op)) {\n      Param\u003c?\u003e param;\n      try {\n        param \u003d paramClass.newInstance();\n      } catch (Exception ex) {\n        throw new UnsupportedOperationException(\n          MessageFormat.format(\n            \"Param class [{0}] does not have default constructor\",\n            paramClass.getName()));\n      }\n      try {\n        param.parseParam(queryString.getFirst(param.getName()));\n      }\n      catch (Exception ex) {\n        throw new IllegalArgumentException(ex.toString(), ex);\n      }\n      map.put(param.getName(), param);\n    }\n    return new Parameters(map);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/wsrs/ParametersProvider.java"
    }
  }
}