{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaSandboxLinuxContainerRuntime.java",
  "functionName": "prepareContainer",
  "functionId": "prepareContainer___ctx-ContainerRuntimeContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
  "functionStartLine": 220,
  "functionEndLine": 268,
  "numCommitsSeen": 9,
  "timeTaken": 2187,
  "changeHistory": [
    "2abab1d7c53e64c160384fd5a3ac4cd8ffa57af4",
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "18c494a00c8ead768f3a868b450dceea485559df",
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
    "6f6dfe0202249c129b36edfd145a2224140139cc"
  ],
  "changeHistoryShort": {
    "2abab1d7c53e64c160384fd5a3ac4cd8ffa57af4": "Ybodychange",
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "18c494a00c8ead768f3a868b450dceea485559df": "Ybodychange",
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716": "Ybodychange",
    "6f6dfe0202249c129b36edfd145a2224140139cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2abab1d7c53e64c160384fd5a3ac4cd8ffa57af4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7595. Container launching code suppresses close exceptions after writes. Contributed by Jim Brennan\n",
      "commitDate": "12/12/17 2:04 PM",
      "commitName": "2abab1d7c53e64c160384fd5a3ac4cd8ffa57af4",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "28/10/17 10:38 PM",
      "commitNameOld": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 44.68,
      "commitsBetweenForRepo": 347,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   public void prepareContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n \n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d\n         ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n         ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e commands \u003d\n         ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n     Map\u003cString, String\u003e env \u003d\n         ctx.getContainer().getLaunchContext().getEnvironment();\n     String username \u003d\n         ctx.getExecutionAttribute(USER);\n \n     if(!isSandboxContainerWhitelisted(username, commands)) {\n       String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n       if (tmpDirBase \u003d\u003d null) {\n         throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n       }\n \n-      OutputStream policyOutputStream \u003d null;\n       try {\n         String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n         initializePolicyDir();\n \n         List\u003cString\u003e groupPolicyFiles \u003d\n             getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\n         Path policyFilePath \u003d Files.createFile(\n             Paths.get(policyFileDir.toString(),\n             containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n             POLICY_ATTR);\n-        policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n \n-        containerPolicies.put(containerID, policyFilePath);\n+        try(OutputStream policyOutputStream \u003d\n+                Files.newOutputStream(policyFilePath)) {\n \n-        NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n-            localDirs, groupPolicyFiles, resources, configuration);\n-        NMContainerPolicyUtils.appendSecurityFlags(\n-            commands, env, policyFilePath, sandboxMode);\n+          containerPolicies.put(containerID, policyFilePath);\n \n+          NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n+              localDirs, groupPolicyFiles, resources, configuration);\n+          NMContainerPolicyUtils.appendSecurityFlags(\n+              commands, env, policyFilePath, sandboxMode);\n+        }\n       } catch (IOException e) {\n         throw new ContainerExecutionException(e);\n-      } finally {\n-        IOUtils.cleanupWithLogger(LOG, policyOutputStream);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prepareContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d\n        ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n        ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e commands \u003d\n        ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n    Map\u003cString, String\u003e env \u003d\n        ctx.getContainer().getLaunchContext().getEnvironment();\n    String username \u003d\n        ctx.getExecutionAttribute(USER);\n\n    if(!isSandboxContainerWhitelisted(username, commands)) {\n      String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n      if (tmpDirBase \u003d\u003d null) {\n        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n      }\n\n      try {\n        String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n        initializePolicyDir();\n\n        List\u003cString\u003e groupPolicyFiles \u003d\n            getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\n        Path policyFilePath \u003d Files.createFile(\n            Paths.get(policyFileDir.toString(),\n            containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n            POLICY_ATTR);\n\n        try(OutputStream policyOutputStream \u003d\n                Files.newOutputStream(policyFilePath)) {\n\n          containerPolicies.put(containerID, policyFilePath);\n\n          NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n              localDirs, groupPolicyFiles, resources, configuration);\n          NMContainerPolicyUtils.appendSecurityFlags(\n              commands, env, policyFilePath, sandboxMode);\n        }\n      } catch (IOException e) {\n        throw new ContainerExecutionException(e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "16/05/17 6:02 PM",
      "commitNameOld": "18c494a00c8ead768f3a868b450dceea485559df",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 97.3,
      "commitsBetweenForRepo": 558,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void prepareContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n \n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d\n         ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n         ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e commands \u003d\n         ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n     Map\u003cString, String\u003e env \u003d\n         ctx.getContainer().getLaunchContext().getEnvironment();\n     String username \u003d\n         ctx.getExecutionAttribute(USER);\n \n     if(!isSandboxContainerWhitelisted(username, commands)) {\n       String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n       if (tmpDirBase \u003d\u003d null) {\n         throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n       }\n \n       OutputStream policyOutputStream \u003d null;\n       try {\n         String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n         initializePolicyDir();\n \n         List\u003cString\u003e groupPolicyFiles \u003d\n             getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\n         Path policyFilePath \u003d Files.createFile(\n             Paths.get(policyFileDir.toString(),\n             containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n             POLICY_ATTR);\n         policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n \n         containerPolicies.put(containerID, policyFilePath);\n \n         NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n             localDirs, groupPolicyFiles, resources, configuration);\n         NMContainerPolicyUtils.appendSecurityFlags(\n             commands, env, policyFilePath, sandboxMode);\n \n       } catch (IOException e) {\n         throw new ContainerExecutionException(e);\n       } finally {\n-        IOUtils.cleanup(LOG, policyOutputStream);\n+        IOUtils.cleanupWithLogger(LOG, policyOutputStream);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prepareContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d\n        ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n        ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e commands \u003d\n        ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n    Map\u003cString, String\u003e env \u003d\n        ctx.getContainer().getLaunchContext().getEnvironment();\n    String username \u003d\n        ctx.getExecutionAttribute(USER);\n\n    if(!isSandboxContainerWhitelisted(username, commands)) {\n      String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n      if (tmpDirBase \u003d\u003d null) {\n        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n      }\n\n      OutputStream policyOutputStream \u003d null;\n      try {\n        String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n        initializePolicyDir();\n\n        List\u003cString\u003e groupPolicyFiles \u003d\n            getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\n        Path policyFilePath \u003d Files.createFile(\n            Paths.get(policyFileDir.toString(),\n            containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n            POLICY_ATTR);\n        policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n\n        containerPolicies.put(containerID, policyFilePath);\n\n        NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n            localDirs, groupPolicyFiles, resources, configuration);\n        NMContainerPolicyUtils.appendSecurityFlags(\n            commands, env, policyFilePath, sandboxMode);\n\n      } catch (IOException e) {\n        throw new ContainerExecutionException(e);\n      } finally {\n        IOUtils.cleanupWithLogger(LOG, policyOutputStream);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "18c494a00c8ead768f3a868b450dceea485559df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
      "commitDate": "16/05/17 6:02 PM",
      "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "28/04/17 11:01 AM",
      "commitNameOld": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 18.29,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,50 @@\n   public void prepareContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n \n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d\n         ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n         ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e commands \u003d\n         ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n     Map\u003cString, String\u003e env \u003d\n         ctx.getContainer().getLaunchContext().getEnvironment();\n+    String username \u003d\n+        ctx.getExecutionAttribute(USER);\n \n-    if(!isSandboxContainerWhitelisted(ctx, commands)) {\n+    if(!isSandboxContainerWhitelisted(username, commands)) {\n       String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n       if (tmpDirBase \u003d\u003d null) {\n         throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n       }\n \n       OutputStream policyOutputStream \u003d null;\n       try {\n         String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n         initializePolicyDir();\n \n+        List\u003cString\u003e groupPolicyFiles \u003d\n+            getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\n         Path policyFilePath \u003d Files.createFile(\n             Paths.get(policyFileDir.toString(),\n             containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n             POLICY_ATTR);\n         policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n \n         containerPolicies.put(containerID, policyFilePath);\n \n-        NMContainerPolicyUtils.generatePolicyFile(\n-            policyOutputStream, localDirs, resources, configuration);\n+        NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n+            localDirs, groupPolicyFiles, resources, configuration);\n         NMContainerPolicyUtils.appendSecurityFlags(\n             commands, env, policyFilePath, sandboxMode);\n \n-      } catch (Exception e) {\n+      } catch (IOException e) {\n         throw new ContainerExecutionException(e);\n       } finally {\n         IOUtils.cleanup(LOG, policyOutputStream);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prepareContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d\n        ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n        ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e commands \u003d\n        ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n    Map\u003cString, String\u003e env \u003d\n        ctx.getContainer().getLaunchContext().getEnvironment();\n    String username \u003d\n        ctx.getExecutionAttribute(USER);\n\n    if(!isSandboxContainerWhitelisted(username, commands)) {\n      String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n      if (tmpDirBase \u003d\u003d null) {\n        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n      }\n\n      OutputStream policyOutputStream \u003d null;\n      try {\n        String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n        initializePolicyDir();\n\n        List\u003cString\u003e groupPolicyFiles \u003d\n            getGroupPolicyFiles(configuration, ctx.getExecutionAttribute(USER));\n        Path policyFilePath \u003d Files.createFile(\n            Paths.get(policyFileDir.toString(),\n            containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n            POLICY_ATTR);\n        policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n\n        containerPolicies.put(containerID, policyFilePath);\n\n        NMContainerPolicyUtils.generatePolicyFile(policyOutputStream,\n            localDirs, groupPolicyFiles, resources, configuration);\n        NMContainerPolicyUtils.appendSecurityFlags(\n            commands, env, policyFilePath, sandboxMode);\n\n      } catch (IOException e) {\n        throw new ContainerExecutionException(e);\n      } finally {\n        IOUtils.cleanup(LOG, policyOutputStream);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6472. Improve Java sandbox regex (gphillips via rkanter)\n",
      "commitDate": "28/04/17 11:01 AM",
      "commitName": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/03/17 2:53 PM",
      "commitNameOld": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 57.8,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public void prepareContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n \n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e localDirs \u003d\n         ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n     @SuppressWarnings(\"unchecked\")\n     Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n         ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n     @SuppressWarnings(\"unchecked\")\n     List\u003cString\u003e commands \u003d\n         ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n     Map\u003cString, String\u003e env \u003d\n         ctx.getContainer().getLaunchContext().getEnvironment();\n \n     if(!isSandboxContainerWhitelisted(ctx, commands)) {\n       String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n       if (tmpDirBase \u003d\u003d null) {\n         throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n       }\n \n       OutputStream policyOutputStream \u003d null;\n       try {\n         String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n+        initializePolicyDir();\n \n         Path policyFilePath \u003d Files.createFile(\n             Paths.get(policyFileDir.toString(),\n             containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n             POLICY_ATTR);\n         policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n \n         containerPolicies.put(containerID, policyFilePath);\n \n         NMContainerPolicyUtils.generatePolicyFile(\n             policyOutputStream, localDirs, resources, configuration);\n         NMContainerPolicyUtils.appendSecurityFlags(\n             commands, env, policyFilePath, sandboxMode);\n \n       } catch (Exception e) {\n         throw new ContainerExecutionException(e);\n       } finally {\n         IOUtils.cleanup(LOG, policyOutputStream);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prepareContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d\n        ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n        ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e commands \u003d\n        ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n    Map\u003cString, String\u003e env \u003d\n        ctx.getContainer().getLaunchContext().getEnvironment();\n\n    if(!isSandboxContainerWhitelisted(ctx, commands)) {\n      String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n      if (tmpDirBase \u003d\u003d null) {\n        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n      }\n\n      OutputStream policyOutputStream \u003d null;\n      try {\n        String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n        initializePolicyDir();\n\n        Path policyFilePath \u003d Files.createFile(\n            Paths.get(policyFileDir.toString(),\n            containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n            POLICY_ATTR);\n        policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n\n        containerPolicies.put(containerID, policyFilePath);\n\n        NMContainerPolicyUtils.generatePolicyFile(\n            policyOutputStream, localDirs, resources, configuration);\n        NMContainerPolicyUtils.appendSecurityFlags(\n            commands, env, policyFilePath, sandboxMode);\n\n      } catch (Exception e) {\n        throw new ContainerExecutionException(e);\n      } finally {\n        IOUtils.cleanup(LOG, policyOutputStream);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "6f6dfe0202249c129b36edfd145a2224140139cc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
      "commitDate": "01/03/17 2:53 PM",
      "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,45 @@\n+  public void prepareContainer(ContainerRuntimeContext ctx)\n+      throws ContainerExecutionException {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    List\u003cString\u003e localDirs \u003d\n+        ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n+    @SuppressWarnings(\"unchecked\")\n+    Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n+        ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n+    @SuppressWarnings(\"unchecked\")\n+    List\u003cString\u003e commands \u003d\n+        ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n+    Map\u003cString, String\u003e env \u003d\n+        ctx.getContainer().getLaunchContext().getEnvironment();\n+\n+    if(!isSandboxContainerWhitelisted(ctx, commands)) {\n+      String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n+      if (tmpDirBase \u003d\u003d null) {\n+        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n+      }\n+\n+      OutputStream policyOutputStream \u003d null;\n+      try {\n+        String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n+\n+        Path policyFilePath \u003d Files.createFile(\n+            Paths.get(policyFileDir.toString(),\n+            containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n+            POLICY_ATTR);\n+        policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n+\n+        containerPolicies.put(containerID, policyFilePath);\n+\n+        NMContainerPolicyUtils.generatePolicyFile(\n+            policyOutputStream, localDirs, resources, configuration);\n+        NMContainerPolicyUtils.appendSecurityFlags(\n+            commands, env, policyFilePath, sandboxMode);\n+\n+      } catch (Exception e) {\n+        throw new ContainerExecutionException(e);\n+      } finally {\n+        IOUtils.cleanup(LOG, policyOutputStream);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void prepareContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e localDirs \u003d\n        ctx.getExecutionAttribute(CONTAINER_LOCAL_DIRS);\n    @SuppressWarnings(\"unchecked\")\n    Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources \u003d\n        ctx.getExecutionAttribute(LOCALIZED_RESOURCES);\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e commands \u003d\n        ctx.getExecutionAttribute(CONTAINER_RUN_CMDS);\n    Map\u003cString, String\u003e env \u003d\n        ctx.getContainer().getLaunchContext().getEnvironment();\n\n    if(!isSandboxContainerWhitelisted(ctx, commands)) {\n      String tmpDirBase \u003d configuration.get(\"hadoop.tmp.dir\");\n      if (tmpDirBase \u003d\u003d null) {\n        throw new ContainerExecutionException(\"hadoop.tmp.dir not set!\");\n      }\n\n      OutputStream policyOutputStream \u003d null;\n      try {\n        String containerID \u003d ctx.getExecutionAttribute(CONTAINER_ID_STR);\n\n        Path policyFilePath \u003d Files.createFile(\n            Paths.get(policyFileDir.toString(),\n            containerID + \"-\" + NMContainerPolicyUtils.POLICY_FILE),\n            POLICY_ATTR);\n        policyOutputStream \u003d Files.newOutputStream(policyFilePath);\n\n        containerPolicies.put(containerID, policyFilePath);\n\n        NMContainerPolicyUtils.generatePolicyFile(\n            policyOutputStream, localDirs, resources, configuration);\n        NMContainerPolicyUtils.appendSecurityFlags(\n            commands, env, policyFilePath, sandboxMode);\n\n      } catch (Exception e) {\n        throw new ContainerExecutionException(e);\n      } finally {\n        IOUtils.cleanup(LOG, policyOutputStream);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java"
    }
  }
}