{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppAttemptImpl.java",
  "functionName": "getApplicationResourceUsageReport",
  "functionId": "getApplicationResourceUsageReport",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
  "functionStartLine": 940,
  "functionEndLine": 957,
  "numCommitsSeen": 175,
  "timeTaken": 5263,
  "changeHistory": [
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "5de6f72054d4911fcaf12132dccb05662f36a82d",
    "c78c0e277f8f8a15288ece928f24b8a2db7259e4",
    "da317f2ea5af8c12dd8ce04173239d5f9ace5d96",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "fab57a144de0cd515e1de9107e4d3ac58037d846",
    "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4"
  ],
  "changeHistoryShort": {
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "5de6f72054d4911fcaf12132dccb05662f36a82d": "Ybodychange",
    "c78c0e277f8f8a15288ece928f24b8a2db7259e4": "Ybodychange",
    "da317f2ea5af8c12dd8ce04173239d5f9ace5d96": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "fab57a144de0cd515e1de9107e4d3ac58037d846": "Ybodychange",
    "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/08/17 5:26 PM",
      "commitNameOld": "cc23514abacb4d6589e731cc5ce5d8e6f19c955d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 12.66,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     try {\n       ApplicationResourceUsageReport report \u003d\n           scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n       if (report \u003d\u003d null) {\n         report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n       }\n       AggregateAppResourceUsage resUsage \u003d\n           this.attemptMetrics.getAggregateAppResourceUsage();\n-      report.setMemorySeconds(resUsage.getMemorySeconds());\n-      report.setVcoreSeconds(resUsage.getVcoreSeconds());\n-      report.setPreemptedMemorySeconds(\n-          this.attemptMetrics.getPreemptedMemory());\n-      report.setPreemptedVcoreSeconds(\n-          this.attemptMetrics.getPreemptedVcore());\n+      report.setResourceSecondsMap(resUsage.getResourceUsageSecondsMap());\n+      report.setPreemptedResourceSecondsMap(\n+          this.attemptMetrics.getPreemptedResourceSecondsMap());\n       return report;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    try {\n      ApplicationResourceUsageReport report \u003d\n          scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n      if (report \u003d\u003d null) {\n        report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n      }\n      AggregateAppResourceUsage resUsage \u003d\n          this.attemptMetrics.getAggregateAppResourceUsage();\n      report.setResourceSecondsMap(resUsage.getResourceUsageSecondsMap());\n      report.setPreemptedResourceSecondsMap(\n          this.attemptMetrics.getPreemptedResourceSecondsMap());\n      return report;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4218. Metric for resource*time that was preempted. Contributed by Chang Li.\n",
      "commitDate": "10/11/16 2:35 PM",
      "commitName": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "10/08/16 11:04 AM",
      "commitNameOld": "e0b570dffb47ede298e0378a63350b699128d96e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 92.19,
      "commitsBetweenForRepo": 700,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,21 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     try {\n       ApplicationResourceUsageReport report \u003d\n           scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n       if (report \u003d\u003d null) {\n         report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n       }\n       AggregateAppResourceUsage resUsage \u003d\n           this.attemptMetrics.getAggregateAppResourceUsage();\n       report.setMemorySeconds(resUsage.getMemorySeconds());\n       report.setVcoreSeconds(resUsage.getVcoreSeconds());\n+      report.setPreemptedMemorySeconds(\n+          this.attemptMetrics.getPreemptedMemory());\n+      report.setPreemptedVcoreSeconds(\n+          this.attemptMetrics.getPreemptedVcore());\n       return report;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    try {\n      ApplicationResourceUsageReport report \u003d\n          scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n      if (report \u003d\u003d null) {\n        report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n      }\n      AggregateAppResourceUsage resUsage \u003d\n          this.attemptMetrics.getAggregateAppResourceUsage();\n      report.setMemorySeconds(resUsage.getMemorySeconds());\n      report.setVcoreSeconds(resUsage.getVcoreSeconds());\n      report.setPreemptedMemorySeconds(\n          this.attemptMetrics.getPreemptedMemory());\n      report.setPreemptedVcoreSeconds(\n          this.attemptMetrics.getPreemptedVcore());\n      return report;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/08/14 11:24 AM",
      "commitNameOld": "c4dc6853439d54076c6875e66accfc61dddf74d1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.29,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,17 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     try {\n       ApplicationResourceUsageReport report \u003d\n           scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n       if (report \u003d\u003d null) {\n         report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n       }\n+      AggregateAppResourceUsage resUsage \u003d\n+          this.attemptMetrics.getAggregateAppResourceUsage();\n+      report.setMemorySeconds(resUsage.getMemorySeconds());\n+      report.setVcoreSeconds(resUsage.getVcoreSeconds());\n       return report;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    try {\n      ApplicationResourceUsageReport report \u003d\n          scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n      if (report \u003d\u003d null) {\n        report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n      }\n      AggregateAppResourceUsage resUsage \u003d\n          this.attemptMetrics.getAggregateAppResourceUsage();\n      report.setMemorySeconds(resUsage.getMemorySeconds());\n      report.setVcoreSeconds(resUsage.getVcoreSeconds());\n      return report;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "5de6f72054d4911fcaf12132dccb05662f36a82d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1424. RMAppAttemptImpl should return the DummyApplicationResourceUsageReport for all invalid accesses. (Ray Chiang via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601742 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 12:03 PM",
      "commitName": "5de6f72054d4911fcaf12132dccb05662f36a82d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "08/06/14 8:09 PM",
      "commitNameOld": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,13 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     try {\n       ApplicationResourceUsageReport report \u003d\n           scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n       if (report \u003d\u003d null) {\n-        Resource none \u003d Resource.newInstance(0, 0);\n-        report \u003d ApplicationResourceUsageReport.newInstance(0, 0, none, none,\n-            none);\n+        report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n       }\n       return report;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    try {\n      ApplicationResourceUsageReport report \u003d\n          scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n      if (report \u003d\u003d null) {\n        report \u003d RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;\n      }\n      return report;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "c78c0e277f8f8a15288ece928f24b8a2db7259e4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-786: Addendum so that RMAppAttemptImpl#getApplicationResourceUsageReport won\u0027t return null\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543597 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/11/13 2:22 PM",
      "commitName": "c78c0e277f8f8a15288ece928f24b8a2db7259e4",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "18/11/13 9:17 PM",
      "commitNameOld": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,15 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     try {\n-      return scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n+      ApplicationResourceUsageReport report \u003d\n+          scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n+      if (report \u003d\u003d null) {\n+        Resource none \u003d Resource.newInstance(0, 0);\n+        report \u003d ApplicationResourceUsageReport.newInstance(0, 0, none, none,\n+            none);\n+      }\n+      return report;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    try {\n      ApplicationResourceUsageReport report \u003d\n          scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n      if (report \u003d\u003d null) {\n        Resource none \u003d Resource.newInstance(0, 0);\n        report \u003d ApplicationResourceUsageReport.newInstance(0, 0, none, none,\n            none);\n      }\n      return report;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "da317f2ea5af8c12dd8ce04173239d5f9ace5d96": {
      "type": "Ybodychange",
      "commitMessage": "YARN-786. Expose application resource usage in RM REST API (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537809 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 7:54 PM",
      "commitName": "da317f2ea5af8c12dd8ce04173239d5f9ace5d96",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "31/10/13 10:25 AM",
      "commitNameOld": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,8 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n-    \n     try {\n-      int numUsedContainers \u003d 0;\n-      int numReservedContainers \u003d 0;\n-      Resource currentConsumption \u003d Resources.createResource(0, 0);\n-      Resource reservedResources \u003d Resources.createResource(0, 0);\n-      \n-      SchedulerAppReport schedApp \u003d \n-          scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n-      Collection\u003cRMContainer\u003e liveContainers;\n-      Collection\u003cRMContainer\u003e reservedContainers;\n-      if (schedApp !\u003d null) {\n-        liveContainers \u003d schedApp.getLiveContainers();\n-        reservedContainers \u003d schedApp.getReservedContainers();\n-        if (liveContainers !\u003d null) {\n-          numUsedContainers \u003d liveContainers.size();\n-          for (RMContainer lc : liveContainers) {\n-            Resources.addTo(currentConsumption, lc.getContainer().getResource());\n-          }\n-        }\n-        if (reservedContainers !\u003d null) {\n-          numReservedContainers \u003d reservedContainers.size();\n-          for (RMContainer rc : reservedContainers) {\n-            Resources.addTo(reservedResources, rc.getContainer().getResource());\n-          }\n-        }\n-      }\n-\n-      return BuilderUtils.newApplicationResourceUsageReport(\n-          numUsedContainers, numReservedContainers,\n-          currentConsumption, reservedResources,\n-          Resources.add(currentConsumption, reservedResources));\n+      return scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    try {\n      return scheduler.getAppResourceUsageReport(this.getAppAttemptId());\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "18/12/12 8:21 PM",
      "commitNameOld": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 21.03,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     \n     try {\n       int numUsedContainers \u003d 0;\n       int numReservedContainers \u003d 0;\n-      int reservedResources \u003d 0;\n-      int currentConsumption \u003d 0;\n+      Resource currentConsumption \u003d Resources.createResource(0, 0);\n+      Resource reservedResources \u003d Resources.createResource(0, 0);\n+      \n       SchedulerAppReport schedApp \u003d \n           scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n       Collection\u003cRMContainer\u003e liveContainers;\n       Collection\u003cRMContainer\u003e reservedContainers;\n       if (schedApp !\u003d null) {\n         liveContainers \u003d schedApp.getLiveContainers();\n         reservedContainers \u003d schedApp.getReservedContainers();\n         if (liveContainers !\u003d null) {\n           numUsedContainers \u003d liveContainers.size();\n           for (RMContainer lc : liveContainers) {\n-            currentConsumption +\u003d lc.getContainer().getResource().getMemory();\n+            Resources.addTo(currentConsumption, lc.getContainer().getResource());\n           }\n         }\n         if (reservedContainers !\u003d null) {\n           numReservedContainers \u003d reservedContainers.size();\n           for (RMContainer rc : reservedContainers) {\n-            reservedResources +\u003d rc.getContainer().getResource().getMemory();\n+            Resources.addTo(reservedResources, rc.getContainer().getResource());\n           }\n         }\n       }\n \n       return BuilderUtils.newApplicationResourceUsageReport(\n           numUsedContainers, numReservedContainers,\n-          Resources.createResource(currentConsumption),\n-          Resources.createResource(reservedResources),\n-          Resources.createResource(currentConsumption + reservedResources));\n+          currentConsumption, reservedResources,\n+          Resources.add(currentConsumption, reservedResources));\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    \n    try {\n      int numUsedContainers \u003d 0;\n      int numReservedContainers \u003d 0;\n      Resource currentConsumption \u003d Resources.createResource(0, 0);\n      Resource reservedResources \u003d Resources.createResource(0, 0);\n      \n      SchedulerAppReport schedApp \u003d \n          scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n      Collection\u003cRMContainer\u003e liveContainers;\n      Collection\u003cRMContainer\u003e reservedContainers;\n      if (schedApp !\u003d null) {\n        liveContainers \u003d schedApp.getLiveContainers();\n        reservedContainers \u003d schedApp.getReservedContainers();\n        if (liveContainers !\u003d null) {\n          numUsedContainers \u003d liveContainers.size();\n          for (RMContainer lc : liveContainers) {\n            Resources.addTo(currentConsumption, lc.getContainer().getResource());\n          }\n        }\n        if (reservedContainers !\u003d null) {\n          numReservedContainers \u003d reservedContainers.size();\n          for (RMContainer rc : reservedContainers) {\n            Resources.addTo(reservedResources, rc.getContainer().getResource());\n          }\n        }\n      }\n\n      return BuilderUtils.newApplicationResourceUsageReport(\n          numUsedContainers, numReservedContainers,\n          currentConsumption, reservedResources,\n          Resources.add(currentConsumption, reservedResources));\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    \n    try {\n      int numUsedContainers \u003d 0;\n      int numReservedContainers \u003d 0;\n      int reservedResources \u003d 0;\n      int currentConsumption \u003d 0;\n      SchedulerAppReport schedApp \u003d \n          scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n      Collection\u003cRMContainer\u003e liveContainers;\n      Collection\u003cRMContainer\u003e reservedContainers;\n      if (schedApp !\u003d null) {\n        liveContainers \u003d schedApp.getLiveContainers();\n        reservedContainers \u003d schedApp.getReservedContainers();\n        if (liveContainers !\u003d null) {\n          numUsedContainers \u003d liveContainers.size();\n          for (RMContainer lc : liveContainers) {\n            currentConsumption +\u003d lc.getContainer().getResource().getMemory();\n          }\n        }\n        if (reservedContainers !\u003d null) {\n          numReservedContainers \u003d reservedContainers.size();\n          for (RMContainer rc : reservedContainers) {\n            reservedResources +\u003d rc.getContainer().getResource().getMemory();\n          }\n        }\n      }\n\n      return BuilderUtils.newApplicationResourceUsageReport(\n          numUsedContainers, numReservedContainers,\n          Resources.createResource(currentConsumption),\n          Resources.createResource(reservedResources),\n          Resources.createResource(currentConsumption + reservedResources));\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
      }
    },
    "fab57a144de0cd515e1de9107e4d3ac58037d846": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3792. Fix \"bin/mapred job -list\" to display all jobs instead of only the jobs owned by the user. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/12 3:40 PM",
      "commitName": "fab57a144de0cd515e1de9107e4d3ac58037d846",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/01/12 2:23 PM",
      "commitNameOld": "68615600985dfadf067a4967a5e08c1421e7a1c8",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 44.05,
      "commitsBetweenForRepo": 390,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,38 @@\n   public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n     this.readLock.lock();\n     \n     try {\n       int numUsedContainers \u003d 0;\n       int numReservedContainers \u003d 0;\n       int reservedResources \u003d 0;\n       int currentConsumption \u003d 0;\n       SchedulerAppReport schedApp \u003d \n           scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n       Collection\u003cRMContainer\u003e liveContainers;\n       Collection\u003cRMContainer\u003e reservedContainers;\n       if (schedApp !\u003d null) {\n         liveContainers \u003d schedApp.getLiveContainers();\n         reservedContainers \u003d schedApp.getReservedContainers();\n         if (liveContainers !\u003d null) {\n           numUsedContainers \u003d liveContainers.size();\n           for (RMContainer lc : liveContainers) {\n             currentConsumption +\u003d lc.getContainer().getResource().getMemory();\n           }\n         }\n         if (reservedContainers !\u003d null) {\n           numReservedContainers \u003d reservedContainers.size();\n           for (RMContainer rc : reservedContainers) {\n             reservedResources +\u003d rc.getContainer().getResource().getMemory();\n           }\n         }\n       }\n-      \n-      ApplicationResourceUsageReport appResources \u003d \n-          recordFactory.newRecordInstance(ApplicationResourceUsageReport.class);\n-      appResources.setNumUsedContainers(numUsedContainers);\n-      appResources.setNumReservedContainers(numReservedContainers);\n-      appResources.setUsedResources(\n-          Resources.createResource(currentConsumption));\n-      appResources.setReservedResources(\n-          Resources.createResource(reservedResources));\n-      appResources.setNeededResources(\n+\n+      return BuilderUtils.newApplicationResourceUsageReport(\n+          numUsedContainers, numReservedContainers,\n+          Resources.createResource(currentConsumption),\n+          Resources.createResource(reservedResources),\n           Resources.createResource(currentConsumption + reservedResources));\n-      return appResources;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    \n    try {\n      int numUsedContainers \u003d 0;\n      int numReservedContainers \u003d 0;\n      int reservedResources \u003d 0;\n      int currentConsumption \u003d 0;\n      SchedulerAppReport schedApp \u003d \n          scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n      Collection\u003cRMContainer\u003e liveContainers;\n      Collection\u003cRMContainer\u003e reservedContainers;\n      if (schedApp !\u003d null) {\n        liveContainers \u003d schedApp.getLiveContainers();\n        reservedContainers \u003d schedApp.getReservedContainers();\n        if (liveContainers !\u003d null) {\n          numUsedContainers \u003d liveContainers.size();\n          for (RMContainer lc : liveContainers) {\n            currentConsumption +\u003d lc.getContainer().getResource().getMemory();\n          }\n        }\n        if (reservedContainers !\u003d null) {\n          numReservedContainers \u003d reservedContainers.size();\n          for (RMContainer rc : reservedContainers) {\n            reservedResources +\u003d rc.getContainer().getResource().getMemory();\n          }\n        }\n      }\n\n      return BuilderUtils.newApplicationResourceUsageReport(\n          numUsedContainers, numReservedContainers,\n          Resources.createResource(currentConsumption),\n          Resources.createResource(reservedResources),\n          Resources.createResource(currentConsumption + reservedResources));\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1182616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/11 4:29 PM",
      "commitName": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,44 @@\n+  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n+    this.readLock.lock();\n+    \n+    try {\n+      int numUsedContainers \u003d 0;\n+      int numReservedContainers \u003d 0;\n+      int reservedResources \u003d 0;\n+      int currentConsumption \u003d 0;\n+      SchedulerAppReport schedApp \u003d \n+          scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n+      Collection\u003cRMContainer\u003e liveContainers;\n+      Collection\u003cRMContainer\u003e reservedContainers;\n+      if (schedApp !\u003d null) {\n+        liveContainers \u003d schedApp.getLiveContainers();\n+        reservedContainers \u003d schedApp.getReservedContainers();\n+        if (liveContainers !\u003d null) {\n+          numUsedContainers \u003d liveContainers.size();\n+          for (RMContainer lc : liveContainers) {\n+            currentConsumption +\u003d lc.getContainer().getResource().getMemory();\n+          }\n+        }\n+        if (reservedContainers !\u003d null) {\n+          numReservedContainers \u003d reservedContainers.size();\n+          for (RMContainer rc : reservedContainers) {\n+            reservedResources +\u003d rc.getContainer().getResource().getMemory();\n+          }\n+        }\n+      }\n+      \n+      ApplicationResourceUsageReport appResources \u003d \n+          recordFactory.newRecordInstance(ApplicationResourceUsageReport.class);\n+      appResources.setNumUsedContainers(numUsedContainers);\n+      appResources.setNumReservedContainers(numReservedContainers);\n+      appResources.setUsedResources(\n+          Resources.createResource(currentConsumption));\n+      appResources.setReservedResources(\n+          Resources.createResource(reservedResources));\n+      appResources.setNeededResources(\n+          Resources.createResource(currentConsumption + reservedResources));\n+      return appResources;\n+    } finally {\n+      this.readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getApplicationResourceUsageReport() {\n    this.readLock.lock();\n    \n    try {\n      int numUsedContainers \u003d 0;\n      int numReservedContainers \u003d 0;\n      int reservedResources \u003d 0;\n      int currentConsumption \u003d 0;\n      SchedulerAppReport schedApp \u003d \n          scheduler.getSchedulerAppInfo(this.getAppAttemptId());\n      Collection\u003cRMContainer\u003e liveContainers;\n      Collection\u003cRMContainer\u003e reservedContainers;\n      if (schedApp !\u003d null) {\n        liveContainers \u003d schedApp.getLiveContainers();\n        reservedContainers \u003d schedApp.getReservedContainers();\n        if (liveContainers !\u003d null) {\n          numUsedContainers \u003d liveContainers.size();\n          for (RMContainer lc : liveContainers) {\n            currentConsumption +\u003d lc.getContainer().getResource().getMemory();\n          }\n        }\n        if (reservedContainers !\u003d null) {\n          numReservedContainers \u003d reservedContainers.size();\n          for (RMContainer rc : reservedContainers) {\n            reservedResources +\u003d rc.getContainer().getResource().getMemory();\n          }\n        }\n      }\n      \n      ApplicationResourceUsageReport appResources \u003d \n          recordFactory.newRecordInstance(ApplicationResourceUsageReport.class);\n      appResources.setNumUsedContainers(numUsedContainers);\n      appResources.setNumReservedContainers(numReservedContainers);\n      appResources.setUsedResources(\n          Resources.createResource(currentConsumption));\n      appResources.setReservedResources(\n          Resources.createResource(reservedResources));\n      appResources.setNeededResources(\n          Resources.createResource(currentConsumption + reservedResources));\n      return appResources;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
    }
  }
}