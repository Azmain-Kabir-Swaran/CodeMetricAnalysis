{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContentSummaryComputationContext.java",
  "functionName": "getErasureCodingPolicyName",
  "functionId": "getErasureCodingPolicyName___inode-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ContentSummaryComputationContext.java",
  "functionStartLine": 166,
  "functionEndLine": 203,
  "numCommitsSeen": 17,
  "timeTaken": 2725,
  "changeHistory": [
    "35d4f32b32a3ba05332811caf3d245d9c3dcf1a5",
    "7d6792e5d2001e1a83ae75a4777324a3b01c557a",
    "2b0f9772417d205e8df16bac6921c2bb8bdcf740",
    "45ff4d38e6175bc59b126633fc46927f8af9b641"
  ],
  "changeHistoryShort": {
    "35d4f32b32a3ba05332811caf3d245d9c3dcf1a5": "Ybodychange",
    "7d6792e5d2001e1a83ae75a4777324a3b01c557a": "Ybodychange",
    "2b0f9772417d205e8df16bac6921c2bb8bdcf740": "Ybodychange",
    "45ff4d38e6175bc59b126633fc46927f8af9b641": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35d4f32b32a3ba05332811caf3d245d9c3dcf1a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14274. EC: NPE While Listing EC Policy For A Directory Following Replication Policy. Contributed by Ayush Saxena.\n",
      "commitDate": "13/02/19 9:36 AM",
      "commitName": "35d4f32b32a3ba05332811caf3d245d9c3dcf1a5",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "22/01/19 5:03 PM",
      "commitNameOld": "7d6792e5d2001e1a83ae75a4777324a3b01c557a",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 21.69,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public String getErasureCodingPolicyName(INode inode) {\n     if (inode.isFile()) {\n       INodeFile iNodeFile \u003d inode.asFile();\n       if (iNodeFile.isStriped()) {\n         byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n         return fsn.getErasureCodingPolicyManager()\n             .getByID(ecPolicyId).getName();\n       } else {\n         return REPLICATED;\n       }\n     }\n     if (inode.isSymlink()) {\n       return \"\";\n     }\n     try {\n       final XAttrFeature xaf \u003d inode.getXAttrFeature();\n       if (xaf !\u003d null) {\n         XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n         if (xattr !\u003d null) {\n           ByteArrayInputStream bins \u003d\n               new ByteArrayInputStream(xattr.getValue());\n           DataInputStream din \u003d new DataInputStream(bins);\n           String ecPolicyName \u003d WritableUtils.readString(din);\n           return dir.getFSNamesystem()\n               .getErasureCodingPolicyManager()\n-              .getByName(ecPolicyName)\n+              .getErasureCodingPolicyByName(ecPolicyName)\n               .getName();\n         }\n       } else if (inode.getParent() !\u003d null) {\n           return getErasureCodingPolicyName(inode.getParent());\n       }\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered error getting ec policy for \"\n           + inode.getFullPathName(), ioe);\n       return \"\";\n     }\n     return \"\";\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getErasureCodingPolicyName(INode inode) {\n    if (inode.isFile()) {\n      INodeFile iNodeFile \u003d inode.asFile();\n      if (iNodeFile.isStriped()) {\n        byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n        return fsn.getErasureCodingPolicyManager()\n            .getByID(ecPolicyId).getName();\n      } else {\n        return REPLICATED;\n      }\n    }\n    if (inode.isSymlink()) {\n      return \"\";\n    }\n    try {\n      final XAttrFeature xaf \u003d inode.getXAttrFeature();\n      if (xaf !\u003d null) {\n        XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n        if (xattr !\u003d null) {\n          ByteArrayInputStream bins \u003d\n              new ByteArrayInputStream(xattr.getValue());\n          DataInputStream din \u003d new DataInputStream(bins);\n          String ecPolicyName \u003d WritableUtils.readString(din);\n          return dir.getFSNamesystem()\n              .getErasureCodingPolicyManager()\n              .getErasureCodingPolicyByName(ecPolicyName)\n              .getName();\n        }\n      } else if (inode.getParent() !\u003d null) {\n          return getErasureCodingPolicyName(inode.getParent());\n      }\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered error getting ec policy for \"\n          + inode.getFullPathName(), ioe);\n      return \"\";\n    }\n    return \"\";\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ContentSummaryComputationContext.java",
      "extendedDetails": {}
    },
    "7d6792e5d2001e1a83ae75a4777324a3b01c557a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14218. EC: Ls -e throw NPE when directory ec policy is disabled. Contributed by Ayush Saxena.\n",
      "commitDate": "22/01/19 5:03 PM",
      "commitName": "7d6792e5d2001e1a83ae75a4777324a3b01c557a",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 138.14,
      "commitsBetweenForRepo": 1126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public String getErasureCodingPolicyName(INode inode) {\n     if (inode.isFile()) {\n       INodeFile iNodeFile \u003d inode.asFile();\n       if (iNodeFile.isStriped()) {\n         byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n         return fsn.getErasureCodingPolicyManager()\n             .getByID(ecPolicyId).getName();\n       } else {\n         return REPLICATED;\n       }\n     }\n     if (inode.isSymlink()) {\n       return \"\";\n     }\n     try {\n       final XAttrFeature xaf \u003d inode.getXAttrFeature();\n       if (xaf !\u003d null) {\n         XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n         if (xattr !\u003d null) {\n           ByteArrayInputStream bins \u003d\n               new ByteArrayInputStream(xattr.getValue());\n           DataInputStream din \u003d new DataInputStream(bins);\n           String ecPolicyName \u003d WritableUtils.readString(din);\n           return dir.getFSNamesystem()\n               .getErasureCodingPolicyManager()\n-              .getEnabledPolicyByName(ecPolicyName)\n+              .getByName(ecPolicyName)\n               .getName();\n         }\n       } else if (inode.getParent() !\u003d null) {\n           return getErasureCodingPolicyName(inode.getParent());\n       }\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered error getting ec policy for \"\n           + inode.getFullPathName(), ioe);\n       return \"\";\n     }\n     return \"\";\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getErasureCodingPolicyName(INode inode) {\n    if (inode.isFile()) {\n      INodeFile iNodeFile \u003d inode.asFile();\n      if (iNodeFile.isStriped()) {\n        byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n        return fsn.getErasureCodingPolicyManager()\n            .getByID(ecPolicyId).getName();\n      } else {\n        return REPLICATED;\n      }\n    }\n    if (inode.isSymlink()) {\n      return \"\";\n    }\n    try {\n      final XAttrFeature xaf \u003d inode.getXAttrFeature();\n      if (xaf !\u003d null) {\n        XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n        if (xattr !\u003d null) {\n          ByteArrayInputStream bins \u003d\n              new ByteArrayInputStream(xattr.getValue());\n          DataInputStream din \u003d new DataInputStream(bins);\n          String ecPolicyName \u003d WritableUtils.readString(din);\n          return dir.getFSNamesystem()\n              .getErasureCodingPolicyManager()\n              .getByName(ecPolicyName)\n              .getName();\n        }\n      } else if (inode.getParent() !\u003d null) {\n          return getErasureCodingPolicyName(inode.getParent());\n      }\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered error getting ec policy for \"\n          + inode.getFullPathName(), ioe);\n      return \"\";\n    }\n    return \"\";\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ContentSummaryComputationContext.java",
      "extendedDetails": {}
    },
    "2b0f9772417d205e8df16bac6921c2bb8bdcf740": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13786. EC: Display erasure coding policy for sub-directories is not working. Contributed by Ayush Saxena.\n",
      "commitDate": "07/08/18 7:23 PM",
      "commitName": "2b0f9772417d205e8df16bac6921c2bb8bdcf740",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "19/07/17 8:43 AM",
      "commitNameOld": "04ff412dabf3f6b9d884171c4140adbc636d5387",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 384.44,
      "commitsBetweenForRepo": 3401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   public String getErasureCodingPolicyName(INode inode) {\n     if (inode.isFile()) {\n       INodeFile iNodeFile \u003d inode.asFile();\n       if (iNodeFile.isStriped()) {\n         byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n         return fsn.getErasureCodingPolicyManager()\n             .getByID(ecPolicyId).getName();\n       } else {\n         return REPLICATED;\n       }\n     }\n     if (inode.isSymlink()) {\n       return \"\";\n     }\n     try {\n       final XAttrFeature xaf \u003d inode.getXAttrFeature();\n       if (xaf !\u003d null) {\n         XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n         if (xattr !\u003d null) {\n           ByteArrayInputStream bins \u003d\n               new ByteArrayInputStream(xattr.getValue());\n           DataInputStream din \u003d new DataInputStream(bins);\n           String ecPolicyName \u003d WritableUtils.readString(din);\n           return dir.getFSNamesystem()\n               .getErasureCodingPolicyManager()\n               .getEnabledPolicyByName(ecPolicyName)\n               .getName();\n         }\n+      } else if (inode.getParent() !\u003d null) {\n+          return getErasureCodingPolicyName(inode.getParent());\n       }\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered error getting ec policy for \"\n           + inode.getFullPathName(), ioe);\n       return \"\";\n     }\n     return \"\";\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getErasureCodingPolicyName(INode inode) {\n    if (inode.isFile()) {\n      INodeFile iNodeFile \u003d inode.asFile();\n      if (iNodeFile.isStriped()) {\n        byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n        return fsn.getErasureCodingPolicyManager()\n            .getByID(ecPolicyId).getName();\n      } else {\n        return REPLICATED;\n      }\n    }\n    if (inode.isSymlink()) {\n      return \"\";\n    }\n    try {\n      final XAttrFeature xaf \u003d inode.getXAttrFeature();\n      if (xaf !\u003d null) {\n        XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n        if (xattr !\u003d null) {\n          ByteArrayInputStream bins \u003d\n              new ByteArrayInputStream(xattr.getValue());\n          DataInputStream din \u003d new DataInputStream(bins);\n          String ecPolicyName \u003d WritableUtils.readString(din);\n          return dir.getFSNamesystem()\n              .getErasureCodingPolicyManager()\n              .getEnabledPolicyByName(ecPolicyName)\n              .getName();\n        }\n      } else if (inode.getParent() !\u003d null) {\n          return getErasureCodingPolicyName(inode.getParent());\n      }\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered error getting ec policy for \"\n          + inode.getFullPathName(), ioe);\n      return \"\";\n    }\n    return \"\";\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ContentSummaryComputationContext.java",
      "extendedDetails": {}
    },
    "45ff4d38e6175bc59b126633fc46927f8af9b641": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11647. Add -E option in hdfs \"count\" command to show erasure policy summarization. Contributed by luhuichun.\n",
      "commitDate": "20/06/17 11:55 AM",
      "commitName": "45ff4d38e6175bc59b126633fc46927f8af9b641",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,36 @@\n+  public String getErasureCodingPolicyName(INode inode) {\n+    if (inode.isFile()) {\n+      INodeFile iNodeFile \u003d inode.asFile();\n+      if (iNodeFile.isStriped()) {\n+        byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n+        return fsn.getErasureCodingPolicyManager()\n+            .getByID(ecPolicyId).getName();\n+      } else {\n+        return REPLICATED;\n+      }\n+    }\n+    if (inode.isSymlink()) {\n+      return \"\";\n+    }\n+    try {\n+      final XAttrFeature xaf \u003d inode.getXAttrFeature();\n+      if (xaf !\u003d null) {\n+        XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n+        if (xattr !\u003d null) {\n+          ByteArrayInputStream bins \u003d\n+              new ByteArrayInputStream(xattr.getValue());\n+          DataInputStream din \u003d new DataInputStream(bins);\n+          String ecPolicyName \u003d WritableUtils.readString(din);\n+          return dir.getFSNamesystem()\n+              .getErasureCodingPolicyManager()\n+              .getEnabledPolicyByName(ecPolicyName)\n+              .getName();\n+        }\n+      }\n+    } catch (IOException ioe) {\n+      LOG.warn(\"Encountered error getting ec policy for \"\n+          + inode.getFullPathName(), ioe);\n+      return \"\";\n+    }\n+    return \"\";\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getErasureCodingPolicyName(INode inode) {\n    if (inode.isFile()) {\n      INodeFile iNodeFile \u003d inode.asFile();\n      if (iNodeFile.isStriped()) {\n        byte ecPolicyId \u003d iNodeFile.getErasureCodingPolicyID();\n        return fsn.getErasureCodingPolicyManager()\n            .getByID(ecPolicyId).getName();\n      } else {\n        return REPLICATED;\n      }\n    }\n    if (inode.isSymlink()) {\n      return \"\";\n    }\n    try {\n      final XAttrFeature xaf \u003d inode.getXAttrFeature();\n      if (xaf !\u003d null) {\n        XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n        if (xattr !\u003d null) {\n          ByteArrayInputStream bins \u003d\n              new ByteArrayInputStream(xattr.getValue());\n          DataInputStream din \u003d new DataInputStream(bins);\n          String ecPolicyName \u003d WritableUtils.readString(din);\n          return dir.getFSNamesystem()\n              .getErasureCodingPolicyManager()\n              .getEnabledPolicyByName(ecPolicyName)\n              .getName();\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered error getting ec policy for \"\n          + inode.getFullPathName(), ioe);\n      return \"\";\n    }\n    return \"\";\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ContentSummaryComputationContext.java"
    }
  }
}