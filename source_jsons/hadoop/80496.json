{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "closeAll",
  "functionId": "closeAll___ugi-UserGroupInformation",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 3571,
  "functionEndLine": 3595,
  "numCommitsSeen": 188,
  "timeTaken": 4838,
  "changeHistory": [
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "ff8b7bc253be4d595272bc28a153de4e12282579"
  ],
  "changeHistoryShort": {
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "ff8b7bc253be4d595272bc28a153de4e12282579": "Yintroduced"
  },
  "changeHistoryDetails": {
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13605. Clean up FileSystem javadocs, logging; improve diagnostics on FS load. Contributed by Steve Loughran\n",
      "commitDate": "23/11/16 4:42 PM",
      "commitName": "860d49aa6ae7790d970d7f2322fed890b0e5cda2",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "16/11/16 8:08 PM",
      "commitNameOld": "aab9737a058c0bdeeb17c173e530b7e571315a56",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n-      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003cFileSystem\u003e();\n-      //Make a pass over the list and collect the filesystems to close\n+      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003c\u003e(map.entrySet().size());\n+      //Make a pass over the list and collect the FileSystems to close\n       //we cannot close inline since close() removes the entry from the Map\n       for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n         final Key key \u003d entry.getKey();\n         final FileSystem fs \u003d entry.getValue();\n         if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n-          targetFSList.add(fs);   \n+          targetFSList.add(fs);\n         }\n       }\n-      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003cIOException\u003e();\n+      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003c\u003e();\n       //now make a pass over the target list and close each\n       for (FileSystem fs : targetFSList) {\n         try {\n           fs.close();\n         }\n         catch(IOException ioe) {\n           exceptions.add(ioe);\n         }\n       }\n       if (!exceptions.isEmpty()) {\n         throw MultipleIOException.createIOException(exceptions);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003c\u003e(map.entrySet().size());\n      //Make a pass over the list and collect the FileSystems to close\n      //we cannot close inline since close() removes the entry from the Map\n      for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n        final Key key \u003d entry.getKey();\n        final FileSystem fs \u003d entry.getValue();\n        if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n          targetFSList.add(fs);\n        }\n      }\n      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003c\u003e();\n      //now make a pass over the target list and close each\n      for (FileSystem fs : targetFSList) {\n        try {\n          fs.close();\n        }\n        catch(IOException ioe) {\n          exceptions.add(ioe);\n        }\n      }\n      if (!exceptions.isEmpty()) {\n        throw MultipleIOException.createIOException(exceptions);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003cFileSystem\u003e();\n      //Make a pass over the list and collect the filesystems to close\n      //we cannot close inline since close() removes the entry from the Map\n      for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n        final Key key \u003d entry.getKey();\n        final FileSystem fs \u003d entry.getValue();\n        if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n          targetFSList.add(fs);   \n        }\n      }\n      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003cIOException\u003e();\n      //now make a pass over the target list and close each\n      for (FileSystem fs : targetFSList) {\n        try {\n          fs.close();\n        }\n        catch(IOException ioe) {\n          exceptions.add(ioe);\n        }\n      }\n      if (!exceptions.isEmpty()) {\n        throw MultipleIOException.createIOException(exceptions);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003cFileSystem\u003e();\n      //Make a pass over the list and collect the filesystems to close\n      //we cannot close inline since close() removes the entry from the Map\n      for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n        final Key key \u003d entry.getKey();\n        final FileSystem fs \u003d entry.getValue();\n        if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n          targetFSList.add(fs);   \n        }\n      }\n      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003cIOException\u003e();\n      //now make a pass over the target list and close each\n      for (FileSystem fs : targetFSList) {\n        try {\n          fs.close();\n        }\n        catch(IOException ioe) {\n          exceptions.add(ioe);\n        }\n      }\n      if (!exceptions.isEmpty()) {\n        throw MultipleIOException.createIOException(exceptions);\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003cFileSystem\u003e();\n      //Make a pass over the list and collect the filesystems to close\n      //we cannot close inline since close() removes the entry from the Map\n      for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n        final Key key \u003d entry.getKey();\n        final FileSystem fs \u003d entry.getValue();\n        if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n          targetFSList.add(fs);   \n        }\n      }\n      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003cIOException\u003e();\n      //now make a pass over the target list and close each\n      for (FileSystem fs : targetFSList) {\n        try {\n          fs.close();\n        }\n        catch(IOException ioe) {\n          exceptions.add(ioe);\n        }\n      }\n      if (!exceptions.isEmpty()) {\n        throw MultipleIOException.createIOException(exceptions);\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "ff8b7bc253be4d595272bc28a153de4e12282579": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6888. Add a new FileSystem API closeAllForUGI(..) for closing all file systems associated with a particular UGI.  Contributed by Kan Zhang\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980523 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/10 10:58 AM",
      "commitName": "ff8b7bc253be4d595272bc28a153de4e12282579",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,25 @@\n+    synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n+      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003cFileSystem\u003e();\n+      //Make a pass over the list and collect the filesystems to close\n+      //we cannot close inline since close() removes the entry from the Map\n+      for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n+        final Key key \u003d entry.getKey();\n+        final FileSystem fs \u003d entry.getValue();\n+        if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n+          targetFSList.add(fs);   \n+        }\n+      }\n+      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003cIOException\u003e();\n+      //now make a pass over the target list and close each\n+      for (FileSystem fs : targetFSList) {\n+        try {\n+          fs.close();\n+        }\n+        catch(IOException ioe) {\n+          exceptions.add(ioe);\n+        }\n+      }\n+      if (!exceptions.isEmpty()) {\n+        throw MultipleIOException.createIOException(exceptions);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void closeAll(UserGroupInformation ugi) throws IOException {\n      List\u003cFileSystem\u003e targetFSList \u003d new ArrayList\u003cFileSystem\u003e();\n      //Make a pass over the list and collect the filesystems to close\n      //we cannot close inline since close() removes the entry from the Map\n      for (Map.Entry\u003cKey, FileSystem\u003e entry : map.entrySet()) {\n        final Key key \u003d entry.getKey();\n        final FileSystem fs \u003d entry.getValue();\n        if (ugi.equals(key.ugi) \u0026\u0026 fs !\u003d null) {\n          targetFSList.add(fs);   \n        }\n      }\n      List\u003cIOException\u003e exceptions \u003d new ArrayList\u003cIOException\u003e();\n      //now make a pass over the target list and close each\n      for (FileSystem fs : targetFSList) {\n        try {\n          fs.close();\n        }\n        catch(IOException ioe) {\n          exceptions.add(ioe);\n        }\n      }\n      if (!exceptions.isEmpty()) {\n        throw MultipleIOException.createIOException(exceptions);\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}