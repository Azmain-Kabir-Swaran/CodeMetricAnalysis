{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStore.java",
  "functionName": "markAsAuthoritative",
  "functionId": "markAsAuthoritative___dest-Path(modifiers-final)__operationState-BulkOperationState(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
  "functionStartLine": 2159,
  "functionEndLine": 2196,
  "numCommitsSeen": 42,
  "timeTaken": 1406,
  "changeHistory": [
    "49df83899543586bbcaf80f01399ade031cf68b0"
  ],
  "changeHistoryShort": {
    "49df83899543586bbcaf80f01399ade031cf68b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49df83899543586bbcaf80f01399ade031cf68b0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16697. Tune/audit S3A authoritative mode.\n\nContains:\n\nHADOOP-16474. S3Guard ProgressiveRenameTracker to mark destination\n              dirirectory as authoritative on success.\nHADOOP-16684. S3guard bucket info to list a bit more about\n              authoritative paths.\nHADOOP-16722. S3GuardTool to support FilterFileSystem.\n\nThis patch improves the marking of newly created/import directory\ntrees in S3Guard DynamoDB tables as authoritative.\n\nSpecific changes:\n\n * Renamed directories are marked as authoritative if the entire\n   operation succeeded (HADOOP-16474).\n * When updating parent table entries as part of any table write,\n   there\u0027s no overwriting of their authoritative flag.\n\ns3guard import changes:\n\n* new -verbose flag to print out what is going on.\n\n* The \"s3guard import\" command lets you declare that a directory tree\nis to be marked as authoritative\n\n  hadoop s3guard import -authoritative -verbose s3a://bucket/path\n\nWhen importing a listing and a file is found, the import tool queries\nthe metastore and only updates the entry if the file is different from\nbefore, where different \u003d\u003d new timestamp, etag, or length. S3Guard can get\ntimestamp differences due to clock skew in PUT operations.\n\nAs the recursive list performed by the import command doesn\u0027t retrieve the\nversionID, the existing entry may in fact be more complete.\nWhen updating an existing due to clock skew the existing version ID\nis propagated to the new entry (note: the etags must match; this is needed\nto deal with inconsistent listings).\n\nThere is a new s3guard command to audit a s3guard bucket/path\u0027s\nauthoritative state:\n\n  hadoop s3guard authoritative -check-config s3a://bucket/path\n\nThis is primarily for testing/auditing.\n\nThe s3guard bucket-info command also provides some more details on the\nauthoritative state of a store (HADOOP-16684).\n\nChange-Id: I58001341c04f6f3597fcb4fcb1581ccefeb77d91\n",
      "commitDate": "10/01/20 3:11 AM",
      "commitName": "49df83899543586bbcaf80f01399ade031cf68b0",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,38 @@\n+  public int markAsAuthoritative(\n+      final Path dest,\n+      final BulkOperationState operationState) throws IOException {\n+    if (operationState \u003d\u003d null) {\n+      return 0;\n+    }\n+    Preconditions.checkArgument(operationState instanceof AncestorState,\n+        \"Not an AncestorState %s\", operationState);\n+    final AncestorState state \u003d (AncestorState)operationState;\n+    // only mark paths under the dest as auth\n+    final String simpleDestKey \u003d pathToParentKey(dest);\n+    final String destPathKey \u003d simpleDestKey + \"/\";\n+    final String opId \u003d AncestorState.stateAsString(state);\n+    LOG.debug(\"{}: marking directories under {} as authoritative\",\n+        opId, destPathKey);\n+\n+    // the list of dirs to build up.\n+    final List\u003cDDBPathMetadata\u003e dirsToUpdate \u003d new ArrayList\u003c\u003e();\n+    synchronized (state) {\n+      for (Map.Entry\u003cPath, DDBPathMetadata\u003e entry :\n+          state.getAncestry().entrySet()) {\n+        final Path path \u003d entry.getKey();\n+        final DDBPathMetadata md \u003d entry.getValue();\n+        final String key \u003d pathToParentKey(path);\n+        if (md.getFileStatus().isDirectory()\n+            \u0026\u0026 (key.equals(simpleDestKey) || key.startsWith(destPathKey))) {\n+          // the updated entry is under the destination.\n+          md.setAuthoritativeDir(true);\n+          md.setLastUpdated(ttlTimeProvider.getNow());\n+          LOG.debug(\"{}: added {}\", opId, key);\n+          dirsToUpdate.add(md);\n+        }\n+      }\n+      processBatchWriteRequest(state,\n+          null, pathMetadataToItem(dirsToUpdate));\n+    }\n+    return dirsToUpdate.size();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int markAsAuthoritative(\n      final Path dest,\n      final BulkOperationState operationState) throws IOException {\n    if (operationState \u003d\u003d null) {\n      return 0;\n    }\n    Preconditions.checkArgument(operationState instanceof AncestorState,\n        \"Not an AncestorState %s\", operationState);\n    final AncestorState state \u003d (AncestorState)operationState;\n    // only mark paths under the dest as auth\n    final String simpleDestKey \u003d pathToParentKey(dest);\n    final String destPathKey \u003d simpleDestKey + \"/\";\n    final String opId \u003d AncestorState.stateAsString(state);\n    LOG.debug(\"{}: marking directories under {} as authoritative\",\n        opId, destPathKey);\n\n    // the list of dirs to build up.\n    final List\u003cDDBPathMetadata\u003e dirsToUpdate \u003d new ArrayList\u003c\u003e();\n    synchronized (state) {\n      for (Map.Entry\u003cPath, DDBPathMetadata\u003e entry :\n          state.getAncestry().entrySet()) {\n        final Path path \u003d entry.getKey();\n        final DDBPathMetadata md \u003d entry.getValue();\n        final String key \u003d pathToParentKey(path);\n        if (md.getFileStatus().isDirectory()\n            \u0026\u0026 (key.equals(simpleDestKey) || key.startsWith(destPathKey))) {\n          // the updated entry is under the destination.\n          md.setAuthoritativeDir(true);\n          md.setLastUpdated(ttlTimeProvider.getNow());\n          LOG.debug(\"{}: added {}\", opId, key);\n          dirsToUpdate.add(md);\n        }\n      }\n      processBatchWriteRequest(state,\n          null, pathMetadataToItem(dirsToUpdate));\n    }\n    return dirsToUpdate.size();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}