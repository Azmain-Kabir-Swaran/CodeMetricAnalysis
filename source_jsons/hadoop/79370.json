{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegateToFileSystem.java",
  "functionName": "createInternal",
  "functionId": "createInternal___f-Path__flag-EnumSet__CreateFlag____absolutePermission-FsPermission__bufferSize-int__replication-short__blockSize-long__progress-Progressable__checksumOpt-ChecksumOpt__createParent-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
  "functionStartLine": 80,
  "functionEndLine": 104,
  "numCommitsSeen": 27,
  "timeTaken": 1230,
  "changeHistory": [
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b",
    "7578282edce0eba3f24c96355c944c02156ece79",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5"
  ],
  "changeHistoryShort": {
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b": "Ymodifierchange",
    "7578282edce0eba3f24c96355c944c02156ece79": "Ybodychange",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/12 10:46 PM",
      "commitName": "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/12 10:46 PM",
          "commitName": "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "17/08/12 7:05 AM",
          "commitNameOld": "8fa10b184e607a33f59e67bd4b1fbe5a2e683941",
          "commitAuthorOld": "Daryn Sharp",
          "daysBetweenCommits": 1.65,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public FSDataOutputStream createInternal (Path f,\n       EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n       short replication, long blockSize, Progressable progress,\n-      int bytesPerChecksum, boolean createParent) throws IOException {\n+      ChecksumOpt checksumOpt, boolean createParent) throws IOException {\n     checkPath(f);\n     \n     // Default impl assumes that permissions do not matter\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n     if (!createParent) { // parent must exist.\n       // since this.create makes parent dirs automatically\n       // we must throw exception if parent does not exist.\n       final FileStatus stat \u003d getFileStatus(f.getParent());\n       if (stat \u003d\u003d null) {\n         throw new FileNotFoundException(\"Missing parent:\" + f);\n       }\n       if (!stat.isDirectory()) {\n           throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n       }\n       // parent does exist - go ahead with create of file.\n     }\n-    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n-        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n+    return fsImpl.primitiveCreate(f, absolutePermission, flag,\n+        bufferSize, replication, blockSize, progress, checksumOpt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      ChecksumOpt checksumOpt, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag,\n        bufferSize, replication, blockSize, progress, checksumOpt);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path, flag-EnumSet\u003cCreateFlag\u003e, absolutePermission-FsPermission, bufferSize-int, replication-short, blockSize-long, progress-Progressable, bytesPerChecksum-int, createParent-boolean]",
            "newValue": "[f-Path, flag-EnumSet\u003cCreateFlag\u003e, absolutePermission-FsPermission, bufferSize-int, replication-short, blockSize-long, progress-Progressable, checksumOpt-ChecksumOpt, createParent-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/12 10:46 PM",
          "commitName": "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "17/08/12 7:05 AM",
          "commitNameOld": "8fa10b184e607a33f59e67bd4b1fbe5a2e683941",
          "commitAuthorOld": "Daryn Sharp",
          "daysBetweenCommits": 1.65,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public FSDataOutputStream createInternal (Path f,\n       EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n       short replication, long blockSize, Progressable progress,\n-      int bytesPerChecksum, boolean createParent) throws IOException {\n+      ChecksumOpt checksumOpt, boolean createParent) throws IOException {\n     checkPath(f);\n     \n     // Default impl assumes that permissions do not matter\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n     if (!createParent) { // parent must exist.\n       // since this.create makes parent dirs automatically\n       // we must throw exception if parent does not exist.\n       final FileStatus stat \u003d getFileStatus(f.getParent());\n       if (stat \u003d\u003d null) {\n         throw new FileNotFoundException(\"Missing parent:\" + f);\n       }\n       if (!stat.isDirectory()) {\n           throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n       }\n       // parent does exist - go ahead with create of file.\n     }\n-    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n-        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n+    return fsImpl.primitiveCreate(f, absolutePermission, flag,\n+        bufferSize, replication, blockSize, progress, checksumOpt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      ChecksumOpt checksumOpt, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag,\n        bufferSize, replication, blockSize, progress, checksumOpt);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/DelegateToFileSystem.java"
      }
    },
    "946eac3dac02b8a84a9ae91ac7482b4224d0728b": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-6903 Make AbstractFSileSystem methods and some FileContext methods to be public\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1034480 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/10 9:23 AM",
      "commitName": "946eac3dac02b8a84a9ae91ac7482b4224d0728b",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "30/05/10 8:14 PM",
      "commitNameOld": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 165.59,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-  protected FSDataOutputStream createInternal (Path f,\n+  public FSDataOutputStream createInternal (Path f,\n       EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n       short replication, long blockSize, Progressable progress,\n       int bytesPerChecksum, boolean createParent) throws IOException {\n     checkPath(f);\n     \n     // Default impl assumes that permissions do not matter\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n     if (!createParent) { // parent must exist.\n       // since this.create makes parent dirs automatically\n       // we must throw exception if parent does not exist.\n       final FileStatus stat \u003d getFileStatus(f.getParent());\n       if (stat \u003d\u003d null) {\n         throw new FileNotFoundException(\"Missing parent:\" + f);\n       }\n       if (!stat.isDirectory()) {\n           throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n       }\n       // parent does exist - go ahead with create of file.\n     }\n     return fsImpl.primitiveCreate(f, absolutePermission, flag, \n         bufferSize, replication, blockSize, progress, bytesPerChecksum);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "src/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[public]"
      }
    },
    "7578282edce0eba3f24c96355c944c02156ece79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6585.  Add FileStatus#isDirectory and isFile.  Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@949658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/10 8:14 PM",
      "commitName": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthor": "Thomas White",
      "commitDateOld": "16/02/10 1:43 PM",
      "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 103.23,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   protected FSDataOutputStream createInternal (Path f,\n       EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n       short replication, long blockSize, Progressable progress,\n       int bytesPerChecksum, boolean createParent) throws IOException {\n     checkPath(f);\n     \n     // Default impl assumes that permissions do not matter\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n     if (!createParent) { // parent must exist.\n       // since this.create makes parent dirs automatically\n       // we must throw exception if parent does not exist.\n       final FileStatus stat \u003d getFileStatus(f.getParent());\n       if (stat \u003d\u003d null) {\n         throw new FileNotFoundException(\"Missing parent:\" + f);\n       }\n-      if (!stat.isDir()) {\n+      if (!stat.isDirectory()) {\n           throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n       }\n       // parent does exist - go ahead with create of file.\n     }\n     return fsImpl.primitiveCreate(f, absolutePermission, flag, \n         bufferSize, replication, blockSize, progress, bytesPerChecksum);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDirectory()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "src/java/org/apache/hadoop/fs/DelegateToFileSystem.java",
      "extendedDetails": {}
    },
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": {
      "type": "Yintroduced",
      "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 3:24 PM",
      "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,25 @@\n+  protected FSDataOutputStream createInternal (Path f,\n+      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n+      short replication, long blockSize, Progressable progress,\n+      int bytesPerChecksum, boolean createParent) throws IOException {\n+    checkPath(f);\n+    \n+    // Default impl assumes that permissions do not matter\n+    // calling the regular create is good enough.\n+    // FSs that implement permissions should override this.\n+\n+    if (!createParent) { // parent must exist.\n+      // since this.create makes parent dirs automatically\n+      // we must throw exception if parent does not exist.\n+      final FileStatus stat \u003d getFileStatus(f.getParent());\n+      if (stat \u003d\u003d null) {\n+        throw new FileNotFoundException(\"Missing parent:\" + f);\n+      }\n+      if (!stat.isDir()) {\n+          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n+      }\n+      // parent does exist - go ahead with create of file.\n+    }\n+    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n+        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream createInternal (Path f,\n      EnumSet\u003cCreateFlag\u003e flag, FsPermission absolutePermission, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum, boolean createParent) throws IOException {\n    checkPath(f);\n    \n    // Default impl assumes that permissions do not matter\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (!createParent) { // parent must exist.\n      // since this.create makes parent dirs automatically\n      // we must throw exception if parent does not exist.\n      final FileStatus stat \u003d getFileStatus(f.getParent());\n      if (stat \u003d\u003d null) {\n        throw new FileNotFoundException(\"Missing parent:\" + f);\n      }\n      if (!stat.isDir()) {\n          throw new ParentNotDirectoryException(\"parent is not a dir:\" + f);\n      }\n      // parent does exist - go ahead with create of file.\n    }\n    return fsImpl.primitiveCreate(f, absolutePermission, flag, \n        bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "src/java/org/apache/hadoop/fs/DelegateToFileSystem.java"
    }
  }
}