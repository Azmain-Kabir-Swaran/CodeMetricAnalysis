{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBImageXmlWriter.java",
  "functionName": "dumpCacheManagerSection",
  "functionId": "dumpCacheManagerSection___is-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
  "functionStartLine": 375,
  "functionEndLine": 409,
  "numCommitsSeen": 27,
  "timeTaken": 2577,
  "changeHistory": [
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742",
    "8e809b8c814834a01e7fdeff08ce64ef69f31817",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305"
  ],
  "changeHistoryShort": {
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Ybodychange",
    "8e809b8c814834a01e7fdeff08ce64ef69f31817": "Ybodychange",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": "Yintroduced"
  },
  "changeHistoryDetails": {
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/03/16 5:56 PM",
      "commitNameOld": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 18.7,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   private void dumpCacheManagerSection(InputStream is) throws IOException {\n-    out.print(\"\u003cCacheManagerSection\u003e\");\n+    out.print(\"\u003c\" + CACHE_MANAGER_SECTION_NAME + \"\u003e\");\n     CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n-    o(\"nextDirectiveId\", s.getNextDirectiveId());\n-    o(\"numDirectives\", s.getNumDirectives());\n-    o(\"numPools\", s.getNumPools());\n+    o(CACHE_MANAGER_SECTION_NEXT_DIRECTIVE_ID, s.getNextDirectiveId());\n+    o(CACHE_MANAGER_SECTION_NUM_DIRECTIVES, s.getNumDirectives());\n+    o(CACHE_MANAGER_SECTION_NUM_POOLS, s.getNumPools());\n     for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n       CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n-      out.print(\"\u003cpool\u003e\");\n-      o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n-          .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n-          .o(\"limit\", p.getLimit())\n-          .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n-      out.print(\"\u003c/pool\u003e\\n\");\n+      out.print(\"\u003c\" + CACHE_MANAGER_SECTION_POOL +\"\u003e\");\n+      o(CACHE_MANAGER_SECTION_POOL_NAME, p.getPoolName()).\n+          o(CACHE_MANAGER_SECTION_OWNER_NAME, p.getOwnerName())\n+          .o(CACHE_MANAGER_SECTION_GROUP_NAME, p.getGroupName())\n+          .o(CACHE_MANAGER_SECTION_MODE, p.getMode())\n+          .o(CACHE_MANAGER_SECTION_LIMIT, p.getLimit())\n+          .o(CACHE_MANAGER_SECTION_MAX_RELATIVE_EXPIRY,\n+              p.getMaxRelativeExpiry());\n+      out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_POOL + \"\u003e\\n\");\n     }\n     for (int i \u003d 0; i \u003c s.getNumDirectives(); ++i) {\n       CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n           .parseDelimitedFrom(is);\n-      out.print(\"\u003cdirective\u003e\");\n-      o(\"id\", p.getId()).o(\"path\", p.getPath())\n-          .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n-      out.print(\"\u003cexpiration\u003e\");\n+      out.print(\"\u003c\" + CACHE_MANAGER_SECTION_DIRECTIVE + \"\u003e\");\n+      o(SECTION_ID, p.getId()).o(SECTION_PATH, p.getPath())\n+          .o(SECTION_REPLICATION, p.getReplication())\n+          .o(CACHE_MANAGER_SECTION_POOL, p.getPool());\n+      out.print(\"\u003c\" + CACHE_MANAGER_SECTION_EXPIRATION +\"\u003e\");\n       CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n-      o(\"millis\", e.getMillis()).o(\"relative\", e.getIsRelative());\n-      out.print(\"\u003c/expiration\u003e\\n\");\n-      out.print(\"\u003c/directive\u003e\\n\");\n+      o(CACHE_MANAGER_SECTION_MILLIS, e.getMillis())\n+          .o(CACHE_MANAGER_SECTION_RELATIVE, e.getIsRelative());\n+      out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_EXPIRATION+ \"\u003e\\n\");\n+      out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_DIRECTIVE + \"\u003e\\n\");\n     }\n-    out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n+    out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_NAME + \"\u003e\\n\");\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpCacheManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003c\" + CACHE_MANAGER_SECTION_NAME + \"\u003e\");\n    CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n    o(CACHE_MANAGER_SECTION_NEXT_DIRECTIVE_ID, s.getNextDirectiveId());\n    o(CACHE_MANAGER_SECTION_NUM_DIRECTIVES, s.getNumDirectives());\n    o(CACHE_MANAGER_SECTION_NUM_POOLS, s.getNumPools());\n    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n      CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n      out.print(\"\u003c\" + CACHE_MANAGER_SECTION_POOL +\"\u003e\");\n      o(CACHE_MANAGER_SECTION_POOL_NAME, p.getPoolName()).\n          o(CACHE_MANAGER_SECTION_OWNER_NAME, p.getOwnerName())\n          .o(CACHE_MANAGER_SECTION_GROUP_NAME, p.getGroupName())\n          .o(CACHE_MANAGER_SECTION_MODE, p.getMode())\n          .o(CACHE_MANAGER_SECTION_LIMIT, p.getLimit())\n          .o(CACHE_MANAGER_SECTION_MAX_RELATIVE_EXPIRY,\n              p.getMaxRelativeExpiry());\n      out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_POOL + \"\u003e\\n\");\n    }\n    for (int i \u003d 0; i \u003c s.getNumDirectives(); ++i) {\n      CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n          .parseDelimitedFrom(is);\n      out.print(\"\u003c\" + CACHE_MANAGER_SECTION_DIRECTIVE + \"\u003e\");\n      o(SECTION_ID, p.getId()).o(SECTION_PATH, p.getPath())\n          .o(SECTION_REPLICATION, p.getReplication())\n          .o(CACHE_MANAGER_SECTION_POOL, p.getPool());\n      out.print(\"\u003c\" + CACHE_MANAGER_SECTION_EXPIRATION +\"\u003e\");\n      CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n      o(CACHE_MANAGER_SECTION_MILLIS, e.getMillis())\n          .o(CACHE_MANAGER_SECTION_RELATIVE, e.getIsRelative());\n      out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_EXPIRATION+ \"\u003e\\n\");\n      out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_DIRECTIVE + \"\u003e\\n\");\n    }\n    out.print(\"\u003c/\" + CACHE_MANAGER_SECTION_NAME + \"\u003e\\n\");\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "21/10/15 2:58 PM",
      "commitNameOld": "a24c6e84205c684ef864b0fc5301dc07b3578351",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 133.17,
      "commitsBetweenForRepo": 905,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private void dumpCacheManagerSection(InputStream is) throws IOException {\n     out.print(\"\u003cCacheManagerSection\u003e\");\n     CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n     o(\"nextDirectiveId\", s.getNextDirectiveId());\n+    o(\"numDirectives\", s.getNumDirectives());\n+    o(\"numPools\", s.getNumPools());\n     for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n       CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n       out.print(\"\u003cpool\u003e\");\n       o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n           .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n           .o(\"limit\", p.getLimit())\n           .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n       out.print(\"\u003c/pool\u003e\\n\");\n     }\n     for (int i \u003d 0; i \u003c s.getNumDirectives(); ++i) {\n       CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n           .parseDelimitedFrom(is);\n       out.print(\"\u003cdirective\u003e\");\n       o(\"id\", p.getId()).o(\"path\", p.getPath())\n           .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n       out.print(\"\u003cexpiration\u003e\");\n       CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n-      o(\"millis\", e.getMillis()).o(\"relatilve\", e.getIsRelative());\n+      o(\"millis\", e.getMillis()).o(\"relative\", e.getIsRelative());\n       out.print(\"\u003c/expiration\u003e\\n\");\n       out.print(\"\u003c/directive\u003e\\n\");\n     }\n     out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpCacheManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003cCacheManagerSection\u003e\");\n    CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n    o(\"nextDirectiveId\", s.getNextDirectiveId());\n    o(\"numDirectives\", s.getNumDirectives());\n    o(\"numPools\", s.getNumPools());\n    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n      CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n      out.print(\"\u003cpool\u003e\");\n      o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n          .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n          .o(\"limit\", p.getLimit())\n          .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n      out.print(\"\u003c/pool\u003e\\n\");\n    }\n    for (int i \u003d 0; i \u003c s.getNumDirectives(); ++i) {\n      CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n          .parseDelimitedFrom(is);\n      out.print(\"\u003cdirective\u003e\");\n      o(\"id\", p.getId()).o(\"path\", p.getPath())\n          .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n      out.print(\"\u003cexpiration\u003e\");\n      CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n      o(\"millis\", e.getMillis()).o(\"relative\", e.getIsRelative());\n      out.print(\"\u003c/expiration\u003e\\n\");\n      out.print(\"\u003c/directive\u003e\\n\");\n    }\n    out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "8e809b8c814834a01e7fdeff08ce64ef69f31817": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6033. PBImageXmlWriter incorrectly handles processing cache directives. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573050 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/14 11:45 AM",
      "commitName": "8e809b8c814834a01e7fdeff08ce64ef69f31817",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "20/02/14 10:39 PM",
      "commitNameOld": "4f8a487fcd3c5d324b0bb03157f404fb127e21e8",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 7.55,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void dumpCacheManagerSection(InputStream is) throws IOException {\n     out.print(\"\u003cCacheManagerSection\u003e\");\n     CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n     o(\"nextDirectiveId\", s.getNextDirectiveId());\n     for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n       CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n       out.print(\"\u003cpool\u003e\");\n       o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n           .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n           .o(\"limit\", p.getLimit())\n           .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n       out.print(\"\u003c/pool\u003e\\n\");\n     }\n-    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n+    for (int i \u003d 0; i \u003c s.getNumDirectives(); ++i) {\n       CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n           .parseDelimitedFrom(is);\n       out.print(\"\u003cdirective\u003e\");\n       o(\"id\", p.getId()).o(\"path\", p.getPath())\n           .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n       out.print(\"\u003cexpiration\u003e\");\n       CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n       o(\"millis\", e.getMillis()).o(\"relatilve\", e.getIsRelative());\n       out.print(\"\u003c/expiration\u003e\\n\");\n       out.print(\"\u003c/directive\u003e\\n\");\n     }\n     out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpCacheManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003cCacheManagerSection\u003e\");\n    CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n    o(\"nextDirectiveId\", s.getNextDirectiveId());\n    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n      CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n      out.print(\"\u003cpool\u003e\");\n      o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n          .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n          .o(\"limit\", p.getLimit())\n          .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n      out.print(\"\u003c/pool\u003e\\n\");\n    }\n    for (int i \u003d 0; i \u003c s.getNumDirectives(); ++i) {\n      CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n          .parseDelimitedFrom(is);\n      out.print(\"\u003cdirective\u003e\");\n      o(\"id\", p.getId()).o(\"path\", p.getPath())\n          .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n      out.print(\"\u003cexpiration\u003e\");\n      CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n      o(\"millis\", e.getMillis()).o(\"relatilve\", e.getIsRelative());\n      out.print(\"\u003c/expiration\u003e\\n\");\n      out.print(\"\u003c/directive\u003e\\n\");\n    }\n    out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5698. Use protobuf to serialize / deserialize FSImage. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 11:18 AM",
      "commitName": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,28 @@\n+  private void dumpCacheManagerSection(InputStream is) throws IOException {\n+    out.print(\"\u003cCacheManagerSection\u003e\");\n+    CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n+    o(\"nextDirectiveId\", s.getNextDirectiveId());\n+    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n+      CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n+      out.print(\"\u003cpool\u003e\");\n+      o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n+          .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n+          .o(\"limit\", p.getLimit())\n+          .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n+      out.print(\"\u003c/pool\u003e\\n\");\n+    }\n+    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n+      CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n+          .parseDelimitedFrom(is);\n+      out.print(\"\u003cdirective\u003e\");\n+      o(\"id\", p.getId()).o(\"path\", p.getPath())\n+          .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n+      out.print(\"\u003cexpiration\u003e\");\n+      CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n+      o(\"millis\", e.getMillis()).o(\"relatilve\", e.getIsRelative());\n+      out.print(\"\u003c/expiration\u003e\\n\");\n+      out.print(\"\u003c/directive\u003e\\n\");\n+    }\n+    out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpCacheManagerSection(InputStream is) throws IOException {\n    out.print(\"\u003cCacheManagerSection\u003e\");\n    CacheManagerSection s \u003d CacheManagerSection.parseDelimitedFrom(is);\n    o(\"nextDirectiveId\", s.getNextDirectiveId());\n    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n      CachePoolInfoProto p \u003d CachePoolInfoProto.parseDelimitedFrom(is);\n      out.print(\"\u003cpool\u003e\");\n      o(\"poolName\", p.getPoolName()).o(\"ownerName\", p.getOwnerName())\n          .o(\"groupName\", p.getGroupName()).o(\"mode\", p.getMode())\n          .o(\"limit\", p.getLimit())\n          .o(\"maxRelativeExpiry\", p.getMaxRelativeExpiry());\n      out.print(\"\u003c/pool\u003e\\n\");\n    }\n    for (int i \u003d 0; i \u003c s.getNumPools(); ++i) {\n      CacheDirectiveInfoProto p \u003d CacheDirectiveInfoProto\n          .parseDelimitedFrom(is);\n      out.print(\"\u003cdirective\u003e\");\n      o(\"id\", p.getId()).o(\"path\", p.getPath())\n          .o(\"replication\", p.getReplication()).o(\"pool\", p.getPool());\n      out.print(\"\u003cexpiration\u003e\");\n      CacheDirectiveInfoExpirationProto e \u003d p.getExpiration();\n      o(\"millis\", e.getMillis()).o(\"relatilve\", e.getIsRelative());\n      out.print(\"\u003c/expiration\u003e\\n\");\n      out.print(\"\u003c/directive\u003e\\n\");\n    }\n    out.print(\"\u003c/CacheManagerSection\u003e\\n\");\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java"
    }
  }
}