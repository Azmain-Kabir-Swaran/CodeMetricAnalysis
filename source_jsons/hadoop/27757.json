{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationProxyProviderUtil.java",
  "functionName": "updateConfForFederation",
  "functionId": "updateConfForFederation___conf-Configuration__subClusterId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java",
  "functionStartLine": 110,
  "functionEndLine": 131,
  "numCommitsSeen": 6,
  "timeTaken": 2674,
  "changeHistory": [
    "859aa1f9d621d07693825e610bdc0149f7a2770a",
    "94a24567d65469091c8b521987dc2003d0327159",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1"
  ],
  "changeHistoryShort": {
    "859aa1f9d621d07693825e610bdc0149f7a2770a": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "94a24567d65469091c8b521987dc2003d0327159": "Ybodychange",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "859aa1f9d621d07693825e610bdc0149f7a2770a": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n-  private static void updateConf(Configuration conf,\n-      SubClusterId subClusterId) {\n-    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId.getId());\n-    // In a Federation setting, we will connect to not just the local cluster RM\n-    // but also multiple external RMs. The membership information of all the RMs\n-    // that are currently\n-    // participating in Federation is available in the central\n-    // FederationStateStore.\n-    // So we will:\n-    // 1. obtain the RM service addresses from FederationStateStore using the\n-    // FederationRMFailoverProxyProvider.\n-    // 2. disable traditional HA as that depends on local configuration lookup\n-    // for RMs using indexes.\n-    // 3. we will enable federation failover IF traditional HA is enabled so\n-    // that the appropriate failover RetryPolicy is initialized.\n+  public static void updateConfForFederation(Configuration conf,\n+      String subClusterId) {\n+    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n+    /*\n+     * In a Federation setting, we will connect to not just the local cluster RM\n+     * but also multiple external RMs. The membership information of all the RMs\n+     * that are currently participating in Federation is available in the\n+     * central FederationStateStore. So we will: 1. obtain the RM service\n+     * addresses from FederationStateStore using the\n+     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n+     * depends on local configuration lookup for RMs using indexes. 3. we will\n+     * enable federation failover IF traditional HA is enabled so that the\n+     * appropriate failover RetryPolicy is initialized.\n+     */\n     conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n     conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n         FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n     if (HAUtil.isHAEnabled(conf)) {\n       conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n       conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void updateConfForFederation(Configuration conf,\n      String subClusterId) {\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n    /*\n     * In a Federation setting, we will connect to not just the local cluster RM\n     * but also multiple external RMs. The membership information of all the RMs\n     * that are currently participating in Federation is available in the\n     * central FederationStateStore. So we will: 1. obtain the RM service\n     * addresses from FederationStateStore using the\n     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n     * depends on local configuration lookup for RMs using indexes. 3. we will\n     * enable federation failover IF traditional HA is enabled so that the\n     * appropriate failover RetryPolicy is initialized.\n     */\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n    if (HAUtil.isHAEnabled(conf)) {\n      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java",
          "extendedDetails": {
            "oldValue": "updateConf",
            "newValue": "updateConfForFederation"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n-  private static void updateConf(Configuration conf,\n-      SubClusterId subClusterId) {\n-    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId.getId());\n-    // In a Federation setting, we will connect to not just the local cluster RM\n-    // but also multiple external RMs. The membership information of all the RMs\n-    // that are currently\n-    // participating in Federation is available in the central\n-    // FederationStateStore.\n-    // So we will:\n-    // 1. obtain the RM service addresses from FederationStateStore using the\n-    // FederationRMFailoverProxyProvider.\n-    // 2. disable traditional HA as that depends on local configuration lookup\n-    // for RMs using indexes.\n-    // 3. we will enable federation failover IF traditional HA is enabled so\n-    // that the appropriate failover RetryPolicy is initialized.\n+  public static void updateConfForFederation(Configuration conf,\n+      String subClusterId) {\n+    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n+    /*\n+     * In a Federation setting, we will connect to not just the local cluster RM\n+     * but also multiple external RMs. The membership information of all the RMs\n+     * that are currently participating in Federation is available in the\n+     * central FederationStateStore. So we will: 1. obtain the RM service\n+     * addresses from FederationStateStore using the\n+     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n+     * depends on local configuration lookup for RMs using indexes. 3. we will\n+     * enable federation failover IF traditional HA is enabled so that the\n+     * appropriate failover RetryPolicy is initialized.\n+     */\n     conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n     conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n         FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n     if (HAUtil.isHAEnabled(conf)) {\n       conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n       conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void updateConfForFederation(Configuration conf,\n      String subClusterId) {\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n    /*\n     * In a Federation setting, we will connect to not just the local cluster RM\n     * but also multiple external RMs. The membership information of all the RMs\n     * that are currently participating in Federation is available in the\n     * central FederationStateStore. So we will: 1. obtain the RM service\n     * addresses from FederationStateStore using the\n     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n     * depends on local configuration lookup for RMs using indexes. 3. we will\n     * enable federation failover IF traditional HA is enabled so that the\n     * appropriate failover RetryPolicy is initialized.\n     */\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n    if (HAUtil.isHAEnabled(conf)) {\n      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, subClusterId-SubClusterId]",
            "newValue": "[conf-Configuration, subClusterId-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n-  private static void updateConf(Configuration conf,\n-      SubClusterId subClusterId) {\n-    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId.getId());\n-    // In a Federation setting, we will connect to not just the local cluster RM\n-    // but also multiple external RMs. The membership information of all the RMs\n-    // that are currently\n-    // participating in Federation is available in the central\n-    // FederationStateStore.\n-    // So we will:\n-    // 1. obtain the RM service addresses from FederationStateStore using the\n-    // FederationRMFailoverProxyProvider.\n-    // 2. disable traditional HA as that depends on local configuration lookup\n-    // for RMs using indexes.\n-    // 3. we will enable federation failover IF traditional HA is enabled so\n-    // that the appropriate failover RetryPolicy is initialized.\n+  public static void updateConfForFederation(Configuration conf,\n+      String subClusterId) {\n+    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n+    /*\n+     * In a Federation setting, we will connect to not just the local cluster RM\n+     * but also multiple external RMs. The membership information of all the RMs\n+     * that are currently participating in Federation is available in the\n+     * central FederationStateStore. So we will: 1. obtain the RM service\n+     * addresses from FederationStateStore using the\n+     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n+     * depends on local configuration lookup for RMs using indexes. 3. we will\n+     * enable federation failover IF traditional HA is enabled so that the\n+     * appropriate failover RetryPolicy is initialized.\n+     */\n     conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n     conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n         FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n     if (HAUtil.isHAEnabled(conf)) {\n       conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n       conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void updateConfForFederation(Configuration conf,\n      String subClusterId) {\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n    /*\n     * In a Federation setting, we will connect to not just the local cluster RM\n     * but also multiple external RMs. The membership information of all the RMs\n     * that are currently participating in Federation is available in the\n     * central FederationStateStore. So we will: 1. obtain the RM service\n     * addresses from FederationStateStore using the\n     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n     * depends on local configuration lookup for RMs using indexes. 3. we will\n     * enable federation failover IF traditional HA is enabled so that the\n     * appropriate failover RetryPolicy is initialized.\n     */\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n    if (HAUtil.isHAEnabled(conf)) {\n      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n-  private static void updateConf(Configuration conf,\n-      SubClusterId subClusterId) {\n-    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId.getId());\n-    // In a Federation setting, we will connect to not just the local cluster RM\n-    // but also multiple external RMs. The membership information of all the RMs\n-    // that are currently\n-    // participating in Federation is available in the central\n-    // FederationStateStore.\n-    // So we will:\n-    // 1. obtain the RM service addresses from FederationStateStore using the\n-    // FederationRMFailoverProxyProvider.\n-    // 2. disable traditional HA as that depends on local configuration lookup\n-    // for RMs using indexes.\n-    // 3. we will enable federation failover IF traditional HA is enabled so\n-    // that the appropriate failover RetryPolicy is initialized.\n+  public static void updateConfForFederation(Configuration conf,\n+      String subClusterId) {\n+    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n+    /*\n+     * In a Federation setting, we will connect to not just the local cluster RM\n+     * but also multiple external RMs. The membership information of all the RMs\n+     * that are currently participating in Federation is available in the\n+     * central FederationStateStore. So we will: 1. obtain the RM service\n+     * addresses from FederationStateStore using the\n+     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n+     * depends on local configuration lookup for RMs using indexes. 3. we will\n+     * enable federation failover IF traditional HA is enabled so that the\n+     * appropriate failover RetryPolicy is initialized.\n+     */\n     conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n     conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n         FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n     if (HAUtil.isHAEnabled(conf)) {\n       conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n       conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void updateConfForFederation(Configuration conf,\n      String subClusterId) {\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\n    /*\n     * In a Federation setting, we will connect to not just the local cluster RM\n     * but also multiple external RMs. The membership information of all the RMs\n     * that are currently participating in Federation is available in the\n     * central FederationStateStore. So we will: 1. obtain the RM service\n     * addresses from FederationStateStore using the\n     * FederationRMFailoverProxyProvider. 2. disable traditional HA as that\n     * depends on local configuration lookup for RMs using indexes. 3. we will\n     * enable federation failover IF traditional HA is enabled so that the\n     * appropriate failover RetryPolicy is initialized.\n     */\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n    if (HAUtil.isHAEnabled(conf)) {\n      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "94a24567d65469091c8b521987dc2003d0327159": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3671. Integrate Federation services with ResourceManager. Contributed by Subru Krishnan\n\n(cherry picked from commit 8573c286e27623155c715a632d56a68f23523c72)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private static void updateConf(Configuration conf,\n       SubClusterId subClusterId) {\n-    conf.set(YarnConfiguration.FEDERATION_SUBCLUSTER_ID, subClusterId.getId());\n+    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId.getId());\n     // In a Federation setting, we will connect to not just the local cluster RM\n     // but also multiple external RMs. The membership information of all the RMs\n     // that are currently\n     // participating in Federation is available in the central\n     // FederationStateStore.\n     // So we will:\n     // 1. obtain the RM service addresses from FederationStateStore using the\n     // FederationRMFailoverProxyProvider.\n     // 2. disable traditional HA as that depends on local configuration lookup\n     // for RMs using indexes.\n     // 3. we will enable federation failover IF traditional HA is enabled so\n     // that the appropriate failover RetryPolicy is initialized.\n     conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n     conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n         FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n     if (HAUtil.isHAEnabled(conf)) {\n       conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n       conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateConf(Configuration conf,\n      SubClusterId subClusterId) {\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId.getId());\n    // In a Federation setting, we will connect to not just the local cluster RM\n    // but also multiple external RMs. The membership information of all the RMs\n    // that are currently\n    // participating in Federation is available in the central\n    // FederationStateStore.\n    // So we will:\n    // 1. obtain the RM service addresses from FederationStateStore using the\n    // FederationRMFailoverProxyProvider.\n    // 2. disable traditional HA as that depends on local configuration lookup\n    // for RMs using indexes.\n    // 3. we will enable federation failover IF traditional HA is enabled so\n    // that the appropriate failover RetryPolicy is initialized.\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n    if (HAUtil.isHAEnabled(conf)) {\n      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java",
      "extendedDetails": {}
    },
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3673. Create a FailoverProxy for Federation services. Contributed by Subru Krishnan\n\n(cherry picked from commit 3307564a5f8c8abc5fe84efcd05ee0f7dfdd921c)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,23 @@\n+  private static void updateConf(Configuration conf,\n+      SubClusterId subClusterId) {\n+    conf.set(YarnConfiguration.FEDERATION_SUBCLUSTER_ID, subClusterId.getId());\n+    // In a Federation setting, we will connect to not just the local cluster RM\n+    // but also multiple external RMs. The membership information of all the RMs\n+    // that are currently\n+    // participating in Federation is available in the central\n+    // FederationStateStore.\n+    // So we will:\n+    // 1. obtain the RM service addresses from FederationStateStore using the\n+    // FederationRMFailoverProxyProvider.\n+    // 2. disable traditional HA as that depends on local configuration lookup\n+    // for RMs using indexes.\n+    // 3. we will enable federation failover IF traditional HA is enabled so\n+    // that the appropriate failover RetryPolicy is initialized.\n+    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n+    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n+        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n+    if (HAUtil.isHAEnabled(conf)) {\n+      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n+      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateConf(Configuration conf,\n      SubClusterId subClusterId) {\n    conf.set(YarnConfiguration.FEDERATION_SUBCLUSTER_ID, subClusterId.getId());\n    // In a Federation setting, we will connect to not just the local cluster RM\n    // but also multiple external RMs. The membership information of all the RMs\n    // that are currently\n    // participating in Federation is available in the central\n    // FederationStateStore.\n    // So we will:\n    // 1. obtain the RM service addresses from FederationStateStore using the\n    // FederationRMFailoverProxyProvider.\n    // 2. disable traditional HA as that depends on local configuration lookup\n    // for RMs using indexes.\n    // 3. we will enable federation failover IF traditional HA is enabled so\n    // that the appropriate failover RetryPolicy is initialized.\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n        FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\n    if (HAUtil.isHAEnabled(conf)) {\n      conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\n      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationProxyProviderUtil.java"
    }
  }
}