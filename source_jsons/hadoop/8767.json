{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NNStorage.java",
  "functionName": "processStartupOptionsForUpgrade",
  "functionId": "processStartupOptionsForUpgrade___startOpt-StartupOption__layoutVersion-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
  "functionStartLine": 909,
  "functionEndLine": 937,
  "numCommitsSeen": 68,
  "timeTaken": 6342,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   void processStartupOptionsForUpgrade(StartupOption startOpt,\n       int layoutVersion) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.UPGRADE ||\n         startOpt \u003d\u003d StartupOption.UPGRADEONLY) {\n       // If upgrade from a release that does not support federation,\n       // if clusterId is provided in the startupOptions use it.\n       // Else generate a new cluster ID      \n       if (!NameNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n         if (startOpt.getClusterId() \u003d\u003d null) {\n           startOpt.setClusterId(newClusterID());\n         }\n         setClusterID(startOpt.getClusterId());\n         setBlockPoolID(newBlockPoolID());\n       } else {\n         // Upgrade from one version of federation to another supported\n         // version of federation doesn\u0027t require clusterID.\n         // Warn the user if the current clusterid didn\u0027t match with the input\n         // clusterid.\n         if (startOpt.getClusterId() !\u003d null\n             \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n-          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n-              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n+          LOG.warn(\"Clusterid mismatch - current clusterid: {}, Ignoring \"\n+              + \"given clusterid: {}\", getClusterID(),\n+              startOpt.getClusterId());\n         }\n       }\n-      LOG.info(\"Using clusterid: \" + getClusterID());\n+      LOG.info(\"Using clusterid: {}\", getClusterID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void processStartupOptionsForUpgrade(StartupOption startOpt,\n      int layoutVersion) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.UPGRADE ||\n        startOpt \u003d\u003d StartupOption.UPGRADEONLY) {\n      // If upgrade from a release that does not support federation,\n      // if clusterId is provided in the startupOptions use it.\n      // Else generate a new cluster ID      \n      if (!NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n        if (startOpt.getClusterId() \u003d\u003d null) {\n          startOpt.setClusterId(newClusterID());\n        }\n        setClusterID(startOpt.getClusterId());\n        setBlockPoolID(newBlockPoolID());\n      } else {\n        // Upgrade from one version of federation to another supported\n        // version of federation doesn\u0027t require clusterID.\n        // Warn the user if the current clusterid didn\u0027t match with the input\n        // clusterid.\n        if (startOpt.getClusterId() !\u003d null\n            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n          LOG.warn(\"Clusterid mismatch - current clusterid: {}, Ignoring \"\n              + \"given clusterid: {}\", getClusterID(),\n              startOpt.getClusterId());\n        }\n      }\n      LOG.info(\"Using clusterid: {}\", getClusterID());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6597. Add a new option to NN upgrade to terminate the process after upgrade on NN is completed. Contributed by Danilo Vunjak.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611723 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 10:14 AM",
      "commitName": "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "13/05/14 6:15 PM",
      "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 65.67,
      "commitsBetweenForRepo": 411,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n       throws IOException {\n-    if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n+    if (startOpt \u003d\u003d StartupOption.UPGRADE || startOpt \u003d\u003d StartupOption.UPGRADEONLY) {\n       // If upgrade from a release that does not support federation,\n       // if clusterId is provided in the startupOptions use it.\n       // Else generate a new cluster ID      \n       if (!NameNodeLayoutVersion.supports(\n           LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n         if (startOpt.getClusterId() \u003d\u003d null) {\n           startOpt.setClusterId(newClusterID());\n         }\n         setClusterID(startOpt.getClusterId());\n         setBlockPoolID(newBlockPoolID());\n       } else {\n         // Upgrade from one version of federation to another supported\n         // version of federation doesn\u0027t require clusterID.\n         // Warn the user if the current clusterid didn\u0027t match with the input\n         // clusterid.\n         if (startOpt.getClusterId() !\u003d null\n             \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n           LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n               + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n         }\n       }\n       LOG.info(\"Using clusterid: \" + getClusterID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n      throws IOException {\n    if (startOpt \u003d\u003d StartupOption.UPGRADE || startOpt \u003d\u003d StartupOption.UPGRADEONLY) {\n      // If upgrade from a release that does not support federation,\n      // if clusterId is provided in the startupOptions use it.\n      // Else generate a new cluster ID      \n      if (!NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n        if (startOpt.getClusterId() \u003d\u003d null) {\n          startOpt.setClusterId(newClusterID());\n        }\n        setClusterID(startOpt.getClusterId());\n        setBlockPoolID(newBlockPoolID());\n      } else {\n        // Upgrade from one version of federation to another supported\n        // version of federation doesn\u0027t require clusterID.\n        // Warn the user if the current clusterid didn\u0027t match with the input\n        // clusterid.\n        if (startOpt.getClusterId() !\u003d null\n            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n        }\n      }\n      LOG.info(\"Using clusterid: \" + getClusterID());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/01/14 12:01 PM",
      "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n       throws IOException {\n     if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n       // If upgrade from a release that does not support federation,\n       // if clusterId is provided in the startupOptions use it.\n       // Else generate a new cluster ID      \n-      if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+      if (!NameNodeLayoutVersion.supports(\n+          LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n         if (startOpt.getClusterId() \u003d\u003d null) {\n           startOpt.setClusterId(newClusterID());\n         }\n         setClusterID(startOpt.getClusterId());\n         setBlockPoolID(newBlockPoolID());\n       } else {\n         // Upgrade from one version of federation to another supported\n         // version of federation doesn\u0027t require clusterID.\n         // Warn the user if the current clusterid didn\u0027t match with the input\n         // clusterid.\n         if (startOpt.getClusterId() !\u003d null\n             \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n           LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n               + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n         }\n       }\n       LOG.info(\"Using clusterid: \" + getClusterID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n      throws IOException {\n    if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n      // If upgrade from a release that does not support federation,\n      // if clusterId is provided in the startupOptions use it.\n      // Else generate a new cluster ID      \n      if (!NameNodeLayoutVersion.supports(\n          LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n        if (startOpt.getClusterId() \u003d\u003d null) {\n          startOpt.setClusterId(newClusterID());\n        }\n        setClusterID(startOpt.getClusterId());\n        setBlockPoolID(newBlockPoolID());\n      } else {\n        // Upgrade from one version of federation to another supported\n        // version of federation doesn\u0027t require clusterID.\n        // Warn the user if the current clusterid didn\u0027t match with the input\n        // clusterid.\n        if (startOpt.getClusterId() !\u003d null\n            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n        }\n      }\n      LOG.info(\"Using clusterid: \" + getClusterID());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n      throws IOException {\n    if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n      // If upgrade from a release that does not support federation,\n      // if clusterId is provided in the startupOptions use it.\n      // Else generate a new cluster ID      \n      if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n        if (startOpt.getClusterId() \u003d\u003d null) {\n          startOpt.setClusterId(newClusterID());\n        }\n        setClusterID(startOpt.getClusterId());\n        setBlockPoolID(newBlockPoolID());\n      } else {\n        // Upgrade from one version of federation to another supported\n        // version of federation doesn\u0027t require clusterID.\n        // Warn the user if the current clusterid didn\u0027t match with the input\n        // clusterid.\n        if (startOpt.getClusterId() !\u003d null\n            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n        }\n      }\n      LOG.info(\"Using clusterid: \" + getClusterID());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n      throws IOException {\n    if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n      // If upgrade from a release that does not support federation,\n      // if clusterId is provided in the startupOptions use it.\n      // Else generate a new cluster ID      \n      if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n        if (startOpt.getClusterId() \u003d\u003d null) {\n          startOpt.setClusterId(newClusterID());\n        }\n        setClusterID(startOpt.getClusterId());\n        setBlockPoolID(newBlockPoolID());\n      } else {\n        // Upgrade from one version of federation to another supported\n        // version of federation doesn\u0027t require clusterID.\n        // Warn the user if the current clusterid didn\u0027t match with the input\n        // clusterid.\n        if (startOpt.getClusterId() !\u003d null\n            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n        }\n      }\n      LOG.info(\"Using clusterid: \" + getClusterID());\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+  void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n+      throws IOException {\n+    if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n+      // If upgrade from a release that does not support federation,\n+      // if clusterId is provided in the startupOptions use it.\n+      // Else generate a new cluster ID      \n+      if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+        if (startOpt.getClusterId() \u003d\u003d null) {\n+          startOpt.setClusterId(newClusterID());\n+        }\n+        setClusterID(startOpt.getClusterId());\n+        setBlockPoolID(newBlockPoolID());\n+      } else {\n+        // Upgrade from one version of federation to another supported\n+        // version of federation doesn\u0027t require clusterID.\n+        // Warn the user if the current clusterid didn\u0027t match with the input\n+        // clusterid.\n+        if (startOpt.getClusterId() !\u003d null\n+            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n+          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n+              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n+        }\n+      }\n+      LOG.info(\"Using clusterid: \" + getClusterID());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void processStartupOptionsForUpgrade(StartupOption startOpt, int layoutVersion)\n      throws IOException {\n    if (startOpt \u003d\u003d StartupOption.UPGRADE) {\n      // If upgrade from a release that does not support federation,\n      // if clusterId is provided in the startupOptions use it.\n      // Else generate a new cluster ID      \n      if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n        if (startOpt.getClusterId() \u003d\u003d null) {\n          startOpt.setClusterId(newClusterID());\n        }\n        setClusterID(startOpt.getClusterId());\n        setBlockPoolID(newBlockPoolID());\n      } else {\n        // Upgrade from one version of federation to another supported\n        // version of federation doesn\u0027t require clusterID.\n        // Warn the user if the current clusterid didn\u0027t match with the input\n        // clusterid.\n        if (startOpt.getClusterId() !\u003d null\n            \u0026\u0026 !startOpt.getClusterId().equals(getClusterID())) {\n          LOG.warn(\"Clusterid mismatch - current clusterid: \" + getClusterID()\n              + \", Ignoring given clusterid: \" + startOpt.getClusterId());\n        }\n      }\n      LOG.info(\"Using clusterid: \" + getClusterID());\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java"
    }
  }
}