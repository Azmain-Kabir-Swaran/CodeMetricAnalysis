{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XORErasureDecoder.java",
  "functionName": "getOutputBlocks",
  "functionId": "getOutputBlocks___blockGroup-ECBlockGroup",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/XORErasureDecoder.java",
  "functionStartLine": 60,
  "functionEndLine": 84,
  "numCommitsSeen": 9,
  "timeTaken": 924,
  "changeHistory": [
    "17f7cdc04764524c091bb0e9eb43399f88ac0e6b",
    "8f89d7489df0d5c8236a1929c93e3f5ab7149031"
  ],
  "changeHistoryShort": {
    "17f7cdc04764524c091bb0e9eb43399f88ac0e6b": "Yfilerename",
    "8f89d7489df0d5c8236a1929c93e3f5ab7149031": "Yintroduced"
  },
  "changeHistoryDetails": {
    "17f7cdc04764524c091bb0e9eb43399f88ac0e6b": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-11805 Better to rename some raw erasure coders. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 11:55 AM",
      "commitName": "17f7cdc04764524c091bb0e9eb43399f88ac0e6b",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "26/05/15 11:55 AM",
      "commitNameOld": "146ce7a9784e52432b76164009336a4b2cf2860e",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected ECBlock[] getOutputBlocks(ECBlockGroup blockGroup) {\n    /**\n     * If more than one blocks (either data or parity) erased, then it\u0027s not\n     * edible to recover. We don\u0027t have the check here since it will be done\n     * by upper level: ErasreCoder call can be avoid if not possible to recover\n     * at all.\n     */\n    int erasedNum \u003d getNumErasedBlocks(blockGroup);\n    ECBlock[] outputBlocks \u003d new ECBlock[erasedNum];\n\n    int idx \u003d 0;\n    for (int i \u003d 0; i \u003c getNumParityUnits(); i++) {\n      if (blockGroup.getParityBlocks()[i].isErased()) {\n        outputBlocks[idx++] \u003d blockGroup.getParityBlocks()[i];\n      }\n    }\n\n    for (int i \u003d 0; i \u003c getNumDataUnits(); i++) {\n      if (blockGroup.getDataBlocks()[i].isErased()) {\n        outputBlocks[idx++] \u003d blockGroup.getDataBlocks()[i];\n      }\n    }\n\n    return outputBlocks;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/XORErasureDecoder.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/XorErasureDecoder.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/XORErasureDecoder.java"
      }
    },
    "8f89d7489df0d5c8236a1929c93e3f5ab7149031": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11646. Erasure Coder API for encoding and decoding of block group ( Contributed by Kai Zheng )\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "8f89d7489df0d5c8236a1929c93e3f5ab7149031",
      "commitAuthor": "Vinayakumar B",
      "diff": "@@ -0,0 +1,25 @@\n+  protected ECBlock[] getOutputBlocks(ECBlockGroup blockGroup) {\n+    /**\n+     * If more than one blocks (either data or parity) erased, then it\u0027s not\n+     * edible to recover. We don\u0027t have the check here since it will be done\n+     * by upper level: ErasreCoder call can be avoid if not possible to recover\n+     * at all.\n+     */\n+    int erasedNum \u003d getNumErasedBlocks(blockGroup);\n+    ECBlock[] outputBlocks \u003d new ECBlock[erasedNum];\n+\n+    int idx \u003d 0;\n+    for (int i \u003d 0; i \u003c getNumParityUnits(); i++) {\n+      if (blockGroup.getParityBlocks()[i].isErased()) {\n+        outputBlocks[idx++] \u003d blockGroup.getParityBlocks()[i];\n+      }\n+    }\n+\n+    for (int i \u003d 0; i \u003c getNumDataUnits(); i++) {\n+      if (blockGroup.getDataBlocks()[i].isErased()) {\n+        outputBlocks[idx++] \u003d blockGroup.getDataBlocks()[i];\n+      }\n+    }\n+\n+    return outputBlocks;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ECBlock[] getOutputBlocks(ECBlockGroup blockGroup) {\n    /**\n     * If more than one blocks (either data or parity) erased, then it\u0027s not\n     * edible to recover. We don\u0027t have the check here since it will be done\n     * by upper level: ErasreCoder call can be avoid if not possible to recover\n     * at all.\n     */\n    int erasedNum \u003d getNumErasedBlocks(blockGroup);\n    ECBlock[] outputBlocks \u003d new ECBlock[erasedNum];\n\n    int idx \u003d 0;\n    for (int i \u003d 0; i \u003c getNumParityUnits(); i++) {\n      if (blockGroup.getParityBlocks()[i].isErased()) {\n        outputBlocks[idx++] \u003d blockGroup.getParityBlocks()[i];\n      }\n    }\n\n    for (int i \u003d 0; i \u003c getNumDataUnits(); i++) {\n      if (blockGroup.getDataBlocks()[i].isErased()) {\n        outputBlocks[idx++] \u003d blockGroup.getDataBlocks()[i];\n      }\n    }\n\n    return outputBlocks;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/XorErasureDecoder.java"
    }
  }
}