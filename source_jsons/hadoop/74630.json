{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProxyUserAuthenticationFilter.java",
  "functionName": "doFilter",
  "functionId": "doFilter___filterChain-FilterChain__request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authentication/server/ProxyUserAuthenticationFilter.java",
  "functionStartLine": 61,
  "functionEndLine": 105,
  "numCommitsSeen": 2,
  "timeTaken": 1296,
  "changeHistory": [
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
    "ea0b1d8fba57f56e2a75e9a70d4768ba75952823"
  ],
  "changeHistoryShort": {
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49": "Ybodychange",
    "ea0b1d8fba57f56e2a75e9a70d4768ba75952823": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16354.  Enable AuthFilter as default for WebHDFS.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "11/06/19 3:41 PM",
      "commitName": "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "23/05/19 8:36 AM",
      "commitNameOld": "ea0b1d8fba57f56e2a75e9a70d4768ba75952823",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   protected void doFilter(FilterChain filterChain, HttpServletRequest request,\n       HttpServletResponse response) throws IOException, ServletException {\n+    final HttpServletRequest lowerCaseRequest \u003d toLowerCase(request);\n+    String doAsUser \u003d lowerCaseRequest.getParameter(DO_AS);\n \n-    String doAsUser \u003d request.getParameter(DO_AS);\n     if (doAsUser !\u003d null \u0026\u0026 !doAsUser.equals(request.getRemoteUser())) {\n       LOG.debug(\"doAsUser \u003d {}, RemoteUser \u003d {} , RemoteAddress \u003d {} \",\n           doAsUser, request.getRemoteUser(), request.getRemoteAddr());\n       UserGroupInformation requestUgi \u003d (request.getUserPrincipal() !\u003d null) ?\n           UserGroupInformation.createRemoteUser(request.getRemoteUser())\n           : null;\n       if (requestUgi !\u003d null) {\n         requestUgi \u003d UserGroupInformation.createProxyUser(doAsUser,\n             requestUgi);\n         try {\n           ProxyUsers.authorize(requestUgi, request.getRemoteAddr());\n \n           final UserGroupInformation ugiF \u003d requestUgi;\n           request \u003d new HttpServletRequestWrapper(request) {\n             @Override\n             public String getRemoteUser() {\n               return ugiF.getShortUserName();\n             }\n \n             @Override\n             public Principal getUserPrincipal() {\n               return new Principal() {\n                 @Override\n                 public String getName() {\n                   return ugiF.getUserName();\n                 }\n               };\n             }\n           };\n           LOG.debug(\"Proxy user Authentication successful\");\n         } catch (AuthorizationException ex) {\n           HttpExceptionUtils.createServletExceptionResponse(response,\n               HttpServletResponse.SC_FORBIDDEN, ex);\n           LOG.warn(\"Proxy user Authentication exception\", ex);\n           return;\n         }\n       }\n     }\n     super.doFilter(filterChain, request, response);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doFilter(FilterChain filterChain, HttpServletRequest request,\n      HttpServletResponse response) throws IOException, ServletException {\n    final HttpServletRequest lowerCaseRequest \u003d toLowerCase(request);\n    String doAsUser \u003d lowerCaseRequest.getParameter(DO_AS);\n\n    if (doAsUser !\u003d null \u0026\u0026 !doAsUser.equals(request.getRemoteUser())) {\n      LOG.debug(\"doAsUser \u003d {}, RemoteUser \u003d {} , RemoteAddress \u003d {} \",\n          doAsUser, request.getRemoteUser(), request.getRemoteAddr());\n      UserGroupInformation requestUgi \u003d (request.getUserPrincipal() !\u003d null) ?\n          UserGroupInformation.createRemoteUser(request.getRemoteUser())\n          : null;\n      if (requestUgi !\u003d null) {\n        requestUgi \u003d UserGroupInformation.createProxyUser(doAsUser,\n            requestUgi);\n        try {\n          ProxyUsers.authorize(requestUgi, request.getRemoteAddr());\n\n          final UserGroupInformation ugiF \u003d requestUgi;\n          request \u003d new HttpServletRequestWrapper(request) {\n            @Override\n            public String getRemoteUser() {\n              return ugiF.getShortUserName();\n            }\n\n            @Override\n            public Principal getUserPrincipal() {\n              return new Principal() {\n                @Override\n                public String getName() {\n                  return ugiF.getUserName();\n                }\n              };\n            }\n          };\n          LOG.debug(\"Proxy user Authentication successful\");\n        } catch (AuthorizationException ex) {\n          HttpExceptionUtils.createServletExceptionResponse(response,\n              HttpServletResponse.SC_FORBIDDEN, ex);\n          LOG.warn(\"Proxy user Authentication exception\", ex);\n          return;\n        }\n      }\n    }\n    super.doFilter(filterChain, request, response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authentication/server/ProxyUserAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "ea0b1d8fba57f56e2a75e9a70d4768ba75952823": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16287.  Implement ProxyUserAuthenticationFilter for web protocol impersonation.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "23/05/19 8:36 AM",
      "commitName": "ea0b1d8fba57f56e2a75e9a70d4768ba75952823",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,44 @@\n+  protected void doFilter(FilterChain filterChain, HttpServletRequest request,\n+      HttpServletResponse response) throws IOException, ServletException {\n+\n+    String doAsUser \u003d request.getParameter(DO_AS);\n+    if (doAsUser !\u003d null \u0026\u0026 !doAsUser.equals(request.getRemoteUser())) {\n+      LOG.debug(\"doAsUser \u003d {}, RemoteUser \u003d {} , RemoteAddress \u003d {} \",\n+          doAsUser, request.getRemoteUser(), request.getRemoteAddr());\n+      UserGroupInformation requestUgi \u003d (request.getUserPrincipal() !\u003d null) ?\n+          UserGroupInformation.createRemoteUser(request.getRemoteUser())\n+          : null;\n+      if (requestUgi !\u003d null) {\n+        requestUgi \u003d UserGroupInformation.createProxyUser(doAsUser,\n+            requestUgi);\n+        try {\n+          ProxyUsers.authorize(requestUgi, request.getRemoteAddr());\n+\n+          final UserGroupInformation ugiF \u003d requestUgi;\n+          request \u003d new HttpServletRequestWrapper(request) {\n+            @Override\n+            public String getRemoteUser() {\n+              return ugiF.getShortUserName();\n+            }\n+\n+            @Override\n+            public Principal getUserPrincipal() {\n+              return new Principal() {\n+                @Override\n+                public String getName() {\n+                  return ugiF.getUserName();\n+                }\n+              };\n+            }\n+          };\n+          LOG.debug(\"Proxy user Authentication successful\");\n+        } catch (AuthorizationException ex) {\n+          HttpExceptionUtils.createServletExceptionResponse(response,\n+              HttpServletResponse.SC_FORBIDDEN, ex);\n+          LOG.warn(\"Proxy user Authentication exception\", ex);\n+          return;\n+        }\n+      }\n+    }\n+    super.doFilter(filterChain, request, response);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doFilter(FilterChain filterChain, HttpServletRequest request,\n      HttpServletResponse response) throws IOException, ServletException {\n\n    String doAsUser \u003d request.getParameter(DO_AS);\n    if (doAsUser !\u003d null \u0026\u0026 !doAsUser.equals(request.getRemoteUser())) {\n      LOG.debug(\"doAsUser \u003d {}, RemoteUser \u003d {} , RemoteAddress \u003d {} \",\n          doAsUser, request.getRemoteUser(), request.getRemoteAddr());\n      UserGroupInformation requestUgi \u003d (request.getUserPrincipal() !\u003d null) ?\n          UserGroupInformation.createRemoteUser(request.getRemoteUser())\n          : null;\n      if (requestUgi !\u003d null) {\n        requestUgi \u003d UserGroupInformation.createProxyUser(doAsUser,\n            requestUgi);\n        try {\n          ProxyUsers.authorize(requestUgi, request.getRemoteAddr());\n\n          final UserGroupInformation ugiF \u003d requestUgi;\n          request \u003d new HttpServletRequestWrapper(request) {\n            @Override\n            public String getRemoteUser() {\n              return ugiF.getShortUserName();\n            }\n\n            @Override\n            public Principal getUserPrincipal() {\n              return new Principal() {\n                @Override\n                public String getName() {\n                  return ugiF.getUserName();\n                }\n              };\n            }\n          };\n          LOG.debug(\"Proxy user Authentication successful\");\n        } catch (AuthorizationException ex) {\n          HttpExceptionUtils.createServletExceptionResponse(response,\n              HttpServletResponse.SC_FORBIDDEN, ex);\n          LOG.warn(\"Proxy user Authentication exception\", ex);\n          return;\n        }\n      }\n    }\n    super.doFilter(filterChain, request, response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authentication/server/ProxyUserAuthenticationFilter.java"
    }
  }
}