{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HBaseTimelineWriterImpl.java",
  "functionName": "store",
  "functionId": "store___rowKey-byte[]__te-TimelineEntity__flowVersion-String__table-Tables",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
  "functionStartLine": 421,
  "functionEndLine": 493,
  "numCommitsSeen": 49,
  "timeTaken": 5675,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "9f6540535d9148abbea836d54a9e94d25319c5d5",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "00e85e7a2b9446dc37265feba07473b156d66367",
    "a9fab9b644e636c1f1b2632130d4eaea70111f16",
    "92d90c3a243134177f192d1d473dd606c79a91fc",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "9f6540535d9148abbea836d54a9e94d25319c5d5": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ybodychange",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ybodychange",
    "00e85e7a2b9446dc37265feba07473b156d66367": "Ymultichange(Yparameterchange,Ybodychange)",
    "a9fab9b644e636c1f1b2632130d4eaea70111f16": "Ybodychange",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Ybodychange",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,73 @@\n   private void store(byte[] rowKey, TimelineEntity te,\n       String flowVersion,\n       Tables table) throws IOException {\n     switch (table) {\n     case APPLICATION_TABLE:\n-      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n-      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n-          te.getCreatedTime());\n-      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n-          flowVersion);\n+      ColumnRWHelper.store(rowKey, applicationTable,\n+          ApplicationColumn.ID, null, te.getId());\n+      ColumnRWHelper.store(rowKey, applicationTable,\n+          ApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n+      ColumnRWHelper.store(rowKey, applicationTable,\n+          ApplicationColumn.FLOW_VERSION, null, flowVersion);\n       storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n           applicationTable);\n       storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n           applicationTable);\n       storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n           applicationTable);\n       storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n           applicationTable);\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           ApplicationColumnPrefix.RELATES_TO, applicationTable);\n       break;\n     case ENTITY_TABLE:\n-      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n-      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n-      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n-          te.getCreatedTime());\n-      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.ID, null, te.getId());\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.TYPE, null, te.getType());\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.CREATED_TIME, null, te.getCreatedTime());\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.FLOW_VERSION, null, flowVersion);\n       storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n           entityTable);\n       storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n           entityTable);\n       storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n           entityTable);\n       storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n           entityTable);\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           EntityColumnPrefix.IS_RELATED_TO, entityTable);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           EntityColumnPrefix.RELATES_TO, entityTable);\n       break;\n     case SUBAPPLICATION_TABLE:\n-      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n-          te.getId());\n-      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n-          te.getType());\n-      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n-          te.getCreatedTime());\n-      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n-          flowVersion);\n+      ColumnRWHelper.store(rowKey, subApplicationTable, SubApplicationColumn.ID,\n+          null, te.getId());\n+      ColumnRWHelper.store(rowKey, subApplicationTable,\n+          SubApplicationColumn.TYPE, null, te.getType());\n+      ColumnRWHelper.store(rowKey, subApplicationTable,\n+          SubApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n+      ColumnRWHelper.store(rowKey, subApplicationTable,\n+          SubApplicationColumn.FLOW_VERSION, null, flowVersion);\n       storeInfo(rowKey, te.getInfo(), flowVersion,\n           SubApplicationColumnPrefix.INFO, subApplicationTable);\n       storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n           subApplicationTable);\n       storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n           subApplicationTable);\n       storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n           subApplicationTable);\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n       break;\n     default:\n       LOG.info(\"Invalid table name provided.\");\n       break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void store(byte[] rowKey, TimelineEntity te,\n      String flowVersion,\n      Tables table) throws IOException {\n    switch (table) {\n    case APPLICATION_TABLE:\n      ColumnRWHelper.store(rowKey, applicationTable,\n          ApplicationColumn.ID, null, te.getId());\n      ColumnRWHelper.store(rowKey, applicationTable,\n          ApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n      ColumnRWHelper.store(rowKey, applicationTable,\n          ApplicationColumn.FLOW_VERSION, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n          applicationTable);\n      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n          applicationTable);\n      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n          applicationTable);\n      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n          applicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n      break;\n    case ENTITY_TABLE:\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.ID, null, te.getId());\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.TYPE, null, te.getType());\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.CREATED_TIME, null, te.getCreatedTime());\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.FLOW_VERSION, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n          entityTable);\n      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n          entityTable);\n      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n          entityTable);\n      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n          entityTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO, entityTable);\n      break;\n    case SUBAPPLICATION_TABLE:\n      ColumnRWHelper.store(rowKey, subApplicationTable, SubApplicationColumn.ID,\n          null, te.getId());\n      ColumnRWHelper.store(rowKey, subApplicationTable,\n          SubApplicationColumn.TYPE, null, te.getType());\n      ColumnRWHelper.store(rowKey, subApplicationTable,\n          SubApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n      ColumnRWHelper.store(rowKey, subApplicationTable,\n          SubApplicationColumn.FLOW_VERSION, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion,\n          SubApplicationColumnPrefix.INFO, subApplicationTable);\n      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n          subApplicationTable);\n      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n          subApplicationTable);\n      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n          subApplicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n      break;\n    default:\n      LOG.info(\"Invalid table name provided.\");\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,73 @@\n   private void store(byte[] rowKey, TimelineEntity te,\n       String flowVersion,\n       Tables table) throws IOException {\n     switch (table) {\n     case APPLICATION_TABLE:\n-      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n-      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n-          te.getCreatedTime());\n-      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n-          flowVersion);\n+      ColumnRWHelper.store(rowKey, applicationTable,\n+          ApplicationColumn.ID, null, te.getId());\n+      ColumnRWHelper.store(rowKey, applicationTable,\n+          ApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n+      ColumnRWHelper.store(rowKey, applicationTable,\n+          ApplicationColumn.FLOW_VERSION, null, flowVersion);\n       storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n           applicationTable);\n       storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n           applicationTable);\n       storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n           applicationTable);\n       storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n           applicationTable);\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           ApplicationColumnPrefix.RELATES_TO, applicationTable);\n       break;\n     case ENTITY_TABLE:\n-      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n-      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n-      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n-          te.getCreatedTime());\n-      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.ID, null, te.getId());\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.TYPE, null, te.getType());\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.CREATED_TIME, null, te.getCreatedTime());\n+      ColumnRWHelper.store(rowKey, entityTable,\n+          EntityColumn.FLOW_VERSION, null, flowVersion);\n       storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n           entityTable);\n       storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n           entityTable);\n       storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n           entityTable);\n       storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n           entityTable);\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           EntityColumnPrefix.IS_RELATED_TO, entityTable);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           EntityColumnPrefix.RELATES_TO, entityTable);\n       break;\n     case SUBAPPLICATION_TABLE:\n-      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n-          te.getId());\n-      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n-          te.getType());\n-      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n-          te.getCreatedTime());\n-      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n-          flowVersion);\n+      ColumnRWHelper.store(rowKey, subApplicationTable, SubApplicationColumn.ID,\n+          null, te.getId());\n+      ColumnRWHelper.store(rowKey, subApplicationTable,\n+          SubApplicationColumn.TYPE, null, te.getType());\n+      ColumnRWHelper.store(rowKey, subApplicationTable,\n+          SubApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n+      ColumnRWHelper.store(rowKey, subApplicationTable,\n+          SubApplicationColumn.FLOW_VERSION, null, flowVersion);\n       storeInfo(rowKey, te.getInfo(), flowVersion,\n           SubApplicationColumnPrefix.INFO, subApplicationTable);\n       storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n           subApplicationTable);\n       storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n           subApplicationTable);\n       storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n           subApplicationTable);\n       storeRelations(rowKey, te.getIsRelatedToEntities(),\n           SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n       storeRelations(rowKey, te.getRelatesToEntities(),\n           SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n       break;\n     default:\n       LOG.info(\"Invalid table name provided.\");\n       break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void store(byte[] rowKey, TimelineEntity te,\n      String flowVersion,\n      Tables table) throws IOException {\n    switch (table) {\n    case APPLICATION_TABLE:\n      ColumnRWHelper.store(rowKey, applicationTable,\n          ApplicationColumn.ID, null, te.getId());\n      ColumnRWHelper.store(rowKey, applicationTable,\n          ApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n      ColumnRWHelper.store(rowKey, applicationTable,\n          ApplicationColumn.FLOW_VERSION, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n          applicationTable);\n      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n          applicationTable);\n      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n          applicationTable);\n      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n          applicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n      break;\n    case ENTITY_TABLE:\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.ID, null, te.getId());\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.TYPE, null, te.getType());\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.CREATED_TIME, null, te.getCreatedTime());\n      ColumnRWHelper.store(rowKey, entityTable,\n          EntityColumn.FLOW_VERSION, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n          entityTable);\n      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n          entityTable);\n      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n          entityTable);\n      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n          entityTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO, entityTable);\n      break;\n    case SUBAPPLICATION_TABLE:\n      ColumnRWHelper.store(rowKey, subApplicationTable, SubApplicationColumn.ID,\n          null, te.getId());\n      ColumnRWHelper.store(rowKey, subApplicationTable,\n          SubApplicationColumn.TYPE, null, te.getType());\n      ColumnRWHelper.store(rowKey, subApplicationTable,\n          SubApplicationColumn.CREATED_TIME, null, te.getCreatedTime());\n      ColumnRWHelper.store(rowKey, subApplicationTable,\n          SubApplicationColumn.FLOW_VERSION, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion,\n          SubApplicationColumnPrefix.INFO, subApplicationTable);\n      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n          subApplicationTable);\n      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n          subApplicationTable);\n      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n          subApplicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n      break;\n    default:\n      LOG.info(\"Invalid table name provided.\");\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f6540535d9148abbea836d54a9e94d25319c5d5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,69 @@\n-  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n-      boolean isApplication) throws IOException {\n-\n-    if (isApplication) {\n+  private void store(byte[] rowKey, TimelineEntity te,\n+      String flowVersion,\n+      Tables table) throws IOException {\n+    switch (table) {\n+    case APPLICATION_TABLE:\n       ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n       ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n           te.getCreatedTime());\n       ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n           flowVersion);\n-      Map\u003cString, Object\u003e info \u003d te.getInfo();\n-      if (info !\u003d null) {\n-        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n-              stringKeyConverter.encode(entry.getKey()), null,\n-              entry.getValue());\n-        }\n-      }\n-    } else {\n+      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n+          applicationTable);\n+      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n+          applicationTable);\n+      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n+          applicationTable);\n+      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n+          applicationTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n+      break;\n+    case ENTITY_TABLE:\n       EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n       EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n       EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n           te.getCreatedTime());\n       EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n-      Map\u003cString, Object\u003e info \u003d te.getInfo();\n-      if (info !\u003d null) {\n-        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n-              stringKeyConverter.encode(entry.getKey()), null,\n-              entry.getValue());\n-        }\n-      }\n+      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n+          entityTable);\n+      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n+          entityTable);\n+      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n+          entityTable);\n+      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n+          entityTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          EntityColumnPrefix.RELATES_TO, entityTable);\n+      break;\n+    case SUBAPPLICATION_TABLE:\n+      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n+          te.getId());\n+      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n+          te.getType());\n+      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n+          te.getCreatedTime());\n+      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n+          flowVersion);\n+      storeInfo(rowKey, te.getInfo(), flowVersion,\n+          SubApplicationColumnPrefix.INFO, subApplicationTable);\n+      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n+          subApplicationTable);\n+      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n+          subApplicationTable);\n+      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n+          subApplicationTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n+      break;\n+    default:\n+      LOG.info(\"Invalid table name provided.\");\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void store(byte[] rowKey, TimelineEntity te,\n      String flowVersion,\n      Tables table) throws IOException {\n    switch (table) {\n    case APPLICATION_TABLE:\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n          applicationTable);\n      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n          applicationTable);\n      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n          applicationTable);\n      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n          applicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n      break;\n    case ENTITY_TABLE:\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n          entityTable);\n      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n          entityTable);\n      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n          entityTable);\n      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n          entityTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO, entityTable);\n      break;\n    case SUBAPPLICATION_TABLE:\n      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n          te.getId());\n      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n          te.getType());\n      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n          te.getCreatedTime());\n      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n          flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion,\n          SubApplicationColumnPrefix.INFO, subApplicationTable);\n      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n          subApplicationTable);\n      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n          subApplicationTable);\n      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n          subApplicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n      break;\n    default:\n      LOG.info(\"Invalid table name provided.\");\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "storeInfo",
            "newValue": "store"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,69 @@\n-  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n-      boolean isApplication) throws IOException {\n-\n-    if (isApplication) {\n+  private void store(byte[] rowKey, TimelineEntity te,\n+      String flowVersion,\n+      Tables table) throws IOException {\n+    switch (table) {\n+    case APPLICATION_TABLE:\n       ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n       ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n           te.getCreatedTime());\n       ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n           flowVersion);\n-      Map\u003cString, Object\u003e info \u003d te.getInfo();\n-      if (info !\u003d null) {\n-        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n-              stringKeyConverter.encode(entry.getKey()), null,\n-              entry.getValue());\n-        }\n-      }\n-    } else {\n+      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n+          applicationTable);\n+      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n+          applicationTable);\n+      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n+          applicationTable);\n+      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n+          applicationTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n+      break;\n+    case ENTITY_TABLE:\n       EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n       EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n       EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n           te.getCreatedTime());\n       EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n-      Map\u003cString, Object\u003e info \u003d te.getInfo();\n-      if (info !\u003d null) {\n-        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n-              stringKeyConverter.encode(entry.getKey()), null,\n-              entry.getValue());\n-        }\n-      }\n+      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n+          entityTable);\n+      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n+          entityTable);\n+      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n+          entityTable);\n+      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n+          entityTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          EntityColumnPrefix.RELATES_TO, entityTable);\n+      break;\n+    case SUBAPPLICATION_TABLE:\n+      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n+          te.getId());\n+      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n+          te.getType());\n+      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n+          te.getCreatedTime());\n+      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n+          flowVersion);\n+      storeInfo(rowKey, te.getInfo(), flowVersion,\n+          SubApplicationColumnPrefix.INFO, subApplicationTable);\n+      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n+          subApplicationTable);\n+      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n+          subApplicationTable);\n+      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n+          subApplicationTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n+      break;\n+    default:\n+      LOG.info(\"Invalid table name provided.\");\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void store(byte[] rowKey, TimelineEntity te,\n      String flowVersion,\n      Tables table) throws IOException {\n    switch (table) {\n    case APPLICATION_TABLE:\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n          applicationTable);\n      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n          applicationTable);\n      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n          applicationTable);\n      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n          applicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n      break;\n    case ENTITY_TABLE:\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n          entityTable);\n      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n          entityTable);\n      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n          entityTable);\n      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n          entityTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO, entityTable);\n      break;\n    case SUBAPPLICATION_TABLE:\n      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n          te.getId());\n      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n          te.getType());\n      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n          te.getCreatedTime());\n      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n          flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion,\n          SubApplicationColumnPrefix.INFO, subApplicationTable);\n      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n          subApplicationTable);\n      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n          subApplicationTable);\n      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n          subApplicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n      break;\n    default:\n      LOG.info(\"Invalid table name provided.\");\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[rowKey-byte[], te-TimelineEntity, flowVersion-String, isApplication-boolean]",
            "newValue": "[rowKey-byte[], te-TimelineEntity, flowVersion-String, table-Tables]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,69 @@\n-  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n-      boolean isApplication) throws IOException {\n-\n-    if (isApplication) {\n+  private void store(byte[] rowKey, TimelineEntity te,\n+      String flowVersion,\n+      Tables table) throws IOException {\n+    switch (table) {\n+    case APPLICATION_TABLE:\n       ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n       ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n           te.getCreatedTime());\n       ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n           flowVersion);\n-      Map\u003cString, Object\u003e info \u003d te.getInfo();\n-      if (info !\u003d null) {\n-        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n-              stringKeyConverter.encode(entry.getKey()), null,\n-              entry.getValue());\n-        }\n-      }\n-    } else {\n+      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n+          applicationTable);\n+      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n+          applicationTable);\n+      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n+          applicationTable);\n+      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n+          applicationTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n+      break;\n+    case ENTITY_TABLE:\n       EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n       EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n       EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n           te.getCreatedTime());\n       EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n-      Map\u003cString, Object\u003e info \u003d te.getInfo();\n-      if (info !\u003d null) {\n-        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n-              stringKeyConverter.encode(entry.getKey()), null,\n-              entry.getValue());\n-        }\n-      }\n+      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n+          entityTable);\n+      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n+          entityTable);\n+      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n+          entityTable);\n+      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n+          entityTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          EntityColumnPrefix.RELATES_TO, entityTable);\n+      break;\n+    case SUBAPPLICATION_TABLE:\n+      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n+          te.getId());\n+      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n+          te.getType());\n+      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n+          te.getCreatedTime());\n+      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n+          flowVersion);\n+      storeInfo(rowKey, te.getInfo(), flowVersion,\n+          SubApplicationColumnPrefix.INFO, subApplicationTable);\n+      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n+          subApplicationTable);\n+      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n+          subApplicationTable);\n+      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n+          subApplicationTable);\n+      storeRelations(rowKey, te.getIsRelatedToEntities(),\n+          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n+      storeRelations(rowKey, te.getRelatesToEntities(),\n+          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n+      break;\n+    default:\n+      LOG.info(\"Invalid table name provided.\");\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void store(byte[] rowKey, TimelineEntity te,\n      String flowVersion,\n      Tables table) throws IOException {\n    switch (table) {\n    case APPLICATION_TABLE:\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, ApplicationColumnPrefix.INFO,\n          applicationTable);\n      storeMetrics(rowKey, te.getMetrics(), ApplicationColumnPrefix.METRIC,\n          applicationTable);\n      storeEvents(rowKey, te.getEvents(), ApplicationColumnPrefix.EVENT,\n          applicationTable);\n      storeConfig(rowKey, te.getConfigs(), ApplicationColumnPrefix.CONFIG,\n          applicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          ApplicationColumnPrefix.IS_RELATED_TO, applicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          ApplicationColumnPrefix.RELATES_TO, applicationTable);\n      break;\n    case ENTITY_TABLE:\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion, EntityColumnPrefix.INFO,\n          entityTable);\n      storeMetrics(rowKey, te.getMetrics(), EntityColumnPrefix.METRIC,\n          entityTable);\n      storeEvents(rowKey, te.getEvents(), EntityColumnPrefix.EVENT,\n          entityTable);\n      storeConfig(rowKey, te.getConfigs(), EntityColumnPrefix.CONFIG,\n          entityTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          EntityColumnPrefix.IS_RELATED_TO, entityTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          EntityColumnPrefix.RELATES_TO, entityTable);\n      break;\n    case SUBAPPLICATION_TABLE:\n      SubApplicationColumn.ID.store(rowKey, subApplicationTable, null,\n          te.getId());\n      SubApplicationColumn.TYPE.store(rowKey, subApplicationTable, null,\n          te.getType());\n      SubApplicationColumn.CREATED_TIME.store(rowKey, subApplicationTable, null,\n          te.getCreatedTime());\n      SubApplicationColumn.FLOW_VERSION.store(rowKey, subApplicationTable, null,\n          flowVersion);\n      storeInfo(rowKey, te.getInfo(), flowVersion,\n          SubApplicationColumnPrefix.INFO, subApplicationTable);\n      storeMetrics(rowKey, te.getMetrics(), SubApplicationColumnPrefix.METRIC,\n          subApplicationTable);\n      storeEvents(rowKey, te.getEvents(), SubApplicationColumnPrefix.EVENT,\n          subApplicationTable);\n      storeConfig(rowKey, te.getConfigs(), SubApplicationColumnPrefix.CONFIG,\n          subApplicationTable);\n      storeRelations(rowKey, te.getIsRelatedToEntities(),\n          SubApplicationColumnPrefix.IS_RELATED_TO, subApplicationTable);\n      storeRelations(rowKey, te.getRelatesToEntities(),\n          SubApplicationColumnPrefix.RELATES_TO, subApplicationTable);\n      break;\n    default:\n      LOG.info(\"Invalid table name provided.\");\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n      boolean isApplication) throws IOException {\n\n    if (isApplication) {\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n              stringKeyConverter.encode(entry.getKey()), null,\n              entry.getValue());\n        }\n      }\n    } else {\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n              stringKeyConverter.encode(entry.getKey()), null,\n              entry.getValue());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n       boolean isApplication) throws IOException {\n \n     if (isApplication) {\n       ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n       ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n           te.getCreatedTime());\n       ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n           flowVersion);\n       Map\u003cString, Object\u003e info \u003d te.getInfo();\n       if (info !\u003d null) {\n         for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n           ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n-              StringKeyConverter.getInstance().encode(entry.getKey()), null,\n+              stringKeyConverter.encode(entry.getKey()), null,\n               entry.getValue());\n         }\n       }\n     } else {\n       EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n       EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n       EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n           te.getCreatedTime());\n       EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n       Map\u003cString, Object\u003e info \u003d te.getInfo();\n       if (info !\u003d null) {\n         for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n           EntityColumnPrefix.INFO.store(rowKey, entityTable,\n-              StringKeyConverter.getInstance().encode(entry.getKey()), null,\n+              stringKeyConverter.encode(entry.getKey()), null,\n               entry.getValue());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n      boolean isApplication) throws IOException {\n\n    if (isApplication) {\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n              stringKeyConverter.encode(entry.getKey()), null,\n              entry.getValue());\n        }\n      }\n    } else {\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n              stringKeyConverter.encode(entry.getKey()), null,\n              entry.getValue());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "831a3ffd6ef49214b08cb30329494418703be0f9",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n       boolean isApplication) throws IOException {\n \n     if (isApplication) {\n       ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n       ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n           te.getCreatedTime());\n       ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n           flowVersion);\n       Map\u003cString, Object\u003e info \u003d te.getInfo();\n       if (info !\u003d null) {\n         for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n           ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n-              entry.getKey(), null, entry.getValue());\n+              StringKeyConverter.getInstance().encode(entry.getKey()), null,\n+              entry.getValue());\n         }\n       }\n     } else {\n       EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n       EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n       EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n           te.getCreatedTime());\n       EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n       Map\u003cString, Object\u003e info \u003d te.getInfo();\n       if (info !\u003d null) {\n         for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-          EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n-              null, entry.getValue());\n+          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n+              StringKeyConverter.getInstance().encode(entry.getKey()), null,\n+              entry.getValue());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n      boolean isApplication) throws IOException {\n\n    if (isApplication) {\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n              StringKeyConverter.getInstance().encode(entry.getKey()), null,\n              entry.getValue());\n        }\n      }\n    } else {\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          EntityColumnPrefix.INFO.store(rowKey, entityTable,\n              StringKeyConverter.getInstance().encode(entry.getKey()), null,\n              entry.getValue());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n   private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n       boolean isApplication) throws IOException {\n \n     if (isApplication) {\n       ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n       ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n           te.getCreatedTime());\n-      ApplicationColumn.MODIFIED_TIME.store(rowKey, applicationTable, null,\n-          te.getModifiedTime());\n       ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n           flowVersion);\n       Map\u003cString, Object\u003e info \u003d te.getInfo();\n       if (info !\u003d null) {\n         for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n           ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n               entry.getKey(), null, entry.getValue());\n         }\n       }\n     } else {\n       EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n       EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n       EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n           te.getCreatedTime());\n-      EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n-          te.getModifiedTime());\n       EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n       Map\u003cString, Object\u003e info \u003d te.getInfo();\n       if (info !\u003d null) {\n         for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n           EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n               null, entry.getValue());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n      boolean isApplication) throws IOException {\n\n    if (isApplication) {\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n              entry.getKey(), null, entry.getValue());\n        }\n      }\n    } else {\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n              null, entry.getValue());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "00e85e7a2b9446dc37265feba07473b156d66367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,35 @@\n-  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n-      throws IOException {\n+  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n+      boolean isApplication) throws IOException {\n \n-    EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n-    EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n-    EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n-        te.getCreatedTime());\n-    EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n-        te.getModifiedTime());\n-    EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n-    Map\u003cString, Object\u003e info \u003d te.getInfo();\n-    if (info !\u003d null) {\n-      for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-        EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n-            null, entry.getValue());\n+    if (isApplication) {\n+      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n+      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n+          te.getCreatedTime());\n+      ApplicationColumn.MODIFIED_TIME.store(rowKey, applicationTable, null,\n+          te.getModifiedTime());\n+      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n+          flowVersion);\n+      Map\u003cString, Object\u003e info \u003d te.getInfo();\n+      if (info !\u003d null) {\n+        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n+          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n+              entry.getKey(), null, entry.getValue());\n+        }\n+      }\n+    } else {\n+      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n+      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n+      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n+          te.getCreatedTime());\n+      EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n+          te.getModifiedTime());\n+      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n+      Map\u003cString, Object\u003e info \u003d te.getInfo();\n+      if (info !\u003d null) {\n+        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n+          EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n+              null, entry.getValue());\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n      boolean isApplication) throws IOException {\n\n    if (isApplication) {\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.MODIFIED_TIME.store(rowKey, applicationTable, null,\n          te.getModifiedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n              entry.getKey(), null, entry.getValue());\n        }\n      }\n    } else {\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n          te.getModifiedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n              null, entry.getValue());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[rowKey-byte[], te-TimelineEntity, flowVersion-String]",
            "newValue": "[rowKey-byte[], te-TimelineEntity, flowVersion-String, isApplication-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,35 @@\n-  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n-      throws IOException {\n+  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n+      boolean isApplication) throws IOException {\n \n-    EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n-    EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n-    EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n-        te.getCreatedTime());\n-    EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n-        te.getModifiedTime());\n-    EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n-    Map\u003cString, Object\u003e info \u003d te.getInfo();\n-    if (info !\u003d null) {\n-      for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n-        EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n-            null, entry.getValue());\n+    if (isApplication) {\n+      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n+      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n+          te.getCreatedTime());\n+      ApplicationColumn.MODIFIED_TIME.store(rowKey, applicationTable, null,\n+          te.getModifiedTime());\n+      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n+          flowVersion);\n+      Map\u003cString, Object\u003e info \u003d te.getInfo();\n+      if (info !\u003d null) {\n+        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n+          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n+              entry.getKey(), null, entry.getValue());\n+        }\n+      }\n+    } else {\n+      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n+      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n+      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n+          te.getCreatedTime());\n+      EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n+          te.getModifiedTime());\n+      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n+      Map\u003cString, Object\u003e info \u003d te.getInfo();\n+      if (info !\u003d null) {\n+        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n+          EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n+              null, entry.getValue());\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion,\n      boolean isApplication) throws IOException {\n\n    if (isApplication) {\n      ApplicationColumn.ID.store(rowKey, applicationTable, null, te.getId());\n      ApplicationColumn.CREATED_TIME.store(rowKey, applicationTable, null,\n          te.getCreatedTime());\n      ApplicationColumn.MODIFIED_TIME.store(rowKey, applicationTable, null,\n          te.getModifiedTime());\n      ApplicationColumn.FLOW_VERSION.store(rowKey, applicationTable, null,\n          flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          ApplicationColumnPrefix.INFO.store(rowKey, applicationTable,\n              entry.getKey(), null, entry.getValue());\n        }\n      }\n    } else {\n      EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n      EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n      EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n          te.getCreatedTime());\n      EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n          te.getModifiedTime());\n      EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n      Map\u003cString, Object\u003e info \u003d te.getInfo();\n      if (info !\u003d null) {\n        for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n          EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n              null, entry.getValue());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "a9fab9b644e636c1f1b2632130d4eaea70111f16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3908. Fixed bugs in HBaseTimelineWriterImpl. Contributed by Vrushali C and Sangjin Lee.\n\n(cherry picked from commit df0ec473a84871b0effd7ca6faac776210d7df09)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8603736ef2bb34605ea10f516dbe4e73bed3f309",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,18 @@\n   private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n       throws IOException {\n \n     EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n     EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n     EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n         te.getCreatedTime());\n     EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n         te.getModifiedTime());\n     EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n+    Map\u003cString, Object\u003e info \u003d te.getInfo();\n+    if (info !\u003d null) {\n+      for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n+        EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n+            null, entry.getValue());\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n      throws IOException {\n\n    EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n    EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n    EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n        te.getCreatedTime());\n    EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n        te.getModifiedTime());\n    EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n    Map\u003cString, Object\u003e info \u003d te.getInfo();\n    if (info !\u003d null) {\n      for (Map.Entry\u003cString, Object\u003e entry : info.entrySet()) {\n        EntityColumnPrefix.INFO.store(rowKey, entityTable, entry.getKey(),\n            null, entry.getValue());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n       throws IOException {\n \n-    EntityColumnDetails.ID.store(rowKey, entityTable, te.getId());\n-    EntityColumnDetails.TYPE.store(rowKey, entityTable, te.getType());\n-    EntityColumnDetails.CREATED_TIME.store(rowKey, entityTable,\n+    EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n+    EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n+    EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n         te.getCreatedTime());\n-    EntityColumnDetails.MODIFIED_TIME.store(rowKey, entityTable,\n+    EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n         te.getModifiedTime());\n-    EntityColumnDetails.FLOW_VERSION.store(rowKey, entityTable, flowVersion);\n+    EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n      throws IOException {\n\n    EntityColumn.ID.store(rowKey, entityTable, null, te.getId());\n    EntityColumn.TYPE.store(rowKey, entityTable, null, te.getType());\n    EntityColumn.CREATED_TIME.store(rowKey, entityTable, null,\n        te.getCreatedTime());\n    EntityColumn.MODIFIED_TIME.store(rowKey, entityTable, null,\n        te.getModifiedTime());\n    EntityColumn.FLOW_VERSION.store(rowKey, entityTable, null, flowVersion);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3411. [Storage implementation] explore the native HBase write schema for storage (Vrushali C via sjlee)\n\n(cherry picked from commit 7a3068854d27eadae1c57545988f5b2029bf119a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,11 @@\n+  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n+      throws IOException {\n+\n+    EntityColumnDetails.ID.store(rowKey, entityTable, te.getId());\n+    EntityColumnDetails.TYPE.store(rowKey, entityTable, te.getType());\n+    EntityColumnDetails.CREATED_TIME.store(rowKey, entityTable,\n+        te.getCreatedTime());\n+    EntityColumnDetails.MODIFIED_TIME.store(rowKey, entityTable,\n+        te.getModifiedTime());\n+    EntityColumnDetails.FLOW_VERSION.store(rowKey, entityTable, flowVersion);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeInfo(byte[] rowKey, TimelineEntity te, String flowVersion)\n      throws IOException {\n\n    EntityColumnDetails.ID.store(rowKey, entityTable, te.getId());\n    EntityColumnDetails.TYPE.store(rowKey, entityTable, te.getType());\n    EntityColumnDetails.CREATED_TIME.store(rowKey, entityTable,\n        te.getCreatedTime());\n    EntityColumnDetails.MODIFIED_TIME.store(rowKey, entityTable,\n        te.getModifiedTime());\n    EntityColumnDetails.FLOW_VERSION.store(rowKey, entityTable, flowVersion);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
    }
  }
}