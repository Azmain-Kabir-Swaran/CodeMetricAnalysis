{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockCompressorStream.java",
  "functionName": "write",
  "functionId": "write___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
  "functionStartLine": 82,
  "functionEndLine": 134,
  "numCommitsSeen": 6,
  "timeTaken": 762,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void write(byte[] b, int off, int len) throws IOException {\n    // Sanity checks\n    if (compressor.finished()) {\n      throw new IOException(\"write beyond end of stream\");\n    }\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if ((off \u003c 0) || (off \u003e b.length) || (len \u003c 0) ||\n               ((off + len) \u003e b.length)) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return;\n    }\n\n    long limlen \u003d compressor.getBytesRead();\n    if (len + limlen \u003e MAX_INPUT_SIZE \u0026\u0026 limlen \u003e 0) {\n      // Adding this segment would exceed the maximum size.\n      // Flush data if we have it.\n      finish();\n      compressor.reset();\n    }\n\n    if (len \u003e MAX_INPUT_SIZE) {\n      // The data we\u0027re given exceeds the maximum size. Any data\n      // we had have been flushed, so we write out this chunk in segments\n      // not exceeding the maximum size until it is exhausted.\n      rawWriteInt(len);\n      do {\n        int bufLen \u003d Math.min(len, MAX_INPUT_SIZE);\n        \n        compressor.setInput(b, off, bufLen);\n        compressor.finish();\n        while (!compressor.finished()) {\n          compress();\n        }\n        compressor.reset();\n        off +\u003d bufLen;\n        len -\u003d bufLen;\n      } while (len \u003e 0);\n      return;\n    }\n\n    // Give data to the compressor\n    compressor.setInput(b, off, len);\n    if (!compressor.needsInput()) {\n      // compressor buffer size might be smaller than the maximum\n      // size, so we permit it to flush if required.\n      rawWriteInt((int)compressor.getBytesRead());\n      do {\n        compress();\n      } while (!compressor.needsInput());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void write(byte[] b, int off, int len) throws IOException {\n    // Sanity checks\n    if (compressor.finished()) {\n      throw new IOException(\"write beyond end of stream\");\n    }\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if ((off \u003c 0) || (off \u003e b.length) || (len \u003c 0) ||\n               ((off + len) \u003e b.length)) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return;\n    }\n\n    long limlen \u003d compressor.getBytesRead();\n    if (len + limlen \u003e MAX_INPUT_SIZE \u0026\u0026 limlen \u003e 0) {\n      // Adding this segment would exceed the maximum size.\n      // Flush data if we have it.\n      finish();\n      compressor.reset();\n    }\n\n    if (len \u003e MAX_INPUT_SIZE) {\n      // The data we\u0027re given exceeds the maximum size. Any data\n      // we had have been flushed, so we write out this chunk in segments\n      // not exceeding the maximum size until it is exhausted.\n      rawWriteInt(len);\n      do {\n        int bufLen \u003d Math.min(len, MAX_INPUT_SIZE);\n        \n        compressor.setInput(b, off, bufLen);\n        compressor.finish();\n        while (!compressor.finished()) {\n          compress();\n        }\n        compressor.reset();\n        off +\u003d bufLen;\n        len -\u003d bufLen;\n      } while (len \u003e 0);\n      return;\n    }\n\n    // Give data to the compressor\n    compressor.setInput(b, off, len);\n    if (!compressor.needsInput()) {\n      // compressor buffer size might be smaller than the maximum\n      // size, so we permit it to flush if required.\n      rawWriteInt((int)compressor.getBytesRead());\n      do {\n        compress();\n      } while (!compressor.needsInput());\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void write(byte[] b, int off, int len) throws IOException {\n    // Sanity checks\n    if (compressor.finished()) {\n      throw new IOException(\"write beyond end of stream\");\n    }\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if ((off \u003c 0) || (off \u003e b.length) || (len \u003c 0) ||\n               ((off + len) \u003e b.length)) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return;\n    }\n\n    long limlen \u003d compressor.getBytesRead();\n    if (len + limlen \u003e MAX_INPUT_SIZE \u0026\u0026 limlen \u003e 0) {\n      // Adding this segment would exceed the maximum size.\n      // Flush data if we have it.\n      finish();\n      compressor.reset();\n    }\n\n    if (len \u003e MAX_INPUT_SIZE) {\n      // The data we\u0027re given exceeds the maximum size. Any data\n      // we had have been flushed, so we write out this chunk in segments\n      // not exceeding the maximum size until it is exhausted.\n      rawWriteInt(len);\n      do {\n        int bufLen \u003d Math.min(len, MAX_INPUT_SIZE);\n        \n        compressor.setInput(b, off, bufLen);\n        compressor.finish();\n        while (!compressor.finished()) {\n          compress();\n        }\n        compressor.reset();\n        off +\u003d bufLen;\n        len -\u003d bufLen;\n      } while (len \u003e 0);\n      return;\n    }\n\n    // Give data to the compressor\n    compressor.setInput(b, off, len);\n    if (!compressor.needsInput()) {\n      // compressor buffer size might be smaller than the maximum\n      // size, so we permit it to flush if required.\n      rawWriteInt((int)compressor.getBytesRead());\n      do {\n        compress();\n      } while (!compressor.needsInput());\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/BlockCompressorStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/BlockCompressorStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,53 @@\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    // Sanity checks\n+    if (compressor.finished()) {\n+      throw new IOException(\"write beyond end of stream\");\n+    }\n+    if (b \u003d\u003d null) {\n+      throw new NullPointerException();\n+    } else if ((off \u003c 0) || (off \u003e b.length) || (len \u003c 0) ||\n+               ((off + len) \u003e b.length)) {\n+      throw new IndexOutOfBoundsException();\n+    } else if (len \u003d\u003d 0) {\n+      return;\n+    }\n+\n+    long limlen \u003d compressor.getBytesRead();\n+    if (len + limlen \u003e MAX_INPUT_SIZE \u0026\u0026 limlen \u003e 0) {\n+      // Adding this segment would exceed the maximum size.\n+      // Flush data if we have it.\n+      finish();\n+      compressor.reset();\n+    }\n+\n+    if (len \u003e MAX_INPUT_SIZE) {\n+      // The data we\u0027re given exceeds the maximum size. Any data\n+      // we had have been flushed, so we write out this chunk in segments\n+      // not exceeding the maximum size until it is exhausted.\n+      rawWriteInt(len);\n+      do {\n+        int bufLen \u003d Math.min(len, MAX_INPUT_SIZE);\n+        \n+        compressor.setInput(b, off, bufLen);\n+        compressor.finish();\n+        while (!compressor.finished()) {\n+          compress();\n+        }\n+        compressor.reset();\n+        off +\u003d bufLen;\n+        len -\u003d bufLen;\n+      } while (len \u003e 0);\n+      return;\n+    }\n+\n+    // Give data to the compressor\n+    compressor.setInput(b, off, len);\n+    if (!compressor.needsInput()) {\n+      // compressor buffer size might be smaller than the maximum\n+      // size, so we permit it to flush if required.\n+      rawWriteInt((int)compressor.getBytesRead());\n+      do {\n+        compress();\n+      } while (!compressor.needsInput());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void write(byte[] b, int off, int len) throws IOException {\n    // Sanity checks\n    if (compressor.finished()) {\n      throw new IOException(\"write beyond end of stream\");\n    }\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if ((off \u003c 0) || (off \u003e b.length) || (len \u003c 0) ||\n               ((off + len) \u003e b.length)) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return;\n    }\n\n    long limlen \u003d compressor.getBytesRead();\n    if (len + limlen \u003e MAX_INPUT_SIZE \u0026\u0026 limlen \u003e 0) {\n      // Adding this segment would exceed the maximum size.\n      // Flush data if we have it.\n      finish();\n      compressor.reset();\n    }\n\n    if (len \u003e MAX_INPUT_SIZE) {\n      // The data we\u0027re given exceeds the maximum size. Any data\n      // we had have been flushed, so we write out this chunk in segments\n      // not exceeding the maximum size until it is exhausted.\n      rawWriteInt(len);\n      do {\n        int bufLen \u003d Math.min(len, MAX_INPUT_SIZE);\n        \n        compressor.setInput(b, off, bufLen);\n        compressor.finish();\n        while (!compressor.finished()) {\n          compress();\n        }\n        compressor.reset();\n        off +\u003d bufLen;\n        len -\u003d bufLen;\n      } while (len \u003e 0);\n      return;\n    }\n\n    // Give data to the compressor\n    compressor.setInput(b, off, len);\n    if (!compressor.needsInput()) {\n      // compressor buffer size might be smaller than the maximum\n      // size, so we permit it to flush if required.\n      rawWriteInt((int)compressor.getBytesRead());\n      do {\n        compress();\n      } while (!compressor.needsInput());\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/BlockCompressorStream.java"
    }
  }
}