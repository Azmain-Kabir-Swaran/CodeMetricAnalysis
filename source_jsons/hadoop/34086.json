{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsHandlerImpl.java",
  "functionName": "mountCGroupController",
  "functionId": "mountCGroupController___controller-CGroupController",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
  "functionStartLine": 279,
  "functionEndLine": 325,
  "numCommitsSeen": 25,
  "timeTaken": 3126,
  "changeHistory": [
    "e0c21c6da91776caf661661a19c368939c81fcc4",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "a2f680493f040704e2b85108e286731ee3860a52",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
    "059caf99891943d9587cac19b48e82efbed06b2d",
    "838b06ac87339494cea706d4a97e7f5383bdc442"
  ],
  "changeHistoryShort": {
    "e0c21c6da91776caf661661a19c368939c81fcc4": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "a2f680493f040704e2b85108e286731ee3860a52": "Ybodychange",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": "Ymultichange(Ymodifierchange,Ybodychange)",
    "059caf99891943d9587cac19b48e82efbed06b2d": "Ybodychange",
    "838b06ac87339494cea706d4a97e7f5383bdc442": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0c21c6da91776caf661661a19c368939c81fcc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9092. Create an object for cgroups mount enable and cgroups mount path as they belong together. Contributed by Gergely Pollak\n",
      "commitDate": "09/08/19 1:18 AM",
      "commitName": "e0c21c6da91776caf661661a19c368939c81fcc4",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 143.6,
      "commitsBetweenForRepo": 1035,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,47 @@\n   private void mountCGroupController(CGroupController controller)\n       throws ResourceHandlerException {\n-    if (cGroupMountPath \u003d\u003d null) {\n-      throw new ResourceHandlerException(\n-          String.format(\"Cgroups mount path not specified in %s.\",\n-              YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));\n-    }\n     String existingMountPath \u003d getControllerPath(controller);\n     String requestedMountPath \u003d\n-        new File(cGroupMountPath, controller.getName()).getAbsolutePath();\n+        new File(cGroupsMountConfig.getMountPath(),\n+            controller.getName()).getAbsolutePath();\n \n     if (existingMountPath \u003d\u003d null ||\n         !requestedMountPath.equals(existingMountPath)) {\n       //lock out other readers/writers till we are done\n       rwLock.writeLock().lock();\n       try {\n         // If the controller was already mounted we have to mount it\n         // with the same options to clone the mount point otherwise\n         // the operation will fail\n         String mountOptions;\n         if (existingMountPath !\u003d null) {\n           mountOptions \u003d Joiner.on(\u0027,\u0027)\n               .join(parsedMtab.get(existingMountPath));\n         } else {\n           mountOptions \u003d controller.getName();\n         }\n \n         String cGroupKV \u003d\n             mountOptions + \"\u003d\" + requestedMountPath;\n         PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n             .OperationType.MOUNT_CGROUPS;\n         PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n \n         op.appendArgs(cGroupPrefix, cGroupKV);\n         LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n               requestedMountPath);\n         privilegedOperationExecutor.executePrivilegedOperation(op, false);\n \n         //if privileged operation succeeds, update controller paths\n         controllerPaths.put(controller, requestedMountPath);\n       } catch (PrivilegedOperationException e) {\n         LOG.error(\"Failed to mount controller: \" + controller.getName());\n         throw new ResourceHandlerException(\"Failed to mount controller: \"\n             + controller.getName());\n       } finally {\n         rwLock.writeLock().unlock();\n       }\n     } else {\n       LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    String existingMountPath \u003d getControllerPath(controller);\n    String requestedMountPath \u003d\n        new File(cGroupsMountConfig.getMountPath(),\n            controller.getName()).getAbsolutePath();\n\n    if (existingMountPath \u003d\u003d null ||\n        !requestedMountPath.equals(existingMountPath)) {\n      //lock out other readers/writers till we are done\n      rwLock.writeLock().lock();\n      try {\n        // If the controller was already mounted we have to mount it\n        // with the same options to clone the mount point otherwise\n        // the operation will fail\n        String mountOptions;\n        if (existingMountPath !\u003d null) {\n          mountOptions \u003d Joiner.on(\u0027,\u0027)\n              .join(parsedMtab.get(existingMountPath));\n        } else {\n          mountOptions \u003d controller.getName();\n        }\n\n        String cGroupKV \u003d\n            mountOptions + \"\u003d\" + requestedMountPath;\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n\n        op.appendArgs(cGroupPrefix, cGroupKV);\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              requestedMountPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, requestedMountPath);\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "10/12/18 11:12 AM",
      "commitNameOld": "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 87.11,
      "commitsBetweenForRepo": 653,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n   private void mountCGroupController(CGroupController controller)\n       throws ResourceHandlerException {\n     if (cGroupMountPath \u003d\u003d null) {\n       throw new ResourceHandlerException(\n           String.format(\"Cgroups mount path not specified in %s.\",\n               YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));\n     }\n     String existingMountPath \u003d getControllerPath(controller);\n     String requestedMountPath \u003d\n         new File(cGroupMountPath, controller.getName()).getAbsolutePath();\n \n     if (existingMountPath \u003d\u003d null ||\n         !requestedMountPath.equals(existingMountPath)) {\n+      //lock out other readers/writers till we are done\n+      rwLock.writeLock().lock();\n       try {\n-        //lock out other readers/writers till we are done\n-        rwLock.writeLock().lock();\n-\n         // If the controller was already mounted we have to mount it\n         // with the same options to clone the mount point otherwise\n         // the operation will fail\n         String mountOptions;\n         if (existingMountPath !\u003d null) {\n           mountOptions \u003d Joiner.on(\u0027,\u0027)\n               .join(parsedMtab.get(existingMountPath));\n         } else {\n           mountOptions \u003d controller.getName();\n         }\n \n         String cGroupKV \u003d\n             mountOptions + \"\u003d\" + requestedMountPath;\n         PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n             .OperationType.MOUNT_CGROUPS;\n         PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n \n         op.appendArgs(cGroupPrefix, cGroupKV);\n         LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n               requestedMountPath);\n         privilegedOperationExecutor.executePrivilegedOperation(op, false);\n \n         //if privileged operation succeeds, update controller paths\n         controllerPaths.put(controller, requestedMountPath);\n       } catch (PrivilegedOperationException e) {\n         LOG.error(\"Failed to mount controller: \" + controller.getName());\n         throw new ResourceHandlerException(\"Failed to mount controller: \"\n             + controller.getName());\n       } finally {\n         rwLock.writeLock().unlock();\n       }\n     } else {\n       LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    if (cGroupMountPath \u003d\u003d null) {\n      throw new ResourceHandlerException(\n          String.format(\"Cgroups mount path not specified in %s.\",\n              YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));\n    }\n    String existingMountPath \u003d getControllerPath(controller);\n    String requestedMountPath \u003d\n        new File(cGroupMountPath, controller.getName()).getAbsolutePath();\n\n    if (existingMountPath \u003d\u003d null ||\n        !requestedMountPath.equals(existingMountPath)) {\n      //lock out other readers/writers till we are done\n      rwLock.writeLock().lock();\n      try {\n        // If the controller was already mounted we have to mount it\n        // with the same options to clone the mount point otherwise\n        // the operation will fail\n        String mountOptions;\n        if (existingMountPath !\u003d null) {\n          mountOptions \u003d Joiner.on(\u0027,\u0027)\n              .join(parsedMtab.get(existingMountPath));\n        } else {\n          mountOptions \u003d controller.getName();\n        }\n\n        String cGroupKV \u003d\n            mountOptions + \"\u003d\" + requestedMountPath;\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n\n        op.appendArgs(cGroupPrefix, cGroupKV);\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              requestedMountPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, requestedMountPath);\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "a2f680493f040704e2b85108e286731ee3860a52": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "09/05/17 12:05 PM",
      "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "24/04/17 11:37 AM",
      "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 15.02,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,52 @@\n   private void mountCGroupController(CGroupController controller)\n       throws ResourceHandlerException {\n-    String path \u003d getControllerPath(controller);\n+    if (cGroupMountPath \u003d\u003d null) {\n+      throw new ResourceHandlerException(\n+          String.format(\"Cgroups mount path not specified in %s.\",\n+              YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));\n+    }\n+    String existingMountPath \u003d getControllerPath(controller);\n+    String requestedMountPath \u003d\n+        new File(cGroupMountPath, controller.getName()).getAbsolutePath();\n \n-    if (path \u003d\u003d null) {\n+    if (existingMountPath \u003d\u003d null ||\n+        !requestedMountPath.equals(existingMountPath)) {\n       try {\n         //lock out other readers/writers till we are done\n         rwLock.writeLock().lock();\n \n-        String hierarchy \u003d cGroupPrefix;\n-        StringBuffer controllerPath \u003d new StringBuffer()\n-            .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n-        StringBuffer cGroupKV \u003d new StringBuffer()\n-            .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n+        // If the controller was already mounted we have to mount it\n+        // with the same options to clone the mount point otherwise\n+        // the operation will fail\n+        String mountOptions;\n+        if (existingMountPath !\u003d null) {\n+          mountOptions \u003d Joiner.on(\u0027,\u0027)\n+              .join(parsedMtab.get(existingMountPath));\n+        } else {\n+          mountOptions \u003d controller.getName();\n+        }\n+\n+        String cGroupKV \u003d\n+            mountOptions + \"\u003d\" + requestedMountPath;\n         PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n             .OperationType.MOUNT_CGROUPS;\n         PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n \n-        op.appendArgs(hierarchy, cGroupKV.toString());\n+        op.appendArgs(cGroupPrefix, cGroupKV);\n         LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n-              controllerPath);\n+              requestedMountPath);\n         privilegedOperationExecutor.executePrivilegedOperation(op, false);\n \n         //if privileged operation succeeds, update controller paths\n-        controllerPaths.put(controller, controllerPath.toString());\n-\n-        return;\n+        controllerPaths.put(controller, requestedMountPath);\n       } catch (PrivilegedOperationException e) {\n         LOG.error(\"Failed to mount controller: \" + controller.getName());\n         throw new ResourceHandlerException(\"Failed to mount controller: \"\n             + controller.getName());\n       } finally {\n         rwLock.writeLock().unlock();\n       }\n     } else {\n-      LOG.info(\"CGroup controller already mounted at: \" + path);\n-      return;\n+      LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    if (cGroupMountPath \u003d\u003d null) {\n      throw new ResourceHandlerException(\n          String.format(\"Cgroups mount path not specified in %s.\",\n              YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));\n    }\n    String existingMountPath \u003d getControllerPath(controller);\n    String requestedMountPath \u003d\n        new File(cGroupMountPath, controller.getName()).getAbsolutePath();\n\n    if (existingMountPath \u003d\u003d null ||\n        !requestedMountPath.equals(existingMountPath)) {\n      try {\n        //lock out other readers/writers till we are done\n        rwLock.writeLock().lock();\n\n        // If the controller was already mounted we have to mount it\n        // with the same options to clone the mount point otherwise\n        // the operation will fail\n        String mountOptions;\n        if (existingMountPath !\u003d null) {\n          mountOptions \u003d Joiner.on(\u0027,\u0027)\n              .join(parsedMtab.get(existingMountPath));\n        } else {\n          mountOptions \u003d controller.getName();\n        }\n\n        String cGroupKV \u003d\n            mountOptions + \"\u003d\" + requestedMountPath;\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n\n        op.appendArgs(cGroupPrefix, cGroupKV);\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              requestedMountPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, requestedMountPath);\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + existingMountPath);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "11/01/17 4:00 PM",
      "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "11/01/17 4:00 PM",
          "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "07/03/16 7:40 AM",
          "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 310.35,
          "commitsBetweenForRepo": 2164,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,39 @@\n-  public void mountCGroupController(CGroupController controller)\n+  private void mountCGroupController(CGroupController controller)\n       throws ResourceHandlerException {\n-    if (!enableCGroupMount) {\n-      LOG.warn(\"CGroup mounting is disabled - ignoring mount request for: \" +\n-          controller.getName());\n-      return;\n-    }\n-\n     String path \u003d getControllerPath(controller);\n \n     if (path \u003d\u003d null) {\n       try {\n         //lock out other readers/writers till we are done\n         rwLock.writeLock().lock();\n \n         String hierarchy \u003d cGroupPrefix;\n         StringBuffer controllerPath \u003d new StringBuffer()\n             .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n         StringBuffer cGroupKV \u003d new StringBuffer()\n             .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n         PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n             .OperationType.MOUNT_CGROUPS;\n         PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n \n         op.appendArgs(hierarchy, cGroupKV.toString());\n         LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n               controllerPath);\n         privilegedOperationExecutor.executePrivilegedOperation(op, false);\n \n         //if privileged operation succeeds, update controller paths\n         controllerPaths.put(controller, controllerPath.toString());\n \n         return;\n       } catch (PrivilegedOperationException e) {\n         LOG.error(\"Failed to mount controller: \" + controller.getName());\n         throw new ResourceHandlerException(\"Failed to mount controller: \"\n             + controller.getName());\n       } finally {\n         rwLock.writeLock().unlock();\n       }\n     } else {\n       LOG.info(\"CGroup controller already mounted at: \" + path);\n       return;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    String path \u003d getControllerPath(controller);\n\n    if (path \u003d\u003d null) {\n      try {\n        //lock out other readers/writers till we are done\n        rwLock.writeLock().lock();\n\n        String hierarchy \u003d cGroupPrefix;\n        StringBuffer controllerPath \u003d new StringBuffer()\n            .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n        StringBuffer cGroupKV \u003d new StringBuffer()\n            .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n\n        op.appendArgs(hierarchy, cGroupKV.toString());\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              controllerPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, controllerPath.toString());\n\n        return;\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + path);\n      return;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "11/01/17 4:00 PM",
          "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "07/03/16 7:40 AM",
          "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 310.35,
          "commitsBetweenForRepo": 2164,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,39 @@\n-  public void mountCGroupController(CGroupController controller)\n+  private void mountCGroupController(CGroupController controller)\n       throws ResourceHandlerException {\n-    if (!enableCGroupMount) {\n-      LOG.warn(\"CGroup mounting is disabled - ignoring mount request for: \" +\n-          controller.getName());\n-      return;\n-    }\n-\n     String path \u003d getControllerPath(controller);\n \n     if (path \u003d\u003d null) {\n       try {\n         //lock out other readers/writers till we are done\n         rwLock.writeLock().lock();\n \n         String hierarchy \u003d cGroupPrefix;\n         StringBuffer controllerPath \u003d new StringBuffer()\n             .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n         StringBuffer cGroupKV \u003d new StringBuffer()\n             .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n         PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n             .OperationType.MOUNT_CGROUPS;\n         PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n \n         op.appendArgs(hierarchy, cGroupKV.toString());\n         LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n               controllerPath);\n         privilegedOperationExecutor.executePrivilegedOperation(op, false);\n \n         //if privileged operation succeeds, update controller paths\n         controllerPaths.put(controller, controllerPath.toString());\n \n         return;\n       } catch (PrivilegedOperationException e) {\n         LOG.error(\"Failed to mount controller: \" + controller.getName());\n         throw new ResourceHandlerException(\"Failed to mount controller: \"\n             + controller.getName());\n       } finally {\n         rwLock.writeLock().unlock();\n       }\n     } else {\n       LOG.info(\"CGroup controller already mounted at: \" + path);\n       return;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    String path \u003d getControllerPath(controller);\n\n    if (path \u003d\u003d null) {\n      try {\n        //lock out other readers/writers till we are done\n        rwLock.writeLock().lock();\n\n        String hierarchy \u003d cGroupPrefix;\n        StringBuffer controllerPath \u003d new StringBuffer()\n            .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n        StringBuffer cGroupKV \u003d new StringBuffer()\n            .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n\n        op.appendArgs(hierarchy, cGroupKV.toString());\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              controllerPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, controllerPath.toString());\n\n        return;\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + path);\n      return;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "059caf99891943d9587cac19b48e82efbed06b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4744. Too many signal to container failure in case of LCE. Contributed by Sidharta Seethana\n",
      "commitDate": "07/03/16 7:40 AM",
      "commitName": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 49.24,
      "commitsBetweenForRepo": 342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public void mountCGroupController(CGroupController controller)\n       throws ResourceHandlerException {\n     if (!enableCGroupMount) {\n       LOG.warn(\"CGroup mounting is disabled - ignoring mount request for: \" +\n           controller.getName());\n       return;\n     }\n \n     String path \u003d getControllerPath(controller);\n \n     if (path \u003d\u003d null) {\n       try {\n         //lock out other readers/writers till we are done\n         rwLock.writeLock().lock();\n \n         String hierarchy \u003d cGroupPrefix;\n         StringBuffer controllerPath \u003d new StringBuffer()\n             .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n         StringBuffer cGroupKV \u003d new StringBuffer()\n             .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n         PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n             .OperationType.MOUNT_CGROUPS;\n-        PrivilegedOperation op \u003d new PrivilegedOperation(opType, (String) null);\n+        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n \n         op.appendArgs(hierarchy, cGroupKV.toString());\n         LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n               controllerPath);\n         privilegedOperationExecutor.executePrivilegedOperation(op, false);\n \n         //if privileged operation succeeds, update controller paths\n         controllerPaths.put(controller, controllerPath.toString());\n \n         return;\n       } catch (PrivilegedOperationException e) {\n         LOG.error(\"Failed to mount controller: \" + controller.getName());\n         throw new ResourceHandlerException(\"Failed to mount controller: \"\n             + controller.getName());\n       } finally {\n         rwLock.writeLock().unlock();\n       }\n     } else {\n       LOG.info(\"CGroup controller already mounted at: \" + path);\n       return;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    if (!enableCGroupMount) {\n      LOG.warn(\"CGroup mounting is disabled - ignoring mount request for: \" +\n          controller.getName());\n      return;\n    }\n\n    String path \u003d getControllerPath(controller);\n\n    if (path \u003d\u003d null) {\n      try {\n        //lock out other readers/writers till we are done\n        rwLock.writeLock().lock();\n\n        String hierarchy \u003d cGroupPrefix;\n        StringBuffer controllerPath \u003d new StringBuffer()\n            .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n        StringBuffer cGroupKV \u003d new StringBuffer()\n            .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType);\n\n        op.appendArgs(hierarchy, cGroupKV.toString());\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              controllerPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, controllerPath.toString());\n\n        return;\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + path);\n      return;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "838b06ac87339494cea706d4a97e7f5383bdc442": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3443. Create a \u0027ResourceHandler\u0027 subsystem to ease addition of support for new resource types on the NM. Contributed by Sidharta Seethana.\n",
      "commitDate": "13/04/15 6:35 PM",
      "commitName": "838b06ac87339494cea706d4a97e7f5383bdc442",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,45 @@\n+  public void mountCGroupController(CGroupController controller)\n+      throws ResourceHandlerException {\n+    if (!enableCGroupMount) {\n+      LOG.warn(\"CGroup mounting is disabled - ignoring mount request for: \" +\n+          controller.getName());\n+      return;\n+    }\n+\n+    String path \u003d getControllerPath(controller);\n+\n+    if (path \u003d\u003d null) {\n+      try {\n+        //lock out other readers/writers till we are done\n+        rwLock.writeLock().lock();\n+\n+        String hierarchy \u003d cGroupPrefix;\n+        StringBuffer controllerPath \u003d new StringBuffer()\n+            .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n+        StringBuffer cGroupKV \u003d new StringBuffer()\n+            .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n+        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n+            .OperationType.MOUNT_CGROUPS;\n+        PrivilegedOperation op \u003d new PrivilegedOperation(opType, (String) null);\n+\n+        op.appendArgs(hierarchy, cGroupKV.toString());\n+        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n+              controllerPath);\n+        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n+\n+        //if privileged operation succeeds, update controller paths\n+        controllerPaths.put(controller, controllerPath.toString());\n+\n+        return;\n+      } catch (PrivilegedOperationException e) {\n+        LOG.error(\"Failed to mount controller: \" + controller.getName());\n+        throw new ResourceHandlerException(\"Failed to mount controller: \"\n+            + controller.getName());\n+      } finally {\n+        rwLock.writeLock().unlock();\n+      }\n+    } else {\n+      LOG.info(\"CGroup controller already mounted at: \" + path);\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void mountCGroupController(CGroupController controller)\n      throws ResourceHandlerException {\n    if (!enableCGroupMount) {\n      LOG.warn(\"CGroup mounting is disabled - ignoring mount request for: \" +\n          controller.getName());\n      return;\n    }\n\n    String path \u003d getControllerPath(controller);\n\n    if (path \u003d\u003d null) {\n      try {\n        //lock out other readers/writers till we are done\n        rwLock.writeLock().lock();\n\n        String hierarchy \u003d cGroupPrefix;\n        StringBuffer controllerPath \u003d new StringBuffer()\n            .append(cGroupMountPath).append(\u0027/\u0027).append(controller.getName());\n        StringBuffer cGroupKV \u003d new StringBuffer()\n            .append(controller.getName()).append(\u0027\u003d\u0027).append(controllerPath);\n        PrivilegedOperation.OperationType opType \u003d PrivilegedOperation\n            .OperationType.MOUNT_CGROUPS;\n        PrivilegedOperation op \u003d new PrivilegedOperation(opType, (String) null);\n\n        op.appendArgs(hierarchy, cGroupKV.toString());\n        LOG.info(\"Mounting controller \" + controller.getName() + \" at \" +\n              controllerPath);\n        privilegedOperationExecutor.executePrivilegedOperation(op, false);\n\n        //if privileged operation succeeds, update controller paths\n        controllerPaths.put(controller, controllerPath.toString());\n\n        return;\n      } catch (PrivilegedOperationException e) {\n        LOG.error(\"Failed to mount controller: \" + controller.getName());\n        throw new ResourceHandlerException(\"Failed to mount controller: \"\n            + controller.getName());\n      } finally {\n        rwLock.writeLock().unlock();\n      }\n    } else {\n      LOG.info(\"CGroup controller already mounted at: \" + path);\n      return;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java"
    }
  }
}