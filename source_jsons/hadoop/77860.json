{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandWithDestination.java",
  "functionName": "create",
  "functionId": "create___item-PathData__lazyPersist-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
  "functionStartLine": 504,
  "functionEndLine": 532,
  "numCommitsSeen": 92,
  "timeTaken": 5001,
  "changeHistory": [
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
    "9221704f857e33a5f9e00c19d3705e46e94f427b",
    "b3bc94ebfd7cbf959bd33b8d85be80c4a8a46574",
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
    "9a44a832a99eb967aa4e34338dfa75baf35f9845",
    "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
    "dcbc46730131a1bdf8416efeb4571794e5c8e369",
    "4603e4481f0486afcce6b106d4a92a6e90e5b6d9",
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
    "12d0e025919cfb375ecb1739fe99e92421beb56c"
  ],
  "changeHistoryShort": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": "Yparameterchange",
    "9221704f857e33a5f9e00c19d3705e46e94f427b": "Ybodychange",
    "b3bc94ebfd7cbf959bd33b8d85be80c4a8a46574": "Ybodychange",
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": "Ybodychange",
    "9a44a832a99eb967aa4e34338dfa75baf35f9845": "Ybodychange",
    "090d26652c04916a1ede4ca55e7f2ca4fc5f6249": "Ymultichange(Yparameterchange,Ybodychange)",
    "dcbc46730131a1bdf8416efeb4571794e5c8e369": "Ybodychange",
    "4603e4481f0486afcce6b106d4a92a6e90e5b6d9": "Ybodychange",
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15": "Ymultichange(Yparameterchange,Ybodychange)",
    "12d0e025919cfb375ecb1739fe99e92421beb56c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-16885. Encryption zone file copy failure leaks a temp file\n\n\r\nContributed by Xiaoyu Yao.\r\n\r\nContains HDFS-14892. Close the output stream if createWrappedOutputStream() fails\r\n\r\nCopying file through the FsShell command into an HDFS encryption zone where\r\nthe caller lacks permissions is leaks a temp ._COPYING file\r\nand potentially a wrapped stream unclosed.\r\n\r\nThis is a convergence of a fix for S3 meeting an issue in HDFS.\r\n\r\nS3: a HEAD against a file can cache a 404, \r\n -you must not do any existence checks, including deleteOnExit(),\r\n  until the file is written. \r\n\r\nHence: HADOOP-16490, only register files for deletion the create worked\r\nand the upload is not direct. \r\n\r\nHDFS-14892. HDFS doesn\u0027t close wrapped streams when IOEs are raised on\r\ncreate() failures. Which means that an entry is retained on the NN.\r\n-you need to register a file with deleteOnExit() even if the file wasn\u0027t\r\ncreated.\r\n\r\nThis patch:\r\n\r\n* Moves the deleteOnExit to ensure the created file get deleted cleanly.\r\n* Fixes HDFS to close the wrapped stream on failures.\r\n\r\n\r\n",
      "commitDate": "02/03/20 5:22 AM",
      "commitName": "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "11/09/19 8:46 AM",
      "commitNameOld": "9221704f857e33a5f9e00c19d3705e46e94f427b",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 172.9,
      "commitsBetweenForRepo": 759,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n-    FSDataOutputStream create(PathData item, boolean lazyPersist,\n-        boolean direct)\n+    FSDataOutputStream create(PathData item, boolean lazyPersist)\n         throws IOException {\n       if (lazyPersist) {\n         long defaultBlockSize;\n         try {\n           defaultBlockSize \u003d getDefaultBlockSize();\n         } catch (NotInMountpointException ex) {\n           // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n           // needs a target FS to retrive the default block size from.\n           // Hence, for ViewFs, we should call getDefaultBlockSize with the\n           // target path.\n           defaultBlockSize \u003d getDefaultBlockSize(item.path);\n         }\n \n         EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n         return create(item.path,\n                       FsPermission.getFileDefault().applyUMask(\n                           FsPermission.getUMask(getConf())),\n                       createFlags,\n                       getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                           IO_FILE_BUFFER_SIZE_DEFAULT),\n                       (short) 1,\n                       defaultBlockSize,\n                       null,\n                       null);\n       } else {\n         return create(item.path, true);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist)\n        throws IOException {\n      if (lazyPersist) {\n        long defaultBlockSize;\n        try {\n          defaultBlockSize \u003d getDefaultBlockSize();\n        } catch (NotInMountpointException ex) {\n          // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n          // needs a target FS to retrive the default block size from.\n          // Hence, for ViewFs, we should call getDefaultBlockSize with the\n          // target path.\n          defaultBlockSize \u003d getDefaultBlockSize(item.path);\n        }\n\n        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n        return create(item.path,\n                      FsPermission.getFileDefault().applyUMask(\n                          FsPermission.getUMask(getConf())),\n                      createFlags,\n                      getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                          IO_FILE_BUFFER_SIZE_DEFAULT),\n                      (short) 1,\n                      defaultBlockSize,\n                      null,\n                      null);\n      } else {\n        return create(item.path, true);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {
        "oldValue": "[item-PathData, lazyPersist-boolean, direct-boolean]",
        "newValue": "[item-PathData, lazyPersist-boolean]"
      }
    },
    "9221704f857e33a5f9e00c19d3705e46e94f427b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
      "commitDate": "11/09/19 8:46 AM",
      "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "29/01/19 4:45 PM",
      "commitNameOld": "b3bc94ebfd7cbf959bd33b8d85be80c4a8a46574",
      "commitAuthorOld": "Hanisha Koneru",
      "daysBetweenCommits": 224.63,
      "commitsBetweenForRepo": 1743,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,30 @@\n     FSDataOutputStream create(PathData item, boolean lazyPersist,\n         boolean direct)\n         throws IOException {\n-      try {\n-        if (lazyPersist) {\n-          long defaultBlockSize;\n-          try {\n-            defaultBlockSize \u003d getDefaultBlockSize();\n-          } catch (NotInMountpointException ex) {\n-            // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n-            // needs a target FS to retrive the default block size from.\n-            // Hence, for ViewFs, we should call getDefaultBlockSize with the\n-            // target path.\n-            defaultBlockSize \u003d getDefaultBlockSize(item.path);\n-          }\n+      if (lazyPersist) {\n+        long defaultBlockSize;\n+        try {\n+          defaultBlockSize \u003d getDefaultBlockSize();\n+        } catch (NotInMountpointException ex) {\n+          // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n+          // needs a target FS to retrive the default block size from.\n+          // Hence, for ViewFs, we should call getDefaultBlockSize with the\n+          // target path.\n+          defaultBlockSize \u003d getDefaultBlockSize(item.path);\n+        }\n \n-          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n-          return create(item.path,\n-                        FsPermission.getFileDefault().applyUMask(\n-                            FsPermission.getUMask(getConf())),\n-                        createFlags,\n-                        getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n-                            IO_FILE_BUFFER_SIZE_DEFAULT),\n-                        (short) 1,\n-                        defaultBlockSize,\n-                        null,\n-                        null);\n-        } else {\n-          return create(item.path, true);\n-        }\n-      } finally { // might have been created but stream was interrupted\n-        if (!direct) {\n-          deleteOnExit(item.path);\n-        }\n+        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n+        return create(item.path,\n+                      FsPermission.getFileDefault().applyUMask(\n+                          FsPermission.getUMask(getConf())),\n+                      createFlags,\n+                      getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n+                          IO_FILE_BUFFER_SIZE_DEFAULT),\n+                      (short) 1,\n+                      defaultBlockSize,\n+                      null,\n+                      null);\n+      } else {\n+        return create(item.path, true);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist,\n        boolean direct)\n        throws IOException {\n      if (lazyPersist) {\n        long defaultBlockSize;\n        try {\n          defaultBlockSize \u003d getDefaultBlockSize();\n        } catch (NotInMountpointException ex) {\n          // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n          // needs a target FS to retrive the default block size from.\n          // Hence, for ViewFs, we should call getDefaultBlockSize with the\n          // target path.\n          defaultBlockSize \u003d getDefaultBlockSize(item.path);\n        }\n\n        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n        return create(item.path,\n                      FsPermission.getFileDefault().applyUMask(\n                          FsPermission.getUMask(getConf())),\n                      createFlags,\n                      getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                          IO_FILE_BUFFER_SIZE_DEFAULT),\n                      (short) 1,\n                      defaultBlockSize,\n                      null,\n                      null);\n      } else {\n        return create(item.path, true);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "b3bc94ebfd7cbf959bd33b8d85be80c4a8a46574": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14236. Lazy persist copy/ put fails with ViewFs.\n",
      "commitDate": "29/01/19 4:45 PM",
      "commitName": "b3bc94ebfd7cbf959bd33b8d85be80c4a8a46574",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "17/08/17 9:35 AM",
      "commitNameOld": "dd7916d3cd5d880d0b257d229f43f10feff04c93",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 530.34,
      "commitsBetweenForRepo": 4590,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,36 @@\n     FSDataOutputStream create(PathData item, boolean lazyPersist,\n         boolean direct)\n         throws IOException {\n       try {\n         if (lazyPersist) {\n+          long defaultBlockSize;\n+          try {\n+            defaultBlockSize \u003d getDefaultBlockSize();\n+          } catch (NotInMountpointException ex) {\n+            // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n+            // needs a target FS to retrive the default block size from.\n+            // Hence, for ViewFs, we should call getDefaultBlockSize with the\n+            // target path.\n+            defaultBlockSize \u003d getDefaultBlockSize(item.path);\n+          }\n+\n           EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n           return create(item.path,\n                         FsPermission.getFileDefault().applyUMask(\n                             FsPermission.getUMask(getConf())),\n                         createFlags,\n                         getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                             IO_FILE_BUFFER_SIZE_DEFAULT),\n                         (short) 1,\n-                        getDefaultBlockSize(),\n+                        defaultBlockSize,\n                         null,\n                         null);\n         } else {\n           return create(item.path, true);\n         }\n       } finally { // might have been created but stream was interrupted\n         if (!direct) {\n           deleteOnExit(item.path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist,\n        boolean direct)\n        throws IOException {\n      try {\n        if (lazyPersist) {\n          long defaultBlockSize;\n          try {\n            defaultBlockSize \u003d getDefaultBlockSize();\n          } catch (NotInMountpointException ex) {\n            // ViewFileSystem#getDefaultBlockSize() throws an exception as it\n            // needs a target FS to retrive the default block size from.\n            // Hence, for ViewFs, we should call getDefaultBlockSize with the\n            // target path.\n            defaultBlockSize \u003d getDefaultBlockSize(item.path);\n          }\n\n          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n          return create(item.path,\n                        FsPermission.getFileDefault().applyUMask(\n                            FsPermission.getUMask(getConf())),\n                        createFlags,\n                        getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                            IO_FILE_BUFFER_SIZE_DEFAULT),\n                        (short) 1,\n                        defaultBlockSize,\n                        null,\n                        null);\n        } else {\n          return create(item.path, true);\n        }\n      } finally { // might have been created but stream was interrupted\n        if (!direct) {\n          deleteOnExit(item.path);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12940. Fix warnings from Spotbugs in hadoop-common.\n",
      "commitDate": "22/06/17 6:28 PM",
      "commitName": "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "30/05/17 10:07 AM",
      "commitNameOld": "62857be2110aaded84a93fc9891742a1271b2b85",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 23.35,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     FSDataOutputStream create(PathData item, boolean lazyPersist,\n         boolean direct)\n         throws IOException {\n       try {\n         if (lazyPersist) {\n           EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n           return create(item.path,\n                         FsPermission.getFileDefault().applyUMask(\n                             FsPermission.getUMask(getConf())),\n                         createFlags,\n                         getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                             IO_FILE_BUFFER_SIZE_DEFAULT),\n-                        lazyPersist ? 1 : getDefaultReplication(item.path),\n+                        (short) 1,\n                         getDefaultBlockSize(),\n                         null,\n                         null);\n         } else {\n           return create(item.path, true);\n         }\n       } finally { // might have been created but stream was interrupted\n         if (!direct) {\n           deleteOnExit(item.path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist,\n        boolean direct)\n        throws IOException {\n      try {\n        if (lazyPersist) {\n          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n          return create(item.path,\n                        FsPermission.getFileDefault().applyUMask(\n                            FsPermission.getUMask(getConf())),\n                        createFlags,\n                        getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                            IO_FILE_BUFFER_SIZE_DEFAULT),\n                        (short) 1,\n                        getDefaultBlockSize(),\n                        null,\n                        null);\n        } else {\n          return create(item.path, true);\n        }\n      } finally { // might have been created but stream was interrupted\n        if (!direct) {\n          deleteOnExit(item.path);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "9a44a832a99eb967aa4e34338dfa75baf35f9845": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13658. Replace config key literal strings with names I: hadoop common. Contributed by Chen Liang\n",
      "commitDate": "27/09/16 5:36 PM",
      "commitName": "9a44a832a99eb967aa4e34338dfa75baf35f9845",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "28/03/16 2:13 PM",
      "commitNameOld": "8bfaa80037365c0790083313a905d1e7d88b0682",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 183.14,
      "commitsBetweenForRepo": 1308,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     FSDataOutputStream create(PathData item, boolean lazyPersist,\n         boolean direct)\n         throws IOException {\n       try {\n         if (lazyPersist) {\n           EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n           return create(item.path,\n                         FsPermission.getFileDefault().applyUMask(\n                             FsPermission.getUMask(getConf())),\n                         createFlags,\n-                        getConf().getInt(\"io.file.buffer.size\", 4096),\n+                        getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n+                            IO_FILE_BUFFER_SIZE_DEFAULT),\n                         lazyPersist ? 1 : getDefaultReplication(item.path),\n                         getDefaultBlockSize(),\n                         null,\n                         null);\n         } else {\n           return create(item.path, true);\n         }\n       } finally { // might have been created but stream was interrupted\n         if (!direct) {\n           deleteOnExit(item.path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist,\n        boolean direct)\n        throws IOException {\n      try {\n        if (lazyPersist) {\n          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n          return create(item.path,\n                        FsPermission.getFileDefault().applyUMask(\n                            FsPermission.getUMask(getConf())),\n                        createFlags,\n                        getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,\n                            IO_FILE_BUFFER_SIZE_DEFAULT),\n                        lazyPersist ? 1 : getDefaultReplication(item.path),\n                        getDefaultBlockSize(),\n                        null,\n                        null);\n        } else {\n          return create(item.path, true);\n        }\n      } finally { // might have been created but stream was interrupted\n        if (!direct) {\n          deleteOnExit(item.path);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "090d26652c04916a1ede4ca55e7f2ca4fc5f6249": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12384. Add \u0027-direct\u0027 flag option for fs copy so that user can choose not to create \u0027._COPYING_\u0027 file (Contributed by J.Andreina)\n",
      "commitDate": "08/09/15 6:41 AM",
      "commitName": "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
      "commitAuthor": "Vinayakumar B",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12384. Add \u0027-direct\u0027 flag option for fs copy so that user can choose not to create \u0027._COPYING_\u0027 file (Contributed by J.Andreina)\n",
          "commitDate": "08/09/15 6:41 AM",
          "commitName": "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "16/09/14 6:19 PM",
          "commitNameOld": "dcbc46730131a1bdf8416efeb4571794e5c8e369",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 356.51,
          "commitsBetweenForRepo": 2841,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,24 @@\n-    FSDataOutputStream create(PathData item, boolean lazyPersist)\n+    FSDataOutputStream create(PathData item, boolean lazyPersist,\n+        boolean direct)\n         throws IOException {\n       try {\n         if (lazyPersist) {\n           EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n           return create(item.path,\n                         FsPermission.getFileDefault().applyUMask(\n                             FsPermission.getUMask(getConf())),\n                         createFlags,\n                         getConf().getInt(\"io.file.buffer.size\", 4096),\n                         lazyPersist ? 1 : getDefaultReplication(item.path),\n                         getDefaultBlockSize(),\n                         null,\n                         null);\n         } else {\n           return create(item.path, true);\n         }\n       } finally { // might have been created but stream was interrupted\n-        deleteOnExit(item.path);\n+        if (!direct) {\n+          deleteOnExit(item.path);\n+        }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist,\n        boolean direct)\n        throws IOException {\n      try {\n        if (lazyPersist) {\n          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n          return create(item.path,\n                        FsPermission.getFileDefault().applyUMask(\n                            FsPermission.getUMask(getConf())),\n                        createFlags,\n                        getConf().getInt(\"io.file.buffer.size\", 4096),\n                        lazyPersist ? 1 : getDefaultReplication(item.path),\n                        getDefaultBlockSize(),\n                        null,\n                        null);\n        } else {\n          return create(item.path, true);\n        }\n      } finally { // might have been created but stream was interrupted\n        if (!direct) {\n          deleteOnExit(item.path);\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {
            "oldValue": "[item-PathData, lazyPersist-boolean]",
            "newValue": "[item-PathData, lazyPersist-boolean, direct-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12384. Add \u0027-direct\u0027 flag option for fs copy so that user can choose not to create \u0027._COPYING_\u0027 file (Contributed by J.Andreina)\n",
          "commitDate": "08/09/15 6:41 AM",
          "commitName": "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "16/09/14 6:19 PM",
          "commitNameOld": "dcbc46730131a1bdf8416efeb4571794e5c8e369",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 356.51,
          "commitsBetweenForRepo": 2841,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,24 @@\n-    FSDataOutputStream create(PathData item, boolean lazyPersist)\n+    FSDataOutputStream create(PathData item, boolean lazyPersist,\n+        boolean direct)\n         throws IOException {\n       try {\n         if (lazyPersist) {\n           EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n           return create(item.path,\n                         FsPermission.getFileDefault().applyUMask(\n                             FsPermission.getUMask(getConf())),\n                         createFlags,\n                         getConf().getInt(\"io.file.buffer.size\", 4096),\n                         lazyPersist ? 1 : getDefaultReplication(item.path),\n                         getDefaultBlockSize(),\n                         null,\n                         null);\n         } else {\n           return create(item.path, true);\n         }\n       } finally { // might have been created but stream was interrupted\n-        deleteOnExit(item.path);\n+        if (!direct) {\n+          deleteOnExit(item.path);\n+        }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist,\n        boolean direct)\n        throws IOException {\n      try {\n        if (lazyPersist) {\n          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n          return create(item.path,\n                        FsPermission.getFileDefault().applyUMask(\n                            FsPermission.getUMask(getConf())),\n                        createFlags,\n                        getConf().getInt(\"io.file.buffer.size\", 4096),\n                        lazyPersist ? 1 : getDefaultReplication(item.path),\n                        getDefaultBlockSize(),\n                        null,\n                        null);\n        } else {\n          return create(item.path, true);\n        }\n      } finally { // might have been created but stream was interrupted\n        if (!direct) {\n          deleteOnExit(item.path);\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {}
        }
      ]
    },
    "dcbc46730131a1bdf8416efeb4571794e5c8e369": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7079. Few more unit test fixes for HDFS-6581. (Arpit Agarwal)\n",
      "commitDate": "16/09/14 6:19 PM",
      "commitName": "dcbc46730131a1bdf8416efeb4571794e5c8e369",
      "commitAuthor": "arp",
      "commitDateOld": "16/09/14 3:45 PM",
      "commitNameOld": "4603e4481f0486afcce6b106d4a92a6e90e5b6d9",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     FSDataOutputStream create(PathData item, boolean lazyPersist)\n         throws IOException {\n       try {\n-        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n         if (lazyPersist) {\n-          createFlags.add(LAZY_PERSIST);\n+          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n+          return create(item.path,\n+                        FsPermission.getFileDefault().applyUMask(\n+                            FsPermission.getUMask(getConf())),\n+                        createFlags,\n+                        getConf().getInt(\"io.file.buffer.size\", 4096),\n+                        lazyPersist ? 1 : getDefaultReplication(item.path),\n+                        getDefaultBlockSize(),\n+                        null,\n+                        null);\n+        } else {\n+          return create(item.path, true);\n         }\n-        return create(item.path,\n-                      FsPermission.getFileDefault().applyUMask(\n-                          FsPermission.getUMask(getConf())),\n-                      createFlags,\n-                      getConf().getInt(\"io.file.buffer.size\", 4096),\n-                      lazyPersist ? 1 : getDefaultReplication(item.path),\n-                      getDefaultBlockSize(),\n-                      null,\n-                      null);\n       } finally { // might have been created but stream was interrupted\n         deleteOnExit(item.path);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist)\n        throws IOException {\n      try {\n        if (lazyPersist) {\n          EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE, LAZY_PERSIST);\n          return create(item.path,\n                        FsPermission.getFileDefault().applyUMask(\n                            FsPermission.getUMask(getConf())),\n                        createFlags,\n                        getConf().getInt(\"io.file.buffer.size\", 4096),\n                        lazyPersist ? 1 : getDefaultReplication(item.path),\n                        getDefaultBlockSize(),\n                        null,\n                        null);\n        } else {\n          return create(item.path, true);\n        }\n      } finally { // might have been created but stream was interrupted\n        deleteOnExit(item.path);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "4603e4481f0486afcce6b106d4a92a6e90e5b6d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7064. Fix unit test failures in HDFS-6581 branch. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "16/09/14 3:45 PM",
      "commitName": "4603e4481f0486afcce6b106d4a92a6e90e5b6d9",
      "commitAuthor": "arp",
      "commitDateOld": "28/08/14 3:53 PM",
      "commitNameOld": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 18.99,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     FSDataOutputStream create(PathData item, boolean lazyPersist)\n         throws IOException {\n       try {\n         EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n         if (lazyPersist) {\n           createFlags.add(LAZY_PERSIST);\n         }\n         return create(item.path,\n-                      null,\n+                      FsPermission.getFileDefault().applyUMask(\n+                          FsPermission.getUMask(getConf())),\n                       createFlags,\n                       getConf().getInt(\"io.file.buffer.size\", 4096),\n                       lazyPersist ? 1 : getDefaultReplication(item.path),\n                       getDefaultBlockSize(),\n                       null,\n                       null);\n       } finally { // might have been created but stream was interrupted\n         deleteOnExit(item.path);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist)\n        throws IOException {\n      try {\n        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n        if (lazyPersist) {\n          createFlags.add(LAZY_PERSIST);\n        }\n        return create(item.path,\n                      FsPermission.getFileDefault().applyUMask(\n                          FsPermission.getUMask(getConf())),\n                      createFlags,\n                      getConf().getInt(\"io.file.buffer.size\", 4096),\n                      lazyPersist ? 1 : getDefaultReplication(item.path),\n                      getDefaultBlockSize(),\n                      null,\n                      null);\n      } finally { // might have been created but stream was interrupted\n        deleteOnExit(item.path);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
      "commitDate": "28/08/14 3:53 PM",
      "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
      "commitAuthor": "arp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
          "commitDate": "28/08/14 3:53 PM",
          "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
          "commitAuthor": "arp",
          "commitDateOld": "19/08/14 1:43 PM",
          "commitNameOld": "a4ee77b65f31351b4eae76ba5df0681a0d2b856f",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 9.09,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,19 @@\n-    FSDataOutputStream create(PathData item) throws IOException {\n+    FSDataOutputStream create(PathData item, boolean lazyPersist)\n+        throws IOException {\n       try {\n-        return create(item.path, true);\n+        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n+        if (lazyPersist) {\n+          createFlags.add(LAZY_PERSIST);\n+        }\n+        return create(item.path,\n+                      null,\n+                      createFlags,\n+                      getConf().getInt(\"io.file.buffer.size\", 4096),\n+                      lazyPersist ? 1 : getDefaultReplication(item.path),\n+                      getDefaultBlockSize(),\n+                      null,\n+                      null);\n       } finally { // might have been created but stream was interrupted\n         deleteOnExit(item.path);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist)\n        throws IOException {\n      try {\n        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n        if (lazyPersist) {\n          createFlags.add(LAZY_PERSIST);\n        }\n        return create(item.path,\n                      null,\n                      createFlags,\n                      getConf().getInt(\"io.file.buffer.size\", 4096),\n                      lazyPersist ? 1 : getDefaultReplication(item.path),\n                      getDefaultBlockSize(),\n                      null,\n                      null);\n      } finally { // might have been created but stream was interrupted\n        deleteOnExit(item.path);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {
            "oldValue": "[item-PathData]",
            "newValue": "[item-PathData, lazyPersist-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
          "commitDate": "28/08/14 3:53 PM",
          "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
          "commitAuthor": "arp",
          "commitDateOld": "19/08/14 1:43 PM",
          "commitNameOld": "a4ee77b65f31351b4eae76ba5df0681a0d2b856f",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 9.09,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,19 @@\n-    FSDataOutputStream create(PathData item) throws IOException {\n+    FSDataOutputStream create(PathData item, boolean lazyPersist)\n+        throws IOException {\n       try {\n-        return create(item.path, true);\n+        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n+        if (lazyPersist) {\n+          createFlags.add(LAZY_PERSIST);\n+        }\n+        return create(item.path,\n+                      null,\n+                      createFlags,\n+                      getConf().getInt(\"io.file.buffer.size\", 4096),\n+                      lazyPersist ? 1 : getDefaultReplication(item.path),\n+                      getDefaultBlockSize(),\n+                      null,\n+                      null);\n       } finally { // might have been created but stream was interrupted\n         deleteOnExit(item.path);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    FSDataOutputStream create(PathData item, boolean lazyPersist)\n        throws IOException {\n      try {\n        EnumSet\u003cCreateFlag\u003e createFlags \u003d EnumSet.of(CREATE);\n        if (lazyPersist) {\n          createFlags.add(LAZY_PERSIST);\n        }\n        return create(item.path,\n                      null,\n                      createFlags,\n                      getConf().getInt(\"io.file.buffer.size\", 4096),\n                      lazyPersist ? 1 : getDefaultReplication(item.path),\n                      getDefaultBlockSize(),\n                      null,\n                      null);\n      } finally { // might have been created but stream was interrupted\n        deleteOnExit(item.path);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {}
        }
      ]
    },
    "12d0e025919cfb375ecb1739fe99e92421beb56c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8633. Interrupted FsShell copies may leave tmp files (Daryn Sharp via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1368002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/12 7:02 AM",
      "commitName": "12d0e025919cfb375ecb1739fe99e92421beb56c",
      "commitAuthor": "Thomas Graves",
      "diff": "@@ -0,0 +1,7 @@\n+    FSDataOutputStream create(PathData item) throws IOException {\n+      try {\n+        return create(item.path, true);\n+      } finally { // might have been created but stream was interrupted\n+        deleteOnExit(item.path);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    FSDataOutputStream create(PathData item) throws IOException {\n      try {\n        return create(item.path, true);\n      } finally { // might have been created but stream was interrupted\n        deleteOnExit(item.path);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java"
    }
  }
}