{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RemoteSASKeyGeneratorImpl.java",
  "functionName": "getContainerSASUri",
  "functionId": "getContainerSASUri___storageAccount-String__container-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
  "functionStartLine": 170,
  "functionEndLine": 205,
  "numCommitsSeen": 9,
  "timeTaken": 2406,
  "changeHistory": [
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329",
    "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
    "8e15e240597f821968e14893eabfea39815de207",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "e92a77099b91620cee84513cc879089907468075"
  ],
  "changeHistoryShort": {
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8": "Ybodychange",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": "Ybodychange",
    "8b5f2c372e70999f3ee0a0bd685a494e06bc3652": "Ybodychange",
    "8e15e240597f821968e14893eabfea39815de207": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "e92a77099b91620cee84513cc879089907468075": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
      "commitDate": "19/07/17 12:13 AM",
      "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "17/07/17 2:27 AM",
      "commitNameOld": "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 1.91,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,36 @@\n   public URI getContainerSASUri(String storageAccount,\n       String container) throws SASKeyGenerationException {\n     RemoteSASKeyGenerationResponse sasKeyResponse \u003d null;\n     try {\n+      CachedSASKeyEntry cacheKey \u003d new CachedSASKeyEntry(storageAccount, container, \"/\");\n+      URI cacheResult \u003d cache.get(cacheKey);\n+      if (cacheResult !\u003d null) {\n+        return cacheResult;\n+      }\n+\n+      LOG.debug(\"Generating Container SAS Key: Storage Account {}, Container {}\", storageAccount, container);\n       URIBuilder uriBuilder \u003d new URIBuilder();\n       uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n       uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME, storageAccount);\n       uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME, container);\n       uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME,\n           \"\" + getSasKeyExpiryPeriod());\n \n       sasKeyResponse \u003d makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n               uriBuilder.getQueryParams());\n \n       if (sasKeyResponse.getResponseCode() \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n-        return new URI(sasKeyResponse.getSasKey());\n+        URI sasKey \u003d new URI(sasKeyResponse.getSasKey());\n+        cache.put(cacheKey, sasKey);\n+        return sasKey;\n       } else {\n         throw new SASKeyGenerationException(\n             \"Remote Service encountered error in SAS Key generation : \"\n                 + sasKeyResponse.getResponseMessage());\n       }\n     } catch (URISyntaxException uriSyntaxEx) {\n       throw new SASKeyGenerationException(\"Encountered URISyntaxException\"\n           + \" while building the HttpGetRequest to remote service for \",\n           uriSyntaxEx);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount,\n      String container) throws SASKeyGenerationException {\n    RemoteSASKeyGenerationResponse sasKeyResponse \u003d null;\n    try {\n      CachedSASKeyEntry cacheKey \u003d new CachedSASKeyEntry(storageAccount, container, \"/\");\n      URI cacheResult \u003d cache.get(cacheKey);\n      if (cacheResult !\u003d null) {\n        return cacheResult;\n      }\n\n      LOG.debug(\"Generating Container SAS Key: Storage Account {}, Container {}\", storageAccount, container);\n      URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME, storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME, container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME,\n          \"\" + getSasKeyExpiryPeriod());\n\n      sasKeyResponse \u003d makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams());\n\n      if (sasKeyResponse.getResponseCode() \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        URI sasKey \u003d new URI(sasKeyResponse.getSasKey());\n        cache.put(cacheKey, sasKey);\n        return sasKey;\n      } else {\n        throw new SASKeyGenerationException(\n            \"Remote Service encountered error in SAS Key generation : \"\n                + sasKeyResponse.getResponseMessage());\n      }\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException\"\n          + \" while building the HttpGetRequest to remote service for \",\n          uriSyntaxEx);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
      "extendedDetails": {}
    },
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14443. Azure: Support retry and client side failover for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak\n",
      "commitDate": "30/06/17 4:53 PM",
      "commitName": "38996fdcf0987d1da00ce46f8284d8fcdce57329",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/06/17 9:22 AM",
      "commitNameOld": "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,27 @@\n-  public URI getContainerSASUri(String storageAccount, String container)\n-      throws SASKeyGenerationException {\n+  public URI getContainerSASUri(String storageAccount,\n+      String container) throws SASKeyGenerationException {\n+    RemoteSASKeyGenerationResponse sasKeyResponse \u003d null;\n     try {\n-      LOG.debug(\"Generating Container SAS Key for Container {} \"\n-          + \"inside Storage Account {} \", container, storageAccount);\n-      setDelegationToken();\n-      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n+      URIBuilder uriBuilder \u003d new URIBuilder();\n       uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n-      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n-          storageAccount);\n-      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n-          container);\n-      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n-          + getSasKeyExpiryPeriod());\n-      if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n-        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-            this.delegationToken);\n-      }\n+      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME, storageAccount);\n+      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME, container);\n+      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME,\n+          \"\" + getSasKeyExpiryPeriod());\n \n-      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n-      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n-      if (connectUgi \u003d\u003d null) {\n-        connectUgi \u003d ugi;\n+      sasKeyResponse \u003d makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n+              uriBuilder.getQueryParams());\n+\n+      if (sasKeyResponse.getResponseCode() \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+        return new URI(sasKeyResponse.getSasKey());\n       } else {\n-        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n+        throw new SASKeyGenerationException(\n+            \"Remote Service encountered error in SAS Key generation : \"\n+                + sasKeyResponse.getResponseMessage());\n       }\n-      return getSASKey(uriBuilder.build(), connectUgi);\n     } catch (URISyntaxException uriSyntaxEx) {\n-      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n-          + \"while building the HttpGetRequest to remote cred service\",\n+      throw new SASKeyGenerationException(\"Encountered URISyntaxException\"\n+          + \" while building the HttpGetRequest to remote service for \",\n           uriSyntaxEx);\n-    } catch (IOException e) {\n-      throw new SASKeyGenerationException(\"Encountered IOException\"\n-          + \" while building the HttpGetRequest to remote service\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount,\n      String container) throws SASKeyGenerationException {\n    RemoteSASKeyGenerationResponse sasKeyResponse \u003d null;\n    try {\n      URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME, storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME, container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME,\n          \"\" + getSasKeyExpiryPeriod());\n\n      sasKeyResponse \u003d makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams());\n\n      if (sasKeyResponse.getResponseCode() \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return new URI(sasKeyResponse.getSasKey());\n      } else {\n        throw new SASKeyGenerationException(\n            \"Remote Service encountered error in SAS Key generation : \"\n                + sasKeyResponse.getResponseMessage());\n      }\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException\"\n          + \" while building the HttpGetRequest to remote service for \",\n          uriSyntaxEx);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
      "extendedDetails": {}
    },
    "8b5f2c372e70999f3ee0a0bd685a494e06bc3652": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14351. Azure: RemoteWasbAuthorizerImpl and RemoteSASKeyGeneratorImpl should not use Kerberos interactive user cache. Contributed by Santhosh G Nayak\n",
      "commitDate": "26/04/17 1:47 PM",
      "commitName": "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "20/03/17 4:31 PM",
      "commitNameOld": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 36.89,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,36 @@\n   public URI getContainerSASUri(String storageAccount, String container)\n       throws SASKeyGenerationException {\n     try {\n       LOG.debug(\"Generating Container SAS Key for Container {} \"\n           + \"inside Storage Account {} \", container, storageAccount);\n+      setDelegationToken();\n       URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n       uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n       uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n           storageAccount);\n       uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n           container);\n       uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n           + getSasKeyExpiryPeriod());\n       if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n         uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n             this.delegationToken);\n       }\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n       UserGroupInformation connectUgi \u003d ugi.getRealUser();\n       if (connectUgi \u003d\u003d null) {\n         connectUgi \u003d ugi;\n       } else {\n         uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n       }\n-\n-      if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n-        connectUgi \u003d UserGroupInformation.getLoginUser();\n-      }\n       return getSASKey(uriBuilder.build(), connectUgi);\n     } catch (URISyntaxException uriSyntaxEx) {\n       throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n           + \"while building the HttpGetRequest to remote cred service\",\n           uriSyntaxEx);\n     } catch (IOException e) {\n       throw new SASKeyGenerationException(\"Encountered IOException\"\n           + \" while building the HttpGetRequest to remote service\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount, String container)\n      throws SASKeyGenerationException {\n    try {\n      LOG.debug(\"Generating Container SAS Key for Container {} \"\n          + \"inside Storage Account {} \", container, storageAccount);\n      setDelegationToken();\n      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n          storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n          container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n          + getSasKeyExpiryPeriod());\n      if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n            this.delegationToken);\n      }\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n      if (connectUgi \u003d\u003d null) {\n        connectUgi \u003d ugi;\n      } else {\n        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n      }\n      return getSASKey(uriBuilder.build(), connectUgi);\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n          + \"while building the HttpGetRequest to remote cred service\",\n          uriSyntaxEx);\n    } catch (IOException e) {\n      throw new SASKeyGenerationException(\"Encountered IOException\"\n          + \" while building the HttpGetRequest to remote service\", e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
      "extendedDetails": {}
    },
    "8e15e240597f821968e14893eabfea39815de207": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak\n\nChange-Id: I39fb0a3b0491bf2160571366939a0502a0045429\n",
      "commitDate": "20/03/17 4:31 PM",
      "commitName": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 13.93,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   public URI getContainerSASUri(String storageAccount, String container)\n       throws SASKeyGenerationException {\n-\n     try {\n-\n       LOG.debug(\"Generating Container SAS Key for Container {} \"\n           + \"inside Storage Account {} \", container, storageAccount);\n       URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n       uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n       uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n           storageAccount);\n       uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n           container);\n       uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n           + getSasKeyExpiryPeriod());\n-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-          this.delegationToken);\n-\n-      RemoteSASKeyGenerationResponse sasKeyResponse \u003d\n-          makeRemoteRequest(uriBuilder.build());\n-\n-      if (sasKeyResponse \u003d\u003d null) {\n-        throw new SASKeyGenerationException(\"RemoteSASKeyGenerationResponse\"\n-            + \" object null from remote call\");\n-      } else if (sasKeyResponse.getResponseCode()\n-          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n-        return new URI(sasKeyResponse.getSasKey());\n-      } else {\n-        throw new SASKeyGenerationException(\"Remote Service encountered error\"\n-            + \" in SAS Key generation : \"\n-            + sasKeyResponse.getResponseMessage());\n+      if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n+        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+            this.delegationToken);\n       }\n+\n+      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n+      if (connectUgi \u003d\u003d null) {\n+        connectUgi \u003d ugi;\n+      } else {\n+        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n+      }\n+\n+      if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n+        connectUgi \u003d UserGroupInformation.getLoginUser();\n+      }\n+      return getSASKey(uriBuilder.build(), connectUgi);\n     } catch (URISyntaxException uriSyntaxEx) {\n       throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n           + \"while building the HttpGetRequest to remote cred service\",\n           uriSyntaxEx);\n+    } catch (IOException e) {\n+      throw new SASKeyGenerationException(\"Encountered IOException\"\n+          + \" while building the HttpGetRequest to remote service\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount, String container)\n      throws SASKeyGenerationException {\n    try {\n      LOG.debug(\"Generating Container SAS Key for Container {} \"\n          + \"inside Storage Account {} \", container, storageAccount);\n      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n          storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n          container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n          + getSasKeyExpiryPeriod());\n      if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n            this.delegationToken);\n      }\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n      if (connectUgi \u003d\u003d null) {\n        connectUgi \u003d ugi;\n      } else {\n        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n      }\n\n      if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n        connectUgi \u003d UserGroupInformation.getLoginUser();\n      }\n      return getSASKey(uriBuilder.build(), connectUgi);\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n          + \"while building the HttpGetRequest to remote cred service\",\n          uriSyntaxEx);\n    } catch (IOException e) {\n      throw new SASKeyGenerationException(\"Encountered IOException\"\n          + \" while building the HttpGetRequest to remote service\", e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "03/03/17 5:09 PM",
      "commitNameOld": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n   public URI getContainerSASUri(String storageAccount, String container)\n       throws SASKeyGenerationException {\n+\n     try {\n+\n       LOG.debug(\"Generating Container SAS Key for Container {} \"\n           + \"inside Storage Account {} \", container, storageAccount);\n       URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n       uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n       uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n           storageAccount);\n       uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n           container);\n       uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n           + getSasKeyExpiryPeriod());\n-      if (isSecurityEnabled \u0026\u0026 (delegationToken !\u003d null \u0026\u0026 !delegationToken\n-          .isEmpty())) {\n-        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-            this.delegationToken);\n-      }\n+      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+          this.delegationToken);\n \n-      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n-      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n-      if (connectUgi \u003d\u003d null) {\n-        connectUgi \u003d ugi;\n+      RemoteSASKeyGenerationResponse sasKeyResponse \u003d\n+          makeRemoteRequest(uriBuilder.build());\n+\n+      if (sasKeyResponse \u003d\u003d null) {\n+        throw new SASKeyGenerationException(\"RemoteSASKeyGenerationResponse\"\n+            + \" object null from remote call\");\n+      } else if (sasKeyResponse.getResponseCode()\n+          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+        return new URI(sasKeyResponse.getSasKey());\n       } else {\n-        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n+        throw new SASKeyGenerationException(\"Remote Service encountered error\"\n+            + \" in SAS Key generation : \"\n+            + sasKeyResponse.getResponseMessage());\n       }\n-\n-      if(isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()){\n-        connectUgi \u003d UserGroupInformation.getLoginUser();\n-      }\n-      return getSASKey(uriBuilder.build(), connectUgi);\n     } catch (URISyntaxException uriSyntaxEx) {\n       throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n           + \"while building the HttpGetRequest to remote cred service\",\n           uriSyntaxEx);\n-    } catch (IOException e) {\n-      throw new SASKeyGenerationException(\"Encountered IOException\"\n-          + \" while building the HttpGetRequest to remote service\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount, String container)\n      throws SASKeyGenerationException {\n\n    try {\n\n      LOG.debug(\"Generating Container SAS Key for Container {} \"\n          + \"inside Storage Account {} \", container, storageAccount);\n      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n          storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n          container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n          + getSasKeyExpiryPeriod());\n      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n          this.delegationToken);\n\n      RemoteSASKeyGenerationResponse sasKeyResponse \u003d\n          makeRemoteRequest(uriBuilder.build());\n\n      if (sasKeyResponse \u003d\u003d null) {\n        throw new SASKeyGenerationException(\"RemoteSASKeyGenerationResponse\"\n            + \" object null from remote call\");\n      } else if (sasKeyResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return new URI(sasKeyResponse.getSasKey());\n      } else {\n        throw new SASKeyGenerationException(\"Remote Service encountered error\"\n            + \" in SAS Key generation : \"\n            + sasKeyResponse.getResponseMessage());\n      }\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n          + \"while building the HttpGetRequest to remote cred service\",\n          uriSyntaxEx);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "22/12/16 8:15 PM",
      "commitNameOld": "e92a77099b91620cee84513cc879089907468075",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 70.87,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public URI getContainerSASUri(String storageAccount, String container)\n       throws SASKeyGenerationException {\n-\n     try {\n-\n       LOG.debug(\"Generating Container SAS Key for Container {} \"\n           + \"inside Storage Account {} \", container, storageAccount);\n       URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n       uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n       uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n           storageAccount);\n       uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n           container);\n       uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n           + getSasKeyExpiryPeriod());\n-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-          this.delegationToken);\n-\n-      RemoteSASKeyGenerationResponse sasKeyResponse \u003d\n-          makeRemoteRequest(uriBuilder.build());\n-\n-      if (sasKeyResponse \u003d\u003d null) {\n-        throw new SASKeyGenerationException(\"RemoteSASKeyGenerationResponse\"\n-            + \" object null from remote call\");\n-      } else if (sasKeyResponse.getResponseCode()\n-          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n-        return new URI(sasKeyResponse.getSasKey());\n-      } else {\n-        throw new SASKeyGenerationException(\"Remote Service encountered error\"\n-            + \" in SAS Key generation : \"\n-            + sasKeyResponse.getResponseMessage());\n+      if (isSecurityEnabled \u0026\u0026 (delegationToken !\u003d null \u0026\u0026 !delegationToken\n+          .isEmpty())) {\n+        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+            this.delegationToken);\n       }\n+\n+      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n+      if (connectUgi \u003d\u003d null) {\n+        connectUgi \u003d ugi;\n+      } else {\n+        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n+      }\n+\n+      if(isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()){\n+        connectUgi \u003d UserGroupInformation.getLoginUser();\n+      }\n+      return getSASKey(uriBuilder.build(), connectUgi);\n     } catch (URISyntaxException uriSyntaxEx) {\n       throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n           + \"while building the HttpGetRequest to remote cred service\",\n           uriSyntaxEx);\n+    } catch (IOException e) {\n+      throw new SASKeyGenerationException(\"Encountered IOException\"\n+          + \" while building the HttpGetRequest to remote service\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount, String container)\n      throws SASKeyGenerationException {\n    try {\n      LOG.debug(\"Generating Container SAS Key for Container {} \"\n          + \"inside Storage Account {} \", container, storageAccount);\n      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n          storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n          container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n          + getSasKeyExpiryPeriod());\n      if (isSecurityEnabled \u0026\u0026 (delegationToken !\u003d null \u0026\u0026 !delegationToken\n          .isEmpty())) {\n        uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n            this.delegationToken);\n      }\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      UserGroupInformation connectUgi \u003d ugi.getRealUser();\n      if (connectUgi \u003d\u003d null) {\n        connectUgi \u003d ugi;\n      } else {\n        uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n      }\n\n      if(isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()){\n        connectUgi \u003d UserGroupInformation.getLoginUser();\n      }\n      return getSASKey(uriBuilder.build(), connectUgi);\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n          + \"while building the HttpGetRequest to remote cred service\",\n          uriSyntaxEx);\n    } catch (IOException e) {\n      throw new SASKeyGenerationException(\"Encountered IOException\"\n          + \" while building the HttpGetRequest to remote service\", e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java",
      "extendedDetails": {}
    },
    "e92a77099b91620cee84513cc879089907468075": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13863. Azure: Add a new SAS key mode for WASB. Contributed by Dushyanth\n",
      "commitDate": "22/12/16 8:15 PM",
      "commitName": "e92a77099b91620cee84513cc879089907468075",
      "commitAuthor": "Mingliang Liu",
      "diff": "@@ -0,0 +1,38 @@\n+  public URI getContainerSASUri(String storageAccount, String container)\n+      throws SASKeyGenerationException {\n+\n+    try {\n+\n+      LOG.debug(\"Generating Container SAS Key for Container {} \"\n+          + \"inside Storage Account {} \", container, storageAccount);\n+      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n+      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n+      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n+          storageAccount);\n+      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n+          container);\n+      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n+          + getSasKeyExpiryPeriod());\n+      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+          this.delegationToken);\n+\n+      RemoteSASKeyGenerationResponse sasKeyResponse \u003d\n+          makeRemoteRequest(uriBuilder.build());\n+\n+      if (sasKeyResponse \u003d\u003d null) {\n+        throw new SASKeyGenerationException(\"RemoteSASKeyGenerationResponse\"\n+            + \" object null from remote call\");\n+      } else if (sasKeyResponse.getResponseCode()\n+          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+        return new URI(sasKeyResponse.getSasKey());\n+      } else {\n+        throw new SASKeyGenerationException(\"Remote Service encountered error\"\n+            + \" in SAS Key generation : \"\n+            + sasKeyResponse.getResponseMessage());\n+      }\n+    } catch (URISyntaxException uriSyntaxEx) {\n+      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n+          + \"while building the HttpGetRequest to remote cred service\",\n+          uriSyntaxEx);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public URI getContainerSASUri(String storageAccount, String container)\n      throws SASKeyGenerationException {\n\n    try {\n\n      LOG.debug(\"Generating Container SAS Key for Container {} \"\n          + \"inside Storage Account {} \", container, storageAccount);\n      URIBuilder uriBuilder \u003d new URIBuilder(credServiceUrl);\n      uriBuilder.setPath(\"/\" + CONTAINER_SAS_OP);\n      uriBuilder.addParameter(STORAGE_ACCOUNT_QUERY_PARAM_NAME,\n          storageAccount);\n      uriBuilder.addParameter(CONTAINER_QUERY_PARAM_NAME,\n          container);\n      uriBuilder.addParameter(SAS_EXPIRY_QUERY_PARAM_NAME, \"\"\n          + getSasKeyExpiryPeriod());\n      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n          this.delegationToken);\n\n      RemoteSASKeyGenerationResponse sasKeyResponse \u003d\n          makeRemoteRequest(uriBuilder.build());\n\n      if (sasKeyResponse \u003d\u003d null) {\n        throw new SASKeyGenerationException(\"RemoteSASKeyGenerationResponse\"\n            + \" object null from remote call\");\n      } else if (sasKeyResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return new URI(sasKeyResponse.getSasKey());\n      } else {\n        throw new SASKeyGenerationException(\"Remote Service encountered error\"\n            + \" in SAS Key generation : \"\n            + sasKeyResponse.getResponseMessage());\n      }\n    } catch (URISyntaxException uriSyntaxEx) {\n      throw new SASKeyGenerationException(\"Encountered URISyntaxException \"\n          + \"while building the HttpGetRequest to remote cred service\",\n          uriSyntaxEx);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteSASKeyGeneratorImpl.java"
    }
  }
}