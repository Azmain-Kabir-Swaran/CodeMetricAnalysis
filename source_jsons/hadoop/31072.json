{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptorREST.java",
  "functionName": "getRandomActiveSubCluster",
  "functionId": "getRandomActiveSubCluster___activeSubclusters-Map__SubClusterId,SubClusterInfo____blackListSubClusters-List__SubClusterId__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java",
  "functionStartLine": 165,
  "functionEndLine": 187,
  "numCommitsSeen": 20,
  "timeTaken": 951,
  "changeHistory": [
    "cc59b5fb26ccf58dffcd8850fa12ec65250f127d"
  ],
  "changeHistoryShort": {
    "cc59b5fb26ccf58dffcd8850fa12ec65250f127d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc59b5fb26ccf58dffcd8850fa12ec65250f127d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6896. Federation: routing REST invocations transparently to multiple RMs (part 1 - basic execution). (Contributed by Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "11/08/17 3:58 PM",
      "commitName": "cc59b5fb26ccf58dffcd8850fa12ec65250f127d",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,23 @@\n+  private SubClusterId getRandomActiveSubCluster(\n+      Map\u003cSubClusterId, SubClusterInfo\u003e activeSubclusters,\n+      List\u003cSubClusterId\u003e blackListSubClusters) throws YarnException {\n+\n+    if (activeSubclusters \u003d\u003d null || activeSubclusters.size() \u003c 1) {\n+      RouterServerUtil.logAndThrowException(\n+          FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE, null);\n+    }\n+    List\u003cSubClusterId\u003e list \u003d new ArrayList\u003c\u003e(activeSubclusters.keySet());\n+\n+    FederationPolicyUtils.validateSubClusterAvailability(list,\n+        blackListSubClusters);\n+\n+    if (blackListSubClusters !\u003d null) {\n+\n+      // Remove from the active SubClusters from StateStore the blacklisted ones\n+      for (SubClusterId scId : blackListSubClusters) {\n+        list.remove(scId);\n+      }\n+    }\n+\n+    return list.get(rand.nextInt(list.size()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private SubClusterId getRandomActiveSubCluster(\n      Map\u003cSubClusterId, SubClusterInfo\u003e activeSubclusters,\n      List\u003cSubClusterId\u003e blackListSubClusters) throws YarnException {\n\n    if (activeSubclusters \u003d\u003d null || activeSubclusters.size() \u003c 1) {\n      RouterServerUtil.logAndThrowException(\n          FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE, null);\n    }\n    List\u003cSubClusterId\u003e list \u003d new ArrayList\u003c\u003e(activeSubclusters.keySet());\n\n    FederationPolicyUtils.validateSubClusterAvailability(list,\n        blackListSubClusters);\n\n    if (blackListSubClusters !\u003d null) {\n\n      // Remove from the active SubClusters from StateStore the blacklisted ones\n      for (SubClusterId scId : blackListSubClusters) {\n        list.remove(scId);\n      }\n    }\n\n    return list.get(rand.nextInt(list.size()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/FederationInterceptorREST.java"
    }
  }
}