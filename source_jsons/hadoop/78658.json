{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NflyFSystem.java",
  "functionName": "createFileSystem",
  "functionId": "createFileSystem___uris-URI[]__conf-Configuration__settings-String__fsGetter-FsGetter",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java",
  "functionStartLine": 944,
  "functionEndLine": 971,
  "numCommitsSeen": 5,
  "timeTaken": 2938,
  "changeHistory": [
    "4734c77b4b64b7c6432da4cc32881aba85f94ea1",
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0"
  ],
  "changeHistoryShort": {
    "4734c77b4b64b7c6432da4cc32881aba85f94ea1": "Ymultichange(Yparameterchange,Ybodychange)",
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4734c77b4b64b7c6432da4cc32881aba85f94ea1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-15322. Make NflyFS to work when ViewFsOverloadScheme\u0027s scheme and target uris schemes are same. Contributed by Uma Maheswara Rao G.\n\n",
      "commitDate": "21/05/20 9:34 PM",
      "commitName": "4734c77b4b64b7c6432da4cc32881aba85f94ea1",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-15322. Make NflyFS to work when ViewFsOverloadScheme\u0027s scheme and target uris schemes are same. Contributed by Uma Maheswara Rao G.\n\n",
          "commitDate": "21/05/20 9:34 PM",
          "commitName": "4734c77b4b64b7c6432da4cc32881aba85f94ea1",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "18/11/19 6:31 PM",
          "commitNameOld": "4050471b45da569d7dc4f724b613ee2879c0ec2a",
          "commitAuthorOld": "Abhishek Modi",
          "daysBetweenCommits": 185.09,
          "commitsBetweenForRepo": 639,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   static FileSystem createFileSystem(URI[] uris, Configuration conf,\n-      String settings) throws IOException {\n+      String settings, FsGetter fsGetter) throws IOException {\n     // assert settings !\u003d null\n     int minRepl \u003d DEFAULT_MIN_REPLICATION;\n     EnumSet\u003cNflyKey\u003e nflyFlags \u003d EnumSet.noneOf(NflyKey.class);\n     final String[] kvPairs \u003d StringUtils.split(settings);\n     for (String kv : kvPairs) {\n       final String[] kvPair \u003d StringUtils.split(kv, \u0027\u003d\u0027);\n       if (kvPair.length !\u003d 2) {\n         throw new IllegalArgumentException(kv);\n       }\n       NflyKey nflyKey \u003d NflyKey.valueOf(kvPair[0]);\n       switch (nflyKey) {\n       case minReplication:\n         minRepl \u003d Integer.parseInt(kvPair[1]);\n         break;\n       case repairOnRead:\n       case readMostRecent:\n         if (Boolean.valueOf(kvPair[1])) {\n           nflyFlags.add(nflyKey);\n         }\n         break;\n       default:\n         throw new IllegalArgumentException(nflyKey + \": Infeasible\");\n       }\n     }\n-    return new NflyFSystem(uris, conf, minRepl, nflyFlags);\n+    return new NflyFSystem(uris, conf, minRepl, nflyFlags, fsGetter);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileSystem createFileSystem(URI[] uris, Configuration conf,\n      String settings, FsGetter fsGetter) throws IOException {\n    // assert settings !\u003d null\n    int minRepl \u003d DEFAULT_MIN_REPLICATION;\n    EnumSet\u003cNflyKey\u003e nflyFlags \u003d EnumSet.noneOf(NflyKey.class);\n    final String[] kvPairs \u003d StringUtils.split(settings);\n    for (String kv : kvPairs) {\n      final String[] kvPair \u003d StringUtils.split(kv, \u0027\u003d\u0027);\n      if (kvPair.length !\u003d 2) {\n        throw new IllegalArgumentException(kv);\n      }\n      NflyKey nflyKey \u003d NflyKey.valueOf(kvPair[0]);\n      switch (nflyKey) {\n      case minReplication:\n        minRepl \u003d Integer.parseInt(kvPair[1]);\n        break;\n      case repairOnRead:\n      case readMostRecent:\n        if (Boolean.valueOf(kvPair[1])) {\n          nflyFlags.add(nflyKey);\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(nflyKey + \": Infeasible\");\n      }\n    }\n    return new NflyFSystem(uris, conf, minRepl, nflyFlags, fsGetter);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java",
          "extendedDetails": {
            "oldValue": "[uris-URI[], conf-Configuration, settings-String]",
            "newValue": "[uris-URI[], conf-Configuration, settings-String, fsGetter-FsGetter]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-15322. Make NflyFS to work when ViewFsOverloadScheme\u0027s scheme and target uris schemes are same. Contributed by Uma Maheswara Rao G.\n\n",
          "commitDate": "21/05/20 9:34 PM",
          "commitName": "4734c77b4b64b7c6432da4cc32881aba85f94ea1",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "18/11/19 6:31 PM",
          "commitNameOld": "4050471b45da569d7dc4f724b613ee2879c0ec2a",
          "commitAuthorOld": "Abhishek Modi",
          "daysBetweenCommits": 185.09,
          "commitsBetweenForRepo": 639,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   static FileSystem createFileSystem(URI[] uris, Configuration conf,\n-      String settings) throws IOException {\n+      String settings, FsGetter fsGetter) throws IOException {\n     // assert settings !\u003d null\n     int minRepl \u003d DEFAULT_MIN_REPLICATION;\n     EnumSet\u003cNflyKey\u003e nflyFlags \u003d EnumSet.noneOf(NflyKey.class);\n     final String[] kvPairs \u003d StringUtils.split(settings);\n     for (String kv : kvPairs) {\n       final String[] kvPair \u003d StringUtils.split(kv, \u0027\u003d\u0027);\n       if (kvPair.length !\u003d 2) {\n         throw new IllegalArgumentException(kv);\n       }\n       NflyKey nflyKey \u003d NflyKey.valueOf(kvPair[0]);\n       switch (nflyKey) {\n       case minReplication:\n         minRepl \u003d Integer.parseInt(kvPair[1]);\n         break;\n       case repairOnRead:\n       case readMostRecent:\n         if (Boolean.valueOf(kvPair[1])) {\n           nflyFlags.add(nflyKey);\n         }\n         break;\n       default:\n         throw new IllegalArgumentException(nflyKey + \": Infeasible\");\n       }\n     }\n-    return new NflyFSystem(uris, conf, minRepl, nflyFlags);\n+    return new NflyFSystem(uris, conf, minRepl, nflyFlags, fsGetter);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileSystem createFileSystem(URI[] uris, Configuration conf,\n      String settings, FsGetter fsGetter) throws IOException {\n    // assert settings !\u003d null\n    int minRepl \u003d DEFAULT_MIN_REPLICATION;\n    EnumSet\u003cNflyKey\u003e nflyFlags \u003d EnumSet.noneOf(NflyKey.class);\n    final String[] kvPairs \u003d StringUtils.split(settings);\n    for (String kv : kvPairs) {\n      final String[] kvPair \u003d StringUtils.split(kv, \u0027\u003d\u0027);\n      if (kvPair.length !\u003d 2) {\n        throw new IllegalArgumentException(kv);\n      }\n      NflyKey nflyKey \u003d NflyKey.valueOf(kvPair[0]);\n      switch (nflyKey) {\n      case minReplication:\n        minRepl \u003d Integer.parseInt(kvPair[1]);\n        break;\n      case repairOnRead:\n      case readMostRecent:\n        if (Boolean.valueOf(kvPair[1])) {\n          nflyFlags.add(nflyKey);\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(nflyKey + \": Infeasible\");\n      }\n    }\n    return new NflyFSystem(uris, conf, minRepl, nflyFlags, fsGetter);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12077. Provide a multi-URI replication Inode for ViewFs. Contributed by Gera Shegalov\n",
      "commitDate": "05/09/17 11:51 PM",
      "commitName": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,28 @@\n+  static FileSystem createFileSystem(URI[] uris, Configuration conf,\n+      String settings) throws IOException {\n+    // assert settings !\u003d null\n+    int minRepl \u003d DEFAULT_MIN_REPLICATION;\n+    EnumSet\u003cNflyKey\u003e nflyFlags \u003d EnumSet.noneOf(NflyKey.class);\n+    final String[] kvPairs \u003d StringUtils.split(settings);\n+    for (String kv : kvPairs) {\n+      final String[] kvPair \u003d StringUtils.split(kv, \u0027\u003d\u0027);\n+      if (kvPair.length !\u003d 2) {\n+        throw new IllegalArgumentException(kv);\n+      }\n+      NflyKey nflyKey \u003d NflyKey.valueOf(kvPair[0]);\n+      switch (nflyKey) {\n+      case minReplication:\n+        minRepl \u003d Integer.parseInt(kvPair[1]);\n+        break;\n+      case repairOnRead:\n+      case readMostRecent:\n+        if (Boolean.valueOf(kvPair[1])) {\n+          nflyFlags.add(nflyKey);\n+        }\n+        break;\n+      default:\n+        throw new IllegalArgumentException(nflyKey + \": Infeasible\");\n+      }\n+    }\n+    return new NflyFSystem(uris, conf, minRepl, nflyFlags);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static FileSystem createFileSystem(URI[] uris, Configuration conf,\n      String settings) throws IOException {\n    // assert settings !\u003d null\n    int minRepl \u003d DEFAULT_MIN_REPLICATION;\n    EnumSet\u003cNflyKey\u003e nflyFlags \u003d EnumSet.noneOf(NflyKey.class);\n    final String[] kvPairs \u003d StringUtils.split(settings);\n    for (String kv : kvPairs) {\n      final String[] kvPair \u003d StringUtils.split(kv, \u0027\u003d\u0027);\n      if (kvPair.length !\u003d 2) {\n        throw new IllegalArgumentException(kv);\n      }\n      NflyKey nflyKey \u003d NflyKey.valueOf(kvPair[0]);\n      switch (nflyKey) {\n      case minReplication:\n        minRepl \u003d Integer.parseInt(kvPair[1]);\n        break;\n      case repairOnRead:\n      case readMostRecent:\n        if (Boolean.valueOf(kvPair[1])) {\n          nflyFlags.add(nflyKey);\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(nflyKey + \": Infeasible\");\n      }\n    }\n    return new NflyFSystem(uris, conf, minRepl, nflyFlags);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java"
    }
  }
}