{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairCallQueue.java",
  "functionName": "removeNextElement",
  "functionId": "removeNextElement",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
  "functionStartLine": 151,
  "functionEndLine": 164,
  "numCommitsSeen": 14,
  "timeTaken": 1046,
  "changeHistory": [
    "1123f8f0b62292197f5433cd40e66d8620044608",
    "0c01cf57987bcc7a17154a3538960b67f625a9e5"
  ],
  "changeHistoryShort": {
    "1123f8f0b62292197f5433cd40e66d8620044608": "Ybodychange",
    "0c01cf57987bcc7a17154a3538960b67f625a9e5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1123f8f0b62292197f5433cd40e66d8620044608": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14912. FairCallQueue may defer servicing calls. Contributed by Daryn Sharp\n",
      "commitDate": "10/10/17 12:47 PM",
      "commitName": "1123f8f0b62292197f5433cd40e66d8620044608",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 84.64,
      "commitsBetweenForRepo": 747,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   private E removeNextElement() {\n     int priority \u003d multiplexer.getAndAdvanceCurrentIndex();\n     E e \u003d queues.get(priority).poll();\n-    if (e \u003d\u003d null) {\n+    // a semaphore permit has been acquired, so an element MUST be extracted\n+    // or the semaphore and queued elements will go out of sync.  loop to\n+    // avoid race condition if elements are added behind the current position,\n+    // awakening other threads that poll the elements ahead of our position.\n+    while (e \u003d\u003d null) {\n       for (int idx \u003d 0; e \u003d\u003d null \u0026\u0026 idx \u003c queues.size(); idx++) {\n         e \u003d queues.get(idx).poll();\n       }\n     }\n-    // guaranteed to find an element if caller acquired permit.\n-    assert e !\u003d null : \"consumer didn\u0027t acquire semaphore!\";\n     return e;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private E removeNextElement() {\n    int priority \u003d multiplexer.getAndAdvanceCurrentIndex();\n    E e \u003d queues.get(priority).poll();\n    // a semaphore permit has been acquired, so an element MUST be extracted\n    // or the semaphore and queued elements will go out of sync.  loop to\n    // avoid race condition if elements are added behind the current position,\n    // awakening other threads that poll the elements ahead of our position.\n    while (e \u003d\u003d null) {\n      for (int idx \u003d 0; e \u003d\u003d null \u0026\u0026 idx \u003c queues.size(); idx++) {\n        e \u003d queues.get(idx).poll();\n      }\n    }\n    return e;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
      "extendedDetails": {}
    },
    "0c01cf57987bcc7a17154a3538960b67f625a9e5": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14033. Reduce fair call queue lock contention. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 2:17 PM",
      "commitName": "0c01cf57987bcc7a17154a3538960b67f625a9e5",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,12 @@\n+  private E removeNextElement() {\n+    int priority \u003d multiplexer.getAndAdvanceCurrentIndex();\n+    E e \u003d queues.get(priority).poll();\n+    if (e \u003d\u003d null) {\n+      for (int idx \u003d 0; e \u003d\u003d null \u0026\u0026 idx \u003c queues.size(); idx++) {\n+        e \u003d queues.get(idx).poll();\n+      }\n+    }\n+    // guaranteed to find an element if caller acquired permit.\n+    assert e !\u003d null : \"consumer didn\u0027t acquire semaphore!\";\n+    return e;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private E removeNextElement() {\n    int priority \u003d multiplexer.getAndAdvanceCurrentIndex();\n    E e \u003d queues.get(priority).poll();\n    if (e \u003d\u003d null) {\n      for (int idx \u003d 0; e \u003d\u003d null \u0026\u0026 idx \u003c queues.size(); idx++) {\n        e \u003d queues.get(idx).poll();\n      }\n    }\n    // guaranteed to find an element if caller acquired permit.\n    assert e !\u003d null : \"consumer didn\u0027t acquire semaphore!\";\n    return e;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java"
    }
  }
}