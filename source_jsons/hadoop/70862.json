{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureFileSystemThreadPoolExecutor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureFileSystemThreadPoolExecutor.java",
  "functionStartLine": 304,
  "functionEndLine": 344,
  "numCommitsSeen": 1,
  "timeTaken": 748,
  "changeHistory": [
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85"
  ],
  "changeHistoryShort": {
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13403. AzureNativeFileSystem rename/delete performance improvements. Contributed by Subramanyam Pattipaka.\n",
      "commitDate": "08/08/16 12:28 PM",
      "commitName": "2ed58c40e5dcbf5c5303c00e85096085b1055f85",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,41 @@\n+    public void run() {\n+      long start \u003d Time.monotonicNow();\n+      int currentIndex;\n+      int processedFilesCount \u003d 0;\n+\n+      while ((currentIndex \u003d fileIndex.getAndIncrement()) \u003c files.length) {\n+        processedFilesCount++;\n+        FileMetadata file \u003d files[currentIndex];\n+\n+        try {\n+          // Execute the file operation.\n+          if (!task.execute(file)) {\n+            LOG.error(\"{} operation failed for file {}\",\n+                this.operation, file.getKey());\n+            operationStatus \u003d false;\n+          } else {\n+            filesProcessed.getAndIncrement();\n+          }\n+        } catch (Exception e) {\n+          LOG.error(\"Encountered Exception for {} operation for file {}\",\n+              this.operation, file.getKey());\n+          lastException \u003d new IOException(\"Encountered Exception for \"\n+              + this.operation + \" operation for file \" + file.getKey(), e);\n+        }\n+\n+        // If any thread has seen exception or operation failed then we\n+        // don\u0027t have to process further.\n+        if (lastException !\u003d null || !operationStatus) {\n+          LOG.warn(\"Terminating execution of {} operation now as some other thread\"\n+              + \" already got exception or operation failed\", this.operation, file.getKey());\n+          break;\n+        }\n+      }\n+\n+      long end \u003d Time.monotonicNow();\n+      LOG.debug(\"Time taken to process {} files count for {} operation: {} ms\",\n+          processedFilesCount, this.operation, (end - start));\n+      if (processedFilesCount \u003e 0) {\n+        threadsUsed.getAndIncrement();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      long start \u003d Time.monotonicNow();\n      int currentIndex;\n      int processedFilesCount \u003d 0;\n\n      while ((currentIndex \u003d fileIndex.getAndIncrement()) \u003c files.length) {\n        processedFilesCount++;\n        FileMetadata file \u003d files[currentIndex];\n\n        try {\n          // Execute the file operation.\n          if (!task.execute(file)) {\n            LOG.error(\"{} operation failed for file {}\",\n                this.operation, file.getKey());\n            operationStatus \u003d false;\n          } else {\n            filesProcessed.getAndIncrement();\n          }\n        } catch (Exception e) {\n          LOG.error(\"Encountered Exception for {} operation for file {}\",\n              this.operation, file.getKey());\n          lastException \u003d new IOException(\"Encountered Exception for \"\n              + this.operation + \" operation for file \" + file.getKey(), e);\n        }\n\n        // If any thread has seen exception or operation failed then we\n        // don\u0027t have to process further.\n        if (lastException !\u003d null || !operationStatus) {\n          LOG.warn(\"Terminating execution of {} operation now as some other thread\"\n              + \" already got exception or operation failed\", this.operation, file.getKey());\n          break;\n        }\n      }\n\n      long end \u003d Time.monotonicNow();\n      LOG.debug(\"Time taken to process {} files count for {} operation: {} ms\",\n          processedFilesCount, this.operation, (end - start));\n      if (processedFilesCount \u003e 0) {\n        threadsUsed.getAndIncrement();\n      }\n    }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureFileSystemThreadPoolExecutor.java"
    }
  }
}