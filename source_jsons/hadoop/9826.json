{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JspHelper.java",
  "functionName": "getUGI",
  "functionId": "getUGI___context-ServletContext__request-HttpServletRequest__conf-Configuration__secureAuthMethod-AuthenticationMethod(modifiers-final)__tryUgiParameter-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
  "functionStartLine": 108,
  "functionEndLine": 152,
  "numCommitsSeen": 67,
  "timeTaken": 7173,
  "changeHistory": [
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
    "d78854b928bb877f26b11b5b212a100a79941f35",
    "dd7d032457f93bf600a1322a34873b1142303da2",
    "ef68759382e4f1cf26316fb9b98c31fca40eef3b",
    "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea",
    "b3b72482e4476fe6ead484e85b55c766bcf998d0",
    "d61c5bcb0bb69cf5a55565c4e1a70b16d174d74c",
    "6981b14003d3ff99fd719515ac08d748fc5f44bd",
    "32d4c148dfd203789386a0587480bd974fbf4c1a",
    "8ced7381a46320c5b230e73239a4938880acd529",
    "9eb8f4d267ca38c16e3ba191a3b754de7d167669",
    "09a156fcce2bc1be4081717bf7ef7d290e80d818",
    "a590b498acf1a424ffbb3a9d8849c0abb409366d",
    "bd21ddcb78350b311f271e233038b8ca78a65242",
    "825f9c80a4f2788040cc17455bea96ffaa08cb5a",
    "78e3821b819b441d1faf4bc66c659cdeddc6006c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49": "Ybodychange",
    "d78854b928bb877f26b11b5b212a100a79941f35": "Ybodychange",
    "dd7d032457f93bf600a1322a34873b1142303da2": "Ybodychange",
    "ef68759382e4f1cf26316fb9b98c31fca40eef3b": "Ybodychange",
    "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea": "Ybodychange",
    "b3b72482e4476fe6ead484e85b55c766bcf998d0": "Ybodychange",
    "d61c5bcb0bb69cf5a55565c4e1a70b16d174d74c": "Ybodychange",
    "6981b14003d3ff99fd719515ac08d748fc5f44bd": "Ybodychange",
    "32d4c148dfd203789386a0587480bd974fbf4c1a": "Ybodychange",
    "8ced7381a46320c5b230e73239a4938880acd529": "Ybodychange",
    "9eb8f4d267ca38c16e3ba191a3b754de7d167669": "Ybodychange",
    "09a156fcce2bc1be4081717bf7ef7d290e80d818": "Ybodychange",
    "a590b498acf1a424ffbb3a9d8849c0abb409366d": "Ybodychange",
    "bd21ddcb78350b311f271e233038b8ca78a65242": "Ybodychange",
    "825f9c80a4f2788040cc17455bea96ffaa08cb5a": "Ybodychange",
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16354.  Enable AuthFilter as default for WebHDFS.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "11/06/19 3:41 PM",
      "commitName": "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/05/19 2:31 PM",
      "commitNameOld": "d78854b928bb877f26b11b5b212a100a79941f35",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.05,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     UserGroupInformation ugi \u003d null;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n     final String remoteUser;\n    \n     if (UserGroupInformation.isSecurityEnabled()) {\n       remoteUser \u003d request.getRemoteUser();\n       final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n \n         // user.name, doas param is ignored in the token-based auth\n         ugi \u003d getTokenUGI(context, request, tokenString, conf);\n       } else if (remoteUser \u003d\u003d null) {\n         throw new IOException(\n             \"Security enabled but user not authenticated by filter\");\n       }\n     } else {\n       // Security\u0027s not on, pull from url or use default web user\n       remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n           ? getDefaultWebUserName(conf) // not specified in request\n           : usernameFromQuery;\n     }\n \n     if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n       ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n-      if (doAsUserFromQuery !\u003d null) {\n+      if (doAsUserFromQuery !\u003d null \u0026\u0026 !doAsUserFromQuery.equals(remoteUser)) {\n         // create and attempt to authorize a proxy user\n         ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n         ProxyUsers.authorize(ugi, getRemoteAddr(request));\n       }\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n    final String remoteUser;\n   \n    if (UserGroupInformation.isSecurityEnabled()) {\n      remoteUser \u003d request.getRemoteUser();\n      final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n\n        // user.name, doas param is ignored in the token-based auth\n        ugi \u003d getTokenUGI(context, request, tokenString, conf);\n      } else if (remoteUser \u003d\u003d null) {\n        throw new IOException(\n            \"Security enabled but user not authenticated by filter\");\n      }\n    } else {\n      // Security\u0027s not on, pull from url or use default web user\n      remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n          ? getDefaultWebUserName(conf) // not specified in request\n          : usernameFromQuery;\n    }\n\n    if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n      ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n      if (doAsUserFromQuery !\u003d null \u0026\u0026 !doAsUserFromQuery.equals(remoteUser)) {\n        // create and attempt to authorize a proxy user\n        ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n        ProxyUsers.authorize(ugi, getRemoteAddr(request));\n      }\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "d78854b928bb877f26b11b5b212a100a79941f35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14434.  Ignore user.name query parameter in secure WebHDFS.\n             Contributed by KWON BYUNGCHANG\n",
      "commitDate": "28/05/19 2:31 PM",
      "commitName": "d78854b928bb877f26b11b5b212a100a79941f35",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "14/12/18 11:10 AM",
      "commitNameOld": "00d5e631b596f8712600879366e5283829e7ee5d",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 165.1,
      "commitsBetweenForRepo": 1126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,45 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     UserGroupInformation ugi \u003d null;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n     final String remoteUser;\n    \n     if (UserGroupInformation.isSecurityEnabled()) {\n       remoteUser \u003d request.getRemoteUser();\n       final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n-        // Token-based connections need only verify the effective user, and\n-        // disallow proxying to different user.  Proxy authorization checks\n-        // are not required since the checks apply to issuing a token.\n+\n+        // user.name, doas param is ignored in the token-based auth\n         ugi \u003d getTokenUGI(context, request, tokenString, conf);\n-        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n-        checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n       } else if (remoteUser \u003d\u003d null) {\n         throw new IOException(\n             \"Security enabled but user not authenticated by filter\");\n       }\n     } else {\n       // Security\u0027s not on, pull from url or use default web user\n       remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n           ? getDefaultWebUserName(conf) // not specified in request\n           : usernameFromQuery;\n     }\n \n     if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n       ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n-      checkUsername(ugi.getShortUserName(), usernameFromQuery);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n       if (doAsUserFromQuery !\u003d null) {\n         // create and attempt to authorize a proxy user\n         ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n         ProxyUsers.authorize(ugi, getRemoteAddr(request));\n       }\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n    final String remoteUser;\n   \n    if (UserGroupInformation.isSecurityEnabled()) {\n      remoteUser \u003d request.getRemoteUser();\n      final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n\n        // user.name, doas param is ignored in the token-based auth\n        ugi \u003d getTokenUGI(context, request, tokenString, conf);\n      } else if (remoteUser \u003d\u003d null) {\n        throw new IOException(\n            \"Security enabled but user not authenticated by filter\");\n      }\n    } else {\n      // Security\u0027s not on, pull from url or use default web user\n      remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n          ? getDefaultWebUserName(conf) // not specified in request\n          : usernameFromQuery;\n    }\n\n    if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n      ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n      if (doAsUserFromQuery !\u003d null) {\n        // create and attempt to authorize a proxy user\n        ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n        ProxyUsers.authorize(ugi, getRemoteAddr(request));\n      }\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "dd7d032457f93bf600a1322a34873b1142303da2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10499. Remove unused parameter from ProxyUsers.authorize(). Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1588098 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/04/14 4:09 PM",
      "commitName": "dd7d032457f93bf600a1322a34873b1142303da2",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "16/04/14 9:22 AM",
      "commitNameOld": "ef68759382e4f1cf26316fb9b98c31fca40eef3b",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     UserGroupInformation ugi \u003d null;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n     final String remoteUser;\n    \n     if (UserGroupInformation.isSecurityEnabled()) {\n       remoteUser \u003d request.getRemoteUser();\n       final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         // Token-based connections need only verify the effective user, and\n         // disallow proxying to different user.  Proxy authorization checks\n         // are not required since the checks apply to issuing a token.\n         ugi \u003d getTokenUGI(context, request, tokenString, conf);\n         checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n       } else if (remoteUser \u003d\u003d null) {\n         throw new IOException(\n             \"Security enabled but user not authenticated by filter\");\n       }\n     } else {\n       // Security\u0027s not on, pull from url or use default web user\n       remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n           ? getDefaultWebUserName(conf) // not specified in request\n           : usernameFromQuery;\n     }\n \n     if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n       ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       checkUsername(ugi.getShortUserName(), usernameFromQuery);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n       if (doAsUserFromQuery !\u003d null) {\n         // create and attempt to authorize a proxy user\n         ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n-        ProxyUsers.authorize(ugi, getRemoteAddr(request), conf);\n+        ProxyUsers.authorize(ugi, getRemoteAddr(request));\n       }\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n    final String remoteUser;\n   \n    if (UserGroupInformation.isSecurityEnabled()) {\n      remoteUser \u003d request.getRemoteUser();\n      final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        // Token-based connections need only verify the effective user, and\n        // disallow proxying to different user.  Proxy authorization checks\n        // are not required since the checks apply to issuing a token.\n        ugi \u003d getTokenUGI(context, request, tokenString, conf);\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n      } else if (remoteUser \u003d\u003d null) {\n        throw new IOException(\n            \"Security enabled but user not authenticated by filter\");\n      }\n    } else {\n      // Security\u0027s not on, pull from url or use default web user\n      remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n          ? getDefaultWebUserName(conf) // not specified in request\n          : usernameFromQuery;\n    }\n\n    if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n      ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      checkUsername(ugi.getShortUserName(), usernameFromQuery);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n      if (doAsUserFromQuery !\u003d null) {\n        // create and attempt to authorize a proxy user\n        ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n        ProxyUsers.authorize(ugi, getRemoteAddr(request));\n      }\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "ef68759382e4f1cf26316fb9b98c31fca40eef3b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6219. Proxy superuser configuration should use true client IP for address checks. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587962 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/04/14 9:22 AM",
      "commitName": "ef68759382e4f1cf26316fb9b98c31fca40eef3b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/02/14 4:25 PM",
      "commitNameOld": "44492474100c0c8207e7eb118d19fe97e7ba537a",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 49.66,
      "commitsBetweenForRepo": 389,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     UserGroupInformation ugi \u003d null;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n     final String remoteUser;\n    \n     if (UserGroupInformation.isSecurityEnabled()) {\n       remoteUser \u003d request.getRemoteUser();\n       final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         // Token-based connections need only verify the effective user, and\n         // disallow proxying to different user.  Proxy authorization checks\n         // are not required since the checks apply to issuing a token.\n         ugi \u003d getTokenUGI(context, request, tokenString, conf);\n         checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n       } else if (remoteUser \u003d\u003d null) {\n         throw new IOException(\n             \"Security enabled but user not authenticated by filter\");\n       }\n     } else {\n       // Security\u0027s not on, pull from url or use default web user\n       remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n           ? getDefaultWebUserName(conf) // not specified in request\n           : usernameFromQuery;\n     }\n \n     if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n       ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       checkUsername(ugi.getShortUserName(), usernameFromQuery);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n       if (doAsUserFromQuery !\u003d null) {\n         // create and attempt to authorize a proxy user\n         ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n-        ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n+        ProxyUsers.authorize(ugi, getRemoteAddr(request), conf);\n       }\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n    final String remoteUser;\n   \n    if (UserGroupInformation.isSecurityEnabled()) {\n      remoteUser \u003d request.getRemoteUser();\n      final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        // Token-based connections need only verify the effective user, and\n        // disallow proxying to different user.  Proxy authorization checks\n        // are not required since the checks apply to issuing a token.\n        ugi \u003d getTokenUGI(context, request, tokenString, conf);\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n      } else if (remoteUser \u003d\u003d null) {\n        throw new IOException(\n            \"Security enabled but user not authenticated by filter\");\n      }\n    } else {\n      // Security\u0027s not on, pull from url or use default web user\n      remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n          ? getDefaultWebUserName(conf) // not specified in request\n          : usernameFromQuery;\n    }\n\n    if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n      ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      checkUsername(ugi.getShortUserName(), usernameFromQuery);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n      if (doAsUserFromQuery !\u003d null) {\n        // create and attempt to authorize a proxy user\n        ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n        ProxyUsers.authorize(ugi, getRemoteAddr(request), conf);\n      }\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3553. Hftp proxy tokens are broken (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366471 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/12 11:02 AM",
      "commitName": "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "27/07/12 9:39 AM",
      "commitNameOld": "b3b72482e4476fe6ead484e85b55c766bcf998d0",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,49 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n-    final UserGroupInformation ugi;\n+    UserGroupInformation ugi \u003d null;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n-\n-    if(UserGroupInformation.isSecurityEnabled()) {\n-      final String remoteUser \u003d request.getRemoteUser();\n-      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n+    final String remoteUser;\n+   \n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      remoteUser \u003d request.getRemoteUser();\n+      final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n-        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n-          new Token\u003cDelegationTokenIdentifier\u003e();\n-        token.decodeFromUrlString(tokenString);\n-        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n-        if (serviceAddress !\u003d null) {\n-          SecurityUtil.setTokenService(token, serviceAddress);\n-          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n-        }\n-        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n-            .getIdentifier());\n-        DataInputStream in \u003d new DataInputStream(buf);\n-        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n-        id.readFields(in);\n-        if (context !\u003d null) {\n-          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n-          if (nn !\u003d null) {\n-            // Verify the token.\n-            nn.getNamesystem().verifyToken(id, token.getPassword());\n-          }\n-        }\n-        ugi \u003d id.getUser();\n-        if (ugi.getRealUser() \u003d\u003d null) {\n-          //non-proxy case\n-          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n-          checkUsername(null, doAsUserFromQuery);\n-        } else {\n-          //proxy case\n-          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n-          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n-          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n-        }\n-        ugi.addToken(token);\n-      } else {\n-        if(remoteUser \u003d\u003d null) {\n-          throw new IOException(\"Security enabled but user not \" +\n-                                \"authenticated by filter\");\n-        }\n-        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n-        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n+        // Token-based connections need only verify the effective user, and\n+        // disallow proxying to different user.  Proxy authorization checks\n+        // are not required since the checks apply to issuing a token.\n+        ugi \u003d getTokenUGI(context, request, tokenString, conf);\n+        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n+        checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n+      } else if (remoteUser \u003d\u003d null) {\n+        throw new IOException(\n+            \"Security enabled but user not authenticated by filter\");\n+      }\n+    } else {\n+      // Security\u0027s not on, pull from url or use default web user\n+      remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n+          ? getDefaultWebUserName(conf) // not specified in request\n+          : usernameFromQuery;\n+    }\n+\n+    if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n+      ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n+      checkUsername(ugi.getShortUserName(), usernameFromQuery);\n+      if (UserGroupInformation.isSecurityEnabled()) {\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n-        realUgi.setAuthenticationMethod(secureAuthMethod);\n-        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n+        ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n-    } else { // Security\u0027s not on, pull from url\n-      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n-          getDefaultWebUser(conf) // not specified in request\n-          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n-      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n-      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n+      if (doAsUserFromQuery !\u003d null) {\n+        // create and attempt to authorize a proxy user\n+        ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n+        ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n+      }\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n    final String remoteUser;\n   \n    if (UserGroupInformation.isSecurityEnabled()) {\n      remoteUser \u003d request.getRemoteUser();\n      final String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        // Token-based connections need only verify the effective user, and\n        // disallow proxying to different user.  Proxy authorization checks\n        // are not required since the checks apply to issuing a token.\n        ugi \u003d getTokenUGI(context, request, tokenString, conf);\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n      } else if (remoteUser \u003d\u003d null) {\n        throw new IOException(\n            \"Security enabled but user not authenticated by filter\");\n      }\n    } else {\n      // Security\u0027s not on, pull from url or use default web user\n      remoteUser \u003d (usernameFromQuery \u003d\u003d null)\n          ? getDefaultWebUserName(conf) // not specified in request\n          : usernameFromQuery;\n    }\n\n    if (ugi \u003d\u003d null) { // security is off, or there\u0027s no token\n      ugi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      checkUsername(ugi.getShortUserName(), usernameFromQuery);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n      if (doAsUserFromQuery !\u003d null) {\n        // create and attempt to authorize a proxy user\n        ugi \u003d UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);\n        ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n      }\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "b3b72482e4476fe6ead484e85b55c766bcf998d0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8613. AbstractDelegationTokenIdentifier#getUser() should set token auth type. (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366440 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/12 9:39 AM",
      "commitName": "b3b72482e4476fe6ead484e85b55c766bcf998d0",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "17/07/12 10:11 PM",
      "commitNameOld": "d61c5bcb0bb69cf5a55565c4e1a70b16d174d74c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 9.48,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,68 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           SecurityUtil.setTokenService(token, serviceAddress);\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         if (context !\u003d null) {\n           final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n           if (nn !\u003d null) {\n             // Verify the token.\n             nn.getNamesystem().verifyToken(id, token.getPassword());\n           }\n         }\n         ugi \u003d id.getUser();\n         if (ugi.getRealUser() \u003d\u003d null) {\n           //non-proxy case\n           checkUsername(ugi.getShortUserName(), usernameFromQuery);\n           checkUsername(null, doAsUserFromQuery);\n         } else {\n           //proxy case\n           checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n           checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n           ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n         }\n         ugi.addToken(token);\n-        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n         checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         realUgi.setAuthenticationMethod(secureAuthMethod);\n         ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n       final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n       ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          SecurityUtil.setTokenService(token, serviceAddress);\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        if (context !\u003d null) {\n          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n          if (nn !\u003d null) {\n            // Verify the token.\n            nn.getNamesystem().verifyToken(id, token.getPassword());\n          }\n        }\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "d61c5bcb0bb69cf5a55565c4e1a70b16d174d74c": {
      "type": "Ybodychange",
      "commitMessage": "Revert HDFS-3639. JspHelper#getUGI should always verify the token if security is enabled.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/12 10:11 PM",
      "commitName": "d61c5bcb0bb69cf5a55565c4e1a70b16d174d74c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "17/07/12 10:05 PM",
      "commitNameOld": "6981b14003d3ff99fd719515ac08d748fc5f44bd",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,69 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           SecurityUtil.setTokenService(token, serviceAddress);\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n-        final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n-        nn.getNamesystem().verifyToken(id, token.getPassword());\n+        if (context !\u003d null) {\n+          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n+          if (nn !\u003d null) {\n+            // Verify the token.\n+            nn.getNamesystem().verifyToken(id, token.getPassword());\n+          }\n+        }\n         ugi \u003d id.getUser();\n         if (ugi.getRealUser() \u003d\u003d null) {\n           //non-proxy case\n           checkUsername(ugi.getShortUserName(), usernameFromQuery);\n           checkUsername(null, doAsUserFromQuery);\n         } else {\n           //proxy case\n           checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n           checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n           ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n         }\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n         checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         realUgi.setAuthenticationMethod(secureAuthMethod);\n         ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n       final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n       ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          SecurityUtil.setTokenService(token, serviceAddress);\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        if (context !\u003d null) {\n          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n          if (nn !\u003d null) {\n            // Verify the token.\n            nn.getNamesystem().verifyToken(id, token.getPassword());\n          }\n        }\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "6981b14003d3ff99fd719515ac08d748fc5f44bd": {
      "type": "Ybodychange",
      "commitMessage": "Revert HDFS-3654. TestJspHelper#testGetUgi fails with NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362759 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/12 10:05 PM",
      "commitName": "6981b14003d3ff99fd719515ac08d748fc5f44bd",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "15/07/12 7:58 PM",
      "commitNameOld": "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n-    if (UserGroupInformation.isSecurityEnabled()) {\n+    if(UserGroupInformation.isSecurityEnabled()) {\n       final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           SecurityUtil.setTokenService(token, serviceAddress);\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n-        nn.verifyToken(id, token.getPassword());\n+        nn.getNamesystem().verifyToken(id, token.getPassword());\n         ugi \u003d id.getUser();\n         if (ugi.getRealUser() \u003d\u003d null) {\n           //non-proxy case\n           checkUsername(ugi.getShortUserName(), usernameFromQuery);\n           checkUsername(null, doAsUserFromQuery);\n         } else {\n           //proxy case\n           checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n           checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n           ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n         }\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n         checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         realUgi.setAuthenticationMethod(secureAuthMethod);\n         ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n       final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n       ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          SecurityUtil.setTokenService(token, serviceAddress);\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n        nn.getNamesystem().verifyToken(id, token.getPassword());\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "32d4c148dfd203789386a0587480bd974fbf4c1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3654. TestJspHelper#testGetUgi fails with NPE. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361463 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/07/12 6:07 PM",
      "commitName": "32d4c148dfd203789386a0587480bd974fbf4c1a",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "11/07/12 5:12 PM",
      "commitNameOld": "8ced7381a46320c5b230e73239a4938880acd529",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n-    if(UserGroupInformation.isSecurityEnabled()) {\n+    if (UserGroupInformation.isSecurityEnabled()) {\n       final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           SecurityUtil.setTokenService(token, serviceAddress);\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n-        nn.getNamesystem().verifyToken(id, token.getPassword());\n+        nn.verifyToken(id, token.getPassword());\n         ugi \u003d id.getUser();\n         if (ugi.getRealUser() \u003d\u003d null) {\n           //non-proxy case\n           checkUsername(ugi.getShortUserName(), usernameFromQuery);\n           checkUsername(null, doAsUserFromQuery);\n         } else {\n           //proxy case\n           checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n           checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n           ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n         }\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n         checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         realUgi.setAuthenticationMethod(secureAuthMethod);\n         ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n       final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n       ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          SecurityUtil.setTokenService(token, serviceAddress);\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n        nn.verifyToken(id, token.getPassword());\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "8ced7381a46320c5b230e73239a4938880acd529": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3639. JspHelper#getUGI should always verify the token if security is enabled. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 5:12 PM",
      "commitName": "8ced7381a46320c5b230e73239a4938880acd529",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "28/05/12 8:36 AM",
      "commitNameOld": "d2b57e00bc277442c2eb97630e86352ef44a1df2",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 44.36,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,64 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           SecurityUtil.setTokenService(token, serviceAddress);\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n-        if (context !\u003d null) {\n-          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n-          if (nn !\u003d null) {\n-            // Verify the token.\n-            nn.getNamesystem().verifyToken(id, token.getPassword());\n-          }\n-        }\n+        final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n+        nn.getNamesystem().verifyToken(id, token.getPassword());\n         ugi \u003d id.getUser();\n         if (ugi.getRealUser() \u003d\u003d null) {\n           //non-proxy case\n           checkUsername(ugi.getShortUserName(), usernameFromQuery);\n           checkUsername(null, doAsUserFromQuery);\n         } else {\n           //proxy case\n           checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n           checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n           ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n         }\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n         checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         realUgi.setAuthenticationMethod(secureAuthMethod);\n         ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n       final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n       ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          SecurityUtil.setTokenService(token, serviceAddress);\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n        nn.getNamesystem().verifyToken(id, token.getPassword());\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "9eb8f4d267ca38c16e3ba191a3b754de7d167669": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2784. Update hftp and hdfs for host-based token support. Contributed by Kihwal Lee.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239763 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 11:04 AM",
      "commitName": "9eb8f4d267ca38c16e3ba191a3b754de7d167669",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "10/11/11 8:19 PM",
      "commitNameOld": "09a156fcce2bc1be4081717bf7ef7d290e80d818",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 83.61,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n     final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n-        String serviceAddress \u003d getNNServiceAddress(context, request);\n+        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n-          token.setService(new Text(serviceAddress));\n+          SecurityUtil.setTokenService(token, serviceAddress);\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         if (context !\u003d null) {\n           final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n           if (nn !\u003d null) {\n             // Verify the token.\n             nn.getNamesystem().verifyToken(id, token.getPassword());\n           }\n         }\n         ugi \u003d id.getUser();\n         if (ugi.getRealUser() \u003d\u003d null) {\n           //non-proxy case\n           checkUsername(ugi.getShortUserName(), usernameFromQuery);\n           checkUsername(null, doAsUserFromQuery);\n         } else {\n           //proxy case\n           checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n           checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n           ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n         }\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n         checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         realUgi.setAuthenticationMethod(secureAuthMethod);\n         ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n       final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n       ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          SecurityUtil.setTokenService(token, serviceAddress);\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        if (context !\u003d null) {\n          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n          if (nn !\u003d null) {\n            // Verify the token.\n            nn.getNamesystem().verifyToken(id, token.getPassword());\n          }\n        }\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "09a156fcce2bc1be4081717bf7ef7d290e80d818": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2539. Support doAs and GETHOMEDIRECTORY in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11 8:19 PM",
      "commitName": "09a156fcce2bc1be4081717bf7ef7d290e80d818",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "07/11/11 12:05 PM",
      "commitNameOld": "a590b498acf1a424ffbb3a9d8849c0abb409366d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.34,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,69 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n+    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n-      final String user \u003d request.getRemoteUser();\n+      final String remoteUser \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         String serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           token.setService(new Text(serviceAddress));\n           token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         if (context !\u003d null) {\n           final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n           if (nn !\u003d null) {\n             // Verify the token.\n             nn.getNamesystem().verifyToken(id, token.getPassword());\n           }\n         }\n         ugi \u003d id.getUser();\n-        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n-        checkUsername(ugi.getShortUserName(), user);\n+        if (ugi.getRealUser() \u003d\u003d null) {\n+          //non-proxy case\n+          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n+          checkUsername(null, doAsUserFromQuery);\n+        } else {\n+          //proxy case\n+          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n+          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n+          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n+        }\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n-        if(user \u003d\u003d null) {\n+        if(remoteUser \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n-        ugi \u003d UserGroupInformation.createRemoteUser(user);\n-        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n+        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n+        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n-        ugi.setAuthenticationMethod(secureAuthMethod);\n+        realUgi.setAuthenticationMethod(secureAuthMethod);\n+        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n       }\n     } else { // Security\u0027s not on, pull from url\n-      ugi \u003d usernameFromQuery \u003d\u003d null?\n+      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n-      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n+      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n+      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n    final String doAsUserFromQuery \u003d request.getParameter(DoAsParam.NAME);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String remoteUser \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          token.setService(new Text(serviceAddress));\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        if (context !\u003d null) {\n          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n          if (nn !\u003d null) {\n            // Verify the token.\n            nn.getNamesystem().verifyToken(id, token.getPassword());\n          }\n        }\n        ugi \u003d id.getUser();\n        if (ugi.getRealUser() \u003d\u003d null) {\n          //non-proxy case\n          checkUsername(ugi.getShortUserName(), usernameFromQuery);\n          checkUsername(null, doAsUserFromQuery);\n        } else {\n          //proxy case\n          checkUsername(ugi.getRealUser().getShortUserName(), usernameFromQuery);\n          checkUsername(ugi.getShortUserName(), doAsUserFromQuery);\n          ProxyUsers.authorize(ugi, request.getRemoteAddr(), conf);\n        }\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(remoteUser \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        final UserGroupInformation realUgi \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        checkUsername(realUgi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        realUgi.setAuthenticationMethod(secureAuthMethod);\n        ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, true, conf);\n      }\n    } else { // Security\u0027s not on, pull from url\n      final UserGroupInformation realUgi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      realUgi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n      ugi \u003d initUGI(realUgi, doAsUserFromQuery, request, false, conf);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "a590b498acf1a424ffbb3a9d8849c0abb409366d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2528. Webhdfs: set delegation kind to WEBHDFS and add a HDFS token when http requests are redirected to datanode.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1198903 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/11 12:05 PM",
      "commitName": "a590b498acf1a424ffbb3a9d8849c0abb409366d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/11/11 11:54 PM",
      "commitNameOld": "40fe96546fcd68696076db67053f30d38a39a0d5",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 4.55,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,58 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String user \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         String serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n-          LOG.info(\"Setting service in token: \"\n-              + new Text(serviceAddress));\n           token.setService(new Text(serviceAddress));\n+          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         if (context !\u003d null) {\n           final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n           if (nn !\u003d null) {\n             // Verify the token.\n             nn.getNamesystem().verifyToken(id, token.getPassword());\n           }\n         }\n         ugi \u003d id.getUser();\n         checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         checkUsername(ugi.getShortUserName(), user);\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(user \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         ugi \u003d UserGroupInformation.createRemoteUser(user);\n         checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n     } else { // Security\u0027s not on, pull from url\n       ugi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          token.setService(new Text(serviceAddress));\n          token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        if (context !\u003d null) {\n          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n          if (nn !\u003d null) {\n            // Verify the token.\n            nn.getNamesystem().verifyToken(id, token.getPassword());\n          }\n        }\n        ugi \u003d id.getUser();\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        checkUsername(ugi.getShortUserName(), user);\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n    } else { // Security\u0027s not on, pull from url\n      ugi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "bd21ddcb78350b311f271e233038b8ca78a65242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2416. distcp with a webhdfs uri on a secure cluster fails.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196434 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/11/11 7:08 PM",
      "commitName": "bd21ddcb78350b311f271e233038b8ca78a65242",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "27/09/11 10:29 PM",
      "commitNameOld": "825f9c80a4f2788040cc17455bea96ffaa08cb5a",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 34.86,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,59 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String user \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         String serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           LOG.info(\"Setting service in token: \"\n               + new Text(serviceAddress));\n           token.setService(new Text(serviceAddress));\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n+        if (context !\u003d null) {\n+          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n+          if (nn !\u003d null) {\n+            // Verify the token.\n+            nn.getNamesystem().verifyToken(id, token.getPassword());\n+          }\n+        }\n         ugi \u003d id.getUser();\n         checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         checkUsername(ugi.getShortUserName(), user);\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(user \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         ugi \u003d UserGroupInformation.createRemoteUser(user);\n         checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n     } else { // Security\u0027s not on, pull from url\n       ugi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        if (context !\u003d null) {\n          final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n          if (nn !\u003d null) {\n            // Verify the token.\n            nn.getNamesystem().verifyToken(id, token.getPassword());\n          }\n        }\n        ugi \u003d id.getUser();\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        checkUsername(ugi.getShortUserName(), user);\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n    } else { // Security\u0027s not on, pull from url\n      ugi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "825f9c80a4f2788040cc17455bea96ffaa08cb5a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2361. hftp is broken, fixed username checks in JspHelper.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 10:29 PM",
      "commitName": "825f9c80a4f2788040cc17455bea96ffaa08cb5a",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "23/09/11 11:15 PM",
      "commitNameOld": "83a83d3b733fe18541428aaae2c2923318626e49",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf,\n       final AuthenticationMethod secureAuthMethod,\n       final boolean tryUgiParameter) throws IOException {\n     final UserGroupInformation ugi;\n     final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n \n     if(UserGroupInformation.isSecurityEnabled()) {\n       final String user \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         String serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           LOG.info(\"Setting service in token: \"\n               + new Text(serviceAddress));\n           token.setService(new Text(serviceAddress));\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         ugi \u003d id.getUser();\n-        checkUsername(ugi.getUserName(), user);\n+        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n+        checkUsername(ugi.getShortUserName(), user);\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(user \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         ugi \u003d UserGroupInformation.createRemoteUser(user);\n+        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n         ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n-\n-      checkUsername(user, usernameFromQuery);\n-\n     } else { // Security\u0027s not on, pull from url\n       ugi \u003d usernameFromQuery \u003d\u003d null?\n           getDefaultWebUser(conf) // not specified in request\n           : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        checkUsername(ugi.getShortUserName(), user);\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        checkUsername(ugi.getShortUserName(), usernameFromQuery);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n    } else { // Security\u0027s not on, pull from url\n      ugi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/11 8:02 AM",
      "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/09/11 8:02 AM",
          "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/09/11 12:30 PM",
          "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 11.81,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n-      HttpServletRequest request, Configuration conf) throws IOException {\n-    UserGroupInformation ugi \u003d null;\n+      HttpServletRequest request, Configuration conf,\n+      final AuthenticationMethod secureAuthMethod,\n+      final boolean tryUgiParameter) throws IOException {\n+    final UserGroupInformation ugi;\n+    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n+\n     if(UserGroupInformation.isSecurityEnabled()) {\n-      String user \u003d request.getRemoteUser();\n+      final String user \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         String serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           LOG.info(\"Setting service in token: \"\n               + new Text(serviceAddress));\n           token.setService(new Text(serviceAddress));\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         ugi \u003d id.getUser();\n+        checkUsername(ugi.getUserName(), user);\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(user \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         ugi \u003d UserGroupInformation.createRemoteUser(user);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n-        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n+        ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n+\n+      checkUsername(user, usernameFromQuery);\n+\n     } else { // Security\u0027s not on, pull from url\n-      String user \u003d request.getParameter(\"ugi\");\n-      \n-      if(user \u003d\u003d null) { // not specified in request\n-        ugi \u003d getDefaultWebUser(conf);\n-      } else {\n-        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n-      }\n+      ugi \u003d usernameFromQuery \u003d\u003d null?\n+          getDefaultWebUser(conf) // not specified in request\n+          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        checkUsername(ugi.getUserName(), user);\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n\n      checkUsername(user, usernameFromQuery);\n\n    } else { // Security\u0027s not on, pull from url\n      ugi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
          "extendedDetails": {
            "oldValue": "[context-ServletContext, request-HttpServletRequest, conf-Configuration]",
            "newValue": "[context-ServletContext, request-HttpServletRequest, conf-Configuration, secureAuthMethod-AuthenticationMethod(modifiers-final), tryUgiParameter-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/09/11 8:02 AM",
          "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/09/11 12:30 PM",
          "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 11.81,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n-      HttpServletRequest request, Configuration conf) throws IOException {\n-    UserGroupInformation ugi \u003d null;\n+      HttpServletRequest request, Configuration conf,\n+      final AuthenticationMethod secureAuthMethod,\n+      final boolean tryUgiParameter) throws IOException {\n+    final UserGroupInformation ugi;\n+    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n+\n     if(UserGroupInformation.isSecurityEnabled()) {\n-      String user \u003d request.getRemoteUser();\n+      final String user \u003d request.getRemoteUser();\n       String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n       if (tokenString !\u003d null) {\n         Token\u003cDelegationTokenIdentifier\u003e token \u003d \n           new Token\u003cDelegationTokenIdentifier\u003e();\n         token.decodeFromUrlString(tokenString);\n         String serviceAddress \u003d getNNServiceAddress(context, request);\n         if (serviceAddress !\u003d null) {\n           LOG.info(\"Setting service in token: \"\n               + new Text(serviceAddress));\n           token.setService(new Text(serviceAddress));\n         }\n         ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n             .getIdentifier());\n         DataInputStream in \u003d new DataInputStream(buf);\n         DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n         id.readFields(in);\n         ugi \u003d id.getUser();\n+        checkUsername(ugi.getUserName(), user);\n         ugi.addToken(token);\n         ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n       } else {\n         if(user \u003d\u003d null) {\n           throw new IOException(\"Security enabled but user not \" +\n                                 \"authenticated by filter\");\n         }\n         ugi \u003d UserGroupInformation.createRemoteUser(user);\n         // This is not necessarily true, could have been auth\u0027ed by user-facing\n         // filter\n-        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n+        ugi.setAuthenticationMethod(secureAuthMethod);\n       }\n+\n+      checkUsername(user, usernameFromQuery);\n+\n     } else { // Security\u0027s not on, pull from url\n-      String user \u003d request.getParameter(\"ugi\");\n-      \n-      if(user \u003d\u003d null) { // not specified in request\n-        ugi \u003d getDefaultWebUser(conf);\n-      } else {\n-        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n-      }\n+      ugi \u003d usernameFromQuery \u003d\u003d null?\n+          getDefaultWebUser(conf) // not specified in request\n+          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n       ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n     }\n     \n     if(LOG.isDebugEnabled())\n       LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n     return ugi;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf,\n      final AuthenticationMethod secureAuthMethod,\n      final boolean tryUgiParameter) throws IOException {\n    final UserGroupInformation ugi;\n    final String usernameFromQuery \u003d getUsernameFromQuery(request, tryUgiParameter);\n\n    if(UserGroupInformation.isSecurityEnabled()) {\n      final String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        checkUsername(ugi.getUserName(), user);\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(secureAuthMethod);\n      }\n\n      checkUsername(user, usernameFromQuery);\n\n    } else { // Security\u0027s not on, pull from url\n      ugi \u003d usernameFromQuery \u003d\u003d null?\n          getDefaultWebUser(conf) // not specified in request\n          : UserGroupInformation.createRemoteUser(usernameFromQuery);\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    if(UserGroupInformation.isSecurityEnabled()) {\n      String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n      }\n    } else { // Security\u0027s not on, pull from url\n      String user \u003d request.getParameter(\"ugi\");\n      \n      if(user \u003d\u003d null) { // not specified in request\n        ugi \u003d getDefaultWebUser(conf);\n      } else {\n        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n      }\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    if(UserGroupInformation.isSecurityEnabled()) {\n      String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n      }\n    } else { // Security\u0027s not on, pull from url\n      String user \u003d request.getParameter(\"ugi\");\n      \n      if(user \u003d\u003d null) { // not specified in request\n        ugi \u003d getDefaultWebUser(conf);\n      } else {\n        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n      }\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,49 @@\n+  public static UserGroupInformation getUGI(ServletContext context,\n+      HttpServletRequest request, Configuration conf) throws IOException {\n+    UserGroupInformation ugi \u003d null;\n+    if(UserGroupInformation.isSecurityEnabled()) {\n+      String user \u003d request.getRemoteUser();\n+      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n+      if (tokenString !\u003d null) {\n+        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n+          new Token\u003cDelegationTokenIdentifier\u003e();\n+        token.decodeFromUrlString(tokenString);\n+        String serviceAddress \u003d getNNServiceAddress(context, request);\n+        if (serviceAddress !\u003d null) {\n+          LOG.info(\"Setting service in token: \"\n+              + new Text(serviceAddress));\n+          token.setService(new Text(serviceAddress));\n+        }\n+        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n+            .getIdentifier());\n+        DataInputStream in \u003d new DataInputStream(buf);\n+        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n+        id.readFields(in);\n+        ugi \u003d id.getUser();\n+        ugi.addToken(token);\n+        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n+      } else {\n+        if(user \u003d\u003d null) {\n+          throw new IOException(\"Security enabled but user not \" +\n+                                \"authenticated by filter\");\n+        }\n+        ugi \u003d UserGroupInformation.createRemoteUser(user);\n+        // This is not necessarily true, could have been auth\u0027ed by user-facing\n+        // filter\n+        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n+      }\n+    } else { // Security\u0027s not on, pull from url\n+      String user \u003d request.getParameter(\"ugi\");\n+      \n+      if(user \u003d\u003d null) { // not specified in request\n+        ugi \u003d getDefaultWebUser(conf);\n+      } else {\n+        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n+      }\n+      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n+    }\n+    \n+    if(LOG.isDebugEnabled())\n+      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n+    return ugi;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    if(UserGroupInformation.isSecurityEnabled()) {\n      String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n      }\n    } else { // Security\u0027s not on, pull from url\n      String user \u003d request.getParameter(\"ugi\");\n      \n      if(user \u003d\u003d null) { // not specified in request\n        ugi \u003d getDefaultWebUser(conf);\n      } else {\n        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n      }\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
    }
  }
}