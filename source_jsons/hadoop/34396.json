{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "recoverTrackerResources",
  "functionId": "recoverTrackerResources___tracker-LocalResourcesTracker__state-LocalResourceTrackerState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 341,
  "functionEndLine": 373,
  "numCommitsSeen": 88,
  "timeTaken": 4218,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "250b50018e8c94d8ca83ff981b01f26bb68c0842",
    "8f65c793f2930bfd16885a2ab188a9970b754974",
    "66598697a6e777615334ebde5ba7738135da83ae"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "250b50018e8c94d8ca83ff981b01f26bb68c0842": "Ymultichange(Yexceptionschange,Ybodychange)",
    "8f65c793f2930bfd16885a2ab188a9970b754974": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "14/11/18 12:22 PM",
      "commitNameOld": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 121.12,
      "commitsBetweenForRepo": 889,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n   private void recoverTrackerResources(LocalResourcesTracker tracker,\n       LocalResourceTrackerState state) throws URISyntaxException, IOException {\n     try (RecoveryIterator\u003cLocalizedResourceProto\u003e it \u003d\n              state.getCompletedResourcesIterator()) {\n       while (it !\u003d null \u0026\u0026 it.hasNext()) {\n         LocalizedResourceProto proto \u003d it.next();\n         LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n         LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Recovering localized resource \" + req + \" at \"\n-              + proto.getLocalPath());\n-        }\n+        LOG.debug(\"Recovering localized resource {} at {}\",\n+            req, proto.getLocalPath());\n         tracker.handle(new ResourceRecoveredEvent(req,\n             new Path(proto.getLocalPath()), proto.getSize()));\n       }\n     }\n \n     try (RecoveryIterator\u003cMap.Entry\u003cLocalResourceProto, Path\u003e\u003e it \u003d\n              state.getStartedResourcesIterator()) {\n       while (it !\u003d null \u0026\u0026 it.hasNext()) {\n         Map.Entry\u003cLocalResourceProto, Path\u003e entry \u003d it.next();\n         LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n         LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n         Path localPath \u003d entry.getValue();\n         tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n \n         // delete any in-progress localizations, containers will request again\n         LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n             + localPath);\n         tracker.remove(tracker.getLocalizedResource(req), delService);\n       }\n     }\n \n     // TODO: remove untracked directories in local filesystem\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverTrackerResources(LocalResourcesTracker tracker,\n      LocalResourceTrackerState state) throws URISyntaxException, IOException {\n    try (RecoveryIterator\u003cLocalizedResourceProto\u003e it \u003d\n             state.getCompletedResourcesIterator()) {\n      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n        LocalizedResourceProto proto \u003d it.next();\n        LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n        LOG.debug(\"Recovering localized resource {} at {}\",\n            req, proto.getLocalPath());\n        tracker.handle(new ResourceRecoveredEvent(req,\n            new Path(proto.getLocalPath()), proto.getSize()));\n      }\n    }\n\n    try (RecoveryIterator\u003cMap.Entry\u003cLocalResourceProto, Path\u003e\u003e it \u003d\n             state.getStartedResourcesIterator()) {\n      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n        Map.Entry\u003cLocalResourceProto, Path\u003e entry \u003d it.next();\n        LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n        Path localPath \u003d entry.getValue();\n        tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n\n        // delete any in-progress localizations, containers will request again\n        LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n            + localPath);\n        tracker.remove(tracker.getLocalizedResource(req), delService);\n      }\n    }\n\n    // TODO: remove untracked directories in local filesystem\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "250b50018e8c94d8ca83ff981b01f26bb68c0842": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati\n",
      "commitDate": "13/09/18 11:28 AM",
      "commitName": "250b50018e8c94d8ca83ff981b01f26bb68c0842",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati\n",
          "commitDate": "13/09/18 11:28 AM",
          "commitName": "250b50018e8c94d8ca83ff981b01f26bb68c0842",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "23/08/18 7:29 AM",
          "commitNameOld": "585ebd873a55bedd2a364d256837f08ada8ba032",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 21.17,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,35 @@\n   private void recoverTrackerResources(LocalResourcesTracker tracker,\n-      LocalResourceTrackerState state) throws URISyntaxException {\n-    for (LocalizedResourceProto proto : state.getLocalizedResources()) {\n-      LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n-      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Recovering localized resource \" + req + \" at \"\n-            + proto.getLocalPath());\n+      LocalResourceTrackerState state) throws URISyntaxException, IOException {\n+    try (RecoveryIterator\u003cLocalizedResourceProto\u003e it \u003d\n+             state.getCompletedResourcesIterator()) {\n+      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n+        LocalizedResourceProto proto \u003d it.next();\n+        LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n+        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Recovering localized resource \" + req + \" at \"\n+              + proto.getLocalPath());\n+        }\n+        tracker.handle(new ResourceRecoveredEvent(req,\n+            new Path(proto.getLocalPath()), proto.getSize()));\n       }\n-      tracker.handle(new ResourceRecoveredEvent(req,\n-          new Path(proto.getLocalPath()), proto.getSize()));\n     }\n \n-    for (Map.Entry\u003cLocalResourceProto, Path\u003e entry :\n-         state.getInProgressResources().entrySet()) {\n-      LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n-      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n-      Path localPath \u003d entry.getValue();\n-      tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n+    try (RecoveryIterator\u003cMap.Entry\u003cLocalResourceProto, Path\u003e\u003e it \u003d\n+             state.getStartedResourcesIterator()) {\n+      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n+        Map.Entry\u003cLocalResourceProto, Path\u003e entry \u003d it.next();\n+        LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n+        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n+        Path localPath \u003d entry.getValue();\n+        tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n \n-      // delete any in-progress localizations, containers will request again\n-      LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n-          + localPath);\n-      tracker.remove(tracker.getLocalizedResource(req), delService);\n+        // delete any in-progress localizations, containers will request again\n+        LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n+            + localPath);\n+        tracker.remove(tracker.getLocalizedResource(req), delService);\n+      }\n     }\n \n     // TODO: remove untracked directories in local filesystem\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverTrackerResources(LocalResourcesTracker tracker,\n      LocalResourceTrackerState state) throws URISyntaxException, IOException {\n    try (RecoveryIterator\u003cLocalizedResourceProto\u003e it \u003d\n             state.getCompletedResourcesIterator()) {\n      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n        LocalizedResourceProto proto \u003d it.next();\n        LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering localized resource \" + req + \" at \"\n              + proto.getLocalPath());\n        }\n        tracker.handle(new ResourceRecoveredEvent(req,\n            new Path(proto.getLocalPath()), proto.getSize()));\n      }\n    }\n\n    try (RecoveryIterator\u003cMap.Entry\u003cLocalResourceProto, Path\u003e\u003e it \u003d\n             state.getStartedResourcesIterator()) {\n      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n        Map.Entry\u003cLocalResourceProto, Path\u003e entry \u003d it.next();\n        LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n        Path localPath \u003d entry.getValue();\n        tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n\n        // delete any in-progress localizations, containers will request again\n        LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n            + localPath);\n        tracker.remove(tracker.getLocalizedResource(req), delService);\n      }\n    }\n\n    // TODO: remove untracked directories in local filesystem\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {
            "oldValue": "[URISyntaxException]",
            "newValue": "[URISyntaxException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati\n",
          "commitDate": "13/09/18 11:28 AM",
          "commitName": "250b50018e8c94d8ca83ff981b01f26bb68c0842",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "23/08/18 7:29 AM",
          "commitNameOld": "585ebd873a55bedd2a364d256837f08ada8ba032",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 21.17,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,35 @@\n   private void recoverTrackerResources(LocalResourcesTracker tracker,\n-      LocalResourceTrackerState state) throws URISyntaxException {\n-    for (LocalizedResourceProto proto : state.getLocalizedResources()) {\n-      LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n-      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Recovering localized resource \" + req + \" at \"\n-            + proto.getLocalPath());\n+      LocalResourceTrackerState state) throws URISyntaxException, IOException {\n+    try (RecoveryIterator\u003cLocalizedResourceProto\u003e it \u003d\n+             state.getCompletedResourcesIterator()) {\n+      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n+        LocalizedResourceProto proto \u003d it.next();\n+        LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n+        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Recovering localized resource \" + req + \" at \"\n+              + proto.getLocalPath());\n+        }\n+        tracker.handle(new ResourceRecoveredEvent(req,\n+            new Path(proto.getLocalPath()), proto.getSize()));\n       }\n-      tracker.handle(new ResourceRecoveredEvent(req,\n-          new Path(proto.getLocalPath()), proto.getSize()));\n     }\n \n-    for (Map.Entry\u003cLocalResourceProto, Path\u003e entry :\n-         state.getInProgressResources().entrySet()) {\n-      LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n-      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n-      Path localPath \u003d entry.getValue();\n-      tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n+    try (RecoveryIterator\u003cMap.Entry\u003cLocalResourceProto, Path\u003e\u003e it \u003d\n+             state.getStartedResourcesIterator()) {\n+      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n+        Map.Entry\u003cLocalResourceProto, Path\u003e entry \u003d it.next();\n+        LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n+        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n+        Path localPath \u003d entry.getValue();\n+        tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n \n-      // delete any in-progress localizations, containers will request again\n-      LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n-          + localPath);\n-      tracker.remove(tracker.getLocalizedResource(req), delService);\n+        // delete any in-progress localizations, containers will request again\n+        LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n+            + localPath);\n+        tracker.remove(tracker.getLocalizedResource(req), delService);\n+      }\n     }\n \n     // TODO: remove untracked directories in local filesystem\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverTrackerResources(LocalResourcesTracker tracker,\n      LocalResourceTrackerState state) throws URISyntaxException, IOException {\n    try (RecoveryIterator\u003cLocalizedResourceProto\u003e it \u003d\n             state.getCompletedResourcesIterator()) {\n      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n        LocalizedResourceProto proto \u003d it.next();\n        LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Recovering localized resource \" + req + \" at \"\n              + proto.getLocalPath());\n        }\n        tracker.handle(new ResourceRecoveredEvent(req,\n            new Path(proto.getLocalPath()), proto.getSize()));\n      }\n    }\n\n    try (RecoveryIterator\u003cMap.Entry\u003cLocalResourceProto, Path\u003e\u003e it \u003d\n             state.getStartedResourcesIterator()) {\n      while (it !\u003d null \u0026\u0026 it.hasNext()) {\n        Map.Entry\u003cLocalResourceProto, Path\u003e entry \u003d it.next();\n        LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n        LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n        Path localPath \u003d entry.getValue();\n        tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n\n        // delete any in-progress localizations, containers will request again\n        LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n            + localPath);\n        tracker.remove(tracker.getLocalizedResource(req), delService);\n      }\n    }\n\n    // TODO: remove untracked directories in local filesystem\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "8f65c793f2930bfd16885a2ab188a9970b754974": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3097. Logging of resource recovery on NM restart has redundancies. Contributed by Eric Payne\n",
      "commitDate": "04/05/15 8:31 AM",
      "commitName": "8f65c793f2930bfd16885a2ab188a9970b754974",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/04/15 9:13 AM",
      "commitNameOld": "47279c3228185548ed09c36579b420225e4894f5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.97,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private void recoverTrackerResources(LocalResourcesTracker tracker,\n       LocalResourceTrackerState state) throws URISyntaxException {\n     for (LocalizedResourceProto proto : state.getLocalizedResources()) {\n       LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n       LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n-      LOG.info(\"Recovering localized resource \" + req + \" at \"\n-          + proto.getLocalPath());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Recovering localized resource \" + req + \" at \"\n+            + proto.getLocalPath());\n+      }\n       tracker.handle(new ResourceRecoveredEvent(req,\n           new Path(proto.getLocalPath()), proto.getSize()));\n     }\n \n     for (Map.Entry\u003cLocalResourceProto, Path\u003e entry :\n          state.getInProgressResources().entrySet()) {\n       LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n       LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n       Path localPath \u003d entry.getValue();\n       tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n \n       // delete any in-progress localizations, containers will request again\n       LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n           + localPath);\n       tracker.remove(tracker.getLocalizedResource(req), delService);\n     }\n \n     // TODO: remove untracked directories in local filesystem\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverTrackerResources(LocalResourcesTracker tracker,\n      LocalResourceTrackerState state) throws URISyntaxException {\n    for (LocalizedResourceProto proto : state.getLocalizedResources()) {\n      LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Recovering localized resource \" + req + \" at \"\n            + proto.getLocalPath());\n      }\n      tracker.handle(new ResourceRecoveredEvent(req,\n          new Path(proto.getLocalPath()), proto.getSize()));\n    }\n\n    for (Map.Entry\u003cLocalResourceProto, Path\u003e entry :\n         state.getInProgressResources().entrySet()) {\n      LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n      Path localPath \u003d entry.getValue();\n      tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n\n      // delete any in-progress localizations, containers will request again\n      LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n          + localPath);\n      tracker.remove(tracker.getLocalizedResource(req), delService);\n    }\n\n    // TODO: remove untracked directories in local filesystem\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,26 @@\n+  private void recoverTrackerResources(LocalResourcesTracker tracker,\n+      LocalResourceTrackerState state) throws URISyntaxException {\n+    for (LocalizedResourceProto proto : state.getLocalizedResources()) {\n+      LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n+      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n+      LOG.info(\"Recovering localized resource \" + req + \" at \"\n+          + proto.getLocalPath());\n+      tracker.handle(new ResourceRecoveredEvent(req,\n+          new Path(proto.getLocalPath()), proto.getSize()));\n+    }\n+\n+    for (Map.Entry\u003cLocalResourceProto, Path\u003e entry :\n+         state.getInProgressResources().entrySet()) {\n+      LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n+      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n+      Path localPath \u003d entry.getValue();\n+      tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n+\n+      // delete any in-progress localizations, containers will request again\n+      LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n+          + localPath);\n+      tracker.remove(tracker.getLocalizedResource(req), delService);\n+    }\n+\n+    // TODO: remove untracked directories in local filesystem\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverTrackerResources(LocalResourcesTracker tracker,\n      LocalResourceTrackerState state) throws URISyntaxException {\n    for (LocalizedResourceProto proto : state.getLocalizedResources()) {\n      LocalResource rsrc \u003d new LocalResourcePBImpl(proto.getResource());\n      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n      LOG.info(\"Recovering localized resource \" + req + \" at \"\n          + proto.getLocalPath());\n      tracker.handle(new ResourceRecoveredEvent(req,\n          new Path(proto.getLocalPath()), proto.getSize()));\n    }\n\n    for (Map.Entry\u003cLocalResourceProto, Path\u003e entry :\n         state.getInProgressResources().entrySet()) {\n      LocalResource rsrc \u003d new LocalResourcePBImpl(entry.getKey());\n      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc);\n      Path localPath \u003d entry.getValue();\n      tracker.handle(new ResourceRecoveredEvent(req, localPath, 0));\n\n      // delete any in-progress localizations, containers will request again\n      LOG.info(\"Deleting in-progress localization for \" + req + \" at \"\n          + localPath);\n      tracker.remove(tracker.getLocalizedResource(req), delService);\n    }\n\n    // TODO: remove untracked directories in local filesystem\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}