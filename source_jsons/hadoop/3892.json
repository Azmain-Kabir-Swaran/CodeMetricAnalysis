{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "listStatusInternal",
  "functionId": "listStatusInternal___p-Path",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 1089,
  "functionEndLine": 1141,
  "numCommitsSeen": 266,
  "timeTaken": 8744,
  "changeHistory": [
    "687233f20d24c29041929dd0a99d963cec54b6df",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "1c030c6e58dc83152f933323bb7743ad47f5af27",
    "8767e4cde172b6e6070e3fd45325ede617b99343",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "687233f20d24c29041929dd0a99d963cec54b6df": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "1c030c6e58dc83152f933323bb7743ad47f5af27": "Yfilerename",
    "8767e4cde172b6e6070e3fd45325ede617b99343": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "687233f20d24c29041929dd0a99d963cec54b6df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13065. Add a new interface for retrieving FS and FC Statistics (Mingliang Liu via cmccabe)\n",
      "commitDate": "11/05/16 1:45 PM",
      "commitName": "687233f20d24c29041929dd0a99d963cec54b6df",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/05/16 7:30 PM",
      "commitNameOld": "45a753ccf79d334513c7bc8f2b81c89a4697075d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 8.76,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,53 @@\n   private FileStatus[] listStatusInternal(Path p) throws IOException {\n     String src \u003d getPathName(p);\n \n     // fetch the first batch of entries in the directory\n     DirectoryListing thisListing \u003d dfs.listPaths(\n         src, HdfsFileStatus.EMPTY_NAME);\n \n     if (thisListing \u003d\u003d null) { // the directory does not exist\n       throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n     }\n \n     HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats \u003d new FileStatus[partialListing.length];\n       for (int i \u003d 0; i \u003c partialListing.length; i++) {\n         stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n       }\n       statistics.incrementReadOps(1);\n+      storageStatistics.incrementOpCounter(OpType.LIST_STATUS);\n       return stats;\n     }\n \n     // The directory size is too big that it needs to fetch more\n     // estimate the total number of entries in the directory\n     int totalNumEntries \u003d\n         partialListing.length + thisListing.getRemainingEntries();\n     ArrayList\u003cFileStatus\u003e listing \u003d\n         new ArrayList\u003c\u003e(totalNumEntries);\n     // add the first batch of entries to the array list\n     for (HdfsFileStatus fileStatus : partialListing) {\n       listing.add(fileStatus.makeQualified(getUri(), p));\n     }\n     statistics.incrementLargeReadOps(1);\n+    storageStatistics.incrementOpCounter(OpType.LIST_STATUS);\n \n     // now fetch more entries\n     do {\n       thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n       if (thisListing \u003d\u003d null) { // the directory is deleted\n         throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n       }\n \n       partialListing \u003d thisListing.getPartialListing();\n       for (HdfsFileStatus fileStatus : partialListing) {\n         listing.add(fileStatus.makeQualified(getUri(), p));\n       }\n       statistics.incrementLargeReadOps(1);\n+      storageStatistics.incrementOpCounter(OpType.LIST_STATUS);\n     } while (thisListing.hasMore());\n \n     return listing.toArray(new FileStatus[listing.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus[] listStatusInternal(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n\n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n      }\n      statistics.incrementReadOps(1);\n      storageStatistics.incrementOpCounter(OpType.LIST_STATUS);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n        partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n        new ArrayList\u003c\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), p));\n    }\n    statistics.incrementLargeReadOps(1);\n    storageStatistics.incrementOpCounter(OpType.LIST_STATUS);\n\n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n\n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n\n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), p));\n      }\n      statistics.incrementLargeReadOps(1);\n      storageStatistics.incrementOpCounter(OpType.LIST_STATUS);\n    } while (thisListing.hasMore());\n\n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 1:39 AM",
      "commitNameOld": "8fd55202468b28422b0df888641c9b08906fe4a7",
      "commitAuthorOld": "",
      "daysBetweenCommits": 4.42,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private FileStatus[] listStatusInternal(Path p) throws IOException {\n     String src \u003d getPathName(p);\n \n     // fetch the first batch of entries in the directory\n     DirectoryListing thisListing \u003d dfs.listPaths(\n         src, HdfsFileStatus.EMPTY_NAME);\n \n     if (thisListing \u003d\u003d null) { // the directory does not exist\n       throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n     }\n-    \n+\n     HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats \u003d new FileStatus[partialListing.length];\n       for (int i \u003d 0; i \u003c partialListing.length; i++) {\n         stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n       }\n       statistics.incrementReadOps(1);\n       return stats;\n     }\n \n     // The directory size is too big that it needs to fetch more\n     // estimate the total number of entries in the directory\n     int totalNumEntries \u003d\n-      partialListing.length + thisListing.getRemainingEntries();\n+        partialListing.length + thisListing.getRemainingEntries();\n     ArrayList\u003cFileStatus\u003e listing \u003d\n-      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n+        new ArrayList\u003c\u003e(totalNumEntries);\n     // add the first batch of entries to the array list\n     for (HdfsFileStatus fileStatus : partialListing) {\n       listing.add(fileStatus.makeQualified(getUri(), p));\n     }\n     statistics.incrementLargeReadOps(1);\n- \n+\n     // now fetch more entries\n     do {\n       thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n- \n+\n       if (thisListing \u003d\u003d null) { // the directory is deleted\n         throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n       }\n- \n+\n       partialListing \u003d thisListing.getPartialListing();\n       for (HdfsFileStatus fileStatus : partialListing) {\n         listing.add(fileStatus.makeQualified(getUri(), p));\n       }\n       statistics.incrementLargeReadOps(1);\n     } while (thisListing.hasMore());\n- \n+\n     return listing.toArray(new FileStatus[listing.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus[] listStatusInternal(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n\n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n        partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n        new ArrayList\u003c\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), p));\n    }\n    statistics.incrementLargeReadOps(1);\n\n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n\n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n\n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n\n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "1c030c6e58dc83152f933323bb7743ad47f5af27": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8740. Move DistributedFileSystem to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "27/09/15 10:54 AM",
      "commitName": "1c030c6e58dc83152f933323bb7743ad47f5af27",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/09/15 1:42 AM",
      "commitNameOld": "f0f984e4e63d0dbafe93062a122ee051330db301",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private FileStatus[] listStatusInternal(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
      }
    },
    "8767e4cde172b6e6070e3fd45325ede617b99343": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 2:31 PM",
      "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/13 2:31 PM",
          "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "13/06/13 11:11 AM",
          "commitNameOld": "7e1744ccf9a9b5b035afbb182aad123a1d1d357f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 28.14,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public FileStatus[] listStatus(Path p) throws IOException {\n+  private FileStatus[] listStatusInternal(Path p) throws IOException {\n     String src \u003d getPathName(p);\n \n     // fetch the first batch of entries in the directory\n     DirectoryListing thisListing \u003d dfs.listPaths(\n         src, HdfsFileStatus.EMPTY_NAME);\n \n     if (thisListing \u003d\u003d null) { // the directory does not exist\n       throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n     }\n     \n     HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats \u003d new FileStatus[partialListing.length];\n       for (int i \u003d 0; i \u003c partialListing.length; i++) {\n-        stats[i] \u003d makeQualified(partialListing[i], p);\n+        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n       }\n       statistics.incrementReadOps(1);\n       return stats;\n     }\n \n     // The directory size is too big that it needs to fetch more\n     // estimate the total number of entries in the directory\n     int totalNumEntries \u003d\n       partialListing.length + thisListing.getRemainingEntries();\n     ArrayList\u003cFileStatus\u003e listing \u003d\n       new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n     // add the first batch of entries to the array list\n     for (HdfsFileStatus fileStatus : partialListing) {\n-      listing.add(makeQualified(fileStatus, p));\n+      listing.add(fileStatus.makeQualified(getUri(), p));\n     }\n     statistics.incrementLargeReadOps(1);\n  \n     // now fetch more entries\n     do {\n       thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n  \n       if (thisListing \u003d\u003d null) { // the directory is deleted\n         throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n       }\n  \n       partialListing \u003d thisListing.getPartialListing();\n       for (HdfsFileStatus fileStatus : partialListing) {\n-        listing.add(makeQualified(fileStatus, p));\n+        listing.add(fileStatus.makeQualified(getUri(), p));\n       }\n       statistics.incrementLargeReadOps(1);\n     } while (thisListing.hasMore());\n  \n     return listing.toArray(new FileStatus[listing.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileStatus[] listStatusInternal(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "listStatus",
            "newValue": "listStatusInternal"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/13 2:31 PM",
          "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "13/06/13 11:11 AM",
          "commitNameOld": "7e1744ccf9a9b5b035afbb182aad123a1d1d357f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 28.14,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public FileStatus[] listStatus(Path p) throws IOException {\n+  private FileStatus[] listStatusInternal(Path p) throws IOException {\n     String src \u003d getPathName(p);\n \n     // fetch the first batch of entries in the directory\n     DirectoryListing thisListing \u003d dfs.listPaths(\n         src, HdfsFileStatus.EMPTY_NAME);\n \n     if (thisListing \u003d\u003d null) { // the directory does not exist\n       throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n     }\n     \n     HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats \u003d new FileStatus[partialListing.length];\n       for (int i \u003d 0; i \u003c partialListing.length; i++) {\n-        stats[i] \u003d makeQualified(partialListing[i], p);\n+        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n       }\n       statistics.incrementReadOps(1);\n       return stats;\n     }\n \n     // The directory size is too big that it needs to fetch more\n     // estimate the total number of entries in the directory\n     int totalNumEntries \u003d\n       partialListing.length + thisListing.getRemainingEntries();\n     ArrayList\u003cFileStatus\u003e listing \u003d\n       new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n     // add the first batch of entries to the array list\n     for (HdfsFileStatus fileStatus : partialListing) {\n-      listing.add(makeQualified(fileStatus, p));\n+      listing.add(fileStatus.makeQualified(getUri(), p));\n     }\n     statistics.incrementLargeReadOps(1);\n  \n     // now fetch more entries\n     do {\n       thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n  \n       if (thisListing \u003d\u003d null) { // the directory is deleted\n         throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n       }\n  \n       partialListing \u003d thisListing.getPartialListing();\n       for (HdfsFileStatus fileStatus : partialListing) {\n-        listing.add(makeQualified(fileStatus, p));\n+        listing.add(fileStatus.makeQualified(getUri(), p));\n       }\n       statistics.incrementLargeReadOps(1);\n     } while (thisListing.hasMore());\n  \n     return listing.toArray(new FileStatus[listing.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileStatus[] listStatusInternal(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/13 2:31 PM",
          "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "13/06/13 11:11 AM",
          "commitNameOld": "7e1744ccf9a9b5b035afbb182aad123a1d1d357f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 28.14,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public FileStatus[] listStatus(Path p) throws IOException {\n+  private FileStatus[] listStatusInternal(Path p) throws IOException {\n     String src \u003d getPathName(p);\n \n     // fetch the first batch of entries in the directory\n     DirectoryListing thisListing \u003d dfs.listPaths(\n         src, HdfsFileStatus.EMPTY_NAME);\n \n     if (thisListing \u003d\u003d null) { // the directory does not exist\n       throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n     }\n     \n     HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats \u003d new FileStatus[partialListing.length];\n       for (int i \u003d 0; i \u003c partialListing.length; i++) {\n-        stats[i] \u003d makeQualified(partialListing[i], p);\n+        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n       }\n       statistics.incrementReadOps(1);\n       return stats;\n     }\n \n     // The directory size is too big that it needs to fetch more\n     // estimate the total number of entries in the directory\n     int totalNumEntries \u003d\n       partialListing.length + thisListing.getRemainingEntries();\n     ArrayList\u003cFileStatus\u003e listing \u003d\n       new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n     // add the first batch of entries to the array list\n     for (HdfsFileStatus fileStatus : partialListing) {\n-      listing.add(makeQualified(fileStatus, p));\n+      listing.add(fileStatus.makeQualified(getUri(), p));\n     }\n     statistics.incrementLargeReadOps(1);\n  \n     // now fetch more entries\n     do {\n       thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n  \n       if (thisListing \u003d\u003d null) { // the directory is deleted\n         throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n       }\n  \n       partialListing \u003d thisListing.getPartialListing();\n       for (HdfsFileStatus fileStatus : partialListing) {\n-        listing.add(makeQualified(fileStatus, p));\n+        listing.add(fileStatus.makeQualified(getUri(), p));\n       }\n       statistics.incrementLargeReadOps(1);\n     } while (thisListing.hasMore());\n  \n     return listing.toArray(new FileStatus[listing.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileStatus[] listStatusInternal(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d makeQualified(partialListing[i], p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(makeQualified(fileStatus, p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(makeQualified(fileStatus, p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d makeQualified(partialListing[i], p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(makeQualified(fileStatus, p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(makeQualified(fileStatus, p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,50 @@\n+  public FileStatus[] listStatus(Path p) throws IOException {\n+    String src \u003d getPathName(p);\n+\n+    // fetch the first batch of entries in the directory\n+    DirectoryListing thisListing \u003d dfs.listPaths(\n+        src, HdfsFileStatus.EMPTY_NAME);\n+\n+    if (thisListing \u003d\u003d null) { // the directory does not exist\n+      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n+    }\n+    \n+    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n+    if (!thisListing.hasMore()) { // got all entries of the directory\n+      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n+      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n+        stats[i] \u003d makeQualified(partialListing[i], p);\n+      }\n+      statistics.incrementReadOps(1);\n+      return stats;\n+    }\n+\n+    // The directory size is too big that it needs to fetch more\n+    // estimate the total number of entries in the directory\n+    int totalNumEntries \u003d\n+      partialListing.length + thisListing.getRemainingEntries();\n+    ArrayList\u003cFileStatus\u003e listing \u003d\n+      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n+    // add the first batch of entries to the array list\n+    for (HdfsFileStatus fileStatus : partialListing) {\n+      listing.add(makeQualified(fileStatus, p));\n+    }\n+    statistics.incrementLargeReadOps(1);\n+ \n+    // now fetch more entries\n+    do {\n+      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n+ \n+      if (thisListing \u003d\u003d null) { // the directory is deleted\n+        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n+      }\n+ \n+      partialListing \u003d thisListing.getPartialListing();\n+      for (HdfsFileStatus fileStatus : partialListing) {\n+        listing.add(makeQualified(fileStatus, p));\n+      }\n+      statistics.incrementLargeReadOps(1);\n+    } while (thisListing.hasMore());\n+ \n+    return listing.toArray(new FileStatus[listing.size()]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path p) throws IOException {\n    String src \u003d getPathName(p);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d makeQualified(partialListing[i], p);\n      }\n      statistics.incrementReadOps(1);\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(makeQualified(fileStatus, p));\n    }\n    statistics.incrementLargeReadOps(1);\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) { // the directory is deleted\n        throw new FileNotFoundException(\"File \" + p + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(makeQualified(fileStatus, p));\n      }\n      statistics.incrementLargeReadOps(1);\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}