{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetricsSystemImpl.java",
  "functionName": "configureSinks",
  "functionId": "configureSinks",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
  "functionStartLine": 488,
  "functionEndLine": 514,
  "numCommitsSeen": 32,
  "timeTaken": 1558,
  "changeHistory": [
    "a4405674919d14be89bc4da22db2f417b5ae6ac3",
    "70e464500b702bb104eb6f35cf071bdb4342abac",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de"
  ],
  "changeHistoryShort": {
    "a4405674919d14be89bc4da22db2f417b5ae6ac3": "Ybodychange",
    "70e464500b702bb104eb6f35cf071bdb4342abac": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a4405674919d14be89bc4da22db2f417b5ae6ac3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9067. o.a.h.hdfs.server.datanode.fsdataset.impl.TestLazyWriter is failing in trunk (Contributed by Surendra Singh Lilhore)\n",
      "commitDate": "15/09/15 5:00 AM",
      "commitName": "a4405674919d14be89bc4da22db2f417b5ae6ac3",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "11/09/15 3:20 PM",
      "commitNameOld": "9538af0e1a7428b8787afa8d5e0b82c1e04adca7",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 3.57,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   private synchronized void configureSinks() {\n     sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n-    int confPeriod \u003d 0;\n+    long confPeriodMillis \u003d 0;\n     for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n       MetricsConfig conf \u003d entry.getValue();\n       int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n-      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n-                                   : ArithmeticUtils.gcd(confPeriod, sinkPeriod);\n+      // Support configuring periodMillis for testing.\n+      long sinkPeriodMillis \u003d\n+          conf.getLong(PERIOD_MILLIS_KEY, sinkPeriod * 1000);\n+      confPeriodMillis \u003d confPeriodMillis \u003d\u003d 0 ? sinkPeriodMillis\n+          : ArithmeticUtils.gcd(confPeriodMillis, sinkPeriodMillis);\n       String clsName \u003d conf.getClassName(\"\");\n       if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n       String sinkName \u003d entry.getKey();\n       try {\n         MetricsSinkAdapter sa \u003d newSink(sinkName,\n             conf.getString(DESC_KEY, sinkName), conf);\n         sa.start();\n         sinks.put(sinkName, sa);\n       } catch (Exception e) {\n         LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n       }\n     }\n-    period \u003d confPeriod \u003e 0 ? confPeriod\n-                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n+    long periodSec \u003d config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n+    period \u003d confPeriodMillis \u003e 0 ? confPeriodMillis\n+        : config.getLong(PERIOD_MILLIS_KEY, periodSec * 1000);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void configureSinks() {\n    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n    long confPeriodMillis \u003d 0;\n    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n      MetricsConfig conf \u003d entry.getValue();\n      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n      // Support configuring periodMillis for testing.\n      long sinkPeriodMillis \u003d\n          conf.getLong(PERIOD_MILLIS_KEY, sinkPeriod * 1000);\n      confPeriodMillis \u003d confPeriodMillis \u003d\u003d 0 ? sinkPeriodMillis\n          : ArithmeticUtils.gcd(confPeriodMillis, sinkPeriodMillis);\n      String clsName \u003d conf.getClassName(\"\");\n      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n      String sinkName \u003d entry.getKey();\n      try {\n        MetricsSinkAdapter sa \u003d newSink(sinkName,\n            conf.getString(DESC_KEY, sinkName), conf);\n        sa.start();\n        sinks.put(sinkName, sa);\n      } catch (Exception e) {\n        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n      }\n    }\n    long periodSec \u003d config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n    period \u003d confPeriodMillis \u003e 0 ? confPeriodMillis\n        : config.getLong(PERIOD_MILLIS_KEY, periodSec * 1000);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {}
    },
    "70e464500b702bb104eb6f35cf071bdb4342abac": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9594 commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/13 11:36 AM",
      "commitName": "70e464500b702bb104eb6f35cf071bdb4342abac",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/08/13 3:54 PM",
      "commitNameOld": "e90afcc971a8798d70dafed7e39bac12c330a48a",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 96.86,
      "commitsBetweenForRepo": 599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private synchronized void configureSinks() {\n     sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n     int confPeriod \u003d 0;\n     for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n       MetricsConfig conf \u003d entry.getValue();\n       int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n       confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n-                                   : MathUtils.gcd(confPeriod, sinkPeriod);\n+                                   : ArithmeticUtils.gcd(confPeriod, sinkPeriod);\n       String clsName \u003d conf.getClassName(\"\");\n       if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n       String sinkName \u003d entry.getKey();\n       try {\n         MetricsSinkAdapter sa \u003d newSink(sinkName,\n             conf.getString(DESC_KEY, sinkName), conf);\n         sa.start();\n         sinks.put(sinkName, sa);\n       } catch (Exception e) {\n         LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n       }\n     }\n     period \u003d confPeriod \u003e 0 ? confPeriod\n                             : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void configureSinks() {\n    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n    int confPeriod \u003d 0;\n    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n      MetricsConfig conf \u003d entry.getValue();\n      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n                                   : ArithmeticUtils.gcd(confPeriod, sinkPeriod);\n      String clsName \u003d conf.getClassName(\"\");\n      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n      String sinkName \u003d entry.getKey();\n      try {\n        MetricsSinkAdapter sa \u003d newSink(sinkName,\n            conf.getString(DESC_KEY, sinkName), conf);\n        sa.start();\n        sinks.put(sinkName, sa);\n      } catch (Exception e) {\n        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n      }\n    }\n    period \u003d confPeriod \u003e 0 ? confPeriod\n                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void configureSinks() {\n    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n    int confPeriod \u003d 0;\n    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n      MetricsConfig conf \u003d entry.getValue();\n      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n                                   : MathUtils.gcd(confPeriod, sinkPeriod);\n      String clsName \u003d conf.getClassName(\"\");\n      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n      String sinkName \u003d entry.getKey();\n      try {\n        MetricsSinkAdapter sa \u003d newSink(sinkName,\n            conf.getString(DESC_KEY, sinkName), conf);\n        sa.start();\n        sinks.put(sinkName, sa);\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n      }\n    }\n    period \u003d confPeriod \u003e 0 ? confPeriod\n                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void configureSinks() {\n    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n    int confPeriod \u003d 0;\n    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n      MetricsConfig conf \u003d entry.getValue();\n      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n                                   : MathUtils.gcd(confPeriod, sinkPeriod);\n      String clsName \u003d conf.getClassName(\"\");\n      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n      String sinkName \u003d entry.getKey();\n      try {\n        MetricsSinkAdapter sa \u003d newSink(sinkName,\n            conf.getString(DESC_KEY, sinkName), conf);\n        sa.start();\n        sinks.put(sinkName, sa);\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n      }\n    }\n    period \u003d confPeriod \u003e 0 ? confPeriod\n                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void configureSinks() {\n    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n    int confPeriod \u003d 0;\n    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n      MetricsConfig conf \u003d entry.getValue();\n      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n                                   : MathUtils.gcd(confPeriod, sinkPeriod);\n      String clsName \u003d conf.getClassName(\"\");\n      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n      String sinkName \u003d entry.getKey();\n      try {\n        MetricsSinkAdapter sa \u003d newSink(sinkName,\n            conf.getString(DESC_KEY, sinkName), conf);\n        sa.start();\n        sinks.put(sinkName, sa);\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n      }\n    }\n    period \u003d confPeriod \u003e 0 ? confPeriod\n                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
      }
    },
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6919. New metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 12:28 AM",
      "commitName": "827401a9b1d85fe1f443d21ebe9d917ba23153de",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,24 @@\n+  private synchronized void configureSinks() {\n+    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n+    int confPeriod \u003d 0;\n+    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n+      MetricsConfig conf \u003d entry.getValue();\n+      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n+      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n+                                   : MathUtils.gcd(confPeriod, sinkPeriod);\n+      String clsName \u003d conf.getClassName(\"\");\n+      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n+      String sinkName \u003d entry.getKey();\n+      try {\n+        MetricsSinkAdapter sa \u003d newSink(sinkName,\n+            conf.getString(DESC_KEY, sinkName), conf);\n+        sa.start();\n+        sinks.put(sinkName, sa);\n+      }\n+      catch (Exception e) {\n+        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n+      }\n+    }\n+    period \u003d confPeriod \u003e 0 ? confPeriod\n+                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void configureSinks() {\n    sinkConfigs \u003d config.getInstanceConfigs(SINK_KEY);\n    int confPeriod \u003d 0;\n    for (Entry\u003cString, MetricsConfig\u003e entry : sinkConfigs.entrySet()) {\n      MetricsConfig conf \u003d entry.getValue();\n      int sinkPeriod \u003d conf.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n      confPeriod \u003d confPeriod \u003d\u003d 0 ? sinkPeriod\n                                   : MathUtils.gcd(confPeriod, sinkPeriod);\n      String clsName \u003d conf.getClassName(\"\");\n      if (clsName \u003d\u003d null) continue;  // sink can be registered later on\n      String sinkName \u003d entry.getKey();\n      try {\n        MetricsSinkAdapter sa \u003d newSink(sinkName,\n            conf.getString(DESC_KEY, sinkName), conf);\n        sa.start();\n        sinks.put(sinkName, sa);\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error creating sink \u0027\"+ sinkName +\"\u0027\", e);\n      }\n    }\n    period \u003d confPeriod \u003e 0 ? confPeriod\n                            : config.getInt(PERIOD_KEY, PERIOD_DEFAULT);\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
    }
  }
}