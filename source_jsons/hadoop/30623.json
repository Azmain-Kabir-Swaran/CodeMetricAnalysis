{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "discardOldEntities",
  "functionId": "discardOldEntities___timestamp-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 1507,
  "functionEndLine": 1553,
  "numCommitsSeen": 24,
  "timeTaken": 3415,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "b3ea4aebff42131642af0393748dc751cb3fc31e"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "b3ea4aebff42131642af0393748dc751cb3fc31e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/08/17 2:56 AM",
      "commitNameOld": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 577.49,
      "commitsBetweenForRepo": 4988,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   void discardOldEntities(long timestamp)\n       throws IOException, InterruptedException {\n     byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n     long totalCount \u003d 0;\n     long t1 \u003d System.currentTimeMillis();\n     try {\n       List\u003cString\u003e entityTypes \u003d getEntityTypes();\n       for (String entityType : entityTypes) {\n         LeveldbIterator iterator \u003d null;\n         LeveldbIterator pfIterator \u003d null;\n         long typeCount \u003d 0;\n+        deleteLock.writeLock().lock();\n         try {\n-          deleteLock.writeLock().lock();\n           iterator \u003d getDbIterator(false);\n           pfIterator \u003d getDbIterator(false);\n \n           if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n             throw new InterruptedException();\n           }\n           boolean seeked \u003d false;\n           while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n               pfIterator, seeked)) {\n             typeCount++;\n             totalCount++;\n             seeked \u003d true;\n             if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n               throw new InterruptedException();\n             }\n           }\n         } catch (IOException e) {\n           LOG.error(\"Got IOException while deleting entities for type \" +\n               entityType + \", continuing to next type\", e);\n         } finally {\n           IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n           deleteLock.writeLock().unlock();\n           if (typeCount \u003e 0) {\n             LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                 entityType);\n           }\n         }\n       }\n     } finally {\n       long t2 \u003d System.currentTimeMillis();\n       LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n           timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        LeveldbIterator iterator \u003d null;\n        LeveldbIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        deleteLock.writeLock().lock();\n        try {\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   void discardOldEntities(long timestamp)\n       throws IOException, InterruptedException {\n     byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n     long totalCount \u003d 0;\n     long t1 \u003d System.currentTimeMillis();\n     try {\n       List\u003cString\u003e entityTypes \u003d getEntityTypes();\n       for (String entityType : entityTypes) {\n         LeveldbIterator iterator \u003d null;\n         LeveldbIterator pfIterator \u003d null;\n         long typeCount \u003d 0;\n         try {\n           deleteLock.writeLock().lock();\n           iterator \u003d getDbIterator(false);\n           pfIterator \u003d getDbIterator(false);\n \n           if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n             throw new InterruptedException();\n           }\n           boolean seeked \u003d false;\n           while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n               pfIterator, seeked)) {\n             typeCount++;\n             totalCount++;\n             seeked \u003d true;\n             if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n               throw new InterruptedException();\n             }\n           }\n         } catch (IOException e) {\n           LOG.error(\"Got IOException while deleting entities for type \" +\n               entityType + \", continuing to next type\", e);\n         } finally {\n-          IOUtils.cleanup(LOG, iterator, pfIterator);\n+          IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n           deleteLock.writeLock().unlock();\n           if (typeCount \u003e 0) {\n             LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                 entityType);\n           }\n         }\n       }\n     } finally {\n       long t2 \u003d System.currentTimeMillis();\n       LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n           timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        LeveldbIterator iterator \u003d null;\n        LeveldbIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        try {\n          deleteLock.writeLock().lock();\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   void discardOldEntities(long timestamp)\n       throws IOException, InterruptedException {\n     byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n     long totalCount \u003d 0;\n     long t1 \u003d System.currentTimeMillis();\n     try {\n       List\u003cString\u003e entityTypes \u003d getEntityTypes();\n       for (String entityType : entityTypes) {\n         LeveldbIterator iterator \u003d null;\n         LeveldbIterator pfIterator \u003d null;\n         long typeCount \u003d 0;\n         try {\n           deleteLock.writeLock().lock();\n           iterator \u003d getDbIterator(false);\n           pfIterator \u003d getDbIterator(false);\n \n           if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n             throw new InterruptedException();\n           }\n           boolean seeked \u003d false;\n           while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n               pfIterator, seeked)) {\n             typeCount++;\n             totalCount++;\n             seeked \u003d true;\n             if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n               throw new InterruptedException();\n             }\n           }\n         } catch (IOException e) {\n           LOG.error(\"Got IOException while deleting entities for type \" +\n               entityType + \", continuing to next type\", e);\n         } finally {\n-          IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n+          IOUtils.cleanup(LOG, iterator, pfIterator);\n           deleteLock.writeLock().unlock();\n           if (typeCount \u003e 0) {\n             LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                 entityType);\n           }\n         }\n       }\n     } finally {\n       long t2 \u003d System.currentTimeMillis();\n       LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n           timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        LeveldbIterator iterator \u003d null;\n        LeveldbIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        try {\n          deleteLock.writeLock().lock();\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanup(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/01/17 2:24 AM",
      "commitNameOld": "4c431a694059e40e78365b02a1497a6c7e479a70",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 202.65,
      "commitsBetweenForRepo": 1063,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   void discardOldEntities(long timestamp)\n       throws IOException, InterruptedException {\n     byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n     long totalCount \u003d 0;\n     long t1 \u003d System.currentTimeMillis();\n     try {\n       List\u003cString\u003e entityTypes \u003d getEntityTypes();\n       for (String entityType : entityTypes) {\n         LeveldbIterator iterator \u003d null;\n         LeveldbIterator pfIterator \u003d null;\n         long typeCount \u003d 0;\n         try {\n           deleteLock.writeLock().lock();\n           iterator \u003d getDbIterator(false);\n           pfIterator \u003d getDbIterator(false);\n \n           if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n             throw new InterruptedException();\n           }\n           boolean seeked \u003d false;\n           while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n               pfIterator, seeked)) {\n             typeCount++;\n             totalCount++;\n             seeked \u003d true;\n             if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n               throw new InterruptedException();\n             }\n           }\n         } catch (IOException e) {\n           LOG.error(\"Got IOException while deleting entities for type \" +\n               entityType + \", continuing to next type\", e);\n         } finally {\n-          IOUtils.cleanup(LOG, iterator, pfIterator);\n+          IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n           deleteLock.writeLock().unlock();\n           if (typeCount \u003e 0) {\n             LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                 entityType);\n           }\n         }\n       }\n     } finally {\n       long t2 \u003d System.currentTimeMillis();\n       LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n           timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        LeveldbIterator iterator \u003d null;\n        LeveldbIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        try {\n          deleteLock.writeLock().lock();\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanupWithLogger(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1984. LeveldbTimelineStore does not handle db exceptions properly. Contributed by Varun Saxena\n",
      "commitDate": "24/11/14 2:36 PM",
      "commitName": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   void discardOldEntities(long timestamp)\n       throws IOException, InterruptedException {\n     byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n     long totalCount \u003d 0;\n     long t1 \u003d System.currentTimeMillis();\n     try {\n       List\u003cString\u003e entityTypes \u003d getEntityTypes();\n       for (String entityType : entityTypes) {\n-        DBIterator iterator \u003d null;\n-        DBIterator pfIterator \u003d null;\n+        LeveldbIterator iterator \u003d null;\n+        LeveldbIterator pfIterator \u003d null;\n         long typeCount \u003d 0;\n         try {\n           deleteLock.writeLock().lock();\n           iterator \u003d getDbIterator(false);\n           pfIterator \u003d getDbIterator(false);\n \n           if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n             throw new InterruptedException();\n           }\n           boolean seeked \u003d false;\n           while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n               pfIterator, seeked)) {\n             typeCount++;\n             totalCount++;\n             seeked \u003d true;\n             if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n               throw new InterruptedException();\n             }\n           }\n         } catch (IOException e) {\n           LOG.error(\"Got IOException while deleting entities for type \" +\n               entityType + \", continuing to next type\", e);\n         } finally {\n           IOUtils.cleanup(LOG, iterator, pfIterator);\n           deleteLock.writeLock().unlock();\n           if (typeCount \u003e 0) {\n             LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                 entityType);\n           }\n         }\n       }\n     } finally {\n       long t2 \u003d System.currentTimeMillis();\n       LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n           timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        LeveldbIterator iterator \u003d null;\n        LeveldbIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        try {\n          deleteLock.writeLock().lock();\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanup(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        DBIterator iterator \u003d null;\n        DBIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        try {\n          deleteLock.writeLock().lock();\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanup(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
      }
    },
    "b3ea4aebff42131642af0393748dc751cb3fc31e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1717. Enabled periodically discarding old data in LeveldbTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 1:35 PM",
      "commitName": "b3ea4aebff42131642af0393748dc751cb3fc31e",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,47 @@\n+  void discardOldEntities(long timestamp)\n+      throws IOException, InterruptedException {\n+    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n+    long totalCount \u003d 0;\n+    long t1 \u003d System.currentTimeMillis();\n+    try {\n+      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n+      for (String entityType : entityTypes) {\n+        DBIterator iterator \u003d null;\n+        DBIterator pfIterator \u003d null;\n+        long typeCount \u003d 0;\n+        try {\n+          deleteLock.writeLock().lock();\n+          iterator \u003d getDbIterator(false);\n+          pfIterator \u003d getDbIterator(false);\n+\n+          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n+            throw new InterruptedException();\n+          }\n+          boolean seeked \u003d false;\n+          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n+              pfIterator, seeked)) {\n+            typeCount++;\n+            totalCount++;\n+            seeked \u003d true;\n+            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n+              throw new InterruptedException();\n+            }\n+          }\n+        } catch (IOException e) {\n+          LOG.error(\"Got IOException while deleting entities for type \" +\n+              entityType + \", continuing to next type\", e);\n+        } finally {\n+          IOUtils.cleanup(LOG, iterator, pfIterator);\n+          deleteLock.writeLock().unlock();\n+          if (typeCount \u003e 0) {\n+            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n+                entityType);\n+          }\n+        }\n+      }\n+    } finally {\n+      long t2 \u003d System.currentTimeMillis();\n+      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n+          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void discardOldEntities(long timestamp)\n      throws IOException, InterruptedException {\n    byte[] reverseTimestamp \u003d writeReverseOrderedLong(timestamp);\n    long totalCount \u003d 0;\n    long t1 \u003d System.currentTimeMillis();\n    try {\n      List\u003cString\u003e entityTypes \u003d getEntityTypes();\n      for (String entityType : entityTypes) {\n        DBIterator iterator \u003d null;\n        DBIterator pfIterator \u003d null;\n        long typeCount \u003d 0;\n        try {\n          deleteLock.writeLock().lock();\n          iterator \u003d getDbIterator(false);\n          pfIterator \u003d getDbIterator(false);\n\n          if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n            throw new InterruptedException();\n          }\n          boolean seeked \u003d false;\n          while (deleteNextEntity(entityType, reverseTimestamp, iterator,\n              pfIterator, seeked)) {\n            typeCount++;\n            totalCount++;\n            seeked \u003d true;\n            if (deletionThread !\u003d null \u0026\u0026 deletionThread.isInterrupted()) {\n              throw new InterruptedException();\n            }\n          }\n        } catch (IOException e) {\n          LOG.error(\"Got IOException while deleting entities for type \" +\n              entityType + \", continuing to next type\", e);\n        } finally {\n          IOUtils.cleanup(LOG, iterator, pfIterator);\n          deleteLock.writeLock().unlock();\n          if (typeCount \u003e 0) {\n            LOG.info(\"Deleted \" + typeCount + \" entities of type \" +\n                entityType);\n          }\n        }\n      }\n    } finally {\n      long t2 \u003d System.currentTimeMillis();\n      LOG.info(\"Discarded \" + totalCount + \" entities for timestamp \" +\n          timestamp + \" and earlier in \" + (t2 - t1) / 1000.0 + \" seconds\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java"
    }
  }
}