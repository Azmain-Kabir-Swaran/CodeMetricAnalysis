{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnClientImpl.java",
  "functionName": "getContainers",
  "functionId": "getContainers___applicationAttemptId-ApplicationAttemptId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
  "functionStartLine": 850,
  "functionEndLine": 921,
  "numCommitsSeen": 70,
  "timeTaken": 3450,
  "changeHistory": [
    "573b1587918c4c0efdb7e9fff6f5be12bf31b619",
    "ee3355be3cd1cd956296a1b79b264177ff139ce6",
    "52575ff2240ea0b7cea818ef34503576c0ecf9f7",
    "6af044bb75fe3ddf184841483cce5e222ad1853a",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "573b1587918c4c0efdb7e9fff6f5be12bf31b619": "Ybodychange",
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": "Ybodychange",
    "52575ff2240ea0b7cea818ef34503576c0ecf9f7": "Ybodychange",
    "6af044bb75fe3ddf184841483cce5e222ad1853a": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "573b1587918c4c0efdb7e9fff6f5be12bf31b619": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8567. Fetching yarn logs fails for long running application if it is not present in timeline store. Contributed by Tarun Parimi.\n",
      "commitDate": "04/01/19 12:31 AM",
      "commitName": "573b1587918c4c0efdb7e9fff6f5be12bf31b619",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "19/12/18 4:45 PM",
      "commitNameOld": "2e544dc921afeaa02e731cb273ac7776eec6e49d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 15.32,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   public List\u003cContainerReport\u003e getContainers(\n       ApplicationAttemptId applicationAttemptId) throws YarnException,\n       IOException {\n     List\u003cContainerReport\u003e containersForAttempt \u003d\n         new ArrayList\u003cContainerReport\u003e();\n     boolean appNotFoundInRM \u003d false;\n     try {\n       GetContainersRequest request \u003d\n           Records.newRecord(GetContainersRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       GetContainersResponse response \u003d rmClient.getContainers(request);\n       containersForAttempt.addAll(response.getContainerList());\n     } catch (YarnException e) {\n       // Even if history-service is enabled, treat all exceptions still the same\n       // except the following\n       if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n         throw e;\n       }\n       if (!historyServiceEnabled \u0026\u0026 !timelineV2ServiceEnabled) {\n         // if both history server and ATSv2 are not enabled throw exception.\n         throw e;\n       }\n       appNotFoundInRM \u003d true;\n     }\n     // Check with AHS even if found in RM because to capture info of finished\n     // containers also\n     List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n     try {\n       containersListFromAHS \u003d\n           getContainerReportFromHistory(applicationAttemptId);\n-    } catch (IOException e) {\n+    } catch (IOException | YarnException e) {\n       if (appNotFoundInRM) {\n         throw e;\n       }\n     }\n     if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n       // remove duplicates\n       Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n           new HashSet\u003cContainerId\u003e();\n       Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n       while (tmpItr.hasNext()) {\n         containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n       }\n \n       Iterator\u003cContainerReport\u003e rmContainers \u003d\n           containersForAttempt.iterator();\n       while (rmContainers.hasNext()) {\n         ContainerReport tmp \u003d rmContainers.next();\n         containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n         // Remove containers from AHS as container from RM will have latest\n         // information\n       }\n \n       if (containerIdsToBeKeptFromAHS.size() \u003e 0\n           \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n               .size()) {\n         Iterator\u003cContainerReport\u003e containersFromHS \u003d\n             containersListFromAHS.iterator();\n         while (containersFromHS.hasNext()) {\n           ContainerReport containerReport \u003d containersFromHS.next();\n           if (containerIdsToBeKeptFromAHS.contains(containerReport\n               .getContainerId())) {\n             containersForAttempt.add(containerReport);\n           }\n         }\n       } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n           .size()) {\n         containersForAttempt.addAll(containersListFromAHS);\n       }\n     }\n     return containersForAttempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerReport\u003e getContainers(\n      ApplicationAttemptId applicationAttemptId) throws YarnException,\n      IOException {\n    List\u003cContainerReport\u003e containersForAttempt \u003d\n        new ArrayList\u003cContainerReport\u003e();\n    boolean appNotFoundInRM \u003d false;\n    try {\n      GetContainersRequest request \u003d\n          Records.newRecord(GetContainersRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      GetContainersResponse response \u003d rmClient.getContainers(request);\n      containersForAttempt.addAll(response.getContainerList());\n    } catch (YarnException e) {\n      // Even if history-service is enabled, treat all exceptions still the same\n      // except the following\n      if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n        throw e;\n      }\n      if (!historyServiceEnabled \u0026\u0026 !timelineV2ServiceEnabled) {\n        // if both history server and ATSv2 are not enabled throw exception.\n        throw e;\n      }\n      appNotFoundInRM \u003d true;\n    }\n    // Check with AHS even if found in RM because to capture info of finished\n    // containers also\n    List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n    try {\n      containersListFromAHS \u003d\n          getContainerReportFromHistory(applicationAttemptId);\n    } catch (IOException | YarnException e) {\n      if (appNotFoundInRM) {\n        throw e;\n      }\n    }\n    if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n      // remove duplicates\n      Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n          new HashSet\u003cContainerId\u003e();\n      Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n      while (tmpItr.hasNext()) {\n        containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n      }\n\n      Iterator\u003cContainerReport\u003e rmContainers \u003d\n          containersForAttempt.iterator();\n      while (rmContainers.hasNext()) {\n        ContainerReport tmp \u003d rmContainers.next();\n        containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n        // Remove containers from AHS as container from RM will have latest\n        // information\n      }\n\n      if (containerIdsToBeKeptFromAHS.size() \u003e 0\n          \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n              .size()) {\n        Iterator\u003cContainerReport\u003e containersFromHS \u003d\n            containersListFromAHS.iterator();\n        while (containersFromHS.hasNext()) {\n          ContainerReport containerReport \u003d containersFromHS.next();\n          if (containerIdsToBeKeptFromAHS.contains(containerReport\n              .getContainerId())) {\n            containersForAttempt.add(containerReport);\n          }\n        }\n      } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n          .size()) {\n        containersForAttempt.addAll(containersListFromAHS);\n      }\n    }\n    return containersForAttempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8303. YarnClient should contact TimelineReader for application/attempt/container report.\n",
      "commitDate": "16/11/18 4:28 AM",
      "commitName": "ee3355be3cd1cd956296a1b79b264177ff139ce6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 65.08,
      "commitsBetweenForRepo": 633,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,72 @@\n   public List\u003cContainerReport\u003e getContainers(\n       ApplicationAttemptId applicationAttemptId) throws YarnException,\n       IOException {\n     List\u003cContainerReport\u003e containersForAttempt \u003d\n         new ArrayList\u003cContainerReport\u003e();\n     boolean appNotFoundInRM \u003d false;\n     try {\n       GetContainersRequest request \u003d\n           Records.newRecord(GetContainersRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       GetContainersResponse response \u003d rmClient.getContainers(request);\n       containersForAttempt.addAll(response.getContainerList());\n     } catch (YarnException e) {\n-      if (e.getClass() !\u003d ApplicationNotFoundException.class\n-          || !historyServiceEnabled) {\n-        // If Application is not in RM and history service is enabled then we\n-        // need to check with history service else throw exception.\n+      // Even if history-service is enabled, treat all exceptions still the same\n+      // except the following\n+      if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n+        throw e;\n+      }\n+      if (!historyServiceEnabled \u0026\u0026 !timelineV2ServiceEnabled) {\n+        // if both history server and ATSv2 are not enabled throw exception.\n         throw e;\n       }\n       appNotFoundInRM \u003d true;\n     }\n-\n-    if (historyServiceEnabled) {\n-      // Check with AHS even if found in RM because to capture info of finished\n-      // containers also\n-      List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n-      try {\n-        containersListFromAHS \u003d\n-            historyClient.getContainers(applicationAttemptId);\n-      } catch (IOException e) {\n-        // History service access might be enabled but system metrics publisher\n-        // is disabled hence app not found exception is possible\n-        if (appNotFoundInRM) {\n-          // app not found in bothM and RM then propagate the exception.\n-          throw e;\n-        }\n+    // Check with AHS even if found in RM because to capture info of finished\n+    // containers also\n+    List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n+    try {\n+      containersListFromAHS \u003d\n+          getContainerReportFromHistory(applicationAttemptId);\n+    } catch (IOException e) {\n+      if (appNotFoundInRM) {\n+        throw e;\n+      }\n+    }\n+    if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n+      // remove duplicates\n+      Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n+          new HashSet\u003cContainerId\u003e();\n+      Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n+      while (tmpItr.hasNext()) {\n+        containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n       }\n \n-      if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n-        // remove duplicates\n+      Iterator\u003cContainerReport\u003e rmContainers \u003d\n+          containersForAttempt.iterator();\n+      while (rmContainers.hasNext()) {\n+        ContainerReport tmp \u003d rmContainers.next();\n+        containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n+        // Remove containers from AHS as container from RM will have latest\n+        // information\n+      }\n \n-        Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n-            new HashSet\u003cContainerId\u003e();\n-        Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n-        while (tmpItr.hasNext()) {\n-          containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n-        }\n-\n-        Iterator\u003cContainerReport\u003e rmContainers \u003d\n-            containersForAttempt.iterator();\n-        while (rmContainers.hasNext()) {\n-          ContainerReport tmp \u003d rmContainers.next();\n-          containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n-          // Remove containers from AHS as container from RM will have latest\n-          // information\n-        }\n-\n-        if (containerIdsToBeKeptFromAHS.size() \u003e 0\n-            \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n-                .size()) {\n-          Iterator\u003cContainerReport\u003e containersFromHS \u003d\n-              containersListFromAHS.iterator();\n-          while (containersFromHS.hasNext()) {\n-            ContainerReport containerReport \u003d containersFromHS.next();\n-            if (containerIdsToBeKeptFromAHS.contains(containerReport\n-                .getContainerId())) {\n-              containersForAttempt.add(containerReport);\n-            }\n+      if (containerIdsToBeKeptFromAHS.size() \u003e 0\n+          \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n+              .size()) {\n+        Iterator\u003cContainerReport\u003e containersFromHS \u003d\n+            containersListFromAHS.iterator();\n+        while (containersFromHS.hasNext()) {\n+          ContainerReport containerReport \u003d containersFromHS.next();\n+          if (containerIdsToBeKeptFromAHS.contains(containerReport\n+              .getContainerId())) {\n+            containersForAttempt.add(containerReport);\n           }\n-        } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n-            .size()) {\n-          containersForAttempt.addAll(containersListFromAHS);\n         }\n+      } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n+          .size()) {\n+        containersForAttempt.addAll(containersListFromAHS);\n       }\n     }\n     return containersForAttempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerReport\u003e getContainers(\n      ApplicationAttemptId applicationAttemptId) throws YarnException,\n      IOException {\n    List\u003cContainerReport\u003e containersForAttempt \u003d\n        new ArrayList\u003cContainerReport\u003e();\n    boolean appNotFoundInRM \u003d false;\n    try {\n      GetContainersRequest request \u003d\n          Records.newRecord(GetContainersRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      GetContainersResponse response \u003d rmClient.getContainers(request);\n      containersForAttempt.addAll(response.getContainerList());\n    } catch (YarnException e) {\n      // Even if history-service is enabled, treat all exceptions still the same\n      // except the following\n      if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n        throw e;\n      }\n      if (!historyServiceEnabled \u0026\u0026 !timelineV2ServiceEnabled) {\n        // if both history server and ATSv2 are not enabled throw exception.\n        throw e;\n      }\n      appNotFoundInRM \u003d true;\n    }\n    // Check with AHS even if found in RM because to capture info of finished\n    // containers also\n    List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n    try {\n      containersListFromAHS \u003d\n          getContainerReportFromHistory(applicationAttemptId);\n    } catch (IOException e) {\n      if (appNotFoundInRM) {\n        throw e;\n      }\n    }\n    if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n      // remove duplicates\n      Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n          new HashSet\u003cContainerId\u003e();\n      Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n      while (tmpItr.hasNext()) {\n        containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n      }\n\n      Iterator\u003cContainerReport\u003e rmContainers \u003d\n          containersForAttempt.iterator();\n      while (rmContainers.hasNext()) {\n        ContainerReport tmp \u003d rmContainers.next();\n        containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n        // Remove containers from AHS as container from RM will have latest\n        // information\n      }\n\n      if (containerIdsToBeKeptFromAHS.size() \u003e 0\n          \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n              .size()) {\n        Iterator\u003cContainerReport\u003e containersFromHS \u003d\n            containersListFromAHS.iterator();\n        while (containersFromHS.hasNext()) {\n          ContainerReport containerReport \u003d containersFromHS.next();\n          if (containerIdsToBeKeptFromAHS.contains(containerReport\n              .getContainerId())) {\n            containersForAttempt.add(containerReport);\n          }\n        }\n      } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n          .size()) {\n        containersForAttempt.addAll(containersListFromAHS);\n      }\n    }\n    return containersForAttempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "52575ff2240ea0b7cea818ef34503576c0ecf9f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2808. Made YARN CLI list attempt’s finished containers of a running application. Contributed by Naganarasimha G R.\n",
      "commitDate": "02/02/15 12:03 PM",
      "commitName": "52575ff2240ea0b7cea818ef34503576c0ecf9f7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "03/11/14 12:49 PM",
      "commitNameOld": "71fbb474f531f60c5d908cf724f18f90dfd5fa9f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 90.97,
      "commitsBetweenForRepo": 615,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,77 @@\n   public List\u003cContainerReport\u003e getContainers(\n       ApplicationAttemptId applicationAttemptId) throws YarnException,\n       IOException {\n+    List\u003cContainerReport\u003e containersForAttempt \u003d\n+        new ArrayList\u003cContainerReport\u003e();\n+    boolean appNotFoundInRM \u003d false;\n     try {\n-      GetContainersRequest request \u003d Records\n-          .newRecord(GetContainersRequest.class);\n+      GetContainersRequest request \u003d\n+          Records.newRecord(GetContainersRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       GetContainersResponse response \u003d rmClient.getContainers(request);\n-      return response.getContainerList();\n+      containersForAttempt.addAll(response.getContainerList());\n     } catch (YarnException e) {\n-      if (!historyServiceEnabled) {\n-        // Just throw it as usual if historyService is not enabled.\n+      if (e.getClass() !\u003d ApplicationNotFoundException.class\n+          || !historyServiceEnabled) {\n+        // If Application is not in RM and history service is enabled then we\n+        // need to check with history service else throw exception.\n         throw e;\n       }\n-      // Even if history-service is enabled, treat all exceptions still the same\n-      // except the following\n-      if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n-        throw e;\n-      }\n-      return historyClient.getContainers(applicationAttemptId);\n+      appNotFoundInRM \u003d true;\n     }\n+\n+    if (historyServiceEnabled) {\n+      // Check with AHS even if found in RM because to capture info of finished\n+      // containers also\n+      List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n+      try {\n+        containersListFromAHS \u003d\n+            historyClient.getContainers(applicationAttemptId);\n+      } catch (IOException e) {\n+        // History service access might be enabled but system metrics publisher\n+        // is disabled hence app not found exception is possible\n+        if (appNotFoundInRM) {\n+          // app not found in bothM and RM then propagate the exception.\n+          throw e;\n+        }\n+      }\n+\n+      if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n+        // remove duplicates\n+\n+        Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n+            new HashSet\u003cContainerId\u003e();\n+        Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n+        while (tmpItr.hasNext()) {\n+          containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n+        }\n+\n+        Iterator\u003cContainerReport\u003e rmContainers \u003d\n+            containersForAttempt.iterator();\n+        while (rmContainers.hasNext()) {\n+          ContainerReport tmp \u003d rmContainers.next();\n+          containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n+          // Remove containers from AHS as container from RM will have latest\n+          // information\n+        }\n+\n+        if (containerIdsToBeKeptFromAHS.size() \u003e 0\n+            \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n+                .size()) {\n+          Iterator\u003cContainerReport\u003e containersFromHS \u003d\n+              containersListFromAHS.iterator();\n+          while (containersFromHS.hasNext()) {\n+            ContainerReport containerReport \u003d containersFromHS.next();\n+            if (containerIdsToBeKeptFromAHS.contains(containerReport\n+                .getContainerId())) {\n+              containersForAttempt.add(containerReport);\n+            }\n+          }\n+        } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n+            .size()) {\n+          containersForAttempt.addAll(containersListFromAHS);\n+        }\n+      }\n+    }\n+    return containersForAttempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerReport\u003e getContainers(\n      ApplicationAttemptId applicationAttemptId) throws YarnException,\n      IOException {\n    List\u003cContainerReport\u003e containersForAttempt \u003d\n        new ArrayList\u003cContainerReport\u003e();\n    boolean appNotFoundInRM \u003d false;\n    try {\n      GetContainersRequest request \u003d\n          Records.newRecord(GetContainersRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      GetContainersResponse response \u003d rmClient.getContainers(request);\n      containersForAttempt.addAll(response.getContainerList());\n    } catch (YarnException e) {\n      if (e.getClass() !\u003d ApplicationNotFoundException.class\n          || !historyServiceEnabled) {\n        // If Application is not in RM and history service is enabled then we\n        // need to check with history service else throw exception.\n        throw e;\n      }\n      appNotFoundInRM \u003d true;\n    }\n\n    if (historyServiceEnabled) {\n      // Check with AHS even if found in RM because to capture info of finished\n      // containers also\n      List\u003cContainerReport\u003e containersListFromAHS \u003d null;\n      try {\n        containersListFromAHS \u003d\n            historyClient.getContainers(applicationAttemptId);\n      } catch (IOException e) {\n        // History service access might be enabled but system metrics publisher\n        // is disabled hence app not found exception is possible\n        if (appNotFoundInRM) {\n          // app not found in bothM and RM then propagate the exception.\n          throw e;\n        }\n      }\n\n      if (null !\u003d containersListFromAHS \u0026\u0026 containersListFromAHS.size() \u003e 0) {\n        // remove duplicates\n\n        Set\u003cContainerId\u003e containerIdsToBeKeptFromAHS \u003d\n            new HashSet\u003cContainerId\u003e();\n        Iterator\u003cContainerReport\u003e tmpItr \u003d containersListFromAHS.iterator();\n        while (tmpItr.hasNext()) {\n          containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\n        }\n\n        Iterator\u003cContainerReport\u003e rmContainers \u003d\n            containersForAttempt.iterator();\n        while (rmContainers.hasNext()) {\n          ContainerReport tmp \u003d rmContainers.next();\n          containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\n          // Remove containers from AHS as container from RM will have latest\n          // information\n        }\n\n        if (containerIdsToBeKeptFromAHS.size() \u003e 0\n            \u0026\u0026 containersListFromAHS.size() !\u003d containerIdsToBeKeptFromAHS\n                .size()) {\n          Iterator\u003cContainerReport\u003e containersFromHS \u003d\n              containersListFromAHS.iterator();\n          while (containersFromHS.hasNext()) {\n            ContainerReport containerReport \u003d containersFromHS.next();\n            if (containerIdsToBeKeptFromAHS.contains(containerReport\n                .getContainerId())) {\n              containersForAttempt.add(containerReport);\n            }\n          }\n        } else if (containersListFromAHS.size() \u003d\u003d containerIdsToBeKeptFromAHS\n            .size()) {\n          containersForAttempt.addAll(containersListFromAHS);\n        }\n      }\n    }\n    return containersForAttempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "6af044bb75fe3ddf184841483cce5e222ad1853a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1389. Made ApplicationClientProtocol and ApplicationHistoryProtocol expose analogous getApplication(s)/Attempt(s)/Container(s) APIs. Contributed by Mayank Bansal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577052 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 12:42 AM",
      "commitName": "6af044bb75fe3ddf184841483cce5e222ad1853a",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/03/14 5:52 PM",
      "commitNameOld": "0edda2537346207e522120adeb8db1e9d058c884",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.29,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,22 @@\n   public List\u003cContainerReport\u003e getContainers(\n       ApplicationAttemptId applicationAttemptId) throws YarnException,\n       IOException {\n-    if (historyServiceEnabled) {\n+    try {\n+      GetContainersRequest request \u003d Records\n+          .newRecord(GetContainersRequest.class);\n+      request.setApplicationAttemptId(applicationAttemptId);\n+      GetContainersResponse response \u003d rmClient.getContainers(request);\n+      return response.getContainerList();\n+    } catch (YarnException e) {\n+      if (!historyServiceEnabled) {\n+        // Just throw it as usual if historyService is not enabled.\n+        throw e;\n+      }\n+      // Even if history-service is enabled, treat all exceptions still the same\n+      // except the following\n+      if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n+        throw e;\n+      }\n       return historyClient.getContainers(applicationAttemptId);\n     }\n-    throw new YarnException(\"History service is not enabled.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerReport\u003e getContainers(\n      ApplicationAttemptId applicationAttemptId) throws YarnException,\n      IOException {\n    try {\n      GetContainersRequest request \u003d Records\n          .newRecord(GetContainersRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      GetContainersResponse response \u003d rmClient.getContainers(request);\n      return response.getContainerList();\n    } catch (YarnException e) {\n      if (!historyServiceEnabled) {\n        // Just throw it as usual if historyService is not enabled.\n        throw e;\n      }\n      // Even if history-service is enabled, treat all exceptions still the same\n      // except the following\n      if (e.getClass() !\u003d ApplicationNotFoundException.class) {\n        throw e;\n      }\n      return historyClient.getContainers(applicationAttemptId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,8 @@\n+  public List\u003cContainerReport\u003e getContainers(\n+      ApplicationAttemptId applicationAttemptId) throws YarnException,\n+      IOException {\n+    if (historyServiceEnabled) {\n+      return historyClient.getContainers(applicationAttemptId);\n+    }\n+    throw new YarnException(\"History service is not enabled.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerReport\u003e getContainers(\n      ApplicationAttemptId applicationAttemptId) throws YarnException,\n      IOException {\n    if (historyServiceEnabled) {\n      return historyClient.getContainers(applicationAttemptId);\n    }\n    throw new YarnException(\"History service is not enabled.\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java"
    }
  }
}