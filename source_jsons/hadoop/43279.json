{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "terminateServiceIfAllComponentsFinished",
  "functionId": "terminateServiceIfAllComponentsFinished",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 997,
  "functionEndLine": 1056,
  "numCommitsSeen": 31,
  "timeTaken": 2054,
  "changeHistory": [
    "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
    "7f083ed8699a720d3fb82e4ec310356902a6ac30"
  ],
  "changeHistoryShort": {
    "824dfa3b099a09f18db6b0a3285eb4379ab72c2d": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": "Yintroduced"
  },
  "changeHistoryDetails": {
    "824dfa3b099a09f18db6b0a3285eb4379ab72c2d": {
      "type": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8489.  Support \"dominant\" component concept in YARN service.\n            Contributed by Zac Zhou\n",
      "commitDate": "18/01/19 5:23 PM",
      "commitName": "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8489.  Support \"dominant\" component concept in YARN service.\n            Contributed by Zac Zhou\n",
          "commitDate": "18/01/19 5:23 PM",
          "commitName": "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/11/18 3:36 PM",
          "commitNameOld": "f657a2a661ed7470915fa33ea4bbda2f4980c8b2",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 52.07,
          "commitsBetweenForRepo": 353,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,60 @@\n-  public void terminateServiceIfAllComponentsFinished() {\n+  private boolean terminateServiceIfAllComponentsFinished() {\n     boolean shouldTerminate \u003d true;\n \n     // Succeeded comps and failed comps, for logging purposes.\n     Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n     Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n \n     for (Component comp : getAllComponents().values()) {\n       ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n \n       if (restartPolicy.shouldTerminate(comp)) {\n         if (restartPolicy.hasCompletedSuccessfully(comp)) {\n-          comp.getComponentSpec().setState(org.apache.hadoop\n-              .yarn.service.api.records.ComponentState.SUCCEEDED);\n           LOG.info(\"{} Component state changed from {} to {}\",\n               comp.getName(), comp.getComponentSpec().getState(),\n               org.apache.hadoop\n                   .yarn.service.api.records.ComponentState.SUCCEEDED);\n-        } else {\n           comp.getComponentSpec().setState(org.apache.hadoop\n-              .yarn.service.api.records.ComponentState.FAILED);\n+              .yarn.service.api.records.ComponentState.SUCCEEDED);\n+        } else {\n           LOG.info(\"{} Component state changed from {} to {}\",\n               comp.getName(), comp.getComponentSpec().getState(),\n               org.apache.hadoop\n                   .yarn.service.api.records.ComponentState.FAILED);\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.FAILED);\n         }\n \n         if (isTimelineServiceEnabled()) {\n           // record in ATS\n           serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n               comp.getComponentSpec().getState(), systemClock.getTime());\n         }\n       } else {\n         shouldTerminate \u003d false;\n         break;\n       }\n \n       long nFailed \u003d comp.getNumFailedInstances();\n \n       if (nFailed \u003e 0) {\n         failedComponents.add(comp.getName());\n       } else {\n         succeededComponents.add(comp.getName());\n       }\n     }\n \n     if (shouldTerminate) {\n       LOG.info(\"All component finished, exiting Service Master... \"\n           + \", final status\u003d\" + (failedComponents.isEmpty() ?\n           \"Succeeded\" :\n           \"Failed\"));\n       LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n           .join(succeededComponents, \",\") + \"]\");\n       LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n           .join(failedComponents, \",\") + \"]\");\n \n-      int exitStatus \u003d EXIT_SUCCESS;\n-      if (failedComponents.isEmpty()) {\n-        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n-        app.setState(ServiceState.SUCCEEDED);\n-      } else {\n-        setGracefulStop(FinalApplicationStatus.FAILED);\n-        app.setState(ServiceState.FAILED);\n-        exitStatus \u003d EXIT_FALSE;\n-      }\n-\n-      getTerminationHandler().terminate(exitStatus);\n+      terminateService(failedComponents.isEmpty());\n     }\n+    return shouldTerminate;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean terminateServiceIfAllComponentsFinished() {\n    boolean shouldTerminate \u003d true;\n\n    // Succeeded comps and failed comps, for logging purposes.\n    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n\n    for (Component comp : getAllComponents().values()) {\n      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n      if (restartPolicy.shouldTerminate(comp)) {\n        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.SUCCEEDED);\n        } else {\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.FAILED);\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.FAILED);\n        }\n\n        if (isTimelineServiceEnabled()) {\n          // record in ATS\n          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n              comp.getComponentSpec().getState(), systemClock.getTime());\n        }\n      } else {\n        shouldTerminate \u003d false;\n        break;\n      }\n\n      long nFailed \u003d comp.getNumFailedInstances();\n\n      if (nFailed \u003e 0) {\n        failedComponents.add(comp.getName());\n      } else {\n        succeededComponents.add(comp.getName());\n      }\n    }\n\n    if (shouldTerminate) {\n      LOG.info(\"All component finished, exiting Service Master... \"\n          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n          \"Succeeded\" :\n          \"Failed\"));\n      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n          .join(succeededComponents, \",\") + \"]\");\n      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n          .join(failedComponents, \",\") + \"]\");\n\n      terminateService(failedComponents.isEmpty());\n    }\n    return shouldTerminate;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8489.  Support \"dominant\" component concept in YARN service.\n            Contributed by Zac Zhou\n",
          "commitDate": "18/01/19 5:23 PM",
          "commitName": "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/11/18 3:36 PM",
          "commitNameOld": "f657a2a661ed7470915fa33ea4bbda2f4980c8b2",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 52.07,
          "commitsBetweenForRepo": 353,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,60 @@\n-  public void terminateServiceIfAllComponentsFinished() {\n+  private boolean terminateServiceIfAllComponentsFinished() {\n     boolean shouldTerminate \u003d true;\n \n     // Succeeded comps and failed comps, for logging purposes.\n     Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n     Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n \n     for (Component comp : getAllComponents().values()) {\n       ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n \n       if (restartPolicy.shouldTerminate(comp)) {\n         if (restartPolicy.hasCompletedSuccessfully(comp)) {\n-          comp.getComponentSpec().setState(org.apache.hadoop\n-              .yarn.service.api.records.ComponentState.SUCCEEDED);\n           LOG.info(\"{} Component state changed from {} to {}\",\n               comp.getName(), comp.getComponentSpec().getState(),\n               org.apache.hadoop\n                   .yarn.service.api.records.ComponentState.SUCCEEDED);\n-        } else {\n           comp.getComponentSpec().setState(org.apache.hadoop\n-              .yarn.service.api.records.ComponentState.FAILED);\n+              .yarn.service.api.records.ComponentState.SUCCEEDED);\n+        } else {\n           LOG.info(\"{} Component state changed from {} to {}\",\n               comp.getName(), comp.getComponentSpec().getState(),\n               org.apache.hadoop\n                   .yarn.service.api.records.ComponentState.FAILED);\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.FAILED);\n         }\n \n         if (isTimelineServiceEnabled()) {\n           // record in ATS\n           serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n               comp.getComponentSpec().getState(), systemClock.getTime());\n         }\n       } else {\n         shouldTerminate \u003d false;\n         break;\n       }\n \n       long nFailed \u003d comp.getNumFailedInstances();\n \n       if (nFailed \u003e 0) {\n         failedComponents.add(comp.getName());\n       } else {\n         succeededComponents.add(comp.getName());\n       }\n     }\n \n     if (shouldTerminate) {\n       LOG.info(\"All component finished, exiting Service Master... \"\n           + \", final status\u003d\" + (failedComponents.isEmpty() ?\n           \"Succeeded\" :\n           \"Failed\"));\n       LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n           .join(succeededComponents, \",\") + \"]\");\n       LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n           .join(failedComponents, \",\") + \"]\");\n \n-      int exitStatus \u003d EXIT_SUCCESS;\n-      if (failedComponents.isEmpty()) {\n-        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n-        app.setState(ServiceState.SUCCEEDED);\n-      } else {\n-        setGracefulStop(FinalApplicationStatus.FAILED);\n-        app.setState(ServiceState.FAILED);\n-        exitStatus \u003d EXIT_FALSE;\n-      }\n-\n-      getTerminationHandler().terminate(exitStatus);\n+      terminateService(failedComponents.isEmpty());\n     }\n+    return shouldTerminate;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean terminateServiceIfAllComponentsFinished() {\n    boolean shouldTerminate \u003d true;\n\n    // Succeeded comps and failed comps, for logging purposes.\n    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n\n    for (Component comp : getAllComponents().values()) {\n      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n      if (restartPolicy.shouldTerminate(comp)) {\n        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.SUCCEEDED);\n        } else {\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.FAILED);\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.FAILED);\n        }\n\n        if (isTimelineServiceEnabled()) {\n          // record in ATS\n          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n              comp.getComponentSpec().getState(), systemClock.getTime());\n        }\n      } else {\n        shouldTerminate \u003d false;\n        break;\n      }\n\n      long nFailed \u003d comp.getNumFailedInstances();\n\n      if (nFailed \u003e 0) {\n        failedComponents.add(comp.getName());\n      } else {\n        succeededComponents.add(comp.getName());\n      }\n    }\n\n    if (shouldTerminate) {\n      LOG.info(\"All component finished, exiting Service Master... \"\n          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n          \"Succeeded\" :\n          \"Failed\"));\n      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n          .join(succeededComponents, \",\") + \"]\");\n      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n          .join(failedComponents, \",\") + \"]\");\n\n      terminateService(failedComponents.isEmpty());\n    }\n    return shouldTerminate;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8489.  Support \"dominant\" component concept in YARN service.\n            Contributed by Zac Zhou\n",
          "commitDate": "18/01/19 5:23 PM",
          "commitName": "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/11/18 3:36 PM",
          "commitNameOld": "f657a2a661ed7470915fa33ea4bbda2f4980c8b2",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 52.07,
          "commitsBetweenForRepo": 353,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,60 @@\n-  public void terminateServiceIfAllComponentsFinished() {\n+  private boolean terminateServiceIfAllComponentsFinished() {\n     boolean shouldTerminate \u003d true;\n \n     // Succeeded comps and failed comps, for logging purposes.\n     Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n     Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n \n     for (Component comp : getAllComponents().values()) {\n       ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n \n       if (restartPolicy.shouldTerminate(comp)) {\n         if (restartPolicy.hasCompletedSuccessfully(comp)) {\n-          comp.getComponentSpec().setState(org.apache.hadoop\n-              .yarn.service.api.records.ComponentState.SUCCEEDED);\n           LOG.info(\"{} Component state changed from {} to {}\",\n               comp.getName(), comp.getComponentSpec().getState(),\n               org.apache.hadoop\n                   .yarn.service.api.records.ComponentState.SUCCEEDED);\n-        } else {\n           comp.getComponentSpec().setState(org.apache.hadoop\n-              .yarn.service.api.records.ComponentState.FAILED);\n+              .yarn.service.api.records.ComponentState.SUCCEEDED);\n+        } else {\n           LOG.info(\"{} Component state changed from {} to {}\",\n               comp.getName(), comp.getComponentSpec().getState(),\n               org.apache.hadoop\n                   .yarn.service.api.records.ComponentState.FAILED);\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.FAILED);\n         }\n \n         if (isTimelineServiceEnabled()) {\n           // record in ATS\n           serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n               comp.getComponentSpec().getState(), systemClock.getTime());\n         }\n       } else {\n         shouldTerminate \u003d false;\n         break;\n       }\n \n       long nFailed \u003d comp.getNumFailedInstances();\n \n       if (nFailed \u003e 0) {\n         failedComponents.add(comp.getName());\n       } else {\n         succeededComponents.add(comp.getName());\n       }\n     }\n \n     if (shouldTerminate) {\n       LOG.info(\"All component finished, exiting Service Master... \"\n           + \", final status\u003d\" + (failedComponents.isEmpty() ?\n           \"Succeeded\" :\n           \"Failed\"));\n       LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n           .join(succeededComponents, \",\") + \"]\");\n       LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n           .join(failedComponents, \",\") + \"]\");\n \n-      int exitStatus \u003d EXIT_SUCCESS;\n-      if (failedComponents.isEmpty()) {\n-        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n-        app.setState(ServiceState.SUCCEEDED);\n-      } else {\n-        setGracefulStop(FinalApplicationStatus.FAILED);\n-        app.setState(ServiceState.FAILED);\n-        exitStatus \u003d EXIT_FALSE;\n-      }\n-\n-      getTerminationHandler().terminate(exitStatus);\n+      terminateService(failedComponents.isEmpty());\n     }\n+    return shouldTerminate;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean terminateServiceIfAllComponentsFinished() {\n    boolean shouldTerminate \u003d true;\n\n    // Succeeded comps and failed comps, for logging purposes.\n    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n\n    for (Component comp : getAllComponents().values()) {\n      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n      if (restartPolicy.shouldTerminate(comp)) {\n        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.SUCCEEDED);\n        } else {\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.FAILED);\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.FAILED);\n        }\n\n        if (isTimelineServiceEnabled()) {\n          // record in ATS\n          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n              comp.getComponentSpec().getState(), systemClock.getTime());\n        }\n      } else {\n        shouldTerminate \u003d false;\n        break;\n      }\n\n      long nFailed \u003d comp.getNumFailedInstances();\n\n      if (nFailed \u003e 0) {\n        failedComponents.add(comp.getName());\n      } else {\n        succeededComponents.add(comp.getName());\n      }\n    }\n\n    if (shouldTerminate) {\n      LOG.info(\"All component finished, exiting Service Master... \"\n          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n          \"Succeeded\" :\n          \"Failed\"));\n      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n          .join(succeededComponents, \",\") + \"]\");\n      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n          .join(failedComponents, \",\") + \"]\");\n\n      terminateService(failedComponents.isEmpty());\n    }\n    return shouldTerminate;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "28/08/18 10:55 AM",
      "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
          "commitDate": "28/08/18 10:55 AM",
          "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/08/18 4:49 PM",
          "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 6.75,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,69 @@\n-  public synchronized void terminateServiceIfAllComponentsFinished() {\n+  public void terminateServiceIfAllComponentsFinished() {\n     boolean shouldTerminate \u003d true;\n \n     // Succeeded comps and failed comps, for logging purposes.\n     Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n     Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n \n     for (Component comp : getAllComponents().values()) {\n       ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n-      if (!restartPolicy.shouldTerminate(comp)) {\n+\n+      if (restartPolicy.shouldTerminate(comp)) {\n+        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.SUCCEEDED);\n+          LOG.info(\"{} Component state changed from {} to {}\",\n+              comp.getName(), comp.getComponentSpec().getState(),\n+              org.apache.hadoop\n+                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n+        } else {\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.FAILED);\n+          LOG.info(\"{} Component state changed from {} to {}\",\n+              comp.getName(), comp.getComponentSpec().getState(),\n+              org.apache.hadoop\n+                  .yarn.service.api.records.ComponentState.FAILED);\n+        }\n+\n+        if (isTimelineServiceEnabled()) {\n+          // record in ATS\n+          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n+              comp.getComponentSpec().getState(), systemClock.getTime());\n+        }\n+      } else {\n         shouldTerminate \u003d false;\n         break;\n       }\n \n       long nFailed \u003d comp.getNumFailedInstances();\n \n       if (nFailed \u003e 0) {\n         failedComponents.add(comp.getName());\n-      } else{\n+      } else {\n         succeededComponents.add(comp.getName());\n       }\n     }\n \n     if (shouldTerminate) {\n       LOG.info(\"All component finished, exiting Service Master... \"\n           + \", final status\u003d\" + (failedComponents.isEmpty() ?\n           \"Succeeded\" :\n           \"Failed\"));\n       LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n           .join(succeededComponents, \",\") + \"]\");\n       LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n           .join(failedComponents, \",\") + \"]\");\n \n+      int exitStatus \u003d EXIT_SUCCESS;\n       if (failedComponents.isEmpty()) {\n         setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n-        getTerminationHandler().terminate(EXIT_SUCCESS);\n-      } else{\n+        app.setState(ServiceState.SUCCEEDED);\n+      } else {\n         setGracefulStop(FinalApplicationStatus.FAILED);\n-        getTerminationHandler().terminate(EXIT_FALSE);\n+        app.setState(ServiceState.FAILED);\n+        exitStatus \u003d EXIT_FALSE;\n       }\n+\n+      getTerminationHandler().terminate(exitStatus);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void terminateServiceIfAllComponentsFinished() {\n    boolean shouldTerminate \u003d true;\n\n    // Succeeded comps and failed comps, for logging purposes.\n    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n\n    for (Component comp : getAllComponents().values()) {\n      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n      if (restartPolicy.shouldTerminate(comp)) {\n        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.SUCCEEDED);\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n        } else {\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.FAILED);\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.FAILED);\n        }\n\n        if (isTimelineServiceEnabled()) {\n          // record in ATS\n          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n              comp.getComponentSpec().getState(), systemClock.getTime());\n        }\n      } else {\n        shouldTerminate \u003d false;\n        break;\n      }\n\n      long nFailed \u003d comp.getNumFailedInstances();\n\n      if (nFailed \u003e 0) {\n        failedComponents.add(comp.getName());\n      } else {\n        succeededComponents.add(comp.getName());\n      }\n    }\n\n    if (shouldTerminate) {\n      LOG.info(\"All component finished, exiting Service Master... \"\n          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n          \"Succeeded\" :\n          \"Failed\"));\n      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n          .join(succeededComponents, \",\") + \"]\");\n      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n          .join(failedComponents, \",\") + \"]\");\n\n      int exitStatus \u003d EXIT_SUCCESS;\n      if (failedComponents.isEmpty()) {\n        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n        app.setState(ServiceState.SUCCEEDED);\n      } else {\n        setGracefulStop(FinalApplicationStatus.FAILED);\n        app.setState(ServiceState.FAILED);\n        exitStatus \u003d EXIT_FALSE;\n      }\n\n      getTerminationHandler().terminate(exitStatus);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
          "commitDate": "28/08/18 10:55 AM",
          "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/08/18 4:49 PM",
          "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 6.75,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,69 @@\n-  public synchronized void terminateServiceIfAllComponentsFinished() {\n+  public void terminateServiceIfAllComponentsFinished() {\n     boolean shouldTerminate \u003d true;\n \n     // Succeeded comps and failed comps, for logging purposes.\n     Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n     Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n \n     for (Component comp : getAllComponents().values()) {\n       ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n-      if (!restartPolicy.shouldTerminate(comp)) {\n+\n+      if (restartPolicy.shouldTerminate(comp)) {\n+        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.SUCCEEDED);\n+          LOG.info(\"{} Component state changed from {} to {}\",\n+              comp.getName(), comp.getComponentSpec().getState(),\n+              org.apache.hadoop\n+                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n+        } else {\n+          comp.getComponentSpec().setState(org.apache.hadoop\n+              .yarn.service.api.records.ComponentState.FAILED);\n+          LOG.info(\"{} Component state changed from {} to {}\",\n+              comp.getName(), comp.getComponentSpec().getState(),\n+              org.apache.hadoop\n+                  .yarn.service.api.records.ComponentState.FAILED);\n+        }\n+\n+        if (isTimelineServiceEnabled()) {\n+          // record in ATS\n+          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n+              comp.getComponentSpec().getState(), systemClock.getTime());\n+        }\n+      } else {\n         shouldTerminate \u003d false;\n         break;\n       }\n \n       long nFailed \u003d comp.getNumFailedInstances();\n \n       if (nFailed \u003e 0) {\n         failedComponents.add(comp.getName());\n-      } else{\n+      } else {\n         succeededComponents.add(comp.getName());\n       }\n     }\n \n     if (shouldTerminate) {\n       LOG.info(\"All component finished, exiting Service Master... \"\n           + \", final status\u003d\" + (failedComponents.isEmpty() ?\n           \"Succeeded\" :\n           \"Failed\"));\n       LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n           .join(succeededComponents, \",\") + \"]\");\n       LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n           .join(failedComponents, \",\") + \"]\");\n \n+      int exitStatus \u003d EXIT_SUCCESS;\n       if (failedComponents.isEmpty()) {\n         setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n-        getTerminationHandler().terminate(EXIT_SUCCESS);\n-      } else{\n+        app.setState(ServiceState.SUCCEEDED);\n+      } else {\n         setGracefulStop(FinalApplicationStatus.FAILED);\n-        getTerminationHandler().terminate(EXIT_FALSE);\n+        app.setState(ServiceState.FAILED);\n+        exitStatus \u003d EXIT_FALSE;\n       }\n+\n+      getTerminationHandler().terminate(exitStatus);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void terminateServiceIfAllComponentsFinished() {\n    boolean shouldTerminate \u003d true;\n\n    // Succeeded comps and failed comps, for logging purposes.\n    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n\n    for (Component comp : getAllComponents().values()) {\n      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n\n      if (restartPolicy.shouldTerminate(comp)) {\n        if (restartPolicy.hasCompletedSuccessfully(comp)) {\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.SUCCEEDED);\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.SUCCEEDED);\n        } else {\n          comp.getComponentSpec().setState(org.apache.hadoop\n              .yarn.service.api.records.ComponentState.FAILED);\n          LOG.info(\"{} Component state changed from {} to {}\",\n              comp.getName(), comp.getComponentSpec().getState(),\n              org.apache.hadoop\n                  .yarn.service.api.records.ComponentState.FAILED);\n        }\n\n        if (isTimelineServiceEnabled()) {\n          // record in ATS\n          serviceTimelinePublisher.componentFinished(comp.getComponentSpec(),\n              comp.getComponentSpec().getState(), systemClock.getTime());\n        }\n      } else {\n        shouldTerminate \u003d false;\n        break;\n      }\n\n      long nFailed \u003d comp.getNumFailedInstances();\n\n      if (nFailed \u003e 0) {\n        failedComponents.add(comp.getName());\n      } else {\n        succeededComponents.add(comp.getName());\n      }\n    }\n\n    if (shouldTerminate) {\n      LOG.info(\"All component finished, exiting Service Master... \"\n          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n          \"Succeeded\" :\n          \"Failed\"));\n      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n          .join(succeededComponents, \",\") + \"]\");\n      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n          .join(failedComponents, \",\") + \"]\");\n\n      int exitStatus \u003d EXIT_SUCCESS;\n      if (failedComponents.isEmpty()) {\n        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n        app.setState(ServiceState.SUCCEEDED);\n      } else {\n        setGracefulStop(FinalApplicationStatus.FAILED);\n        app.setState(ServiceState.FAILED);\n        exitStatus \u003d EXIT_FALSE;\n      }\n\n      getTerminationHandler().terminate(exitStatus);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8080.  Add restart policy for YARN services.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "17/05/18 2:16 PM",
      "commitName": "7f083ed8699a720d3fb82e4ec310356902a6ac30",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,42 @@\n+  public synchronized void terminateServiceIfAllComponentsFinished() {\n+    boolean shouldTerminate \u003d true;\n+\n+    // Succeeded comps and failed comps, for logging purposes.\n+    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n+    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n+\n+    for (Component comp : getAllComponents().values()) {\n+      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n+      if (!restartPolicy.shouldTerminate(comp)) {\n+        shouldTerminate \u003d false;\n+        break;\n+      }\n+\n+      long nFailed \u003d comp.getNumFailedInstances();\n+\n+      if (nFailed \u003e 0) {\n+        failedComponents.add(comp.getName());\n+      } else{\n+        succeededComponents.add(comp.getName());\n+      }\n+    }\n+\n+    if (shouldTerminate) {\n+      LOG.info(\"All component finished, exiting Service Master... \"\n+          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n+          \"Succeeded\" :\n+          \"Failed\"));\n+      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n+          .join(succeededComponents, \",\") + \"]\");\n+      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n+          .join(failedComponents, \",\") + \"]\");\n+\n+      if (failedComponents.isEmpty()) {\n+        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n+        getTerminationHandler().terminate(EXIT_SUCCESS);\n+      } else{\n+        setGracefulStop(FinalApplicationStatus.FAILED);\n+        getTerminationHandler().terminate(EXIT_FALSE);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void terminateServiceIfAllComponentsFinished() {\n    boolean shouldTerminate \u003d true;\n\n    // Succeeded comps and failed comps, for logging purposes.\n    Set\u003cString\u003e succeededComponents \u003d new HashSet\u003c\u003e();\n    Set\u003cString\u003e failedComponents \u003d new HashSet\u003c\u003e();\n\n    for (Component comp : getAllComponents().values()) {\n      ComponentRestartPolicy restartPolicy \u003d comp.getRestartPolicyHandler();\n      if (!restartPolicy.shouldTerminate(comp)) {\n        shouldTerminate \u003d false;\n        break;\n      }\n\n      long nFailed \u003d comp.getNumFailedInstances();\n\n      if (nFailed \u003e 0) {\n        failedComponents.add(comp.getName());\n      } else{\n        succeededComponents.add(comp.getName());\n      }\n    }\n\n    if (shouldTerminate) {\n      LOG.info(\"All component finished, exiting Service Master... \"\n          + \", final status\u003d\" + (failedComponents.isEmpty() ?\n          \"Succeeded\" :\n          \"Failed\"));\n      LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils\n          .join(succeededComponents, \",\") + \"]\");\n      LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils\n          .join(failedComponents, \",\") + \"]\");\n\n      if (failedComponents.isEmpty()) {\n        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\n        getTerminationHandler().terminate(EXIT_SUCCESS);\n      } else{\n        setGracefulStop(FinalApplicationStatus.FAILED);\n        getTerminationHandler().terminate(EXIT_FALSE);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}