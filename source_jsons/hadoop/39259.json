{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___newConf-Configuration__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 493,
  "functionEndLine": 496,
  "numCommitsSeen": 392,
  "timeTaken": 17685,
  "changeHistory": [
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "06cceba1cb07340c412c4467439c16ea6812e685",
    "a63d19d36520fa55bf523483f14329756f6eadd3",
    "ef59cbe08aabe9844159cb4192d6345e4e3caab2",
    "72054a817dfb43e93916d7036eba19cf2f49cea2",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
    "a4ba451802c6c61a0c804809740d46dd76059f25",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "57cdf8626a32b8595a645b7551f46ab950db4789",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "b812af964d100c50d065cdd9007cef31ea2642a8",
    "ca72e11158047f3d00db9e9e61c632e757383287",
    "25bc68d15eb005180ab366e3b9470294018bd2b9",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
    "334de8d21189109dcd2423d13fab56477980872b",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef"
  ],
  "changeHistoryShort": {
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "06cceba1cb07340c412c4467439c16ea6812e685": "Ybodychange",
    "a63d19d36520fa55bf523483f14329756f6eadd3": "Ybodychange",
    "ef59cbe08aabe9844159cb4192d6345e4e3caab2": "Ybodychange",
    "72054a817dfb43e93916d7036eba19cf2f49cea2": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": "Ybodychange",
    "a4ba451802c6c61a0c804809740d46dd76059f25": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "57cdf8626a32b8595a645b7551f46ab950db4789": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Ybodychange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "b812af964d100c50d065cdd9007cef31ea2642a8": "Ybodychange",
    "ca72e11158047f3d00db9e9e61c632e757383287": "Ybodychange",
    "25bc68d15eb005180ab366e3b9470294018bd2b9": "Ybodychange",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": "Ybodychange",
    "334de8d21189109dcd2423d13fab56477980872b": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10022. RM Rest API to validate the CapacityScheduler Configuration change\n\nContributed by Kinga Marton.\n",
      "commitDate": "28/01/20 9:46 AM",
      "commitName": "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "05/12/19 11:21 PM",
      "commitNameOld": "e575df5ca6f9630199b5c1696136184e88af3160",
      "commitAuthorOld": "prabhujoseph",
      "daysBetweenCommits": 53.43,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,4 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n-    writeLock.lock();\n-    try {\n-      Configuration configuration \u003d new Configuration(newConf);\n-      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n-      this.conf \u003d csConfProvider.loadConfiguration(configuration);\n-      validateConf(this.conf);\n-      try {\n-        LOG.info(\"Re-initializing queues...\");\n-        refreshMaximumAllocation(\n-            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n-        reinitializeQueues(this.conf);\n-      } catch (Throwable t) {\n-        this.conf \u003d oldConf;\n-        refreshMaximumAllocation(\n-            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n-        throw new IOException(\"Failed to re-init queues : \" + t.getMessage(),\n-            t);\n-      }\n-\n-      // update lazy preemption\n-      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n-\n-      // Setup how many containers we can allocate for each round\n-      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n-\n-      super.reinitialize(newConf, rmContext);\n-    } finally {\n-      writeLock.unlock();\n-    }\n+    reinitialize(newConf, rmContext, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    reinitialize(newConf, rmContext, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       Configuration configuration \u003d new Configuration(newConf);\n       CapacitySchedulerConfiguration oldConf \u003d this.conf;\n       this.conf \u003d csConfProvider.loadConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         refreshMaximumAllocation(\n             ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         refreshMaximumAllocation(\n             ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n         throw new IOException(\"Failed to re-init queues : \" + t.getMessage(),\n             t);\n       }\n \n       // update lazy preemption\n       this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n \n       // Setup how many containers we can allocate for each round\n       offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n \n       super.reinitialize(newConf, rmContext);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    writeLock.lock();\n    try {\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d csConfProvider.loadConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(\n            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(\n            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n        throw new IOException(\"Failed to re-init queues : \" + t.getMessage(),\n            t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n\n      // Setup how many containers we can allocate for each round\n      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n\n      super.reinitialize(newConf, rmContext);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "06cceba1cb07340c412c4467439c16ea6812e685": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7738. CapacityScheduler: Support refresh maximum allocation for multiple resource types. Contributed by Wangda Tan.\n",
      "commitDate": "18/01/18 5:35 AM",
      "commitName": "06cceba1cb07340c412c4467439c16ea6812e685",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/01/18 4:59 PM",
      "commitNameOld": "55066cc53dc22b68f9ca55a0029741d6c846be0a",
      "commitAuthorOld": "Miklos Szegedi",
      "daysBetweenCommits": 8.52,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n     try {\n       writeLock.lock();\n       Configuration configuration \u003d new Configuration(newConf);\n       CapacitySchedulerConfiguration oldConf \u003d this.conf;\n       this.conf \u003d csConfProvider.loadConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n-        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        refreshMaximumAllocation(\n+            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n-        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-        throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n+        refreshMaximumAllocation(\n+            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n+        throw new IOException(\"Failed to re-init queues : \" + t.getMessage(),\n+            t);\n       }\n \n       // update lazy preemption\n       this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n \n       // Setup how many containers we can allocate for each round\n       offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n \n       super.reinitialize(newConf, rmContext);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d csConfProvider.loadConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(\n            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(\n            ResourceUtils.fetchMaximumAllocationFromConfig(this.conf));\n        throw new IOException(\"Failed to re-init queues : \" + t.getMessage(),\n            t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n\n      // Setup how many containers we can allocate for each round\n      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n\n      super.reinitialize(newConf, rmContext);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "a63d19d36520fa55bf523483f14329756f6eadd3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6124. Make SchedulingEditPolicy can be enabled / disabled / updated with RMAdmin -refreshQueues. (Zian Chen via wangda)\n\nChange-Id: Id93656f3af7dcd78cafa94e33663c78d410d43c2\n",
      "commitDate": "30/11/17 3:57 PM",
      "commitName": "a63d19d36520fa55bf523483f14329756f6eadd3",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/11/17 7:59 PM",
      "commitNameOld": "834e91ee91d22d74866afbf6252107e969bf8370",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.83,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n     try {\n       writeLock.lock();\n       Configuration configuration \u003d new Configuration(newConf);\n       CapacitySchedulerConfiguration oldConf \u003d this.conf;\n       this.conf \u003d csConfProvider.loadConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n       }\n \n       // update lazy preemption\n       this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n \n       // Setup how many containers we can allocate for each round\n       offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n+\n+      super.reinitialize(newConf, rmContext);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d csConfProvider.loadConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n\n      // Setup how many containers we can allocate for each round\n      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n\n      super.reinitialize(newConf, rmContext);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "ef59cbe08aabe9844159cb4192d6345e4e3caab2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5951. Changes to allow CapacityScheduler to use configuration store\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ef59cbe08aabe9844159cb4192d6345e4e3caab2",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 27.08,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n     try {\n       writeLock.lock();\n       Configuration configuration \u003d new Configuration(newConf);\n       CapacitySchedulerConfiguration oldConf \u003d this.conf;\n-      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n+      this.conf \u003d csConfProvider.loadConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n       }\n \n       // update lazy preemption\n       this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n \n       // Setup how many containers we can allocate for each round\n       offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d csConfProvider.loadConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n\n      // Setup how many containers we can allocate for each round\n      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "72054a817dfb43e93916d7036eba19cf2f49cea2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5556. CapacityScheduler: Support deleting queues without requiring a RM restart. (Naganarasimha G R via wangda)\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "72054a817dfb43e93916d7036eba19cf2f49cea2",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/01/17 8:40 AM",
      "commitNameOld": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.2,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n     try {\n       writeLock.lock();\n       Configuration configuration \u003d new Configuration(newConf);\n       CapacitySchedulerConfiguration oldConf \u003d this.conf;\n       this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-        throw new IOException(\"Failed to re-init queues\", t);\n+        throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n       }\n \n       // update lazy preemption\n       this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n \n       // Setup how many containers we can allocate for each round\n       offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues : \"+ t.getMessage(), t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n\n      // Setup how many containers we can allocate for each round\n      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/11/16 3:02 AM",
      "commitNameOld": "7d2d8d25ba0cb10a3c6192d4123f27ede5ef2ba6",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   public void reinitialize(Configuration newConf, RMContext rmContext)\n       throws IOException {\n     try {\n       writeLock.lock();\n       Configuration configuration \u003d new Configuration(newConf);\n       CapacitySchedulerConfiguration oldConf \u003d this.conf;\n       this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         refreshMaximumAllocation(this.conf.getMaximumAllocation());\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n \n       // update lazy preemption\n       this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+\n+      // Setup how many containers we can allocate for each round\n+      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n\n      // Setup how many containers we can allocate for each round\n      offswitchPerHeartbeatLimit \u003d this.conf.getOffSwitchPerHeartbeatLimit();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n-    Configuration configuration \u003d new Configuration(conf);\n-    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n-    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n-    validateConf(this.conf);\n+  public void reinitialize(Configuration newConf, RMContext rmContext)\n+      throws IOException {\n     try {\n-      LOG.info(\"Re-initializing queues...\");\n-      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-      reinitializeQueues(this.conf);\n-    } catch (Throwable t) {\n-      this.conf \u003d oldConf;\n-      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-      throw new IOException(\"Failed to re-init queues\", t);\n-    }\n+      writeLock.lock();\n+      Configuration configuration \u003d new Configuration(newConf);\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n+      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n+      validateConf(this.conf);\n+      try {\n+        LOG.info(\"Re-initializing queues...\");\n+        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        throw new IOException(\"Failed to re-init queues\", t);\n+      }\n \n-    // update lazy preemption\n-    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+      // update lazy preemption\n+      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, rmContext-RMContext]",
            "newValue": "[newConf-Configuration, rmContext-RMContext]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n-    Configuration configuration \u003d new Configuration(conf);\n-    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n-    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n-    validateConf(this.conf);\n+  public void reinitialize(Configuration newConf, RMContext rmContext)\n+      throws IOException {\n     try {\n-      LOG.info(\"Re-initializing queues...\");\n-      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-      reinitializeQueues(this.conf);\n-    } catch (Throwable t) {\n-      this.conf \u003d oldConf;\n-      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-      throw new IOException(\"Failed to re-init queues\", t);\n-    }\n+      writeLock.lock();\n+      Configuration configuration \u003d new Configuration(newConf);\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n+      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n+      validateConf(this.conf);\n+      try {\n+        LOG.info(\"Re-initializing queues...\");\n+        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        throw new IOException(\"Failed to re-init queues\", t);\n+      }\n \n-    // update lazy preemption\n-    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+      // update lazy preemption\n+      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n-    Configuration configuration \u003d new Configuration(conf);\n-    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n-    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n-    validateConf(this.conf);\n+  public void reinitialize(Configuration newConf, RMContext rmContext)\n+      throws IOException {\n     try {\n-      LOG.info(\"Re-initializing queues...\");\n-      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-      reinitializeQueues(this.conf);\n-    } catch (Throwable t) {\n-      this.conf \u003d oldConf;\n-      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n-      throw new IOException(\"Failed to re-init queues\", t);\n-    }\n+      writeLock.lock();\n+      Configuration configuration \u003d new Configuration(newConf);\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n+      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n+      validateConf(this.conf);\n+      try {\n+        LOG.info(\"Re-initializing queues...\");\n+        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n+        throw new IOException(\"Failed to re-init queues\", t);\n+      }\n \n-    // update lazy preemption\n-    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+      // update lazy preemption\n+      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(Configuration newConf, RMContext rmContext)\n      throws IOException {\n    try {\n      writeLock.lock();\n      Configuration configuration \u003d new Configuration(newConf);\n      CapacitySchedulerConfiguration oldConf \u003d this.conf;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        refreshMaximumAllocation(this.conf.getMaximumAllocation());\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n\n      // update lazy preemption\n      this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     CapacitySchedulerConfiguration oldConf \u003d this.conf;\n     this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n     validateConf(this.conf);\n     try {\n       LOG.info(\"Re-initializing queues...\");\n       refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       reinitializeQueues(this.conf);\n     } catch (Throwable t) {\n       this.conf \u003d oldConf;\n       refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       throw new IOException(\"Failed to re-init queues\", t);\n     }\n+\n+    // update lazy preemption\n+    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n    validateConf(this.conf);\n    try {\n      LOG.info(\"Re-initializing queues...\");\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      reinitializeQueues(this.conf);\n    } catch (Throwable t) {\n      this.conf \u003d oldConf;\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      throw new IOException(\"Failed to re-init queues\", t);\n    }\n\n    // update lazy preemption\n    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,15 @@\n   reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     CapacitySchedulerConfiguration oldConf \u003d this.conf;\n     this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n     validateConf(this.conf);\n     try {\n       LOG.info(\"Re-initializing queues...\");\n       refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       reinitializeQueues(this.conf);\n     } catch (Throwable t) {\n       this.conf \u003d oldConf;\n       refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       throw new IOException(\"Failed to re-init queues\", t);\n     }\n-\n-    // update lazy preemption\n-    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n    validateConf(this.conf);\n    try {\n      LOG.info(\"Re-initializing queues...\");\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      reinitializeQueues(this.conf);\n    } catch (Throwable t) {\n      this.conf \u003d oldConf;\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      throw new IOException(\"Failed to re-init queues\", t);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     CapacitySchedulerConfiguration oldConf \u003d this.conf;\n     this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n     validateConf(this.conf);\n     try {\n       LOG.info(\"Re-initializing queues...\");\n       refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       reinitializeQueues(this.conf);\n     } catch (Throwable t) {\n       this.conf \u003d oldConf;\n       refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       throw new IOException(\"Failed to re-init queues\", t);\n     }\n+\n+    // update lazy preemption\n+    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n    validateConf(this.conf);\n    try {\n      LOG.info(\"Re-initializing queues...\");\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      reinitializeQueues(this.conf);\n    } catch (Throwable t) {\n      this.conf \u003d oldConf;\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      throw new IOException(\"Failed to re-init queues\", t);\n    }\n\n    // update lazy preemption\n    this.isLazyPreemptionEnabled \u003d this.conf.getLazyPreemptionEnabled();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1582. Capacity Scheduler: add a maximum-allocation-mb setting per queue. Contributed by Thomas Graves\n",
      "commitDate": "05/02/15 11:28 AM",
      "commitName": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/01/15 2:12 PM",
      "commitNameOld": "e13a484a2be64fb781c5eca5ae7056cbe194ac5e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 28.89,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,15 @@\n   reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     CapacitySchedulerConfiguration oldConf \u003d this.conf;\n     this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n     validateConf(this.conf);\n     try {\n       LOG.info(\"Re-initializing queues...\");\n+      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       reinitializeQueues(this.conf);\n     } catch (Throwable t) {\n       this.conf \u003d oldConf;\n+      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n       throw new IOException(\"Failed to re-init queues\", t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n    validateConf(this.conf);\n    try {\n      LOG.info(\"Re-initializing queues...\");\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      reinitializeQueues(this.conf);\n    } catch (Throwable t) {\n      this.conf \u003d oldConf;\n      refreshMaximumAllocation(this.conf.getMaximumAllocation());\n      throw new IOException(\"Failed to re-init queues\", t);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "a4ba451802c6c61a0c804809740d46dd76059f25": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1474. Make schedulers services. (Tsuyoshi Ozawa via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598908 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/14 12:33 PM",
      "commitName": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/05/14 10:32 PM",
      "commitNameOld": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.58,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,13 @@\n-      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n+  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n-    if (!initialized) {\n-      this.rmContext \u003d rmContext;\n-      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n-      validateConf(this.conf);\n-      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n-      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n-      this.calculator \u003d this.conf.getResourceCalculator();\n-      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n-      this.applications \u003d\n-          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e();\n-\n-      initializeQueues(this.conf);\n-      \n-      scheduleAsynchronously \u003d this.conf.getScheduleAynschronously();\n-      asyncScheduleInterval \u003d \n-          this.conf.getLong(ASYNC_SCHEDULER_INTERVAL, \n-              DEFAULT_ASYNC_SCHEDULER_INTERVAL);\n-      if (scheduleAsynchronously) {\n-        asyncSchedulerThread \u003d new AsyncScheduleThread(this);\n-        asyncSchedulerThread.start();\n-      }\n-      \n-      initialized \u003d true;\n-      LOG.info(\"Initialized CapacityScheduler with \" +\n-          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n-          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n-          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e, \" +\n-          \"asynchronousScheduling\u003d\" + scheduleAsynchronously + \", \" +\n-          \"asyncScheduleInterval\u003d\" + asyncScheduleInterval + \"ms\");\n-      \n-    } else {\n-      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n-      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n-      validateConf(this.conf);\n-      try {\n-        LOG.info(\"Re-initializing queues...\");\n-        reinitializeQueues(this.conf);\n-      } catch (Throwable t) {\n-        this.conf \u003d oldConf;\n-        throw new IOException(\"Failed to re-init queues\", t);\n-      }\n+    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n+    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n+    validateConf(this.conf);\n+    try {\n+      LOG.info(\"Re-initializing queues...\");\n+      reinitializeQueues(this.conf);\n+    } catch (Throwable t) {\n+      this.conf \u003d oldConf;\n+      throw new IOException(\"Failed to re-init queues\", t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    CapacitySchedulerConfiguration oldConf \u003d this.conf;\n    this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n    validateConf(this.conf);\n    try {\n      LOG.info(\"Re-initializing queues...\");\n      reinitializeQueues(this.conf);\n    } catch (Throwable t) {\n      this.conf \u003d oldConf;\n      throw new IOException(\"Failed to re-init queues\", t);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 7:53 PM",
      "commitNameOld": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 65.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     if (!initialized) {\n       this.rmContext \u003d rmContext;\n       this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n       this.applications \u003d\n-          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n+          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e();\n \n       initializeQueues(this.conf);\n       \n       scheduleAsynchronously \u003d this.conf.getScheduleAynschronously();\n       asyncScheduleInterval \u003d \n           this.conf.getLong(ASYNC_SCHEDULER_INTERVAL, \n               DEFAULT_ASYNC_SCHEDULER_INTERVAL);\n       if (scheduleAsynchronously) {\n         asyncSchedulerThread \u003d new AsyncScheduleThread(this);\n         asyncSchedulerThread.start();\n       }\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e, \" +\n           \"asynchronousScheduling\u003d\" + scheduleAsynchronously + \", \" +\n           \"asyncScheduleInterval\u003d\" + asyncScheduleInterval + \"ms\");\n       \n     } else {\n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    if (!initialized) {\n      this.rmContext \u003d rmContext;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e();\n\n      initializeQueues(this.conf);\n      \n      scheduleAsynchronously \u003d this.conf.getScheduleAynschronously();\n      asyncScheduleInterval \u003d \n          this.conf.getLong(ASYNC_SCHEDULER_INTERVAL, \n              DEFAULT_ASYNC_SCHEDULER_INTERVAL);\n      if (scheduleAsynchronously) {\n        asyncSchedulerThread \u003d new AsyncScheduleThread(this);\n        asyncSchedulerThread.start();\n      }\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e, \" +\n          \"asynchronousScheduling\u003d\" + scheduleAsynchronously + \", \" +\n          \"asyncScheduleInterval\u003d\" + asyncScheduleInterval + \"ms\");\n      \n    } else {\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "57cdf8626a32b8595a645b7551f46ab950db4789": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1512. Enhanced CapacityScheduler to be able to decouple scheduling from node-heartbeats. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578722 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 7:53 PM",
      "commitName": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 3:22 PM",
      "commitNameOld": "92317e3459b502f33a3575c247f05d64e5d39a00",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,45 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     if (!initialized) {\n       this.rmContext \u003d rmContext;\n       this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n       this.applications \u003d\n           new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n \n       initializeQueues(this.conf);\n       \n+      scheduleAsynchronously \u003d this.conf.getScheduleAynschronously();\n+      asyncScheduleInterval \u003d \n+          this.conf.getLong(ASYNC_SCHEDULER_INTERVAL, \n+              DEFAULT_ASYNC_SCHEDULER_INTERVAL);\n+      if (scheduleAsynchronously) {\n+        asyncSchedulerThread \u003d new AsyncScheduleThread(this);\n+        asyncSchedulerThread.start();\n+      }\n+      \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n-          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n+          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e, \" +\n+          \"asynchronousScheduling\u003d\" + scheduleAsynchronously + \", \" +\n+          \"asyncScheduleInterval\u003d\" + asyncScheduleInterval + \"ms\");\n+      \n     } else {\n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    if (!initialized) {\n      this.rmContext \u003d rmContext;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n\n      initializeQueues(this.conf);\n      \n      scheduleAsynchronously \u003d this.conf.getScheduleAynschronously();\n      asyncScheduleInterval \u003d \n          this.conf.getLong(ASYNC_SCHEDULER_INTERVAL, \n              DEFAULT_ASYNC_SCHEDULER_INTERVAL);\n      if (scheduleAsynchronously) {\n        asyncSchedulerThread \u003d new AsyncScheduleThread(this);\n        asyncSchedulerThread.start();\n      }\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e, \" +\n          \"asynchronousScheduling\u003d\" + scheduleAsynchronously + \", \" +\n          \"asyncScheduleInterval\u003d\" + asyncScheduleInterval + \"ms\");\n      \n    } else {\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/02/14 2:50 PM",
      "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,33 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     Configuration configuration \u003d new Configuration(conf);\n     if (!initialized) {\n-      if (rmContext.getConfigurationProvider() instanceof\n-          LocalConfigurationProvider) {\n-        this.conf \u003d new CapacitySchedulerConfiguration(configuration, true);\n-      } else {\n-        try {\n-          this.conf \u003d\n-              new CapacitySchedulerConfiguration(rmContext\n-                  .getConfigurationProvider().getConfiguration(configuration,\n-                      YarnConfiguration.CS_CONFIGURATION_FILE), false);\n-        } catch (Exception e) {\n-          throw new IOException(e);\n-        }\n-      }\n+      this.rmContext \u003d rmContext;\n+      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n       this.applications \u003d\n           new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n-      this.rmContext \u003d rmContext;\n \n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n-      this.conf \u003d\n-          new CapacitySchedulerConfiguration(conf,\n-              rmContext.getConfigurationProvider() instanceof\n-                  LocalConfigurationProvider);\n+      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    if (!initialized) {\n      this.rmContext \u003d rmContext;\n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n\n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d loadCapacitySchedulerConfiguration(configuration);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,48 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n+    Configuration configuration \u003d new Configuration(conf);\n     if (!initialized) {\n-      this.useLocalConfigurationProvider \u003d\n-          (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(\n-              YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n-              LocalConfigurationProvider.class)));\n-      this.conf \u003d\n-          new CapacitySchedulerConfiguration(conf,\n-              this.useLocalConfigurationProvider);\n+      if (rmContext.getConfigurationProvider() instanceof\n+          LocalConfigurationProvider) {\n+        this.conf \u003d new CapacitySchedulerConfiguration(configuration, true);\n+      } else {\n+        try {\n+          this.conf \u003d\n+              new CapacitySchedulerConfiguration(rmContext\n+                  .getConfigurationProvider().getConfiguration(configuration,\n+                      YarnConfiguration.CS_CONFIGURATION_FILE), false);\n+        } catch (Exception e) {\n+          throw new IOException(e);\n+        }\n+      }\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n       this.applications \u003d\n           new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n       this.rmContext \u003d rmContext;\n \n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d\n           new CapacitySchedulerConfiguration(conf,\n-              this.useLocalConfigurationProvider);\n+              rmContext.getConfigurationProvider() instanceof\n+                  LocalConfigurationProvider);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    Configuration configuration \u003d new Configuration(conf);\n    if (!initialized) {\n      if (rmContext.getConfigurationProvider() instanceof\n          LocalConfigurationProvider) {\n        this.conf \u003d new CapacitySchedulerConfiguration(configuration, true);\n      } else {\n        try {\n          this.conf \u003d\n              new CapacitySchedulerConfiguration(rmContext\n                  .getConfigurationProvider().getConfiguration(configuration,\n                      YarnConfiguration.CS_CONFIGURATION_FILE), false);\n        } catch (Exception e) {\n          throw new IOException(e);\n        }\n      }\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n      this.rmContext \u003d rmContext;\n\n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d\n          new CapacitySchedulerConfiguration(conf,\n              rmContext.getConfigurationProvider() instanceof\n                  LocalConfigurationProvider);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "b812af964d100c50d065cdd9007cef31ea2642a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1669. Modified RM HA handling of protocol level service-ACLS to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 2:46 PM",
      "commitName": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/02/14 11:07 AM",
      "commitNameOld": "ca72e11158047f3d00db9e9e61c632e757383287",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n-      this.useLocalConfigurationProvider \u003d conf.get(\n-          YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n-          YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS).equals(\n-          \"org.apache.hadoop.yarn.LocalConfigurationProvider\");\n+      this.useLocalConfigurationProvider \u003d\n+          (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(\n+              YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n+              LocalConfigurationProvider.class)));\n       this.conf \u003d\n           new CapacitySchedulerConfiguration(conf,\n               this.useLocalConfigurationProvider);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n       this.applications \u003d\n           new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n       this.rmContext \u003d rmContext;\n \n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d\n           new CapacitySchedulerConfiguration(conf,\n               this.useLocalConfigurationProvider);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.useLocalConfigurationProvider \u003d\n          (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(\n              YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n              LocalConfigurationProvider.class)));\n      this.conf \u003d\n          new CapacitySchedulerConfiguration(conf,\n              this.useLocalConfigurationProvider);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n      this.rmContext \u003d rmContext;\n\n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d\n          new CapacitySchedulerConfiguration(conf,\n              this.useLocalConfigurationProvider);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "ca72e11158047f3d00db9e9e61c632e757383287": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1611. Introduced the concept of a configuration provider which can be used by ResourceManager to read configuration locally or from remote systems so as to help RM failover. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/14 11:07 AM",
      "commitName": "ca72e11158047f3d00db9e9e61c632e757383287",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/01/14 11:07 PM",
      "commitNameOld": "25bc68d15eb005180ab366e3b9470294018bd2b9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.5,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n-      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.useLocalConfigurationProvider \u003d conf.get(\n+          YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n+          YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS).equals(\n+          \"org.apache.hadoop.yarn.LocalConfigurationProvider\");\n+      this.conf \u003d\n+          new CapacitySchedulerConfiguration(conf,\n+              this.useLocalConfigurationProvider);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n       this.applications \u003d\n           new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n       this.rmContext \u003d rmContext;\n \n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n-\n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n-      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.conf \u003d\n+          new CapacitySchedulerConfiguration(conf,\n+              this.useLocalConfigurationProvider);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.useLocalConfigurationProvider \u003d conf.get(\n          YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n          YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS).equals(\n          \"org.apache.hadoop.yarn.LocalConfigurationProvider\");\n      this.conf \u003d\n          new CapacitySchedulerConfiguration(conf,\n              this.useLocalConfigurationProvider);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n      this.rmContext \u003d rmContext;\n\n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d\n          new CapacitySchedulerConfiguration(conf,\n              this.useLocalConfigurationProvider);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "25bc68d15eb005180ab366e3b9470294018bd2b9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1041. Added the ApplicationMasterProtocol API for applications to use the ability in ResourceManager to optionally not kill containers when the ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557318 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 11:07 PM",
      "commitName": "25bc68d15eb005180ab366e3b9470294018bd2b9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/01/14 5:15 PM",
      "commitNameOld": "f677175f35f68bde9df72e648dffacbd31cfd620",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n       this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n-\n+      this.applications \u003d\n+          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n       this.rmContext \u003d rmContext;\n-      \n+\n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n \n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n      this.applications \u003d\n          new ConcurrentHashMap\u003cApplicationId, SchedulerApplication\u003e();\n      this.rmContext \u003d rmContext;\n\n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1008. MiniYARNCluster with multiple nodemanagers, all nodes have same key for allocations. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 8:39 AM",
      "commitName": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "20/07/13 7:59 AM",
      "commitNameOld": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 37.03,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n+      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n \n       this.rmContext \u003d rmContext;\n       \n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n \n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n      this.usePortForNodeName \u003d this.conf.getUsePortForNodeName();\n\n      this.rmContext \u003d rmContext;\n      \n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "334de8d21189109dcd2423d13fab56477980872b": {
      "type": "Ybodychange",
      "commitMessage": " ARN-803. factor out scheduler config validation from the ResourceManager to each scheduler implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 10:07 AM",
      "commitName": "334de8d21189109dcd2423d13fab56477980872b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "06/06/13 11:46 AM",
      "commitNameOld": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 7.93,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n-      \n+      validateConf(this.conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n       this.calculator \u003d this.conf.getResourceCalculator();\n \n       this.rmContext \u003d rmContext;\n       \n       initializeQueues(this.conf);\n       \n       initialized \u003d true;\n       LOG.info(\"Initialized CapacityScheduler with \" +\n           \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n           \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n           \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n \n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      validateConf(this.conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      validateConf(this.conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n\n      this.rmContext \u003d rmContext;\n      \n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      validateConf(this.conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 41.13,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,30 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      \n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.calculator \u003d this.conf.getResourceCalculator();\n+\n       this.rmContext \u003d rmContext;\n+      \n       initializeQueues(this.conf);\n+      \n       initialized \u003d true;\n+      LOG.info(\"Initialized CapacityScheduler with \" +\n+          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n+          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n+          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n     } else {\n \n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      \n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.calculator \u003d this.conf.getResourceCalculator();\n\n      this.rmContext \u003d rmContext;\n      \n      initializeQueues(this.conf);\n      \n      initialized \u003d true;\n      LOG.info(\"Initialized CapacityScheduler with \" +\n          \"calculator\u003d\" + getResourceCalculator().getClass() + \", \" +\n          \"minimumAllocation\u003d\u003c\" + getMinimumResourceCapability() + \"\u003e, \" +\n          \"maximumAllocation\u003d\u003c\" + getMaximumResourceCapability() + \"\u003e\");\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 16.87,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,21 @@\n-  public synchronized void reinitialize(Configuration conf,\n-      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n-  throws IOException {\n+      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n-      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       initializeQueues(this.conf);\n       initialized \u003d true;\n     } else {\n \n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, containerTokenSecretManager-ContainerTokenSecretManager, rmContext-RMContext]",
            "newValue": "[conf-Configuration, rmContext-RMContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 16.87,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,21 @@\n-  public synchronized void reinitialize(Configuration conf,\n-      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n-  throws IOException {\n+      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n     if (!initialized) {\n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n       this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n-      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       initializeQueues(this.conf);\n       initialized \u003d true;\n     } else {\n \n       CapacitySchedulerConfiguration oldConf \u003d this.conf; \n       this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n         LOG.info(\"Re-initializing queues...\");\n         reinitializeQueues(this.conf);\n       } catch (Throwable t) {\n         this.conf \u003d oldConf;\n         throw new IOException(\"Failed to re-init queues\", t);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n-        ResourceCalculatorPlugin monitor, Progressive progress) {\n-      // add some time between 2 calls to initialize()\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n+  throws IOException {\n+    if (!initialized) {\n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n+      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      initializeQueues(this.conf);\n+      initialized \u003d true;\n+    } else {\n+\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n-        Thread.sleep(1000); // sleep for 1s\n-      } catch (Exception e){}\n-      \n-      try {\n-        fs \u003d FileSystem.getLocal(conf);\n-        \n-        Path initPath \u003d getInitFilePath(getIdentifier());\n-        fs.delete(initPath, false); // delete the old file\n-        fs.create(initPath).close(); // create a new one\n-        \n-        touchPath \u003d getFilePath(getIdentifier());\n-        fs.delete(touchPath, false);\n-      } catch (Exception e) {\n-        \n-      } finally {\n-        if (fs !\u003d null) {\n-          try {\n-            fs.deleteOnExit(tempDir);\n-          } catch (IOException ioe){}\n-        }\n+        LOG.info(\"Re-initializing queues...\");\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        throw new IOException(\"Failed to re-init queues\", t);\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/contrib/gridmix/src/test/org/apache/hadoop/mapred/gridmix/TestResourceUsageEmulators.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
            "oldMethodName": "initialize",
            "newMethodName": "reinitialize"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n-        ResourceCalculatorPlugin monitor, Progressive progress) {\n-      // add some time between 2 calls to initialize()\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n+  throws IOException {\n+    if (!initialized) {\n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n+      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      initializeQueues(this.conf);\n+      initialized \u003d true;\n+    } else {\n+\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n-        Thread.sleep(1000); // sleep for 1s\n-      } catch (Exception e){}\n-      \n-      try {\n-        fs \u003d FileSystem.getLocal(conf);\n-        \n-        Path initPath \u003d getInitFilePath(getIdentifier());\n-        fs.delete(initPath, false); // delete the old file\n-        fs.create(initPath).close(); // create a new one\n-        \n-        touchPath \u003d getFilePath(getIdentifier());\n-        fs.delete(touchPath, false);\n-      } catch (Exception e) {\n-        \n-      } finally {\n-        if (fs !\u003d null) {\n-          try {\n-            fs.deleteOnExit(tempDir);\n-          } catch (IOException ioe){}\n-        }\n+        LOG.info(\"Re-initializing queues...\");\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        throw new IOException(\"Failed to re-init queues\", t);\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n-        ResourceCalculatorPlugin monitor, Progressive progress) {\n-      // add some time between 2 calls to initialize()\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n+  throws IOException {\n+    if (!initialized) {\n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n+      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      initializeQueues(this.conf);\n+      initialized \u003d true;\n+    } else {\n+\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n-        Thread.sleep(1000); // sleep for 1s\n-      } catch (Exception e){}\n-      \n-      try {\n-        fs \u003d FileSystem.getLocal(conf);\n-        \n-        Path initPath \u003d getInitFilePath(getIdentifier());\n-        fs.delete(initPath, false); // delete the old file\n-        fs.create(initPath).close(); // create a new one\n-        \n-        touchPath \u003d getFilePath(getIdentifier());\n-        fs.delete(touchPath, false);\n-      } catch (Exception e) {\n-        \n-      } finally {\n-        if (fs !\u003d null) {\n-          try {\n-            fs.deleteOnExit(tempDir);\n-          } catch (IOException ioe){}\n-        }\n+        LOG.info(\"Re-initializing queues...\");\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        throw new IOException(\"Failed to re-init queues\", t);\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n-        ResourceCalculatorPlugin monitor, Progressive progress) {\n-      // add some time between 2 calls to initialize()\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n+  throws IOException {\n+    if (!initialized) {\n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n+      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      initializeQueues(this.conf);\n+      initialized \u003d true;\n+    } else {\n+\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n-        Thread.sleep(1000); // sleep for 1s\n-      } catch (Exception e){}\n-      \n-      try {\n-        fs \u003d FileSystem.getLocal(conf);\n-        \n-        Path initPath \u003d getInitFilePath(getIdentifier());\n-        fs.delete(initPath, false); // delete the old file\n-        fs.create(initPath).close(); // create a new one\n-        \n-        touchPath \u003d getFilePath(getIdentifier());\n-        fs.delete(touchPath, false);\n-      } catch (Exception e) {\n-        \n-      } finally {\n-        if (fs !\u003d null) {\n-          try {\n-            fs.deleteOnExit(tempDir);\n-          } catch (IOException ioe){}\n-        }\n+        LOG.info(\"Re-initializing queues...\");\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        throw new IOException(\"Failed to re-init queues\", t);\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n-        ResourceCalculatorPlugin monitor, Progressive progress) {\n-      // add some time between 2 calls to initialize()\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n+  throws IOException {\n+    if (!initialized) {\n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n+      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      initializeQueues(this.conf);\n+      initialized \u003d true;\n+    } else {\n+\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n-        Thread.sleep(1000); // sleep for 1s\n-      } catch (Exception e){}\n-      \n-      try {\n-        fs \u003d FileSystem.getLocal(conf);\n-        \n-        Path initPath \u003d getInitFilePath(getIdentifier());\n-        fs.delete(initPath, false); // delete the old file\n-        fs.create(initPath).close(); // create a new one\n-        \n-        touchPath \u003d getFilePath(getIdentifier());\n-        fs.delete(touchPath, false);\n-      } catch (Exception e) {\n-        \n-      } finally {\n-        if (fs !\u003d null) {\n-          try {\n-            fs.deleteOnExit(tempDir);\n-          } catch (IOException ioe){}\n-        }\n+        LOG.info(\"Re-initializing queues...\");\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        throw new IOException(\"Failed to re-init queues\", t);\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "initialize",
            "newValue": "reinitialize"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,24 @@\n-    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n-        ResourceCalculatorPlugin monitor, Progressive progress) {\n-      // add some time between 2 calls to initialize()\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n+  throws IOException {\n+    if (!initialized) {\n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n+      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n+      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      initializeQueues(this.conf);\n+      initialized \u003d true;\n+    } else {\n+\n+      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n+      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n       try {\n-        Thread.sleep(1000); // sleep for 1s\n-      } catch (Exception e){}\n-      \n-      try {\n-        fs \u003d FileSystem.getLocal(conf);\n-        \n-        Path initPath \u003d getInitFilePath(getIdentifier());\n-        fs.delete(initPath, false); // delete the old file\n-        fs.create(initPath).close(); // create a new one\n-        \n-        touchPath \u003d getFilePath(getIdentifier());\n-        fs.delete(touchPath, false);\n-      } catch (Exception e) {\n-        \n-      } finally {\n-        if (fs !\u003d null) {\n-          try {\n-            fs.deleteOnExit(tempDir);\n-          } catch (IOException ioe){}\n-        }\n+        LOG.info(\"Re-initializing queues...\");\n+        reinitializeQueues(this.conf);\n+      } catch (Throwable t) {\n+        this.conf \u003d oldConf;\n+        throw new IOException(\"Failed to re-init queues\", t);\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, RMContext rmContext) \n  throws IOException {\n    if (!initialized) {\n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      this.minimumAllocation \u003d this.conf.getMinimumAllocation();\n      this.maximumAllocation \u003d this.conf.getMaximumAllocation();\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      initializeQueues(this.conf);\n      initialized \u003d true;\n    } else {\n\n      CapacitySchedulerConfiguration oldConf \u003d this.conf; \n      this.conf \u003d new CapacitySchedulerConfiguration(conf);\n      try {\n        LOG.info(\"Re-initializing queues...\");\n        reinitializeQueues(this.conf);\n      } catch (Throwable t) {\n        this.conf \u003d oldConf;\n        throw new IOException(\"Failed to re-init queues\", t);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, metrics-ResourceUsageMetrics, monitor-ResourceCalculatorPlugin, progress-Progressive]",
            "newValue": "[conf-Configuration, containerTokenSecretManager-ContainerTokenSecretManager, rmContext-RMContext]"
          }
        }
      ]
    },
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2106. [Gridmix] Cumulative CPU usage emulation in Gridmix. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1135396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/11 12:44 AM",
      "commitName": "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,26 @@\n+    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n+        ResourceCalculatorPlugin monitor, Progressive progress) {\n+      // add some time between 2 calls to initialize()\n+      try {\n+        Thread.sleep(1000); // sleep for 1s\n+      } catch (Exception e){}\n+      \n+      try {\n+        fs \u003d FileSystem.getLocal(conf);\n+        \n+        Path initPath \u003d getInitFilePath(getIdentifier());\n+        fs.delete(initPath, false); // delete the old file\n+        fs.create(initPath).close(); // create a new one\n+        \n+        touchPath \u003d getFilePath(getIdentifier());\n+        fs.delete(touchPath, false);\n+      } catch (Exception e) {\n+        \n+      } finally {\n+        if (fs !\u003d null) {\n+          try {\n+            fs.deleteOnExit(tempDir);\n+          } catch (IOException ioe){}\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void initialize(Configuration conf, ResourceUsageMetrics metrics,\n        ResourceCalculatorPlugin monitor, Progressive progress) {\n      // add some time between 2 calls to initialize()\n      try {\n        Thread.sleep(1000); // sleep for 1s\n      } catch (Exception e){}\n      \n      try {\n        fs \u003d FileSystem.getLocal(conf);\n        \n        Path initPath \u003d getInitFilePath(getIdentifier());\n        fs.delete(initPath, false); // delete the old file\n        fs.create(initPath).close(); // create a new one\n        \n        touchPath \u003d getFilePath(getIdentifier());\n        fs.delete(touchPath, false);\n      } catch (Exception e) {\n        \n      } finally {\n        if (fs !\u003d null) {\n          try {\n            fs.deleteOnExit(tempDir);\n          } catch (IOException ioe){}\n        }\n      }\n    }",
      "path": "mapreduce/src/contrib/gridmix/src/test/org/apache/hadoop/mapred/gridmix/TestResourceUsageEmulators.java"
    }
  }
}