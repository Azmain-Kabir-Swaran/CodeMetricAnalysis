{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HostsFileReader.java",
  "functionName": "readFileToSetWithFileInputStream",
  "functionId": "readFileToSetWithFileInputStream___type-String__filename-String__fileInputStream-InputStream__set-Set__String__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
  "functionStartLine": 85,
  "functionEndLine": 116,
  "numCommitsSeen": 16,
  "timeTaken": 1685,
  "changeHistory": [
    "770b5eb2db686275df445be9280e76cc3710ffdc",
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a"
  ],
  "changeHistoryShort": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": "Ybodychange",
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51": "Ybodychange",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13444. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "01/08/16 1:35 AM",
      "commitName": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "19/05/16 1:01 PM",
      "commitNameOld": "feb90ffcca536e7deac50976b8a8774450fe089f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 73.52,
      "commitsBetweenForRepo": 598,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public static void readFileToSetWithFileInputStream(String type,\n       String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n       throws IOException {\n     BufferedReader reader \u003d null;\n     try {\n       reader \u003d new BufferedReader(\n-          new InputStreamReader(fileInputStream, Charsets.UTF_8));\n+          new InputStreamReader(fileInputStream, StandardCharsets.UTF_8));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n         if (nodes !\u003d null) {\n           for (int i \u003d 0; i \u003c nodes.length; i++) {\n             nodes[i] \u003d nodes[i].trim();\n             if (nodes[i].startsWith(\"#\")) {\n               // Everything from now on is a comment\n               break;\n             }\n             if (!nodes[i].isEmpty()) {\n               LOG.info(\"Adding a node \\\"\" + nodes[i] + \"\\\" to the list of \"\n                   + type + \" hosts from \" + filename);\n               set.add(nodes[i]);\n             }\n           }\n         }\n       }\n     } finally {\n       if (reader !\u003d null) {\n         reader.close();\n       }\n       fileInputStream.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void readFileToSetWithFileInputStream(String type,\n      String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n      throws IOException {\n    BufferedReader reader \u003d null;\n    try {\n      reader \u003d new BufferedReader(\n          new InputStreamReader(fileInputStream, StandardCharsets.UTF_8));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n        if (nodes !\u003d null) {\n          for (int i \u003d 0; i \u003c nodes.length; i++) {\n            nodes[i] \u003d nodes[i].trim();\n            if (nodes[i].startsWith(\"#\")) {\n              // Everything from now on is a comment\n              break;\n            }\n            if (!nodes[i].isEmpty()) {\n              LOG.info(\"Adding a node \\\"\" + nodes[i] + \"\\\" to the list of \"\n                  + type + \" hosts from \" + filename);\n              set.add(nodes[i]);\n            }\n          }\n        }\n      }\n    } finally {\n      if (reader !\u003d null) {\n        reader.close();\n      }\n      fileInputStream.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
      "extendedDetails": {}
    },
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8826. In Balancer, add an option to specify the source node list so that balancer only selects blocks to move from those nodes.\n",
      "commitDate": "18/08/15 7:25 PM",
      "commitName": "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 250.07,
      "commitsBetweenForRepo": 1940,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   public static void readFileToSetWithFileInputStream(String type,\n       String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n       throws IOException {\n     BufferedReader reader \u003d null;\n     try {\n       reader \u003d new BufferedReader(\n           new InputStreamReader(fileInputStream, Charsets.UTF_8));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n         if (nodes !\u003d null) {\n           for (int i \u003d 0; i \u003c nodes.length; i++) {\n-            if (nodes[i].trim().startsWith(\"#\")) {\n+            nodes[i] \u003d nodes[i].trim();\n+            if (nodes[i].startsWith(\"#\")) {\n               // Everything from now on is a comment\n               break;\n             }\n             if (!nodes[i].isEmpty()) {\n-              LOG.info(\"Adding \" + nodes[i] + \" to the list of \" + type +\n-                  \" hosts from \" + filename);\n+              LOG.info(\"Adding a node \\\"\" + nodes[i] + \"\\\" to the list of \"\n+                  + type + \" hosts from \" + filename);\n               set.add(nodes[i]);\n             }\n           }\n         }\n       }\n     } finally {\n       if (reader !\u003d null) {\n         reader.close();\n       }\n       fileInputStream.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void readFileToSetWithFileInputStream(String type,\n      String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n      throws IOException {\n    BufferedReader reader \u003d null;\n    try {\n      reader \u003d new BufferedReader(\n          new InputStreamReader(fileInputStream, Charsets.UTF_8));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n        if (nodes !\u003d null) {\n          for (int i \u003d 0; i \u003c nodes.length; i++) {\n            nodes[i] \u003d nodes[i].trim();\n            if (nodes[i].startsWith(\"#\")) {\n              // Everything from now on is a comment\n              break;\n            }\n            if (!nodes[i].isEmpty()) {\n              LOG.info(\"Adding a node \\\"\" + nodes[i] + \"\\\" to the list of \"\n                  + type + \" hosts from \" + filename);\n              set.add(nodes[i]);\n            }\n          }\n        }\n      }\n    } finally {\n      if (reader !\u003d null) {\n        reader.close();\n      }\n      fileInputStream.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
      "extendedDetails": {}
    },
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/03/14 12:03 PM",
      "commitNameOld": "a126a01fa197beebe955837c8f2efbd3257f7aa5",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 260.24,
      "commitsBetweenForRepo": 2096,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public static void readFileToSetWithFileInputStream(String type,\n       String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n       throws IOException {\n     BufferedReader reader \u003d null;\n     try {\n-      reader \u003d new BufferedReader(new InputStreamReader(fileInputStream));\n+      reader \u003d new BufferedReader(\n+          new InputStreamReader(fileInputStream, Charsets.UTF_8));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n         if (nodes !\u003d null) {\n           for (int i \u003d 0; i \u003c nodes.length; i++) {\n             if (nodes[i].trim().startsWith(\"#\")) {\n               // Everything from now on is a comment\n               break;\n             }\n             if (!nodes[i].isEmpty()) {\n               LOG.info(\"Adding \" + nodes[i] + \" to the list of \" + type +\n                   \" hosts from \" + filename);\n               set.add(nodes[i]);\n             }\n           }\n         }\n       }\n     } finally {\n       if (reader !\u003d null) {\n         reader.close();\n       }\n       fileInputStream.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void readFileToSetWithFileInputStream(String type,\n      String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n      throws IOException {\n    BufferedReader reader \u003d null;\n    try {\n      reader \u003d new BufferedReader(\n          new InputStreamReader(fileInputStream, Charsets.UTF_8));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n        if (nodes !\u003d null) {\n          for (int i \u003d 0; i \u003c nodes.length; i++) {\n            if (nodes[i].trim().startsWith(\"#\")) {\n              // Everything from now on is a comment\n              break;\n            }\n            if (!nodes[i].isEmpty()) {\n              LOG.info(\"Adding \" + nodes[i] + \" to the list of \" + type +\n                  \" hosts from \" + filename);\n              set.add(nodes[i]);\n            }\n          }\n        }\n      }\n    } finally {\n      if (reader !\u003d null) {\n        reader.close();\n      }\n      fileInputStream.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  public static void readFileToSetWithFileInputStream(String type,\n+      String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n+      throws IOException {\n+    BufferedReader reader \u003d null;\n+    try {\n+      reader \u003d new BufferedReader(new InputStreamReader(fileInputStream));\n+      String line;\n+      while ((line \u003d reader.readLine()) !\u003d null) {\n+        String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n+        if (nodes !\u003d null) {\n+          for (int i \u003d 0; i \u003c nodes.length; i++) {\n+            if (nodes[i].trim().startsWith(\"#\")) {\n+              // Everything from now on is a comment\n+              break;\n+            }\n+            if (!nodes[i].isEmpty()) {\n+              LOG.info(\"Adding \" + nodes[i] + \" to the list of \" + type +\n+                  \" hosts from \" + filename);\n+              set.add(nodes[i]);\n+            }\n+          }\n+        }\n+      }\n+    } finally {\n+      if (reader !\u003d null) {\n+        reader.close();\n+      }\n+      fileInputStream.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void readFileToSetWithFileInputStream(String type,\n      String filename, InputStream fileInputStream, Set\u003cString\u003e set)\n      throws IOException {\n    BufferedReader reader \u003d null;\n    try {\n      reader \u003d new BufferedReader(new InputStreamReader(fileInputStream));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        String[] nodes \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n        if (nodes !\u003d null) {\n          for (int i \u003d 0; i \u003c nodes.length; i++) {\n            if (nodes[i].trim().startsWith(\"#\")) {\n              // Everything from now on is a comment\n              break;\n            }\n            if (!nodes[i].isEmpty()) {\n              LOG.info(\"Adding \" + nodes[i] + \" to the list of \" + type +\n                  \" hosts from \" + filename);\n              set.add(nodes[i]);\n            }\n          }\n        }\n      }\n    } finally {\n      if (reader !\u003d null) {\n        reader.close();\n      }\n      fileInputStream.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java"
    }
  }
}