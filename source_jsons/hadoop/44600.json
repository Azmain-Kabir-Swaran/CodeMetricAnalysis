{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "printContainerInfoFromRunningApplication",
  "functionId": "printContainerInfoFromRunningApplication___options-ContainerLogsRequest__logCliHelper-LogCLIHelpers",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 1356,
  "functionEndLine": 1405,
  "numCommitsSeen": 88,
  "timeTaken": 3122,
  "changeHistory": [
    "871dc420f8a4f151189c0925e062c64859a8f275",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a"
  ],
  "changeHistoryShort": {
    "871dc420f8a4f151189c0925e062c64859a8f275": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "871dc420f8a4f151189c0925e062c64859a8f275": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
      "commitDate": "14/03/17 12:58 PM",
      "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
          "commitDate": "14/03/17 12:58 PM",
          "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 40.47,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,50 @@\n   private int printContainerInfoFromRunningApplication(\n-      ContainerLogsRequest options) throws YarnException, IOException {\n+      ContainerLogsRequest options, LogCLIHelpers logCliHelper)\n+      throws YarnException, IOException, ClientHandlerException,\n+      UniformInterfaceException, JSONException {\n     String containerIdStr \u003d options.getContainerId();\n     String nodeIdStr \u003d options.getNodeId();\n     List\u003cContainerReport\u003e reports \u003d\n         getContainerReportsFromRunningApplication(options);\n     List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n         options, reports);\n     if (filteredReports.isEmpty()) {\n-      StringBuilder sb \u003d new StringBuilder();\n-      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n-        sb.append(\"Trying to get container with ContainerId: \"\n-            + containerIdStr + \"\\n\");\n+      // if we specify the containerId as well as NodeAddress\n+      String nodeHttpAddress \u003d null;\n+      if (options.getContainerId() !\u003d null\n+          \u0026\u0026 !options.getContainerId().isEmpty()) {\n+        nodeHttpAddress \u003d getNodeHttpAddressFromRMWebString(options);\n       }\n-      if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n-        sb.append(\"Trying to get container from NodeManager: \"\n-            + nodeIdStr + \"\\n\");\n+      if (nodeHttpAddress !\u003d null) {\n+        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),\n+            nodeHttpAddress);\n+        return 0;\n+      } else {\n+        int result \u003d logCliHelper.printAContainerLogMetadata(\n+            options, System.out, System.err);\n+        if (result \u003d\u003d -1) {\n+          StringBuilder sb \u003d new StringBuilder();\n+          if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n+            sb.append(\"Trying to get container with ContainerId: \"\n+                + containerIdStr + \"\\n\");\n+          }\n+          if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n+            sb.append(\"Trying to get container from NodeManager: \"\n+                + nodeIdStr + \"\\n\");\n+          }\n+          sb.append(\"Can not find any matched containers for the application: \"\n+              + options.getAppId());\n+          System.err.println(sb.toString());\n+        }\n+        return result;\n       }\n-      sb.append(\"Can not find any matched containers for the application: \"\n-          + options.getAppId());\n-      System.err.println(sb.toString());\n-      return -1;\n     }\n     for (ContainerReport report : filteredReports) {\n       String nodeId \u003d report.getAssignedNode().toString();\n       String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n           WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n       String containerId \u003d report.getContainerId().toString();\n-      String containerString \u003d String.format(\n-          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n-      outStream.println(containerString);\n-      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-          \"LogFile\", \"LogLength\", \"LastModificationTime\");\n-      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      List\u003cPerContainerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n-          getConf(), containerId, nodeHttpAddress);\n-      for (PerContainerLogFileInfo info : infos) {\n-        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-            info.getFileName(), info.getFileSize(),\n-            info.getLastModifiedTime());\n-      }\n+      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printContainerInfoFromRunningApplication(\n      ContainerLogsRequest options, LogCLIHelpers logCliHelper)\n      throws YarnException, IOException, ClientHandlerException,\n      UniformInterfaceException, JSONException {\n    String containerIdStr \u003d options.getContainerId();\n    String nodeIdStr \u003d options.getNodeId();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n        options, reports);\n    if (filteredReports.isEmpty()) {\n      // if we specify the containerId as well as NodeAddress\n      String nodeHttpAddress \u003d null;\n      if (options.getContainerId() !\u003d null\n          \u0026\u0026 !options.getContainerId().isEmpty()) {\n        nodeHttpAddress \u003d getNodeHttpAddressFromRMWebString(options);\n      }\n      if (nodeHttpAddress !\u003d null) {\n        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),\n            nodeHttpAddress);\n        return 0;\n      } else {\n        int result \u003d logCliHelper.printAContainerLogMetadata(\n            options, System.out, System.err);\n        if (result \u003d\u003d -1) {\n          StringBuilder sb \u003d new StringBuilder();\n          if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n            sb.append(\"Trying to get container with ContainerId: \"\n                + containerIdStr + \"\\n\");\n          }\n          if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n            sb.append(\"Trying to get container from NodeManager: \"\n                + nodeIdStr + \"\\n\");\n          }\n          sb.append(\"Can not find any matched containers for the application: \"\n              + options.getAppId());\n          System.err.println(sb.toString());\n        }\n        return result;\n      }\n    }\n    for (ContainerReport report : filteredReports) {\n      String nodeId \u003d report.getAssignedNode().toString();\n      String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n          WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n      String containerId \u003d report.getContainerId().toString();\n      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[options-ContainerLogsRequest]",
            "newValue": "[options-ContainerLogsRequest, logCliHelper-LogCLIHelpers]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
          "commitDate": "14/03/17 12:58 PM",
          "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 40.47,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,50 @@\n   private int printContainerInfoFromRunningApplication(\n-      ContainerLogsRequest options) throws YarnException, IOException {\n+      ContainerLogsRequest options, LogCLIHelpers logCliHelper)\n+      throws YarnException, IOException, ClientHandlerException,\n+      UniformInterfaceException, JSONException {\n     String containerIdStr \u003d options.getContainerId();\n     String nodeIdStr \u003d options.getNodeId();\n     List\u003cContainerReport\u003e reports \u003d\n         getContainerReportsFromRunningApplication(options);\n     List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n         options, reports);\n     if (filteredReports.isEmpty()) {\n-      StringBuilder sb \u003d new StringBuilder();\n-      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n-        sb.append(\"Trying to get container with ContainerId: \"\n-            + containerIdStr + \"\\n\");\n+      // if we specify the containerId as well as NodeAddress\n+      String nodeHttpAddress \u003d null;\n+      if (options.getContainerId() !\u003d null\n+          \u0026\u0026 !options.getContainerId().isEmpty()) {\n+        nodeHttpAddress \u003d getNodeHttpAddressFromRMWebString(options);\n       }\n-      if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n-        sb.append(\"Trying to get container from NodeManager: \"\n-            + nodeIdStr + \"\\n\");\n+      if (nodeHttpAddress !\u003d null) {\n+        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),\n+            nodeHttpAddress);\n+        return 0;\n+      } else {\n+        int result \u003d logCliHelper.printAContainerLogMetadata(\n+            options, System.out, System.err);\n+        if (result \u003d\u003d -1) {\n+          StringBuilder sb \u003d new StringBuilder();\n+          if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n+            sb.append(\"Trying to get container with ContainerId: \"\n+                + containerIdStr + \"\\n\");\n+          }\n+          if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n+            sb.append(\"Trying to get container from NodeManager: \"\n+                + nodeIdStr + \"\\n\");\n+          }\n+          sb.append(\"Can not find any matched containers for the application: \"\n+              + options.getAppId());\n+          System.err.println(sb.toString());\n+        }\n+        return result;\n       }\n-      sb.append(\"Can not find any matched containers for the application: \"\n-          + options.getAppId());\n-      System.err.println(sb.toString());\n-      return -1;\n     }\n     for (ContainerReport report : filteredReports) {\n       String nodeId \u003d report.getAssignedNode().toString();\n       String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n           WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n       String containerId \u003d report.getContainerId().toString();\n-      String containerString \u003d String.format(\n-          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n-      outStream.println(containerString);\n-      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-          \"LogFile\", \"LogLength\", \"LastModificationTime\");\n-      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      List\u003cPerContainerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n-          getConf(), containerId, nodeHttpAddress);\n-      for (PerContainerLogFileInfo info : infos) {\n-        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-            info.getFileName(), info.getFileSize(),\n-            info.getLastModifiedTime());\n-      }\n+      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printContainerInfoFromRunningApplication(\n      ContainerLogsRequest options, LogCLIHelpers logCliHelper)\n      throws YarnException, IOException, ClientHandlerException,\n      UniformInterfaceException, JSONException {\n    String containerIdStr \u003d options.getContainerId();\n    String nodeIdStr \u003d options.getNodeId();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n        options, reports);\n    if (filteredReports.isEmpty()) {\n      // if we specify the containerId as well as NodeAddress\n      String nodeHttpAddress \u003d null;\n      if (options.getContainerId() !\u003d null\n          \u0026\u0026 !options.getContainerId().isEmpty()) {\n        nodeHttpAddress \u003d getNodeHttpAddressFromRMWebString(options);\n      }\n      if (nodeHttpAddress !\u003d null) {\n        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),\n            nodeHttpAddress);\n        return 0;\n      } else {\n        int result \u003d logCliHelper.printAContainerLogMetadata(\n            options, System.out, System.err);\n        if (result \u003d\u003d -1) {\n          StringBuilder sb \u003d new StringBuilder();\n          if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n            sb.append(\"Trying to get container with ContainerId: \"\n                + containerIdStr + \"\\n\");\n          }\n          if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n            sb.append(\"Trying to get container from NodeManager: \"\n                + nodeIdStr + \"\\n\");\n          }\n          sb.append(\"Can not find any matched containers for the application: \"\n              + options.getAppId());\n          System.err.println(sb.toString());\n        }\n        return result;\n      }\n    }\n    for (ContainerReport report : filteredReports) {\n      String nodeId \u003d report.getAssignedNode().toString();\n      String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n          WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n      String containerId \u003d report.getContainerId().toString();\n      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[YarnException, IOException]",
            "newValue": "[YarnException, IOException, ClientHandlerException, UniformInterfaceException, JSONException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
          "commitDate": "14/03/17 12:58 PM",
          "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 40.47,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,50 @@\n   private int printContainerInfoFromRunningApplication(\n-      ContainerLogsRequest options) throws YarnException, IOException {\n+      ContainerLogsRequest options, LogCLIHelpers logCliHelper)\n+      throws YarnException, IOException, ClientHandlerException,\n+      UniformInterfaceException, JSONException {\n     String containerIdStr \u003d options.getContainerId();\n     String nodeIdStr \u003d options.getNodeId();\n     List\u003cContainerReport\u003e reports \u003d\n         getContainerReportsFromRunningApplication(options);\n     List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n         options, reports);\n     if (filteredReports.isEmpty()) {\n-      StringBuilder sb \u003d new StringBuilder();\n-      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n-        sb.append(\"Trying to get container with ContainerId: \"\n-            + containerIdStr + \"\\n\");\n+      // if we specify the containerId as well as NodeAddress\n+      String nodeHttpAddress \u003d null;\n+      if (options.getContainerId() !\u003d null\n+          \u0026\u0026 !options.getContainerId().isEmpty()) {\n+        nodeHttpAddress \u003d getNodeHttpAddressFromRMWebString(options);\n       }\n-      if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n-        sb.append(\"Trying to get container from NodeManager: \"\n-            + nodeIdStr + \"\\n\");\n+      if (nodeHttpAddress !\u003d null) {\n+        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),\n+            nodeHttpAddress);\n+        return 0;\n+      } else {\n+        int result \u003d logCliHelper.printAContainerLogMetadata(\n+            options, System.out, System.err);\n+        if (result \u003d\u003d -1) {\n+          StringBuilder sb \u003d new StringBuilder();\n+          if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n+            sb.append(\"Trying to get container with ContainerId: \"\n+                + containerIdStr + \"\\n\");\n+          }\n+          if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n+            sb.append(\"Trying to get container from NodeManager: \"\n+                + nodeIdStr + \"\\n\");\n+          }\n+          sb.append(\"Can not find any matched containers for the application: \"\n+              + options.getAppId());\n+          System.err.println(sb.toString());\n+        }\n+        return result;\n       }\n-      sb.append(\"Can not find any matched containers for the application: \"\n-          + options.getAppId());\n-      System.err.println(sb.toString());\n-      return -1;\n     }\n     for (ContainerReport report : filteredReports) {\n       String nodeId \u003d report.getAssignedNode().toString();\n       String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n           WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n       String containerId \u003d report.getContainerId().toString();\n-      String containerString \u003d String.format(\n-          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n-      outStream.println(containerString);\n-      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-          \"LogFile\", \"LogLength\", \"LastModificationTime\");\n-      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      List\u003cPerContainerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n-          getConf(), containerId, nodeHttpAddress);\n-      for (PerContainerLogFileInfo info : infos) {\n-        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-            info.getFileName(), info.getFileSize(),\n-            info.getLastModifiedTime());\n-      }\n+      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printContainerInfoFromRunningApplication(\n      ContainerLogsRequest options, LogCLIHelpers logCliHelper)\n      throws YarnException, IOException, ClientHandlerException,\n      UniformInterfaceException, JSONException {\n    String containerIdStr \u003d options.getContainerId();\n    String nodeIdStr \u003d options.getNodeId();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n        options, reports);\n    if (filteredReports.isEmpty()) {\n      // if we specify the containerId as well as NodeAddress\n      String nodeHttpAddress \u003d null;\n      if (options.getContainerId() !\u003d null\n          \u0026\u0026 !options.getContainerId().isEmpty()) {\n        nodeHttpAddress \u003d getNodeHttpAddressFromRMWebString(options);\n      }\n      if (nodeHttpAddress !\u003d null) {\n        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),\n            nodeHttpAddress);\n        return 0;\n      } else {\n        int result \u003d logCliHelper.printAContainerLogMetadata(\n            options, System.out, System.err);\n        if (result \u003d\u003d -1) {\n          StringBuilder sb \u003d new StringBuilder();\n          if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n            sb.append(\"Trying to get container with ContainerId: \"\n                + containerIdStr + \"\\n\");\n          }\n          if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n            sb.append(\"Trying to get container from NodeManager: \"\n                + nodeIdStr + \"\\n\");\n          }\n          sb.append(\"Can not find any matched containers for the application: \"\n              + options.getAppId());\n          System.err.println(sb.toString());\n        }\n        return result;\n      }\n    }\n    for (ContainerReport report : filteredReports) {\n      String nodeId \u003d report.getAssignedNode().toString();\n      String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n          WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n      String containerId \u003d report.getContainerId().toString();\n      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "commitDateOld": "19/12/16 5:06 PM",
      "commitNameOld": "358341398adfe8f59bb2165472b50751de3ffb98",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 35.93,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   private int printContainerInfoFromRunningApplication(\n       ContainerLogsRequest options) throws YarnException, IOException {\n     String containerIdStr \u003d options.getContainerId();\n     String nodeIdStr \u003d options.getNodeId();\n     List\u003cContainerReport\u003e reports \u003d\n         getContainerReportsFromRunningApplication(options);\n     List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n         options, reports);\n     if (filteredReports.isEmpty()) {\n       StringBuilder sb \u003d new StringBuilder();\n       if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n         sb.append(\"Trying to get container with ContainerId: \"\n             + containerIdStr + \"\\n\");\n       }\n       if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n         sb.append(\"Trying to get container from NodeManager: \"\n             + nodeIdStr + \"\\n\");\n       }\n       sb.append(\"Can not find any matched containers for the application: \"\n           + options.getAppId());\n       System.err.println(sb.toString());\n       return -1;\n     }\n     for (ContainerReport report : filteredReports) {\n       String nodeId \u003d report.getAssignedNode().toString();\n       String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n           WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n       String containerId \u003d report.getContainerId().toString();\n       String containerString \u003d String.format(\n           LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n       outStream.println(containerString);\n       outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-          \"LogType\", \"LogLength\");\n+          \"LogFile\", \"LogLength\", \"LastModificationTime\");\n       outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-      List\u003cPerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n+      List\u003cPerContainerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n           getConf(), containerId, nodeHttpAddress);\n-      for (PerLogFileInfo info : infos) {\n+      for (PerContainerLogFileInfo info : infos) {\n         outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n-            info.getFileName(), info.getFileLength());\n+            info.getFileName(), info.getFileSize(),\n+            info.getLastModifiedTime());\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerInfoFromRunningApplication(\n      ContainerLogsRequest options) throws YarnException, IOException {\n    String containerIdStr \u003d options.getContainerId();\n    String nodeIdStr \u003d options.getNodeId();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n        options, reports);\n    if (filteredReports.isEmpty()) {\n      StringBuilder sb \u003d new StringBuilder();\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        sb.append(\"Trying to get container with ContainerId: \"\n            + containerIdStr + \"\\n\");\n      }\n      if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n        sb.append(\"Trying to get container from NodeManager: \"\n            + nodeIdStr + \"\\n\");\n      }\n      sb.append(\"Can not find any matched containers for the application: \"\n          + options.getAppId());\n      System.err.println(sb.toString());\n      return -1;\n    }\n    for (ContainerReport report : filteredReports) {\n      String nodeId \u003d report.getAssignedNode().toString();\n      String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n          WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n      String containerId \u003d report.getContainerId().toString();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n      outStream.println(containerString);\n      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n          \"LogFile\", \"LogLength\", \"LastModificationTime\");\n      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      List\u003cPerContainerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n          getConf(), containerId, nodeHttpAddress);\n      for (PerContainerLogFileInfo info : infos) {\n        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n            info.getFileName(), info.getFileSize(),\n            info.getLastModifiedTime());\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,44 @@\n+  private int printContainerInfoFromRunningApplication(\n+      ContainerLogsRequest options) throws YarnException, IOException {\n+    String containerIdStr \u003d options.getContainerId();\n+    String nodeIdStr \u003d options.getNodeId();\n+    List\u003cContainerReport\u003e reports \u003d\n+        getContainerReportsFromRunningApplication(options);\n+    List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n+        options, reports);\n+    if (filteredReports.isEmpty()) {\n+      StringBuilder sb \u003d new StringBuilder();\n+      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n+        sb.append(\"Trying to get container with ContainerId: \"\n+            + containerIdStr + \"\\n\");\n+      }\n+      if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n+        sb.append(\"Trying to get container from NodeManager: \"\n+            + nodeIdStr + \"\\n\");\n+      }\n+      sb.append(\"Can not find any matched containers for the application: \"\n+          + options.getAppId());\n+      System.err.println(sb.toString());\n+      return -1;\n+    }\n+    for (ContainerReport report : filteredReports) {\n+      String nodeId \u003d report.getAssignedNode().toString();\n+      String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n+          WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n+      String containerId \u003d report.getContainerId().toString();\n+      String containerString \u003d String.format(\n+          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n+      outStream.println(containerString);\n+      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n+          \"LogType\", \"LogLength\");\n+      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+      List\u003cPerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n+          getConf(), containerId, nodeHttpAddress);\n+      for (PerLogFileInfo info : infos) {\n+        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n+            info.getFileName(), info.getFileLength());\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerInfoFromRunningApplication(\n      ContainerLogsRequest options) throws YarnException, IOException {\n    String containerIdStr \u003d options.getContainerId();\n    String nodeIdStr \u003d options.getNodeId();\n    List\u003cContainerReport\u003e reports \u003d\n        getContainerReportsFromRunningApplication(options);\n    List\u003cContainerReport\u003e filteredReports \u003d filterContainersInfo(\n        options, reports);\n    if (filteredReports.isEmpty()) {\n      StringBuilder sb \u003d new StringBuilder();\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        sb.append(\"Trying to get container with ContainerId: \"\n            + containerIdStr + \"\\n\");\n      }\n      if (nodeIdStr !\u003d null \u0026\u0026 !nodeIdStr.isEmpty()) {\n        sb.append(\"Trying to get container from NodeManager: \"\n            + nodeIdStr + \"\\n\");\n      }\n      sb.append(\"Can not find any matched containers for the application: \"\n          + options.getAppId());\n      System.err.println(sb.toString());\n      return -1;\n    }\n    for (ContainerReport report : filteredReports) {\n      String nodeId \u003d report.getAssignedNode().toString();\n      String nodeHttpAddress \u003d report.getNodeHttpAddress().replaceFirst(\n          WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\n      String containerId \u003d report.getContainerId().toString();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\n      outStream.println(containerString);\n      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n          \"LogType\", \"LogLength\");\n      outStream.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      List\u003cPerLogFileInfo\u003e infos \u003d getContainerLogFiles(\n          getConf(), containerId, nodeHttpAddress);\n      for (PerLogFileInfo info : infos) {\n        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,\n            info.getFileName(), info.getFileLength());\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}