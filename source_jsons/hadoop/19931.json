{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BinaryProtocol.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java",
  "functionStartLine": 120,
  "functionEndLine": 172,
  "numCommitsSeen": 7,
  "timeTaken": 4447,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      while (true) {\n        try {\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException();\n          }\n          int cmd \u003d WritableUtils.readVInt(inStream);\n          LOG.debug(\"Handling uplink command \" + cmd);\n          if (cmd \u003d\u003d MessageType.AUTHENTICATION_RESP.code) {\n            String digest \u003d Text.readString(inStream);\n            authPending \u003d !handler.authenticate(digest);\n          } else if (authPending) {\n            LOG.warn(\"Message \" + cmd + \" received before authentication is \"\n                + \"complete. Ignoring\");\n            continue;\n          } else if (cmd \u003d\u003d MessageType.OUTPUT.code) {\n            readObject(key);\n            readObject(value);\n            handler.output(key, value);\n          } else if (cmd \u003d\u003d MessageType.PARTITIONED_OUTPUT.code) {\n            int part \u003d WritableUtils.readVInt(inStream);\n            readObject(key);\n            readObject(value);\n            handler.partitionedOutput(part, key, value);\n          } else if (cmd \u003d\u003d MessageType.STATUS.code) {\n            handler.status(Text.readString(inStream));\n          } else if (cmd \u003d\u003d MessageType.PROGRESS.code) {\n            handler.progress(inStream.readFloat());\n          } else if (cmd \u003d\u003d MessageType.REGISTER_COUNTER.code) {\n            int id \u003d WritableUtils.readVInt(inStream);\n            String group \u003d Text.readString(inStream);\n            String name \u003d Text.readString(inStream);\n            handler.registerCounter(id, group, name);\n          } else if (cmd \u003d\u003d MessageType.INCREMENT_COUNTER.code) {\n            int id \u003d WritableUtils.readVInt(inStream);\n            long amount \u003d WritableUtils.readVLong(inStream);\n            handler.incrementCounter(id, amount);\n          } else if (cmd \u003d\u003d MessageType.DONE.code) {\n            LOG.debug(\"Pipe child done\");\n            handler.done();\n            return;\n          } else {\n            throw new IOException(\"Bad command code: \" + cmd);\n          }\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          LOG.error(StringUtils.stringifyException(e));\n          handler.failed(e);\n          return;\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      while (true) {\n        try {\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException();\n          }\n          int cmd \u003d WritableUtils.readVInt(inStream);\n          LOG.debug(\"Handling uplink command \" + cmd);\n          if (cmd \u003d\u003d MessageType.AUTHENTICATION_RESP.code) {\n            String digest \u003d Text.readString(inStream);\n            authPending \u003d !handler.authenticate(digest);\n          } else if (authPending) {\n            LOG.warn(\"Message \" + cmd + \" received before authentication is \"\n                + \"complete. Ignoring\");\n            continue;\n          } else if (cmd \u003d\u003d MessageType.OUTPUT.code) {\n            readObject(key);\n            readObject(value);\n            handler.output(key, value);\n          } else if (cmd \u003d\u003d MessageType.PARTITIONED_OUTPUT.code) {\n            int part \u003d WritableUtils.readVInt(inStream);\n            readObject(key);\n            readObject(value);\n            handler.partitionedOutput(part, key, value);\n          } else if (cmd \u003d\u003d MessageType.STATUS.code) {\n            handler.status(Text.readString(inStream));\n          } else if (cmd \u003d\u003d MessageType.PROGRESS.code) {\n            handler.progress(inStream.readFloat());\n          } else if (cmd \u003d\u003d MessageType.REGISTER_COUNTER.code) {\n            int id \u003d WritableUtils.readVInt(inStream);\n            String group \u003d Text.readString(inStream);\n            String name \u003d Text.readString(inStream);\n            handler.registerCounter(id, group, name);\n          } else if (cmd \u003d\u003d MessageType.INCREMENT_COUNTER.code) {\n            int id \u003d WritableUtils.readVInt(inStream);\n            long amount \u003d WritableUtils.readVLong(inStream);\n            handler.incrementCounter(id, amount);\n          } else if (cmd \u003d\u003d MessageType.DONE.code) {\n            LOG.debug(\"Pipe child done\");\n            handler.done();\n            return;\n          } else {\n            throw new IOException(\"Bad command code: \" + cmd);\n          }\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          LOG.error(StringUtils.stringifyException(e));\n          handler.failed(e);\n          return;\n        }\n      }\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,53 @@\n+    public void run() {\n+      while (true) {\n+        try {\n+          if (Thread.currentThread().isInterrupted()) {\n+            throw new InterruptedException();\n+          }\n+          int cmd \u003d WritableUtils.readVInt(inStream);\n+          LOG.debug(\"Handling uplink command \" + cmd);\n+          if (cmd \u003d\u003d MessageType.AUTHENTICATION_RESP.code) {\n+            String digest \u003d Text.readString(inStream);\n+            authPending \u003d !handler.authenticate(digest);\n+          } else if (authPending) {\n+            LOG.warn(\"Message \" + cmd + \" received before authentication is \"\n+                + \"complete. Ignoring\");\n+            continue;\n+          } else if (cmd \u003d\u003d MessageType.OUTPUT.code) {\n+            readObject(key);\n+            readObject(value);\n+            handler.output(key, value);\n+          } else if (cmd \u003d\u003d MessageType.PARTITIONED_OUTPUT.code) {\n+            int part \u003d WritableUtils.readVInt(inStream);\n+            readObject(key);\n+            readObject(value);\n+            handler.partitionedOutput(part, key, value);\n+          } else if (cmd \u003d\u003d MessageType.STATUS.code) {\n+            handler.status(Text.readString(inStream));\n+          } else if (cmd \u003d\u003d MessageType.PROGRESS.code) {\n+            handler.progress(inStream.readFloat());\n+          } else if (cmd \u003d\u003d MessageType.REGISTER_COUNTER.code) {\n+            int id \u003d WritableUtils.readVInt(inStream);\n+            String group \u003d Text.readString(inStream);\n+            String name \u003d Text.readString(inStream);\n+            handler.registerCounter(id, group, name);\n+          } else if (cmd \u003d\u003d MessageType.INCREMENT_COUNTER.code) {\n+            int id \u003d WritableUtils.readVInt(inStream);\n+            long amount \u003d WritableUtils.readVLong(inStream);\n+            handler.incrementCounter(id, amount);\n+          } else if (cmd \u003d\u003d MessageType.DONE.code) {\n+            LOG.debug(\"Pipe child done\");\n+            handler.done();\n+            return;\n+          } else {\n+            throw new IOException(\"Bad command code: \" + cmd);\n+          }\n+        } catch (InterruptedException e) {\n+          return;\n+        } catch (Throwable e) {\n+          LOG.error(StringUtils.stringifyException(e));\n+          handler.failed(e);\n+          return;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (true) {\n        try {\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException();\n          }\n          int cmd \u003d WritableUtils.readVInt(inStream);\n          LOG.debug(\"Handling uplink command \" + cmd);\n          if (cmd \u003d\u003d MessageType.AUTHENTICATION_RESP.code) {\n            String digest \u003d Text.readString(inStream);\n            authPending \u003d !handler.authenticate(digest);\n          } else if (authPending) {\n            LOG.warn(\"Message \" + cmd + \" received before authentication is \"\n                + \"complete. Ignoring\");\n            continue;\n          } else if (cmd \u003d\u003d MessageType.OUTPUT.code) {\n            readObject(key);\n            readObject(value);\n            handler.output(key, value);\n          } else if (cmd \u003d\u003d MessageType.PARTITIONED_OUTPUT.code) {\n            int part \u003d WritableUtils.readVInt(inStream);\n            readObject(key);\n            readObject(value);\n            handler.partitionedOutput(part, key, value);\n          } else if (cmd \u003d\u003d MessageType.STATUS.code) {\n            handler.status(Text.readString(inStream));\n          } else if (cmd \u003d\u003d MessageType.PROGRESS.code) {\n            handler.progress(inStream.readFloat());\n          } else if (cmd \u003d\u003d MessageType.REGISTER_COUNTER.code) {\n            int id \u003d WritableUtils.readVInt(inStream);\n            String group \u003d Text.readString(inStream);\n            String name \u003d Text.readString(inStream);\n            handler.registerCounter(id, group, name);\n          } else if (cmd \u003d\u003d MessageType.INCREMENT_COUNTER.code) {\n            int id \u003d WritableUtils.readVInt(inStream);\n            long amount \u003d WritableUtils.readVLong(inStream);\n            handler.incrementCounter(id, amount);\n          } else if (cmd \u003d\u003d MessageType.DONE.code) {\n            LOG.debug(\"Pipe child done\");\n            handler.done();\n            return;\n          } else {\n            throw new IOException(\"Bad command code: \" + cmd);\n          }\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          LOG.error(StringUtils.stringifyException(e));\n          handler.failed(e);\n          return;\n        }\n      }\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/pipes/BinaryProtocol.java"
    }
  }
}