{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageReconstructor.java",
  "functionName": "expectTag",
  "functionId": "expectTag___expected-String__allowEnd-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
  "functionStartLine": 184,
  "functionEndLine": 229,
  "numCommitsSeen": 15,
  "timeTaken": 1320,
  "changeHistory": [
    "700b0e4019cf483f7532609711812150b8c44742"
  ],
  "changeHistoryShort": {
    "700b0e4019cf483f7532609711812150b8c44742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,46 @@\n+  private XMLEvent expectTag(String expected, boolean allowEnd)\n+      throws IOException {\n+    XMLEvent ev \u003d null;\n+    while (true) {\n+      try {\n+        ev \u003d events.nextEvent();\n+      } catch (XMLStreamException e) {\n+        throw new IOException(\"Expecting \" + expected +\n+            \", but got XMLStreamException\", e);\n+      }\n+      switch (ev.getEventType()) {\n+      case XMLEvent.ATTRIBUTE:\n+        throw new IOException(\"Got unexpected attribute: \" + ev);\n+      case XMLEvent.CHARACTERS:\n+        if (!ev.asCharacters().isWhiteSpace()) {\n+          throw new IOException(\"Got unxpected characters while \" +\n+              \"looking for \" + expected + \": \" +\n+              ev.asCharacters().getData());\n+        }\n+        break;\n+      case XMLEvent.END_ELEMENT:\n+        if (!allowEnd) {\n+          throw new IOException(\"Got unexpected end event \" +\n+              \"while looking for \" + expected);\n+        }\n+        return ev;\n+      case XMLEvent.START_ELEMENT:\n+        if (!expected.startsWith(\"[\")) {\n+          if (!ev.asStartElement().getName().getLocalPart().\n+                equals(expected)) {\n+            throw new IOException(\"Failed to find \u003c\" + expected + \"\u003e; \" +\n+                \"got \" + ev.asStartElement().getName().getLocalPart() +\n+                \" instead.\");\n+          }\n+        }\n+        return ev;\n+      default:\n+        // Ignore other event types like comment, etc.\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"Skipping XMLEvent of type \" +\n+              ev.getEventType() + \"(\" +  ev + \")\");\n+        }\n+        break;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private XMLEvent expectTag(String expected, boolean allowEnd)\n      throws IOException {\n    XMLEvent ev \u003d null;\n    while (true) {\n      try {\n        ev \u003d events.nextEvent();\n      } catch (XMLStreamException e) {\n        throw new IOException(\"Expecting \" + expected +\n            \", but got XMLStreamException\", e);\n      }\n      switch (ev.getEventType()) {\n      case XMLEvent.ATTRIBUTE:\n        throw new IOException(\"Got unexpected attribute: \" + ev);\n      case XMLEvent.CHARACTERS:\n        if (!ev.asCharacters().isWhiteSpace()) {\n          throw new IOException(\"Got unxpected characters while \" +\n              \"looking for \" + expected + \": \" +\n              ev.asCharacters().getData());\n        }\n        break;\n      case XMLEvent.END_ELEMENT:\n        if (!allowEnd) {\n          throw new IOException(\"Got unexpected end event \" +\n              \"while looking for \" + expected);\n        }\n        return ev;\n      case XMLEvent.START_ELEMENT:\n        if (!expected.startsWith(\"[\")) {\n          if (!ev.asStartElement().getName().getLocalPart().\n                equals(expected)) {\n            throw new IOException(\"Failed to find \u003c\" + expected + \"\u003e; \" +\n                \"got \" + ev.asStartElement().getName().getLocalPart() +\n                \" instead.\");\n          }\n        }\n        return ev;\n      default:\n        // Ignore other event types like comment, etc.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Skipping XMLEvent of type \" +\n              ev.getEventType() + \"(\" +  ev + \")\");\n        }\n        break;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java"
    }
  }
}