{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNode.java",
  "functionName": "copyEditLogSegmentsToSharedDir",
  "functionId": "copyEditLogSegmentsToSharedDir___fsns-FSNamesystem__sharedEditsDirs-Collection__URI____newSharedStorage-NNStorage__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
  "functionStartLine": 1409,
  "functionEndLine": 1468,
  "numCommitsSeen": 210,
  "timeTaken": 5627,
  "changeHistory": [
    "3b22fcd377eecedacceb6e37368463b48e0133c8",
    "2151716832ad14932dd65b1a4e47e64d8d6cd767",
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
    "2fc7e14e392f188958b9867a5d2dd563dfcc378a",
    "b38bd555e837569672dfd48ea1b60e60efc71648",
    "07a436744588d131d8ef31abab3093aa59b4d531"
  ],
  "changeHistoryShort": {
    "3b22fcd377eecedacceb6e37368463b48e0133c8": "Ybodychange",
    "2151716832ad14932dd65b1a4e47e64d8d6cd767": "Ybodychange",
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": "Ybodychange",
    "2fc7e14e392f188958b9867a5d2dd563dfcc378a": "Ybodychange",
    "b38bd555e837569672dfd48ea1b60e60efc71648": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
    "07a436744588d131d8ef31abab3093aa59b4d531": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3b22fcd377eecedacceb6e37368463b48e0133c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14256. Review Logging of NameNode Class. Contributed by David Mollitor.\n",
      "commitDate": "29/08/19 2:21 PM",
      "commitName": "3b22fcd377eecedacceb6e37368463b48e0133c8",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "16/08/19 2:53 PM",
      "commitNameOld": "a38b9e137e67571d2df83a7a9505b66cffefa7c8",
      "commitAuthorOld": "hunshenshi",
      "daysBetweenCommits": 12.98,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,60 @@\n   private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n       Configuration conf) throws IOException {\n     Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n         \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n     List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n     FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n         sharedEditsUris);\n     newSharedEditLog.initJournalsForWrite();\n     newSharedEditLog.recoverUnclosedStreams();\n     \n     FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n     \n     long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n     \n     Collection\u003cEditLogInputStream\u003e streams \u003d null;\n     try {\n       streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n \n       // Set the nextTxid to the CheckpointTxId+1\n       newSharedEditLog.setNextTxId(fromTxId + 1);\n \n       // Copy all edits after last CheckpointTxId to shared edits dir\n       for (EditLogInputStream stream : streams) {\n-        LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n+        LOG.debug(\"Beginning to copy stream {} to shared edits\", stream);\n         FSEditLogOp op;\n         boolean segmentOpen \u003d false;\n         while ((op \u003d stream.readOp()) !\u003d null) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"copying op: \" + op);\n-          }\n+          LOG.trace(\"copying op: {}\", op);\n           if (!segmentOpen) {\n             newSharedEditLog.startLogSegment(op.txid, false,\n                 fsns.getEffectiveLayoutVersion());\n             segmentOpen \u003d true;\n           }\n \n           newSharedEditLog.logEdit(op);\n \n           if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n             newSharedEditLog.endCurrentLogSegment(false);\n-            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n-                + stream);\n+            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in {}\",\n+                stream);\n             segmentOpen \u003d false;\n           }\n         }\n \n         if (segmentOpen) {\n-          LOG.debug(\"ending log segment because of end of stream in \" + stream);\n+          LOG.debug(\"ending log segment because of end of stream in {}\",\n+              stream);\n           newSharedEditLog.logSync();\n           newSharedEditLog.endCurrentLogSegment(false);\n           segmentOpen \u003d false;\n         }\n       }\n     } finally {\n       if (streams !\u003d null) {\n         FSEditLog.closeAllStreams(streams);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    \n    Collection\u003cEditLogInputStream\u003e streams \u003d null;\n    try {\n      streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n\n      // Set the nextTxid to the CheckpointTxId+1\n      newSharedEditLog.setNextTxId(fromTxId + 1);\n\n      // Copy all edits after last CheckpointTxId to shared edits dir\n      for (EditLogInputStream stream : streams) {\n        LOG.debug(\"Beginning to copy stream {} to shared edits\", stream);\n        FSEditLogOp op;\n        boolean segmentOpen \u003d false;\n        while ((op \u003d stream.readOp()) !\u003d null) {\n          LOG.trace(\"copying op: {}\", op);\n          if (!segmentOpen) {\n            newSharedEditLog.startLogSegment(op.txid, false,\n                fsns.getEffectiveLayoutVersion());\n            segmentOpen \u003d true;\n          }\n\n          newSharedEditLog.logEdit(op);\n\n          if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n            newSharedEditLog.endCurrentLogSegment(false);\n            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in {}\",\n                stream);\n            segmentOpen \u003d false;\n          }\n        }\n\n        if (segmentOpen) {\n          LOG.debug(\"ending log segment because of end of stream in {}\",\n              stream);\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          segmentOpen \u003d false;\n        }\n      }\n    } finally {\n      if (streams !\u003d null) {\n        FSEditLog.closeAllStreams(streams);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "2151716832ad14932dd65b1a4e47e64d8d6cd767": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7964. Add support for async edit logging. Contributed by Daryn Sharp.\n",
      "commitDate": "29/02/16 3:34 PM",
      "commitName": "2151716832ad14932dd65b1a4e47e64d8d6cd767",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "18/02/16 8:35 AM",
      "commitNameOld": "e78d8e66f748c68d2d88ee748facbfa35817d5e3",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.29,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,61 @@\n   private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n       Configuration conf) throws IOException {\n     Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n         \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n     List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n     FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n         sharedEditsUris);\n     newSharedEditLog.initJournalsForWrite();\n     newSharedEditLog.recoverUnclosedStreams();\n     \n     FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n     \n     long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n     \n     Collection\u003cEditLogInputStream\u003e streams \u003d null;\n     try {\n       streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n \n       // Set the nextTxid to the CheckpointTxId+1\n       newSharedEditLog.setNextTxId(fromTxId + 1);\n \n       // Copy all edits after last CheckpointTxId to shared edits dir\n       for (EditLogInputStream stream : streams) {\n         LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n         FSEditLogOp op;\n         boolean segmentOpen \u003d false;\n         while ((op \u003d stream.readOp()) !\u003d null) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(\"copying op: \" + op);\n           }\n           if (!segmentOpen) {\n             newSharedEditLog.startLogSegment(op.txid, false,\n                 fsns.getEffectiveLayoutVersion());\n             segmentOpen \u003d true;\n           }\n \n           newSharedEditLog.logEdit(op);\n \n           if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n-            newSharedEditLog.logSync();\n             newSharedEditLog.endCurrentLogSegment(false);\n             LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n                 + stream);\n             segmentOpen \u003d false;\n           }\n         }\n \n         if (segmentOpen) {\n           LOG.debug(\"ending log segment because of end of stream in \" + stream);\n           newSharedEditLog.logSync();\n           newSharedEditLog.endCurrentLogSegment(false);\n           segmentOpen \u003d false;\n         }\n       }\n     } finally {\n       if (streams !\u003d null) {\n         FSEditLog.closeAllStreams(streams);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    \n    Collection\u003cEditLogInputStream\u003e streams \u003d null;\n    try {\n      streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n\n      // Set the nextTxid to the CheckpointTxId+1\n      newSharedEditLog.setNextTxId(fromTxId + 1);\n\n      // Copy all edits after last CheckpointTxId to shared edits dir\n      for (EditLogInputStream stream : streams) {\n        LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n        FSEditLogOp op;\n        boolean segmentOpen \u003d false;\n        while ((op \u003d stream.readOp()) !\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"copying op: \" + op);\n          }\n          if (!segmentOpen) {\n            newSharedEditLog.startLogSegment(op.txid, false,\n                fsns.getEffectiveLayoutVersion());\n            segmentOpen \u003d true;\n          }\n\n          newSharedEditLog.logEdit(op);\n\n          if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n            newSharedEditLog.endCurrentLogSegment(false);\n            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n                + stream);\n            segmentOpen \u003d false;\n          }\n        }\n\n        if (segmentOpen) {\n          LOG.debug(\"ending log segment because of end of stream in \" + stream);\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          segmentOpen \u003d false;\n        }\n      }\n    } finally {\n      if (streams !\u003d null) {\n        FSEditLog.closeAllStreams(streams);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
      "commitDate": "06/06/15 9:43 AM",
      "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "11/05/15 8:18 AM",
      "commitNameOld": "1dd79ffaca4b0c2cb0ab817dff3697686f3367e3",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 26.06,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n       Configuration conf) throws IOException {\n     Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n         \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n     List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n     FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n         sharedEditsUris);\n     newSharedEditLog.initJournalsForWrite();\n     newSharedEditLog.recoverUnclosedStreams();\n     \n     FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n     \n     long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n     \n     Collection\u003cEditLogInputStream\u003e streams \u003d null;\n     try {\n       streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n \n       // Set the nextTxid to the CheckpointTxId+1\n       newSharedEditLog.setNextTxId(fromTxId + 1);\n \n       // Copy all edits after last CheckpointTxId to shared edits dir\n       for (EditLogInputStream stream : streams) {\n         LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n         FSEditLogOp op;\n         boolean segmentOpen \u003d false;\n         while ((op \u003d stream.readOp()) !\u003d null) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(\"copying op: \" + op);\n           }\n           if (!segmentOpen) {\n-            newSharedEditLog.startLogSegment(op.txid, false);\n+            newSharedEditLog.startLogSegment(op.txid, false,\n+                fsns.getEffectiveLayoutVersion());\n             segmentOpen \u003d true;\n           }\n \n           newSharedEditLog.logEdit(op);\n \n           if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n             newSharedEditLog.logSync();\n             newSharedEditLog.endCurrentLogSegment(false);\n             LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n                 + stream);\n             segmentOpen \u003d false;\n           }\n         }\n \n         if (segmentOpen) {\n           LOG.debug(\"ending log segment because of end of stream in \" + stream);\n           newSharedEditLog.logSync();\n           newSharedEditLog.endCurrentLogSegment(false);\n           segmentOpen \u003d false;\n         }\n       }\n     } finally {\n       if (streams !\u003d null) {\n         FSEditLog.closeAllStreams(streams);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    \n    Collection\u003cEditLogInputStream\u003e streams \u003d null;\n    try {\n      streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n\n      // Set the nextTxid to the CheckpointTxId+1\n      newSharedEditLog.setNextTxId(fromTxId + 1);\n\n      // Copy all edits after last CheckpointTxId to shared edits dir\n      for (EditLogInputStream stream : streams) {\n        LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n        FSEditLogOp op;\n        boolean segmentOpen \u003d false;\n        while ((op \u003d stream.readOp()) !\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"copying op: \" + op);\n          }\n          if (!segmentOpen) {\n            newSharedEditLog.startLogSegment(op.txid, false,\n                fsns.getEffectiveLayoutVersion());\n            segmentOpen \u003d true;\n          }\n\n          newSharedEditLog.logEdit(op);\n\n          if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n            newSharedEditLog.logSync();\n            newSharedEditLog.endCurrentLogSegment(false);\n            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n                + stream);\n            segmentOpen \u003d false;\n          }\n        }\n\n        if (segmentOpen) {\n          LOG.debug(\"ending log segment because of end of stream in \" + stream);\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          segmentOpen \u003d false;\n        }\n      }\n    } finally {\n      if (streams !\u003d null) {\n        FSEditLog.closeAllStreams(streams);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "2fc7e14e392f188958b9867a5d2dd563dfcc378a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5099. Namenode#copyEditLogSegmentsToSharedDir should close EditLogInputStreams upon finishing. Contributed by Chuan Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514481 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/13 1:43 PM",
      "commitName": "2fc7e14e392f188958b9867a5d2dd563dfcc378a",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "30/07/13 12:51 AM",
      "commitNameOld": "8c7a7e619699386f9e6991842558d78aa0c8053d",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 16.54,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,61 @@\n   private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n       Configuration conf) throws IOException {\n     Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n         \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n     List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n     FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n         sharedEditsUris);\n     newSharedEditLog.initJournalsForWrite();\n     newSharedEditLog.recoverUnclosedStreams();\n     \n     FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n     \n     long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n-    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n-        fromTxId+1, 0);\n-\n-    // Set the nextTxid to the CheckpointTxId+1\n-    newSharedEditLog.setNextTxId(fromTxId + 1);\n     \n-    // Copy all edits after last CheckpointTxId to shared edits dir\n-    for (EditLogInputStream stream : streams) {\n-      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n-      FSEditLogOp op;\n-      boolean segmentOpen \u003d false;\n-      while ((op \u003d stream.readOp()) !\u003d null) {\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"copying op: \" + op);\n-        }\n-        if (!segmentOpen) {\n-          newSharedEditLog.startLogSegment(op.txid, false);\n-          segmentOpen \u003d true;\n-        }\n-        \n-        newSharedEditLog.logEdit(op);\n+    Collection\u003cEditLogInputStream\u003e streams \u003d null;\n+    try {\n+      streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n \n-        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n+      // Set the nextTxid to the CheckpointTxId+1\n+      newSharedEditLog.setNextTxId(fromTxId + 1);\n+\n+      // Copy all edits after last CheckpointTxId to shared edits dir\n+      for (EditLogInputStream stream : streams) {\n+        LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n+        FSEditLogOp op;\n+        boolean segmentOpen \u003d false;\n+        while ((op \u003d stream.readOp()) !\u003d null) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"copying op: \" + op);\n+          }\n+          if (!segmentOpen) {\n+            newSharedEditLog.startLogSegment(op.txid, false);\n+            segmentOpen \u003d true;\n+          }\n+\n+          newSharedEditLog.logEdit(op);\n+\n+          if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n+            newSharedEditLog.logSync();\n+            newSharedEditLog.endCurrentLogSegment(false);\n+            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n+                + stream);\n+            segmentOpen \u003d false;\n+          }\n+        }\n+\n+        if (segmentOpen) {\n+          LOG.debug(\"ending log segment because of end of stream in \" + stream);\n           newSharedEditLog.logSync();\n           newSharedEditLog.endCurrentLogSegment(false);\n-          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n           segmentOpen \u003d false;\n         }\n       }\n-      \n-      if (segmentOpen) {\n-        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n-        newSharedEditLog.logSync();\n-        newSharedEditLog.endCurrentLogSegment(false);\n-        segmentOpen \u003d false;\n+    } finally {\n+      if (streams !\u003d null) {\n+        FSEditLog.closeAllStreams(streams);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    \n    Collection\u003cEditLogInputStream\u003e streams \u003d null;\n    try {\n      streams \u003d sourceEditLog.selectInputStreams(fromTxId + 1, 0);\n\n      // Set the nextTxid to the CheckpointTxId+1\n      newSharedEditLog.setNextTxId(fromTxId + 1);\n\n      // Copy all edits after last CheckpointTxId to shared edits dir\n      for (EditLogInputStream stream : streams) {\n        LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n        FSEditLogOp op;\n        boolean segmentOpen \u003d false;\n        while ((op \u003d stream.readOp()) !\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"copying op: \" + op);\n          }\n          if (!segmentOpen) {\n            newSharedEditLog.startLogSegment(op.txid, false);\n            segmentOpen \u003d true;\n          }\n\n          newSharedEditLog.logEdit(op);\n\n          if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n            newSharedEditLog.logSync();\n            newSharedEditLog.endCurrentLogSegment(false);\n            LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \"\n                + stream);\n            segmentOpen \u003d false;\n          }\n        }\n\n        if (segmentOpen) {\n          LOG.debug(\"ending log segment because of end of stream in \" + stream);\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          segmentOpen \u003d false;\n        }\n      }\n    } finally {\n      if (streams !\u003d null) {\n        FSEditLog.closeAllStreams(streams);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "b38bd555e837569672dfd48ea1b60e60efc71648": {
      "type": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-3765. namenode -initializeSharedEdits should be able to initialize all shared storages. Contributed by Vinay and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373061 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 1:11 PM",
      "commitName": "b38bd555e837569672dfd48ea1b60e60efc71648",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-3765. namenode -initializeSharedEdits should be able to initialize all shared storages. Contributed by Vinay and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/12 1:11 PM",
          "commitName": "b38bd555e837569672dfd48ea1b60e60efc71648",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "13/08/12 2:26 PM",
          "commitNameOld": "c93185df660aa4fbb7885794550177286f9f3029",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,53 @@\n-  private static boolean copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n+  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n-      Configuration conf) throws FileNotFoundException, IOException {\n+      Configuration conf) throws IOException {\n+    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n+        \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n-    for (JournalAndStream jas : fsns.getFSImage().getEditLog().getJournals()) {\n-      FileJournalManager fjm \u003d null;\n-      if (!(jas.getManager() instanceof FileJournalManager)) {\n-        LOG.error(\"Cannot populate shared edits dir from non-file \" +\n-            \"journal manager: \" + jas.getManager());\n-        return true; // aborted\n-      } else {\n-        fjm \u003d (FileJournalManager) jas.getManager();\n-      }\n-      for (EditLogFile elf : fjm.getLogFiles(fsns.getFSImage()\n-          .getMostRecentCheckpointTxId())) {\n-        File editLogSegment \u003d elf.getFile();\n-        for (URI sharedEditsUri : sharedEditsDirs) {\n-          StorageDirectory sharedEditsDir \u003d newSharedStorage\n-              .getStorageDirectory(sharedEditsUri);\n-          File targetFile \u003d new File(sharedEditsDir.getCurrentDir(),\n-              editLogSegment.getName());\n-          if (!targetFile.exists()) {\n-            InputStream in \u003d null;\n-            OutputStream out \u003d null;\n-            try {\n-              in \u003d new FileInputStream(editLogSegment);\n-              out \u003d new AtomicFileOutputStream(targetFile);\n-              IOUtils.copyBytes(in, out, conf);\n-            } finally {\n-              IOUtils.cleanup(LOG, in, out);\n-            }\n-          }\n+    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n+    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n+        sharedEditsUris);\n+    newSharedEditLog.initJournalsForWrite();\n+    newSharedEditLog.recoverUnclosedStreams();\n+    \n+    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n+    \n+    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n+    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n+        fromTxId+1, 0);\n+\n+    // Set the nextTxid to the CheckpointTxId+1\n+    newSharedEditLog.setNextTxId(fromTxId + 1);\n+    \n+    // Copy all edits after last CheckpointTxId to shared edits dir\n+    for (EditLogInputStream stream : streams) {\n+      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n+      FSEditLogOp op;\n+      boolean segmentOpen \u003d false;\n+      while ((op \u003d stream.readOp()) !\u003d null) {\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"copying op: \" + op);\n+        }\n+        if (!segmentOpen) {\n+          newSharedEditLog.startLogSegment(op.txid, false);\n+          segmentOpen \u003d true;\n+        }\n+        \n+        newSharedEditLog.logEdit(op);\n+\n+        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n+          newSharedEditLog.logSync();\n+          newSharedEditLog.endCurrentLogSegment(false);\n+          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n+          segmentOpen \u003d false;\n         }\n       }\n+      \n+      if (segmentOpen) {\n+        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n+        newSharedEditLog.logSync();\n+        newSharedEditLog.endCurrentLogSegment(false);\n+        segmentOpen \u003d false;\n+      }\n     }\n-    return false; // did not abort\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n        fromTxId+1, 0);\n\n    // Set the nextTxid to the CheckpointTxId+1\n    newSharedEditLog.setNextTxId(fromTxId + 1);\n    \n    // Copy all edits after last CheckpointTxId to shared edits dir\n    for (EditLogInputStream stream : streams) {\n      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n      FSEditLogOp op;\n      boolean segmentOpen \u003d false;\n      while ((op \u003d stream.readOp()) !\u003d null) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"copying op: \" + op);\n        }\n        if (!segmentOpen) {\n          newSharedEditLog.startLogSegment(op.txid, false);\n          segmentOpen \u003d true;\n        }\n        \n        newSharedEditLog.logEdit(op);\n\n        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n          segmentOpen \u003d false;\n        }\n      }\n      \n      if (segmentOpen) {\n        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n        newSharedEditLog.logSync();\n        newSharedEditLog.endCurrentLogSegment(false);\n        segmentOpen \u003d false;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "void"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-3765. namenode -initializeSharedEdits should be able to initialize all shared storages. Contributed by Vinay and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/12 1:11 PM",
          "commitName": "b38bd555e837569672dfd48ea1b60e60efc71648",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "13/08/12 2:26 PM",
          "commitNameOld": "c93185df660aa4fbb7885794550177286f9f3029",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,53 @@\n-  private static boolean copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n+  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n-      Configuration conf) throws FileNotFoundException, IOException {\n+      Configuration conf) throws IOException {\n+    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n+        \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n-    for (JournalAndStream jas : fsns.getFSImage().getEditLog().getJournals()) {\n-      FileJournalManager fjm \u003d null;\n-      if (!(jas.getManager() instanceof FileJournalManager)) {\n-        LOG.error(\"Cannot populate shared edits dir from non-file \" +\n-            \"journal manager: \" + jas.getManager());\n-        return true; // aborted\n-      } else {\n-        fjm \u003d (FileJournalManager) jas.getManager();\n-      }\n-      for (EditLogFile elf : fjm.getLogFiles(fsns.getFSImage()\n-          .getMostRecentCheckpointTxId())) {\n-        File editLogSegment \u003d elf.getFile();\n-        for (URI sharedEditsUri : sharedEditsDirs) {\n-          StorageDirectory sharedEditsDir \u003d newSharedStorage\n-              .getStorageDirectory(sharedEditsUri);\n-          File targetFile \u003d new File(sharedEditsDir.getCurrentDir(),\n-              editLogSegment.getName());\n-          if (!targetFile.exists()) {\n-            InputStream in \u003d null;\n-            OutputStream out \u003d null;\n-            try {\n-              in \u003d new FileInputStream(editLogSegment);\n-              out \u003d new AtomicFileOutputStream(targetFile);\n-              IOUtils.copyBytes(in, out, conf);\n-            } finally {\n-              IOUtils.cleanup(LOG, in, out);\n-            }\n-          }\n+    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n+    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n+        sharedEditsUris);\n+    newSharedEditLog.initJournalsForWrite();\n+    newSharedEditLog.recoverUnclosedStreams();\n+    \n+    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n+    \n+    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n+    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n+        fromTxId+1, 0);\n+\n+    // Set the nextTxid to the CheckpointTxId+1\n+    newSharedEditLog.setNextTxId(fromTxId + 1);\n+    \n+    // Copy all edits after last CheckpointTxId to shared edits dir\n+    for (EditLogInputStream stream : streams) {\n+      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n+      FSEditLogOp op;\n+      boolean segmentOpen \u003d false;\n+      while ((op \u003d stream.readOp()) !\u003d null) {\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"copying op: \" + op);\n+        }\n+        if (!segmentOpen) {\n+          newSharedEditLog.startLogSegment(op.txid, false);\n+          segmentOpen \u003d true;\n+        }\n+        \n+        newSharedEditLog.logEdit(op);\n+\n+        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n+          newSharedEditLog.logSync();\n+          newSharedEditLog.endCurrentLogSegment(false);\n+          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n+          segmentOpen \u003d false;\n         }\n       }\n+      \n+      if (segmentOpen) {\n+        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n+        newSharedEditLog.logSync();\n+        newSharedEditLog.endCurrentLogSegment(false);\n+        segmentOpen \u003d false;\n+      }\n     }\n-    return false; // did not abort\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n        fromTxId+1, 0);\n\n    // Set the nextTxid to the CheckpointTxId+1\n    newSharedEditLog.setNextTxId(fromTxId + 1);\n    \n    // Copy all edits after last CheckpointTxId to shared edits dir\n    for (EditLogInputStream stream : streams) {\n      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n      FSEditLogOp op;\n      boolean segmentOpen \u003d false;\n      while ((op \u003d stream.readOp()) !\u003d null) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"copying op: \" + op);\n        }\n        if (!segmentOpen) {\n          newSharedEditLog.startLogSegment(op.txid, false);\n          segmentOpen \u003d true;\n        }\n        \n        newSharedEditLog.logEdit(op);\n\n        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n          segmentOpen \u003d false;\n        }\n      }\n      \n      if (segmentOpen) {\n        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n        newSharedEditLog.logSync();\n        newSharedEditLog.endCurrentLogSegment(false);\n        segmentOpen \u003d false;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "[FileNotFoundException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3765. namenode -initializeSharedEdits should be able to initialize all shared storages. Contributed by Vinay and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/12 1:11 PM",
          "commitName": "b38bd555e837569672dfd48ea1b60e60efc71648",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "13/08/12 2:26 PM",
          "commitNameOld": "c93185df660aa4fbb7885794550177286f9f3029",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,53 @@\n-  private static boolean copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n+  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n       Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n-      Configuration conf) throws FileNotFoundException, IOException {\n+      Configuration conf) throws IOException {\n+    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n+        \"No shared edits specified\");\n     // Copy edit log segments into the new shared edits dir.\n-    for (JournalAndStream jas : fsns.getFSImage().getEditLog().getJournals()) {\n-      FileJournalManager fjm \u003d null;\n-      if (!(jas.getManager() instanceof FileJournalManager)) {\n-        LOG.error(\"Cannot populate shared edits dir from non-file \" +\n-            \"journal manager: \" + jas.getManager());\n-        return true; // aborted\n-      } else {\n-        fjm \u003d (FileJournalManager) jas.getManager();\n-      }\n-      for (EditLogFile elf : fjm.getLogFiles(fsns.getFSImage()\n-          .getMostRecentCheckpointTxId())) {\n-        File editLogSegment \u003d elf.getFile();\n-        for (URI sharedEditsUri : sharedEditsDirs) {\n-          StorageDirectory sharedEditsDir \u003d newSharedStorage\n-              .getStorageDirectory(sharedEditsUri);\n-          File targetFile \u003d new File(sharedEditsDir.getCurrentDir(),\n-              editLogSegment.getName());\n-          if (!targetFile.exists()) {\n-            InputStream in \u003d null;\n-            OutputStream out \u003d null;\n-            try {\n-              in \u003d new FileInputStream(editLogSegment);\n-              out \u003d new AtomicFileOutputStream(targetFile);\n-              IOUtils.copyBytes(in, out, conf);\n-            } finally {\n-              IOUtils.cleanup(LOG, in, out);\n-            }\n-          }\n+    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n+    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n+        sharedEditsUris);\n+    newSharedEditLog.initJournalsForWrite();\n+    newSharedEditLog.recoverUnclosedStreams();\n+    \n+    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n+    \n+    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n+    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n+        fromTxId+1, 0);\n+\n+    // Set the nextTxid to the CheckpointTxId+1\n+    newSharedEditLog.setNextTxId(fromTxId + 1);\n+    \n+    // Copy all edits after last CheckpointTxId to shared edits dir\n+    for (EditLogInputStream stream : streams) {\n+      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n+      FSEditLogOp op;\n+      boolean segmentOpen \u003d false;\n+      while ((op \u003d stream.readOp()) !\u003d null) {\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"copying op: \" + op);\n+        }\n+        if (!segmentOpen) {\n+          newSharedEditLog.startLogSegment(op.txid, false);\n+          segmentOpen \u003d true;\n+        }\n+        \n+        newSharedEditLog.logEdit(op);\n+\n+        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n+          newSharedEditLog.logSync();\n+          newSharedEditLog.endCurrentLogSegment(false);\n+          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n+          segmentOpen \u003d false;\n         }\n       }\n+      \n+      if (segmentOpen) {\n+        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n+        newSharedEditLog.logSync();\n+        newSharedEditLog.endCurrentLogSegment(false);\n+        segmentOpen \u003d false;\n+      }\n     }\n-    return false; // did not abort\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws IOException {\n    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),\n        \"No shared edits specified\");\n    // Copy edit log segments into the new shared edits dir.\n    List\u003cURI\u003e sharedEditsUris \u003d new ArrayList\u003cURI\u003e(sharedEditsDirs);\n    FSEditLog newSharedEditLog \u003d new FSEditLog(conf, newSharedStorage,\n        sharedEditsUris);\n    newSharedEditLog.initJournalsForWrite();\n    newSharedEditLog.recoverUnclosedStreams();\n    \n    FSEditLog sourceEditLog \u003d fsns.getFSImage().editLog;\n    \n    long fromTxId \u003d fsns.getFSImage().getMostRecentCheckpointTxId();\n    Collection\u003cEditLogInputStream\u003e streams \u003d sourceEditLog.selectInputStreams(\n        fromTxId+1, 0);\n\n    // Set the nextTxid to the CheckpointTxId+1\n    newSharedEditLog.setNextTxId(fromTxId + 1);\n    \n    // Copy all edits after last CheckpointTxId to shared edits dir\n    for (EditLogInputStream stream : streams) {\n      LOG.debug(\"Beginning to copy stream \" + stream + \" to shared edits\");\n      FSEditLogOp op;\n      boolean segmentOpen \u003d false;\n      while ((op \u003d stream.readOp()) !\u003d null) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"copying op: \" + op);\n        }\n        if (!segmentOpen) {\n          newSharedEditLog.startLogSegment(op.txid, false);\n          segmentOpen \u003d true;\n        }\n        \n        newSharedEditLog.logEdit(op);\n\n        if (op.opCode \u003d\u003d FSEditLogOpCodes.OP_END_LOG_SEGMENT) {\n          newSharedEditLog.logSync();\n          newSharedEditLog.endCurrentLogSegment(false);\n          LOG.debug(\"ending log segment because of END_LOG_SEGMENT op in \" + stream);\n          segmentOpen \u003d false;\n        }\n      }\n      \n      if (segmentOpen) {\n        LOG.debug(\"ending log segment because of end of stream in \" + stream);\n        newSharedEditLog.logSync();\n        newSharedEditLog.endCurrentLogSegment(false);\n        segmentOpen \u003d false;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "07a436744588d131d8ef31abab3093aa59b4d531": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3259. NameNode#initializeSharedEdits should populate shared edits dir with edit log segments. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1325518 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/04/12 2:11 PM",
      "commitName": "07a436744588d131d8ef31abab3093aa59b4d531",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,37 @@\n+  private static boolean copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n+      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n+      Configuration conf) throws FileNotFoundException, IOException {\n+    // Copy edit log segments into the new shared edits dir.\n+    for (JournalAndStream jas : fsns.getFSImage().getEditLog().getJournals()) {\n+      FileJournalManager fjm \u003d null;\n+      if (!(jas.getManager() instanceof FileJournalManager)) {\n+        LOG.error(\"Cannot populate shared edits dir from non-file \" +\n+            \"journal manager: \" + jas.getManager());\n+        return true; // aborted\n+      } else {\n+        fjm \u003d (FileJournalManager) jas.getManager();\n+      }\n+      for (EditLogFile elf : fjm.getLogFiles(fsns.getFSImage()\n+          .getMostRecentCheckpointTxId())) {\n+        File editLogSegment \u003d elf.getFile();\n+        for (URI sharedEditsUri : sharedEditsDirs) {\n+          StorageDirectory sharedEditsDir \u003d newSharedStorage\n+              .getStorageDirectory(sharedEditsUri);\n+          File targetFile \u003d new File(sharedEditsDir.getCurrentDir(),\n+              editLogSegment.getName());\n+          if (!targetFile.exists()) {\n+            InputStream in \u003d null;\n+            OutputStream out \u003d null;\n+            try {\n+              in \u003d new FileInputStream(editLogSegment);\n+              out \u003d new AtomicFileOutputStream(targetFile);\n+              IOUtils.copyBytes(in, out, conf);\n+            } finally {\n+              IOUtils.cleanup(LOG, in, out);\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return false; // did not abort\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean copyEditLogSegmentsToSharedDir(FSNamesystem fsns,\n      Collection\u003cURI\u003e sharedEditsDirs, NNStorage newSharedStorage,\n      Configuration conf) throws FileNotFoundException, IOException {\n    // Copy edit log segments into the new shared edits dir.\n    for (JournalAndStream jas : fsns.getFSImage().getEditLog().getJournals()) {\n      FileJournalManager fjm \u003d null;\n      if (!(jas.getManager() instanceof FileJournalManager)) {\n        LOG.error(\"Cannot populate shared edits dir from non-file \" +\n            \"journal manager: \" + jas.getManager());\n        return true; // aborted\n      } else {\n        fjm \u003d (FileJournalManager) jas.getManager();\n      }\n      for (EditLogFile elf : fjm.getLogFiles(fsns.getFSImage()\n          .getMostRecentCheckpointTxId())) {\n        File editLogSegment \u003d elf.getFile();\n        for (URI sharedEditsUri : sharedEditsDirs) {\n          StorageDirectory sharedEditsDir \u003d newSharedStorage\n              .getStorageDirectory(sharedEditsUri);\n          File targetFile \u003d new File(sharedEditsDir.getCurrentDir(),\n              editLogSegment.getName());\n          if (!targetFile.exists()) {\n            InputStream in \u003d null;\n            OutputStream out \u003d null;\n            try {\n              in \u003d new FileInputStream(editLogSegment);\n              out \u003d new AtomicFileOutputStream(targetFile);\n              IOUtils.copyBytes(in, out, conf);\n            } finally {\n              IOUtils.cleanup(LOG, in, out);\n            }\n          }\n        }\n      }\n    }\n    return false; // did not abort\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
    }
  }
}