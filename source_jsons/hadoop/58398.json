{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsyncDispatcher.java",
  "functionName": "register",
  "functionId": "register___eventType-Class__? extends Enum____handler-EventHandler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
  "functionStartLine": 243,
  "functionEndLine": 263,
  "numCommitsSeen": 41,
  "timeTaken": 6997,
  "changeHistory": [
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void register(Class\u003c? extends Enum\u003e eventType,\n      EventHandler handler) {\n    /* check to see if we have a listener registered */\n    EventHandler\u003cEvent\u003e registeredHandler \u003d (EventHandler\u003cEvent\u003e)\n    eventDispatchers.get(eventType);\n    LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\n    if (registeredHandler \u003d\u003d null) {\n      eventDispatchers.put(eventType, handler);\n    } else if (!(registeredHandler instanceof MultiListenerHandler)){\n      /* for multiple listeners of an event add the multiple listener handler */\n      MultiListenerHandler multiHandler \u003d new MultiListenerHandler();\n      multiHandler.addHandler(registeredHandler);\n      multiHandler.addHandler(handler);\n      eventDispatchers.put(eventType, multiHandler);\n    } else {\n      /* already a multilistener, just add to it */\n      MultiListenerHandler multiHandler\n      \u003d (MultiListenerHandler) registeredHandler;\n      multiHandler.addHandler(handler);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
      }
    },
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3567. Extraneous JobConf objects in AM heap. Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1222498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/12/11 2:34 PM",
      "commitName": "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "01/12/11 12:35 AM",
      "commitNameOld": "08da8ea5db5359fc04010be486b842a5d2e6b9c2",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n   public void register(Class\u003c? extends Enum\u003e eventType,\n       EventHandler handler) {\n     /* check to see if we have a listener registered */\n-    @SuppressWarnings(\"unchecked\")\n     EventHandler\u003cEvent\u003e registeredHandler \u003d (EventHandler\u003cEvent\u003e)\n     eventDispatchers.get(eventType);\n     LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\n     if (registeredHandler \u003d\u003d null) {\n       eventDispatchers.put(eventType, handler);\n     } else if (!(registeredHandler instanceof MultiListenerHandler)){\n       /* for multiple listeners of an event add the multiple listener handler */\n       MultiListenerHandler multiHandler \u003d new MultiListenerHandler();\n       multiHandler.addHandler(registeredHandler);\n       multiHandler.addHandler(handler);\n       eventDispatchers.put(eventType, multiHandler);\n     } else {\n       /* already a multilistener, just add to it */\n       MultiListenerHandler multiHandler\n       \u003d (MultiListenerHandler) registeredHandler;\n       multiHandler.addHandler(handler);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void register(Class\u003c? extends Enum\u003e eventType,\n      EventHandler handler) {\n    /* check to see if we have a listener registered */\n    EventHandler\u003cEvent\u003e registeredHandler \u003d (EventHandler\u003cEvent\u003e)\n    eventDispatchers.get(eventType);\n    LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\n    if (registeredHandler \u003d\u003d null) {\n      eventDispatchers.put(eventType, handler);\n    } else if (!(registeredHandler instanceof MultiListenerHandler)){\n      /* for multiple listeners of an event add the multiple listener handler */\n      MultiListenerHandler multiHandler \u003d new MultiListenerHandler();\n      multiHandler.addHandler(registeredHandler);\n      multiHandler.addHandler(handler);\n      eventDispatchers.put(eventType, multiHandler);\n    } else {\n      /* already a multilistener, just add to it */\n      MultiListenerHandler multiHandler\n      \u003d (MultiListenerHandler) registeredHandler;\n      multiHandler.addHandler(handler);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void register(Class\u003c? extends Enum\u003e eventType,\n      EventHandler handler) {\n    /* check to see if we have a listener registered */\n    @SuppressWarnings(\"unchecked\")\n    EventHandler\u003cEvent\u003e registeredHandler \u003d (EventHandler\u003cEvent\u003e)\n    eventDispatchers.get(eventType);\n    LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\n    if (registeredHandler \u003d\u003d null) {\n      eventDispatchers.put(eventType, handler);\n    } else if (!(registeredHandler instanceof MultiListenerHandler)){\n      /* for multiple listeners of an event add the multiple listener handler */\n      MultiListenerHandler multiHandler \u003d new MultiListenerHandler();\n      multiHandler.addHandler(registeredHandler);\n      multiHandler.addHandler(handler);\n      eventDispatchers.put(eventType, multiHandler);\n    } else {\n      /* already a multilistener, just add to it */\n      MultiListenerHandler multiHandler\n      \u003d (MultiListenerHandler) registeredHandler;\n      multiHandler.addHandler(handler);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  public void register(Class\u003c? extends Enum\u003e eventType,\n+      EventHandler handler) {\n+    /* check to see if we have a listener registered */\n+    @SuppressWarnings(\"unchecked\")\n+    EventHandler\u003cEvent\u003e registeredHandler \u003d (EventHandler\u003cEvent\u003e)\n+    eventDispatchers.get(eventType);\n+    LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\n+    if (registeredHandler \u003d\u003d null) {\n+      eventDispatchers.put(eventType, handler);\n+    } else if (!(registeredHandler instanceof MultiListenerHandler)){\n+      /* for multiple listeners of an event add the multiple listener handler */\n+      MultiListenerHandler multiHandler \u003d new MultiListenerHandler();\n+      multiHandler.addHandler(registeredHandler);\n+      multiHandler.addHandler(handler);\n+      eventDispatchers.put(eventType, multiHandler);\n+    } else {\n+      /* already a multilistener, just add to it */\n+      MultiListenerHandler multiHandler\n+      \u003d (MultiListenerHandler) registeredHandler;\n+      multiHandler.addHandler(handler);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void register(Class\u003c? extends Enum\u003e eventType,\n      EventHandler handler) {\n    /* check to see if we have a listener registered */\n    @SuppressWarnings(\"unchecked\")\n    EventHandler\u003cEvent\u003e registeredHandler \u003d (EventHandler\u003cEvent\u003e)\n    eventDispatchers.get(eventType);\n    LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\n    if (registeredHandler \u003d\u003d null) {\n      eventDispatchers.put(eventType, handler);\n    } else if (!(registeredHandler instanceof MultiListenerHandler)){\n      /* for multiple listeners of an event add the multiple listener handler */\n      MultiListenerHandler multiHandler \u003d new MultiListenerHandler();\n      multiHandler.addHandler(registeredHandler);\n      multiHandler.addHandler(handler);\n      eventDispatchers.put(eventType, multiHandler);\n    } else {\n      /* already a multilistener, just add to it */\n      MultiListenerHandler multiHandler\n      \u003d (MultiListenerHandler) registeredHandler;\n      multiHandler.addHandler(handler);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
    }
  }
}