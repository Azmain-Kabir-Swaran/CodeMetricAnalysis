{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionDecommissionInstances",
  "functionId": "actionDecommissionInstances___appName-String__componentInstances-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 408,
  "functionEndLine": 460,
  "numCommitsSeen": 53,
  "timeTaken": 1153,
  "changeHistory": [
    "4c465f5535054dad2ef0b18128fb115129f6939e"
  ],
  "changeHistoryShort": {
    "4c465f5535054dad2ef0b18128fb115129f6939e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c465f5535054dad2ef0b18128fb115129f6939e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8761. Service AM support for decommissioning component instances.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "12/11/18 4:53 PM",
      "commitName": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,53 @@\n+  public int actionDecommissionInstances(String appName,\n+      List\u003cString\u003e componentInstances) throws IOException, YarnException {\n+    checkAppExistOnHdfs(appName);\n+    Service persistedService \u003d ServiceApiUtil.loadService(fs, appName);\n+    if (StringUtils.isEmpty(persistedService.getId())) {\n+      throw new YarnException(\n+          persistedService.getName() + \" appId is null, may be not submitted \" +\n+              \"to YARN yet\");\n+    }\n+    cachedAppInfo.put(persistedService.getName(), new AppInfo(\n+        ApplicationId.fromString(persistedService.getId()), persistedService\n+        .getKerberosPrincipal().getPrincipalName()));\n+\n+    for (String instance : componentInstances) {\n+      String componentName \u003d ServiceApiUtil.parseComponentName(\n+          ServiceApiUtil.parseAndValidateComponentInstanceName(instance,\n+              appName, getConfig()));\n+      Component component \u003d persistedService.getComponent(componentName);\n+      if (component \u003d\u003d null) {\n+        throw new IllegalArgumentException(instance + \" does not exist !\");\n+      }\n+      if (!component.getDecommissionedInstances().contains(instance)) {\n+        component.addDecommissionedInstance(instance);\n+        component.setNumberOfContainers(Math.max(0, component\n+            .getNumberOfContainers() - 1));\n+      }\n+    }\n+    ServiceApiUtil.writeAppDefinition(fs, persistedService);\n+\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(ApplicationId.fromString(\n+            persistedService.getId()));\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d\n+          persistedService.getName() + \" is at \" + appReport\n+              .getYarnApplicationState() + \" state, decommission can only be \" +\n+              \"invoked when service is running\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(persistedService.getName() + \" AM hostname is \" +\n+          \"empty\");\n+    }\n+    ClientAMProtocol proxy \u003d\n+        createAMProxy(persistedService.getName(), appReport);\n+    DecommissionCompInstancesRequestProto.Builder requestBuilder \u003d\n+        DecommissionCompInstancesRequestProto.newBuilder();\n+    requestBuilder.addAllCompInstances(componentInstances);\n+    proxy.decommissionCompInstances(requestBuilder.build());\n+    return EXIT_SUCCESS;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDecommissionInstances(String appName,\n      List\u003cString\u003e componentInstances) throws IOException, YarnException {\n    checkAppExistOnHdfs(appName);\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, appName);\n    if (StringUtils.isEmpty(persistedService.getId())) {\n      throw new YarnException(\n          persistedService.getName() + \" appId is null, may be not submitted \" +\n              \"to YARN yet\");\n    }\n    cachedAppInfo.put(persistedService.getName(), new AppInfo(\n        ApplicationId.fromString(persistedService.getId()), persistedService\n        .getKerberosPrincipal().getPrincipalName()));\n\n    for (String instance : componentInstances) {\n      String componentName \u003d ServiceApiUtil.parseComponentName(\n          ServiceApiUtil.parseAndValidateComponentInstanceName(instance,\n              appName, getConfig()));\n      Component component \u003d persistedService.getComponent(componentName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(instance + \" does not exist !\");\n      }\n      if (!component.getDecommissionedInstances().contains(instance)) {\n        component.addDecommissionedInstance(instance);\n        component.setNumberOfContainers(Math.max(0, component\n            .getNumberOfContainers() - 1));\n      }\n    }\n    ServiceApiUtil.writeAppDefinition(fs, persistedService);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(ApplicationId.fromString(\n            persistedService.getId()));\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          persistedService.getName() + \" is at \" + appReport\n              .getYarnApplicationState() + \" state, decommission can only be \" +\n              \"invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(persistedService.getName() + \" AM hostname is \" +\n          \"empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(persistedService.getName(), appReport);\n    DecommissionCompInstancesRequestProto.Builder requestBuilder \u003d\n        DecommissionCompInstancesRequestProto.newBuilder();\n    requestBuilder.addAllCompInstances(componentInstances);\n    proxy.decommissionCompInstances(requestBuilder.build());\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}