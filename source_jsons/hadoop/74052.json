{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RPC.java",
  "functionName": "getSupportedProtocolVersions",
  "functionId": "getSupportedProtocolVersions___rpcKind-RPC.RpcKind__protocolName-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
  "functionStartLine": 990,
  "functionEndLine": 1008,
  "numCommitsSeen": 63,
  "timeTaken": 2317,
  "changeHistory": [
    "589c68ae09effd6c4f26505d61636f779c22e99f",
    "65200998c01b17e017d1814e8b1f4d82ac334a23",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d"
  ],
  "changeHistoryShort": {
    "589c68ae09effd6c4f26505d61636f779c22e99f": "Yparameterchange",
    "65200998c01b17e017d1814e8b1f4d82ac334a23": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "589c68ae09effd6c4f26505d61636f779c22e99f": {
      "type": "Yparameterchange",
      "commitMessage": "    HADOOP-8285 Use ProtoBuf for RpcPayLoadHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/12 9:34 AM",
      "commitName": "589c68ae09effd6c4f26505d61636f779c22e99f",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "17/04/12 8:04 AM",
      "commitNameOld": "e8eed2f62d30e0bf2f915ee3ad6b9c9f6d2d97cb",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 6.06,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n+   VerProtocolImpl[] getSupportedProtocolVersions(RPC.RpcKind rpcKind,\n        String protocolName) {\n      VerProtocolImpl[] resultk \u003d \n          new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n      int i \u003d 0;\n      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                        getProtocolImplMap(rpcKind).entrySet()) {\n        if (pv.getKey().protocol.equals(protocolName)) {\n          resultk[i++] \u003d \n              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n        }\n      }\n      if (i \u003d\u003d 0) {\n        return null;\n      }\n      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n      System.arraycopy(resultk, 0, result, 0, i);\n      return result;\n    }\n\\ No newline at end of file\n",
      "actualSource": "   VerProtocolImpl[] getSupportedProtocolVersions(RPC.RpcKind rpcKind,\n       String protocolName) {\n     VerProtocolImpl[] resultk \u003d \n         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n     int i \u003d 0;\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                       getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         resultk[i++] \u003d \n             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n       }\n     }\n     if (i \u003d\u003d 0) {\n       return null;\n     }\n     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n     System.arraycopy(resultk, 0, result, 0, i);\n     return result;\n   }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
      "extendedDetails": {
        "oldValue": "[rpcKind-RpcKind, protocolName-String]",
        "newValue": "[rpcKind-RPC.RpcKind, protocolName-String]"
      }
    },
    "65200998c01b17e017d1814e8b1f4d82ac334a23": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/11 12:44 PM",
      "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-    private VerProtocolImpl[] getSupportedProtocolVersions(\n-        String protocolName) {\n-      VerProtocolImpl[] resultk \u003d new  VerProtocolImpl[protocolImplMap.size()];\n-      int i \u003d 0;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n-                                        protocolImplMap.entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          resultk[i++] \u003d \n-              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n-        }\n-      }\n-      if (i \u003d\u003d 0) {\n-        return null;\n-      }\n-      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n-      System.arraycopy(resultk, 0, result, 0, i);\n-      return result;\n-    }\n\\ No newline at end of file\n+   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n+       String protocolName) {\n+     VerProtocolImpl[] resultk \u003d \n+         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n+     int i \u003d 0;\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n+                                       getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         resultk[i++] \u003d \n+             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n+       }\n+     }\n+     if (i \u003d\u003d 0) {\n+       return null;\n+     }\n+     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n+     System.arraycopy(resultk, 0, result, 0, i);\n+     return result;\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n       String protocolName) {\n     VerProtocolImpl[] resultk \u003d \n         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n     int i \u003d 0;\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                       getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         resultk[i++] \u003d \n             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n       }\n     }\n     if (i \u003d\u003d 0) {\n       return null;\n     }\n     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n     System.arraycopy(resultk, 0, result, 0, i);\n     return result;\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
            "oldMethodName": "getSupportedProtocolVersions",
            "newMethodName": "getSupportedProtocolVersions"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-    private VerProtocolImpl[] getSupportedProtocolVersions(\n-        String protocolName) {\n-      VerProtocolImpl[] resultk \u003d new  VerProtocolImpl[protocolImplMap.size()];\n-      int i \u003d 0;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n-                                        protocolImplMap.entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          resultk[i++] \u003d \n-              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n-        }\n-      }\n-      if (i \u003d\u003d 0) {\n-        return null;\n-      }\n-      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n-      System.arraycopy(resultk, 0, result, 0, i);\n-      return result;\n-    }\n\\ No newline at end of file\n+   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n+       String protocolName) {\n+     VerProtocolImpl[] resultk \u003d \n+         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n+     int i \u003d 0;\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n+                                       getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         resultk[i++] \u003d \n+             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n+       }\n+     }\n+     if (i \u003d\u003d 0) {\n+       return null;\n+     }\n+     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n+     System.arraycopy(resultk, 0, result, 0, i);\n+     return result;\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n       String protocolName) {\n     VerProtocolImpl[] resultk \u003d \n         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n     int i \u003d 0;\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                       getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         resultk[i++] \u003d \n             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n       }\n     }\n     if (i \u003d\u003d 0) {\n       return null;\n     }\n     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n     System.arraycopy(resultk, 0, result, 0, i);\n     return result;\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-    private VerProtocolImpl[] getSupportedProtocolVersions(\n-        String protocolName) {\n-      VerProtocolImpl[] resultk \u003d new  VerProtocolImpl[protocolImplMap.size()];\n-      int i \u003d 0;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n-                                        protocolImplMap.entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          resultk[i++] \u003d \n-              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n-        }\n-      }\n-      if (i \u003d\u003d 0) {\n-        return null;\n-      }\n-      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n-      System.arraycopy(resultk, 0, result, 0, i);\n-      return result;\n-    }\n\\ No newline at end of file\n+   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n+       String protocolName) {\n+     VerProtocolImpl[] resultk \u003d \n+         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n+     int i \u003d 0;\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n+                                       getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         resultk[i++] \u003d \n+             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n+       }\n+     }\n+     if (i \u003d\u003d 0) {\n+       return null;\n+     }\n+     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n+     System.arraycopy(resultk, 0, result, 0, i);\n+     return result;\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n       String protocolName) {\n     VerProtocolImpl[] resultk \u003d \n         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n     int i \u003d 0;\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                       getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         resultk[i++] \u003d \n             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n       }\n     }\n     if (i \u003d\u003d 0) {\n       return null;\n     }\n     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n     System.arraycopy(resultk, 0, result, 0, i);\n     return result;\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-    private VerProtocolImpl[] getSupportedProtocolVersions(\n-        String protocolName) {\n-      VerProtocolImpl[] resultk \u003d new  VerProtocolImpl[protocolImplMap.size()];\n-      int i \u003d 0;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n-                                        protocolImplMap.entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          resultk[i++] \u003d \n-              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n-        }\n-      }\n-      if (i \u003d\u003d 0) {\n-        return null;\n-      }\n-      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n-      System.arraycopy(resultk, 0, result, 0, i);\n-      return result;\n-    }\n\\ No newline at end of file\n+   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n+       String protocolName) {\n+     VerProtocolImpl[] resultk \u003d \n+         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n+     int i \u003d 0;\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n+                                       getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         resultk[i++] \u003d \n+             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n+       }\n+     }\n+     if (i \u003d\u003d 0) {\n+       return null;\n+     }\n+     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n+     System.arraycopy(resultk, 0, result, 0, i);\n+     return result;\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl[] getSupportedProtocolVersions(RpcKind rpcKind,\n       String protocolName) {\n     VerProtocolImpl[] resultk \u003d \n         new  VerProtocolImpl[getProtocolImplMap(rpcKind).size()];\n     int i \u003d 0;\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                       getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         resultk[i++] \u003d \n             new VerProtocolImpl(pv.getKey().version, pv.getValue());\n       }\n     }\n     if (i \u003d\u003d 0) {\n       return null;\n     }\n     VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n     System.arraycopy(resultk, 0, result, 0, i);\n     return result;\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldValue": "[protocolName-String]",
            "newValue": "[rpcKind-RpcKind, protocolName-String]"
          }
        }
      ]
    },
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": {
      "type": "Yintroduced",
      "commitMessage": "  HADOOP-7524 and MapReduce-2887 Change RPC to allow multiple protocols including multuple versions of the same protocol (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/09/11 5:31 PM",
      "commitName": "b97a4d40c8752451fc02168a7f6eb3e93e459c2d",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,18 @@\n+    private VerProtocolImpl[] getSupportedProtocolVersions(\n+        String protocolName) {\n+      VerProtocolImpl[] resultk \u003d new  VerProtocolImpl[protocolImplMap.size()];\n+      int i \u003d 0;\n+      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n+                                        protocolImplMap.entrySet()) {\n+        if (pv.getKey().protocol.equals(protocolName)) {\n+          resultk[i++] \u003d \n+              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n+        }\n+      }\n+      if (i \u003d\u003d 0) {\n+        return null;\n+      }\n+      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n+      System.arraycopy(resultk, 0, result, 0, i);\n+      return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private VerProtocolImpl[] getSupportedProtocolVersions(\n        String protocolName) {\n      VerProtocolImpl[] resultk \u003d new  VerProtocolImpl[protocolImplMap.size()];\n      int i \u003d 0;\n      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv :\n                                        protocolImplMap.entrySet()) {\n        if (pv.getKey().protocol.equals(protocolName)) {\n          resultk[i++] \u003d \n              new VerProtocolImpl(pv.getKey().version, pv.getValue());\n        }\n      }\n      if (i \u003d\u003d 0) {\n        return null;\n      }\n      VerProtocolImpl[] result \u003d new VerProtocolImpl[i];\n      System.arraycopy(resultk, 0, result, 0, i);\n      return result;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java"
    }
  }
}