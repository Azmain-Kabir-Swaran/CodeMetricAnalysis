{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionHandler.java",
  "functionName": "submitCurrentBatch",
  "functionId": "submitCurrentBatch___zoneId-Long(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
  "functionStartLine": 705,
  "functionEndLine": 731,
  "numCommitsSeen": 16,
  "timeTaken": 4946,
  "changeHistory": [
    "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24",
    "8467ec24fb74f30371d5a13e893fc56309ee9372",
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24": "Ybodychange",
    "8467ec24fb74f30371d5a13e893fc56309ee9372": "Yparameterchange",
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": "Ymultichange(Ymodifierchange,Ybodychange)",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13731. ReencryptionUpdater fails with ConcurrentModificationException during processCheckpoints. Contributed by Zsolt Venczel.\n",
      "commitDate": "28/08/18 3:13 PM",
      "commitName": "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24",
      "commitAuthor": "Zsolt Venczel",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 16.51,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     protected void submitCurrentBatch(final Long zoneId) throws IOException,\n         InterruptedException {\n       if (currentBatch.isEmpty()) {\n         return;\n       }\n       ZoneSubmissionTracker zst;\n       synchronized (ReencryptionHandler.this) {\n         zst \u003d submissions.get(zoneId);\n         if (zst \u003d\u003d null) {\n           zst \u003d new ZoneSubmissionTracker();\n           submissions.put(zoneId, zst);\n         }\n+        Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n+            currentBatch, reencryptionHandler));\n+        zst.addTask(future);\n       }\n-      Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n-          currentBatch, reencryptionHandler));\n-      zst.addTask(future);\n       LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n           currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n       currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n       // flip the pause flag if this is nth submission.\n       // The actual pause need to happen outside of the lock.\n       if (pauseAfterNthSubmission \u003e 0) {\n         if (--pauseAfterNthSubmission \u003d\u003d 0) {\n           shouldPauseForTesting \u003d true;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void submitCurrentBatch(final Long zoneId) throws IOException,\n        InterruptedException {\n      if (currentBatch.isEmpty()) {\n        return;\n      }\n      ZoneSubmissionTracker zst;\n      synchronized (ReencryptionHandler.this) {\n        zst \u003d submissions.get(zoneId);\n        if (zst \u003d\u003d null) {\n          zst \u003d new ZoneSubmissionTracker();\n          submissions.put(zoneId, zst);\n        }\n        Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n            currentBatch, reencryptionHandler));\n        zst.addTask(future);\n      }\n      LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n          currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n      currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n      // flip the pause flag if this is nth submission.\n      // The actual pause need to happen outside of the lock.\n      if (pauseAfterNthSubmission \u003e 0) {\n        if (--pauseAfterNthSubmission \u003d\u003d 0) {\n          shouldPauseForTesting \u003d true;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
      "extendedDetails": {}
    },
    "8467ec24fb74f30371d5a13e893fc56309ee9372": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "bfd3f8bd8a9ae2186ec3e4addc71f912ec7b8923",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n-    protected void submitCurrentBatch(final long zoneId) throws IOException,\n+    protected void submitCurrentBatch(final Long zoneId) throws IOException,\n         InterruptedException {\n       if (currentBatch.isEmpty()) {\n         return;\n       }\n       ZoneSubmissionTracker zst;\n       synchronized (ReencryptionHandler.this) {\n         zst \u003d submissions.get(zoneId);\n         if (zst \u003d\u003d null) {\n           zst \u003d new ZoneSubmissionTracker();\n           submissions.put(zoneId, zst);\n         }\n       }\n       Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n           currentBatch, reencryptionHandler));\n       zst.addTask(future);\n       LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n           currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n       currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n       // flip the pause flag if this is nth submission.\n       // The actual pause need to happen outside of the lock.\n       if (pauseAfterNthSubmission \u003e 0) {\n         if (--pauseAfterNthSubmission \u003d\u003d 0) {\n           shouldPauseForTesting \u003d true;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void submitCurrentBatch(final Long zoneId) throws IOException,\n        InterruptedException {\n      if (currentBatch.isEmpty()) {\n        return;\n      }\n      ZoneSubmissionTracker zst;\n      synchronized (ReencryptionHandler.this) {\n        zst \u003d submissions.get(zoneId);\n        if (zst \u003d\u003d null) {\n          zst \u003d new ZoneSubmissionTracker();\n          submissions.put(zoneId, zst);\n        }\n      }\n      Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n          currentBatch, reencryptionHandler));\n      zst.addTask(future);\n      LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n          currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n      currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n      // flip the pause flag if this is nth submission.\n      // The actual pause need to happen outside of the lock.\n      if (pauseAfterNthSubmission \u003e 0) {\n        if (--pauseAfterNthSubmission \u003d\u003d 0) {\n          shouldPauseForTesting \u003d true;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
      "extendedDetails": {
        "oldValue": "[zoneId-long(modifiers-final)]",
        "newValue": "[zoneId-Long(modifiers-final)]"
      }
    },
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "10/04/18 11:05 AM",
      "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthor": "Rakesh Radhakrishnan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "08/02/18 10:55 AM",
          "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.96,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n-  private void submitCurrentBatch(final long zoneId)\n-      throws IOException, InterruptedException {\n-    assert dir.hasReadLock();\n-    if (currentBatch.isEmpty()) {\n-      return;\n-    }\n-    ZoneSubmissionTracker zst;\n-    synchronized (this) {\n-      zst \u003d submissions.get(zoneId);\n-      if (zst \u003d\u003d null) {\n-        zst \u003d new ZoneSubmissionTracker();\n-        submissions.put(zoneId, zst);\n+    protected void submitCurrentBatch(final long zoneId) throws IOException,\n+        InterruptedException {\n+      if (currentBatch.isEmpty()) {\n+        return;\n       }\n-    }\n-    Future future \u003d batchService\n-        .submit(new EDEKReencryptCallable(zoneId, currentBatch, this));\n-    zst.addTask(future);\n-    LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n-        currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n-    currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n-    // flip the pause flag if this is nth submission.\n-    // The actual pause need to happen outside of the lock.\n-    if (pauseAfterNthSubmission \u003e 0) {\n-      if (--pauseAfterNthSubmission \u003d\u003d 0) {\n-        shouldPauseForTesting \u003d true;\n+      ZoneSubmissionTracker zst;\n+      synchronized (ReencryptionHandler.this) {\n+        zst \u003d submissions.get(zoneId);\n+        if (zst \u003d\u003d null) {\n+          zst \u003d new ZoneSubmissionTracker();\n+          submissions.put(zoneId, zst);\n+        }\n       }\n-    }\n-  }\n\\ No newline at end of file\n+      Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n+          currentBatch, reencryptionHandler));\n+      zst.addTask(future);\n+      LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n+          currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n+      currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n+      // flip the pause flag if this is nth submission.\n+      // The actual pause need to happen outside of the lock.\n+      if (pauseAfterNthSubmission \u003e 0) {\n+        if (--pauseAfterNthSubmission \u003d\u003d 0) {\n+          shouldPauseForTesting \u003d true;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    protected void submitCurrentBatch(final long zoneId) throws IOException,\n        InterruptedException {\n      if (currentBatch.isEmpty()) {\n        return;\n      }\n      ZoneSubmissionTracker zst;\n      synchronized (ReencryptionHandler.this) {\n        zst \u003d submissions.get(zoneId);\n        if (zst \u003d\u003d null) {\n          zst \u003d new ZoneSubmissionTracker();\n          submissions.put(zoneId, zst);\n        }\n      }\n      Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n          currentBatch, reencryptionHandler));\n      zst.addTask(future);\n      LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n          currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n      currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n      // flip the pause flag if this is nth submission.\n      // The actual pause need to happen outside of the lock.\n      if (pauseAfterNthSubmission \u003e 0) {\n        if (--pauseAfterNthSubmission \u003d\u003d 0) {\n          shouldPauseForTesting \u003d true;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "08/02/18 10:55 AM",
          "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.96,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n-  private void submitCurrentBatch(final long zoneId)\n-      throws IOException, InterruptedException {\n-    assert dir.hasReadLock();\n-    if (currentBatch.isEmpty()) {\n-      return;\n-    }\n-    ZoneSubmissionTracker zst;\n-    synchronized (this) {\n-      zst \u003d submissions.get(zoneId);\n-      if (zst \u003d\u003d null) {\n-        zst \u003d new ZoneSubmissionTracker();\n-        submissions.put(zoneId, zst);\n+    protected void submitCurrentBatch(final long zoneId) throws IOException,\n+        InterruptedException {\n+      if (currentBatch.isEmpty()) {\n+        return;\n       }\n-    }\n-    Future future \u003d batchService\n-        .submit(new EDEKReencryptCallable(zoneId, currentBatch, this));\n-    zst.addTask(future);\n-    LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n-        currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n-    currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n-    // flip the pause flag if this is nth submission.\n-    // The actual pause need to happen outside of the lock.\n-    if (pauseAfterNthSubmission \u003e 0) {\n-      if (--pauseAfterNthSubmission \u003d\u003d 0) {\n-        shouldPauseForTesting \u003d true;\n+      ZoneSubmissionTracker zst;\n+      synchronized (ReencryptionHandler.this) {\n+        zst \u003d submissions.get(zoneId);\n+        if (zst \u003d\u003d null) {\n+          zst \u003d new ZoneSubmissionTracker();\n+          submissions.put(zoneId, zst);\n+        }\n       }\n-    }\n-  }\n\\ No newline at end of file\n+      Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n+          currentBatch, reencryptionHandler));\n+      zst.addTask(future);\n+      LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n+          currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n+      currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n+      // flip the pause flag if this is nth submission.\n+      // The actual pause need to happen outside of the lock.\n+      if (pauseAfterNthSubmission \u003e 0) {\n+        if (--pauseAfterNthSubmission \u003d\u003d 0) {\n+          shouldPauseForTesting \u003d true;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    protected void submitCurrentBatch(final long zoneId) throws IOException,\n        InterruptedException {\n      if (currentBatch.isEmpty()) {\n        return;\n      }\n      ZoneSubmissionTracker zst;\n      synchronized (ReencryptionHandler.this) {\n        zst \u003d submissions.get(zoneId);\n        if (zst \u003d\u003d null) {\n          zst \u003d new ZoneSubmissionTracker();\n          submissions.put(zoneId, zst);\n        }\n      }\n      Future future \u003d batchService.submit(new EDEKReencryptCallable(zoneId,\n          currentBatch, reencryptionHandler));\n      zst.addTask(future);\n      LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n          currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n      currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n      // flip the pause flag if this is nth submission.\n      // The actual pause need to happen outside of the lock.\n      if (pauseAfterNthSubmission \u003e 0) {\n        if (--pauseAfterNthSubmission \u003d\u003d 0) {\n          shouldPauseForTesting \u003d true;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12518. Re-encryption should handle task cancellation and progress better.\n",
      "commitDate": "20/10/17 4:25 PM",
      "commitName": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "23/08/17 5:06 PM",
      "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 57.97,
      "commitsBetweenForRepo": 544,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private void submitCurrentBatch(final long zoneId)\n       throws IOException, InterruptedException {\n     assert dir.hasReadLock();\n     if (currentBatch.isEmpty()) {\n       return;\n     }\n-    ZoneSubmissionTracker zst \u003d submissions.get(zoneId);\n-    if (zst \u003d\u003d null) {\n-      zst \u003d new ZoneSubmissionTracker();\n-      submissions.put(zoneId, zst);\n+    ZoneSubmissionTracker zst;\n+    synchronized (this) {\n+      zst \u003d submissions.get(zoneId);\n+      if (zst \u003d\u003d null) {\n+        zst \u003d new ZoneSubmissionTracker();\n+        submissions.put(zoneId, zst);\n+      }\n     }\n     Future future \u003d batchService\n         .submit(new EDEKReencryptCallable(zoneId, currentBatch, this));\n     zst.addTask(future);\n     LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n         currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n     currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n     // flip the pause flag if this is nth submission.\n     // The actual pause need to happen outside of the lock.\n     if (pauseAfterNthSubmission \u003e 0) {\n       if (--pauseAfterNthSubmission \u003d\u003d 0) {\n         shouldPauseForTesting \u003d true;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitCurrentBatch(final long zoneId)\n      throws IOException, InterruptedException {\n    assert dir.hasReadLock();\n    if (currentBatch.isEmpty()) {\n      return;\n    }\n    ZoneSubmissionTracker zst;\n    synchronized (this) {\n      zst \u003d submissions.get(zoneId);\n      if (zst \u003d\u003d null) {\n        zst \u003d new ZoneSubmissionTracker();\n        submissions.put(zoneId, zst);\n      }\n    }\n    Future future \u003d batchService\n        .submit(new EDEKReencryptCallable(zoneId, currentBatch, this));\n    zst.addTask(future);\n    LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n        currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n    currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n    // flip the pause flag if this is nth submission.\n    // The actual pause need to happen outside of the lock.\n    if (pauseAfterNthSubmission \u003e 0) {\n      if (--pauseAfterNthSubmission \u003d\u003d 0) {\n        shouldPauseForTesting \u003d true;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,25 @@\n+  private void submitCurrentBatch(final long zoneId)\n+      throws IOException, InterruptedException {\n+    assert dir.hasReadLock();\n+    if (currentBatch.isEmpty()) {\n+      return;\n+    }\n+    ZoneSubmissionTracker zst \u003d submissions.get(zoneId);\n+    if (zst \u003d\u003d null) {\n+      zst \u003d new ZoneSubmissionTracker();\n+      submissions.put(zoneId, zst);\n+    }\n+    Future future \u003d batchService\n+        .submit(new EDEKReencryptCallable(zoneId, currentBatch, this));\n+    zst.addTask(future);\n+    LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n+        currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n+    currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n+    // flip the pause flag if this is nth submission.\n+    // The actual pause need to happen outside of the lock.\n+    if (pauseAfterNthSubmission \u003e 0) {\n+      if (--pauseAfterNthSubmission \u003d\u003d 0) {\n+        shouldPauseForTesting \u003d true;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitCurrentBatch(final long zoneId)\n      throws IOException, InterruptedException {\n    assert dir.hasReadLock();\n    if (currentBatch.isEmpty()) {\n      return;\n    }\n    ZoneSubmissionTracker zst \u003d submissions.get(zoneId);\n    if (zst \u003d\u003d null) {\n      zst \u003d new ZoneSubmissionTracker();\n      submissions.put(zoneId, zst);\n    }\n    Future future \u003d batchService\n        .submit(new EDEKReencryptCallable(zoneId, currentBatch, this));\n    zst.addTask(future);\n    LOG.info(\"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt.\",\n        currentBatch.getFirstFilePath(), currentBatch.size(), zoneId);\n    currentBatch \u003d new ReencryptionBatch(reencryptBatchSize);\n    // flip the pause flag if this is nth submission.\n    // The actual pause need to happen outside of the lock.\n    if (pauseAfterNthSubmission \u003e 0) {\n      if (--pauseAfterNthSubmission \u003d\u003d 0) {\n        shouldPauseForTesting \u003d true;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java"
    }
  }
}