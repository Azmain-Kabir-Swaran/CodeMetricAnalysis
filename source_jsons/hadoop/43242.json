{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "onContainersReceivedFromPreviousAttempts",
  "functionId": "onContainersReceivedFromPreviousAttempts___containers-List__Container__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 703,
  "functionEndLine": 729,
  "numCommitsSeen": 31,
  "timeTaken": 1090,
  "changeHistory": [
    "c7ebcd76bf3dd14127336951f2be3de772e7826a",
    "3ebe6a7819292ce6bd557e36137531b59890c845"
  ],
  "changeHistoryShort": {
    "c7ebcd76bf3dd14127336951f2be3de772e7826a": "Ybodychange",
    "3ebe6a7819292ce6bd557e36137531b59890c845": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7ebcd76bf3dd14127336951f2be3de772e7826a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8579.  Recover NMToken of previous attempted component data.\n            Contributed by Gour Saha\n",
      "commitDate": "31/07/18 3:01 PM",
      "commitName": "c7ebcd76bf3dd14127336951f2be3de772e7826a",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/07/18 3:22 PM",
      "commitNameOld": "40fad32824d2f8f960c779d78357e62103453da0",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 4.98,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n     public void onContainersReceivedFromPreviousAttempts(\n         List\u003cContainer\u003e containers) {\n+      LOG.info(\"Containers recovered after AM registered: {}\", containers);\n       if (containers \u003d\u003d null || containers.isEmpty()) {\n         return;\n       }\n       for (Container container : containers) {\n         ComponentInstance compInstance;\n         synchronized (unRecoveredInstances) {\n           compInstance \u003d unRecoveredInstances.remove(container.getId());\n         }\n         if (compInstance !\u003d null) {\n           Component component \u003d componentsById.get(\n               container.getAllocationRequestId());\n           ComponentEvent event \u003d new ComponentEvent(component.getName(),\n               CONTAINER_RECOVERED)\n               .setInstance(compInstance)\n               .setContainerId(container.getId())\n               .setContainer(container);\n           component.handle(event);\n         } else {\n           LOG.info(\"Not waiting to recover container {}, releasing\",\n               container.getId());\n           amRMClient.releaseAssignedContainer(container.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersReceivedFromPreviousAttempts(\n        List\u003cContainer\u003e containers) {\n      LOG.info(\"Containers recovered after AM registered: {}\", containers);\n      if (containers \u003d\u003d null || containers.isEmpty()) {\n        return;\n      }\n      for (Container container : containers) {\n        ComponentInstance compInstance;\n        synchronized (unRecoveredInstances) {\n          compInstance \u003d unRecoveredInstances.remove(container.getId());\n        }\n        if (compInstance !\u003d null) {\n          Component component \u003d componentsById.get(\n              container.getAllocationRequestId());\n          ComponentEvent event \u003d new ComponentEvent(component.getName(),\n              CONTAINER_RECOVERED)\n              .setInstance(compInstance)\n              .setContainerId(container.getId())\n              .setContainer(container);\n          component.handle(event);\n        } else {\n          LOG.info(\"Not waiting to recover container {}, releasing\",\n              container.getId());\n          amRMClient.releaseAssignedContainer(container.getId());\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "3ebe6a7819292ce6bd557e36137531b59890c845": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7565. Yarn service pre-maturely releases the container after AM restart. Contributed by Chandni Singh\n",
      "commitDate": "12/12/17 1:35 PM",
      "commitName": "3ebe6a7819292ce6bd557e36137531b59890c845",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,26 @@\n+    public void onContainersReceivedFromPreviousAttempts(\n+        List\u003cContainer\u003e containers) {\n+      if (containers \u003d\u003d null || containers.isEmpty()) {\n+        return;\n+      }\n+      for (Container container : containers) {\n+        ComponentInstance compInstance;\n+        synchronized (unRecoveredInstances) {\n+          compInstance \u003d unRecoveredInstances.remove(container.getId());\n+        }\n+        if (compInstance !\u003d null) {\n+          Component component \u003d componentsById.get(\n+              container.getAllocationRequestId());\n+          ComponentEvent event \u003d new ComponentEvent(component.getName(),\n+              CONTAINER_RECOVERED)\n+              .setInstance(compInstance)\n+              .setContainerId(container.getId())\n+              .setContainer(container);\n+          component.handle(event);\n+        } else {\n+          LOG.info(\"Not waiting to recover container {}, releasing\",\n+              container.getId());\n+          amRMClient.releaseAssignedContainer(container.getId());\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersReceivedFromPreviousAttempts(\n        List\u003cContainer\u003e containers) {\n      if (containers \u003d\u003d null || containers.isEmpty()) {\n        return;\n      }\n      for (Container container : containers) {\n        ComponentInstance compInstance;\n        synchronized (unRecoveredInstances) {\n          compInstance \u003d unRecoveredInstances.remove(container.getId());\n        }\n        if (compInstance !\u003d null) {\n          Component component \u003d componentsById.get(\n              container.getAllocationRequestId());\n          ComponentEvent event \u003d new ComponentEvent(component.getName(),\n              CONTAINER_RECOVERED)\n              .setInstance(compInstance)\n              .setContainerId(container.getId())\n              .setContainer(container);\n          component.handle(event);\n        } else {\n          LOG.info(\"Not waiting to recover container {}, releasing\",\n              container.getId());\n          amRMClient.releaseAssignedContainer(container.getId());\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}