{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReplicaBuilder.java",
  "functionName": "buildTemporaryReplica",
  "functionId": "buildTemporaryReplica",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java",
  "functionStartLine": 229,
  "functionEndLine": 256,
  "numCommitsSeen": 7,
  "timeTaken": 1640,
  "changeHistory": [
    "86c9862bec0248d671e657aa56094a2919b8ac14"
  ],
  "changeHistoryShort": {
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,28 @@\n+  private LocalReplicaInPipeline buildTemporaryReplica()\n+      throws IllegalArgumentException {\n+    if (null !\u003d fromReplica \u0026\u0026\n+        fromReplica.getState() \u003d\u003d ReplicaState.TEMPORARY) {\n+      return new LocalReplicaInPipeline((LocalReplicaInPipeline) fromReplica);\n+    } else if (null !\u003d fromReplica) {\n+      throw new IllegalArgumentException(\"Incompatible fromReplica \"\n+          + \"state: \" + fromReplica.getState());\n+    } else {\n+      if (null !\u003d block) {\n+        if (null \u003d\u003d writer) {\n+          throw new IllegalArgumentException(\"A valid writer is \"\n+              + \"required for constructing a Replica from block \"\n+              + block.getBlockId());\n+        }\n+        return new LocalReplicaInPipeline(block, volume, directoryUsed,\n+            writer);\n+      } else {\n+        if (length !\u003d -1) {\n+          return new LocalReplicaInPipeline(blockId, length, genStamp,\n+              volume, directoryUsed, writer, bytesToReserve);\n+        } else {\n+          return new LocalReplicaInPipeline(blockId, genStamp, volume,\n+              directoryUsed, bytesToReserve);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalReplicaInPipeline buildTemporaryReplica()\n      throws IllegalArgumentException {\n    if (null !\u003d fromReplica \u0026\u0026\n        fromReplica.getState() \u003d\u003d ReplicaState.TEMPORARY) {\n      return new LocalReplicaInPipeline((LocalReplicaInPipeline) fromReplica);\n    } else if (null !\u003d fromReplica) {\n      throw new IllegalArgumentException(\"Incompatible fromReplica \"\n          + \"state: \" + fromReplica.getState());\n    } else {\n      if (null !\u003d block) {\n        if (null \u003d\u003d writer) {\n          throw new IllegalArgumentException(\"A valid writer is \"\n              + \"required for constructing a Replica from block \"\n              + block.getBlockId());\n        }\n        return new LocalReplicaInPipeline(block, volume, directoryUsed,\n            writer);\n      } else {\n        if (length !\u003d -1) {\n          return new LocalReplicaInPipeline(blockId, length, genStamp,\n              volume, directoryUsed, writer, bytesToReserve);\n        } else {\n          return new LocalReplicaInPipeline(blockId, genStamp, volume,\n              directoryUsed, bytesToReserve);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java"
    }
  }
}