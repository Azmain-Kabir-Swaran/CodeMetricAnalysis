{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockStorageMovementAttemptedItems.java",
  "functionName": "blockStorageMovementReportedItemsCheck",
  "functionId": "blockStorageMovementReportedItemsCheck",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java",
  "functionStartLine": 268,
  "functionEndLine": 290,
  "numCommitsSeen": 22,
  "timeTaken": 5523,
  "changeHistory": [
    "66e8f9b31529226309c924226a53dead3e6fcf11",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
    "8467ec24fb74f30371d5a13e893fc56309ee9372",
    "8d4f74e7339abc77dc0daa162d7bd2814bd79b3d",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54",
    "c561cb316e365ef674784cd6cf0b12c0fbc271a3",
    "00eceed233d6e80d5c7137bf5b5286746ec4d5fb"
  ],
  "changeHistoryShort": {
    "66e8f9b31529226309c924226a53dead3e6fcf11": "Ybodychange",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": "Ybodychange",
    "8467ec24fb74f30371d5a13e893fc56309ee9372": "Ybodychange",
    "8d4f74e7339abc77dc0daa162d7bd2814bd79b3d": "Ybodychange",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": "Yfilerename",
    "c561cb316e365ef674784cd6cf0b12c0fbc271a3": "Ybodychange",
    "00eceed233d6e80d5c7137bf5b5286746ec4d5fb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66e8f9b31529226309c924226a53dead3e6fcf11": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   void blockStorageMovementReportedItemsCheck() throws IOException {\n     // Removes all available blocks from this queue and process it.\n     Collection\u003cBlock\u003e finishedBlks \u003d new ArrayList\u003c\u003e();\n     movementFinishedBlocks.drainTo(finishedBlks);\n \n     // Update attempted items list\n     for (Block blk : finishedBlks) {\n       synchronized (storageMovementAttemptedItems) {\n-        Iterator\u003cAttemptedItemInfo\u003cT\u003e\u003e iterator \u003d storageMovementAttemptedItems\n+        Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n             .iterator();\n         while (iterator.hasNext()) {\n-          AttemptedItemInfo\u003cT\u003e attemptedItemInfo \u003d iterator.next();\n+          AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n           attemptedItemInfo.getBlocks().remove(blk);\n           if (attemptedItemInfo.getBlocks().isEmpty()) {\n-            blockStorageMovementNeeded.add(new ItemInfo\u003cT\u003e(\n+            blockStorageMovementNeeded.add(new ItemInfo(\n                 attemptedItemInfo.getStartPath(), attemptedItemInfo.getFile(),\n                 attemptedItemInfo.getRetryCount() + 1));\n             iterator.remove();\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    // Removes all available blocks from this queue and process it.\n    Collection\u003cBlock\u003e finishedBlks \u003d new ArrayList\u003c\u003e();\n    movementFinishedBlocks.drainTo(finishedBlks);\n\n    // Update attempted items list\n    for (Block blk : finishedBlks) {\n      synchronized (storageMovementAttemptedItems) {\n        Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n            .iterator();\n        while (iterator.hasNext()) {\n          AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n          attemptedItemInfo.getBlocks().remove(blk);\n          if (attemptedItemInfo.getBlocks().isEmpty()) {\n            blockStorageMovementNeeded.add(new ItemInfo(\n                attemptedItemInfo.getStartPath(), attemptedItemInfo.getFile(),\n                attemptedItemInfo.getRetryCount() + 1));\n            iterator.remove();\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java",
      "extendedDetails": {}
    },
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,23 @@\n   void blockStorageMovementReportedItemsCheck() throws IOException {\n-    synchronized (movementFinishedBlocks) {\n-      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n-      while (finishedBlksIter.hasNext()) {\n-        Block blk \u003d finishedBlksIter.next();\n-        synchronized (storageMovementAttemptedItems) {\n-          Iterator\u003cAttemptedItemInfo\u003cT\u003e\u003e iterator \u003d\n-              storageMovementAttemptedItems.iterator();\n-          while (iterator.hasNext()) {\n-            AttemptedItemInfo\u003cT\u003e attemptedItemInfo \u003d iterator.next();\n-            attemptedItemInfo.getBlocks().remove(blk);\n-            if (attemptedItemInfo.getBlocks().isEmpty()) {\n-              // TODO: try add this at front of the Queue, so that this element\n-              // gets the chance first and can be cleaned from queue quickly as\n-              // all movements already done.\n-              blockStorageMovementNeeded.add(new ItemInfo\u003cT\u003e(attemptedItemInfo\n-                  .getStartPath(), attemptedItemInfo.getFile(),\n-                  attemptedItemInfo.getRetryCount() + 1));\n-              iterator.remove();\n-            }\n+    // Removes all available blocks from this queue and process it.\n+    Collection\u003cBlock\u003e finishedBlks \u003d new ArrayList\u003c\u003e();\n+    movementFinishedBlocks.drainTo(finishedBlks);\n+\n+    // Update attempted items list\n+    for (Block blk : finishedBlks) {\n+      synchronized (storageMovementAttemptedItems) {\n+        Iterator\u003cAttemptedItemInfo\u003cT\u003e\u003e iterator \u003d storageMovementAttemptedItems\n+            .iterator();\n+        while (iterator.hasNext()) {\n+          AttemptedItemInfo\u003cT\u003e attemptedItemInfo \u003d iterator.next();\n+          attemptedItemInfo.getBlocks().remove(blk);\n+          if (attemptedItemInfo.getBlocks().isEmpty()) {\n+            blockStorageMovementNeeded.add(new ItemInfo\u003cT\u003e(\n+                attemptedItemInfo.getStartPath(), attemptedItemInfo.getFile(),\n+                attemptedItemInfo.getRetryCount() + 1));\n+            iterator.remove();\n           }\n         }\n-        // Remove attempted blocks from movementFinishedBlocks list.\n-        finishedBlksIter.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    // Removes all available blocks from this queue and process it.\n    Collection\u003cBlock\u003e finishedBlks \u003d new ArrayList\u003c\u003e();\n    movementFinishedBlocks.drainTo(finishedBlks);\n\n    // Update attempted items list\n    for (Block blk : finishedBlks) {\n      synchronized (storageMovementAttemptedItems) {\n        Iterator\u003cAttemptedItemInfo\u003cT\u003e\u003e iterator \u003d storageMovementAttemptedItems\n            .iterator();\n        while (iterator.hasNext()) {\n          AttemptedItemInfo\u003cT\u003e attemptedItemInfo \u003d iterator.next();\n          attemptedItemInfo.getBlocks().remove(blk);\n          if (attemptedItemInfo.getBlocks().isEmpty()) {\n            blockStorageMovementNeeded.add(new ItemInfo\u003cT\u003e(\n                attemptedItemInfo.getStartPath(), attemptedItemInfo.getFile(),\n                attemptedItemInfo.getRetryCount() + 1));\n            iterator.remove();\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java",
      "extendedDetails": {}
    },
    "8467ec24fb74f30371d5a13e893fc56309ee9372": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "b0cb8d9bb44c963ae686d2b5c1b70bc76b955e10",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   void blockStorageMovementReportedItemsCheck() throws IOException {\n     synchronized (movementFinishedBlocks) {\n       Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n       while (finishedBlksIter.hasNext()) {\n         Block blk \u003d finishedBlksIter.next();\n         synchronized (storageMovementAttemptedItems) {\n-          Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n-              .iterator();\n+          Iterator\u003cAttemptedItemInfo\u003cT\u003e\u003e iterator \u003d\n+              storageMovementAttemptedItems.iterator();\n           while (iterator.hasNext()) {\n-            AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n+            AttemptedItemInfo\u003cT\u003e attemptedItemInfo \u003d iterator.next();\n             attemptedItemInfo.getBlocks().remove(blk);\n             if (attemptedItemInfo.getBlocks().isEmpty()) {\n               // TODO: try add this at front of the Queue, so that this element\n               // gets the chance first and can be cleaned from queue quickly as\n               // all movements already done.\n-              blockStorageMovementNeeded.add(new ItemInfo(attemptedItemInfo\n-                  .getStartId(), attemptedItemInfo.getFileId(),\n+              blockStorageMovementNeeded.add(new ItemInfo\u003cT\u003e(attemptedItemInfo\n+                  .getStartPath(), attemptedItemInfo.getFile(),\n                   attemptedItemInfo.getRetryCount() + 1));\n               iterator.remove();\n             }\n           }\n         }\n         // Remove attempted blocks from movementFinishedBlocks list.\n         finishedBlksIter.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    synchronized (movementFinishedBlocks) {\n      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n      while (finishedBlksIter.hasNext()) {\n        Block blk \u003d finishedBlksIter.next();\n        synchronized (storageMovementAttemptedItems) {\n          Iterator\u003cAttemptedItemInfo\u003cT\u003e\u003e iterator \u003d\n              storageMovementAttemptedItems.iterator();\n          while (iterator.hasNext()) {\n            AttemptedItemInfo\u003cT\u003e attemptedItemInfo \u003d iterator.next();\n            attemptedItemInfo.getBlocks().remove(blk);\n            if (attemptedItemInfo.getBlocks().isEmpty()) {\n              // TODO: try add this at front of the Queue, so that this element\n              // gets the chance first and can be cleaned from queue quickly as\n              // all movements already done.\n              blockStorageMovementNeeded.add(new ItemInfo\u003cT\u003e(attemptedItemInfo\n                  .getStartPath(), attemptedItemInfo.getFile(),\n                  attemptedItemInfo.getRetryCount() + 1));\n              iterator.remove();\n            }\n          }\n        }\n        // Remove attempted blocks from movementFinishedBlocks list.\n        finishedBlksIter.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java",
      "extendedDetails": {}
    },
    "8d4f74e7339abc77dc0daa162d7bd2814bd79b3d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12911. [SPS]: Modularize the SPS code and expose necessary interfaces for external/internal implementations. Contributed by Uma Maheswara Rao G\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "8d4f74e7339abc77dc0daa162d7bd2814bd79b3d",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   void blockStorageMovementReportedItemsCheck() throws IOException {\n     synchronized (movementFinishedBlocks) {\n       Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n       while (finishedBlksIter.hasNext()) {\n         Block blk \u003d finishedBlksIter.next();\n         synchronized (storageMovementAttemptedItems) {\n           Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n               .iterator();\n           while (iterator.hasNext()) {\n             AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n             attemptedItemInfo.getBlocks().remove(blk);\n             if (attemptedItemInfo.getBlocks().isEmpty()) {\n               // TODO: try add this at front of the Queue, so that this element\n               // gets the chance first and can be cleaned from queue quickly as\n               // all movements already done.\n               blockStorageMovementNeeded.add(new ItemInfo(attemptedItemInfo\n-                  .getStartId(), attemptedItemInfo.getTrackId(),\n+                  .getStartId(), attemptedItemInfo.getFileId(),\n                   attemptedItemInfo.getRetryCount() + 1));\n               iterator.remove();\n             }\n           }\n         }\n         // Remove attempted blocks from movementFinishedBlocks list.\n         finishedBlksIter.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    synchronized (movementFinishedBlocks) {\n      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n      while (finishedBlksIter.hasNext()) {\n        Block blk \u003d finishedBlksIter.next();\n        synchronized (storageMovementAttemptedItems) {\n          Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n              .iterator();\n          while (iterator.hasNext()) {\n            AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n            attemptedItemInfo.getBlocks().remove(blk);\n            if (attemptedItemInfo.getBlocks().isEmpty()) {\n              // TODO: try add this at front of the Queue, so that this element\n              // gets the chance first and can be cleaned from queue quickly as\n              // all movements already done.\n              blockStorageMovementNeeded.add(new ItemInfo(attemptedItemInfo\n                  .getStartId(), attemptedItemInfo.getFileId(),\n                  attemptedItemInfo.getRetryCount() + 1));\n              iterator.remove();\n            }\n          }\n        }\n        // Remove attempted blocks from movementFinishedBlocks list.\n        finishedBlksIter.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java",
      "extendedDetails": {}
    },
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-12955: [SPS]: Move SPS classes to a separate package. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "c561cb316e365ef674784cd6cf0b12c0fbc271a3",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    synchronized (movementFinishedBlocks) {\n      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n      while (finishedBlksIter.hasNext()) {\n        Block blk \u003d finishedBlksIter.next();\n        synchronized (storageMovementAttemptedItems) {\n          Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n              .iterator();\n          while (iterator.hasNext()) {\n            AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n            attemptedItemInfo.getBlocks().remove(blk);\n            if (attemptedItemInfo.getBlocks().isEmpty()) {\n              // TODO: try add this at front of the Queue, so that this element\n              // gets the chance first and can be cleaned from queue quickly as\n              // all movements already done.\n              blockStorageMovementNeeded.add(new ItemInfo(attemptedItemInfo\n                  .getStartId(), attemptedItemInfo.getTrackId(),\n                  attemptedItemInfo.getRetryCount() + 1));\n              iterator.remove();\n            }\n          }\n        }\n        // Remove attempted blocks from movementFinishedBlocks list.\n        finishedBlksIter.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BlockStorageMovementAttemptedItems.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/BlockStorageMovementAttemptedItems.java"
      }
    },
    "c561cb316e365ef674784cd6cf0b12c0fbc271a3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12106: [SPS]: Improve storage policy satisfier configurations. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "c561cb316e365ef674784cd6cf0b12c0fbc271a3",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "00eceed233d6e80d5c7137bf5b5286746ec4d5fb",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   void blockStorageMovementReportedItemsCheck() throws IOException {\n     synchronized (movementFinishedBlocks) {\n       Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n       while (finishedBlksIter.hasNext()) {\n         Block blk \u003d finishedBlksIter.next();\n         synchronized (storageMovementAttemptedItems) {\n           Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n               .iterator();\n           while (iterator.hasNext()) {\n             AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n             attemptedItemInfo.getBlocks().remove(blk);\n             if (attemptedItemInfo.getBlocks().isEmpty()) {\n               // TODO: try add this at front of the Queue, so that this element\n               // gets the chance first and can be cleaned from queue quickly as\n               // all movements already done.\n-              blockStorageMovementNeeded\n-                  .add(new ItemInfo(attemptedItemInfo.getStartId(),\n-                      attemptedItemInfo.getTrackId()));\n+              blockStorageMovementNeeded.add(new ItemInfo(attemptedItemInfo\n+                  .getStartId(), attemptedItemInfo.getTrackId(),\n+                  attemptedItemInfo.getRetryCount() + 1));\n               iterator.remove();\n             }\n           }\n         }\n         // Remove attempted blocks from movementFinishedBlocks list.\n         finishedBlksIter.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    synchronized (movementFinishedBlocks) {\n      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n      while (finishedBlksIter.hasNext()) {\n        Block blk \u003d finishedBlksIter.next();\n        synchronized (storageMovementAttemptedItems) {\n          Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n              .iterator();\n          while (iterator.hasNext()) {\n            AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n            attemptedItemInfo.getBlocks().remove(blk);\n            if (attemptedItemInfo.getBlocks().isEmpty()) {\n              // TODO: try add this at front of the Queue, so that this element\n              // gets the chance first and can be cleaned from queue quickly as\n              // all movements already done.\n              blockStorageMovementNeeded.add(new ItemInfo(attemptedItemInfo\n                  .getStartId(), attemptedItemInfo.getTrackId(),\n                  attemptedItemInfo.getRetryCount() + 1));\n              iterator.remove();\n            }\n          }\n        }\n        // Remove attempted blocks from movementFinishedBlocks list.\n        finishedBlksIter.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BlockStorageMovementAttemptedItems.java",
      "extendedDetails": {}
    },
    "00eceed233d6e80d5c7137bf5b5286746ec4d5fb": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12570: [SPS]: Refactor Co-ordinator datanode logic to track the block storage movements. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "00eceed233d6e80d5c7137bf5b5286746ec4d5fb",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,27 @@\n+  void blockStorageMovementReportedItemsCheck() throws IOException {\n+    synchronized (movementFinishedBlocks) {\n+      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n+      while (finishedBlksIter.hasNext()) {\n+        Block blk \u003d finishedBlksIter.next();\n+        synchronized (storageMovementAttemptedItems) {\n+          Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n+              .iterator();\n+          while (iterator.hasNext()) {\n+            AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n+            attemptedItemInfo.getBlocks().remove(blk);\n+            if (attemptedItemInfo.getBlocks().isEmpty()) {\n+              // TODO: try add this at front of the Queue, so that this element\n+              // gets the chance first and can be cleaned from queue quickly as\n+              // all movements already done.\n+              blockStorageMovementNeeded\n+                  .add(new ItemInfo(attemptedItemInfo.getStartId(),\n+                      attemptedItemInfo.getTrackId()));\n+              iterator.remove();\n+            }\n+          }\n+        }\n+        // Remove attempted blocks from movementFinishedBlocks list.\n+        finishedBlksIter.remove();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void blockStorageMovementReportedItemsCheck() throws IOException {\n    synchronized (movementFinishedBlocks) {\n      Iterator\u003cBlock\u003e finishedBlksIter \u003d movementFinishedBlocks.iterator();\n      while (finishedBlksIter.hasNext()) {\n        Block blk \u003d finishedBlksIter.next();\n        synchronized (storageMovementAttemptedItems) {\n          Iterator\u003cAttemptedItemInfo\u003e iterator \u003d storageMovementAttemptedItems\n              .iterator();\n          while (iterator.hasNext()) {\n            AttemptedItemInfo attemptedItemInfo \u003d iterator.next();\n            attemptedItemInfo.getBlocks().remove(blk);\n            if (attemptedItemInfo.getBlocks().isEmpty()) {\n              // TODO: try add this at front of the Queue, so that this element\n              // gets the chance first and can be cleaned from queue quickly as\n              // all movements already done.\n              blockStorageMovementNeeded\n                  .add(new ItemInfo(attemptedItemInfo.getStartId(),\n                      attemptedItemInfo.getTrackId()));\n              iterator.remove();\n            }\n          }\n        }\n        // Remove attempted blocks from movementFinishedBlocks list.\n        finishedBlksIter.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BlockStorageMovementAttemptedItems.java"
    }
  }
}