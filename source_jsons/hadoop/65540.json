{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardFsck.java",
  "functionName": "compareFileStatusToPathMetadata",
  "functionId": "compareFileStatusToPathMetadata___s3FileStatus-S3AFileStatus__msPathMetadata-PathMetadata",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardFsck.java",
  "functionStartLine": 254,
  "functionEndLine": 343,
  "numCommitsSeen": 4,
  "timeTaken": 811,
  "changeHistory": [
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc"
  ],
  "changeHistoryShort": {
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16423. S3Guard fsck: Check metadata consistency between S3 and metadatastore (log) (#1208). Contributed by Gabor Bota.\n\nChange-Id: I6bbb331b6c0a41c61043e482b95504fda8a50596",
      "commitDate": "12/09/19 4:12 AM",
      "commitName": "4e273a31f66013b7c20e8114451f5bc6c741f2cc",
      "commitAuthor": "Gabor Bota",
      "diff": "@@ -0,0 +1,90 @@\n+  protected ComparePair compareFileStatusToPathMetadata(\n+      S3AFileStatus s3FileStatus,\n+      PathMetadata msPathMetadata) throws IOException {\n+    final Path path \u003d s3FileStatus.getPath();\n+\n+    if (msPathMetadata !\u003d null) {\n+      LOG.info(\"Path: {} - Length S3: {}, MS: {} \" +\n+              \"- Etag S3: {}, MS: {} \",\n+          path,\n+          s3FileStatus.getLen(), msPathMetadata.getFileStatus().getLen(),\n+          s3FileStatus.getETag(), msPathMetadata.getFileStatus().getETag());\n+    } else {\n+      LOG.info(\"Path: {} - Length S3: {} - Etag S3: {}, no record in MS.\",\n+              path, s3FileStatus.getLen(), s3FileStatus.getETag());\n+    }\n+\n+    ComparePair comparePair \u003d new ComparePair(s3FileStatus, msPathMetadata);\n+\n+    if (!path.equals(path(ROOT_PATH_STRING))) {\n+      final Path parentPath \u003d path.getParent();\n+      final PathMetadata parentPm \u003d metadataStore.get(parentPath);\n+\n+      if (parentPm \u003d\u003d null) {\n+        comparePair.violations.add(Violation.NO_PARENT_ENTRY);\n+      } else {\n+        if (!parentPm.getFileStatus().isDirectory()) {\n+          comparePair.violations.add(Violation.PARENT_IS_A_FILE);\n+        }\n+        if (parentPm.isDeleted()) {\n+          comparePair.violations.add(Violation.PARENT_TOMBSTONED);\n+        }\n+      }\n+    } else {\n+      LOG.debug(\"Entry is in the root directory, so there\u0027s no parent\");\n+    }\n+\n+    // If the msPathMetadata is null, we RETURN because\n+    // there is no metadata compare with\n+    if (msPathMetadata \u003d\u003d null) {\n+      comparePair.violations.add(Violation.NO_METADATA_ENTRY);\n+      return comparePair;\n+    }\n+\n+    final S3AFileStatus msFileStatus \u003d msPathMetadata.getFileStatus();\n+    if (s3FileStatus.isDirectory() \u0026\u0026 !msFileStatus.isDirectory()) {\n+      comparePair.violations.add(Violation.DIR_IN_S3_FILE_IN_MS);\n+    }\n+    if (!s3FileStatus.isDirectory() \u0026\u0026 msFileStatus.isDirectory()) {\n+      comparePair.violations.add(Violation.FILE_IN_S3_DIR_IN_MS);\n+    }\n+\n+    if(msPathMetadata.isDeleted()) {\n+      comparePair.violations.add(Violation.TOMBSTONED_IN_MS_NOT_DELETED_IN_S3);\n+    }\n+\n+    /**\n+     * Attribute check\n+     */\n+    if (s3FileStatus.getLen() !\u003d msFileStatus.getLen()) {\n+      comparePair.violations.add(Violation.LENGTH_MISMATCH);\n+    }\n+\n+    // ModTime should be in the accuracy range defined.\n+    long modTimeDiff \u003d Math.abs(\n+        s3FileStatus.getModificationTime() - msFileStatus.getModificationTime()\n+    );\n+    if (modTimeDiff \u003e MOD_TIME_RANGE) {\n+      comparePair.violations.add(Violation.MOD_TIME_MISMATCH);\n+    }\n+\n+    if(msPathMetadata.getFileStatus().getVersionId() \u003d\u003d null\n+        || s3FileStatus.getVersionId() \u003d\u003d null ) {\n+      LOG.debug(\"Missing versionIDs skipped. A HEAD request is \"\n+          + \"required for each object to get the versionID.\");\n+    } else if(!s3FileStatus.getVersionId().equals(msFileStatus.getVersionId())) {\n+      comparePair.violations.add(Violation.VERSIONID_MISMATCH);\n+    }\n+\n+    // check etag only for files, and not directories\n+    if (!s3FileStatus.isDirectory()) {\n+      if (msPathMetadata.getFileStatus().getETag() \u003d\u003d null) {\n+        comparePair.violations.add(Violation.NO_ETAG);\n+      } else if (s3FileStatus.getETag() !\u003d null \u0026\u0026\n+          !s3FileStatus.getETag().equals(msFileStatus.getETag())) {\n+        comparePair.violations.add(Violation.ETAG_MISMATCH);\n+      }\n+    }\n+\n+    return comparePair;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ComparePair compareFileStatusToPathMetadata(\n      S3AFileStatus s3FileStatus,\n      PathMetadata msPathMetadata) throws IOException {\n    final Path path \u003d s3FileStatus.getPath();\n\n    if (msPathMetadata !\u003d null) {\n      LOG.info(\"Path: {} - Length S3: {}, MS: {} \" +\n              \"- Etag S3: {}, MS: {} \",\n          path,\n          s3FileStatus.getLen(), msPathMetadata.getFileStatus().getLen(),\n          s3FileStatus.getETag(), msPathMetadata.getFileStatus().getETag());\n    } else {\n      LOG.info(\"Path: {} - Length S3: {} - Etag S3: {}, no record in MS.\",\n              path, s3FileStatus.getLen(), s3FileStatus.getETag());\n    }\n\n    ComparePair comparePair \u003d new ComparePair(s3FileStatus, msPathMetadata);\n\n    if (!path.equals(path(ROOT_PATH_STRING))) {\n      final Path parentPath \u003d path.getParent();\n      final PathMetadata parentPm \u003d metadataStore.get(parentPath);\n\n      if (parentPm \u003d\u003d null) {\n        comparePair.violations.add(Violation.NO_PARENT_ENTRY);\n      } else {\n        if (!parentPm.getFileStatus().isDirectory()) {\n          comparePair.violations.add(Violation.PARENT_IS_A_FILE);\n        }\n        if (parentPm.isDeleted()) {\n          comparePair.violations.add(Violation.PARENT_TOMBSTONED);\n        }\n      }\n    } else {\n      LOG.debug(\"Entry is in the root directory, so there\u0027s no parent\");\n    }\n\n    // If the msPathMetadata is null, we RETURN because\n    // there is no metadata compare with\n    if (msPathMetadata \u003d\u003d null) {\n      comparePair.violations.add(Violation.NO_METADATA_ENTRY);\n      return comparePair;\n    }\n\n    final S3AFileStatus msFileStatus \u003d msPathMetadata.getFileStatus();\n    if (s3FileStatus.isDirectory() \u0026\u0026 !msFileStatus.isDirectory()) {\n      comparePair.violations.add(Violation.DIR_IN_S3_FILE_IN_MS);\n    }\n    if (!s3FileStatus.isDirectory() \u0026\u0026 msFileStatus.isDirectory()) {\n      comparePair.violations.add(Violation.FILE_IN_S3_DIR_IN_MS);\n    }\n\n    if(msPathMetadata.isDeleted()) {\n      comparePair.violations.add(Violation.TOMBSTONED_IN_MS_NOT_DELETED_IN_S3);\n    }\n\n    /**\n     * Attribute check\n     */\n    if (s3FileStatus.getLen() !\u003d msFileStatus.getLen()) {\n      comparePair.violations.add(Violation.LENGTH_MISMATCH);\n    }\n\n    // ModTime should be in the accuracy range defined.\n    long modTimeDiff \u003d Math.abs(\n        s3FileStatus.getModificationTime() - msFileStatus.getModificationTime()\n    );\n    if (modTimeDiff \u003e MOD_TIME_RANGE) {\n      comparePair.violations.add(Violation.MOD_TIME_MISMATCH);\n    }\n\n    if(msPathMetadata.getFileStatus().getVersionId() \u003d\u003d null\n        || s3FileStatus.getVersionId() \u003d\u003d null ) {\n      LOG.debug(\"Missing versionIDs skipped. A HEAD request is \"\n          + \"required for each object to get the versionID.\");\n    } else if(!s3FileStatus.getVersionId().equals(msFileStatus.getVersionId())) {\n      comparePair.violations.add(Violation.VERSIONID_MISMATCH);\n    }\n\n    // check etag only for files, and not directories\n    if (!s3FileStatus.isDirectory()) {\n      if (msPathMetadata.getFileStatus().getETag() \u003d\u003d null) {\n        comparePair.violations.add(Violation.NO_ETAG);\n      } else if (s3FileStatus.getETag() !\u003d null \u0026\u0026\n          !s3FileStatus.getETag().equals(msFileStatus.getETag())) {\n        comparePair.violations.add(Violation.ETAG_MISMATCH);\n      }\n    }\n\n    return comparePair;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardFsck.java"
    }
  }
}