{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionUpdater.java",
  "functionName": "processTask",
  "functionId": "processTask___task-ReencryptionTask",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
  "functionStartLine": 463,
  "functionEndLine": 498,
  "numCommitsSeen": 5,
  "timeTaken": 2790,
  "changeHistory": [
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": "Ybodychange",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "10/04/18 11:05 AM",
      "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "20/10/17 4:25 PM",
      "commitNameOld": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 171.78,
      "commitsBetweenForRepo": 1247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void processTask(ReencryptionTask task)\n       throws InterruptedException, ExecutionException, IOException {\n     final List\u003cXAttr\u003e xAttrs;\n     final String zonePath;\n     dir.writeLock();\n     try {\n-      handler.checkZoneReady(task.zoneId);\n+      handler.getTraverser().checkINodeReady(task.zoneId);\n       final INode zoneNode \u003d dir.getInode(task.zoneId);\n       if (zoneNode \u003d\u003d null) {\n         // ez removed.\n         return;\n       }\n       zonePath \u003d zoneNode.getFullPathName();\n       LOG.info(\"Processing returned re-encryption task for zone {}({}), \"\n               + \"batch size {}, start:{}\", zonePath, task.zoneId,\n           task.batch.size(), task.batch.getFirstFilePath());\n       final ZoneSubmissionTracker tracker \u003d\n           handler.getTracker(zoneNode.getId());\n       if (tracker \u003d\u003d null) {\n         // re-encryption canceled.\n         LOG.info(\"Re-encryption was canceled.\");\n         return;\n       }\n       tracker.numFutureDone++;\n       EncryptionFaultInjector.getInstance().reencryptUpdaterProcessOneTask();\n       processTaskEntries(zonePath, task);\n       EncryptionFaultInjector.getInstance().reencryptUpdaterProcessCheckpoint();\n       xAttrs \u003d processCheckpoints(zoneNode, tracker);\n     } finally {\n       dir.writeUnlock();\n     }\n     FSDirEncryptionZoneOp.saveFileXAttrsForBatch(dir, task.batch.getBatch());\n     if (!xAttrs.isEmpty()) {\n       dir.getEditLog().logSetXAttrs(zonePath, xAttrs, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processTask(ReencryptionTask task)\n      throws InterruptedException, ExecutionException, IOException {\n    final List\u003cXAttr\u003e xAttrs;\n    final String zonePath;\n    dir.writeLock();\n    try {\n      handler.getTraverser().checkINodeReady(task.zoneId);\n      final INode zoneNode \u003d dir.getInode(task.zoneId);\n      if (zoneNode \u003d\u003d null) {\n        // ez removed.\n        return;\n      }\n      zonePath \u003d zoneNode.getFullPathName();\n      LOG.info(\"Processing returned re-encryption task for zone {}({}), \"\n              + \"batch size {}, start:{}\", zonePath, task.zoneId,\n          task.batch.size(), task.batch.getFirstFilePath());\n      final ZoneSubmissionTracker tracker \u003d\n          handler.getTracker(zoneNode.getId());\n      if (tracker \u003d\u003d null) {\n        // re-encryption canceled.\n        LOG.info(\"Re-encryption was canceled.\");\n        return;\n      }\n      tracker.numFutureDone++;\n      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessOneTask();\n      processTaskEntries(zonePath, task);\n      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessCheckpoint();\n      xAttrs \u003d processCheckpoints(zoneNode, tracker);\n    } finally {\n      dir.writeUnlock();\n    }\n    FSDirEncryptionZoneOp.saveFileXAttrsForBatch(dir, task.batch.getBatch());\n    if (!xAttrs.isEmpty()) {\n      dir.getEditLog().logSetXAttrs(zonePath, xAttrs, false);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
      "extendedDetails": {}
    },
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12518. Re-encryption should handle task cancellation and progress better.\n",
      "commitDate": "20/10/17 4:25 PM",
      "commitName": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/09/17 7:50 PM",
      "commitNameOld": "633c1ea4554cae6cd684f60848497817d4ed3d82",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 46.86,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   private void processTask(ReencryptionTask task)\n       throws InterruptedException, ExecutionException, IOException {\n     final List\u003cXAttr\u003e xAttrs;\n     final String zonePath;\n     dir.writeLock();\n     try {\n       handler.checkZoneReady(task.zoneId);\n       final INode zoneNode \u003d dir.getInode(task.zoneId);\n       if (zoneNode \u003d\u003d null) {\n         // ez removed.\n         return;\n       }\n       zonePath \u003d zoneNode.getFullPathName();\n       LOG.info(\"Processing returned re-encryption task for zone {}({}), \"\n               + \"batch size {}, start:{}\", zonePath, task.zoneId,\n           task.batch.size(), task.batch.getFirstFilePath());\n       final ZoneSubmissionTracker tracker \u003d\n           handler.getTracker(zoneNode.getId());\n-      Preconditions.checkNotNull(tracker, \"zone tracker not found \" + zonePath);\n+      if (tracker \u003d\u003d null) {\n+        // re-encryption canceled.\n+        LOG.info(\"Re-encryption was canceled.\");\n+        return;\n+      }\n       tracker.numFutureDone++;\n       EncryptionFaultInjector.getInstance().reencryptUpdaterProcessOneTask();\n       processTaskEntries(zonePath, task);\n       EncryptionFaultInjector.getInstance().reencryptUpdaterProcessCheckpoint();\n       xAttrs \u003d processCheckpoints(zoneNode, tracker);\n     } finally {\n       dir.writeUnlock();\n     }\n     FSDirEncryptionZoneOp.saveFileXAttrsForBatch(dir, task.batch.getBatch());\n     if (!xAttrs.isEmpty()) {\n       dir.getEditLog().logSetXAttrs(zonePath, xAttrs, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processTask(ReencryptionTask task)\n      throws InterruptedException, ExecutionException, IOException {\n    final List\u003cXAttr\u003e xAttrs;\n    final String zonePath;\n    dir.writeLock();\n    try {\n      handler.checkZoneReady(task.zoneId);\n      final INode zoneNode \u003d dir.getInode(task.zoneId);\n      if (zoneNode \u003d\u003d null) {\n        // ez removed.\n        return;\n      }\n      zonePath \u003d zoneNode.getFullPathName();\n      LOG.info(\"Processing returned re-encryption task for zone {}({}), \"\n              + \"batch size {}, start:{}\", zonePath, task.zoneId,\n          task.batch.size(), task.batch.getFirstFilePath());\n      final ZoneSubmissionTracker tracker \u003d\n          handler.getTracker(zoneNode.getId());\n      if (tracker \u003d\u003d null) {\n        // re-encryption canceled.\n        LOG.info(\"Re-encryption was canceled.\");\n        return;\n      }\n      tracker.numFutureDone++;\n      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessOneTask();\n      processTaskEntries(zonePath, task);\n      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessCheckpoint();\n      xAttrs \u003d processCheckpoints(zoneNode, tracker);\n    } finally {\n      dir.writeUnlock();\n    }\n    FSDirEncryptionZoneOp.saveFileXAttrsForBatch(dir, task.batch.getBatch());\n    if (!xAttrs.isEmpty()) {\n      dir.getEditLog().logSetXAttrs(zonePath, xAttrs, false);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,32 @@\n+  private void processTask(ReencryptionTask task)\n+      throws InterruptedException, ExecutionException, IOException {\n+    final List\u003cXAttr\u003e xAttrs;\n+    final String zonePath;\n+    dir.writeLock();\n+    try {\n+      handler.checkZoneReady(task.zoneId);\n+      final INode zoneNode \u003d dir.getInode(task.zoneId);\n+      if (zoneNode \u003d\u003d null) {\n+        // ez removed.\n+        return;\n+      }\n+      zonePath \u003d zoneNode.getFullPathName();\n+      LOG.info(\"Processing returned re-encryption task for zone {}({}), \"\n+              + \"batch size {}, start:{}\", zonePath, task.zoneId,\n+          task.batch.size(), task.batch.getFirstFilePath());\n+      final ZoneSubmissionTracker tracker \u003d\n+          handler.getTracker(zoneNode.getId());\n+      Preconditions.checkNotNull(tracker, \"zone tracker not found \" + zonePath);\n+      tracker.numFutureDone++;\n+      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessOneTask();\n+      processTaskEntries(zonePath, task);\n+      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessCheckpoint();\n+      xAttrs \u003d processCheckpoints(zoneNode, tracker);\n+    } finally {\n+      dir.writeUnlock();\n+    }\n+    FSDirEncryptionZoneOp.saveFileXAttrsForBatch(dir, task.batch.getBatch());\n+    if (!xAttrs.isEmpty()) {\n+      dir.getEditLog().logSetXAttrs(zonePath, xAttrs, false);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void processTask(ReencryptionTask task)\n      throws InterruptedException, ExecutionException, IOException {\n    final List\u003cXAttr\u003e xAttrs;\n    final String zonePath;\n    dir.writeLock();\n    try {\n      handler.checkZoneReady(task.zoneId);\n      final INode zoneNode \u003d dir.getInode(task.zoneId);\n      if (zoneNode \u003d\u003d null) {\n        // ez removed.\n        return;\n      }\n      zonePath \u003d zoneNode.getFullPathName();\n      LOG.info(\"Processing returned re-encryption task for zone {}({}), \"\n              + \"batch size {}, start:{}\", zonePath, task.zoneId,\n          task.batch.size(), task.batch.getFirstFilePath());\n      final ZoneSubmissionTracker tracker \u003d\n          handler.getTracker(zoneNode.getId());\n      Preconditions.checkNotNull(tracker, \"zone tracker not found \" + zonePath);\n      tracker.numFutureDone++;\n      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessOneTask();\n      processTaskEntries(zonePath, task);\n      EncryptionFaultInjector.getInstance().reencryptUpdaterProcessCheckpoint();\n      xAttrs \u003d processCheckpoints(zoneNode, tracker);\n    } finally {\n      dir.writeUnlock();\n    }\n    FSDirEncryptionZoneOp.saveFileXAttrsForBatch(dir, task.batch.getBatch());\n    if (!xAttrs.isEmpty()) {\n      dir.getEditLog().logSetXAttrs(zonePath, xAttrs, false);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java"
    }
  }
}