{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DomainSocket.java",
  "functionName": "recvFileInputStreams",
  "functionId": "recvFileInputStreams___streams-FileInputStream[]__buf-byte[]__offset-int__length-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java",
  "functionStartLine": 437,
  "functionEndLine": 476,
  "numCommitsSeen": 18,
  "timeTaken": 1498,
  "changeHistory": [
    "ccaf036662e22da14583942054898c99fa51dae5",
    "140246bad816ae7bf06eda193cc624e1e62923e0",
    "3a417cbf1d4bfc249f1f9fbd3c2b792c5e78bf5f",
    "6f8ee865debd830d2b800de88dd150fc049d1e42",
    "d94621a0cd33c01e1c2765d49d20b4438022e20c"
  ],
  "changeHistoryShort": {
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "140246bad816ae7bf06eda193cc624e1e62923e0": "Ybodychange",
    "3a417cbf1d4bfc249f1f9fbd3c2b792c5e78bf5f": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f8ee865debd830d2b800de88dd150fc049d1e42": "Ybodychange",
    "d94621a0cd33c01e1c2765d49d20b4438022e20c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "04/01/16 2:32 PM",
      "commitNameOld": "778146eaae5b1e17928a1f26fb1e46536a6ee510",
      "commitAuthorOld": "Uma Mahesh",
      "daysBetweenCommits": 560.25,
      "commitsBetweenForRepo": 3588,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n         int offset, int length) throws IOException {\n     FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n     boolean success \u003d false;\n     for (int i \u003d 0; i \u003c streams.length; i++) {\n       streams[i] \u003d null;\n     }\n     refCount.reference();\n     try {\n       int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n       for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n         if (descriptors[i] !\u003d null) {\n           streams[j++] \u003d new FileInputStream(descriptors[i]);\n           descriptors[i] \u003d null;\n         }\n       }\n       success \u003d true;\n       return ret;\n     } finally {\n       if (!success) {\n         for (int i \u003d 0; i \u003c descriptors.length; i++) {\n           if (descriptors[i] !\u003d null) {\n             try {\n               closeFileDescriptor0(descriptors[i]);\n             } catch (Throwable t) {\n-              LOG.warn(t);\n+              LOG.warn(t.toString());\n             }\n           } else if (streams[i] !\u003d null) {\n             try {\n               streams[i].close();\n             } catch (Throwable t) {\n-              LOG.warn(t);\n+              LOG.warn(t.toString());\n             } finally {\n               streams[i] \u003d null; }\n           }\n         }\n       }\n       unreference(!success);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n        int offset, int length) throws IOException {\n    FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n    boolean success \u003d false;\n    for (int i \u003d 0; i \u003c streams.length; i++) {\n      streams[i] \u003d null;\n    }\n    refCount.reference();\n    try {\n      int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n      for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n        if (descriptors[i] !\u003d null) {\n          streams[j++] \u003d new FileInputStream(descriptors[i]);\n          descriptors[i] \u003d null;\n        }\n      }\n      success \u003d true;\n      return ret;\n    } finally {\n      if (!success) {\n        for (int i \u003d 0; i \u003c descriptors.length; i++) {\n          if (descriptors[i] !\u003d null) {\n            try {\n              closeFileDescriptor0(descriptors[i]);\n            } catch (Throwable t) {\n              LOG.warn(t.toString());\n            }\n          } else if (streams[i] !\u003d null) {\n            try {\n              streams[i].close();\n            } catch (Throwable t) {\n              LOG.warn(t.toString());\n            } finally {\n              streams[i] \u003d null; }\n          }\n        }\n      }\n      unreference(!success);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java",
      "extendedDetails": {}
    },
    "140246bad816ae7bf06eda193cc624e1e62923e0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5746.  Add ShortCircuitSharedMemorySegment (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/14 6:25 PM",
      "commitName": "140246bad816ae7bf06eda193cc624e1e62923e0",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "02/01/14 12:00 PM",
      "commitNameOld": "3a299fd7bbacc69d8316a445fdf8c8bcbb79847f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 29.27,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n         int offset, int length) throws IOException {\n     FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n     boolean success \u003d false;\n     for (int i \u003d 0; i \u003c streams.length; i++) {\n       streams[i] \u003d null;\n     }\n-    status.reference();\n+    refCount.reference();\n     try {\n       int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n       for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n         if (descriptors[i] !\u003d null) {\n           streams[j++] \u003d new FileInputStream(descriptors[i]);\n           descriptors[i] \u003d null;\n         }\n       }\n       success \u003d true;\n       return ret;\n     } finally {\n       if (!success) {\n         for (int i \u003d 0; i \u003c descriptors.length; i++) {\n           if (descriptors[i] !\u003d null) {\n             try {\n               closeFileDescriptor0(descriptors[i]);\n             } catch (Throwable t) {\n               LOG.warn(t);\n             }\n           } else if (streams[i] !\u003d null) {\n             try {\n               streams[i].close();\n             } catch (Throwable t) {\n               LOG.warn(t);\n             } finally {\n               streams[i] \u003d null; }\n           }\n         }\n       }\n-      status.unreference(!success);\n+      unreference(!success);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n        int offset, int length) throws IOException {\n    FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n    boolean success \u003d false;\n    for (int i \u003d 0; i \u003c streams.length; i++) {\n      streams[i] \u003d null;\n    }\n    refCount.reference();\n    try {\n      int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n      for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n        if (descriptors[i] !\u003d null) {\n          streams[j++] \u003d new FileInputStream(descriptors[i]);\n          descriptors[i] \u003d null;\n        }\n      }\n      success \u003d true;\n      return ret;\n    } finally {\n      if (!success) {\n        for (int i \u003d 0; i \u003c descriptors.length; i++) {\n          if (descriptors[i] !\u003d null) {\n            try {\n              closeFileDescriptor0(descriptors[i]);\n            } catch (Throwable t) {\n              LOG.warn(t);\n            }\n          } else if (streams[i] !\u003d null) {\n            try {\n              streams[i].close();\n            } catch (Throwable t) {\n              LOG.warn(t);\n            } finally {\n              streams[i] \u003d null; }\n          }\n        }\n      }\n      unreference(!success);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java",
      "extendedDetails": {}
    },
    "3a417cbf1d4bfc249f1f9fbd3c2b792c5e78bf5f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-347: style cleanups. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1446830 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/02/13 4:59 PM",
      "commitName": "3a417cbf1d4bfc249f1f9fbd3c2b792c5e78bf5f",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-347: style cleanups. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1446830 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/02/13 4:59 PM",
          "commitName": "3a417cbf1d4bfc249f1f9fbd3c2b792c5e78bf5f",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "21/01/13 11:29 AM",
          "commitNameOld": "89bd14913aa5f00506a610ca325db495372c4c87",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 25.23,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public int recvFileInputStreams(FileInputStream[] fis, byte buf[],\n+  public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n         int offset, int length) throws IOException {\n-    FileDescriptor fds[] \u003d new FileDescriptor[fis.length];\n+    FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n     boolean success \u003d false;\n-    for (int i \u003d 0; i \u003c fis.length; i++) {\n-      fis[i] \u003d null;\n+    for (int i \u003d 0; i \u003c streams.length; i++) {\n+      streams[i] \u003d null;\n     }\n-    fdRef();\n+    status.reference();\n     try {\n-      int ret \u003d receiveFileDescriptors0(fd, fds, buf, offset, length);\n-      for (int i \u003d 0, j \u003d 0; i \u003c fds.length; i++) {\n-        if (fds[i] !\u003d null) {\n-          fis[j++] \u003d new FileInputStream(fds[i]);\n-          fds[i] \u003d null;\n+      int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n+      for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n+        if (descriptors[i] !\u003d null) {\n+          streams[j++] \u003d new FileInputStream(descriptors[i]);\n+          descriptors[i] \u003d null;\n         }\n       }\n       success \u003d true;\n       return ret;\n     } finally {\n       if (!success) {\n-        for (int i \u003d 0; i \u003c fds.length; i++) {\n-          if (fds[i] !\u003d null) {\n+        for (int i \u003d 0; i \u003c descriptors.length; i++) {\n+          if (descriptors[i] !\u003d null) {\n             try {\n-              closeFileDescriptor0(fds[i]);\n+              closeFileDescriptor0(descriptors[i]);\n             } catch (Throwable t) {\n               LOG.warn(t);\n             }\n-          } else if (fis[i] !\u003d null) {\n+          } else if (streams[i] !\u003d null) {\n             try {\n-              fis[i].close();\n+              streams[i].close();\n             } catch (Throwable t) {\n               LOG.warn(t);\n             } finally {\n-              fis[i] \u003d null; }\n+              streams[i] \u003d null; }\n           }\n         }\n       }\n-      fdUnref(!success);\n+      status.unreference(!success);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n        int offset, int length) throws IOException {\n    FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n    boolean success \u003d false;\n    for (int i \u003d 0; i \u003c streams.length; i++) {\n      streams[i] \u003d null;\n    }\n    status.reference();\n    try {\n      int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n      for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n        if (descriptors[i] !\u003d null) {\n          streams[j++] \u003d new FileInputStream(descriptors[i]);\n          descriptors[i] \u003d null;\n        }\n      }\n      success \u003d true;\n      return ret;\n    } finally {\n      if (!success) {\n        for (int i \u003d 0; i \u003c descriptors.length; i++) {\n          if (descriptors[i] !\u003d null) {\n            try {\n              closeFileDescriptor0(descriptors[i]);\n            } catch (Throwable t) {\n              LOG.warn(t);\n            }\n          } else if (streams[i] !\u003d null) {\n            try {\n              streams[i].close();\n            } catch (Throwable t) {\n              LOG.warn(t);\n            } finally {\n              streams[i] \u003d null; }\n          }\n        }\n      }\n      status.unreference(!success);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java",
          "extendedDetails": {
            "oldValue": "[fis-FileInputStream[], buf-byte[], offset-int, length-int]",
            "newValue": "[streams-FileInputStream[], buf-byte[], offset-int, length-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-347: style cleanups. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1446830 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/02/13 4:59 PM",
          "commitName": "3a417cbf1d4bfc249f1f9fbd3c2b792c5e78bf5f",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "21/01/13 11:29 AM",
          "commitNameOld": "89bd14913aa5f00506a610ca325db495372c4c87",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 25.23,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public int recvFileInputStreams(FileInputStream[] fis, byte buf[],\n+  public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n         int offset, int length) throws IOException {\n-    FileDescriptor fds[] \u003d new FileDescriptor[fis.length];\n+    FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n     boolean success \u003d false;\n-    for (int i \u003d 0; i \u003c fis.length; i++) {\n-      fis[i] \u003d null;\n+    for (int i \u003d 0; i \u003c streams.length; i++) {\n+      streams[i] \u003d null;\n     }\n-    fdRef();\n+    status.reference();\n     try {\n-      int ret \u003d receiveFileDescriptors0(fd, fds, buf, offset, length);\n-      for (int i \u003d 0, j \u003d 0; i \u003c fds.length; i++) {\n-        if (fds[i] !\u003d null) {\n-          fis[j++] \u003d new FileInputStream(fds[i]);\n-          fds[i] \u003d null;\n+      int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n+      for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n+        if (descriptors[i] !\u003d null) {\n+          streams[j++] \u003d new FileInputStream(descriptors[i]);\n+          descriptors[i] \u003d null;\n         }\n       }\n       success \u003d true;\n       return ret;\n     } finally {\n       if (!success) {\n-        for (int i \u003d 0; i \u003c fds.length; i++) {\n-          if (fds[i] !\u003d null) {\n+        for (int i \u003d 0; i \u003c descriptors.length; i++) {\n+          if (descriptors[i] !\u003d null) {\n             try {\n-              closeFileDescriptor0(fds[i]);\n+              closeFileDescriptor0(descriptors[i]);\n             } catch (Throwable t) {\n               LOG.warn(t);\n             }\n-          } else if (fis[i] !\u003d null) {\n+          } else if (streams[i] !\u003d null) {\n             try {\n-              fis[i].close();\n+              streams[i].close();\n             } catch (Throwable t) {\n               LOG.warn(t);\n             } finally {\n-              fis[i] \u003d null; }\n+              streams[i] \u003d null; }\n           }\n         }\n       }\n-      fdUnref(!success);\n+      status.unreference(!success);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int recvFileInputStreams(FileInputStream[] streams, byte buf[],\n        int offset, int length) throws IOException {\n    FileDescriptor descriptors[] \u003d new FileDescriptor[streams.length];\n    boolean success \u003d false;\n    for (int i \u003d 0; i \u003c streams.length; i++) {\n      streams[i] \u003d null;\n    }\n    status.reference();\n    try {\n      int ret \u003d receiveFileDescriptors0(fd, descriptors, buf, offset, length);\n      for (int i \u003d 0, j \u003d 0; i \u003c descriptors.length; i++) {\n        if (descriptors[i] !\u003d null) {\n          streams[j++] \u003d new FileInputStream(descriptors[i]);\n          descriptors[i] \u003d null;\n        }\n      }\n      success \u003d true;\n      return ret;\n    } finally {\n      if (!success) {\n        for (int i \u003d 0; i \u003c descriptors.length; i++) {\n          if (descriptors[i] !\u003d null) {\n            try {\n              closeFileDescriptor0(descriptors[i]);\n            } catch (Throwable t) {\n              LOG.warn(t);\n            }\n          } else if (streams[i] !\u003d null) {\n            try {\n              streams[i].close();\n            } catch (Throwable t) {\n              LOG.warn(t);\n            } finally {\n              streams[i] \u003d null; }\n          }\n        }\n      }\n      status.unreference(!success);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f8ee865debd830d2b800de88dd150fc049d1e42": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4388. DomainSocket should throw AsynchronousCloseException when appropriate. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1432339 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/13 4:12 PM",
      "commitName": "6f8ee865debd830d2b800de88dd150fc049d1e42",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/01/13 3:52 PM",
      "commitNameOld": "9a4030e0e84a688c12daa21fe9a165808c3eca70",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public int recvFileInputStreams(FileInputStream[] fis, byte buf[],\n         int offset, int length) throws IOException {\n     FileDescriptor fds[] \u003d new FileDescriptor[fis.length];\n     boolean success \u003d false;\n     for (int i \u003d 0; i \u003c fis.length; i++) {\n       fis[i] \u003d null;\n     }\n     fdRef();\n     try {\n       int ret \u003d receiveFileDescriptors0(fd, fds, buf, offset, length);\n       for (int i \u003d 0, j \u003d 0; i \u003c fds.length; i++) {\n         if (fds[i] !\u003d null) {\n           fis[j++] \u003d new FileInputStream(fds[i]);\n           fds[i] \u003d null;\n         }\n       }\n       success \u003d true;\n       return ret;\n     } finally {\n-      fdUnref();\n       if (!success) {\n         for (int i \u003d 0; i \u003c fds.length; i++) {\n           if (fds[i] !\u003d null) {\n             try {\n               closeFileDescriptor0(fds[i]);\n             } catch (Throwable t) {\n               LOG.warn(t);\n             }\n           } else if (fis[i] !\u003d null) {\n             try {\n               fis[i].close();\n             } catch (Throwable t) {\n               LOG.warn(t);\n             } finally {\n               fis[i] \u003d null; }\n           }\n         }\n       }\n+      fdUnref(!success);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int recvFileInputStreams(FileInputStream[] fis, byte buf[],\n        int offset, int length) throws IOException {\n    FileDescriptor fds[] \u003d new FileDescriptor[fis.length];\n    boolean success \u003d false;\n    for (int i \u003d 0; i \u003c fis.length; i++) {\n      fis[i] \u003d null;\n    }\n    fdRef();\n    try {\n      int ret \u003d receiveFileDescriptors0(fd, fds, buf, offset, length);\n      for (int i \u003d 0, j \u003d 0; i \u003c fds.length; i++) {\n        if (fds[i] !\u003d null) {\n          fis[j++] \u003d new FileInputStream(fds[i]);\n          fds[i] \u003d null;\n        }\n      }\n      success \u003d true;\n      return ret;\n    } finally {\n      if (!success) {\n        for (int i \u003d 0; i \u003c fds.length; i++) {\n          if (fds[i] !\u003d null) {\n            try {\n              closeFileDescriptor0(fds[i]);\n            } catch (Throwable t) {\n              LOG.warn(t);\n            }\n          } else if (fis[i] !\u003d null) {\n            try {\n              fis[i].close();\n            } catch (Throwable t) {\n              LOG.warn(t);\n            } finally {\n              fis[i] \u003d null; }\n          }\n        }\n      }\n      fdUnref(!success);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java",
      "extendedDetails": {}
    },
    "d94621a0cd33c01e1c2765d49d20b4438022e20c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4354. Create DomainSocket and DomainPeer and associated unit tests. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1431102 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 1:37 PM",
      "commitName": "d94621a0cd33c01e1c2765d49d20b4438022e20c",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  public int recvFileInputStreams(FileInputStream[] fis, byte buf[],\n+        int offset, int length) throws IOException {\n+    FileDescriptor fds[] \u003d new FileDescriptor[fis.length];\n+    boolean success \u003d false;\n+    for (int i \u003d 0; i \u003c fis.length; i++) {\n+      fis[i] \u003d null;\n+    }\n+    fdRef();\n+    try {\n+      int ret \u003d receiveFileDescriptors0(fd, fds, buf, offset, length);\n+      for (int i \u003d 0, j \u003d 0; i \u003c fds.length; i++) {\n+        if (fds[i] !\u003d null) {\n+          fis[j++] \u003d new FileInputStream(fds[i]);\n+          fds[i] \u003d null;\n+        }\n+      }\n+      success \u003d true;\n+      return ret;\n+    } finally {\n+      fdUnref();\n+      if (!success) {\n+        for (int i \u003d 0; i \u003c fds.length; i++) {\n+          if (fds[i] !\u003d null) {\n+            try {\n+              closeFileDescriptor0(fds[i]);\n+            } catch (Throwable t) {\n+              LOG.warn(t);\n+            }\n+          } else if (fis[i] !\u003d null) {\n+            try {\n+              fis[i].close();\n+            } catch (Throwable t) {\n+              LOG.warn(t);\n+            } finally {\n+              fis[i] \u003d null; }\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int recvFileInputStreams(FileInputStream[] fis, byte buf[],\n        int offset, int length) throws IOException {\n    FileDescriptor fds[] \u003d new FileDescriptor[fis.length];\n    boolean success \u003d false;\n    for (int i \u003d 0; i \u003c fis.length; i++) {\n      fis[i] \u003d null;\n    }\n    fdRef();\n    try {\n      int ret \u003d receiveFileDescriptors0(fd, fds, buf, offset, length);\n      for (int i \u003d 0, j \u003d 0; i \u003c fds.length; i++) {\n        if (fds[i] !\u003d null) {\n          fis[j++] \u003d new FileInputStream(fds[i]);\n          fds[i] \u003d null;\n        }\n      }\n      success \u003d true;\n      return ret;\n    } finally {\n      fdUnref();\n      if (!success) {\n        for (int i \u003d 0; i \u003c fds.length; i++) {\n          if (fds[i] !\u003d null) {\n            try {\n              closeFileDescriptor0(fds[i]);\n            } catch (Throwable t) {\n              LOG.warn(t);\n            }\n          } else if (fis[i] !\u003d null) {\n            try {\n              fis[i].close();\n            } catch (Throwable t) {\n              LOG.warn(t);\n            } finally {\n              fis[i] \u003d null; }\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java"
    }
  }
}