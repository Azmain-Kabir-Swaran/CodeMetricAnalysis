{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SysInfoLinux.java",
  "functionName": "readProcCpuInfoFile",
  "functionId": "readProcCpuInfoFile",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java",
  "functionStartLine": 310,
  "functionEndLine": 371,
  "numCommitsSeen": 17,
  "timeTaken": 10039,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d",
    "500a1d9c76ec612b4e737888f4be79951c11591d",
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d": "Ymovefromfile",
    "500a1d9c76ec612b4e737888f4be79951c11591d": "Ybodychange",
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "22/06/18 10:15 AM",
      "commitNameOld": "6432128622d64f3f9dd638b9c254c77cdf5408aa",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 314.11,
      "commitsBetweenForRepo": 2397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   private void readProcCpuInfoFile() {\n     // This directory needs to be read only once\n     if (readCpuInfoFile) {\n       return;\n     }\n     HashSet\u003cString\u003e coreIdSet \u003d new HashSet\u003c\u003e();\n     // Read \"/proc/cpuinfo\" file\n     BufferedReader in;\n     InputStreamReader fReader;\n     try {\n-      fReader \u003d new InputStreamReader(\n-          new FileInputStream(procfsCpuFile), Charset.forName(\"UTF-8\"));\n+      fReader \u003d\n+          new InputStreamReader(Files.newInputStream(Paths.get(procfsCpuFile)),\n+              Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n-    } catch (FileNotFoundException f) {\n+    } catch (IOException f) {\n       // shouldn\u0027t happen....\n       LOG.warn(\"Couldn\u0027t read \" + procfsCpuFile + \"; can\u0027t determine cpu info\");\n       return;\n     }\n     Matcher mat;\n     try {\n       numProcessors \u003d 0;\n       numCores \u003d 1;\n       String currentPhysicalId \u003d \"\";\n       String str \u003d in.readLine();\n       while (str !\u003d null) {\n         mat \u003d PROCESSOR_FORMAT.matcher(str);\n         if (mat.find()) {\n           numProcessors++;\n         }\n         mat \u003d FREQUENCY_FORMAT.matcher(str);\n         if (mat.find()) {\n           cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n         }\n         mat \u003d PHYSICAL_ID_FORMAT.matcher(str);\n         if (mat.find()) {\n           currentPhysicalId \u003d str;\n         }\n         mat \u003d CORE_ID_FORMAT.matcher(str);\n         if (mat.find()) {\n           coreIdSet.add(currentPhysicalId + \" \" + str);\n           numCores \u003d coreIdSet.size();\n         }\n         str \u003d in.readLine();\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n     readCpuInfoFile \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    HashSet\u003cString\u003e coreIdSet \u003d new HashSet\u003c\u003e();\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in;\n    InputStreamReader fReader;\n    try {\n      fReader \u003d\n          new InputStreamReader(Files.newInputStream(Paths.get(procfsCpuFile)),\n              Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (IOException f) {\n      // shouldn\u0027t happen....\n      LOG.warn(\"Couldn\u0027t read \" + procfsCpuFile + \"; can\u0027t determine cpu info\");\n      return;\n    }\n    Matcher mat;\n    try {\n      numProcessors \u003d 0;\n      numCores \u003d 1;\n      String currentPhysicalId \u003d \"\";\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        mat \u003d PHYSICAL_ID_FORMAT.matcher(str);\n        if (mat.find()) {\n          currentPhysicalId \u003d str;\n        }\n        mat \u003d CORE_ID_FORMAT.matcher(str);\n        if (mat.find()) {\n          coreIdSet.add(currentPhysicalId + \" \" + str);\n          numCores \u003d coreIdSet.size();\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java",
      "extendedDetails": {}
    },
    "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d": {
      "type": "Ymovefromfile",
      "commitMessage": "HADOOP-12180. Move ResourceCalculatorPlugin from YARN to Common. (Chris Douglas via kasha)\n",
      "commitDate": "09/07/15 9:56 AM",
      "commitName": "ac6048372a58b3a3b57cd5f2702b44a3d4667f3d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/07/15 9:48 AM",
      "commitNameOld": "aa067c6aa47b4c79577096817acc00ad6421180c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    HashSet\u003cString\u003e coreIdSet \u003d new HashSet\u003c\u003e();\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in;\n    InputStreamReader fReader;\n    try {\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(procfsCpuFile), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      LOG.warn(\"Couldn\u0027t read \" + procfsCpuFile + \"; can\u0027t determine cpu info\");\n      return;\n    }\n    Matcher mat;\n    try {\n      numProcessors \u003d 0;\n      numCores \u003d 1;\n      String currentPhysicalId \u003d \"\";\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        mat \u003d PHYSICAL_ID_FORMAT.matcher(str);\n        if (mat.find()) {\n          currentPhysicalId \u003d str;\n        }\n        mat \u003d CORE_ID_FORMAT.matcher(str);\n        if (mat.find()) {\n          coreIdSet.add(currentPhysicalId + \" \" + str);\n          numCores \u003d coreIdSet.size();\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java",
        "oldMethodName": "readProcCpuInfoFile",
        "newMethodName": "readProcCpuInfoFile"
      }
    },
    "500a1d9c76ec612b4e737888f4be79951c11591d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-160. Enhanced NodeManager to automatically obtain cpu/memory values from underlying OS when configured to do so. Contributed by Varun Vasudev.\n",
      "commitDate": "26/05/15 11:38 AM",
      "commitName": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/03/15 5:33 PM",
      "commitNameOld": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 82.71,
      "commitsBetweenForRepo": 771,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,61 @@\n   private void readProcCpuInfoFile() {\n     // This directory needs to be read only once\n     if (readCpuInfoFile) {\n       return;\n     }\n+    HashSet\u003cString\u003e coreIdSet \u003d new HashSet\u003c\u003e();\n     // Read \"/proc/cpuinfo\" file\n-    BufferedReader in \u003d null;\n-    InputStreamReader fReader \u003d null;\n+    BufferedReader in;\n+    InputStreamReader fReader;\n     try {\n       fReader \u003d new InputStreamReader(\n           new FileInputStream(procfsCpuFile), Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // shouldn\u0027t happen....\n+      LOG.warn(\"Couldn\u0027t read \" + procfsCpuFile + \"; can\u0027t determine cpu info\");\n       return;\n     }\n-    Matcher mat \u003d null;\n+    Matcher mat;\n     try {\n       numProcessors \u003d 0;\n+      numCores \u003d 1;\n+      String currentPhysicalId \u003d \"\";\n       String str \u003d in.readLine();\n       while (str !\u003d null) {\n         mat \u003d PROCESSOR_FORMAT.matcher(str);\n         if (mat.find()) {\n           numProcessors++;\n         }\n         mat \u003d FREQUENCY_FORMAT.matcher(str);\n         if (mat.find()) {\n           cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n         }\n+        mat \u003d PHYSICAL_ID_FORMAT.matcher(str);\n+        if (mat.find()) {\n+          currentPhysicalId \u003d str;\n+        }\n+        mat \u003d CORE_ID_FORMAT.matcher(str);\n+        if (mat.find()) {\n+          coreIdSet.add(currentPhysicalId + \" \" + str);\n+          numCores \u003d coreIdSet.size();\n+        }\n         str \u003d in.readLine();\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n     readCpuInfoFile \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    HashSet\u003cString\u003e coreIdSet \u003d new HashSet\u003c\u003e();\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in;\n    InputStreamReader fReader;\n    try {\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(procfsCpuFile), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      LOG.warn(\"Couldn\u0027t read \" + procfsCpuFile + \"; can\u0027t determine cpu info\");\n      return;\n    }\n    Matcher mat;\n    try {\n      numProcessors \u003d 0;\n      numCores \u003d 1;\n      String currentPhysicalId \u003d \"\";\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        mat \u003d PHYSICAL_ID_FORMAT.matcher(str);\n        if (mat.find()) {\n          currentPhysicalId \u003d str;\n        }\n        mat \u003d CORE_ID_FORMAT.matcher(str);\n        if (mat.find()) {\n          coreIdSet.add(currentPhysicalId + \" \" + str);\n          numCores \u003d coreIdSet.size();\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
      "extendedDetails": {}
    },
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2939. Fix new findbugs warnings in hadoop-yarn-common. (Li Lu via junping_du)\n",
      "commitDate": "22/12/14 3:06 AM",
      "commitName": "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "19/12/12 4:20 PM",
      "commitNameOld": "1a49c854386d3ba4aef6f29f46e2bd5e71e86dc1",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 732.45,
      "commitsBetweenForRepo": 5128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private void readProcCpuInfoFile() {\n     // This directory needs to be read only once\n     if (readCpuInfoFile) {\n       return;\n     }\n     // Read \"/proc/cpuinfo\" file\n     BufferedReader in \u003d null;\n-    FileReader fReader \u003d null;\n+    InputStreamReader fReader \u003d null;\n     try {\n-      fReader \u003d new FileReader(procfsCpuFile);\n+      fReader \u003d new InputStreamReader(\n+          new FileInputStream(procfsCpuFile), Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // shouldn\u0027t happen....\n       return;\n     }\n     Matcher mat \u003d null;\n     try {\n       numProcessors \u003d 0;\n       String str \u003d in.readLine();\n       while (str !\u003d null) {\n         mat \u003d PROCESSOR_FORMAT.matcher(str);\n         if (mat.find()) {\n           numProcessors++;\n         }\n         mat \u003d FREQUENCY_FORMAT.matcher(str);\n         if (mat.find()) {\n           cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n         }\n         str \u003d in.readLine();\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n     readCpuInfoFile \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in \u003d null;\n    InputStreamReader fReader \u003d null;\n    try {\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(procfsCpuFile), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      return;\n    }\n    Matcher mat \u003d null;\n    try {\n      numProcessors \u003d 0;\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      fReader \u003d new FileReader(procfsCpuFile);\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      return;\n    }\n    Matcher mat \u003d null;\n    try {\n      numProcessors \u003d 0;\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      fReader \u003d new FileReader(procfsCpuFile);\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      return;\n    }\n    Matcher mat \u003d null;\n    try {\n      numProcessors \u003d 0;\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      fReader \u003d new FileReader(procfsCpuFile);\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      return;\n    }\n    Matcher mat \u003d null;\n    try {\n      numProcessors \u003d 0;\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/LinuxResourceCalculatorPlugin.java",
        "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/LinuxResourceCalculatorPlugin.java",
        "oldMethodName": "readProcCpuInfoFile",
        "newMethodName": "readProcCpuInfoFile"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,47 @@\n+  private void readProcCpuInfoFile() {\n+    // This directory needs to be read only once\n+    if (readCpuInfoFile) {\n+      return;\n+    }\n+    // Read \"/proc/cpuinfo\" file\n+    BufferedReader in \u003d null;\n+    FileReader fReader \u003d null;\n+    try {\n+      fReader \u003d new FileReader(procfsCpuFile);\n+      in \u003d new BufferedReader(fReader);\n+    } catch (FileNotFoundException f) {\n+      // shouldn\u0027t happen....\n+      return;\n+    }\n+    Matcher mat \u003d null;\n+    try {\n+      numProcessors \u003d 0;\n+      String str \u003d in.readLine();\n+      while (str !\u003d null) {\n+        mat \u003d PROCESSOR_FORMAT.matcher(str);\n+        if (mat.find()) {\n+          numProcessors++;\n+        }\n+        mat \u003d FREQUENCY_FORMAT.matcher(str);\n+        if (mat.find()) {\n+          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n+        }\n+        str \u003d in.readLine();\n+      }\n+    } catch (IOException io) {\n+      LOG.warn(\"Error reading the stream \" + io);\n+    } finally {\n+      // Close the streams\n+      try {\n+        fReader.close();\n+        try {\n+          in.close();\n+        } catch (IOException i) {\n+          LOG.warn(\"Error closing the stream \" + in);\n+        }\n+      } catch (IOException i) {\n+        LOG.warn(\"Error closing the stream \" + fReader);\n+      }\n+    }\n+    readCpuInfoFile \u003d true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void readProcCpuInfoFile() {\n    // This directory needs to be read only once\n    if (readCpuInfoFile) {\n      return;\n    }\n    // Read \"/proc/cpuinfo\" file\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      fReader \u003d new FileReader(procfsCpuFile);\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // shouldn\u0027t happen....\n      return;\n    }\n    Matcher mat \u003d null;\n    try {\n      numProcessors \u003d 0;\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCESSOR_FORMAT.matcher(str);\n        if (mat.find()) {\n          numProcessors++;\n        }\n        mat \u003d FREQUENCY_FORMAT.matcher(str);\n        if (mat.find()) {\n          cpuFrequency \u003d (long)(Double.parseDouble(mat.group(1)) * 1000); // kHz\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n    readCpuInfoFile \u003d true;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/LinuxResourceCalculatorPlugin.java"
    }
  }
}