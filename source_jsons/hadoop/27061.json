{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProxyCA.java",
  "functionName": "createCert",
  "functionId": "createCert___isCa-boolean__issuerStr-String__subjectStr-String__from-Date__to-Date__publicKey-PublicKey__privateKey-PrivateKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/ProxyCA.java",
  "functionStartLine": 149,
  "functionEndLine": 185,
  "numCommitsSeen": 3,
  "timeTaken": 1340,
  "changeHistory": [
    "c2288ac45b748b4119442c46147ccc324926c340"
  ],
  "changeHistoryShort": {
    "c2288ac45b748b4119442c46147ccc324926c340": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,37 @@\n+  private X509Certificate createCert(boolean isCa, String issuerStr,\n+      String subjectStr, Date from, Date to, PublicKey publicKey,\n+      PrivateKey privateKey) throws GeneralSecurityException, IOException {\n+    X500Name issuer \u003d new X500Name(issuerStr);\n+    X500Name subject \u003d new X500Name(subjectStr);\n+    SubjectPublicKeyInfo subPubKeyInfo \u003d\n+        SubjectPublicKeyInfo.getInstance(publicKey.getEncoded());\n+    X509v3CertificateBuilder certBuilder \u003d new X509v3CertificateBuilder(\n+        issuer, new BigInteger(64, srand), from, to, subject, subPubKeyInfo);\n+    AlgorithmIdentifier digAlgId \u003d\n+        new DefaultDigestAlgorithmIdentifierFinder().find(SIG_ALG_ID);\n+    ContentSigner contentSigner;\n+    try {\n+      contentSigner \u003d new BcRSAContentSignerBuilder(SIG_ALG_ID, digAlgId)\n+          .build(PrivateKeyFactory.createKey(privateKey.getEncoded()));\n+    } catch (OperatorCreationException oce) {\n+      throw new GeneralSecurityException(oce);\n+    }\n+    if (isCa) {\n+      // BasicConstraints(0) indicates a CA and a path length of 0.  This is\n+      // important to indicate that child certificates can\u0027t issue additional\n+      // grandchild certificates\n+      certBuilder.addExtension(Extension.basicConstraints, true,\n+          new BasicConstraints(0));\n+    } else {\n+      // BasicConstraints(false) indicates this is not a CA\n+      certBuilder.addExtension(Extension.basicConstraints, true,\n+          new BasicConstraints(false));\n+      certBuilder.addExtension(Extension.authorityKeyIdentifier, false,\n+          new JcaX509ExtensionUtils().createAuthorityKeyIdentifier(caCert));\n+    }\n+    X509CertificateHolder certHolder \u003d certBuilder.build(contentSigner);\n+    X509Certificate cert \u003d new JcaX509CertificateConverter().setProvider(\"BC\")\n+        .getCertificate(certHolder);\n+    LOG.info(\"Created Certificate for {}\", subject);\n+    return cert;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private X509Certificate createCert(boolean isCa, String issuerStr,\n      String subjectStr, Date from, Date to, PublicKey publicKey,\n      PrivateKey privateKey) throws GeneralSecurityException, IOException {\n    X500Name issuer \u003d new X500Name(issuerStr);\n    X500Name subject \u003d new X500Name(subjectStr);\n    SubjectPublicKeyInfo subPubKeyInfo \u003d\n        SubjectPublicKeyInfo.getInstance(publicKey.getEncoded());\n    X509v3CertificateBuilder certBuilder \u003d new X509v3CertificateBuilder(\n        issuer, new BigInteger(64, srand), from, to, subject, subPubKeyInfo);\n    AlgorithmIdentifier digAlgId \u003d\n        new DefaultDigestAlgorithmIdentifierFinder().find(SIG_ALG_ID);\n    ContentSigner contentSigner;\n    try {\n      contentSigner \u003d new BcRSAContentSignerBuilder(SIG_ALG_ID, digAlgId)\n          .build(PrivateKeyFactory.createKey(privateKey.getEncoded()));\n    } catch (OperatorCreationException oce) {\n      throw new GeneralSecurityException(oce);\n    }\n    if (isCa) {\n      // BasicConstraints(0) indicates a CA and a path length of 0.  This is\n      // important to indicate that child certificates can\u0027t issue additional\n      // grandchild certificates\n      certBuilder.addExtension(Extension.basicConstraints, true,\n          new BasicConstraints(0));\n    } else {\n      // BasicConstraints(false) indicates this is not a CA\n      certBuilder.addExtension(Extension.basicConstraints, true,\n          new BasicConstraints(false));\n      certBuilder.addExtension(Extension.authorityKeyIdentifier, false,\n          new JcaX509ExtensionUtils().createAuthorityKeyIdentifier(caCert));\n    }\n    X509CertificateHolder certHolder \u003d certBuilder.build(contentSigner);\n    X509Certificate cert \u003d new JcaX509CertificateConverter().setProvider(\"BC\")\n        .getCertificate(certHolder);\n    LOG.info(\"Created Certificate for {}\", subject);\n    return cert;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/ProxyCA.java"
    }
  }
}