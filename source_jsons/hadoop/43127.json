{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "updateComponentInstance",
  "functionId": "updateComponentInstance___request-HttpServletRequest(annotations-@Context)__serviceName-String(annotations-@PathParam(SERVICE_NAME))__componentName-String(annotations-@PathParam(COMPONENT_NAME))__compInstanceName-String(annotations-@PathParam(COMP_INSTANCE_NAME))__reqContainer-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 505,
  "functionEndLine": 552,
  "numCommitsSeen": 30,
  "timeTaken": 2892,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
    "4a7369b09547a78f532af66c763c6994a38b5d68"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response updateComponentInstance(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      @PathParam(COMPONENT_NAME) String componentName,\n      @PathParam(COMP_INSTANCE_NAME) String compInstanceName,\n      Container reqContainer) {\n\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"PUT: update component instance {} for component \u003d {}\" +\n              \" service \u003d {} user \u003d {}\", compInstanceName, componentName,\n          serviceName, ugi);\n      if (reqContainer \u003d\u003d null) {\n        throw new YarnException(\"No container data provided.\");\n      }\n      Service service \u003d getServiceFromClient(ugi, serviceName);\n      Component component \u003d service.getComponent(componentName);\n      if (component \u003d\u003d null) {\n        throw new YarnException(String.format(\n            \"The component name in the URI path (%s) is invalid.\",\n            componentName));\n      }\n\n      Container liveContainer \u003d component.getComponentInstance(\n          compInstanceName);\n      if (liveContainer \u003d\u003d null) {\n        throw new YarnException(String.format(\n            \"The component (%s) does not have a component instance (%s).\",\n            componentName, compInstanceName));\n      }\n\n      if (reqContainer.getState() !\u003d null\n          \u0026\u0026 reqContainer.getState().equals(ContainerState.UPGRADING)) {\n        return processContainersUpgrade(ugi, service,\n            Lists.newArrayList(liveContainer));\n      }\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n    return Response.status(Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
      "commitDate": "15/05/18 5:40 PM",
      "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/05/18 10:27 AM",
      "commitNameOld": "7fe3214d4bb810c0da18dd936875b4e2588ba518",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.3,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public Response updateComponentInstance(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String serviceName,\n       @PathParam(COMPONENT_NAME) String componentName,\n       @PathParam(COMP_INSTANCE_NAME) String compInstanceName,\n       Container reqContainer) {\n \n     try {\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       LOG.info(\"PUT: update component instance {} for component \u003d {}\" +\n               \" service \u003d {} user \u003d {}\", compInstanceName, componentName,\n           serviceName, ugi);\n       if (reqContainer \u003d\u003d null) {\n         throw new YarnException(\"No container data provided.\");\n       }\n       Service service \u003d getServiceFromClient(ugi, serviceName);\n       Component component \u003d service.getComponent(componentName);\n       if (component \u003d\u003d null) {\n         throw new YarnException(String.format(\n             \"The component name in the URI path (%s) is invalid.\",\n             componentName));\n       }\n \n       Container liveContainer \u003d component.getComponentInstance(\n           compInstanceName);\n       if (liveContainer \u003d\u003d null) {\n         throw new YarnException(String.format(\n             \"The component (%s) does not have a component instance (%s).\",\n             componentName, compInstanceName));\n       }\n \n       if (reqContainer.getState() !\u003d null\n           \u0026\u0026 reqContainer.getState().equals(ContainerState.UPGRADING)) {\n-        return processContainerUpgrade(ugi, service,\n+        return processContainersUpgrade(ugi, service,\n             Lists.newArrayList(liveContainer));\n       }\n     } catch (AccessControlException e) {\n       return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n     } catch (YarnException e) {\n       return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n     return Response.status(Status.NO_CONTENT).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponentInstance(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      @PathParam(COMPONENT_NAME) String componentName,\n      @PathParam(COMP_INSTANCE_NAME) String compInstanceName,\n      Container reqContainer) {\n\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"PUT: update component instance {} for component \u003d {}\" +\n              \" service \u003d {} user \u003d {}\", compInstanceName, componentName,\n          serviceName, ugi);\n      if (reqContainer \u003d\u003d null) {\n        throw new YarnException(\"No container data provided.\");\n      }\n      Service service \u003d getServiceFromClient(ugi, serviceName);\n      Component component \u003d service.getComponent(componentName);\n      if (component \u003d\u003d null) {\n        throw new YarnException(String.format(\n            \"The component name in the URI path (%s) is invalid.\",\n            componentName));\n      }\n\n      Container liveContainer \u003d component.getComponentInstance(\n          compInstanceName);\n      if (liveContainer \u003d\u003d null) {\n        throw new YarnException(String.format(\n            \"The component (%s) does not have a component instance (%s).\",\n            componentName, compInstanceName));\n      }\n\n      if (reqContainer.getState() !\u003d null\n          \u0026\u0026 reqContainer.getState().equals(ContainerState.UPGRADING)) {\n        return processContainersUpgrade(ugi, service,\n            Lists.newArrayList(liveContainer));\n      }\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n    return Response.status(Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,48 @@\n+  public Response updateComponentInstance(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String serviceName,\n+      @PathParam(COMPONENT_NAME) String componentName,\n+      @PathParam(COMP_INSTANCE_NAME) String compInstanceName,\n+      Container reqContainer) {\n+\n+    try {\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      LOG.info(\"PUT: update component instance {} for component \u003d {}\" +\n+              \" service \u003d {} user \u003d {}\", compInstanceName, componentName,\n+          serviceName, ugi);\n+      if (reqContainer \u003d\u003d null) {\n+        throw new YarnException(\"No container data provided.\");\n+      }\n+      Service service \u003d getServiceFromClient(ugi, serviceName);\n+      Component component \u003d service.getComponent(componentName);\n+      if (component \u003d\u003d null) {\n+        throw new YarnException(String.format(\n+            \"The component name in the URI path (%s) is invalid.\",\n+            componentName));\n+      }\n+\n+      Container liveContainer \u003d component.getComponentInstance(\n+          compInstanceName);\n+      if (liveContainer \u003d\u003d null) {\n+        throw new YarnException(String.format(\n+            \"The component (%s) does not have a component instance (%s).\",\n+            componentName, compInstanceName));\n+      }\n+\n+      if (reqContainer.getState() !\u003d null\n+          \u0026\u0026 reqContainer.getState().equals(ContainerState.UPGRADING)) {\n+        return processContainerUpgrade(ugi, service,\n+            Lists.newArrayList(liveContainer));\n+      }\n+    } catch (AccessControlException e) {\n+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n+    } catch (YarnException e) {\n+      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n+    }\n+    return Response.status(Status.NO_CONTENT).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponentInstance(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      @PathParam(COMPONENT_NAME) String componentName,\n      @PathParam(COMP_INSTANCE_NAME) String compInstanceName,\n      Container reqContainer) {\n\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"PUT: update component instance {} for component \u003d {}\" +\n              \" service \u003d {} user \u003d {}\", compInstanceName, componentName,\n          serviceName, ugi);\n      if (reqContainer \u003d\u003d null) {\n        throw new YarnException(\"No container data provided.\");\n      }\n      Service service \u003d getServiceFromClient(ugi, serviceName);\n      Component component \u003d service.getComponent(componentName);\n      if (component \u003d\u003d null) {\n        throw new YarnException(String.format(\n            \"The component name in the URI path (%s) is invalid.\",\n            componentName));\n      }\n\n      Container liveContainer \u003d component.getComponentInstance(\n          compInstanceName);\n      if (liveContainer \u003d\u003d null) {\n        throw new YarnException(String.format(\n            \"The component (%s) does not have a component instance (%s).\",\n            componentName, compInstanceName));\n      }\n\n      if (reqContainer.getState() !\u003d null\n          \u0026\u0026 reqContainer.getState().equals(ContainerState.UPGRADING)) {\n        return processContainerUpgrade(ugi, service,\n            Lists.newArrayList(liveContainer));\n      }\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n    return Response.status(Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}