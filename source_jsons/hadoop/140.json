{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "readlink",
  "functionId": "readlink___xdr-XDR__info-RpcInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 625,
  "functionEndLine": 627,
  "numCommitsSeen": 105,
  "timeTaken": 3787,
  "changeHistory": [
    "c9aa74743773c61be938cc1a6ea811ae1404bca2",
    "2ecab65e3e290a1ee192b39ec70868863853543a",
    "42391d260da400593812396c1ffd45d1a371d3cb",
    "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
    "c7e265bf26a58d710967a56620c3eecc99b6b45b",
    "05f35518f19d48890770128727289582cca3457b",
    "ede10b8a1f9a4d099c16469f827345cb359cef3d",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Ybodychange",
    "2ecab65e3e290a1ee192b39ec70868863853543a": "Ymultichange(Yparameterchange,Ybodychange)",
    "42391d260da400593812396c1ffd45d1a371d3cb": "Ybodychange",
    "842aa2bc9432cc137bda0a5aec9c9eef12b000ce": "Ybodychange",
    "c7e265bf26a58d710967a56620c3eecc99b6b45b": "Ybodychange",
    "05f35518f19d48890770128727289582cca3457b": "Ybodychange",
    "ede10b8a1f9a4d099c16469f827345cb359cef3d": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Yparameterchange",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Yparameterchange",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,3 @@\n   public READLINK3Response readlink(XDR xdr, RpcInfo info) {\n-    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n-\n-    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {\n-      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n-      return response;\n-    }\n-\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n-\n-    READLINK3Request request \u003d null;\n-\n-    try {\n-      request \u003d new READLINK3Request(xdr);\n-    } catch (IOException e) {\n-      LOG.error(\"Invalid READLINK request\");\n-      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n-    }\n-\n-    FileHandle handle \u003d request.getHandle();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n-    }\n-\n-    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n-    try {\n-      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n-\n-      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n-          fileIdPath, iug);\n-      if (postOpAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n-      }\n-      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n-        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n-      }\n-      if (target \u003d\u003d null) {\n-        LOG.error(\"Symlink target should not be null, fileId:\"\n-            + handle.getFileId());\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      }\n-      int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n-          NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n-      if (rtmax \u003c target.getBytes().length) {\n-        LOG.error(\"Link size: \" + target.getBytes().length\n-            + \" is larger than max transfer size: \" + rtmax);\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n-            new byte[0]);\n-      }\n-\n-      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n-          target.getBytes());\n-\n-    } catch (IOException e) {\n-      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n-      if (e instanceof FileNotFoundException) {\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n-      } else if (e instanceof AccessControlException) {\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n-      }\n-      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n-    }\n+    return readlink(xdr, getSecurityHandler(info), info.remoteAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, RpcInfo info) {\n    return readlink(xdr, getSecurityHandler(info), info.remoteAddress());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "2ecab65e3e290a1ee192b39ec70868863853543a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 1:45 PM",
      "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  public READLINK3Response readlink(XDR xdr, RpcInfo info) {\n     READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n \n-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {\n       response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n       return response;\n     }\n \n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     READLINK3Request request \u003d null;\n \n     try {\n       request \u003d new READLINK3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid READLINK request\");\n       return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     try {\n       String target \u003d dfsClient.getLinkTarget(fileIdPath);\n \n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       if (postOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n         LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n       }\n       if (target \u003d\u003d null) {\n         LOG.error(\"Symlink target should not be null, fileId:\"\n             + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n       }\n       int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n           NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n       if (rtmax \u003c target.getBytes().length) {\n         LOG.error(\"Link size: \" + target.getBytes().length\n             + \" is larger than max transfer size: \" + rtmax);\n         return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n             new byte[0]);\n       }\n \n       return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n           target.getBytes());\n \n     } catch (IOException e) {\n       LOG.warn(\"Readlink error: \" + e.getClass(), e);\n       if (e instanceof FileNotFoundException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       } else if (e instanceof AccessControlException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n       }\n       return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public READLINK3Response readlink(XDR xdr, RpcInfo info) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n          NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n      if (rtmax \u003c target.getBytes().length) {\n        LOG.error(\"Link size: \" + target.getBytes().length\n            + \" is larger than max transfer size: \" + rtmax);\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n            new byte[0]);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]",
            "newValue": "[xdr-XDR, info-RpcInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  public READLINK3Response readlink(XDR xdr, RpcInfo info) {\n     READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n \n-    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n+    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {\n       response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n       return response;\n     }\n \n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     READLINK3Request request \u003d null;\n \n     try {\n       request \u003d new READLINK3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid READLINK request\");\n       return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     try {\n       String target \u003d dfsClient.getLinkTarget(fileIdPath);\n \n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       if (postOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n         LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n       }\n       if (target \u003d\u003d null) {\n         LOG.error(\"Symlink target should not be null, fileId:\"\n             + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n       }\n       int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n           NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n       if (rtmax \u003c target.getBytes().length) {\n         LOG.error(\"Link size: \" + target.getBytes().length\n             + \" is larger than max transfer size: \" + rtmax);\n         return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n             new byte[0]);\n       }\n \n       return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n           target.getBytes());\n \n     } catch (IOException e) {\n       LOG.warn(\"Readlink error: \" + e.getClass(), e);\n       if (e instanceof FileNotFoundException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       } else if (e instanceof AccessControlException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n       }\n       return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public READLINK3Response readlink(XDR xdr, RpcInfo info) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(info, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n          NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n      if (rtmax \u003c target.getBytes().length) {\n        LOG.error(\"Link size: \" + target.getBytes().length\n            + \" is larger than max transfer size: \" + rtmax);\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n            new byte[0]);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "42391d260da400593812396c1ffd45d1a371d3cb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6056. Clean up NFS config settings. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 4:53 PM",
      "commitName": "42391d260da400593812396c1ffd45d1a371d3cb",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "29/05/14 2:16 PM",
      "commitNameOld": "c55947343e0a629f71d69b49ba87997573fe48a2",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n \n     if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n       response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n       return response;\n     }\n \n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     READLINK3Request request \u003d null;\n \n     try {\n       request \u003d new READLINK3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid READLINK request\");\n       return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     try {\n       String target \u003d dfsClient.getLinkTarget(fileIdPath);\n \n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       if (postOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n         LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n       }\n       if (target \u003d\u003d null) {\n         LOG.error(\"Symlink target should not be null, fileId:\"\n             + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n       }\n-      int rtmax \u003d config.getInt(Nfs3Constant.MAX_READ_TRANSFER_SIZE_KEY,\n-              Nfs3Constant.MAX_READ_TRANSFER_SIZE_DEFAULT);\n+      int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n+          NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n       if (rtmax \u003c target.getBytes().length) {\n         LOG.error(\"Link size: \" + target.getBytes().length\n             + \" is larger than max transfer size: \" + rtmax);\n         return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n             new byte[0]);\n       }\n \n       return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n           target.getBytes());\n \n     } catch (IOException e) {\n       LOG.warn(\"Readlink error: \" + e.getClass(), e);\n       if (e instanceof FileNotFoundException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       } else if (e instanceof AccessControlException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n       }\n       return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      int rtmax \u003d config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY,\n          NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT);\n      if (rtmax \u003c target.getBytes().length) {\n        LOG.error(\"Link size: \" + target.getBytes().length\n            + \" is larger than max transfer size: \" + rtmax);\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n            new byte[0]);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "842aa2bc9432cc137bda0a5aec9c9eef12b000ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6080. Improve NFS gateway performance by making rtmax and wtmax configurable. Contributed by Abin Shahab\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 2:03 PM",
      "commitName": "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "05/03/14 2:20 PM",
      "commitNameOld": "6adf7a0ecb7946434b9312aa01505f58eaefd21f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,70 @@\n   public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n \n     if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n       response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n       return response;\n     }\n \n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     READLINK3Request request \u003d null;\n \n     try {\n       request \u003d new READLINK3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid READLINK request\");\n       return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     try {\n       String target \u003d dfsClient.getLinkTarget(fileIdPath);\n \n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       if (postOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n         LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n       }\n       if (target \u003d\u003d null) {\n         LOG.error(\"Symlink target should not be null, fileId:\"\n             + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n       }\n-      if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n+      int rtmax \u003d config.getInt(Nfs3Constant.MAX_READ_TRANSFER_SIZE_KEY,\n+              Nfs3Constant.MAX_READ_TRANSFER_SIZE_DEFAULT);\n+      if (rtmax \u003c target.getBytes().length) {\n+        LOG.error(\"Link size: \" + target.getBytes().length\n+            + \" is larger than max transfer size: \" + rtmax);\n         return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n             new byte[0]);\n       }\n \n       return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n           target.getBytes());\n \n     } catch (IOException e) {\n       LOG.warn(\"Readlink error: \" + e.getClass(), e);\n       if (e instanceof FileNotFoundException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       } else if (e instanceof AccessControlException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n       }\n       return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      int rtmax \u003d config.getInt(Nfs3Constant.MAX_READ_TRANSFER_SIZE_KEY,\n              Nfs3Constant.MAX_READ_TRANSFER_SIZE_DEFAULT);\n      if (rtmax \u003c target.getBytes().length) {\n        LOG.error(\"Link size: \" + target.getBytes().length\n            + \" is larger than max transfer size: \" + rtmax);\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n            new byte[0]);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "c7e265bf26a58d710967a56620c3eecc99b6b45b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5886. Potential null pointer deference in RpcProgramNfs3#readlink(). Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 3:15 PM",
      "commitName": "c7e265bf26a58d710967a56620c3eecc99b6b45b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "31/01/14 3:00 PM",
      "commitNameOld": "1f7dd7811a1152d0a798524e831586eebbe110b6",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 9.01,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,66 @@\n   public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n \n     if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n       response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n       return response;\n     }\n \n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     READLINK3Request request \u003d null;\n \n     try {\n       request \u003d new READLINK3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid READLINK request\");\n       return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     try {\n       String target \u003d dfsClient.getLinkTarget(fileIdPath);\n \n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       if (postOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n         LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n       }\n       if (target \u003d\u003d null) {\n         LOG.error(\"Symlink target should not be null, fileId:\"\n             + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n       }\n       if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n-        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr, null);\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n+            new byte[0]);\n       }\n \n       return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n           target.getBytes());\n \n     } catch (IOException e) {\n       LOG.warn(\"Readlink error: \" + e.getClass(), e);\n       if (e instanceof FileNotFoundException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       } else if (e instanceof AccessControlException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n       }\n       return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr,\n            new byte[0]);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "05f35518f19d48890770128727289582cca3457b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5171. NFS should create input stream for a file and try to share it with multiple read requests. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:40 PM",
      "commitName": "05f35518f19d48890770128727289582cca3457b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "15/10/13 2:23 PM",
      "commitNameOld": "a9befa6f0a8a27b49b1e6483e749661f493f06cf",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.1,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n \n     if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n       response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n       return response;\n     }\n \n-    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     READLINK3Request request \u003d null;\n \n     try {\n       request \u003d new READLINK3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid READLINK request\");\n       return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     try {\n       String target \u003d dfsClient.getLinkTarget(fileIdPath);\n \n       Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n           fileIdPath, iug);\n       if (postOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n         LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n       }\n       if (target \u003d\u003d null) {\n         LOG.error(\"Symlink target should not be null, fileId:\"\n             + handle.getFileId());\n         return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n       }\n       if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr, null);\n       }\n \n       return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n           target.getBytes());\n \n     } catch (IOException e) {\n       LOG.warn(\"Readlink error: \" + e.getClass(), e);\n       if (e instanceof FileNotFoundException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n       } else if (e instanceof AccessControlException) {\n         return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n       }\n       return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr, null);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "ede10b8a1f9a4d099c16469f827345cb359cef3d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5067 Support symlink operations in NFS gateway. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1522774 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/13 9:21 PM",
      "commitName": "ede10b8a1f9a4d099c16469f827345cb359cef3d",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "10/09/13 12:29 PM",
      "commitNameOld": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.37,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,65 @@\n-  public READLINK3Response readlink(XDR xdr,\n-      SecurityHandler securityHandler, InetAddress client) {\n-    return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n+  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n+      InetAddress client) {\n+    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n+\n+    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n+      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n+      return response;\n+    }\n+\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+\n+    READLINK3Request request \u003d null;\n+\n+    try {\n+      request \u003d new READLINK3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid READLINK request\");\n+      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+\n+    FileHandle handle \u003d request.getHandle();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n+    }\n+\n+    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n+    try {\n+      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n+\n+      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n+          fileIdPath, iug);\n+      if (postOpAttr \u003d\u003d null) {\n+        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n+        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n+      }\n+      if (target \u003d\u003d null) {\n+        LOG.error(\"Symlink target should not be null, fileId:\"\n+            + handle.getFileId());\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      }\n+      if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr, null);\n+      }\n+\n+      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n+          target.getBytes());\n+\n+    } catch (IOException e) {\n+      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n+      if (e instanceof FileNotFoundException) {\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n+      } else if (e instanceof AccessControlException) {\n+        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n+      }\n+      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    READLINK3Response response \u003d new READLINK3Response(Nfs3Status.NFS3_OK);\n\n    if (!checkAccessPrivilege(client, AccessPrivilege.READ_ONLY)) {\n      response.setStatus(Nfs3Status.NFS3ERR_ACCES);\n      return response;\n    }\n\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    READLINK3Request request \u003d null;\n\n    try {\n      request \u003d new READLINK3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid READLINK request\");\n      return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS READLINK fileId: \" + handle.getFileId());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    try {\n      String target \u003d dfsClient.getLinkTarget(fileIdPath);\n\n      Nfs3FileAttributes postOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient,\n          fileIdPath, iug);\n      if (postOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      if (postOpAttr.getType() !\u003d NfsFileType.NFSLNK.toValue()) {\n        LOG.error(\"Not a symlink, fileId:\" + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL);\n      }\n      if (target \u003d\u003d null) {\n        LOG.error(\"Symlink target should not be null, fileId:\"\n            + handle.getFileId());\n        return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT);\n      }\n      if (MAX_READ_TRANSFER_SIZE \u003c target.getBytes().length) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr, null);\n      }\n\n      return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr,\n          target.getBytes());\n\n    } catch (IOException e) {\n      LOG.warn(\"Readlink error: \" + e.getClass(), e);\n      if (e instanceof FileNotFoundException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_STALE);\n      } else if (e instanceof AccessControlException) {\n        return new READLINK3Response(Nfs3Status.NFS3ERR_ACCES);\n      }\n      return new READLINK3Response(Nfs3Status.NFS3ERR_IO);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "31/08/13 2:12 PM",
      "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.93,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n-  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys,\n-      InetAddress client) {\n+  public READLINK3Response readlink(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {
        "oldValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]",
        "newValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]"
      }
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "19/08/13 2:54 PM",
      "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,4 @@\n-  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys) {\n+  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys,\n+      InetAddress client) {\n     return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys,\n      InetAddress client) {\n    return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {
        "oldValue": "[xdr-XDR, authSys-RpcAuthSys]",
        "newValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]"
      }
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,3 @@\n+  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys) {\n+    return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public READLINK3Response readlink(XDR xdr, RpcAuthSys authSys) {\n    return new READLINK3Response(Nfs3Status.NFS3ERR_NOTSUPP);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}