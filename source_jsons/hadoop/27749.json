{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationPolicyUtils.java",
  "functionName": "loadPolicyConfiguration",
  "functionId": "loadPolicyConfiguration___queue-String__conf-Configuration__federationFacade-FederationStateStoreFacade",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/FederationPolicyUtils.java",
  "functionStartLine": 93,
  "functionEndLine": 140,
  "numCommitsSeen": 5,
  "timeTaken": 628,
  "changeHistory": [
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e"
  ],
  "changeHistoryShort": {
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,48 @@\n+  public static SubClusterPolicyConfiguration loadPolicyConfiguration(\n+      String queue, Configuration conf,\n+      FederationStateStoreFacade federationFacade) {\n+\n+    // The facade might cache this request, based on its parameterization\n+    SubClusterPolicyConfiguration configuration \u003d null;\n+    if (queue !\u003d null) {\n+      try {\n+        configuration \u003d federationFacade.getPolicyConfiguration(queue);\n+      } catch (YarnException e) {\n+        LOG.warn(\"Failed to get policy from FederationFacade with queue \"\n+            + queue + \": \" + e.getMessage());\n+      }\n+    }\n+\n+    // If there is no policy configured for this queue, fallback to the baseline\n+    // policy that is configured either in the store or via XML config\n+    if (configuration \u003d\u003d null) {\n+      LOG.info(\"No policy configured for queue {} in StateStore,\"\n+          + \" fallback to default queue\", queue);\n+      queue \u003d YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY;\n+      try {\n+        configuration \u003d federationFacade.getPolicyConfiguration(queue);\n+      } catch (YarnException e) {\n+        LOG.warn(\"No fallback behavior defined in store, defaulting to XML \"\n+            + \"configuration fallback behavior.\");\n+      }\n+    }\n+\n+    // or from XML conf otherwise.\n+    if (configuration \u003d\u003d null) {\n+      LOG.info(\"No policy configured for default queue {} in StateStore,\"\n+          + \" fallback to local config\", queue);\n+\n+      String defaultFederationPolicyManager \u003d\n+          conf.get(YarnConfiguration.FEDERATION_POLICY_MANAGER,\n+              YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER);\n+      String defaultPolicyParamString \u003d\n+          conf.get(YarnConfiguration.FEDERATION_POLICY_MANAGER_PARAMS,\n+              YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS);\n+      ByteBuffer defaultPolicyParam \u003d ByteBuffer\n+          .wrap(defaultPolicyParamString.getBytes(StandardCharsets.UTF_8));\n+\n+      configuration \u003d SubClusterPolicyConfiguration.newInstance(queue,\n+          defaultFederationPolicyManager, defaultPolicyParam);\n+    }\n+    return configuration;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SubClusterPolicyConfiguration loadPolicyConfiguration(\n      String queue, Configuration conf,\n      FederationStateStoreFacade federationFacade) {\n\n    // The facade might cache this request, based on its parameterization\n    SubClusterPolicyConfiguration configuration \u003d null;\n    if (queue !\u003d null) {\n      try {\n        configuration \u003d federationFacade.getPolicyConfiguration(queue);\n      } catch (YarnException e) {\n        LOG.warn(\"Failed to get policy from FederationFacade with queue \"\n            + queue + \": \" + e.getMessage());\n      }\n    }\n\n    // If there is no policy configured for this queue, fallback to the baseline\n    // policy that is configured either in the store or via XML config\n    if (configuration \u003d\u003d null) {\n      LOG.info(\"No policy configured for queue {} in StateStore,\"\n          + \" fallback to default queue\", queue);\n      queue \u003d YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY;\n      try {\n        configuration \u003d federationFacade.getPolicyConfiguration(queue);\n      } catch (YarnException e) {\n        LOG.warn(\"No fallback behavior defined in store, defaulting to XML \"\n            + \"configuration fallback behavior.\");\n      }\n    }\n\n    // or from XML conf otherwise.\n    if (configuration \u003d\u003d null) {\n      LOG.info(\"No policy configured for default queue {} in StateStore,\"\n          + \" fallback to local config\", queue);\n\n      String defaultFederationPolicyManager \u003d\n          conf.get(YarnConfiguration.FEDERATION_POLICY_MANAGER,\n              YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER);\n      String defaultPolicyParamString \u003d\n          conf.get(YarnConfiguration.FEDERATION_POLICY_MANAGER_PARAMS,\n              YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS);\n      ByteBuffer defaultPolicyParam \u003d ByteBuffer\n          .wrap(defaultPolicyParamString.getBytes(StandardCharsets.UTF_8));\n\n      configuration \u003d SubClusterPolicyConfiguration.newInstance(queue,\n          defaultFederationPolicyManager, defaultPolicyParam);\n    }\n    return configuration;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/FederationPolicyUtils.java"
    }
  }
}