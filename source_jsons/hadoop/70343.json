{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "pathToKey",
  "functionId": "pathToKey___path-Path",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 1475,
  "functionEndLine": 1502,
  "numCommitsSeen": 66,
  "timeTaken": 2850,
  "changeHistory": [
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ymultichange(Ymodifierchange,Ybodychange)",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "19/09/14 11:33 AM",
          "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 19.12,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n-  private String pathToKey(Path path) {\n+  public String pathToKey(Path path) {\n     // Convert the path to a URI to parse the scheme, the authority, and the\n     // path from the path object.\n     URI tmpUri \u003d path.toUri();\n     String pathUri \u003d tmpUri.getPath();\n \n     // The scheme and authority is valid. If the path does not exist add a \"/\"\n     // separator to list the root of the container.\n     Path newPath \u003d path;\n     if (\"\".equals(pathUri)) {\n       newPath \u003d new Path(tmpUri.toString() + Path.SEPARATOR);\n     }\n \n     // Verify path is absolute if the path refers to a windows drive scheme.\n     if (!newPath.isAbsolute()) {\n       throw new IllegalArgumentException(\"Path must be absolute: \" + path);\n     }\n \n     String key \u003d null;\n     key \u003d newPath.toUri().getPath();\n+    key \u003d removeTrailingSlash(key);\n+    key \u003d encodeTrailingPeriod(key);\n     if (key.length() \u003d\u003d 1) {\n       return key;\n     } else {\n       return key.substring(1); // remove initial slash\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String pathToKey(Path path) {\n    // Convert the path to a URI to parse the scheme, the authority, and the\n    // path from the path object.\n    URI tmpUri \u003d path.toUri();\n    String pathUri \u003d tmpUri.getPath();\n\n    // The scheme and authority is valid. If the path does not exist add a \"/\"\n    // separator to list the root of the container.\n    Path newPath \u003d path;\n    if (\"\".equals(pathUri)) {\n      newPath \u003d new Path(tmpUri.toString() + Path.SEPARATOR);\n    }\n\n    // Verify path is absolute if the path refers to a windows drive scheme.\n    if (!newPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path must be absolute: \" + path);\n    }\n\n    String key \u003d null;\n    key \u003d newPath.toUri().getPath();\n    key \u003d removeTrailingSlash(key);\n    key \u003d encodeTrailingPeriod(key);\n    if (key.length() \u003d\u003d 1) {\n      return key;\n    } else {\n      return key.substring(1); // remove initial slash\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "19/09/14 11:33 AM",
          "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 19.12,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n-  private String pathToKey(Path path) {\n+  public String pathToKey(Path path) {\n     // Convert the path to a URI to parse the scheme, the authority, and the\n     // path from the path object.\n     URI tmpUri \u003d path.toUri();\n     String pathUri \u003d tmpUri.getPath();\n \n     // The scheme and authority is valid. If the path does not exist add a \"/\"\n     // separator to list the root of the container.\n     Path newPath \u003d path;\n     if (\"\".equals(pathUri)) {\n       newPath \u003d new Path(tmpUri.toString() + Path.SEPARATOR);\n     }\n \n     // Verify path is absolute if the path refers to a windows drive scheme.\n     if (!newPath.isAbsolute()) {\n       throw new IllegalArgumentException(\"Path must be absolute: \" + path);\n     }\n \n     String key \u003d null;\n     key \u003d newPath.toUri().getPath();\n+    key \u003d removeTrailingSlash(key);\n+    key \u003d encodeTrailingPeriod(key);\n     if (key.length() \u003d\u003d 1) {\n       return key;\n     } else {\n       return key.substring(1); // remove initial slash\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String pathToKey(Path path) {\n    // Convert the path to a URI to parse the scheme, the authority, and the\n    // path from the path object.\n    URI tmpUri \u003d path.toUri();\n    String pathUri \u003d tmpUri.getPath();\n\n    // The scheme and authority is valid. If the path does not exist add a \"/\"\n    // separator to list the root of the container.\n    Path newPath \u003d path;\n    if (\"\".equals(pathUri)) {\n      newPath \u003d new Path(tmpUri.toString() + Path.SEPARATOR);\n    }\n\n    // Verify path is absolute if the path refers to a windows drive scheme.\n    if (!newPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path must be absolute: \" + path);\n    }\n\n    String key \u003d null;\n    key \u003d newPath.toUri().getPath();\n    key \u003d removeTrailingSlash(key);\n    key \u003d encodeTrailingPeriod(key);\n    if (key.length() \u003d\u003d 1) {\n      return key;\n    } else {\n      return key.substring(1); // remove initial slash\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,26 @@\n+  private String pathToKey(Path path) {\n+    // Convert the path to a URI to parse the scheme, the authority, and the\n+    // path from the path object.\n+    URI tmpUri \u003d path.toUri();\n+    String pathUri \u003d tmpUri.getPath();\n+\n+    // The scheme and authority is valid. If the path does not exist add a \"/\"\n+    // separator to list the root of the container.\n+    Path newPath \u003d path;\n+    if (\"\".equals(pathUri)) {\n+      newPath \u003d new Path(tmpUri.toString() + Path.SEPARATOR);\n+    }\n+\n+    // Verify path is absolute if the path refers to a windows drive scheme.\n+    if (!newPath.isAbsolute()) {\n+      throw new IllegalArgumentException(\"Path must be absolute: \" + path);\n+    }\n+\n+    String key \u003d null;\n+    key \u003d newPath.toUri().getPath();\n+    if (key.length() \u003d\u003d 1) {\n+      return key;\n+    } else {\n+      return key.substring(1); // remove initial slash\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String pathToKey(Path path) {\n    // Convert the path to a URI to parse the scheme, the authority, and the\n    // path from the path object.\n    URI tmpUri \u003d path.toUri();\n    String pathUri \u003d tmpUri.getPath();\n\n    // The scheme and authority is valid. If the path does not exist add a \"/\"\n    // separator to list the root of the container.\n    Path newPath \u003d path;\n    if (\"\".equals(pathUri)) {\n      newPath \u003d new Path(tmpUri.toString() + Path.SEPARATOR);\n    }\n\n    // Verify path is absolute if the path refers to a windows drive scheme.\n    if (!newPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path must be absolute: \" + path);\n    }\n\n    String key \u003d null;\n    key \u003d newPath.toUri().getPath();\n    if (key.length() \u003d\u003d 1) {\n      return key;\n    } else {\n      return key.substring(1); // remove initial slash\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}