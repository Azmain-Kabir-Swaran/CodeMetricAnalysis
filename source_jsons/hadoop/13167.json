{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockUnderConstructionFeature.java",
  "functionName": "initializeBlockRecovery",
  "functionId": "initializeBlockRecovery___blockInfo-BlockInfo__recoveryId-long__startRecovery-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
  "functionStartLine": 230,
  "functionEndLine": 283,
  "numCommitsSeen": 92,
  "timeTaken": 14279,
  "changeHistory": [
    "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
    "5644137adad30c84e40d2c4719627b3aabc73628",
    "164cbe643988f878f0f4100a4de51783e5b6738e",
    "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
    "4e14f7982a6e57bf08deb3b266806c2b779a157d",
    "e535e0f05b5fbd087c93238deb888cc985254b4c",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
    "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
    "5137b388fc9d4d716f780daf6d04292feeb9df96",
    "e4f756260f16156179ba4adad974ec92279c2fac",
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
    "d62b63d297bff12d93de560dd50ddd48743b851d",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
    "08ac06283a3e9bf0d49d873823aabd419b08e41f",
    "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
    "3f070e83b1f4e0211ece8c0ab508a61188ad352a",
    "d2495d553f8ca4af64fa70224ac96d2c3604600e",
    "db71de2e11cfa56a254ef4c92fea5ef4f8c19100",
    "f0f9a3631fe4950f5cf548f192226836925d0f05",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "2b5ad48762587abbcd8bdb50d0ae98f8080d926c": "Ymultichange(Yparameterchange,Ybodychange)",
    "5644137adad30c84e40d2c4719627b3aabc73628": "Ybodychange",
    "164cbe643988f878f0f4100a4de51783e5b6738e": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "bdd79388f39f4f35af7decd5703eff587b0ddfb7": "Ymultichange(Yparameterchange,Ybodychange)",
    "4e14f7982a6e57bf08deb3b266806c2b779a157d": "Ybodychange",
    "e535e0f05b5fbd087c93238deb888cc985254b4c": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": "Ymultichange(Yfilerename,Ybodychange)",
    "d311a38a6b32bbb210bd8748cfb65463e9c0740e": "Ybodychange",
    "5137b388fc9d4d716f780daf6d04292feeb9df96": "Ybodychange",
    "e4f756260f16156179ba4adad974ec92279c2fac": "Ybodychange",
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75": "Ybodychange",
    "d62b63d297bff12d93de560dd50ddd48743b851d": "Ybodychange",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": "Ymultichange(Yfilerename,Ybodychange)",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ybodychange",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Yfilerename",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": "Ybodychange",
    "08ac06283a3e9bf0d49d873823aabd419b08e41f": "Ybodychange",
    "7e9358feb326d48b8c4f00249e7af5023cebd2e2": "Ybodychange",
    "3f070e83b1f4e0211ece8c0ab508a61188ad352a": "Ybodychange",
    "d2495d553f8ca4af64fa70224ac96d2c3604600e": "Ybodychange",
    "db71de2e11cfa56a254ef4c92fea5ef4f8c19100": "Ybodychange",
    "f0f9a3631fe4950f5cf548f192226836925d0f05": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Ymultichange(Yfilerename,Ymodifierchange)",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Ymultichange(Yfilerename,Ymodifierchange)",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Ymultichange(Yfilerename,Ymodifierchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2b5ad48762587abbcd8bdb50d0ae98f8080d926c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11817. A faulty node can cause a lease leak and NPE on accessing data. Contributed by Kihwal Lee.\n",
      "commitDate": "25/05/17 3:17 PM",
      "commitName": "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11817. A faulty node can cause a lease leak and NPE on accessing data. Contributed by Kihwal Lee.\n",
          "commitDate": "25/05/17 3:17 PM",
          "commitName": "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/02/17 11:21 AM",
          "commitNameOld": "b6f290d5b660ad157c7076767c619d02b3d0f894",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 113.12,
          "commitsBetweenForRepo": 641,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,54 @@\n-  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId,\n+      boolean startRecovery) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n+    if (!startRecovery) {\n+      return;\n+    }\n     if (replicas.length \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n           \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n           \" No blocks found, lease removed.\");\n       // sets primary node index and return.\n       primaryNodeIndex \u003d -1;\n       return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n             \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for (int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n           .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId,\n      boolean startRecovery) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (!startRecovery) {\n      return;\n    }\n    if (replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for (int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldValue": "[blockInfo-BlockInfo, recoveryId-long]",
            "newValue": "[blockInfo-BlockInfo, recoveryId-long, startRecovery-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11817. A faulty node can cause a lease leak and NPE on accessing data. Contributed by Kihwal Lee.\n",
          "commitDate": "25/05/17 3:17 PM",
          "commitName": "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "01/02/17 11:21 AM",
          "commitNameOld": "b6f290d5b660ad157c7076767c619d02b3d0f894",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 113.12,
          "commitsBetweenForRepo": 641,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,54 @@\n-  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId,\n+      boolean startRecovery) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n+    if (!startRecovery) {\n+      return;\n+    }\n     if (replicas.length \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n           \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n           \" No blocks found, lease removed.\");\n       // sets primary node index and return.\n       primaryNodeIndex \u003d -1;\n       return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n             \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for (int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n           .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId,\n      boolean startRecovery) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (!startRecovery) {\n      return;\n    }\n    if (replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for (int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "5644137adad30c84e40d2c4719627b3aabc73628": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9941. Do not log StandbyException on NN, other minor logging fixes. Contributed by Arpit Agarwal.\n",
      "commitDate": "14/03/16 9:54 AM",
      "commitName": "5644137adad30c84e40d2c4719627b3aabc73628",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "10/02/16 9:24 PM",
      "commitNameOld": "19adb2bc641999b83e25ff0e107ba8c6edbad399",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 32.48,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n-    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n+    if (replicas.length \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n           \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n           \" No blocks found, lease removed.\");\n       // sets primary node index and return.\n       primaryNodeIndex \u003d -1;\n       return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n             \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for (int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n           .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for (int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
      "extendedDetails": {}
    },
    "164cbe643988f878f0f4100a4de51783e5b6738e": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/15 1:02 AM",
      "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
      "commitAuthor": "Walter Su",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/15 1:02 AM",
          "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
          "commitAuthor": "Walter Su",
          "commitDateOld": "26/08/15 6:11 PM",
          "commitNameOld": "067ec8c2b14fb0929dc348b763383838e06ff8a5",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n-          \" BlockInfoStripedUnderConstruction.initLeaseRecovery:\" +\n+          \" BlockUnderConstructionFeature.initLeaseRecovery:\" +\n           \" No blocks found, lease removed.\");\n       // sets primary node index and return.\n       primaryNodeIndex \u003d -1;\n       return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d (allLiveReplicasTriedAsPrimary \u0026\u0026\n             replica.getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n-          .addBlockToBeRecovered(this);\n+          .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initLeaseRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d (allLiveReplicasTriedAsPrimary \u0026\u0026\n            replica.getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoStripedUnderConstruction.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/15 1:02 AM",
          "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
          "commitAuthor": "Walter Su",
          "commitDateOld": "26/08/15 6:11 PM",
          "commitNameOld": "067ec8c2b14fb0929dc348b763383838e06ff8a5",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n-          \" BlockInfoStripedUnderConstruction.initLeaseRecovery:\" +\n+          \" BlockUnderConstructionFeature.initLeaseRecovery:\" +\n           \" No blocks found, lease removed.\");\n       // sets primary node index and return.\n       primaryNodeIndex \u003d -1;\n       return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d (allLiveReplicasTriedAsPrimary \u0026\u0026\n             replica.getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n-          .addBlockToBeRecovered(this);\n+          .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initLeaseRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d (allLiveReplicasTriedAsPrimary \u0026\u0026\n            replica.getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/15 1:02 AM",
          "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
          "commitAuthor": "Walter Su",
          "commitDateOld": "26/08/15 6:11 PM",
          "commitNameOld": "067ec8c2b14fb0929dc348b763383838e06ff8a5",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n-          \" BlockInfoStripedUnderConstruction.initLeaseRecovery:\" +\n+          \" BlockUnderConstructionFeature.initLeaseRecovery:\" +\n           \" No blocks found, lease removed.\");\n       // sets primary node index and return.\n       primaryNodeIndex \u003d -1;\n       return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d (allLiveReplicasTriedAsPrimary \u0026\u0026\n             replica.getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n-          .addBlockToBeRecovered(this);\n+          .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initLeaseRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d (allLiveReplicasTriedAsPrimary \u0026\u0026\n            replica.getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldValue": "[recoveryId-long]",
            "newValue": "[blockInfo-BlockInfo, recoveryId-long]"
          }
        }
      ]
    },
    "bdd79388f39f4f35af7decd5703eff587b0ddfb7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8928. Improvements for BlockUnderConstructionFeature: ReplicaUnderConstruction as a separate class and replicas as an array. Contributed by Jing Zhao.\n",
      "commitDate": "24/08/15 3:53 PM",
      "commitName": "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8928. Improvements for BlockUnderConstructionFeature: ReplicaUnderConstruction as a separate class and replicas as an array. Contributed by Jing Zhao.\n",
          "commitDate": "24/08/15 3:53 PM",
          "commitName": "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "19/08/15 3:11 PM",
          "commitNameOld": "4e14f7982a6e57bf08deb3b266806c2b779a157d",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.03,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,50 @@\n-  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n-    if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n-        + \" BlockUnderConstructionFeature.initLeaseRecovery:\"\n-        + \" No blocks found, lease removed.\");\n+    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n+      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n+          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n+          \" No blocks found, lease removed.\");\n+      // sets primary node index and return.\n+      primaryNodeIndex \u003d -1;\n+      return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n             \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n-    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n+    for (int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n+      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n-      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n+      final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n-          .addBlockToBeRecovered(block);\n+          .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for (int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldValue": "[block-BlockInfo, recoveryId-long]",
            "newValue": "[blockInfo-BlockInfo, recoveryId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8928. Improvements for BlockUnderConstructionFeature: ReplicaUnderConstruction as a separate class and replicas as an array. Contributed by Jing Zhao.\n",
          "commitDate": "24/08/15 3:53 PM",
          "commitName": "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "19/08/15 3:11 PM",
          "commitNameOld": "4e14f7982a6e57bf08deb3b266806c2b779a157d",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.03,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,50 @@\n-  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n-    if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n-        + \" BlockUnderConstructionFeature.initLeaseRecovery:\"\n-        + \" No blocks found, lease removed.\");\n+    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n+      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n+          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n+          \" No blocks found, lease removed.\");\n+      // sets primary node index and return.\n+      primaryNodeIndex \u003d -1;\n+      return;\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n             \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n-    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n+    for (int i \u003d 0; i \u003c replicas.length; i++) {\n       // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n+      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n         continue;\n       }\n-      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n+      final ReplicaUnderConstruction ruc \u003d replicas[i];\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n-          .addBlockToBeRecovered(block);\n+          .addBlockToBeRecovered(blockInfo);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo blockInfo, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas \u003d\u003d null || replicas.length \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\" +\n          \" BlockUnderConstructionFeature.initializeBlockRecovery:\" +\n          \" No blocks found, lease removed.\");\n      // sets primary node index and return.\n      primaryNodeIndex \u003d -1;\n      return;\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for (int i \u003d 0; i \u003c replicas.length; i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas[i].isAlive() \u0026\u0026 !replicas[i].getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas[i];\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(blockInfo);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e14f7982a6e57bf08deb3b266806c2b779a157d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8917. Cleanup BlockInfoUnderConstruction from comments and tests. Contributed by Zhe Zhang.\n",
      "commitDate": "19/08/15 3:11 PM",
      "commitName": "4e14f7982a6e57bf08deb3b266806c2b779a157d",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "17/08/15 11:28 AM",
      "commitNameOld": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 2.15,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n-        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n+        + \" BlockUnderConstructionFeature.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n       if (replica.isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n             \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (ReplicaUnderConstruction replica : replicas) {\n         replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor()\n           .addBlockToBeRecovered(block);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockUnderConstructionFeature.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(block);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
      "extendedDetails": {}
    },
    "e535e0f05b5fbd087c93238deb888cc985254b4c": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
      "commitDate": "17/08/15 11:28 AM",
      "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
          "commitDate": "17/08/15 11:28 AM",
          "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/08/15 11:04 AM",
          "commitNameOld": "456e901a4c5c639267ee87b8e5f1319f256d20c2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,47 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n-    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+    for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n-      if (replicas.get(i).isAlive()) {\n-        allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n+      if (replica.isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n+            \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n-      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n-        replicas.get(i).setChosenAsPrimary(false);\n+      for (ReplicaUnderConstruction replica : replicas) {\n+        replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n+          .addBlockToBeRecovered(block);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(block);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
          "commitDate": "17/08/15 11:28 AM",
          "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/08/15 11:04 AM",
          "commitNameOld": "456e901a4c5c639267ee87b8e5f1319f256d20c2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,47 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n-    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+    for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n-      if (replicas.get(i).isAlive()) {\n-        allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n+      if (replica.isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n+            \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n-      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n-        replicas.get(i).setChosenAsPrimary(false);\n+      for (ReplicaUnderConstruction replica : replicas) {\n+        replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n+          .addBlockToBeRecovered(block);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(block);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
          "commitDate": "17/08/15 11:28 AM",
          "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/08/15 11:04 AM",
          "commitNameOld": "456e901a4c5c639267ee87b8e5f1319f256d20c2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,47 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n-    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+    for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n-      if (replicas.get(i).isAlive()) {\n-        allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n+      if (replica.isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n+            \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n-      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n-        replicas.get(i).setChosenAsPrimary(false);\n+      for (ReplicaUnderConstruction replica : replicas) {\n+        replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n+          .addBlockToBeRecovered(block);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(BlockInfo block, long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor()\n          .addBlockToBeRecovered(block);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldValue": "[recoveryId-long]",
            "newValue": "[block-BlockInfo, recoveryId-long]"
          }
        }
      ]
    },
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
          "commitDate": "06/08/15 10:21 AM",
          "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "06/08/15 10:21 AM",
          "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,46 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n-          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n-          \"No blocks found, lease removed.\");\n+      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n+        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n+        + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026\n-                replicas.get(i).getChosenAsPrimary());\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026\n-          !replicas.get(i).getChosenAsPrimary())) {\n+      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().\n-          getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
          "commitDate": "06/08/15 10:21 AM",
          "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "06/08/15 10:21 AM",
          "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,46 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n-          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n-          \"No blocks found, lease removed.\");\n+      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n+        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n+        + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026\n-                replicas.get(i).getChosenAsPrimary());\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026\n-          !replicas.get(i).getChosenAsPrimary())) {\n+      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().\n-          getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
          "extendedDetails": {}
        }
      ]
    },
    "d311a38a6b32bbb210bd8748cfb65463e9c0740e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6860. BlockStateChange logs are too noisy. Contributed by Chang Li and Xiaoyu Yao.\n",
      "commitDate": "31/07/15 4:15 PM",
      "commitName": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "21/07/15 11:29 AM",
      "commitNameOld": "5137b388fc9d4d716f780daf6d04292feeb9df96",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 10.2,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n           \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n           \"No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n             (allLiveReplicasTriedAsPrimary \u0026\u0026\n                 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026\n           !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().\n           getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n-      NameNode.blockStateChangeLog.info(\n+      NameNode.blockStateChangeLog.debug(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026\n                replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.debug(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "5137b388fc9d4d716f780daf6d04292feeb9df96": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8344. NameNode doesn\u0027t recover lease for files with missing blocks (raviprak)\"\n\nThis reverts commit e4f756260f16156179ba4adad974ec92279c2fac.\n\nConflicts:\n\thadoop-hdfs-project/hadoop-hdfs/CHANGES.txt\n",
      "commitDate": "21/07/15 11:29 AM",
      "commitName": "5137b388fc9d4d716f780daf6d04292feeb9df96",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "20/07/15 2:03 PM",
      "commitNameOld": "e4f756260f16156179ba4adad974ec92279c2fac",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,49 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n           \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n-          \"No replicas found.\");\n+          \"No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n             (allLiveReplicasTriedAsPrimary \u0026\u0026\n                 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n-      recoveryAttemptsBeforeMarkingBlockMissing--;\n-      NameNode.blockStateChangeLog.info(\"Tried to recover \" + this +\" using all\"\n-          + \" replicas. Will try \" + recoveryAttemptsBeforeMarkingBlockMissing\n-          + \" more times\");\n-\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026\n           !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().\n           getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026\n                replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "e4f756260f16156179ba4adad974ec92279c2fac": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8344. NameNode doesn\u0027t recover lease for files with missing blocks (raviprak)\n",
      "commitDate": "20/07/15 2:03 PM",
      "commitName": "e4f756260f16156179ba4adad974ec92279c2fac",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "07/07/15 10:13 AM",
      "commitNameOld": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 13.16,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,54 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n           \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n-          \"No blocks found, lease removed.\");\n+          \"No replicas found.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n             (allLiveReplicasTriedAsPrimary \u0026\u0026\n                 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n+      recoveryAttemptsBeforeMarkingBlockMissing--;\n+      NameNode.blockStateChangeLog.info(\"Tried to recover \" + this +\" using all\"\n+          + \" replicas. Will try \" + recoveryAttemptsBeforeMarkingBlockMissing\n+          + \" more times\");\n+\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026\n           !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().\n           getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No replicas found.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026\n                replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      recoveryAttemptsBeforeMarkingBlockMissing--;\n      NameNode.blockStateChangeLog.info(\"Tried to recover \" + this +\" using all\"\n          + \" replicas. Will try \" + recoveryAttemptsBeforeMarkingBlockMissing\n          + \" more times\");\n\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\"\n\nThis reverts commit d62b63d297bff12d93de560dd50ddd48743b851d.\n",
      "commitDate": "07/07/15 10:13 AM",
      "commitName": "bc99aaffe7b0ed13b1efc37b6a32cdbd344c2d75",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/07/15 3:54 PM",
      "commitNameOld": "d62b63d297bff12d93de560dd50ddd48743b851d",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n           \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n           \"No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n-    for (ReplicaUnderConstruction replica : replicas) {\n+    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n-      if (replica.isAlive()) {\n-        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n-            \u0026\u0026 replica.getChosenAsPrimary();\n+      if (replicas.get(i).isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026\n+                replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n-      for (ReplicaUnderConstruction replica : replicas) {\n-        replica.setChosenAsPrimary(false);\n+      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+        replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026\n           !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().\n           getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026\n                replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "d62b63d297bff12d93de560dd50ddd48743b851d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8652. Track BlockInfo instead of Block in CorruptReplicasMap. Contributed by Jing Zhao.\n",
      "commitDate": "06/07/15 3:54 PM",
      "commitName": "d62b63d297bff12d93de560dd50ddd48743b851d",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/06/15 11:38 AM",
      "commitNameOld": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 24.18,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n           \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n           \"No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n-    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+    for (ReplicaUnderConstruction replica : replicas) {\n       // Check if all replicas have been tried or not.\n-      if (replicas.get(i).isAlive()) {\n-        allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026\n-                replicas.get(i).getChosenAsPrimary());\n+      if (replica.isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n+            \u0026\u0026 replica.getChosenAsPrimary();\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n-      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n-        replicas.get(i).setChosenAsPrimary(false);\n+      for (ReplicaUnderConstruction replica : replicas) {\n+        replica.setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026\n           !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().\n           getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (ReplicaUnderConstruction replica : replicas) {\n      // Check if all replicas have been tried or not.\n      if (replica.isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d allLiveReplicasTriedAsPrimary\n            \u0026\u0026 replica.getChosenAsPrimary();\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (ReplicaUnderConstruction replica : replicas) {\n        replica.setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
      "commitDate": "12/06/15 11:38 AM",
      "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
          "commitDate": "12/06/15 11:38 AM",
          "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "12/06/15 11:28 AM",
          "commitNameOld": "46b0b4179c1ef1a1510eb04e40b11968a24df485",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,49 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n-        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n-        + \" No blocks found, lease removed.\");\n+      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n+          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n+          \"No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026\n+                replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n+      if (!(replicas.get(i).isAlive() \u0026\u0026\n+          !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().\n+          getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026\n                replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
          "commitDate": "12/06/15 11:38 AM",
          "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "12/06/15 11:28 AM",
          "commitNameOld": "46b0b4179c1ef1a1510eb04e40b11968a24df485",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,49 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n-        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n-        + \" No blocks found, lease removed.\");\n+      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n+          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n+          \"No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026\n+                replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n+      if (!(replicas.get(i).isAlive() \u0026\u0026\n+          !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n           .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().\n+          getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK* \" +\n          \"BlockInfoUnderConstruction.initLeaseRecovery: \" +\n          \"No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026\n                replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026\n          !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().\n          getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
          "extendedDetails": {}
        }
      ]
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "13/03/15 10:42 AM",
      "commitNameOld": "f446669afb5c3d31a00c65449f27088b39e11ae3",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 7.06,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n             (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n-      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n+      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n+          .getDatanodeDescriptor().getLastUpdateMonotonic();\n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\n           \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation()\n          .getDatanodeDescriptor().getLastUpdateMonotonic();\n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
      "extendedDetails": {}
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "07/02/15 10:43 AM",
      "commitNameOld": "ef01768333ec0e59e7d747864183835e756a7bf6",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java"
      }
    },
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7712. Switch blockStateChangeLog to use slf4j.\n",
      "commitDate": "03/02/15 3:01 PM",
      "commitName": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "13/01/15 12:24 AM",
      "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 21.61,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n             (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n       final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n       final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n       if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n         primary \u003d ruc;\n         mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n       primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n-      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n-        + \" recovery started, primary\u003d\" + primary);\n+      NameNode.blockStateChangeLog.info(\n+          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\n          \"BLOCK* {} recovery started, primary\u003d{}\", this, primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "08ac06283a3e9bf0d49d873823aabd419b08e41f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7056. Snapshot support for truncate. Contributed by Konstantin Shvachko and Plamen Jeliazkov.",
      "commitDate": "13/01/15 12:24 AM",
      "commitName": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "12/01/15 10:50 PM",
      "commitNameOld": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,45 @@\n   public void initializeBlockRecovery(long recoveryId) {\n-    initializeBlockRecovery(BlockUCState.UNDER_RECOVERY, recoveryId);\n+    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n+    blockRecoveryId \u003d recoveryId;\n+    if (replicas.size() \u003d\u003d 0) {\n+      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n+        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n+        + \" No blocks found, lease removed.\");\n+    }\n+    boolean allLiveReplicasTriedAsPrimary \u003d true;\n+    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+      // Check if all replicas have been tried or not.\n+      if (replicas.get(i).isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n+      }\n+    }\n+    if (allLiveReplicasTriedAsPrimary) {\n+      // Just set all the replicas to be chosen whether they are alive or not.\n+      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+        replicas.get(i).setChosenAsPrimary(false);\n+      }\n+    }\n+    long mostRecentLastUpdate \u003d 0;\n+    ReplicaUnderConstruction primary \u003d null;\n+    primaryNodeIndex \u003d -1;\n+    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n+      // Skip alive replicas which have been chosen for recovery.\n+      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n+        continue;\n+      }\n+      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n+      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n+      if (lastUpdate \u003e mostRecentLastUpdate) {\n+        primaryNodeIndex \u003d i;\n+        primary \u003d ruc;\n+        mostRecentLastUpdate \u003d lastUpdate;\n+      }\n+    }\n+    if (primary !\u003d null) {\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n+      primary.setChosenAsPrimary(true);\n+      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n+        + \" recovery started, primary\u003d\" + primary);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n        + \" recovery started, primary\u003d\" + primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "7e9358feb326d48b8c4f00249e7af5023cebd2e2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3107. Introduce truncate. Contributed by Plamen Jeliazkov.",
      "commitDate": "12/01/15 10:50 PM",
      "commitName": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "05/11/14 6:14 PM",
      "commitNameOld": "86eb27ba1deef24f0cbd282e453971027b0bfa36",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 68.19,
      "commitsBetweenForRepo": 429,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,3 @@\n   public void initializeBlockRecovery(long recoveryId) {\n-    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n-    blockRecoveryId \u003d recoveryId;\n-    if (replicas.size() \u003d\u003d 0) {\n-      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n-        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n-        + \" No blocks found, lease removed.\");\n-    }\n-    boolean allLiveReplicasTriedAsPrimary \u003d true;\n-    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n-      // Check if all replicas have been tried or not.\n-      if (replicas.get(i).isAlive()) {\n-        allLiveReplicasTriedAsPrimary \u003d\n-            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n-      }\n-    }\n-    if (allLiveReplicasTriedAsPrimary) {\n-      // Just set all the replicas to be chosen whether they are alive or not.\n-      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n-        replicas.get(i).setChosenAsPrimary(false);\n-      }\n-    }\n-    long mostRecentLastUpdate \u003d 0;\n-    ReplicaUnderConstruction primary \u003d null;\n-    primaryNodeIndex \u003d -1;\n-    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n-      // Skip alive replicas which have been chosen for recovery.\n-      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n-        continue;\n-      }\n-      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n-      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n-      if (lastUpdate \u003e mostRecentLastUpdate) {\n-        primaryNodeIndex \u003d i;\n-        primary \u003d ruc;\n-        mostRecentLastUpdate \u003d lastUpdate;\n-      }\n-    }\n-    if (primary !\u003d null) {\n-      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n-      primary.setChosenAsPrimary(true);\n-      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n-        + \" recovery started, primary\u003d\" + primary);\n-    }\n+    initializeBlockRecovery(BlockUCState.UNDER_RECOVERY, recoveryId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    initializeBlockRecovery(BlockUCState.UNDER_RECOVERY, recoveryId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "3f070e83b1f4e0211ece8c0ab508a61188ad352a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5009. Include storage information in the LocatedBlock.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1519691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/09/13 7:03 AM",
      "commitName": "3f070e83b1f4e0211ece8c0ab508a61188ad352a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/04/13 1:51 PM",
      "commitNameOld": "d2495d553f8ca4af64fa70224ac96d2c3604600e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 129.72,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n     boolean allLiveReplicasTriedAsPrimary \u003d true;\n     for (int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Check if all replicas have been tried or not.\n       if (replicas.get(i).isAlive()) {\n         allLiveReplicasTriedAsPrimary \u003d\n             (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n     if (allLiveReplicasTriedAsPrimary) {\n       // Just set all the replicas to be chosen whether they are alive or not.\n       for (int i \u003d 0; i \u003c replicas.size(); i++) {\n         replicas.get(i).setChosenAsPrimary(false);\n       }\n     }\n     long mostRecentLastUpdate \u003d 0;\n     ReplicaUnderConstruction primary \u003d null;\n     primaryNodeIndex \u003d -1;\n     for(int i \u003d 0; i \u003c replicas.size(); i++) {\n       // Skip alive replicas which have been chosen for recovery.\n       if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n         continue;\n       }\n-      if (replicas.get(i).getExpectedLocation().getLastUpdate() \u003e mostRecentLastUpdate) {\n-        primary \u003d replicas.get(i);\n+      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n+      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n+      if (lastUpdate \u003e mostRecentLastUpdate) {\n         primaryNodeIndex \u003d i;\n-        mostRecentLastUpdate \u003d primary.getExpectedLocation().getLastUpdate();\n+        primary \u003d ruc;\n+        mostRecentLastUpdate \u003d lastUpdate;\n       }\n     }\n     if (primary !\u003d null) {\n-      primary.getExpectedLocation().addBlockToBeRecovered(this);\n+      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n       primary.setChosenAsPrimary(true);\n       NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n         + \" recovery started, primary\u003d\" + primary);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      final ReplicaUnderConstruction ruc \u003d replicas.get(i);\n      final long lastUpdate \u003d ruc.getExpectedStorageLocation().getDatanodeDescriptor().getLastUpdate(); \n      if (lastUpdate \u003e mostRecentLastUpdate) {\n        primaryNodeIndex \u003d i;\n        primary \u003d ruc;\n        mostRecentLastUpdate \u003d lastUpdate;\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedStorageLocation().getDatanodeDescriptor().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n        + \" recovery started, primary\u003d\" + primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "d2495d553f8ca4af64fa70224ac96d2c3604600e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4721. Speed up lease recovery by avoiding stale datanodes and choosing the datanode with the most recent heartbeat as the primary.  Contributed by Varun Sharma\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 1:51 PM",
      "commitName": "d2495d553f8ca4af64fa70224ac96d2c3604600e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/11/12 10:07 AM",
      "commitNameOld": "db71de2e11cfa56a254ef4c92fea5ef4f8c19100",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 168.11,
      "commitsBetweenForRepo": 801,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,43 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n-\n-    int previous \u003d primaryNodeIndex;\n-    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n-      int j \u003d (previous + i)%replicas.size();\n-      if (replicas.get(j).isAlive()) {\n-        primaryNodeIndex \u003d j;\n-        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n-        primary.addBlockToBeRecovered(this);\n-        NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n-          + \" recovery started, primary\u003d\" + primary);\n-        return;\n+    boolean allLiveReplicasTriedAsPrimary \u003d true;\n+    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+      // Check if all replicas have been tried or not.\n+      if (replicas.get(i).isAlive()) {\n+        allLiveReplicasTriedAsPrimary \u003d\n+            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n       }\n     }\n+    if (allLiveReplicasTriedAsPrimary) {\n+      // Just set all the replicas to be chosen whether they are alive or not.\n+      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n+        replicas.get(i).setChosenAsPrimary(false);\n+      }\n+    }\n+    long mostRecentLastUpdate \u003d 0;\n+    ReplicaUnderConstruction primary \u003d null;\n+    primaryNodeIndex \u003d -1;\n+    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n+      // Skip alive replicas which have been chosen for recovery.\n+      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n+        continue;\n+      }\n+      if (replicas.get(i).getExpectedLocation().getLastUpdate() \u003e mostRecentLastUpdate) {\n+        primary \u003d replicas.get(i);\n+        primaryNodeIndex \u003d i;\n+        mostRecentLastUpdate \u003d primary.getExpectedLocation().getLastUpdate();\n+      }\n+    }\n+    if (primary !\u003d null) {\n+      primary.getExpectedLocation().addBlockToBeRecovered(this);\n+      primary.setChosenAsPrimary(true);\n+      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n+        + \" recovery started, primary\u003d\" + primary);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n    boolean allLiveReplicasTriedAsPrimary \u003d true;\n    for (int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Check if all replicas have been tried or not.\n      if (replicas.get(i).isAlive()) {\n        allLiveReplicasTriedAsPrimary \u003d\n            (allLiveReplicasTriedAsPrimary \u0026\u0026 replicas.get(i).getChosenAsPrimary());\n      }\n    }\n    if (allLiveReplicasTriedAsPrimary) {\n      // Just set all the replicas to be chosen whether they are alive or not.\n      for (int i \u003d 0; i \u003c replicas.size(); i++) {\n        replicas.get(i).setChosenAsPrimary(false);\n      }\n    }\n    long mostRecentLastUpdate \u003d 0;\n    ReplicaUnderConstruction primary \u003d null;\n    primaryNodeIndex \u003d -1;\n    for(int i \u003d 0; i \u003c replicas.size(); i++) {\n      // Skip alive replicas which have been chosen for recovery.\n      if (!(replicas.get(i).isAlive() \u0026\u0026 !replicas.get(i).getChosenAsPrimary())) {\n        continue;\n      }\n      if (replicas.get(i).getExpectedLocation().getLastUpdate() \u003e mostRecentLastUpdate) {\n        primary \u003d replicas.get(i);\n        primaryNodeIndex \u003d i;\n        mostRecentLastUpdate \u003d primary.getExpectedLocation().getLastUpdate();\n      }\n    }\n    if (primary !\u003d null) {\n      primary.getExpectedLocation().addBlockToBeRecovered(this);\n      primary.setChosenAsPrimary(true);\n      NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n        + \" recovery started, primary\u003d\" + primary);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "db71de2e11cfa56a254ef4c92fea5ef4f8c19100": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4080. Add a separate logger for block state change logs to enable turning off those logs. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407566 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 10:07 AM",
      "commitName": "db71de2e11cfa56a254ef4c92fea5ef4f8c19100",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "07/05/12 5:06 PM",
      "commitNameOld": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 185.75,
      "commitsBetweenForRepo": 1052,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n-      NameNode.stateChangeLog.warn(\"BLOCK*\"\n+      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n         + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n-        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n+        NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.blockStateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.blockStateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "f0f9a3631fe4950f5cf548f192226836925d0f05": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3363. Define BlockCollection and MutableBlockCollection interfaces so that INodeFile and INodeFileUnderConstruction do not have to be used in block management.  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/12 5:06 PM",
      "commitName": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/02/12 10:04 AM",
      "commitNameOld": "7decf112c0dcbf0445fe33458f7daa3d02617912",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 69.25,
      "commitsBetweenForRepo": 500,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n-        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n+        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" BlockInfoUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java"
      }
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n         + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockInfoUnderConstruction.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n         + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n         + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockInfoUnderConstruction.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  public void initializeBlockRecovery(long recoveryId) {\n+  void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n         + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        }
      ]
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n         + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockInfoUnderConstruction.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  void initializeBlockRecovery(long recoveryId) {\n+  public void initializeBlockRecovery(long recoveryId) {\n     setBlockUCState(BlockUCState.UNDER_RECOVERY);\n     blockRecoveryId \u003d recoveryId;\n     if (replicas.size() \u003d\u003d 0) {\n       NameNode.stateChangeLog.warn(\"BLOCK*\"\n         + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n         + \" No blocks found, lease removed.\");\n     }\n \n     int previous \u003d primaryNodeIndex;\n     for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n       int j \u003d (previous + i)%replicas.size();\n       if (replicas.get(j).isAlive()) {\n         primaryNodeIndex \u003d j;\n         DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n         primary.addBlockToBeRecovered(this);\n         NameNode.stateChangeLog.info(\"BLOCK* \" + this\n           + \" recovery started, primary\u003d\" + primary);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  void initializeBlockRecovery(long recoveryId) {\n+    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n+    blockRecoveryId \u003d recoveryId;\n+    if (replicas.size() \u003d\u003d 0) {\n+      NameNode.stateChangeLog.warn(\"BLOCK*\"\n+        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n+        + \" No blocks found, lease removed.\");\n+    }\n+\n+    int previous \u003d primaryNodeIndex;\n+    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n+      int j \u003d (previous + i)%replicas.size();\n+      if (replicas.get(j).isAlive()) {\n+        primaryNodeIndex \u003d j;\n+        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n+        primary.addBlockToBeRecovered(this);\n+        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n+          + \" recovery started, primary\u003d\" + primary);\n+        return;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void initializeBlockRecovery(long recoveryId) {\n    setBlockUCState(BlockUCState.UNDER_RECOVERY);\n    blockRecoveryId \u003d recoveryId;\n    if (replicas.size() \u003d\u003d 0) {\n      NameNode.stateChangeLog.warn(\"BLOCK*\"\n        + \" INodeFileUnderConstruction.initLeaseRecovery:\"\n        + \" No blocks found, lease removed.\");\n    }\n\n    int previous \u003d primaryNodeIndex;\n    for(int i \u003d 1; i \u003c\u003d replicas.size(); i++) {\n      int j \u003d (previous + i)%replicas.size();\n      if (replicas.get(j).isAlive()) {\n        primaryNodeIndex \u003d j;\n        DatanodeDescriptor primary \u003d replicas.get(j).getExpectedLocation(); \n        primary.addBlockToBeRecovered(this);\n        NameNode.stateChangeLog.info(\"BLOCK* \" + this\n          + \" recovery started, primary\u003d\" + primary);\n        return;\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockInfoUnderConstruction.java"
    }
  }
}