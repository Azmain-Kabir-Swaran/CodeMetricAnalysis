{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMNMInfo.java",
  "functionName": "getLiveNodeManagers",
  "functionId": "getLiveNodeManagers",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
  "functionStartLine": 83,
  "functionEndLine": 112,
  "numCommitsSeen": 9,
  "timeTaken": 1337,
  "changeHistory": [
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "7b687dda098c94b55c9848827cfc2d6326b6f9b6",
    "af8514eef297574240652672d048748100c97733",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "a446ad2c26359beb2b5367195de4257fbae648c6",
    "7e4725db41674a74846b9b252a575da23a1a2b11"
  ],
  "changeHistoryShort": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "7b687dda098c94b55c9848827cfc2d6326b6f9b6": "Ybodychange",
    "af8514eef297574240652672d048748100c97733": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "a446ad2c26359beb2b5367195de4257fbae648c6": "Ybodychange",
    "7e4725db41674a74846b9b252a575da23a1a2b11": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "03/10/13 2:04 PM",
      "commitNameOld": "7b687dda098c94b55c9848827cfc2d6326b6f9b6",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 968.78,
      "commitsBetweenForRepo": 7368,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public String getLiveNodeManagers() {\n     Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n     List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n \n     for (final RMNode ni : nodes) {\n         SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n         InfoMap info \u003d new InfoMap();\n         info.put(\"HostName\", ni.getHostName());\n         info.put(\"Rack\", ni.getRackName());\n         info.put(\"State\", ni.getState().toString());\n         info.put(\"NodeId\", ni.getNodeID());\n         info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n         info.put(\"LastHealthUpdate\",\n                         ni.getLastHealthReportTime());\n         info.put(\"HealthReport\",\n                         ni.getHealthReport());\n         info.put(\"NodeManagerVersion\",\n                 ni.getNodeManagerVersion());\n         if(report !\u003d null) {\n           info.put(\"NumContainers\", report.getNumContainers());\n-          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n+          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemorySize());\n           info.put(\"AvailableMemoryMB\",\n-              report.getAvailableResource().getMemory());\n+              report.getAvailableResource().getMemorySize());\n         }\n \n         nodesInfo.add(info);\n     }\n \n     return JSON.toString(nodesInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLiveNodeManagers() {\n    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n\n    for (final RMNode ni : nodes) {\n        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n        InfoMap info \u003d new InfoMap();\n        info.put(\"HostName\", ni.getHostName());\n        info.put(\"Rack\", ni.getRackName());\n        info.put(\"State\", ni.getState().toString());\n        info.put(\"NodeId\", ni.getNodeID());\n        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n        info.put(\"LastHealthUpdate\",\n                        ni.getLastHealthReportTime());\n        info.put(\"HealthReport\",\n                        ni.getHealthReport());\n        info.put(\"NodeManagerVersion\",\n                ni.getNodeManagerVersion());\n        if(report !\u003d null) {\n          info.put(\"NumContainers\", report.getNumContainers());\n          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemorySize());\n          info.put(\"AvailableMemoryMB\",\n              report.getAvailableResource().getMemorySize());\n        }\n\n        nodesInfo.add(info);\n    }\n\n    return JSON.toString(nodesInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
      "extendedDetails": {}
    },
    "7b687dda098c94b55c9848827cfc2d6326b6f9b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1199. Make NM/RM Versions Available (Mit Desai via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529003 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 2:04 PM",
      "commitName": "7b687dda098c94b55c9848827cfc2d6326b6f9b6",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "07/06/13 1:59 PM",
      "commitNameOld": "af8514eef297574240652672d048748100c97733",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 118.0,
      "commitsBetweenForRepo": 701,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public String getLiveNodeManagers() {\n     Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n     List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n \n     for (final RMNode ni : nodes) {\n         SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n         InfoMap info \u003d new InfoMap();\n         info.put(\"HostName\", ni.getHostName());\n         info.put(\"Rack\", ni.getRackName());\n         info.put(\"State\", ni.getState().toString());\n         info.put(\"NodeId\", ni.getNodeID());\n         info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n         info.put(\"LastHealthUpdate\",\n                         ni.getLastHealthReportTime());\n         info.put(\"HealthReport\",\n                         ni.getHealthReport());\n+        info.put(\"NodeManagerVersion\",\n+                ni.getNodeManagerVersion());\n         if(report !\u003d null) {\n           info.put(\"NumContainers\", report.getNumContainers());\n           info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n           info.put(\"AvailableMemoryMB\",\n               report.getAvailableResource().getMemory());\n         }\n \n         nodesInfo.add(info);\n     }\n \n     return JSON.toString(nodesInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLiveNodeManagers() {\n    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n\n    for (final RMNode ni : nodes) {\n        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n        InfoMap info \u003d new InfoMap();\n        info.put(\"HostName\", ni.getHostName());\n        info.put(\"Rack\", ni.getRackName());\n        info.put(\"State\", ni.getState().toString());\n        info.put(\"NodeId\", ni.getNodeID());\n        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n        info.put(\"LastHealthUpdate\",\n                        ni.getLastHealthReportTime());\n        info.put(\"HealthReport\",\n                        ni.getHealthReport());\n        info.put(\"NodeManagerVersion\",\n                ni.getNodeManagerVersion());\n        if(report !\u003d null) {\n          info.put(\"NumContainers\", report.getNumContainers());\n          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n          info.put(\"AvailableMemoryMB\",\n              report.getAvailableResource().getMemory());\n        }\n\n        nodesInfo.add(info);\n    }\n\n    return JSON.toString(nodesInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
      "extendedDetails": {}
    },
    "af8514eef297574240652672d048748100c97733": {
      "type": "Ybodychange",
      "commitMessage": "YARN-686. Flatten NodeReport. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 1:59 PM",
      "commitName": "af8514eef297574240652672d048748100c97733",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 303.65,
      "commitsBetweenForRepo": 1756,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   public String getLiveNodeManagers() {\n     Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n     List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n \n     for (final RMNode ni : nodes) {\n         SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n         InfoMap info \u003d new InfoMap();\n         info.put(\"HostName\", ni.getHostName());\n         info.put(\"Rack\", ni.getRackName());\n         info.put(\"State\", ni.getState().toString());\n         info.put(\"NodeId\", ni.getNodeID());\n         info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n-        info.put(\"HealthStatus\",\n-                ni.getNodeHealthStatus().getIsNodeHealthy() ?\n-                      \"Healthy\" : \"Unhealthy\");\n         info.put(\"LastHealthUpdate\",\n-                        ni.getNodeHealthStatus().getLastHealthReportTime());\n+                        ni.getLastHealthReportTime());\n         info.put(\"HealthReport\",\n-                        ni.getNodeHealthStatus().getHealthReport());\n+                        ni.getHealthReport());\n         if(report !\u003d null) {\n           info.put(\"NumContainers\", report.getNumContainers());\n           info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n           info.put(\"AvailableMemoryMB\",\n               report.getAvailableResource().getMemory());\n         }\n \n         nodesInfo.add(info);\n     }\n \n     return JSON.toString(nodesInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLiveNodeManagers() {\n    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n\n    for (final RMNode ni : nodes) {\n        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n        InfoMap info \u003d new InfoMap();\n        info.put(\"HostName\", ni.getHostName());\n        info.put(\"Rack\", ni.getRackName());\n        info.put(\"State\", ni.getState().toString());\n        info.put(\"NodeId\", ni.getNodeID());\n        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n        info.put(\"LastHealthUpdate\",\n                        ni.getLastHealthReportTime());\n        info.put(\"HealthReport\",\n                        ni.getHealthReport());\n        if(report !\u003d null) {\n          info.put(\"NumContainers\", report.getNumContainers());\n          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n          info.put(\"AvailableMemoryMB\",\n              report.getAvailableResource().getMemory());\n        }\n\n        nodesInfo.add(info);\n    }\n\n    return JSON.toString(nodesInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getLiveNodeManagers() {\n    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n\n    for (final RMNode ni : nodes) {\n        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n        InfoMap info \u003d new InfoMap();\n        info.put(\"HostName\", ni.getHostName());\n        info.put(\"Rack\", ni.getRackName());\n        info.put(\"State\", ni.getState().toString());\n        info.put(\"NodeId\", ni.getNodeID());\n        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n        info.put(\"HealthStatus\",\n                ni.getNodeHealthStatus().getIsNodeHealthy() ?\n                      \"Healthy\" : \"Unhealthy\");\n        info.put(\"LastHealthUpdate\",\n                        ni.getNodeHealthStatus().getLastHealthReportTime());\n        info.put(\"HealthReport\",\n                        ni.getNodeHealthStatus().getHealthReport());\n        if(report !\u003d null) {\n          info.put(\"NumContainers\", report.getNumContainers());\n          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n          info.put(\"AvailableMemoryMB\",\n              report.getAvailableResource().getMemory());\n        }\n\n        nodesInfo.add(info);\n    }\n\n    return JSON.toString(nodesInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java"
      }
    },
    "a446ad2c26359beb2b5367195de4257fbae648c6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4233. NPE can happen in RMNMNodeInfo. (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337363 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/12 1:26 PM",
      "commitName": "a446ad2c26359beb2b5367195de4257fbae648c6",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "30/01/12 10:47 AM",
      "commitNameOld": "7e4725db41674a74846b9b252a575da23a1a2b11",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 102.07,
      "commitsBetweenForRepo": 801,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public String getLiveNodeManagers() {\n     Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n     List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n \n     for (final RMNode ni : nodes) {\n         SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n         InfoMap info \u003d new InfoMap();\n         info.put(\"HostName\", ni.getHostName());\n         info.put(\"Rack\", ni.getRackName());\n         info.put(\"State\", ni.getState().toString());\n         info.put(\"NodeId\", ni.getNodeID());\n         info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n         info.put(\"HealthStatus\",\n                 ni.getNodeHealthStatus().getIsNodeHealthy() ?\n                       \"Healthy\" : \"Unhealthy\");\n         info.put(\"LastHealthUpdate\",\n                         ni.getNodeHealthStatus().getLastHealthReportTime());\n         info.put(\"HealthReport\",\n                         ni.getNodeHealthStatus().getHealthReport());\n-        info.put(\"NumContainersMB\", report.getNumContainers());\n-        info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n-        info.put(\"AvailableMemoryMB\",\n-                                report.getAvailableResource().getMemory());\n+        if(report !\u003d null) {\n+          info.put(\"NumContainers\", report.getNumContainers());\n+          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n+          info.put(\"AvailableMemoryMB\",\n+              report.getAvailableResource().getMemory());\n+        }\n \n         nodesInfo.add(info);\n     }\n \n     return JSON.toString(nodesInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLiveNodeManagers() {\n    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n\n    for (final RMNode ni : nodes) {\n        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n        InfoMap info \u003d new InfoMap();\n        info.put(\"HostName\", ni.getHostName());\n        info.put(\"Rack\", ni.getRackName());\n        info.put(\"State\", ni.getState().toString());\n        info.put(\"NodeId\", ni.getNodeID());\n        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n        info.put(\"HealthStatus\",\n                ni.getNodeHealthStatus().getIsNodeHealthy() ?\n                      \"Healthy\" : \"Unhealthy\");\n        info.put(\"LastHealthUpdate\",\n                        ni.getNodeHealthStatus().getLastHealthReportTime());\n        info.put(\"HealthReport\",\n                        ni.getNodeHealthStatus().getHealthReport());\n        if(report !\u003d null) {\n          info.put(\"NumContainers\", report.getNumContainers());\n          info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n          info.put(\"AvailableMemoryMB\",\n              report.getAvailableResource().getMemory());\n        }\n\n        nodesInfo.add(info);\n    }\n\n    return JSON.toString(nodesInfo);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java",
      "extendedDetails": {}
    },
    "7e4725db41674a74846b9b252a575da23a1a2b11": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3703. ResourceManager should provide node lists in JMX output. (Eric Payne via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1237920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 10:47 AM",
      "commitName": "7e4725db41674a74846b9b252a575da23a1a2b11",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,29 @@\n+  public String getLiveNodeManagers() {\n+    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n+    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n+\n+    for (final RMNode ni : nodes) {\n+        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n+        InfoMap info \u003d new InfoMap();\n+        info.put(\"HostName\", ni.getHostName());\n+        info.put(\"Rack\", ni.getRackName());\n+        info.put(\"State\", ni.getState().toString());\n+        info.put(\"NodeId\", ni.getNodeID());\n+        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n+        info.put(\"HealthStatus\",\n+                ni.getNodeHealthStatus().getIsNodeHealthy() ?\n+                      \"Healthy\" : \"Unhealthy\");\n+        info.put(\"LastHealthUpdate\",\n+                        ni.getNodeHealthStatus().getLastHealthReportTime());\n+        info.put(\"HealthReport\",\n+                        ni.getNodeHealthStatus().getHealthReport());\n+        info.put(\"NumContainersMB\", report.getNumContainers());\n+        info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n+        info.put(\"AvailableMemoryMB\",\n+                                report.getAvailableResource().getMemory());\n+\n+        nodesInfo.add(info);\n+    }\n+\n+    return JSON.toString(nodesInfo);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLiveNodeManagers() {\n    Collection\u003cRMNode\u003e nodes \u003d this.rmContext.getRMNodes().values();\n    List\u003cInfoMap\u003e nodesInfo \u003d new ArrayList\u003cInfoMap\u003e();\n\n    for (final RMNode ni : nodes) {\n        SchedulerNodeReport report \u003d scheduler.getNodeReport(ni.getNodeID());\n        InfoMap info \u003d new InfoMap();\n        info.put(\"HostName\", ni.getHostName());\n        info.put(\"Rack\", ni.getRackName());\n        info.put(\"State\", ni.getState().toString());\n        info.put(\"NodeId\", ni.getNodeID());\n        info.put(\"NodeHTTPAddress\", ni.getHttpAddress());\n        info.put(\"HealthStatus\",\n                ni.getNodeHealthStatus().getIsNodeHealthy() ?\n                      \"Healthy\" : \"Unhealthy\");\n        info.put(\"LastHealthUpdate\",\n                        ni.getNodeHealthStatus().getLastHealthReportTime());\n        info.put(\"HealthReport\",\n                        ni.getNodeHealthStatus().getHealthReport());\n        info.put(\"NumContainersMB\", report.getNumContainers());\n        info.put(\"UsedMemoryMB\", report.getUsedResource().getMemory());\n        info.put(\"AvailableMemoryMB\",\n                                report.getAvailableResource().getMemory());\n\n        nodesInfo.add(info);\n    }\n\n    return JSON.toString(nodesInfo);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMNMInfo.java"
    }
  }
}