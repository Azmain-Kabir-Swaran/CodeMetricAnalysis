{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientImpl.java",
  "functionName": "checkLocalityRelaxationConflict",
  "functionId": "checkLocalityRelaxationConflict___allocationReqId-Long__priority-Priority__locations-Collection__String____relaxLocality-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
  "functionStartLine": 786,
  "functionEndLine": 808,
  "numCommitsSeen": 86,
  "timeTaken": 2992,
  "changeHistory": [
    "19c743c1bbcaf3df8f1d63e557143c960a538c42",
    "51432779588fdd741b4840601f5db637ec783d92",
    "9a204f8c51c6015d15d603bf413e86a15f1cd32b",
    "1fe8e2d7eed74453cfe172853881fafc360a10b6"
  ],
  "changeHistoryShort": {
    "19c743c1bbcaf3df8f1d63e557143c960a538c42": "Ymultichange(Yparameterchange,Ybodychange)",
    "51432779588fdd741b4840601f5db637ec783d92": "Ybodychange",
    "9a204f8c51c6015d15d603bf413e86a15f1cd32b": "Ybodychange",
    "1fe8e2d7eed74453cfe172853881fafc360a10b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "19c743c1bbcaf3df8f1d63e557143c960a538c42": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4889. Changes in AMRMClient for identifying resource-requests explicitly. (Arun Suresh via wangda)\n",
      "commitDate": "26/08/16 5:14 PM",
      "commitName": "19c743c1bbcaf3df8f1d63e557143c960a538c42",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4889. Changes in AMRMClient for identifying resource-requests explicitly. (Arun Suresh via wangda)\n",
          "commitDate": "26/08/16 5:14 PM",
          "commitName": "19c743c1bbcaf3df8f1d63e557143c960a538c42",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "12/06/16 9:42 AM",
          "commitNameOld": "51432779588fdd741b4840601f5db637ec783d92",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 75.31,
          "commitsBetweenForRepo": 650,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,23 @@\n-  private void checkLocalityRelaxationConflict(Priority priority,\n-      Collection\u003cString\u003e locations, boolean relaxLocality) {\n+  private void checkLocalityRelaxationConflict(Long allocationReqId,\n+      Priority priority, Collection\u003cString\u003e locations, boolean relaxLocality) {\n     // Locality relaxation will be set to relaxLocality for all implicitly\n     // requested racks. Make sure that existing rack requests match this.\n \n-    @SuppressWarnings(\"unchecked\")\n-    List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n-        remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n-    for (ResourceRequestInfo reqs : allCapabilityMaps) {\n-      ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n-      boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n-      if (relaxLocality !\u003d existingRelaxLocality) {\n-        throw new InvalidContainerRequestException(\"Cannot submit a \"\n-            + \"ContainerRequest asking for location \"\n-            + remoteRequest.getResourceName() + \" with locality relaxation \"\n-            + relaxLocality + \" when it has already been requested\"\n-            + \"with locality relaxation \" + existingRelaxLocality);\n+    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d getTable(allocationReqId);\n+    if (remoteRequestsTable !\u003d null) {\n+      @SuppressWarnings(\"unchecked\")\n+      List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n+          remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n+      for (ResourceRequestInfo reqs : allCapabilityMaps) {\n+        ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n+        boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n+        if (relaxLocality !\u003d existingRelaxLocality) {\n+          throw new InvalidContainerRequestException(\"Cannot submit a \"\n+              + \"ContainerRequest asking for location \"\n+              + remoteRequest.getResourceName() + \" with locality relaxation \"\n+              + relaxLocality + \" when it has already been requested\"\n+              + \"with locality relaxation \" + existingRelaxLocality);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkLocalityRelaxationConflict(Long allocationReqId,\n      Priority priority, Collection\u003cString\u003e locations, boolean relaxLocality) {\n    // Locality relaxation will be set to relaxLocality for all implicitly\n    // requested racks. Make sure that existing rack requests match this.\n\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d getTable(allocationReqId);\n    if (remoteRequestsTable !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n          remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n      for (ResourceRequestInfo reqs : allCapabilityMaps) {\n        ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n        boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n        if (relaxLocality !\u003d existingRelaxLocality) {\n          throw new InvalidContainerRequestException(\"Cannot submit a \"\n              + \"ContainerRequest asking for location \"\n              + remoteRequest.getResourceName() + \" with locality relaxation \"\n              + relaxLocality + \" when it has already been requested\"\n              + \"with locality relaxation \" + existingRelaxLocality);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, locations-Collection\u003cString\u003e, relaxLocality-boolean]",
            "newValue": "[allocationReqId-Long, priority-Priority, locations-Collection\u003cString\u003e, relaxLocality-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4889. Changes in AMRMClient for identifying resource-requests explicitly. (Arun Suresh via wangda)\n",
          "commitDate": "26/08/16 5:14 PM",
          "commitName": "19c743c1bbcaf3df8f1d63e557143c960a538c42",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "12/06/16 9:42 AM",
          "commitNameOld": "51432779588fdd741b4840601f5db637ec783d92",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 75.31,
          "commitsBetweenForRepo": 650,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,23 @@\n-  private void checkLocalityRelaxationConflict(Priority priority,\n-      Collection\u003cString\u003e locations, boolean relaxLocality) {\n+  private void checkLocalityRelaxationConflict(Long allocationReqId,\n+      Priority priority, Collection\u003cString\u003e locations, boolean relaxLocality) {\n     // Locality relaxation will be set to relaxLocality for all implicitly\n     // requested racks. Make sure that existing rack requests match this.\n \n-    @SuppressWarnings(\"unchecked\")\n-    List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n-        remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n-    for (ResourceRequestInfo reqs : allCapabilityMaps) {\n-      ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n-      boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n-      if (relaxLocality !\u003d existingRelaxLocality) {\n-        throw new InvalidContainerRequestException(\"Cannot submit a \"\n-            + \"ContainerRequest asking for location \"\n-            + remoteRequest.getResourceName() + \" with locality relaxation \"\n-            + relaxLocality + \" when it has already been requested\"\n-            + \"with locality relaxation \" + existingRelaxLocality);\n+    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d getTable(allocationReqId);\n+    if (remoteRequestsTable !\u003d null) {\n+      @SuppressWarnings(\"unchecked\")\n+      List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n+          remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n+      for (ResourceRequestInfo reqs : allCapabilityMaps) {\n+        ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n+        boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n+        if (relaxLocality !\u003d existingRelaxLocality) {\n+          throw new InvalidContainerRequestException(\"Cannot submit a \"\n+              + \"ContainerRequest asking for location \"\n+              + remoteRequest.getResourceName() + \" with locality relaxation \"\n+              + relaxLocality + \" when it has already been requested\"\n+              + \"with locality relaxation \" + existingRelaxLocality);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkLocalityRelaxationConflict(Long allocationReqId,\n      Priority priority, Collection\u003cString\u003e locations, boolean relaxLocality) {\n    // Locality relaxation will be set to relaxLocality for all implicitly\n    // requested racks. Make sure that existing rack requests match this.\n\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d getTable(allocationReqId);\n    if (remoteRequestsTable !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n          remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n      for (ResourceRequestInfo reqs : allCapabilityMaps) {\n        ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n        boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n        if (relaxLocality !\u003d existingRelaxLocality) {\n          throw new InvalidContainerRequestException(\"Cannot submit a \"\n              + \"ContainerRequest asking for location \"\n              + remoteRequest.getResourceName() + \" with locality relaxation \"\n              + relaxLocality + \" when it has already been requested\"\n              + \"with locality relaxation \" + existingRelaxLocality);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "51432779588fdd741b4840601f5db637ec783d92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5124. Modify AMRMClient to set the ExecutionType in the ResourceRequest. (asuresh)\n",
      "commitDate": "12/06/16 9:42 AM",
      "commitName": "51432779588fdd741b4840601f5db637ec783d92",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,20 @@\n   private void checkLocalityRelaxationConflict(Priority priority,\n       Collection\u003cString\u003e locations, boolean relaxLocality) {\n-    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n-        this.remoteRequestsTable.get(priority);\n-    if (remoteRequests \u003d\u003d null) {\n-      return;\n-    }\n     // Locality relaxation will be set to relaxLocality for all implicitly\n     // requested racks. Make sure that existing rack requests match this.\n-    for (String location : locations) {\n-        TreeMap\u003cResource, ResourceRequestInfo\u003e reqs \u003d\n-            remoteRequests.get(location);\n-        if (reqs !\u003d null \u0026\u0026 !reqs.isEmpty()) {\n-          boolean existingRelaxLocality \u003d\n-              reqs.values().iterator().next().remoteRequest.getRelaxLocality();\n-          if (relaxLocality !\u003d existingRelaxLocality) {\n-            throw new InvalidContainerRequestException(\"Cannot submit a \"\n-                + \"ContainerRequest asking for location \" + location\n-                + \" with locality relaxation \" + relaxLocality + \" when it has \"\n-                + \"already been requested with locality relaxation \" + existingRelaxLocality);\n-          }\n-        }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n+        remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n+    for (ResourceRequestInfo reqs : allCapabilityMaps) {\n+      ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n+      boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n+      if (relaxLocality !\u003d existingRelaxLocality) {\n+        throw new InvalidContainerRequestException(\"Cannot submit a \"\n+            + \"ContainerRequest asking for location \"\n+            + remoteRequest.getResourceName() + \" with locality relaxation \"\n+            + relaxLocality + \" when it has already been requested\"\n+            + \"with locality relaxation \" + existingRelaxLocality);\n       }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkLocalityRelaxationConflict(Priority priority,\n      Collection\u003cString\u003e locations, boolean relaxLocality) {\n    // Locality relaxation will be set to relaxLocality for all implicitly\n    // requested racks. Make sure that existing rack requests match this.\n\n    @SuppressWarnings(\"unchecked\")\n    List\u003cResourceRequestInfo\u003e allCapabilityMaps \u003d\n        remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\n    for (ResourceRequestInfo reqs : allCapabilityMaps) {\n      ResourceRequest remoteRequest \u003d reqs.remoteRequest;\n      boolean existingRelaxLocality \u003d remoteRequest.getRelaxLocality();\n      if (relaxLocality !\u003d existingRelaxLocality) {\n        throw new InvalidContainerRequestException(\"Cannot submit a \"\n            + \"ContainerRequest asking for location \"\n            + remoteRequest.getResourceName() + \" with locality relaxation \"\n            + relaxLocality + \" when it has already been requested\"\n            + \"with locality relaxation \" + existingRelaxLocality);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "9a204f8c51c6015d15d603bf413e86a15f1cd32b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1381. Same relaxLocality appears twice in exception message of AMRMClientImpl#checkLocalityRelaxationConflict() (Ted Yu via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537632 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 1:45 PM",
      "commitName": "9a204f8c51c6015d15d603bf413e86a15f1cd32b",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "30/10/13 3:37 PM",
      "commitNameOld": "b8f1d1350b1f047a16cd6648d2349df41a989e8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   private void checkLocalityRelaxationConflict(Priority priority,\n       Collection\u003cString\u003e locations, boolean relaxLocality) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n         this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       return;\n     }\n     // Locality relaxation will be set to relaxLocality for all implicitly\n     // requested racks. Make sure that existing rack requests match this.\n     for (String location : locations) {\n         TreeMap\u003cResource, ResourceRequestInfo\u003e reqs \u003d\n             remoteRequests.get(location);\n-        if (reqs !\u003d null \u0026\u0026 !reqs.isEmpty()\n-            \u0026\u0026 reqs.values().iterator().next().remoteRequest.getRelaxLocality()\n-            !\u003d relaxLocality) {\n-          throw new InvalidContainerRequestException(\"Cannot submit a \"\n-              + \"ContainerRequest asking for location \" + location\n-              + \" with locality relaxation \" + relaxLocality + \" when it has \"\n-              + \"already been requested with locality relaxation \" + relaxLocality);\n+        if (reqs !\u003d null \u0026\u0026 !reqs.isEmpty()) {\n+          boolean existingRelaxLocality \u003d\n+              reqs.values().iterator().next().remoteRequest.getRelaxLocality();\n+          if (relaxLocality !\u003d existingRelaxLocality) {\n+            throw new InvalidContainerRequestException(\"Cannot submit a \"\n+                + \"ContainerRequest asking for location \" + location\n+                + \" with locality relaxation \" + relaxLocality + \" when it has \"\n+                + \"already been requested with locality relaxation \" + existingRelaxLocality);\n+          }\n         }\n       }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkLocalityRelaxationConflict(Priority priority,\n      Collection\u003cString\u003e locations, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n        this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      return;\n    }\n    // Locality relaxation will be set to relaxLocality for all implicitly\n    // requested racks. Make sure that existing rack requests match this.\n    for (String location : locations) {\n        TreeMap\u003cResource, ResourceRequestInfo\u003e reqs \u003d\n            remoteRequests.get(location);\n        if (reqs !\u003d null \u0026\u0026 !reqs.isEmpty()) {\n          boolean existingRelaxLocality \u003d\n              reqs.values().iterator().next().remoteRequest.getRelaxLocality();\n          if (relaxLocality !\u003d existingRelaxLocality) {\n            throw new InvalidContainerRequestException(\"Cannot submit a \"\n                + \"ContainerRequest asking for location \" + location\n                + \" with locality relaxation \" + relaxLocality + \" when it has \"\n                + \"already been requested with locality relaxation \" + existingRelaxLocality);\n          }\n        }\n      }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "1fe8e2d7eed74453cfe172853881fafc360a10b6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-521. Augment AM - RM client module to be able to request containers only at specific locations (Sandy Ryza via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503526 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/13 5:23 PM",
      "commitName": "1fe8e2d7eed74453cfe172853881fafc360a10b6",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,22 @@\n+  private void checkLocalityRelaxationConflict(Priority priority,\n+      Collection\u003cString\u003e locations, boolean relaxLocality) {\n+    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n+        this.remoteRequestsTable.get(priority);\n+    if (remoteRequests \u003d\u003d null) {\n+      return;\n+    }\n+    // Locality relaxation will be set to relaxLocality for all implicitly\n+    // requested racks. Make sure that existing rack requests match this.\n+    for (String location : locations) {\n+        TreeMap\u003cResource, ResourceRequestInfo\u003e reqs \u003d\n+            remoteRequests.get(location);\n+        if (reqs !\u003d null \u0026\u0026 !reqs.isEmpty()\n+            \u0026\u0026 reqs.values().iterator().next().remoteRequest.getRelaxLocality()\n+            !\u003d relaxLocality) {\n+          throw new InvalidContainerRequestException(\"Cannot submit a \"\n+              + \"ContainerRequest asking for location \" + location\n+              + \" with locality relaxation \" + relaxLocality + \" when it has \"\n+              + \"already been requested with locality relaxation \" + relaxLocality);\n+        }\n+      }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkLocalityRelaxationConflict(Priority priority,\n      Collection\u003cString\u003e locations, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n        this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      return;\n    }\n    // Locality relaxation will be set to relaxLocality for all implicitly\n    // requested racks. Make sure that existing rack requests match this.\n    for (String location : locations) {\n        TreeMap\u003cResource, ResourceRequestInfo\u003e reqs \u003d\n            remoteRequests.get(location);\n        if (reqs !\u003d null \u0026\u0026 !reqs.isEmpty()\n            \u0026\u0026 reqs.values().iterator().next().remoteRequest.getRelaxLocality()\n            !\u003d relaxLocality) {\n          throw new InvalidContainerRequestException(\"Cannot submit a \"\n              + \"ContainerRequest asking for location \" + location\n              + \" with locality relaxation \" + relaxLocality + \" when it has \"\n              + \"already been requested with locality relaxation \" + relaxLocality);\n        }\n      }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java"
    }
  }
}