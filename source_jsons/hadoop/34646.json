{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "recoverContainer",
  "functionId": "recoverContainer___rcs-RecoveredContainerState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 448,
  "functionEndLine": 495,
  "numCommitsSeen": 139,
  "timeTaken": 6121,
  "changeHistory": [
    "a5c1fc881e21ebf43da7ead5f3852808fce25492",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
    "4d7be1d8575e9254c59d41460960708e3718503a",
    "7114baddb627628a54cdab77f68504332a5a0e28",
    "a33ce45e35ce77dbf297df618aec3106eafda68c",
    "d464f4d1c4dec483852fc8c0496787cba0af8f57",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
    "d284e187b8db43056236032ebc2114ee462c27f6",
    "c57eac5dfe277845ab4522a1188023a73ee41539",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b"
  ],
  "changeHistoryShort": {
    "a5c1fc881e21ebf43da7ead5f3852808fce25492": "Ybodychange",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": "Ybodychange",
    "4d7be1d8575e9254c59d41460960708e3718503a": "Ybodychange",
    "7114baddb627628a54cdab77f68504332a5a0e28": "Ybodychange",
    "a33ce45e35ce77dbf297df618aec3106eafda68c": "Ybodychange",
    "d464f4d1c4dec483852fc8c0496787cba0af8f57": "Ybodychange",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Ybodychange",
    "d284e187b8db43056236032ebc2114ee462c27f6": "Ybodychange",
    "c57eac5dfe277845ab4522a1188023a73ee41539": "Ybodychange",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": "Ybodychange",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a5c1fc881e21ebf43da7ead5f3852808fce25492": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7696. Add container tags to ContainerTokenIdentifier, api.Container and NMContainerStatus to handle all recovery cases. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a5c1fc881e21ebf43da7ead5f3852808fce25492",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 74.33,
      "commitsBetweenForRepo": 404,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token;\n     if(rcs.getCapability() !\u003d null) {\n       ContainerTokenIdentifier originalToken \u003d\n           BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n       token \u003d new ContainerTokenIdentifier(originalToken.getContainerID(),\n           originalToken.getVersion(), originalToken.getNmHostAddress(),\n           originalToken.getApplicationSubmitter(), rcs.getCapability(),\n           originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(),\n           originalToken.getRMIdentifier(), originalToken.getPriority(),\n           originalToken.getCreationTime(),\n           originalToken.getLogAggregationContext(),\n           originalToken.getNodeLabelExpression(),\n           originalToken.getContainerType(), originalToken.getExecutionType(),\n-          originalToken.getAllocationRequestId());\n+          originalToken.getAllocationRequestId(),\n+          originalToken.getAllcationTags());\n \n     } else {\n       token \u003d BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     }\n \n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     Application app \u003d context.getApplications().get(appId);\n     if (app !\u003d null) {\n       recoverActiveContainer(app, launchContext, token, rcs);\n       if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n         dispatcher.getEventHandler().handle(\n             new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                 \"Due to invalid StateStore info container was killed\"\n                     + \" during recovery\"));\n       }\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token;\n    if(rcs.getCapability() !\u003d null) {\n      ContainerTokenIdentifier originalToken \u003d\n          BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n      token \u003d new ContainerTokenIdentifier(originalToken.getContainerID(),\n          originalToken.getVersion(), originalToken.getNmHostAddress(),\n          originalToken.getApplicationSubmitter(), rcs.getCapability(),\n          originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(),\n          originalToken.getRMIdentifier(), originalToken.getPriority(),\n          originalToken.getCreationTime(),\n          originalToken.getLogAggregationContext(),\n          originalToken.getNodeLabelExpression(),\n          originalToken.getContainerType(), originalToken.getExecutionType(),\n          originalToken.getAllocationRequestId(),\n          originalToken.getAllcationTags());\n\n    } else {\n      token \u003d BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    }\n\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    Application app \u003d context.getApplications().get(appId);\n    if (app !\u003d null) {\n      recoverActiveContainer(app, launchContext, token, rcs);\n      if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n        dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                \"Due to invalid StateStore info container was killed\"\n                    + \" during recovery\"));\n      }\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7371. Added allocateRequestId in NMContainerStatus for recovery. Contributed by Chandni Singh\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/10/17 2:56 PM",
      "commitNameOld": "665bb147aa3fc198e53335931562dd69f9f0e345",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 9.98,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n-    ContainerTokenIdentifier token \u003d null;\n+    ContainerTokenIdentifier token;\n     if(rcs.getCapability() !\u003d null) {\n       ContainerTokenIdentifier originalToken \u003d\n           BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n       token \u003d new ContainerTokenIdentifier(originalToken.getContainerID(),\n           originalToken.getVersion(), originalToken.getNmHostAddress(),\n           originalToken.getApplicationSubmitter(), rcs.getCapability(),\n           originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(),\n           originalToken.getRMIdentifier(), originalToken.getPriority(),\n           originalToken.getCreationTime(),\n           originalToken.getLogAggregationContext(),\n           originalToken.getNodeLabelExpression(),\n-          originalToken.getContainerType(), originalToken.getExecutionType());\n+          originalToken.getContainerType(), originalToken.getExecutionType(),\n+          originalToken.getAllocationRequestId());\n \n     } else {\n       token \u003d BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     }\n \n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     Application app \u003d context.getApplications().get(appId);\n     if (app !\u003d null) {\n       recoverActiveContainer(app, launchContext, token, rcs);\n       if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n         dispatcher.getEventHandler().handle(\n             new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                 \"Due to invalid StateStore info container was killed\"\n                     + \" during recovery\"));\n       }\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token;\n    if(rcs.getCapability() !\u003d null) {\n      ContainerTokenIdentifier originalToken \u003d\n          BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n      token \u003d new ContainerTokenIdentifier(originalToken.getContainerID(),\n          originalToken.getVersion(), originalToken.getNmHostAddress(),\n          originalToken.getApplicationSubmitter(), rcs.getCapability(),\n          originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(),\n          originalToken.getRMIdentifier(), originalToken.getPriority(),\n          originalToken.getCreationTime(),\n          originalToken.getLogAggregationContext(),\n          originalToken.getNodeLabelExpression(),\n          originalToken.getContainerType(), originalToken.getExecutionType(),\n          originalToken.getAllocationRequestId());\n\n    } else {\n      token \u003d BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    }\n\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    Application app \u003d context.getApplications().get(appId);\n    if (app !\u003d null) {\n      recoverActiveContainer(app, launchContext, token, rcs);\n      if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n        dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                \"Due to invalid StateStore info container was killed\"\n                    + \" during recovery\"));\n      }\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4d7be1d8575e9254c59d41460960708e3718503a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "14/08/17 7:46 PM",
      "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "03/08/17 9:15 PM",
      "commitNameOld": "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 10.94,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,46 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n-    ContainerTokenIdentifier token \u003d\n-        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n+    ContainerTokenIdentifier token \u003d null;\n+    if(rcs.getCapability() !\u003d null) {\n+      ContainerTokenIdentifier originalToken \u003d\n+          BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n+      token \u003d new ContainerTokenIdentifier(originalToken.getContainerID(),\n+          originalToken.getVersion(), originalToken.getNmHostAddress(),\n+          originalToken.getApplicationSubmitter(), rcs.getCapability(),\n+          originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(),\n+          originalToken.getRMIdentifier(), originalToken.getPriority(),\n+          originalToken.getCreationTime(),\n+          originalToken.getLogAggregationContext(),\n+          originalToken.getNodeLabelExpression(),\n+          originalToken.getContainerType(), originalToken.getExecutionType());\n+\n+    } else {\n+      token \u003d BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n+    }\n+\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     Application app \u003d context.getApplications().get(appId);\n     if (app !\u003d null) {\n       recoverActiveContainer(app, launchContext, token, rcs);\n       if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n         dispatcher.getEventHandler().handle(\n             new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                 \"Due to invalid StateStore info container was killed\"\n                     + \" during recovery\"));\n       }\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d null;\n    if(rcs.getCapability() !\u003d null) {\n      ContainerTokenIdentifier originalToken \u003d\n          BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n      token \u003d new ContainerTokenIdentifier(originalToken.getContainerID(),\n          originalToken.getVersion(), originalToken.getNmHostAddress(),\n          originalToken.getApplicationSubmitter(), rcs.getCapability(),\n          originalToken.getExpiryTimeStamp(), originalToken.getMasterKeyId(),\n          originalToken.getRMIdentifier(), originalToken.getPriority(),\n          originalToken.getCreationTime(),\n          originalToken.getLogAggregationContext(),\n          originalToken.getNodeLabelExpression(),\n          originalToken.getContainerType(), originalToken.getExecutionType());\n\n    } else {\n      token \u003d BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    }\n\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    Application app \u003d context.getApplications().get(appId);\n    if (app !\u003d null) {\n      recoverActiveContainer(app, launchContext, token, rcs);\n      if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n        dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                \"Due to invalid StateStore info container was killed\"\n                    + \" during recovery\"));\n      }\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "7114baddb627628a54cdab77f68504332a5a0e28": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4051. ContainerKillEvent lost when container is still recovering and application finishes. Contributed by sandflee\n",
      "commitDate": "16/03/17 7:30 AM",
      "commitName": "7114baddb627628a54cdab77f68504332a5a0e28",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "24/01/17 8:17 AM",
      "commitNameOld": "a33ce45e35ce77dbf297df618aec3106eafda68c",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 50.93,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n-    if (context.getApplications().containsKey(appId)) {\n-      recoverActiveContainer(launchContext, token, rcs);\n+    Application app \u003d context.getApplications().get(appId);\n+    if (app !\u003d null) {\n+      recoverActiveContainer(app, launchContext, token, rcs);\n       if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n         dispatcher.getEventHandler().handle(\n             new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                 \"Due to invalid StateStore info container was killed\"\n                     + \" during recovery\"));\n       }\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    Application app \u003d context.getApplications().get(appId);\n    if (app !\u003d null) {\n      recoverActiveContainer(app, launchContext, token, rcs);\n      if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n        dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                \"Due to invalid StateStore info container was killed\"\n                    + \" during recovery\"));\n      }\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "a33ce45e35ce77dbf297df618aec3106eafda68c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5547. NMLeveldbStateStore should be more tolerant of unknown keys. Contributed by Ajith S\n",
      "commitDate": "24/01/17 8:17 AM",
      "commitName": "a33ce45e35ce77dbf297df618aec3106eafda68c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "06/01/17 6:41 PM",
      "commitNameOld": "a59df15757fac7f917cb96fc8fcfeb7017475e4f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 17.57,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,29 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     if (context.getApplications().containsKey(appId)) {\n       recoverActiveContainer(launchContext, token, rcs);\n+      if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n+        dispatcher.getEventHandler().handle(\n+            new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n+                \"Due to invalid StateStore info container was killed\"\n+                    + \" during recovery\"));\n+      }\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      recoverActiveContainer(launchContext, token, rcs);\n      if (rcs.getRecoveryType() \u003d\u003d RecoveredContainerType.KILL) {\n        dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(containerId, ContainerExitStatus.ABORTED,\n                \"Due to invalid StateStore info container was killed\"\n                    + \" during recovery\"));\n      }\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d464f4d1c4dec483852fc8c0496787cba0af8f57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5049. Extend NMStateStore to save queued container information. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "11/05/16 7:10 PM",
      "commitName": "d464f4d1c4dec483852fc8c0496787cba0af8f57",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "10/05/16 10:31 PM",
      "commitNameOld": "d971bf252f36e902a0fe446cb11201835ad16bcb",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,23 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     if (context.getApplications().containsKey(appId)) {\n-      Credentials credentials \u003d\n-          YarnServerSecurityUtils.parseCredentials(launchContext);\n-      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n-          req.getContainerLaunchContext(),\n-          credentials, metrics, token, context, rcs);\n-      context.getContainers().put(containerId, container);\n-      dispatcher.getEventHandler().handle(\n-          new ApplicationContainerInitEvent(container));\n+      recoverActiveContainer(launchContext, token, rcs);\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      recoverActiveContainer(launchContext, token, rcs);\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "20/04/16 9:55 AM",
      "commitNameOld": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 8.74,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     if (context.getApplications().containsKey(appId)) {\n       Credentials credentials \u003d\n           YarnServerSecurityUtils.parseCredentials(launchContext);\n       Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n           req.getContainerLaunchContext(),\n-          credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n-          rcs.getDiagnostics(), rcs.getKilled(), rcs.getCapability(), context);\n+          credentials, metrics, token, context, rcs);\n       context.getContainers().put(containerId, container);\n       dispatcher.getEventHandler().handle(\n           new ApplicationContainerInitEvent(container));\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      Credentials credentials \u003d\n          YarnServerSecurityUtils.parseCredentials(launchContext);\n      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n          req.getContainerLaunchContext(),\n          credentials, metrics, token, context, rcs);\n      context.getContainers().put(containerId, container);\n      dispatcher.getEventHandler().handle(\n          new ApplicationContainerInitEvent(container));\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d284e187b8db43056236032ebc2114ee462c27f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2046. Out of band heartbeats are sent only on container kill and possibly too early. Contributed by Ming Ma\n",
      "commitDate": "23/02/16 12:49 PM",
      "commitName": "d284e187b8db43056236032ebc2114ee462c27f6",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/02/16 7:55 PM",
      "commitNameOld": "1cd55e0c171f7c4dec6f843931285557d59cd5ea",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 21.7,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     if (context.getApplications().containsKey(appId)) {\n       Credentials credentials \u003d\n           YarnServerSecurityUtils.parseCredentials(launchContext);\n       Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n-          context.getNMStateStore(), req.getContainerLaunchContext(),\n+          req.getContainerLaunchContext(),\n           credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n-          rcs.getDiagnostics(), rcs.getKilled(), rcs.getCapability());\n+          rcs.getDiagnostics(), rcs.getKilled(), rcs.getCapability(), context);\n       context.getContainers().put(containerId, container);\n       dispatcher.getEventHandler().handle(\n           new ApplicationContainerInitEvent(container));\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      Credentials credentials \u003d\n          YarnServerSecurityUtils.parseCredentials(launchContext);\n      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n          req.getContainerLaunchContext(),\n          credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n          rcs.getDiagnostics(), rcs.getKilled(), rcs.getCapability(), context);\n      context.getContainers().put(containerId, container);\n      dispatcher.getEventHandler().handle(\n          new ApplicationContainerInitEvent(container));\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c57eac5dfe277845ab4522a1188023a73ee41539": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3868. Recovery support for container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c57eac5dfe277845ab4522a1188023a73ee41539",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     if (context.getApplications().containsKey(appId)) {\n       Credentials credentials \u003d\n           YarnServerSecurityUtils.parseCredentials(launchContext);\n       Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n           context.getNMStateStore(), req.getContainerLaunchContext(),\n           credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n-          rcs.getDiagnostics(), rcs.getKilled());\n+          rcs.getDiagnostics(), rcs.getKilled(), rcs.getCapability());\n       context.getContainers().put(containerId, container);\n       dispatcher.getEventHandler().handle(\n           new ApplicationContainerInitEvent(container));\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      Credentials credentials \u003d\n          YarnServerSecurityUtils.parseCredentials(launchContext);\n      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n          context.getNMStateStore(), req.getContainerLaunchContext(),\n          credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n          rcs.getDiagnostics(), rcs.getKilled(), rcs.getCapability());\n      context.getContainers().put(containerId, container);\n      dispatcher.getEventHandler().handle(\n          new ApplicationContainerInitEvent(container));\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2884. Added a proxy service in NM to proxy the the communication between AM and RM. Contributed by Kishore Chaliparambil\n",
      "commitDate": "07/09/15 6:35 PM",
      "commitName": "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
      "commitAuthor": "Jian He",
      "commitDateOld": "02/09/15 1:43 AM",
      "commitNameOld": "095ab9ab5fa5f415fba41fee81b6008cf0455af8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private void recoverContainer(RecoveredContainerState rcs)\n       throws IOException {\n     StartContainerRequest req \u003d rcs.getStartRequest();\n     ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n     ContainerTokenIdentifier token \u003d\n         BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n     ContainerId containerId \u003d token.getContainerID();\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n \n     LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n         + \" with exit code \" + rcs.getExitCode());\n \n     if (context.getApplications().containsKey(appId)) {\n-      Credentials credentials \u003d parseCredentials(launchContext);\n+      Credentials credentials \u003d\n+          YarnServerSecurityUtils.parseCredentials(launchContext);\n       Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n           context.getNMStateStore(), req.getContainerLaunchContext(),\n           credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n           rcs.getDiagnostics(), rcs.getKilled());\n       context.getContainers().put(containerId, container);\n       dispatcher.getEventHandler().handle(\n           new ApplicationContainerInitEvent(container));\n     } else {\n       if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n         LOG.warn(containerId + \" has no corresponding application!\");\n       }\n       LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n       nodeStatusUpdater.addCompletedContainer(containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      Credentials credentials \u003d\n          YarnServerSecurityUtils.parseCredentials(launchContext);\n      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n          context.getNMStateStore(), req.getContainerLaunchContext(),\n          credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n          rcs.getDiagnostics(), rcs.getKilled());\n      context.getContainers().put(containerId, container);\n      dispatcher.getEventHandler().handle(\n          new ApplicationContainerInitEvent(container));\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,30 @@\n+  private void recoverContainer(RecoveredContainerState rcs)\n+      throws IOException {\n+    StartContainerRequest req \u003d rcs.getStartRequest();\n+    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n+    ContainerTokenIdentifier token \u003d\n+        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n+    ContainerId containerId \u003d token.getContainerID();\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+\n+    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n+        + \" with exit code \" + rcs.getExitCode());\n+\n+    if (context.getApplications().containsKey(appId)) {\n+      Credentials credentials \u003d parseCredentials(launchContext);\n+      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n+          context.getNMStateStore(), req.getContainerLaunchContext(),\n+          credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n+          rcs.getDiagnostics(), rcs.getKilled());\n+      context.getContainers().put(containerId, container);\n+      dispatcher.getEventHandler().handle(\n+          new ApplicationContainerInitEvent(container));\n+    } else {\n+      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n+        LOG.warn(containerId + \" has no corresponding application!\");\n+      }\n+      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n+      nodeStatusUpdater.addCompletedContainer(containerId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverContainer(RecoveredContainerState rcs)\n      throws IOException {\n    StartContainerRequest req \u003d rcs.getStartRequest();\n    ContainerLaunchContext launchContext \u003d req.getContainerLaunchContext();\n    ContainerTokenIdentifier token \u003d\n        BuilderUtils.newContainerTokenIdentifier(req.getContainerToken());\n    ContainerId containerId \u003d token.getContainerID();\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n\n    LOG.info(\"Recovering \" + containerId + \" in state \" + rcs.getStatus()\n        + \" with exit code \" + rcs.getExitCode());\n\n    if (context.getApplications().containsKey(appId)) {\n      Credentials credentials \u003d parseCredentials(launchContext);\n      Container container \u003d new ContainerImpl(getConfig(), dispatcher,\n          context.getNMStateStore(), req.getContainerLaunchContext(),\n          credentials, metrics, token, rcs.getStatus(), rcs.getExitCode(),\n          rcs.getDiagnostics(), rcs.getKilled());\n      context.getContainers().put(containerId, container);\n      dispatcher.getEventHandler().handle(\n          new ApplicationContainerInitEvent(container));\n    } else {\n      if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED) {\n        LOG.warn(containerId + \" has no corresponding application!\");\n      }\n      LOG.info(\"Adding \" + containerId + \" to recently stopped containers\");\n      nodeStatusUpdater.addCompletedContainer(containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}