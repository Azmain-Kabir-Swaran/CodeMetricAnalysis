{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "getAndSetAppLogs",
  "functionId": "getAndSetAppLogs___applicationId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 415,
  "functionEndLine": 450,
  "numCommitsSeen": 17,
  "timeTaken": 1327,
  "changeHistory": [
    "f44b349b813508f0f6d99ca10bddba683dedf6c4",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "f44b349b813508f0f6d99ca10bddba683dedf6c4": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f44b349b813508f0f6d99ca10bddba683dedf6c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6811. [ATS1.5] All history logs should be kept under its own User Directory. Contributed by Rohith Sharma K S.\n",
      "commitDate": "04/08/17 4:03 PM",
      "commitName": "f44b349b813508f0f6d99ca10bddba683dedf6c4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "21/11/16 5:20 PM",
      "commitNameOld": "6f8074298d8f33effe08f6be49ecfc89f69feda7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 255.91,
      "commitsBetweenForRepo": 1408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,36 @@\n   private AppLogs getAndSetAppLogs(ApplicationId applicationId)\n       throws IOException {\n     LOG.debug(\"Looking for app logs mapped for app id {}\", applicationId);\n     AppLogs appLogs \u003d appIdLogMap.get(applicationId);\n     if (appLogs \u003d\u003d null) {\n       AppState appState \u003d AppState.UNKNOWN;\n       Path appDirPath \u003d getDoneAppPath(applicationId);\n       if (fs.exists(appDirPath)) {\n         appState \u003d AppState.COMPLETED;\n       } else {\n         appDirPath \u003d getActiveAppPath(applicationId);\n         if (fs.exists(appDirPath)) {\n           appState \u003d AppState.ACTIVE;\n+        } else {\n+          // check for user directory inside active path\n+          RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n+          while (iter.hasNext()) {\n+            Path child \u003d new Path(iter.next().getPath().getName(),\n+                applicationId.toString());\n+            appDirPath \u003d new Path(activeRootPath, child);\n+            if (fs.exists(appDirPath)) {\n+              appState \u003d AppState.ACTIVE;\n+              break;\n+            }\n+          }\n         }\n       }\n       if (appState !\u003d AppState.UNKNOWN) {\n         LOG.debug(\"Create and try to add new appLogs to appIdLogMap for {}\",\n             applicationId);\n         appLogs \u003d createAndPutAppLogsIfAbsent(\n             applicationId, appDirPath, appState);\n       }\n     }\n     return appLogs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private AppLogs getAndSetAppLogs(ApplicationId applicationId)\n      throws IOException {\n    LOG.debug(\"Looking for app logs mapped for app id {}\", applicationId);\n    AppLogs appLogs \u003d appIdLogMap.get(applicationId);\n    if (appLogs \u003d\u003d null) {\n      AppState appState \u003d AppState.UNKNOWN;\n      Path appDirPath \u003d getDoneAppPath(applicationId);\n      if (fs.exists(appDirPath)) {\n        appState \u003d AppState.COMPLETED;\n      } else {\n        appDirPath \u003d getActiveAppPath(applicationId);\n        if (fs.exists(appDirPath)) {\n          appState \u003d AppState.ACTIVE;\n        } else {\n          // check for user directory inside active path\n          RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n          while (iter.hasNext()) {\n            Path child \u003d new Path(iter.next().getPath().getName(),\n                applicationId.toString());\n            appDirPath \u003d new Path(activeRootPath, child);\n            if (fs.exists(appDirPath)) {\n              appState \u003d AppState.ACTIVE;\n              break;\n            }\n          }\n        }\n      }\n      if (appState !\u003d AppState.UNKNOWN) {\n        LOG.debug(\"Create and try to add new appLogs to appIdLogMap for {}\",\n            applicationId);\n        appLogs \u003d createAndPutAppLogsIfAbsent(\n            applicationId, appDirPath, appState);\n      }\n    }\n    return appLogs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,24 @@\n+  private AppLogs getAndSetAppLogs(ApplicationId applicationId)\n+      throws IOException {\n+    LOG.debug(\"Looking for app logs mapped for app id {}\", applicationId);\n+    AppLogs appLogs \u003d appIdLogMap.get(applicationId);\n+    if (appLogs \u003d\u003d null) {\n+      AppState appState \u003d AppState.UNKNOWN;\n+      Path appDirPath \u003d getDoneAppPath(applicationId);\n+      if (fs.exists(appDirPath)) {\n+        appState \u003d AppState.COMPLETED;\n+      } else {\n+        appDirPath \u003d getActiveAppPath(applicationId);\n+        if (fs.exists(appDirPath)) {\n+          appState \u003d AppState.ACTIVE;\n+        }\n+      }\n+      if (appState !\u003d AppState.UNKNOWN) {\n+        LOG.debug(\"Create and try to add new appLogs to appIdLogMap for {}\",\n+            applicationId);\n+        appLogs \u003d createAndPutAppLogsIfAbsent(\n+            applicationId, appDirPath, appState);\n+      }\n+    }\n+    return appLogs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AppLogs getAndSetAppLogs(ApplicationId applicationId)\n      throws IOException {\n    LOG.debug(\"Looking for app logs mapped for app id {}\", applicationId);\n    AppLogs appLogs \u003d appIdLogMap.get(applicationId);\n    if (appLogs \u003d\u003d null) {\n      AppState appState \u003d AppState.UNKNOWN;\n      Path appDirPath \u003d getDoneAppPath(applicationId);\n      if (fs.exists(appDirPath)) {\n        appState \u003d AppState.COMPLETED;\n      } else {\n        appDirPath \u003d getActiveAppPath(applicationId);\n        if (fs.exists(appDirPath)) {\n          appState \u003d AppState.ACTIVE;\n        }\n      }\n      if (appState !\u003d AppState.UNKNOWN) {\n        LOG.debug(\"Create and try to add new appLogs to appIdLogMap for {}\",\n            applicationId);\n        appLogs \u003d createAndPutAppLogsIfAbsent(\n            applicationId, appDirPath, appState);\n      }\n    }\n    return appLogs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}