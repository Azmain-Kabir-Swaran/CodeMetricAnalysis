{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YARNRunner.java",
  "functionName": "submitJob",
  "functionId": "submitJob___jobId-JobID__jobSubmitDir-String__ts-Credentials",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
  "functionStartLine": 320,
  "functionEndLine": 348,
  "numCommitsSeen": 82,
  "timeTaken": 8594,
  "changeHistory": [
    "732ee6f0b58a12500198c0d934cc570c7490b520",
    "b64572b06b1282128180b9ebdd971f9b1e973e61",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "92b7165a71656468f17ce8b760ce11e648932f0e",
    "d18cc69d4eeaf82f72c8f465321afbbf28e2a550",
    "12293f8a13054eb12ee8c346aeb24a211a0673de",
    "e3d555a6569f3600fae4bac04cb21adacfe7c7be",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
    "063e33a862f99ce93b8399924c35d39ccd880f01",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
    "88b82a0f6687ce103817fbb460fd30d870f717a0",
    "b982e6205f255c62b281a82ccf95f239b4b44e04",
    "a0ef2d7503669fe7fbbe0206ef0a41315925c150",
    "f2b91a8367a762091482074505618b570a520b19",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "732ee6f0b58a12500198c0d934cc570c7490b520": "Ybodychange",
    "b64572b06b1282128180b9ebdd971f9b1e973e61": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "92b7165a71656468f17ce8b760ce11e648932f0e": "Ybodychange",
    "d18cc69d4eeaf82f72c8f465321afbbf28e2a550": "Ybodychange",
    "12293f8a13054eb12ee8c346aeb24a211a0673de": "Ybodychange",
    "e3d555a6569f3600fae4bac04cb21adacfe7c7be": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Ybodychange",
    "063e33a862f99ce93b8399924c35d39ccd880f01": "Ybodychange",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Ybodychange",
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d": "Ybodychange",
    "88b82a0f6687ce103817fbb460fd30d870f717a0": "Ybodychange",
    "b982e6205f255c62b281a82ccf95f239b4b44e04": "Ybodychange",
    "a0ef2d7503669fe7fbbe0206ef0a41315925c150": "Ybodychange",
    "f2b91a8367a762091482074505618b570a520b19": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5": "Ybodychange",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "732ee6f0b58a12500198c0d934cc570c7490b520": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6825. YARNRunner#createApplicationSubmissionContext method is longer than 150 lines (Contributed by Gergely Nov√°k via Daniel Templeton)\n",
      "commitDate": "22/02/17 3:38 PM",
      "commitName": "732ee6f0b58a12500198c0d934cc570c7490b520",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "23/01/17 9:12 AM",
      "commitNameOld": "69fa81679f59378fd19a2c65db8019393d7c05a2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 30.27,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n     \n     addHistoryToken(ts);\n-    \n-    // Construct necessary information to start the MR AM\n+\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     try {\n       ApplicationId applicationId \u003d\n           resMgrDelegate.submitApplication(appContext);\n \n       ApplicationReport appMaster \u003d resMgrDelegate\n           .getApplicationReport(applicationId);\n       String diagnostics \u003d\n           (appMaster \u003d\u003d null ?\n               \"application report is null\" : appMaster.getDiagnostics());\n       if (appMaster \u003d\u003d null\n           || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n           || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n         throw new IOException(\"Failed to run job : \" +\n             diagnostics);\n       }\n       return clientCache.getClient(jobId).getJobStatus(jobId);\n     } catch (YarnException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    addHistoryToken(ts);\n\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    try {\n      ApplicationId applicationId \u003d\n          resMgrDelegate.submitApplication(appContext);\n\n      ApplicationReport appMaster \u003d resMgrDelegate\n          .getApplicationReport(applicationId);\n      String diagnostics \u003d\n          (appMaster \u003d\u003d null ?\n              \"application report is null\" : appMaster.getDiagnostics());\n      if (appMaster \u003d\u003d null\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n        throw new IOException(\"Failed to run job : \" +\n            diagnostics);\n      }\n      return clientCache.getClient(jobId).getJobStatus(jobId);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "b64572b06b1282128180b9ebdd971f9b1e973e61": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5199. Removing ApplicationTokens file as it is no longer needed. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492848 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 1:20 PM",
      "commitName": "b64572b06b1282128180b9ebdd971f9b1e973e61",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,30 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n     \n-    addHistoyToken(ts);\n+    addHistoryToken(ts);\n     \n-    // Upload only in security mode: TODO\n-    Path applicationTokensFile \u003d\n-        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n-    try {\n-      ts.writeTokenStorageFile(applicationTokensFile, conf);\n-    } catch (IOException e) {\n-      throw new YarnRuntimeException(e);\n-    }\n-\n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     try {\n       ApplicationId applicationId \u003d\n           resMgrDelegate.submitApplication(appContext);\n \n       ApplicationReport appMaster \u003d resMgrDelegate\n           .getApplicationReport(applicationId);\n       String diagnostics \u003d\n           (appMaster \u003d\u003d null ?\n               \"application report is null\" : appMaster.getDiagnostics());\n       if (appMaster \u003d\u003d null\n           || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n           || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n         throw new IOException(\"Failed to run job : \" +\n             diagnostics);\n       }\n       return clientCache.getClient(jobId).getJobStatus(jobId);\n     } catch (YarnException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    addHistoryToken(ts);\n    \n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    try {\n      ApplicationId applicationId \u003d\n          resMgrDelegate.submitApplication(appContext);\n\n      ApplicationReport appMaster \u003d resMgrDelegate\n          .getApplicationReport(applicationId);\n      String diagnostics \u003d\n          (appMaster \u003d\u003d null ?\n              \"application report is null\" : appMaster.getDiagnostics());\n      if (appMaster \u003d\u003d null\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n        throw new IOException(\"Failed to run job : \" +\n            diagnostics);\n      }\n      return clientCache.getClient(jobId).getJobStatus(jobId);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/06/13 2:43 PM",
      "commitNameOld": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.27,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n     \n     addHistoyToken(ts);\n     \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     try {\n       ApplicationId applicationId \u003d\n           resMgrDelegate.submitApplication(appContext);\n \n       ApplicationReport appMaster \u003d resMgrDelegate\n           .getApplicationReport(applicationId);\n       String diagnostics \u003d\n           (appMaster \u003d\u003d null ?\n               \"application report is null\" : appMaster.getDiagnostics());\n       if (appMaster \u003d\u003d null\n           || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n           || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n         throw new IOException(\"Failed to run job : \" +\n             diagnostics);\n       }\n       return clientCache.getClient(jobId).getJobStatus(jobId);\n-    } catch (YarnRemoteException e) {\n+    } catch (YarnException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    addHistoyToken(ts);\n    \n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    try {\n      ApplicationId applicationId \u003d\n          resMgrDelegate.submitApplication(appContext);\n\n      ApplicationReport appMaster \u003d resMgrDelegate\n          .getApplicationReport(applicationId);\n      String diagnostics \u003d\n          (appMaster \u003d\u003d null ?\n              \"application report is null\" : appMaster.getDiagnostics());\n      if (appMaster \u003d\u003d null\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n        throw new IOException(\"Failed to run job : \" +\n            diagnostics);\n      }\n      return clientCache.getClient(jobId).getJobStatus(jobId);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "92b7165a71656468f17ce8b760ce11e648932f0e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-629. Make YarnRemoteException not be rooted at IOException. Contributed by Xuan Gong.\nMAPREDUCE-5204. Handling YarnRemoteException separately from IOException in MR app after YARN-629. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479680 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/13 12:04 PM",
      "commitName": "92b7165a71656468f17ce8b760ce11e648932f0e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/04/13 12:28 PM",
      "commitNameOld": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 24.98,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,39 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n     \n     addHistoyToken(ts);\n     \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n-    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n+    try {\n+      ApplicationId applicationId \u003d\n+          resMgrDelegate.submitApplication(appContext);\n \n-    ApplicationReport appMaster \u003d resMgrDelegate\n-        .getApplicationReport(applicationId);\n-    String diagnostics \u003d\n-        (appMaster \u003d\u003d null ?\n-            \"application report is null\" : appMaster.getDiagnostics());\n-    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n-        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n-      throw new IOException(\"Failed to run job : \" +\n-        diagnostics);\n+      ApplicationReport appMaster \u003d resMgrDelegate\n+          .getApplicationReport(applicationId);\n+      String diagnostics \u003d\n+          (appMaster \u003d\u003d null ?\n+              \"application report is null\" : appMaster.getDiagnostics());\n+      if (appMaster \u003d\u003d null\n+          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n+          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n+        throw new IOException(\"Failed to run job : \" +\n+            diagnostics);\n+      }\n+      return clientCache.getClient(jobId).getJobStatus(jobId);\n+    } catch (YarnRemoteException e) {\n+      throw new IOException(e);\n     }\n-    return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    addHistoyToken(ts);\n    \n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    try {\n      ApplicationId applicationId \u003d\n          resMgrDelegate.submitApplication(appContext);\n\n      ApplicationReport appMaster \u003d resMgrDelegate\n          .getApplicationReport(applicationId);\n      String diagnostics \u003d\n          (appMaster \u003d\u003d null ?\n              \"application report is null\" : appMaster.getDiagnostics());\n      if (appMaster \u003d\u003d null\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n          || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n        throw new IOException(\"Failed to run job : \" +\n            diagnostics);\n      }\n      return clientCache.getClient(jobId).getJobStatus(jobId);\n    } catch (YarnRemoteException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "d18cc69d4eeaf82f72c8f465321afbbf28e2a550": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5088. MR Client gets an renewer token exception while Oozie is submitting a job (daryn)\n\n    merge -c1463804 from branch-2.0.4-alpha\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1464153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/13 11:45 AM",
      "commitName": "d18cc69d4eeaf82f72c8f465321afbbf28e2a550",
      "commitAuthor": "Konstantin Boudnik",
      "commitDateOld": "25/03/13 3:33 PM",
      "commitNameOld": "46315a2d914058969c7234272420c063ce268bf5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.84,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,33 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n     \n-    /* check if we have a hsproxy, if not, no need */\n-    MRClientProtocol hsProxy \u003d clientCache.getInitializedHSProxy();\n-    if (hsProxy !\u003d null) {\n-      // JobClient will set this flag if getDelegationToken is called, if so, get\n-      // the delegation tokens for the HistoryServer also.\n-      if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n-          DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n-        Token hsDT \u003d getDelegationTokenFromHS(hsProxy);\n-        ts.addToken(hsDT.getService(), hsDT);\n-      }\n-    }\n-\n+    addHistoyToken(ts);\n+    \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     String diagnostics \u003d\n         (appMaster \u003d\u003d null ?\n             \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n         || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" +\n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    addHistoyToken(ts);\n    \n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n\n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d\n        (appMaster \u003d\u003d null ?\n            \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" +\n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "12293f8a13054eb12ee8c346aeb24a211a0673de": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4921. JobClient should acquire HS token with RM principal (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1432230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/13 11:00 AM",
      "commitName": "12293f8a13054eb12ee8c346aeb24a211a0673de",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "08/01/13 10:31 PM",
      "commitNameOld": "5f7d4d2b451bec9d9db6b0a4c0b6e7991985116d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.52,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n     \n     /* check if we have a hsproxy, if not, no need */\n     MRClientProtocol hsProxy \u003d clientCache.getInitializedHSProxy();\n     if (hsProxy !\u003d null) {\n       // JobClient will set this flag if getDelegationToken is called, if so, get\n       // the delegation tokens for the HistoryServer also.\n       if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n           DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n-        Token hsDT \u003d getDelegationTokenFromHS(hsProxy, new Text( \n-                conf.get(JobClient.HS_DELEGATION_TOKEN_RENEWER)));\n+        Token hsDT \u003d getDelegationTokenFromHS(hsProxy);\n         ts.addToken(hsDT.getService(), hsDT);\n       }\n     }\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     String diagnostics \u003d\n         (appMaster \u003d\u003d null ?\n             \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n         || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" +\n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    /* check if we have a hsproxy, if not, no need */\n    MRClientProtocol hsProxy \u003d clientCache.getInitializedHSProxy();\n    if (hsProxy !\u003d null) {\n      // JobClient will set this flag if getDelegationToken is called, if so, get\n      // the delegation tokens for the HistoryServer also.\n      if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n          DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n        Token hsDT \u003d getDelegationTokenFromHS(hsProxy);\n        ts.addToken(hsDT.getService(), hsDT);\n      }\n    }\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n\n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d\n        (appMaster \u003d\u003d null ?\n            \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" +\n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "e3d555a6569f3600fae4bac04cb21adacfe7c7be": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3499. New MiniMR does not setup proxyuser configuration correctly, thus tests using doAs do not work. (johnvijoe via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239207 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 9:03 AM",
      "commitName": "e3d555a6569f3600fae4bac04cb21adacfe7c7be",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/01/12 10:21 AM",
      "commitNameOld": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n-    // JobClient will set this flag if getDelegationToken is called, if so, get\n-    // the delegation tokens for the HistoryServer also.\n-    if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n-        DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n-      Token hsDT \u003d getDelegationTokenFromHS(clientCache.\n-          getInitializedHSProxy(), new Text( \n-              conf.get(JobClient.HS_DELEGATION_TOKEN_RENEWER)));\n-      ts.addToken(hsDT.getService(), hsDT);\n-    }\n     \n+    /* check if we have a hsproxy, if not, no need */\n+    MRClientProtocol hsProxy \u003d clientCache.getInitializedHSProxy();\n+    if (hsProxy !\u003d null) {\n+      // JobClient will set this flag if getDelegationToken is called, if so, get\n+      // the delegation tokens for the HistoryServer also.\n+      if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n+          DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n+        Token hsDT \u003d getDelegationTokenFromHS(hsProxy, new Text( \n+                conf.get(JobClient.HS_DELEGATION_TOKEN_RENEWER)));\n+        ts.addToken(hsDT.getService(), hsDT);\n+      }\n+    }\n+\n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     String diagnostics \u003d\n         (appMaster \u003d\u003d null ?\n             \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n         || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" +\n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    \n    /* check if we have a hsproxy, if not, no need */\n    MRClientProtocol hsProxy \u003d clientCache.getInitializedHSProxy();\n    if (hsProxy !\u003d null) {\n      // JobClient will set this flag if getDelegationToken is called, if so, get\n      // the delegation tokens for the HistoryServer also.\n      if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n          DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n        Token hsDT \u003d getDelegationTokenFromHS(hsProxy, new Text( \n                conf.get(JobClient.HS_DELEGATION_TOKEN_RENEWER)));\n        ts.addToken(hsDT.getService(), hsDT);\n      }\n    }\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n\n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d\n        (appMaster \u003d\u003d null ?\n            \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" +\n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "23/11/11 2:04 PM",
      "commitNameOld": "f17ed541c76ce08b43713f06ecafd1685e16dff2",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 48.16,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,40 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n-\n+    // JobClient will set this flag if getDelegationToken is called, if so, get\n+    // the delegation tokens for the HistoryServer also.\n+    if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n+        DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n+      Token hsDT \u003d getDelegationTokenFromHS(clientCache.\n+          getInitializedHSProxy(), new Text( \n+              conf.get(JobClient.HS_DELEGATION_TOKEN_RENEWER)));\n+      ts.addToken(hsDT.getService(), hsDT);\n+    }\n+    \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     String diagnostics \u003d\n         (appMaster \u003d\u003d null ?\n             \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n         || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" +\n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n    // JobClient will set this flag if getDelegationToken is called, if so, get\n    // the delegation tokens for the HistoryServer also.\n    if (conf.getBoolean(JobClient.HS_DELEGATION_TOKEN_REQUIRED, \n        DEFAULT_HS_DELEGATION_TOKEN_REQUIRED)) {\n      Token hsDT \u003d getDelegationTokenFromHS(clientCache.\n          getInitializedHSProxy(), new Text( \n              conf.get(JobClient.HS_DELEGATION_TOKEN_RENEWER)));\n      ts.addToken(hsDT.getService(), hsDT);\n    }\n    \n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n\n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d\n        (appMaster \u003d\u003d null ?\n            \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" +\n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "063e33a862f99ce93b8399924c35d39ccd880f01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3098. Fixed RM and MR AM to report YarnApplicationState and application\u0027s FinalStatus separately. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177633 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/09/11 5:46 AM",
      "commitName": "063e33a862f99ce93b8399924c35d39ccd880f01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/09/11 1:30 PM",
      "commitNameOld": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n-    ApplicationSubmissionContext appContext \u003d \n+    ApplicationSubmissionContext appContext \u003d\n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n-    \n+\n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n-    \n+\n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n-    String diagnostics \u003d \n-        (appMaster \u003d\u003d null ? \n+    String diagnostics \u003d\n+        (appMaster \u003d\u003d null ?\n             \"application report is null\" : appMaster.getDiagnostics());\n-    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n-        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n-      throw new IOException(\"Failed to run job : \" + \n+    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n+        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n+      throw new IOException(\"Failed to run job : \" +\n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d\n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n\n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n\n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d\n        (appMaster \u003d\u003d null ?\n            \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.FAILED\n        || appMaster.getYarnApplicationState() \u003d\u003d YarnApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" +\n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/11 5:46 PM",
      "commitNameOld": "f0fedda8eff23d012c385675c728705e2c479363",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.74,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n-        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n+        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n     \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n-    String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n+    String diagnostics \u003d \n+        (appMaster \u003d\u003d null ? \n+            \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n         || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" + \n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRJobConfig.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d \n        (appMaster \u003d\u003d null ? \n            \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" + \n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-1788. o.a.h.mapreduce.Job shouldn\u0027t make a copy of the JobConf. (Arun Murthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1172171 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/11 7:50 PM",
      "commitName": "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "14/09/11 12:26 AM",
      "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.81,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,29 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n-    // XXX Remove\n-    Path submitJobDir \u003d new Path(jobSubmitDir);\n-    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n-    Path submitJobFile \u003d\n-      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n-    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n-    conf.addResource(in);\n-    // ---\n-\n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n     \n-    // XXX Remove\n-    in.close();\n-    // ---\n-    \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n         || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" + \n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" + \n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "88b82a0f6687ce103817fbb460fd30d870f717a0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2899. Replace major parts of ApplicationSubmissionContext with a ContainerLaunchContext (Arun Murthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170459 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/11 12:26 AM",
      "commitName": "88b82a0f6687ce103817fbb460fd30d870f717a0",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // XXX Remove\n     Path submitJobDir \u003d new Path(jobSubmitDir);\n     FileContext defaultFS \u003d FileContext.getFileContext(conf);\n     Path submitJobFile \u003d\n       defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n     FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n     conf.addResource(in);\n     // ---\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n-    setupDistributedCache(conf, appContext);\n     \n     // XXX Remove\n     in.close();\n     // ---\n     \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n         || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" + \n         diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" + \n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "b982e6205f255c62b281a82ccf95f239b4b44e04": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2971. ant build mapreduce fails protected access jc.displayJobList (jobs) (Thomas Graves via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167383 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/09/11 3:42 PM",
      "commitName": "b982e6205f255c62b281a82ccf95f239b4b44e04",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "09/09/11 12:01 PM",
      "commitNameOld": "fbf0035ee60aea7209725fdf42710c64bd910982",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // XXX Remove\n     Path submitJobDir \u003d new Path(jobSubmitDir);\n     FileContext defaultFS \u003d FileContext.getFileContext(conf);\n     Path submitJobFile \u003d\n       defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n     FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n     conf.addResource(in);\n     // ---\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n     setupDistributedCache(conf, appContext);\n     \n     // XXX Remove\n     in.close();\n     // ---\n     \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n+    String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n     if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n         || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n       throw new IOException(\"Failed to run job : \" + \n-        appMaster.getDiagnostics());\n+        diagnostics);\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    setupDistributedCache(conf, appContext);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    String diagnostics \u003d (appMaster \u003d\u003d null ? \"application report is null\" : appMaster.getDiagnostics());\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" + \n        diagnostics);\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "a0ef2d7503669fe7fbbe0206ef0a41315925c150": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2937. Ensure reason for application failure is displayed to the user. Contributed by Mahadev Konar.  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166966 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 7:14 PM",
      "commitName": "a0ef2d7503669fe7fbbe0206ef0a41315925c150",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // XXX Remove\n     Path submitJobDir \u003d new Path(jobSubmitDir);\n     FileContext defaultFS \u003d FileContext.getFileContext(conf);\n     Path submitJobFile \u003d\n       defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n     FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n     conf.addResource(in);\n     // ---\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n     setupDistributedCache(conf, appContext);\n     \n     // XXX Remove\n     in.close();\n     // ---\n     \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n         || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n-      throw RPCUtil.getRemoteException(\"failed to run job\");\n+      throw new IOException(\"Failed to run job : \" + \n+        appMaster.getDiagnostics());\n     }\n     return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    setupDistributedCache(conf, appContext);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw new IOException(\"Failed to run job : \" + \n        appMaster.getDiagnostics());\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "f2b91a8367a762091482074505618b570a520b19": {
      "type": "Ybodychange",
      "commitMessage": " MAPREDUCE-2807. Fix AM restart and client redirection. Contributed by Sharad Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 11:35 PM",
      "commitName": "f2b91a8367a762091482074505618b570a520b19",
      "commitAuthor": "Sharad Agarwal",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // XXX Remove\n     Path submitJobDir \u003d new Path(jobSubmitDir);\n     FileContext defaultFS \u003d FileContext.getFileContext(conf);\n     Path submitJobFile \u003d\n       defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n     FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n     conf.addResource(in);\n     // ---\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n     setupDistributedCache(conf, appContext);\n     \n     // XXX Remove\n     in.close();\n     // ---\n     \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n     if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n         || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n       throw RPCUtil.getRemoteException(\"failed to run job\");\n     }\n-    return clientServiceDelegate.getJobStatus(jobId);\n+    return clientCache.getClient(jobId).getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    setupDistributedCache(conf, appContext);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw RPCUtil.getRemoteException(\"failed to run job\");\n    }\n    return clientCache.getClient(jobId).getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    setupDistributedCache(conf, appContext);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw RPCUtil.getRemoteException(\"failed to run job\");\n    }\n    return clientServiceDelegate.getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
      }
    },
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2649. Handling of finished applications in RM. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160521 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 6:32 PM",
      "commitName": "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "18/08/11 4:07 AM",
      "commitNameOld": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.6,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n   throws IOException, InterruptedException {\n \n     // Upload only in security mode: TODO\n     Path applicationTokensFile \u003d\n         new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n     try {\n       ts.writeTokenStorageFile(applicationTokensFile, conf);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     // XXX Remove\n     Path submitJobDir \u003d new Path(jobSubmitDir);\n     FileContext defaultFS \u003d FileContext.getFileContext(conf);\n     Path submitJobFile \u003d\n       defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n     FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n     conf.addResource(in);\n     // ---\n \n     // Construct necessary information to start the MR AM\n     ApplicationSubmissionContext appContext \u003d \n       createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n     setupDistributedCache(conf, appContext);\n     \n     // XXX Remove\n     in.close();\n     // ---\n     \n     // Submit to ResourceManager\n     ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n     \n     ApplicationReport appMaster \u003d resMgrDelegate\n         .getApplicationReport(applicationId);\n-    if (appMaster.getState() \u003d\u003d ApplicationState.FAILED || appMaster.getState() \u003d\u003d\n-      ApplicationState.KILLED) {\n+    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n+        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n       throw RPCUtil.getRemoteException(\"failed to run job\");\n     }\n     return clientServiceDelegate.getJobStatus(jobId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    setupDistributedCache(conf, appContext);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    if (appMaster \u003d\u003d null || appMaster.getState() \u003d\u003d ApplicationState.FAILED \n        || appMaster.getState() \u003d\u003d ApplicationState.KILLED) {\n      throw RPCUtil.getRemoteException(\"failed to run job\");\n    }\n    return clientServiceDelegate.getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,41 @@\n+  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n+  throws IOException, InterruptedException {\n+\n+    // Upload only in security mode: TODO\n+    Path applicationTokensFile \u003d\n+        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n+    try {\n+      ts.writeTokenStorageFile(applicationTokensFile, conf);\n+    } catch (IOException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    // XXX Remove\n+    Path submitJobDir \u003d new Path(jobSubmitDir);\n+    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n+    Path submitJobFile \u003d\n+      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n+    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n+    conf.addResource(in);\n+    // ---\n+\n+    // Construct necessary information to start the MR AM\n+    ApplicationSubmissionContext appContext \u003d \n+      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n+    setupDistributedCache(conf, appContext);\n+    \n+    // XXX Remove\n+    in.close();\n+    // ---\n+    \n+    // Submit to ResourceManager\n+    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n+    \n+    ApplicationReport appMaster \u003d resMgrDelegate\n+        .getApplicationReport(applicationId);\n+    if (appMaster.getState() \u003d\u003d ApplicationState.FAILED || appMaster.getState() \u003d\u003d\n+      ApplicationState.KILLED) {\n+      throw RPCUtil.getRemoteException(\"failed to run job\");\n+    }\n+    return clientServiceDelegate.getJobStatus(jobId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public JobStatus submitJob(JobID jobId, String jobSubmitDir, Credentials ts)\n  throws IOException, InterruptedException {\n\n    // Upload only in security mode: TODO\n    Path applicationTokensFile \u003d\n        new Path(jobSubmitDir, MRConstants.APPLICATION_TOKENS_FILE);\n    try {\n      ts.writeTokenStorageFile(applicationTokensFile, conf);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // XXX Remove\n    Path submitJobDir \u003d new Path(jobSubmitDir);\n    FileContext defaultFS \u003d FileContext.getFileContext(conf);\n    Path submitJobFile \u003d\n      defaultFS.makeQualified(JobSubmissionFiles.getJobConfPath(submitJobDir));\n    FSDataInputStream in \u003d defaultFS.open(submitJobFile);\n    conf.addResource(in);\n    // ---\n\n    // Construct necessary information to start the MR AM\n    ApplicationSubmissionContext appContext \u003d \n      createApplicationSubmissionContext(conf, jobSubmitDir, ts);\n    setupDistributedCache(conf, appContext);\n    \n    // XXX Remove\n    in.close();\n    // ---\n    \n    // Submit to ResourceManager\n    ApplicationId applicationId \u003d resMgrDelegate.submitApplication(appContext);\n    \n    ApplicationReport appMaster \u003d resMgrDelegate\n        .getApplicationReport(applicationId);\n    if (appMaster.getState() \u003d\u003d ApplicationState.FAILED || appMaster.getState() \u003d\u003d\n      ApplicationState.KILLED) {\n      throw RPCUtil.getRemoteException(\"failed to run job\");\n    }\n    return clientServiceDelegate.getJobStatus(jobId);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
    }
  }
}