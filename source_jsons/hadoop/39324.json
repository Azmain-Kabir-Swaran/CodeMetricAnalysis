{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "moveApplication",
  "functionId": "moveApplication___appId-ApplicationId__targetQueueName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2468,
  "functionEndLine": 2522,
  "numCommitsSeen": 239,
  "timeTaken": 9066,
  "changeHistory": [
    "8afabe41e4175551ae71217a45f7c4276f10b7da",
    "c504eee0c29276a385ff68ce456f08150aa25e80",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "1eb81867032b016a59662043cbae50daa52dafa9",
    "563480dccd0136d82730f4228f1df44449ed5822",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "46e02ab719d06f2708c0a61e8011b8f261235193",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "eb3e40b833b9d82c1556843f960194dc42e482f3",
    "7360cec692be5dcc3377ae5082fe22870caac96b"
  ],
  "changeHistoryShort": {
    "8afabe41e4175551ae71217a45f7c4276f10b7da": "Ybodychange",
    "c504eee0c29276a385ff68ce456f08150aa25e80": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "1eb81867032b016a59662043cbae50daa52dafa9": "Ybodychange",
    "563480dccd0136d82730f4228f1df44449ed5822": "Ybodychange",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "46e02ab719d06f2708c0a61e8011b8f261235193": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "eb3e40b833b9d82c1556843f960194dc42e482f3": "Ybodychange",
    "7360cec692be5dcc3377ae5082fe22870caac96b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8afabe41e4175551ae71217a45f7c4276f10b7da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9838. Fix resource inconsistency for queues when moving app with reserved container to another queue. Contributed by jiulongzhu.\n",
      "commitDate": "22/11/19 12:06 AM",
      "commitName": "8afabe41e4175551ae71217a45f7c4276f10b7da",
      "commitAuthor": "Tao Yang",
      "commitDateOld": "08/10/19 11:20 AM",
      "commitNameOld": "5462d2176f7a64b236f06700cd247f946798cb26",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 44.57,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,55 @@\n   public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     writeLock.lock();\n     try {\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           applications.get(appId);\n       if (application \u003d\u003d null) {\n         throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n       String sourceQueueName \u003d application.getQueue().getQueueName();\n       LeafQueue source \u003d\n           this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n       String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n       LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n \n       String user \u003d application.getUser();\n       try {\n         dest.submitApplication(appId, user, destQueueName);\n       } catch (AccessControlException e) {\n         throw new YarnException(e);\n       }\n \n       FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n       if (app !\u003d null) {\n         // Move all live containers even when stopped.\n         // For transferStateFromPreviousAttempt required\n         for (RMContainer rmContainer : app.getLiveContainers()) {\n           source.detachContainer(getClusterResource(), app, rmContainer);\n           // attach the Container to another queue\n           dest.attachContainer(getClusterResource(), app, rmContainer);\n         }\n+        // Move all reserved containers\n+        for (RMContainer rmContainer : app.getReservedContainers()) {\n+          source.detachContainer(getClusterResource(), app, rmContainer);\n+          dest.attachContainer(getClusterResource(), app, rmContainer);\n+        }\n         if (!app.isStopped()) {\n           source.finishApplicationAttempt(app, sourceQueueName);\n           // Submit to a new queue\n           dest.submitApplicationAttempt(app, user, true);\n         }\n         // Finish app \u0026 update metrics\n         app.move(dest);\n       }\n       source.appFinished();\n       // Detach the application..\n       source.getParent().finishApplication(appId, user);\n       application.setQueue(dest);\n       LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n           + \" to: \" + destQueueName);\n       return targetQueueName;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          applications.get(appId);\n      if (application \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      String sourceQueueName \u003d application.getQueue().getQueueName();\n      LeafQueue source \u003d\n          this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n\n      String user \u003d application.getUser();\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n\n      FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n      if (app !\u003d null) {\n        // Move all live containers even when stopped.\n        // For transferStateFromPreviousAttempt required\n        for (RMContainer rmContainer : app.getLiveContainers()) {\n          source.detachContainer(getClusterResource(), app, rmContainer);\n          // attach the Container to another queue\n          dest.attachContainer(getClusterResource(), app, rmContainer);\n        }\n        // Move all reserved containers\n        for (RMContainer rmContainer : app.getReservedContainers()) {\n          source.detachContainer(getClusterResource(), app, rmContainer);\n          dest.attachContainer(getClusterResource(), app, rmContainer);\n        }\n        if (!app.isStopped()) {\n          source.finishApplicationAttempt(app, sourceQueueName);\n          // Submit to a new queue\n          dest.submitApplicationAttempt(app, user, true);\n        }\n        // Finish app \u0026 update metrics\n        app.move(dest);\n      }\n      source.appFinished();\n      // Detach the application..\n      source.getParent().finishApplication(appId, user);\n      application.setQueue(dest);\n      LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n          + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "c504eee0c29276a385ff68ce456f08150aa25e80": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9339. Apps pending metric incorrect after moving app to a new queue. Contributed by Abhishek Modi.\n",
      "commitDate": "23/04/19 12:40 PM",
      "commitName": "c504eee0c29276a385ff68ce456f08150aa25e80",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "07/04/19 10:40 PM",
      "commitNameOld": "fc05b0e70e9bb556d6bdc00fa8735e18a6f90bc9",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 15.58,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     writeLock.lock();\n     try {\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           applications.get(appId);\n       if (application \u003d\u003d null) {\n         throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n       String sourceQueueName \u003d application.getQueue().getQueueName();\n       LeafQueue source \u003d\n           this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n       String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n       LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n \n       String user \u003d application.getUser();\n       try {\n         dest.submitApplication(appId, user, destQueueName);\n       } catch (AccessControlException e) {\n         throw new YarnException(e);\n       }\n \n       FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n       if (app !\u003d null) {\n         // Move all live containers even when stopped.\n         // For transferStateFromPreviousAttempt required\n         for (RMContainer rmContainer : app.getLiveContainers()) {\n           source.detachContainer(getClusterResource(), app, rmContainer);\n           // attach the Container to another queue\n           dest.attachContainer(getClusterResource(), app, rmContainer);\n         }\n         if (!app.isStopped()) {\n           source.finishApplicationAttempt(app, sourceQueueName);\n           // Submit to a new queue\n-          dest.submitApplicationAttempt(app, user);\n+          dest.submitApplicationAttempt(app, user, true);\n         }\n         // Finish app \u0026 update metrics\n         app.move(dest);\n       }\n       source.appFinished();\n       // Detach the application..\n       source.getParent().finishApplication(appId, user);\n       application.setQueue(dest);\n       LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n           + \" to: \" + destQueueName);\n       return targetQueueName;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          applications.get(appId);\n      if (application \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      String sourceQueueName \u003d application.getQueue().getQueueName();\n      LeafQueue source \u003d\n          this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n\n      String user \u003d application.getUser();\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n\n      FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n      if (app !\u003d null) {\n        // Move all live containers even when stopped.\n        // For transferStateFromPreviousAttempt required\n        for (RMContainer rmContainer : app.getLiveContainers()) {\n          source.detachContainer(getClusterResource(), app, rmContainer);\n          // attach the Container to another queue\n          dest.attachContainer(getClusterResource(), app, rmContainer);\n        }\n        if (!app.isStopped()) {\n          source.finishApplicationAttempt(app, sourceQueueName);\n          // Submit to a new queue\n          dest.submitApplicationAttempt(app, user, true);\n        }\n        // Finish app \u0026 update metrics\n        app.move(dest);\n      }\n      source.appFinished();\n      // Detach the application..\n      source.getParent().finishApplication(appId, user);\n      application.setQueue(dest);\n      LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n          + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           applications.get(appId);\n       if (application \u003d\u003d null) {\n         throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n       String sourceQueueName \u003d application.getQueue().getQueueName();\n       LeafQueue source \u003d\n           this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n       String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n       LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n \n       String user \u003d application.getUser();\n       try {\n         dest.submitApplication(appId, user, destQueueName);\n       } catch (AccessControlException e) {\n         throw new YarnException(e);\n       }\n \n       FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n       if (app !\u003d null) {\n         // Move all live containers even when stopped.\n         // For transferStateFromPreviousAttempt required\n         for (RMContainer rmContainer : app.getLiveContainers()) {\n           source.detachContainer(getClusterResource(), app, rmContainer);\n           // attach the Container to another queue\n           dest.attachContainer(getClusterResource(), app, rmContainer);\n         }\n         if (!app.isStopped()) {\n           source.finishApplicationAttempt(app, sourceQueueName);\n           // Submit to a new queue\n           dest.submitApplicationAttempt(app, user);\n         }\n         // Finish app \u0026 update metrics\n         app.move(dest);\n       }\n       source.appFinished();\n       // Detach the application..\n       source.getParent().finishApplication(appId, user);\n       application.setQueue(dest);\n       LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n           + \" to: \" + destQueueName);\n       return targetQueueName;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          applications.get(appId);\n      if (application \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      String sourceQueueName \u003d application.getQueue().getQueueName();\n      LeafQueue source \u003d\n          this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n\n      String user \u003d application.getUser();\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n\n      FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n      if (app !\u003d null) {\n        // Move all live containers even when stopped.\n        // For transferStateFromPreviousAttempt required\n        for (RMContainer rmContainer : app.getLiveContainers()) {\n          source.detachContainer(getClusterResource(), app, rmContainer);\n          // attach the Container to another queue\n          dest.attachContainer(getClusterResource(), app, rmContainer);\n        }\n        if (!app.isStopped()) {\n          source.finishApplicationAttempt(app, sourceQueueName);\n          // Submit to a new queue\n          dest.submitApplicationAttempt(app, user);\n        }\n        // Finish app \u0026 update metrics\n        app.move(dest);\n      }\n      source.appFinished();\n      // Detach the application..\n      source.getParent().finishApplication(appId, user);\n      application.setQueue(dest);\n      LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n          + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1eb81867032b016a59662043cbae50daa52dafa9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6207. Move application across queues should handle delayed event processing. Contributed by Bibin A Chundatt.\n",
      "commitDate": "07/03/17 10:34 PM",
      "commitName": "1eb81867032b016a59662043cbae50daa52dafa9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 10:35 AM",
      "commitNameOld": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.5,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,50 @@\n   public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     try {\n       writeLock.lock();\n-      FiCaSchedulerApp app \u003d getApplicationAttempt(\n-          ApplicationAttemptId.newInstance(appId, 0));\n-      String sourceQueueName \u003d app.getQueue().getQueueName();\n-      LeafQueue source \u003d this.queueManager.getAndCheckLeafQueue(\n-          sourceQueueName);\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n+          applications.get(appId);\n+      if (application \u003d\u003d null) {\n+        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n+      }\n+      String sourceQueueName \u003d application.getQueue().getQueueName();\n+      LeafQueue source \u003d\n+          this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n       String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n       LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n \n-      String user \u003d app.getUser();\n+      String user \u003d application.getUser();\n       try {\n         dest.submitApplication(appId, user, destQueueName);\n       } catch (AccessControlException e) {\n         throw new YarnException(e);\n       }\n-      // Move all live containers\n-      for (RMContainer rmContainer : app.getLiveContainers()) {\n-        source.detachContainer(getClusterResource(), app, rmContainer);\n-        // attach the Container to another queue\n-        dest.attachContainer(getClusterResource(), app, rmContainer);\n+\n+      FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n+      if (app !\u003d null) {\n+        // Move all live containers even when stopped.\n+        // For transferStateFromPreviousAttempt required\n+        for (RMContainer rmContainer : app.getLiveContainers()) {\n+          source.detachContainer(getClusterResource(), app, rmContainer);\n+          // attach the Container to another queue\n+          dest.attachContainer(getClusterResource(), app, rmContainer);\n+        }\n+        if (!app.isStopped()) {\n+          source.finishApplicationAttempt(app, sourceQueueName);\n+          // Submit to a new queue\n+          dest.submitApplicationAttempt(app, user);\n+        }\n+        // Finish app \u0026 update metrics\n+        app.move(dest);\n       }\n+      source.appFinished();\n       // Detach the application..\n-      source.finishApplicationAttempt(app, sourceQueueName);\n-      source.getParent().finishApplication(appId, app.getUser());\n-      // Finish app \u0026 update metrics\n-      app.move(dest);\n-      // Submit to a new queue\n-      dest.submitApplicationAttempt(app, user);\n-      applications.get(appId).setQueue(dest);\n-      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n-          + sourceQueueName + \" to: \" + destQueueName);\n+      source.getParent().finishApplication(appId, user);\n+      application.setQueue(dest);\n+      LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n+          + \" to: \" + destQueueName);\n       return targetQueueName;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          applications.get(appId);\n      if (application \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      String sourceQueueName \u003d application.getQueue().getQueueName();\n      LeafQueue source \u003d\n          this.queueManager.getAndCheckLeafQueue(sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n\n      String user \u003d application.getUser();\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n\n      FiCaSchedulerApp app \u003d application.getCurrentAppAttempt();\n      if (app !\u003d null) {\n        // Move all live containers even when stopped.\n        // For transferStateFromPreviousAttempt required\n        for (RMContainer rmContainer : app.getLiveContainers()) {\n          source.detachContainer(getClusterResource(), app, rmContainer);\n          // attach the Container to another queue\n          dest.attachContainer(getClusterResource(), app, rmContainer);\n        }\n        if (!app.isStopped()) {\n          source.finishApplicationAttempt(app, sourceQueueName);\n          // Submit to a new queue\n          dest.submitApplicationAttempt(app, user);\n        }\n        // Finish app \u0026 update metrics\n        app.move(dest);\n      }\n      source.appFinished();\n      // Detach the application..\n      source.getParent().finishApplication(appId, user);\n      application.setQueue(dest);\n      LOG.info(\"App: \" + appId + \" successfully moved from \" + sourceQueueName\n          + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "563480dccd0136d82730f4228f1df44449ed5822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5932. Retrospect moveApplicationToQueue in align with YARN-5611. Contributed by Sunil G.\n",
      "commitDate": "06/12/16 9:09 PM",
      "commitName": "563480dccd0136d82730f4228f1df44449ed5822",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "30/11/16 1:38 PM",
      "commitNameOld": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     try {\n       writeLock.lock();\n       FiCaSchedulerApp app \u003d getApplicationAttempt(\n           ApplicationAttemptId.newInstance(appId, 0));\n       String sourceQueueName \u003d app.getQueue().getQueueName();\n       LeafQueue source \u003d this.queueManager.getAndCheckLeafQueue(\n           sourceQueueName);\n       String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n       LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n-      // Validation check - ACLs, submission limits for user \u0026 queue\n+\n       String user \u003d app.getUser();\n-      checkQueuePartition(app, dest);\n       try {\n         dest.submitApplication(appId, user, destQueueName);\n       } catch (AccessControlException e) {\n         throw new YarnException(e);\n       }\n       // Move all live containers\n       for (RMContainer rmContainer : app.getLiveContainers()) {\n         source.detachContainer(getClusterResource(), app, rmContainer);\n         // attach the Container to another queue\n         dest.attachContainer(getClusterResource(), app, rmContainer);\n       }\n       // Detach the application..\n       source.finishApplicationAttempt(app, sourceQueueName);\n       source.getParent().finishApplication(appId, app.getUser());\n       // Finish app \u0026 update metrics\n       app.move(dest);\n       // Submit to a new queue\n       dest.submitApplicationAttempt(app, user);\n       applications.get(appId).setQueue(dest);\n       LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n           + sourceQueueName + \" to: \" + destQueueName);\n       return targetQueueName;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    try {\n      writeLock.lock();\n      FiCaSchedulerApp app \u003d getApplicationAttempt(\n          ApplicationAttemptId.newInstance(appId, 0));\n      String sourceQueueName \u003d app.getQueue().getQueueName();\n      LeafQueue source \u003d this.queueManager.getAndCheckLeafQueue(\n          sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n\n      String user \u003d app.getUser();\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n      // Move all live containers\n      for (RMContainer rmContainer : app.getLiveContainers()) {\n        source.detachContainer(getClusterResource(), app, rmContainer);\n        // attach the Container to another queue\n        dest.attachContainer(getClusterResource(), app, rmContainer);\n      }\n      // Detach the application..\n      source.finishApplicationAttempt(app, sourceQueueName);\n      source.getParent().finishApplication(appId, app.getUser());\n      // Finish app \u0026 update metrics\n      app.move(dest);\n      // Submit to a new queue\n      dest.submitApplicationAttempt(app, user);\n      applications.get(appId).setQueue(dest);\n      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n          + sourceQueueName + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     try {\n       writeLock.lock();\n       FiCaSchedulerApp app \u003d getApplicationAttempt(\n           ApplicationAttemptId.newInstance(appId, 0));\n       String sourceQueueName \u003d app.getQueue().getQueueName();\n-      LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n+      LeafQueue source \u003d this.queueManager.getAndCheckLeafQueue(\n+          sourceQueueName);\n       String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n-      LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n+      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n       // Validation check - ACLs, submission limits for user \u0026 queue\n       String user \u003d app.getUser();\n       checkQueuePartition(app, dest);\n       try {\n         dest.submitApplication(appId, user, destQueueName);\n       } catch (AccessControlException e) {\n         throw new YarnException(e);\n       }\n       // Move all live containers\n       for (RMContainer rmContainer : app.getLiveContainers()) {\n         source.detachContainer(getClusterResource(), app, rmContainer);\n         // attach the Container to another queue\n         dest.attachContainer(getClusterResource(), app, rmContainer);\n       }\n       // Detach the application..\n       source.finishApplicationAttempt(app, sourceQueueName);\n       source.getParent().finishApplication(appId, app.getUser());\n       // Finish app \u0026 update metrics\n       app.move(dest);\n       // Submit to a new queue\n       dest.submitApplicationAttempt(app, user);\n       applications.get(appId).setQueue(dest);\n       LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n           + sourceQueueName + \" to: \" + destQueueName);\n       return targetQueueName;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    try {\n      writeLock.lock();\n      FiCaSchedulerApp app \u003d getApplicationAttempt(\n          ApplicationAttemptId.newInstance(appId, 0));\n      String sourceQueueName \u003d app.getQueue().getQueueName();\n      LeafQueue source \u003d this.queueManager.getAndCheckLeafQueue(\n          sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d this.queueManager.getAndCheckLeafQueue(destQueueName);\n      // Validation check - ACLs, submission limits for user \u0026 queue\n      String user \u003d app.getUser();\n      checkQueuePartition(app, dest);\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n      // Move all live containers\n      for (RMContainer rmContainer : app.getLiveContainers()) {\n        source.detachContainer(getClusterResource(), app, rmContainer);\n        // attach the Container to another queue\n        dest.attachContainer(getClusterResource(), app, rmContainer);\n      }\n      // Detach the application..\n      source.finishApplicationAttempt(app, sourceQueueName);\n      source.getParent().finishApplication(appId, app.getUser());\n      // Finish app \u0026 update metrics\n      app.move(dest);\n      // Submit to a new queue\n      dest.submitApplicationAttempt(app, user);\n      applications.get(appId).setQueue(dest);\n      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n          + sourceQueueName + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,39 @@\n-  public synchronized String moveApplication(ApplicationId appId,\n+  public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n-    FiCaSchedulerApp app \u003d\n-        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n-    String sourceQueueName \u003d app.getQueue().getQueueName();\n-    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n-    String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n-    LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n-    // Validation check - ACLs, submission limits for user \u0026 queue\n-    String user \u003d app.getUser();\n-    checkQueuePartition(app, dest);\n     try {\n-      dest.submitApplication(appId, user, destQueueName);\n-    } catch (AccessControlException e) {\n-      throw new YarnException(e);\n+      writeLock.lock();\n+      FiCaSchedulerApp app \u003d getApplicationAttempt(\n+          ApplicationAttemptId.newInstance(appId, 0));\n+      String sourceQueueName \u003d app.getQueue().getQueueName();\n+      LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n+      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n+      LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n+      // Validation check - ACLs, submission limits for user \u0026 queue\n+      String user \u003d app.getUser();\n+      checkQueuePartition(app, dest);\n+      try {\n+        dest.submitApplication(appId, user, destQueueName);\n+      } catch (AccessControlException e) {\n+        throw new YarnException(e);\n+      }\n+      // Move all live containers\n+      for (RMContainer rmContainer : app.getLiveContainers()) {\n+        source.detachContainer(getClusterResource(), app, rmContainer);\n+        // attach the Container to another queue\n+        dest.attachContainer(getClusterResource(), app, rmContainer);\n+      }\n+      // Detach the application..\n+      source.finishApplicationAttempt(app, sourceQueueName);\n+      source.getParent().finishApplication(appId, app.getUser());\n+      // Finish app \u0026 update metrics\n+      app.move(dest);\n+      // Submit to a new queue\n+      dest.submitApplicationAttempt(app, user);\n+      applications.get(appId).setQueue(dest);\n+      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n+          + sourceQueueName + \" to: \" + destQueueName);\n+      return targetQueueName;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    // Move all live containers\n-    for (RMContainer rmContainer : app.getLiveContainers()) {\n-      source.detachContainer(getClusterResource(), app, rmContainer);\n-      // attach the Container to another queue\n-      dest.attachContainer(getClusterResource(), app, rmContainer);\n-    }\n-    // Detach the application..\n-    source.finishApplicationAttempt(app, sourceQueueName);\n-    source.getParent().finishApplication(appId, app.getUser());\n-    // Finish app \u0026 update metrics\n-    app.move(dest);\n-    // Submit to a new queue\n-    dest.submitApplicationAttempt(app, user);\n-    applications.get(appId).setQueue(dest);\n-    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n-        + sourceQueueName + \" to: \" + destQueueName);\n-    return targetQueueName;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    try {\n      writeLock.lock();\n      FiCaSchedulerApp app \u003d getApplicationAttempt(\n          ApplicationAttemptId.newInstance(appId, 0));\n      String sourceQueueName \u003d app.getQueue().getQueueName();\n      LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n      // Validation check - ACLs, submission limits for user \u0026 queue\n      String user \u003d app.getUser();\n      checkQueuePartition(app, dest);\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n      // Move all live containers\n      for (RMContainer rmContainer : app.getLiveContainers()) {\n        source.detachContainer(getClusterResource(), app, rmContainer);\n        // attach the Container to another queue\n        dest.attachContainer(getClusterResource(), app, rmContainer);\n      }\n      // Detach the application..\n      source.finishApplicationAttempt(app, sourceQueueName);\n      source.getParent().finishApplication(appId, app.getUser());\n      // Finish app \u0026 update metrics\n      app.move(dest);\n      // Submit to a new queue\n      dest.submitApplicationAttempt(app, user);\n      applications.get(appId).setQueue(dest);\n      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n          + sourceQueueName + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,39 @@\n-  public synchronized String moveApplication(ApplicationId appId,\n+  public String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n-    FiCaSchedulerApp app \u003d\n-        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n-    String sourceQueueName \u003d app.getQueue().getQueueName();\n-    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n-    String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n-    LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n-    // Validation check - ACLs, submission limits for user \u0026 queue\n-    String user \u003d app.getUser();\n-    checkQueuePartition(app, dest);\n     try {\n-      dest.submitApplication(appId, user, destQueueName);\n-    } catch (AccessControlException e) {\n-      throw new YarnException(e);\n+      writeLock.lock();\n+      FiCaSchedulerApp app \u003d getApplicationAttempt(\n+          ApplicationAttemptId.newInstance(appId, 0));\n+      String sourceQueueName \u003d app.getQueue().getQueueName();\n+      LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n+      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n+      LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n+      // Validation check - ACLs, submission limits for user \u0026 queue\n+      String user \u003d app.getUser();\n+      checkQueuePartition(app, dest);\n+      try {\n+        dest.submitApplication(appId, user, destQueueName);\n+      } catch (AccessControlException e) {\n+        throw new YarnException(e);\n+      }\n+      // Move all live containers\n+      for (RMContainer rmContainer : app.getLiveContainers()) {\n+        source.detachContainer(getClusterResource(), app, rmContainer);\n+        // attach the Container to another queue\n+        dest.attachContainer(getClusterResource(), app, rmContainer);\n+      }\n+      // Detach the application..\n+      source.finishApplicationAttempt(app, sourceQueueName);\n+      source.getParent().finishApplication(appId, app.getUser());\n+      // Finish app \u0026 update metrics\n+      app.move(dest);\n+      // Submit to a new queue\n+      dest.submitApplicationAttempt(app, user);\n+      applications.get(appId).setQueue(dest);\n+      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n+          + sourceQueueName + \" to: \" + destQueueName);\n+      return targetQueueName;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    // Move all live containers\n-    for (RMContainer rmContainer : app.getLiveContainers()) {\n-      source.detachContainer(getClusterResource(), app, rmContainer);\n-      // attach the Container to another queue\n-      dest.attachContainer(getClusterResource(), app, rmContainer);\n-    }\n-    // Detach the application..\n-    source.finishApplicationAttempt(app, sourceQueueName);\n-    source.getParent().finishApplication(appId, app.getUser());\n-    // Finish app \u0026 update metrics\n-    app.move(dest);\n-    // Submit to a new queue\n-    dest.submitApplicationAttempt(app, user);\n-    applications.get(appId).setQueue(dest);\n-    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n-        + sourceQueueName + \" to: \" + destQueueName);\n-    return targetQueueName;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    try {\n      writeLock.lock();\n      FiCaSchedulerApp app \u003d getApplicationAttempt(\n          ApplicationAttemptId.newInstance(appId, 0));\n      String sourceQueueName \u003d app.getQueue().getQueueName();\n      LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n      String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n      LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n      // Validation check - ACLs, submission limits for user \u0026 queue\n      String user \u003d app.getUser();\n      checkQueuePartition(app, dest);\n      try {\n        dest.submitApplication(appId, user, destQueueName);\n      } catch (AccessControlException e) {\n        throw new YarnException(e);\n      }\n      // Move all live containers\n      for (RMContainer rmContainer : app.getLiveContainers()) {\n        source.detachContainer(getClusterResource(), app, rmContainer);\n        // attach the Container to another queue\n        dest.attachContainer(getClusterResource(), app, rmContainer);\n      }\n      // Detach the application..\n      source.finishApplicationAttempt(app, sourceQueueName);\n      source.getParent().finishApplication(appId, app.getUser());\n      // Finish app \u0026 update metrics\n      app.move(dest);\n      // Submit to a new queue\n      dest.submitApplicationAttempt(app, user);\n      applications.get(appId).setQueue(dest);\n      LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n          + sourceQueueName + \" to: \" + destQueueName);\n      return targetQueueName;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "46e02ab719d06f2708c0a61e8011b8f261235193": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3940. Application moveToQueue should check NodeLabel permission. Contributed by Bibin A Chundatt\n",
      "commitDate": "26/08/16 7:49 AM",
      "commitName": "46e02ab719d06f2708c0a61e8011b8f261235193",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/08/16 12:05 PM",
      "commitNameOld": "89c0bff7197d7da4426934fcad3f9ff79abac495",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 15.82,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     FiCaSchedulerApp app \u003d\n         getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n     String sourceQueueName \u003d app.getQueue().getQueueName();\n     LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n     String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n     LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n     // Validation check - ACLs, submission limits for user \u0026 queue\n     String user \u003d app.getUser();\n+    checkQueuePartition(app, dest);\n     try {\n       dest.submitApplication(appId, user, destQueueName);\n     } catch (AccessControlException e) {\n       throw new YarnException(e);\n     }\n     // Move all live containers\n     for (RMContainer rmContainer : app.getLiveContainers()) {\n       source.detachContainer(getClusterResource(), app, rmContainer);\n       // attach the Container to another queue\n       dest.attachContainer(getClusterResource(), app, rmContainer);\n     }\n     // Detach the application..\n     source.finishApplicationAttempt(app, sourceQueueName);\n     source.getParent().finishApplication(appId, app.getUser());\n     // Finish app \u0026 update metrics\n     app.move(dest);\n     // Submit to a new queue\n     dest.submitApplicationAttempt(app, user);\n     applications.get(appId).setQueue(dest);\n     LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n         + sourceQueueName + \" to: \" + destQueueName);\n     return targetQueueName;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    FiCaSchedulerApp app \u003d\n        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n    String sourceQueueName \u003d app.getQueue().getQueueName();\n    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n    String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n    LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n    // Validation check - ACLs, submission limits for user \u0026 queue\n    String user \u003d app.getUser();\n    checkQueuePartition(app, dest);\n    try {\n      dest.submitApplication(appId, user, destQueueName);\n    } catch (AccessControlException e) {\n      throw new YarnException(e);\n    }\n    // Move all live containers\n    for (RMContainer rmContainer : app.getLiveContainers()) {\n      source.detachContainer(getClusterResource(), app, rmContainer);\n      // attach the Container to another queue\n      dest.attachContainer(getClusterResource(), app, rmContainer);\n    }\n    // Detach the application..\n    source.finishApplicationAttempt(app, sourceQueueName);\n    source.getParent().finishApplication(appId, app.getUser());\n    // Finish app \u0026 update metrics\n    app.move(dest);\n    // Submit to a new queue\n    dest.submitApplicationAttempt(app, user);\n    applications.get(appId).setQueue(dest);\n    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n        + sourceQueueName + \" to: \" + destQueueName);\n    return targetQueueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/03/16 1:14 PM",
      "commitNameOld": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     FiCaSchedulerApp app \u003d\n         getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n     String sourceQueueName \u003d app.getQueue().getQueueName();\n     LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n     String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n     LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n     // Validation check - ACLs, submission limits for user \u0026 queue\n     String user \u003d app.getUser();\n     try {\n       dest.submitApplication(appId, user, destQueueName);\n     } catch (AccessControlException e) {\n       throw new YarnException(e);\n     }\n     // Move all live containers\n     for (RMContainer rmContainer : app.getLiveContainers()) {\n-      source.detachContainer(clusterResource, app, rmContainer);\n+      source.detachContainer(getClusterResource(), app, rmContainer);\n       // attach the Container to another queue\n-      dest.attachContainer(clusterResource, app, rmContainer);\n+      dest.attachContainer(getClusterResource(), app, rmContainer);\n     }\n     // Detach the application..\n     source.finishApplicationAttempt(app, sourceQueueName);\n     source.getParent().finishApplication(appId, app.getUser());\n     // Finish app \u0026 update metrics\n     app.move(dest);\n     // Submit to a new queue\n     dest.submitApplicationAttempt(app, user);\n     applications.get(appId).setQueue(dest);\n     LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n         + sourceQueueName + \" to: \" + destQueueName);\n     return targetQueueName;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    FiCaSchedulerApp app \u003d\n        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n    String sourceQueueName \u003d app.getQueue().getQueueName();\n    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n    String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n    LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n    // Validation check - ACLs, submission limits for user \u0026 queue\n    String user \u003d app.getUser();\n    try {\n      dest.submitApplication(appId, user, destQueueName);\n    } catch (AccessControlException e) {\n      throw new YarnException(e);\n    }\n    // Move all live containers\n    for (RMContainer rmContainer : app.getLiveContainers()) {\n      source.detachContainer(getClusterResource(), app, rmContainer);\n      // attach the Container to another queue\n      dest.attachContainer(getClusterResource(), app, rmContainer);\n    }\n    // Detach the application..\n    source.finishApplicationAttempt(app, sourceQueueName);\n    source.getParent().finishApplication(appId, app.getUser());\n    // Finish app \u0026 update metrics\n    app.move(dest);\n    // Submit to a new queue\n    dest.submitApplicationAttempt(app, user);\n    applications.get(appId).setQueue(dest);\n    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n        + sourceQueueName + \" to: \" + destQueueName);\n    return targetQueueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "eb3e40b833b9d82c1556843f960194dc42e482f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1707. Introduce APIs to add/remove/resize queues in the CapacityScheduler. Contributed by Carlo Curino and Subru Krishnan\n(cherry picked from commit aac47fda7fecda9fc18ade34d633eca895865a70)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthor": "carlo curino",
      "commitDateOld": "02/10/14 3:13 PM",
      "commitNameOld": "054f28552687e9b9859c0126e16a2066e20ead3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String targetQueueName) throws YarnException {\n     FiCaSchedulerApp app \u003d\n         getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n     String sourceQueueName \u003d app.getQueue().getQueueName();\n     LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n-    LeafQueue dest \u003d getAndCheckLeafQueue(targetQueueName);\n+    String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n+    LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n     // Validation check - ACLs, submission limits for user \u0026 queue\n     String user \u003d app.getUser();\n     try {\n-      dest.submitApplication(appId, user, targetQueueName);\n+      dest.submitApplication(appId, user, destQueueName);\n     } catch (AccessControlException e) {\n       throw new YarnException(e);\n     }\n     // Move all live containers\n     for (RMContainer rmContainer : app.getLiveContainers()) {\n       source.detachContainer(clusterResource, app, rmContainer);\n       // attach the Container to another queue\n       dest.attachContainer(clusterResource, app, rmContainer);\n     }\n     // Detach the application..\n     source.finishApplicationAttempt(app, sourceQueueName);\n     source.getParent().finishApplication(appId, app.getUser());\n     // Finish app \u0026 update metrics\n     app.move(dest);\n     // Submit to a new queue\n     dest.submitApplicationAttempt(app, user);\n     applications.get(appId).setQueue(dest);\n     LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n-        + sourceQueueName + \" to: \" + targetQueueName);\n+        + sourceQueueName + \" to: \" + destQueueName);\n     return targetQueueName;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    FiCaSchedulerApp app \u003d\n        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n    String sourceQueueName \u003d app.getQueue().getQueueName();\n    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n    String destQueueName \u003d handleMoveToPlanQueue(targetQueueName);\n    LeafQueue dest \u003d getAndCheckLeafQueue(destQueueName);\n    // Validation check - ACLs, submission limits for user \u0026 queue\n    String user \u003d app.getUser();\n    try {\n      dest.submitApplication(appId, user, destQueueName);\n    } catch (AccessControlException e) {\n      throw new YarnException(e);\n    }\n    // Move all live containers\n    for (RMContainer rmContainer : app.getLiveContainers()) {\n      source.detachContainer(clusterResource, app, rmContainer);\n      // attach the Container to another queue\n      dest.attachContainer(clusterResource, app, rmContainer);\n    }\n    // Detach the application..\n    source.finishApplicationAttempt(app, sourceQueueName);\n    source.getParent().finishApplication(appId, app.getUser());\n    // Finish app \u0026 update metrics\n    app.move(dest);\n    // Submit to a new queue\n    dest.submitApplicationAttempt(app, user);\n    applications.get(appId).setQueue(dest);\n    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n        + sourceQueueName + \" to: \" + destQueueName);\n    return targetQueueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7360cec692be5dcc3377ae5082fe22870caac96b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2378. Added support for moving applications across queues in CapacityScheduler. Contributed by Subramaniam Venkatraman Krishnan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 11:00 PM",
      "commitName": "7360cec692be5dcc3377ae5082fe22870caac96b",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+  public synchronized String moveApplication(ApplicationId appId,\n+      String targetQueueName) throws YarnException {\n+    FiCaSchedulerApp app \u003d\n+        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n+    String sourceQueueName \u003d app.getQueue().getQueueName();\n+    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n+    LeafQueue dest \u003d getAndCheckLeafQueue(targetQueueName);\n+    // Validation check - ACLs, submission limits for user \u0026 queue\n+    String user \u003d app.getUser();\n+    try {\n+      dest.submitApplication(appId, user, targetQueueName);\n+    } catch (AccessControlException e) {\n+      throw new YarnException(e);\n+    }\n+    // Move all live containers\n+    for (RMContainer rmContainer : app.getLiveContainers()) {\n+      source.detachContainer(clusterResource, app, rmContainer);\n+      // attach the Container to another queue\n+      dest.attachContainer(clusterResource, app, rmContainer);\n+    }\n+    // Detach the application..\n+    source.finishApplicationAttempt(app, sourceQueueName);\n+    source.getParent().finishApplication(appId, app.getUser());\n+    // Finish app \u0026 update metrics\n+    app.move(dest);\n+    // Submit to a new queue\n+    dest.submitApplicationAttempt(app, user);\n+    applications.get(appId).setQueue(dest);\n+    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n+        + sourceQueueName + \" to: \" + targetQueueName);\n+    return targetQueueName;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String targetQueueName) throws YarnException {\n    FiCaSchedulerApp app \u003d\n        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));\n    String sourceQueueName \u003d app.getQueue().getQueueName();\n    LeafQueue source \u003d getAndCheckLeafQueue(sourceQueueName);\n    LeafQueue dest \u003d getAndCheckLeafQueue(targetQueueName);\n    // Validation check - ACLs, submission limits for user \u0026 queue\n    String user \u003d app.getUser();\n    try {\n      dest.submitApplication(appId, user, targetQueueName);\n    } catch (AccessControlException e) {\n      throw new YarnException(e);\n    }\n    // Move all live containers\n    for (RMContainer rmContainer : app.getLiveContainers()) {\n      source.detachContainer(clusterResource, app, rmContainer);\n      // attach the Container to another queue\n      dest.attachContainer(clusterResource, app, rmContainer);\n    }\n    // Detach the application..\n    source.finishApplicationAttempt(app, sourceQueueName);\n    source.getParent().finishApplication(appId, app.getUser());\n    // Finish app \u0026 update metrics\n    app.move(dest);\n    // Submit to a new queue\n    dest.submitApplicationAttempt(app, user);\n    applications.get(appId).setQueue(dest);\n    LOG.info(\"App: \" + app.getApplicationId() + \" successfully moved from \"\n        + sourceQueueName + \" to: \" + targetQueueName);\n    return targetQueueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}