{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "init",
  "functionId": "init___args-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java",
  "functionStartLine": 209,
  "functionEndLine": 255,
  "numCommitsSeen": 2,
  "timeTaken": 430,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,47 @@\n+  public boolean init(String[] args) throws ParseException {\n+\n+    Options opts \u003d new Options();\n+    AMOptions.setOptions(opts);\n+    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n+\n+    if (args.length \u003d\u003d 0) {\n+      printUsage(opts);\n+      throw new IllegalArgumentException(\n+          \"No args specified for application master to initialize\");\n+    }\n+\n+    if (cliParser.hasOption(\"help\")) {\n+      printUsage(opts);\n+      return false;\n+    }\n+\n+    Map\u003cString, String\u003e envs \u003d System.getenv();\n+\n+    remoteStoragePath \u003d new Path(\n+        envs.get(DynoConstants.REMOTE_STORAGE_PATH_ENV));\n+    applicationAcls \u003d new HashMap\u003c\u003e();\n+    applicationAcls.put(ApplicationAccessType.VIEW_APP,\n+        envs.get(DynoConstants.JOB_ACL_VIEW_ENV));\n+    launchingUser \u003d envs.get(Environment.USER.name());\n+    if (envs.containsKey(DynoConstants.REMOTE_NN_RPC_ADDR_ENV)) {\n+      launchNameNode \u003d false;\n+      namenodeServiceRpcAddress \u003d envs\n+          .get(DynoConstants.REMOTE_NN_RPC_ADDR_ENV);\n+    } else {\n+      launchNameNode \u003d true;\n+      // namenodeServiceRpcAddress will be set in run() once properties are\n+      // available\n+    }\n+\n+    ContainerId containerId \u003d\n+        ContainerId.fromString(envs.get(Environment.CONTAINER_ID.name()));\n+    ApplicationAttemptId appAttemptID \u003d containerId.getApplicationAttemptId();\n+    LOG.info(\"Application master for app: appId\u003d{}, clusterTimestamp\u003d{}, \"\n+        + \"attemptId\u003d{}\", appAttemptID.getApplicationId().getId(),\n+        appAttemptID.getApplicationId().getClusterTimestamp(),\n+        appAttemptID.getAttemptId());\n+\n+    amOptions \u003d AMOptions.initFromParser(cliParser);\n+\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean init(String[] args) throws ParseException {\n\n    Options opts \u003d new Options();\n    AMOptions.setOptions(opts);\n    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n    if (args.length \u003d\u003d 0) {\n      printUsage(opts);\n      throw new IllegalArgumentException(\n          \"No args specified for application master to initialize\");\n    }\n\n    if (cliParser.hasOption(\"help\")) {\n      printUsage(opts);\n      return false;\n    }\n\n    Map\u003cString, String\u003e envs \u003d System.getenv();\n\n    remoteStoragePath \u003d new Path(\n        envs.get(DynoConstants.REMOTE_STORAGE_PATH_ENV));\n    applicationAcls \u003d new HashMap\u003c\u003e();\n    applicationAcls.put(ApplicationAccessType.VIEW_APP,\n        envs.get(DynoConstants.JOB_ACL_VIEW_ENV));\n    launchingUser \u003d envs.get(Environment.USER.name());\n    if (envs.containsKey(DynoConstants.REMOTE_NN_RPC_ADDR_ENV)) {\n      launchNameNode \u003d false;\n      namenodeServiceRpcAddress \u003d envs\n          .get(DynoConstants.REMOTE_NN_RPC_ADDR_ENV);\n    } else {\n      launchNameNode \u003d true;\n      // namenodeServiceRpcAddress will be set in run() once properties are\n      // available\n    }\n\n    ContainerId containerId \u003d\n        ContainerId.fromString(envs.get(Environment.CONTAINER_ID.name()));\n    ApplicationAttemptId appAttemptID \u003d containerId.getApplicationAttemptId();\n    LOG.info(\"Application master for app: appId\u003d{}, clusterTimestamp\u003d{}, \"\n        + \"attemptId\u003d{}\", appAttemptID.getApplicationId().getId(),\n        appAttemptID.getApplicationId().getClusterTimestamp(),\n        appAttemptID.getAttemptId());\n\n    amOptions \u003d AMOptions.initFromParser(cliParser);\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java"
    }
  }
}