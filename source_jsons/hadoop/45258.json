{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientImpl.java",
  "functionName": "addContainerRequest",
  "functionId": "addContainerRequest___req-T",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
  "functionStartLine": 539,
  "functionEndLine": 602,
  "numCommitsSeen": 75,
  "timeTaken": 4209,
  "changeHistory": [
    "aae629913cee0157c945a2c7384c7bf398f10616",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "19c743c1bbcaf3df8f1d63e557143c960a538c42",
    "51432779588fdd741b4840601f5db637ec783d92",
    "c1957fef29b07fea70938e971b30532a1e131fd0",
    "a5ec3d080978a67837946a991843a081ea712539",
    "3520039979188c4ca6e69654223b3ac794e8bf8f",
    "1fe8e2d7eed74453cfe172853881fafc360a10b6",
    "fe735f237c735a375d2bd194ed80ef9949fb1a68",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
    "02f87683e3febeef28de028dfedc1e12ea39abad",
    "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
    "0a61990855c23ebfa065145fa01084e84781b51c"
  ],
  "changeHistoryShort": {
    "aae629913cee0157c945a2c7384c7bf398f10616": "Ybodychange",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ybodychange",
    "19c743c1bbcaf3df8f1d63e557143c960a538c42": "Ybodychange",
    "51432779588fdd741b4840601f5db637ec783d92": "Ybodychange",
    "c1957fef29b07fea70938e971b30532a1e131fd0": "Ybodychange",
    "a5ec3d080978a67837946a991843a081ea712539": "Ybodychange",
    "3520039979188c4ca6e69654223b3ac794e8bf8f": "Ybodychange",
    "1fe8e2d7eed74453cfe172853881fafc360a10b6": "Ybodychange",
    "fe735f237c735a375d2bd194ed80ef9949fb1a68": "Ybodychange",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": "Ymultichange(Yfilerename,Ybodychange)",
    "02f87683e3febeef28de028dfedc1e12ea39abad": "Ybodychange",
    "3492f5eff1a22aba0d09d72a9dfd3353525c072e": "Ymultichange(Yparameterchange,Ybodychange)",
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba": "Ybodychange",
    "0a61990855c23ebfa065145fa01084e84781b51c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aae629913cee0157c945a2c7384c7bf398f10616": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7292. Retrospect Resource Profile Behavior for overriding capability. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 11:07 PM",
      "commitName": "aae629913cee0157c945a2c7384c7bf398f10616",
      "commitAuthor": "Sunil G",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "29d9e4d5814900d5c59d77fe05d32186d4ad9385",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.9,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,64 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n-    ProfileCapability profileCapability \u003d ProfileCapability\n-        .newInstance(req.getResourceProfile(), req.getCapability());\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n-    checkResourceProfile(req.getResourceProfile());\n+    Resource resource \u003d checkAndGetResourceProfile(req.getResourceProfile(),\n+        req.getCapability());\n \n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n     checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n         req.getPriority(), ANY_LIST, req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n     checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n         req.getPriority(), dedupedRacks, true);\n     checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n         req.getPriority(), inferredRacks, req.getRelaxLocality());\n     // check if the node label expression specified is valid\n     checkNodeLabelExpression(req);\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         addResourceRequest(req.getPriority(), node,\n-            req.getExecutionTypeRequest(), profileCapability, req, true,\n+            req.getExecutionTypeRequest(), resource, req, true,\n             req.getNodeLabelExpression());\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n-          profileCapability, req, true, req.getNodeLabelExpression());\n+          resource, req, true, req.getNodeLabelExpression());\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n-          profileCapability, req, req.getRelaxLocality(),\n+          resource, req, req.getRelaxLocality(),\n           req.getNodeLabelExpression());\n     }\n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n-        req.getExecutionTypeRequest(), profileCapability, req,\n+        req.getExecutionTypeRequest(), resource, req,\n         req.getRelaxLocality(), req.getNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    Resource resource \u003d checkAndGetResourceProfile(req.getResourceProfile(),\n        req.getCapability());\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), ANY_LIST, req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), inferredRacks, req.getRelaxLocality());\n    // check if the node label expression specified is valid\n    checkNodeLabelExpression(req);\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node,\n            req.getExecutionTypeRequest(), resource, req, true,\n            req.getNodeLabelExpression());\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          resource, req, true, req.getNodeLabelExpression());\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          resource, req, req.getRelaxLocality(),\n          req.getNodeLabelExpression());\n    }\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n        req.getExecutionTypeRequest(), resource, req,\n        req.getRelaxLocality(), req.getNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/07/17 12:03 PM",
      "commitNameOld": "4c40cd451cbdbce5d2b94ad0e7e3cc991c3439c5",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 49.89,
      "commitsBetweenForRepo": 442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,65 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n+    ProfileCapability profileCapability \u003d ProfileCapability\n+        .newInstance(req.getResourceProfile(), req.getCapability());\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n+    checkResourceProfile(req.getResourceProfile());\n+\n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n     checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n         req.getPriority(), ANY_LIST, req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n     checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n         req.getPriority(), dedupedRacks, true);\n     checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n         req.getPriority(), inferredRacks, req.getRelaxLocality());\n     // check if the node label expression specified is valid\n     checkNodeLabelExpression(req);\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         addResourceRequest(req.getPriority(), node,\n-            req.getExecutionTypeRequest(), req.getCapability(), req, true,\n+            req.getExecutionTypeRequest(), profileCapability, req, true,\n             req.getNodeLabelExpression());\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n-          req.getCapability(), req, true, req.getNodeLabelExpression());\n+          profileCapability, req, true, req.getNodeLabelExpression());\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n-          req.getCapability(), req, req.getRelaxLocality(),\n+          profileCapability, req, req.getRelaxLocality(),\n           req.getNodeLabelExpression());\n     }\n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n-        req.getExecutionTypeRequest(), req.getCapability(), req,\n+        req.getExecutionTypeRequest(), profileCapability, req,\n         req.getRelaxLocality(), req.getNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    ProfileCapability profileCapability \u003d ProfileCapability\n        .newInstance(req.getResourceProfile(), req.getCapability());\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    checkResourceProfile(req.getResourceProfile());\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), ANY_LIST, req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), inferredRacks, req.getRelaxLocality());\n    // check if the node label expression specified is valid\n    checkNodeLabelExpression(req);\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node,\n            req.getExecutionTypeRequest(), profileCapability, req, true,\n            req.getNodeLabelExpression());\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          profileCapability, req, true, req.getNodeLabelExpression());\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          profileCapability, req, req.getRelaxLocality(),\n          req.getNodeLabelExpression());\n    }\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n        req.getExecutionTypeRequest(), profileCapability, req,\n        req.getRelaxLocality(), req.getNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "19c743c1bbcaf3df8f1d63e557143c960a538c42": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4889. Changes in AMRMClient for identifying resource-requests explicitly. (Arun Suresh via wangda)\n",
      "commitDate": "26/08/16 5:14 PM",
      "commitName": "19c743c1bbcaf3df8f1d63e557143c960a538c42",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/06/16 9:42 AM",
      "commitNameOld": "51432779588fdd741b4840601f5db637ec783d92",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 75.31,
      "commitsBetweenForRepo": 650,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n-    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n-        req.getRelaxLocality());\n+    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n+        req.getPriority(), ANY_LIST, req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n-    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n-    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n-        req.getRelaxLocality());\n+    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n+        req.getPriority(), dedupedRacks, true);\n+    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n+        req.getPriority(), inferredRacks, req.getRelaxLocality());\n     // check if the node label expression specified is valid\n     checkNodeLabelExpression(req);\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         addResourceRequest(req.getPriority(), node,\n             req.getExecutionTypeRequest(), req.getCapability(), req, true,\n             req.getNodeLabelExpression());\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n           req.getCapability(), req, true, req.getNodeLabelExpression());\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n           req.getCapability(), req, req.getRelaxLocality(),\n           req.getNodeLabelExpression());\n     }\n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n         req.getExecutionTypeRequest(), req.getCapability(), req,\n         req.getRelaxLocality(), req.getNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), ANY_LIST, req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(),\n        req.getPriority(), inferredRacks, req.getRelaxLocality());\n    // check if the node label expression specified is valid\n    checkNodeLabelExpression(req);\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node,\n            req.getExecutionTypeRequest(), req.getCapability(), req, true,\n            req.getNodeLabelExpression());\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          req.getCapability(), req, true, req.getNodeLabelExpression());\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          req.getCapability(), req, req.getRelaxLocality(),\n          req.getNodeLabelExpression());\n    }\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n        req.getExecutionTypeRequest(), req.getCapability(), req,\n        req.getRelaxLocality(), req.getNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "51432779588fdd741b4840601f5db637ec783d92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5124. Modify AMRMClient to set the ExecutionType in the ResourceRequest. (asuresh)\n",
      "commitDate": "12/06/16 9:42 AM",
      "commitName": "51432779588fdd741b4840601f5db637ec783d92",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n     checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n         req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n     checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n     checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n         req.getRelaxLocality());\n     // check if the node label expression specified is valid\n     checkNodeLabelExpression(req);\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n-        addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n-            true, req.getNodeLabelExpression());\n+        addResourceRequest(req.getPriority(), node,\n+            req.getExecutionTypeRequest(), req.getCapability(), req, true,\n+            req.getNodeLabelExpression());\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n-      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n-          true, req.getNodeLabelExpression());\n+      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n+          req.getCapability(), req, true, req.getNodeLabelExpression());\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n-      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n-          req.getRelaxLocality(), req.getNodeLabelExpression());\n+      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n+          req.getCapability(), req, req.getRelaxLocality(),\n+          req.getNodeLabelExpression());\n     }\n-\n     // Off-switch\n-    addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n-        req.getCapability(), req, req.getRelaxLocality(), req.getNodeLabelExpression());\n+    addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n+        req.getExecutionTypeRequest(), req.getCapability(), req,\n+        req.getRelaxLocality(), req.getNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n        req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n        req.getRelaxLocality());\n    // check if the node label expression specified is valid\n    checkNodeLabelExpression(req);\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node,\n            req.getExecutionTypeRequest(), req.getCapability(), req, true,\n            req.getNodeLabelExpression());\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          req.getCapability(), req, true, req.getNodeLabelExpression());\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(),\n          req.getCapability(), req, req.getRelaxLocality(),\n          req.getNodeLabelExpression());\n    }\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY,\n        req.getExecutionTypeRequest(), req.getCapability(), req,\n        req.getRelaxLocality(), req.getNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "c1957fef29b07fea70938e971b30532a1e131fd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2694. Ensure only single node label specified in ResourceRequest. Contributed by Wangda Tan\n",
      "commitDate": "06/02/15 11:34 AM",
      "commitName": "c1957fef29b07fea70938e971b30532a1e131fd0",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/01/15 3:23 PM",
      "commitNameOld": "6d2bdbd7dab179dfb4f19bb41809e97f1db88c6b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.84,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n     checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n         req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n     checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n     checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n         req.getRelaxLocality());\n+    // check if the node label expression specified is valid\n+    checkNodeLabelExpression(req);\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n             true, req.getNodeLabelExpression());\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n           true, req.getNodeLabelExpression());\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n           req.getRelaxLocality(), req.getNodeLabelExpression());\n     }\n \n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n         req.getCapability(), req, req.getRelaxLocality(), req.getNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n        req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n        req.getRelaxLocality());\n    // check if the node label expression specified is valid\n    checkNodeLabelExpression(req);\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n            true, req.getNodeLabelExpression());\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n          true, req.getNodeLabelExpression());\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n          req.getRelaxLocality(), req.getNodeLabelExpression());\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n        req.getCapability(), req, req.getRelaxLocality(), req.getNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "a5ec3d080978a67837946a991843a081ea712539": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2501. Enhanced AMRMClient library to support requests against node labels. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 7:57 PM",
      "commitName": "a5ec3d080978a67837946a991843a081ea712539",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/09/14 10:16 AM",
      "commitNameOld": "a3d9934f916471a845dc679449d08f94dead550d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 22.4,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n     checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n         req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n     checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n     checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n         req.getRelaxLocality());\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n-            true);\n+            true, req.getNodeLabelExpression());\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n-          true);\n+          true, req.getNodeLabelExpression());\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n-          req.getRelaxLocality());\n+          req.getRelaxLocality(), req.getNodeLabelExpression());\n     }\n \n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n-                    req.getCapability(), req, req.getRelaxLocality());\n+        req.getCapability(), req, req.getRelaxLocality(), req.getNodeLabelExpression());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n        req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n        req.getRelaxLocality());\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n            true, req.getNodeLabelExpression());\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n          true, req.getNodeLabelExpression());\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n          req.getRelaxLocality(), req.getNodeLabelExpression());\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n        req.getCapability(), req, req.getRelaxLocality(), req.getNodeLabelExpression());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "3520039979188c4ca6e69654223b3ac794e8bf8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-927. Change ContainerRequest to not have more than 1 container count and remove StoreContainerRequest (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503960 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 5:47 PM",
      "commitName": "3520039979188c4ca6e69654223b3ac794e8bf8f",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "16/07/13 3:47 PM",
      "commitNameOld": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n     Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       dedupedRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n     inferredRacks.removeAll(dedupedRacks);\n \n     // check that specific and non-specific requests cannot be mixed within a\n     // priority\n     checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n         req.getRelaxLocality());\n     // check that specific rack cannot be mixed with specific node within a \n     // priority. If node and its rack are both specified then they must be \n     // in the same request.\n     // For explicitly requested racks, we set locality relaxation to true\n     checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n     checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n         req.getRelaxLocality());\n \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n-        addResourceRequest(req.getPriority(), node, req.getCapability(),\n-            req.getContainerCount(), req, true);\n+        addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n+            true);\n       }\n     }\n \n     for (String rack : dedupedRacks) {\n-      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n-          req.getContainerCount(), req, true);\n+      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n+          true);\n     }\n \n     // Ensure node requests are accompanied by requests for\n     // corresponding rack\n     for (String rack : inferredRacks) {\n-      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n-          req.getContainerCount(), req, req.getRelaxLocality());\n+      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n+          req.getRelaxLocality());\n     }\n \n     // Off-switch\n-    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n-        req.getContainerCount(), req, req.getRelaxLocality());\n+    addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n+                    req.getCapability(), req, req.getRelaxLocality());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n        req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n        req.getRelaxLocality());\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node, req.getCapability(), req,\n            true);\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n          true);\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(), req,\n          req.getRelaxLocality());\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, \n                    req.getCapability(), req, req.getRelaxLocality());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "1fe8e2d7eed74453cfe172853881fafc360a10b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-521. Augment AM - RM client module to be able to request containers only at specific locations (Sandy Ryza via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503526 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/13 5:23 PM",
      "commitName": "1fe8e2d7eed74453cfe172853881fafc360a10b6",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "15/07/13 10:13 AM",
      "commitNameOld": "fe735f237c735a375d2bd194ed80ef9949fb1a68",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,56 @@\n   public synchronized void addContainerRequest(T req) {\n     Preconditions.checkArgument(req !\u003d null,\n         \"Resource request can not be null.\");\n-    Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n+    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n-      allRacks.addAll(req.getRacks());\n-      if(req.getRacks().size() !\u003d allRacks.size()) {\n+      dedupedRacks.addAll(req.getRacks());\n+      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n-    allRacks.addAll(resolveRacks(req.getNodes()));\n-    \n+    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n+    inferredRacks.removeAll(dedupedRacks);\n+\n+    // check that specific and non-specific requests cannot be mixed within a\n+    // priority\n+    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n+        req.getRelaxLocality());\n+    // check that specific rack cannot be mixed with specific node within a \n+    // priority. If node and its rack are both specified then they must be \n+    // in the same request.\n+    // For explicitly requested racks, we set locality relaxation to true\n+    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n+    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n+        req.getRelaxLocality());\n+\n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n-        // Ensure node requests are accompanied by requests for\n-        // corresponding rack\n         addResourceRequest(req.getPriority(), node, req.getCapability(),\n-            req.getContainerCount(), req);\n+            req.getContainerCount(), req, true);\n       }\n     }\n \n-    for (String rack : allRacks) {\n+    for (String rack : dedupedRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getCapability(),\n-          req.getContainerCount(), req);\n+          req.getContainerCount(), req, true);\n+    }\n+\n+    // Ensure node requests are accompanied by requests for\n+    // corresponding rack\n+    for (String rack : inferredRacks) {\n+      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n+          req.getContainerCount(), req, req.getRelaxLocality());\n     }\n \n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n-        req.getContainerCount(), req);\n+        req.getContainerCount(), req, req.getRelaxLocality());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e dedupedRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      dedupedRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d dedupedRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    Set\u003cString\u003e inferredRacks \u003d resolveRacks(req.getNodes());\n    inferredRacks.removeAll(dedupedRacks);\n\n    // check that specific and non-specific requests cannot be mixed within a\n    // priority\n    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,\n        req.getRelaxLocality());\n    // check that specific rack cannot be mixed with specific node within a \n    // priority. If node and its rack are both specified then they must be \n    // in the same request.\n    // For explicitly requested racks, we set locality relaxation to true\n    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);\n    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,\n        req.getRelaxLocality());\n\n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        addResourceRequest(req.getPriority(), node, req.getCapability(),\n            req.getContainerCount(), req, true);\n      }\n    }\n\n    for (String rack : dedupedRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n          req.getContainerCount(), req, true);\n    }\n\n    // Ensure node requests are accompanied by requests for\n    // corresponding rack\n    for (String rack : inferredRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n          req.getContainerCount(), req, req.getRelaxLocality());\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n        req.getContainerCount(), req, req.getRelaxLocality());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "fe735f237c735a375d2bd194ed80ef9949fb1a68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-654. AMRMClient: Perform sanity checks for parameters of public methods (Xuan Gong via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/13 10:13 AM",
      "commitName": "fe735f237c735a375d2bd194ed80ef9949fb1a68",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "13/07/13 3:31 PM",
      "commitNameOld": "2adee634269588b85c351e8a3bd2c0c26ad2ba1b",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   public synchronized void addContainerRequest(T req) {\n+    Preconditions.checkArgument(req !\u003d null,\n+        \"Resource request can not be null.\");\n     Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n     if (req.getRacks() !\u003d null) {\n       allRacks.addAll(req.getRacks());\n       if(req.getRacks().size() !\u003d allRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n             + joiner.join(req.getRacks()));\n       }\n     }\n     allRacks.addAll(resolveRacks(req.getNodes()));\n     \n     if (req.getNodes() !\u003d null) {\n       HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n       if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n             + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         // Ensure node requests are accompanied by requests for\n         // corresponding rack\n         addResourceRequest(req.getPriority(), node, req.getCapability(),\n             req.getContainerCount(), req);\n       }\n     }\n \n     for (String rack : allRacks) {\n       addResourceRequest(req.getPriority(), rack, req.getCapability(),\n           req.getContainerCount(), req);\n     }\n \n     // Off-switch\n     addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n         req.getContainerCount(), req);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Preconditions.checkArgument(req !\u003d null,\n        \"Resource request can not be null.\");\n    Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      allRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d allRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    allRacks.addAll(resolveRacks(req.getNodes()));\n    \n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        // Ensure node requests are accompanied by requests for\n        // corresponding rack\n        addResourceRequest(req.getPriority(), node, req.getCapability(),\n            req.getContainerCount(), req);\n      }\n    }\n\n    for (String rack : allRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n          req.getContainerCount(), req);\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n        req.getContainerCount(), req);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 9:02 PM",
      "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 9:02 PM",
          "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 8:10 PM",
          "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public synchronized void addContainerRequest(T req) {\n     Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n-    if (req.racks !\u003d null) {\n-      allRacks.addAll(req.racks);\n-      if(req.racks.size() !\u003d allRacks.size()) {\n+    if (req.getRacks() !\u003d null) {\n+      allRacks.addAll(req.getRacks());\n+      if(req.getRacks().size() !\u003d allRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n-            + joiner.join(req.racks));\n+            + joiner.join(req.getRacks()));\n       }\n     }\n-    allRacks.addAll(resolveRacks(req.nodes));\n+    allRacks.addAll(resolveRacks(req.getNodes()));\n     \n-    if (req.nodes !\u003d null) {\n-      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.nodes);\n-      if(dedupedNodes.size() !\u003d req.nodes.size()) {\n+    if (req.getNodes() !\u003d null) {\n+      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n+      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n-            + joiner.join(req.nodes));        \n+            + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         // Ensure node requests are accompanied by requests for\n         // corresponding rack\n-        addResourceRequest(req.priority, node, req.capability,\n-            req.containerCount, req);\n+        addResourceRequest(req.getPriority(), node, req.getCapability(),\n+            req.getContainerCount(), req);\n       }\n     }\n \n     for (String rack : allRacks) {\n-      addResourceRequest(req.priority, rack, req.capability,\n-          req.containerCount, req);\n+      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n+          req.getContainerCount(), req);\n     }\n \n     // Off-switch\n-    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n-        req.containerCount, req);\n+    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n+        req.getContainerCount(), req);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      allRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d allRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    allRacks.addAll(resolveRacks(req.getNodes()));\n    \n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        // Ensure node requests are accompanied by requests for\n        // corresponding rack\n        addResourceRequest(req.getPriority(), node, req.getCapability(),\n            req.getContainerCount(), req);\n      }\n    }\n\n    for (String rack : allRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n          req.getContainerCount(), req);\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n        req.getContainerCount(), req);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 9:02 PM",
          "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 8:10 PM",
          "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public synchronized void addContainerRequest(T req) {\n     Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n-    if (req.racks !\u003d null) {\n-      allRacks.addAll(req.racks);\n-      if(req.racks.size() !\u003d allRacks.size()) {\n+    if (req.getRacks() !\u003d null) {\n+      allRacks.addAll(req.getRacks());\n+      if(req.getRacks().size() !\u003d allRacks.size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate racks: \"\n-            + joiner.join(req.racks));\n+            + joiner.join(req.getRacks()));\n       }\n     }\n-    allRacks.addAll(resolveRacks(req.nodes));\n+    allRacks.addAll(resolveRacks(req.getNodes()));\n     \n-    if (req.nodes !\u003d null) {\n-      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.nodes);\n-      if(dedupedNodes.size() !\u003d req.nodes.size()) {\n+    if (req.getNodes() !\u003d null) {\n+      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n+      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n         Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n         LOG.warn(\"ContainerRequest has duplicate nodes: \"\n-            + joiner.join(req.nodes));        \n+            + joiner.join(req.getNodes()));        \n       }\n       for (String node : dedupedNodes) {\n         // Ensure node requests are accompanied by requests for\n         // corresponding rack\n-        addResourceRequest(req.priority, node, req.capability,\n-            req.containerCount, req);\n+        addResourceRequest(req.getPriority(), node, req.getCapability(),\n+            req.getContainerCount(), req);\n       }\n     }\n \n     for (String rack : allRacks) {\n-      addResourceRequest(req.priority, rack, req.capability,\n-          req.containerCount, req);\n+      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n+          req.getContainerCount(), req);\n     }\n \n     // Off-switch\n-    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n-        req.containerCount, req);\n+    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n+        req.getContainerCount(), req);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n    if (req.getRacks() !\u003d null) {\n      allRacks.addAll(req.getRacks());\n      if(req.getRacks().size() !\u003d allRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.getRacks()));\n      }\n    }\n    allRacks.addAll(resolveRacks(req.getNodes()));\n    \n    if (req.getNodes() !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.getNodes());\n      if(dedupedNodes.size() !\u003d req.getNodes().size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.getNodes()));        \n      }\n      for (String node : dedupedNodes) {\n        // Ensure node requests are accompanied by requests for\n        // corresponding rack\n        addResourceRequest(req.getPriority(), node, req.getCapability(),\n            req.getContainerCount(), req);\n      }\n    }\n\n    for (String rack : allRacks) {\n      addResourceRequest(req.getPriority(), rack, req.getCapability(),\n          req.getContainerCount(), req);\n    }\n\n    // Off-switch\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getCapability(),\n        req.getContainerCount(), req);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "02f87683e3febeef28de028dfedc1e12ea39abad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-752. In AMRMClient, automatically add corresponding rack requests for requested nodes. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 3:11 PM",
      "commitName": "02f87683e3febeef28de028dfedc1e12ea39abad",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "15/06/13 8:11 PM",
      "commitNameOld": "769a0bd8314cd7317c083a9b74abf47242acb58c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,36 @@\n   public synchronized void addContainerRequest(T req) {\n-    // Create resource requests\n-    // add check for dup locations\n-    if (req.hosts !\u003d null) {\n-      for (String host : req.hosts) {\n-        addResourceRequest(req.priority, host, req.capability,\n+    Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n+    if (req.racks !\u003d null) {\n+      allRacks.addAll(req.racks);\n+      if(req.racks.size() !\u003d allRacks.size()) {\n+        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n+        LOG.warn(\"ContainerRequest has duplicate racks: \"\n+            + joiner.join(req.racks));\n+      }\n+    }\n+    allRacks.addAll(resolveRacks(req.nodes));\n+    \n+    if (req.nodes !\u003d null) {\n+      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.nodes);\n+      if(dedupedNodes.size() !\u003d req.nodes.size()) {\n+        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n+        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n+            + joiner.join(req.nodes));        \n+      }\n+      for (String node : dedupedNodes) {\n+        // Ensure node requests are accompanied by requests for\n+        // corresponding rack\n+        addResourceRequest(req.priority, node, req.capability,\n             req.containerCount, req);\n       }\n     }\n \n-    if (req.racks !\u003d null) {\n-      for (String rack : req.racks) {\n-        addResourceRequest(req.priority, rack, req.capability,\n-            req.containerCount, req);\n-      }\n+    for (String rack : allRacks) {\n+      addResourceRequest(req.priority, rack, req.capability,\n+          req.containerCount, req);\n     }\n \n     // Off-switch\n     addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n         req.containerCount, req);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(T req) {\n    Set\u003cString\u003e allRacks \u003d new HashSet\u003cString\u003e();\n    if (req.racks !\u003d null) {\n      allRacks.addAll(req.racks);\n      if(req.racks.size() !\u003d allRacks.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate racks: \"\n            + joiner.join(req.racks));\n      }\n    }\n    allRacks.addAll(resolveRacks(req.nodes));\n    \n    if (req.nodes !\u003d null) {\n      HashSet\u003cString\u003e dedupedNodes \u003d new HashSet\u003cString\u003e(req.nodes);\n      if(dedupedNodes.size() !\u003d req.nodes.size()) {\n        Joiner joiner \u003d Joiner.on(\u0027,\u0027);\n        LOG.warn(\"ContainerRequest has duplicate nodes: \"\n            + joiner.join(req.nodes));        \n      }\n      for (String node : dedupedNodes) {\n        // Ensure node requests are accompanied by requests for\n        // corresponding rack\n        addResourceRequest(req.priority, node, req.capability,\n            req.containerCount, req);\n      }\n    }\n\n    for (String rack : allRacks) {\n      addResourceRequest(req.priority, rack, req.capability,\n          req.containerCount, req);\n    }\n\n    // Off-switch\n    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n        req.containerCount, req);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "3492f5eff1a22aba0d09d72a9dfd3353525c072e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-660. Improve AMRMClient with matching requests (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 1:23 AM",
      "commitName": "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-660. Improve AMRMClient with matching requests (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/06/13 1:23 AM",
          "commitName": "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "08/05/13 10:32 PM",
          "commitNameOld": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 23.12,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-  public synchronized void addContainerRequest(ContainerRequest req) {\n+  public synchronized void addContainerRequest(T req) {\n     // Create resource requests\n-    if(req.hosts !\u003d null) {\n+    // add check for dup locations\n+    if (req.hosts !\u003d null) {\n       for (String host : req.hosts) {\n-        addResourceRequest(req.priority, host, req.capability, req.containerCount);\n+        addResourceRequest(req.priority, host, req.capability,\n+            req.containerCount, req);\n       }\n     }\n \n-    if(req.racks !\u003d null) {\n+    if (req.racks !\u003d null) {\n       for (String rack : req.racks) {\n-        addResourceRequest(req.priority, rack, req.capability, req.containerCount);\n+        addResourceRequest(req.priority, rack, req.capability,\n+            req.containerCount, req);\n       }\n     }\n \n     // Off-switch\n     addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n-        req.containerCount);\n+        req.containerCount, req);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void addContainerRequest(T req) {\n    // Create resource requests\n    // add check for dup locations\n    if (req.hosts !\u003d null) {\n      for (String host : req.hosts) {\n        addResourceRequest(req.priority, host, req.capability,\n            req.containerCount, req);\n      }\n    }\n\n    if (req.racks !\u003d null) {\n      for (String rack : req.racks) {\n        addResourceRequest(req.priority, rack, req.capability,\n            req.containerCount, req);\n      }\n    }\n\n    // Off-switch\n    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n        req.containerCount, req);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[req-ContainerRequest]",
            "newValue": "[req-T]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-660. Improve AMRMClient with matching requests (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/06/13 1:23 AM",
          "commitName": "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "08/05/13 10:32 PM",
          "commitNameOld": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 23.12,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-  public synchronized void addContainerRequest(ContainerRequest req) {\n+  public synchronized void addContainerRequest(T req) {\n     // Create resource requests\n-    if(req.hosts !\u003d null) {\n+    // add check for dup locations\n+    if (req.hosts !\u003d null) {\n       for (String host : req.hosts) {\n-        addResourceRequest(req.priority, host, req.capability, req.containerCount);\n+        addResourceRequest(req.priority, host, req.capability,\n+            req.containerCount, req);\n       }\n     }\n \n-    if(req.racks !\u003d null) {\n+    if (req.racks !\u003d null) {\n       for (String rack : req.racks) {\n-        addResourceRequest(req.priority, rack, req.capability, req.containerCount);\n+        addResourceRequest(req.priority, rack, req.capability,\n+            req.containerCount, req);\n       }\n     }\n \n     // Off-switch\n     addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n-        req.containerCount);\n+        req.containerCount, req);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void addContainerRequest(T req) {\n    // Create resource requests\n    // add check for dup locations\n    if (req.hosts !\u003d null) {\n      for (String host : req.hosts) {\n        addResourceRequest(req.priority, host, req.capability,\n            req.containerCount, req);\n      }\n    }\n\n    if (req.racks !\u003d null) {\n      for (String rack : req.racks) {\n        addResourceRequest(req.priority, rack, req.capability,\n            req.containerCount, req);\n      }\n    }\n\n    // Off-switch\n    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n        req.containerCount, req);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-450. Define value for * in the scheduling protocol (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1462271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/13 12:44 PM",
      "commitName": "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "20/03/13 1:44 PM",
      "commitNameOld": "1bd345d6e3855ab330963efd32e0fac102e61d1a",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 7.96,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public synchronized void addContainerRequest(ContainerRequest req) {\n     // Create resource requests\n     if(req.hosts !\u003d null) {\n       for (String host : req.hosts) {\n         addResourceRequest(req.priority, host, req.capability, req.containerCount);\n       }\n     }\n \n     if(req.racks !\u003d null) {\n       for (String rack : req.racks) {\n         addResourceRequest(req.priority, rack, req.capability, req.containerCount);\n       }\n     }\n \n     // Off-switch\n-    addResourceRequest(req.priority, ANY, req.capability, req.containerCount); \n+    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n+        req.containerCount);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(ContainerRequest req) {\n    // Create resource requests\n    if(req.hosts !\u003d null) {\n      for (String host : req.hosts) {\n        addResourceRequest(req.priority, host, req.capability, req.containerCount);\n      }\n    }\n\n    if(req.racks !\u003d null) {\n      for (String rack : req.racks) {\n        addResourceRequest(req.priority, rack, req.capability, req.containerCount);\n      }\n    }\n\n    // Off-switch\n    addResourceRequest(req.priority, ResourceRequest.ANY, req.capability,\n        req.containerCount);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "0a61990855c23ebfa065145fa01084e84781b51c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-103. Add a yarn AM-RM client module. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1428554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/01/13 11:11 AM",
      "commitName": "0a61990855c23ebfa065145fa01084e84781b51c",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,17 @@\n+  public synchronized void addContainerRequest(ContainerRequest req) {\n+    // Create resource requests\n+    if(req.hosts !\u003d null) {\n+      for (String host : req.hosts) {\n+        addResourceRequest(req.priority, host, req.capability, req.containerCount);\n+      }\n+    }\n+\n+    if(req.racks !\u003d null) {\n+      for (String rack : req.racks) {\n+        addResourceRequest(req.priority, rack, req.capability, req.containerCount);\n+      }\n+    }\n+\n+    // Off-switch\n+    addResourceRequest(req.priority, ANY, req.capability, req.containerCount); \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addContainerRequest(ContainerRequest req) {\n    // Create resource requests\n    if(req.hosts !\u003d null) {\n      for (String host : req.hosts) {\n        addResourceRequest(req.priority, host, req.capability, req.containerCount);\n      }\n    }\n\n    if(req.racks !\u003d null) {\n      for (String rack : req.racks) {\n        addResourceRequest(req.priority, rack, req.capability, req.containerCount);\n      }\n    }\n\n    // Off-switch\n    addResourceRequest(req.priority, ANY, req.capability, req.containerCount); \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java"
    }
  }
}