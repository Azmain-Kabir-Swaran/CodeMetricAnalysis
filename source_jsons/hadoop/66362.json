{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairSchedulerMetrics.java",
  "functionName": "registerQueueMetrics",
  "functionId": "registerQueueMetrics___queueName-String",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java",
  "functionStartLine": 170,
  "functionEndLine": 212,
  "numCommitsSeen": 7,
  "timeTaken": 1321,
  "changeHistory": [
    "46eb1033a86ca53e7b94202567aef8af2417bdf8"
  ],
  "changeHistoryShort": {
    "46eb1033a86ca53e7b94202567aef8af2417bdf8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "46eb1033a86ca53e7b94202567aef8af2417bdf8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6546. SLS is slow while loading 10k queues. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "17/10/17 4:04 PM",
      "commitName": "46eb1033a86ca53e7b94202567aef8af2417bdf8",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,43 @@\n+  protected void registerQueueMetrics(String queueName) {\n+    super.registerQueueMetrics(queueName);\n+\n+    FairScheduler fair \u003d (FairScheduler) scheduler;\n+    final FSQueue queue \u003d fair.getQueueManager().getQueue(queueName);\n+    registerQueueMetrics(queue, Metric.DEMAND);\n+    registerQueueMetrics(queue, Metric.USAGE);\n+    registerQueueMetrics(queue, Metric.MINSHARE);\n+    registerQueueMetrics(queue, Metric.FAIRSHARE);\n+\n+    metrics.register(\"variable.queue.\" + queueName + \".maxshare.memory\",\n+      new Gauge\u003cLong\u003e() {\n+        @Override\n+        public Long getValue() {\n+          if (! maxReset\n+              \u0026\u0026 SLSRunner.getSimulateInfoMap().containsKey(\"Number of nodes\")\n+              \u0026\u0026 SLSRunner.getSimulateInfoMap().containsKey(\"Node memory (MB)\")\n+              \u0026\u0026 SLSRunner.getSimulateInfoMap().containsKey(\"Node VCores\")) {\n+            int numNMs \u003d Integer.parseInt(SLSRunner.getSimulateInfoMap()\n+                .get(\"Number of nodes\").toString());\n+            int numMemoryMB \u003d Integer.parseInt(SLSRunner.getSimulateInfoMap()\n+                .get(\"Node memory (MB)\").toString());\n+            int numVCores \u003d Integer.parseInt(SLSRunner.getSimulateInfoMap()\n+                .get(\"Node VCores\").toString());\n+\n+            totalMemoryMB \u003d numNMs * numMemoryMB;\n+            totalVCores \u003d numNMs * numVCores;\n+            maxReset \u003d false;\n+          }\n+\n+          return Math.min(queue.getMaxShare().getMemorySize(), totalMemoryMB);\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.queue.\" + queueName + \".maxshare.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return Math.min(queue.getMaxShare().getVirtualCores(), totalVCores);\n+        }\n+      }\n+    );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerQueueMetrics(String queueName) {\n    super.registerQueueMetrics(queueName);\n\n    FairScheduler fair \u003d (FairScheduler) scheduler;\n    final FSQueue queue \u003d fair.getQueueManager().getQueue(queueName);\n    registerQueueMetrics(queue, Metric.DEMAND);\n    registerQueueMetrics(queue, Metric.USAGE);\n    registerQueueMetrics(queue, Metric.MINSHARE);\n    registerQueueMetrics(queue, Metric.FAIRSHARE);\n\n    metrics.register(\"variable.queue.\" + queueName + \".maxshare.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if (! maxReset\n              \u0026\u0026 SLSRunner.getSimulateInfoMap().containsKey(\"Number of nodes\")\n              \u0026\u0026 SLSRunner.getSimulateInfoMap().containsKey(\"Node memory (MB)\")\n              \u0026\u0026 SLSRunner.getSimulateInfoMap().containsKey(\"Node VCores\")) {\n            int numNMs \u003d Integer.parseInt(SLSRunner.getSimulateInfoMap()\n                .get(\"Number of nodes\").toString());\n            int numMemoryMB \u003d Integer.parseInt(SLSRunner.getSimulateInfoMap()\n                .get(\"Node memory (MB)\").toString());\n            int numVCores \u003d Integer.parseInt(SLSRunner.getSimulateInfoMap()\n                .get(\"Node VCores\").toString());\n\n            totalMemoryMB \u003d numNMs * numMemoryMB;\n            totalVCores \u003d numNMs * numVCores;\n            maxReset \u003d false;\n          }\n\n          return Math.min(queue.getMaxShare().getMemorySize(), totalMemoryMB);\n        }\n      }\n    );\n    metrics.register(\"variable.queue.\" + queueName + \".maxshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return Math.min(queue.getMaxShare().getVirtualCores(), totalVCores);\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java"
    }
  }
}