{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProxyUsers.java",
  "functionName": "authorize",
  "functionId": "authorize___user-UserGroupInformation__remoteAddress-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
  "functionStartLine": 95,
  "functionEndLine": 103,
  "numCommitsSeen": 27,
  "timeTaken": 1946,
  "changeHistory": [
    "4a4868e52360d7543909a7981b4606db939230ea",
    "1ff694081f28e1aadd955af79ac660bfd1c151e0",
    "dd7d032457f93bf600a1322a34873b1142303da2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "c04751b1b42658b60789209105b784a6f92670f8",
    "8970e93b01c88bd4d489cb8e4f915d47f2adee86",
    "9e2c3bf9ed2014d5be67c5c670fcfdb594046318",
    "1793e7d9094cd984ae402177c5935239059d74e8"
  ],
  "changeHistoryShort": {
    "4a4868e52360d7543909a7981b4606db939230ea": "Ymultichange(Ymodifierchange,Ybodychange)",
    "1ff694081f28e1aadd955af79ac660bfd1c151e0": "Ybodychange",
    "dd7d032457f93bf600a1322a34873b1142303da2": "Yparameterchange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "c04751b1b42658b60789209105b784a6f92670f8": "Ybodychange",
    "8970e93b01c88bd4d489cb8e4f915d47f2adee86": "Ybodychange",
    "9e2c3bf9ed2014d5be67c5c670fcfdb594046318": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "1793e7d9094cd984ae402177c5935239059d74e8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a4868e52360d7543909a7981b4606db939230ea": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10448. Support pluggable mechanism to specify proxy user settings (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 1:52 PM",
      "commitName": "4a4868e52360d7543909a7981b4606db939230ea",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10448. Support pluggable mechanism to specify proxy user settings (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/14 1:52 PM",
          "commitName": "4a4868e52360d7543909a7981b4606db939230ea",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "13/05/14 9:53 AM",
          "commitNameOld": "00779999721a8ff87a97f274646ab0bc33e0a557",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 16.17,
          "commitsBetweenForRepo": 94,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,9 @@\n-  public static synchronized void authorize(UserGroupInformation user, \n+  public static void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n-\n-    if(!init) {\n+    if (sip\u003d\u003dnull) {\n+      // In a race situation, It is possible for multiple threads to satisfy this condition.\n+      // The last assignment will prevail.\n       refreshSuperUserGroupsConfiguration(); \n     }\n-\n-    if (user.getRealUser() \u003d\u003d null) {\n-      return;\n-    }\n-    boolean userAuthorized \u003d false;\n-    boolean ipAuthorized \u003d false;\n-    UserGroupInformation superUser \u003d user.getRealUser();\n-    \n-    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n-        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n-\n-    if (isWildcardList(allowedUsers)) {\n-      userAuthorized \u003d true;\n-    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n-      if (allowedUsers.contains(user.getShortUserName())) {\n-        userAuthorized \u003d true;\n-      }\n-    }\n-\n-    if (!userAuthorized) {\n-      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n-          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n-      \n-      if (isWildcardList(allowedUserGroups)) {\n-        userAuthorized \u003d true;\n-      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n-        for (String group : user.getGroupNames()) {\n-          if (allowedUserGroups.contains(group)) {\n-            userAuthorized \u003d true;\n-            break;\n-          }\n-        }\n-      }\n-\n-      if (!userAuthorized) {\n-        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n-            + \" is not allowed to impersonate \" + user.getUserName());\n-      }\n-    }\n-    \n-    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n-        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n-   \n-    if (isWildcardList(ipList)) {\n-      ipAuthorized \u003d true;\n-    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n-      for (String allowedHost : ipList) {\n-        InetAddress hostAddr;\n-        try {\n-          hostAddr \u003d InetAddress.getByName(allowedHost);\n-        } catch (UnknownHostException e) {\n-          continue;\n-        }\n-        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n-          // Authorization is successful\n-          ipAuthorized \u003d true;\n-        }\n-      }\n-    }\n-    if (!ipAuthorized) {\n-      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n-          + superUser.getUserName() + \" from IP \" + remoteAddress);\n-    }\n+    sip.authorize(user, remoteAddress);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    if (sip\u003d\u003dnull) {\n      // In a race situation, It is possible for multiple threads to satisfy this condition.\n      // The last assignment will prevail.\n      refreshSuperUserGroupsConfiguration(); \n    }\n    sip.authorize(user, remoteAddress);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
          "extendedDetails": {
            "oldValue": "[public, static, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10448. Support pluggable mechanism to specify proxy user settings (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/14 1:52 PM",
          "commitName": "4a4868e52360d7543909a7981b4606db939230ea",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "13/05/14 9:53 AM",
          "commitNameOld": "00779999721a8ff87a97f274646ab0bc33e0a557",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 16.17,
          "commitsBetweenForRepo": 94,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,9 @@\n-  public static synchronized void authorize(UserGroupInformation user, \n+  public static void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n-\n-    if(!init) {\n+    if (sip\u003d\u003dnull) {\n+      // In a race situation, It is possible for multiple threads to satisfy this condition.\n+      // The last assignment will prevail.\n       refreshSuperUserGroupsConfiguration(); \n     }\n-\n-    if (user.getRealUser() \u003d\u003d null) {\n-      return;\n-    }\n-    boolean userAuthorized \u003d false;\n-    boolean ipAuthorized \u003d false;\n-    UserGroupInformation superUser \u003d user.getRealUser();\n-    \n-    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n-        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n-\n-    if (isWildcardList(allowedUsers)) {\n-      userAuthorized \u003d true;\n-    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n-      if (allowedUsers.contains(user.getShortUserName())) {\n-        userAuthorized \u003d true;\n-      }\n-    }\n-\n-    if (!userAuthorized) {\n-      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n-          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n-      \n-      if (isWildcardList(allowedUserGroups)) {\n-        userAuthorized \u003d true;\n-      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n-        for (String group : user.getGroupNames()) {\n-          if (allowedUserGroups.contains(group)) {\n-            userAuthorized \u003d true;\n-            break;\n-          }\n-        }\n-      }\n-\n-      if (!userAuthorized) {\n-        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n-            + \" is not allowed to impersonate \" + user.getUserName());\n-      }\n-    }\n-    \n-    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n-        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n-   \n-    if (isWildcardList(ipList)) {\n-      ipAuthorized \u003d true;\n-    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n-      for (String allowedHost : ipList) {\n-        InetAddress hostAddr;\n-        try {\n-          hostAddr \u003d InetAddress.getByName(allowedHost);\n-        } catch (UnknownHostException e) {\n-          continue;\n-        }\n-        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n-          // Authorization is successful\n-          ipAuthorized \u003d true;\n-        }\n-      }\n-    }\n-    if (!ipAuthorized) {\n-      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n-          + superUser.getUserName() + \" from IP \" + remoteAddress);\n-    }\n+    sip.authorize(user, remoteAddress);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    if (sip\u003d\u003dnull) {\n      // In a race situation, It is possible for multiple threads to satisfy this condition.\n      // The last assignment will prevail.\n      refreshSuperUserGroupsConfiguration(); \n    }\n    sip.authorize(user, remoteAddress);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
          "extendedDetails": {}
        }
      ]
    },
    "1ff694081f28e1aadd955af79ac660bfd1c151e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10467. Enable proxyuser specification to support list of users in addition to list of groups. (Contributed bt Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593162 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/14 5:45 PM",
      "commitName": "1ff694081f28e1aadd955af79ac660bfd1c151e0",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "06/05/14 3:38 PM",
      "commitNameOld": "2d5362073c61154280b7cd3ac082516113e703f2",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,70 @@\n   public static synchronized void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n \n     if(!init) {\n       refreshSuperUserGroupsConfiguration(); \n     }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n-    boolean groupAuthorized \u003d false;\n+    boolean userAuthorized \u003d false;\n     boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n-\n-    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n-        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n     \n-    if (isWildcardList(allowedUserGroups)) {\n-      groupAuthorized \u003d true;\n-    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n-      for (String group : user.getGroupNames()) {\n-        if (allowedUserGroups.contains(group)) {\n-          groupAuthorized \u003d true;\n-          break;\n-        }\n+    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n+        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n+\n+    if (isWildcardList(allowedUsers)) {\n+      userAuthorized \u003d true;\n+    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n+      if (allowedUsers.contains(user.getShortUserName())) {\n+        userAuthorized \u003d true;\n       }\n     }\n \n-    if (!groupAuthorized) {\n-      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n-          + \" is not allowed to impersonate \" + user.getUserName());\n+    if (!userAuthorized) {\n+      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n+          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n+      \n+      if (isWildcardList(allowedUserGroups)) {\n+        userAuthorized \u003d true;\n+      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n+        for (String group : user.getGroupNames()) {\n+          if (allowedUserGroups.contains(group)) {\n+            userAuthorized \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+\n+      if (!userAuthorized) {\n+        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n+            + \" is not allowed to impersonate \" + user.getUserName());\n+      }\n     }\n     \n     Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(superUser.getShortUserName()));\n    \n     if (isWildcardList(ipList)) {\n       ipAuthorized \u003d true;\n     } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n           ipAuthorized \u003d true;\n         }\n       }\n     }\n-    if(!ipAuthorized) {\n+    if (!ipAuthorized) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + superUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean userAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n    \n    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n\n    if (isWildcardList(allowedUsers)) {\n      userAuthorized \u003d true;\n    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n      if (allowedUsers.contains(user.getShortUserName())) {\n        userAuthorized \u003d true;\n      }\n    }\n\n    if (!userAuthorized) {\n      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n      \n      if (isWildcardList(allowedUserGroups)) {\n        userAuthorized \u003d true;\n      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n        for (String group : user.getGroupNames()) {\n          if (allowedUserGroups.contains(group)) {\n            userAuthorized \u003d true;\n            break;\n          }\n        }\n      }\n\n      if (!userAuthorized) {\n        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n            + \" is not allowed to impersonate \" + user.getUserName());\n      }\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n   \n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if (!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {}
    },
    "dd7d032457f93bf600a1322a34873b1142303da2": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-10499. Remove unused parameter from ProxyUsers.authorize(). Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1588098 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/04/14 4:09 PM",
      "commitName": "dd7d032457f93bf600a1322a34873b1142303da2",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "15/04/14 8:25 AM",
      "commitNameOld": "bf7b2125739ab0ecc896f93af66e2f7a639ec94b",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public static synchronized void authorize(UserGroupInformation user, \n-      String remoteAddress, Configuration newConf) throws AuthorizationException {\n+      String remoteAddress) throws AuthorizationException {\n \n     if(!init) {\n       refreshSuperUserGroupsConfiguration(); \n     }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n     boolean groupAuthorized \u003d false;\n     boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n \n     Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n         getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n     \n     if (isWildcardList(allowedUserGroups)) {\n       groupAuthorized \u003d true;\n     } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n       for (String group : user.getGroupNames()) {\n         if (allowedUserGroups.contains(group)) {\n           groupAuthorized \u003d true;\n           break;\n         }\n       }\n     }\n \n     if (!groupAuthorized) {\n       throw new AuthorizationException(\"User: \" + superUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n     \n     Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(superUser.getShortUserName()));\n    \n     if (isWildcardList(ipList)) {\n       ipAuthorized \u003d true;\n     } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n           ipAuthorized \u003d true;\n         }\n       }\n     }\n     if(!ipAuthorized) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + superUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (isWildcardList(allowedUserGroups)) {\n      groupAuthorized \u003d true;\n    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n   \n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {
        "oldValue": "[user-UserGroupInformation, remoteAddress-String, newConf-Configuration]",
        "newValue": "[user-UserGroupInformation, remoteAddress-String]"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (isWildcardList(allowedUserGroups)) {\n      groupAuthorized \u003d true;\n    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n   \n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (isWildcardList(allowedUserGroups)) {\n      groupAuthorized \u003d true;\n    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n   \n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ProxyUsers.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (isWildcardList(allowedUserGroups)) {\n      groupAuthorized \u003d true;\n    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n   \n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
        "newPath": "common/src/java/org/apache/hadoop/security/authorize/ProxyUsers.java"
      }
    },
    "c04751b1b42658b60789209105b784a6f92670f8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6995. Allow wildcards to be used in ProxyUsers configurations. Contributed by Todd Lipcon\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1056006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/11 10:45 AM",
      "commitName": "c04751b1b42658b60789209105b784a6f92670f8",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "22/06/10 4:04 PM",
      "commitNameOld": "8970e93b01c88bd4d489cb8e4f915d47f2adee86",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 197.82,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n   public static synchronized void authorize(UserGroupInformation user, \n       String remoteAddress, Configuration newConf) throws AuthorizationException {\n \n     if(!init) {\n       refreshSuperUserGroupsConfiguration(); \n     }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n     boolean groupAuthorized \u003d false;\n     boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n \n     Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n         getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n     \n-    if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n+    if (isWildcardList(allowedUserGroups)) {\n+      groupAuthorized \u003d true;\n+    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n       for (String group : user.getGroupNames()) {\n         if (allowedUserGroups.contains(group)) {\n           groupAuthorized \u003d true;\n           break;\n         }\n       }\n     }\n \n     if (!groupAuthorized) {\n       throw new AuthorizationException(\"User: \" + superUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n     \n     Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(superUser.getShortUserName()));\n-    \n-    if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n+   \n+    if (isWildcardList(ipList)) {\n+      ipAuthorized \u003d true;\n+    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n           ipAuthorized \u003d true;\n         }\n       }\n     }\n     if(!ipAuthorized) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + superUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (isWildcardList(allowedUserGroups)) {\n      groupAuthorized \u003d true;\n    } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n   \n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {}
    },
    "8970e93b01c88bd4d489cb8e4f915d47f2adee86": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6815. refreshSuperUserGroupsConfiguration should use server side configuration for the refresh\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@957074 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/06/10 4:04 PM",
      "commitName": "8970e93b01c88bd4d489cb8e4f915d47f2adee86",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "03/06/10 10:32 AM",
      "commitNameOld": "9e2c3bf9ed2014d5be67c5c670fcfdb594046318",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 19.23,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public static synchronized void authorize(UserGroupInformation user, \n       String remoteAddress, Configuration newConf) throws AuthorizationException {\n \n-    if(conf \u003d\u003d null) {\n-      refreshSuperUserGroupsConfiguration(newConf); \n+    if(!init) {\n+      refreshSuperUserGroupsConfiguration(); \n     }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n     boolean groupAuthorized \u003d false;\n     boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n \n     Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n         getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n     \n-    if (!allowedUserGroups.isEmpty()) {\n+    if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n       for (String group : user.getGroupNames()) {\n         if (allowedUserGroups.contains(group)) {\n           groupAuthorized \u003d true;\n           break;\n         }\n       }\n     }\n \n     if (!groupAuthorized) {\n       throw new AuthorizationException(\"User: \" + superUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n     \n     Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(superUser.getShortUserName()));\n     \n-    if (!ipList.isEmpty()) {\n+    if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n           ipAuthorized \u003d true;\n         }\n       }\n     }\n     if(!ipAuthorized) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + superUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(!init) {\n      refreshSuperUserGroupsConfiguration(); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n    \n    if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
      "extendedDetails": {}
    },
    "9e2c3bf9ed2014d5be67c5c670fcfdb594046318": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-6791.  Refresh for proxy superuser config\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951081 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/10 10:32 AM",
      "commitName": "9e2c3bf9ed2014d5be67c5c670fcfdb594046318",
      "commitAuthor": "Boris Shkolnik",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-6791.  Refresh for proxy superuser config\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951081 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/10 10:32 AM",
          "commitName": "9e2c3bf9ed2014d5be67c5c670fcfdb594046318",
          "commitAuthor": "Boris Shkolnik",
          "commitDateOld": "19/05/10 5:03 PM",
          "commitNameOld": "78778a158c1bc10793e52bd66d613a7645e0a1a4",
          "commitAuthorOld": "Boris Shkolnik",
          "daysBetweenCommits": 14.73,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,53 @@\n-  public static void authorize(UserGroupInformation user, String remoteAddress,\n-      Configuration conf) throws AuthorizationException {\n+  public static synchronized void authorize(UserGroupInformation user, \n+      String remoteAddress, Configuration newConf) throws AuthorizationException {\n+\n+    if(conf \u003d\u003d null) {\n+      refreshSuperUserGroupsConfiguration(newConf); \n+    }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n     boolean groupAuthorized \u003d false;\n+    boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n \n-    Collection\u003cString\u003e allowedUserGroups \u003d conf\n-        .getStringCollection(getProxySuperuserGroupConfKey(superUser\n-            .getShortUserName()));\n+    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n+        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n+    \n     if (!allowedUserGroups.isEmpty()) {\n       for (String group : user.getGroupNames()) {\n         if (allowedUserGroups.contains(group)) {\n           groupAuthorized \u003d true;\n           break;\n         }\n       }\n     }\n \n     if (!groupAuthorized) {\n       throw new AuthorizationException(\"User: \" + superUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n     \n-    Collection\u003cString\u003e ipList \u003d conf\n-        .getStringCollection(getProxySuperuserIpConfKey(superUser\n-            .getShortUserName()));\n+    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n+        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n+    \n     if (!ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n-          return;\n+          ipAuthorized \u003d true;\n         }\n       }\n     }\n-    throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n-        + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    if(!ipAuthorized) {\n+      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n+          + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(conf \u003d\u003d null) {\n      refreshSuperUserGroupsConfiguration(newConf); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (!allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n    \n    if (!ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
          "extendedDetails": {
            "oldValue": "[user-UserGroupInformation, remoteAddress-String, conf-Configuration]",
            "newValue": "[user-UserGroupInformation, remoteAddress-String, newConf-Configuration]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-6791.  Refresh for proxy superuser config\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951081 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/10 10:32 AM",
          "commitName": "9e2c3bf9ed2014d5be67c5c670fcfdb594046318",
          "commitAuthor": "Boris Shkolnik",
          "commitDateOld": "19/05/10 5:03 PM",
          "commitNameOld": "78778a158c1bc10793e52bd66d613a7645e0a1a4",
          "commitAuthorOld": "Boris Shkolnik",
          "daysBetweenCommits": 14.73,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,53 @@\n-  public static void authorize(UserGroupInformation user, String remoteAddress,\n-      Configuration conf) throws AuthorizationException {\n+  public static synchronized void authorize(UserGroupInformation user, \n+      String remoteAddress, Configuration newConf) throws AuthorizationException {\n+\n+    if(conf \u003d\u003d null) {\n+      refreshSuperUserGroupsConfiguration(newConf); \n+    }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n     boolean groupAuthorized \u003d false;\n+    boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n \n-    Collection\u003cString\u003e allowedUserGroups \u003d conf\n-        .getStringCollection(getProxySuperuserGroupConfKey(superUser\n-            .getShortUserName()));\n+    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n+        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n+    \n     if (!allowedUserGroups.isEmpty()) {\n       for (String group : user.getGroupNames()) {\n         if (allowedUserGroups.contains(group)) {\n           groupAuthorized \u003d true;\n           break;\n         }\n       }\n     }\n \n     if (!groupAuthorized) {\n       throw new AuthorizationException(\"User: \" + superUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n     \n-    Collection\u003cString\u003e ipList \u003d conf\n-        .getStringCollection(getProxySuperuserIpConfKey(superUser\n-            .getShortUserName()));\n+    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n+        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n+    \n     if (!ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n-          return;\n+          ipAuthorized \u003d true;\n         }\n       }\n     }\n-    throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n-        + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    if(!ipAuthorized) {\n+      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n+          + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(conf \u003d\u003d null) {\n      refreshSuperUserGroupsConfiguration(newConf); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (!allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n    \n    if (!ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[public, static, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6791.  Refresh for proxy superuser config\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951081 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/10 10:32 AM",
          "commitName": "9e2c3bf9ed2014d5be67c5c670fcfdb594046318",
          "commitAuthor": "Boris Shkolnik",
          "commitDateOld": "19/05/10 5:03 PM",
          "commitNameOld": "78778a158c1bc10793e52bd66d613a7645e0a1a4",
          "commitAuthorOld": "Boris Shkolnik",
          "daysBetweenCommits": 14.73,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,53 @@\n-  public static void authorize(UserGroupInformation user, String remoteAddress,\n-      Configuration conf) throws AuthorizationException {\n+  public static synchronized void authorize(UserGroupInformation user, \n+      String remoteAddress, Configuration newConf) throws AuthorizationException {\n+\n+    if(conf \u003d\u003d null) {\n+      refreshSuperUserGroupsConfiguration(newConf); \n+    }\n \n     if (user.getRealUser() \u003d\u003d null) {\n       return;\n     }\n     boolean groupAuthorized \u003d false;\n+    boolean ipAuthorized \u003d false;\n     UserGroupInformation superUser \u003d user.getRealUser();\n \n-    Collection\u003cString\u003e allowedUserGroups \u003d conf\n-        .getStringCollection(getProxySuperuserGroupConfKey(superUser\n-            .getShortUserName()));\n+    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n+        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n+    \n     if (!allowedUserGroups.isEmpty()) {\n       for (String group : user.getGroupNames()) {\n         if (allowedUserGroups.contains(group)) {\n           groupAuthorized \u003d true;\n           break;\n         }\n       }\n     }\n \n     if (!groupAuthorized) {\n       throw new AuthorizationException(\"User: \" + superUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n     \n-    Collection\u003cString\u003e ipList \u003d conf\n-        .getStringCollection(getProxySuperuserIpConfKey(superUser\n-            .getShortUserName()));\n+    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n+        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n+    \n     if (!ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n-          return;\n+          ipAuthorized \u003d true;\n         }\n       }\n     }\n-    throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n-        + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    if(!ipAuthorized) {\n+      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n+          + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void authorize(UserGroupInformation user, \n      String remoteAddress, Configuration newConf) throws AuthorizationException {\n\n    if(conf \u003d\u003d null) {\n      refreshSuperUserGroupsConfiguration(newConf); \n    }\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n        getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n    \n    if (!allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n    \n    if (!ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java",
          "extendedDetails": {}
        }
      ]
    },
    "1793e7d9094cd984ae402177c5935239059d74e8": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6510. Adds a way for superusers to impersonate other users in a secure environment. Contributed by Jitendra Nath Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@907549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/10 8:55 PM",
      "commitName": "1793e7d9094cd984ae402177c5935239059d74e8",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,46 @@\n+  public static void authorize(UserGroupInformation user, String remoteAddress,\n+      Configuration conf) throws AuthorizationException {\n+\n+    if (user.getRealUser() \u003d\u003d null) {\n+      return;\n+    }\n+    boolean groupAuthorized \u003d false;\n+    UserGroupInformation superUser \u003d user.getRealUser();\n+\n+    Collection\u003cString\u003e allowedUserGroups \u003d conf\n+        .getStringCollection(getProxySuperuserGroupConfKey(superUser\n+            .getShortUserName()));\n+    if (!allowedUserGroups.isEmpty()) {\n+      for (String group : user.getGroupNames()) {\n+        if (allowedUserGroups.contains(group)) {\n+          groupAuthorized \u003d true;\n+          break;\n+        }\n+      }\n+    }\n+\n+    if (!groupAuthorized) {\n+      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n+          + \" is not allowed to impersonate \" + user.getUserName());\n+    }\n+    \n+    Collection\u003cString\u003e ipList \u003d conf\n+        .getStringCollection(getProxySuperuserIpConfKey(superUser\n+            .getShortUserName()));\n+    if (!ipList.isEmpty()) {\n+      for (String allowedHost : ipList) {\n+        InetAddress hostAddr;\n+        try {\n+          hostAddr \u003d InetAddress.getByName(allowedHost);\n+        } catch (UnknownHostException e) {\n+          continue;\n+        }\n+        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n+          // Authorization is successful\n+          return;\n+        }\n+      }\n+    }\n+    throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n+        + superUser.getUserName() + \" from IP \" + remoteAddress);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void authorize(UserGroupInformation user, String remoteAddress,\n      Configuration conf) throws AuthorizationException {\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean groupAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUserGroups \u003d conf\n        .getStringCollection(getProxySuperuserGroupConfKey(superUser\n            .getShortUserName()));\n    if (!allowedUserGroups.isEmpty()) {\n      for (String group : user.getGroupNames()) {\n        if (allowedUserGroups.contains(group)) {\n          groupAuthorized \u003d true;\n          break;\n        }\n      }\n    }\n\n    if (!groupAuthorized) {\n      throw new AuthorizationException(\"User: \" + superUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n    \n    Collection\u003cString\u003e ipList \u003d conf\n        .getStringCollection(getProxySuperuserIpConfKey(superUser\n            .getShortUserName()));\n    if (!ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          return;\n        }\n      }\n    }\n    throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n        + superUser.getUserName() + \" from IP \" + remoteAddress);\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ProxyUsers.java"
    }
  }
}