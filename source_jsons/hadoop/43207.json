{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "addKeytabResourceIfSecure",
  "functionId": "addKeytabResourceIfSecure___fileSystem-SliderFileSystem__localResource-Map__String,LocalResource____service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1455,
  "functionEndLine": 1494,
  "numCommitsSeen": 66,
  "timeTaken": 5516,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "2664248797365761089a86d5bd59aa9ac3ebcc28",
    "58b97c79e34901938d59acc84ed48c1f9344996a",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ybodychange",
    "2664248797365761089a86d5bd59aa9ac3ebcc28": "Ybodychange",
    "58b97c79e34901938d59acc84ed48c1f9344996a": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/09/19 12:49 PM",
      "commitNameOld": "2e2e5401f297545181323b126a69eaa2239afb02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Service service)\n       throws IOException, YarnException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n     if (StringUtils.isEmpty(principalName)) {\n       LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n       return;\n     }\n     if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n       LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n       return;\n     }\n \n     URI keytabURI;\n     try {\n       keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n     } catch (URISyntaxException e) {\n       throw new YarnException(e);\n     }\n \n     if (\"file\".equals(keytabURI.getScheme())) {\n       LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n     } else {\n       Path keytabOnhdfs \u003d new Path(keytabURI);\n       if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n         LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n             + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n         return;\n       }\n       LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n-          LocalResourceType.FILE);\n+          LocalResourceType.FILE, LocalResourceVisibility.PRIVATE);\n       localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n           service.getName()), keytabRes);\n       LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n           + \"localization, uri \u003d \" + keytabOnhdfs);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Service service)\n      throws IOException, YarnException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty(principalName)) {\n      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n      return;\n    }\n    if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n      return;\n    }\n\n    URI keytabURI;\n    try {\n      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n    } catch (URISyntaxException e) {\n      throw new YarnException(e);\n    }\n\n    if (\"file\".equals(keytabURI.getScheme())) {\n      LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n    } else {\n      Path keytabOnhdfs \u003d new Path(keytabURI);\n      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n            + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n        return;\n      }\n      LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n          LocalResourceType.FILE, LocalResourceVisibility.PRIVATE);\n      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n          service.getName()), keytabRes);\n      LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n          + \"localization, uri \u003d \" + keytabOnhdfs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "2664248797365761089a86d5bd59aa9ac3ebcc28": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9002.  Improve keytab loading for YARN Service.\n            Contributed by Gour Saha\n",
      "commitDate": "09/11/18 10:52 PM",
      "commitName": "2664248797365761089a86d5bd59aa9ac3ebcc28",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/10/18 5:57 PM",
      "commitNameOld": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 14.25,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,40 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Service service)\n       throws IOException, YarnException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n     if (StringUtils.isEmpty(principalName)) {\n       LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n       return;\n     }\n     if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n       LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n       return;\n     }\n \n     URI keytabURI;\n     try {\n       keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n     } catch (URISyntaxException e) {\n       throw new YarnException(e);\n     }\n \n-    if (keytabURI.getScheme() !\u003d null) {\n-      switch (keytabURI.getScheme()) {\n-      case \"hdfs\":\n-        Path keytabOnhdfs \u003d new Path(keytabURI);\n-        if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n-          LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n-              + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n-          return;\n-        }\n-        LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n-            LocalResourceType.FILE);\n-        localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n-            service.getName()), keytabRes);\n-        LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n-            + \"localization, uri \u003d \" + keytabOnhdfs);\n-        break;\n-      case \"file\":\n-        LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n-        break;\n-      default:\n-        LOG.warn(\"Unsupported keytab URI scheme \" + keytabURI);\n-        break;\n-      }\n+    if (\"file\".equals(keytabURI.getScheme())) {\n+      LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n     } else {\n-      LOG.warn(\"Unsupported keytab URI scheme \" + keytabURI);\n+      Path keytabOnhdfs \u003d new Path(keytabURI);\n+      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n+        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n+            + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n+        return;\n+      }\n+      LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n+          LocalResourceType.FILE);\n+      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n+          service.getName()), keytabRes);\n+      LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n+          + \"localization, uri \u003d \" + keytabOnhdfs);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Service service)\n      throws IOException, YarnException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty(principalName)) {\n      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n      return;\n    }\n    if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n      return;\n    }\n\n    URI keytabURI;\n    try {\n      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n    } catch (URISyntaxException e) {\n      throw new YarnException(e);\n    }\n\n    if (\"file\".equals(keytabURI.getScheme())) {\n      LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n    } else {\n      Path keytabOnhdfs \u003d new Path(keytabURI);\n      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n            + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n        return;\n      }\n      LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n          LocalResourceType.FILE);\n      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n          service.getName()), keytabRes);\n      LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n          + \"localization, uri \u003d \" + keytabOnhdfs);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "58b97c79e34901938d59acc84ed48c1f9344996a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8236. Invalid kerberos principal file name cause NPE in native service. Contributed by Gour Saha.\n",
      "commitDate": "14/05/18 11:47 PM",
      "commitName": "58b97c79e34901938d59acc84ed48c1f9344996a",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/05/18 1:46 PM",
      "commitNameOld": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 13.42,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,50 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Service service)\n       throws IOException, YarnException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n     if (StringUtils.isEmpty(principalName)) {\n       LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n       return;\n     }\n-    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n+    if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n       LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n       return;\n     }\n \n     URI keytabURI;\n     try {\n       keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n     } catch (URISyntaxException e) {\n       throw new YarnException(e);\n     }\n \n-    switch (keytabURI.getScheme()) {\n-    case \"hdfs\":\n-      Path keytabOnhdfs \u003d new Path(keytabURI);\n-      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n-        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n-            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n-        return;\n+    if (keytabURI.getScheme() !\u003d null) {\n+      switch (keytabURI.getScheme()) {\n+      case \"hdfs\":\n+        Path keytabOnhdfs \u003d new Path(keytabURI);\n+        if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n+          LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n+              + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n+          return;\n+        }\n+        LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n+            LocalResourceType.FILE);\n+        localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n+            service.getName()), keytabRes);\n+        LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n+            + \"localization, uri \u003d \" + keytabOnhdfs);\n+        break;\n+      case \"file\":\n+        LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n+        break;\n+      default:\n+        LOG.warn(\"Unsupported keytab URI scheme \" + keytabURI);\n+        break;\n       }\n-      LocalResource keytabRes \u003d\n-          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n-      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n-          service.getName()), keytabRes);\n-      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n-          \"localization, uri \u003d \" + keytabOnhdfs);\n-      break;\n-    case \"file\":\n-      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n-      break;\n-    default:\n-      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n-      break;\n+    } else {\n+      LOG.warn(\"Unsupported keytab URI scheme \" + keytabURI);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Service service)\n      throws IOException, YarnException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty(principalName)) {\n      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n      return;\n    }\n    if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n      return;\n    }\n\n    URI keytabURI;\n    try {\n      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n    } catch (URISyntaxException e) {\n      throw new YarnException(e);\n    }\n\n    if (keytabURI.getScheme() !\u003d null) {\n      switch (keytabURI.getScheme()) {\n      case \"hdfs\":\n        Path keytabOnhdfs \u003d new Path(keytabURI);\n        if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n          LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \"\n              + principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n          return;\n        }\n        LocalResource keytabRes \u003d fileSystem.createAmResource(keytabOnhdfs,\n            LocalResourceType.FILE);\n        localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n            service.getName()), keytabRes);\n        LOG.info(\"Adding \" + service.getName() + \"\u0027s keytab for \"\n            + \"localization, uri \u003d \" + keytabOnhdfs);\n        break;\n      case \"file\":\n        LOG.info(\"Using a keytab from localhost: \" + keytabURI);\n        break;\n      default:\n        LOG.warn(\"Unsupported keytab URI scheme \" + keytabURI);\n        break;\n      }\n    } else {\n      LOG.warn(\"Unsupported keytab URI scheme \" + keytabURI);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
          "commitDate": "04/12/17 12:11 PM",
          "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/11/17 10:53 AM",
          "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.05,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,46 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n-      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n-      String serviceName) throws IOException, BadConfigException {\n+      Map\u003cString, LocalResource\u003e localResource, Service service)\n+      throws IOException, YarnException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n-    String keytabPreInstalledOnHost \u003d\n-        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n-    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n-      String amKeytabName \u003d\n-          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n-      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n-      Path keytabPath \u003d\n-          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n-      if (fileSystem.getFileSystem().exists(keytabPath)) {\n-        LocalResource keytabRes \u003d\n-            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n-        localResource\n-            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n-        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n-      } else {\n-        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n-        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n-          throw new BadConfigException(\"No keytab file was found at %s.\",\n-              keytabPath);\n-        } else {\n-          LOG.warn(\"The AM will be \"\n-              + \"started without a kerberos authenticated identity. \"\n-              + \"The service is therefore not guaranteed to remain \"\n-              + \"operational beyond 24 hours.\");\n-        }\n+    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n+    if (StringUtils.isEmpty(principalName)) {\n+      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n+      return;\n+    }\n+    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n+      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n+      return;\n+    }\n+\n+    URI keytabURI;\n+    try {\n+      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n+    } catch (URISyntaxException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    switch (keytabURI.getScheme()) {\n+    case \"hdfs\":\n+      Path keytabOnhdfs \u003d new Path(keytabURI);\n+      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n+        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n+            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n+        return;\n       }\n+      LocalResource keytabRes \u003d\n+          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n+      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n+          service.getName()), keytabRes);\n+      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n+          \"localization, uri \u003d \" + keytabOnhdfs);\n+      break;\n+    case \"file\":\n+      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n+      break;\n+    default:\n+      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Service service)\n      throws IOException, YarnException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty(principalName)) {\n      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n      return;\n    }\n    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n      return;\n    }\n\n    URI keytabURI;\n    try {\n      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n    } catch (URISyntaxException e) {\n      throw new YarnException(e);\n    }\n\n    switch (keytabURI.getScheme()) {\n    case \"hdfs\":\n      Path keytabOnhdfs \u003d new Path(keytabURI);\n      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n        return;\n      }\n      LocalResource keytabRes \u003d\n          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n          service.getName()), keytabRes);\n      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n          \"localization, uri \u003d \" + keytabOnhdfs);\n      break;\n    case \"file\":\n      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n      break;\n    default:\n      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-SliderFileSystem, localResource-Map\u003cString,LocalResource\u003e, conf-Configuration, serviceName-String]",
            "newValue": "[fileSystem-SliderFileSystem, localResource-Map\u003cString,LocalResource\u003e, service-Service]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
          "commitDate": "04/12/17 12:11 PM",
          "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/11/17 10:53 AM",
          "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.05,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,46 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n-      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n-      String serviceName) throws IOException, BadConfigException {\n+      Map\u003cString, LocalResource\u003e localResource, Service service)\n+      throws IOException, YarnException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n-    String keytabPreInstalledOnHost \u003d\n-        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n-    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n-      String amKeytabName \u003d\n-          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n-      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n-      Path keytabPath \u003d\n-          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n-      if (fileSystem.getFileSystem().exists(keytabPath)) {\n-        LocalResource keytabRes \u003d\n-            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n-        localResource\n-            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n-        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n-      } else {\n-        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n-        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n-          throw new BadConfigException(\"No keytab file was found at %s.\",\n-              keytabPath);\n-        } else {\n-          LOG.warn(\"The AM will be \"\n-              + \"started without a kerberos authenticated identity. \"\n-              + \"The service is therefore not guaranteed to remain \"\n-              + \"operational beyond 24 hours.\");\n-        }\n+    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n+    if (StringUtils.isEmpty(principalName)) {\n+      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n+      return;\n+    }\n+    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n+      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n+      return;\n+    }\n+\n+    URI keytabURI;\n+    try {\n+      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n+    } catch (URISyntaxException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    switch (keytabURI.getScheme()) {\n+    case \"hdfs\":\n+      Path keytabOnhdfs \u003d new Path(keytabURI);\n+      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n+        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n+            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n+        return;\n       }\n+      LocalResource keytabRes \u003d\n+          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n+      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n+          service.getName()), keytabRes);\n+      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n+          \"localization, uri \u003d \" + keytabOnhdfs);\n+      break;\n+    case \"file\":\n+      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n+      break;\n+    default:\n+      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Service service)\n      throws IOException, YarnException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty(principalName)) {\n      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n      return;\n    }\n    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n      return;\n    }\n\n    URI keytabURI;\n    try {\n      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n    } catch (URISyntaxException e) {\n      throw new YarnException(e);\n    }\n\n    switch (keytabURI.getScheme()) {\n    case \"hdfs\":\n      Path keytabOnhdfs \u003d new Path(keytabURI);\n      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n        return;\n      }\n      LocalResource keytabRes \u003d\n          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n          service.getName()), keytabRes);\n      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n          \"localization, uri \u003d \" + keytabOnhdfs);\n      break;\n    case \"file\":\n      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n      break;\n    default:\n      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[IOException, BadConfigException]",
            "newValue": "[IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
          "commitDate": "04/12/17 12:11 PM",
          "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "16/11/17 10:53 AM",
          "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.05,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,46 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n-      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n-      String serviceName) throws IOException, BadConfigException {\n+      Map\u003cString, LocalResource\u003e localResource, Service service)\n+      throws IOException, YarnException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n-    String keytabPreInstalledOnHost \u003d\n-        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n-    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n-      String amKeytabName \u003d\n-          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n-      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n-      Path keytabPath \u003d\n-          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n-      if (fileSystem.getFileSystem().exists(keytabPath)) {\n-        LocalResource keytabRes \u003d\n-            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n-        localResource\n-            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n-        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n-      } else {\n-        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n-        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n-          throw new BadConfigException(\"No keytab file was found at %s.\",\n-              keytabPath);\n-        } else {\n-          LOG.warn(\"The AM will be \"\n-              + \"started without a kerberos authenticated identity. \"\n-              + \"The service is therefore not guaranteed to remain \"\n-              + \"operational beyond 24 hours.\");\n-        }\n+    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n+    if (StringUtils.isEmpty(principalName)) {\n+      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n+      return;\n+    }\n+    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n+      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n+      return;\n+    }\n+\n+    URI keytabURI;\n+    try {\n+      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n+    } catch (URISyntaxException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    switch (keytabURI.getScheme()) {\n+    case \"hdfs\":\n+      Path keytabOnhdfs \u003d new Path(keytabURI);\n+      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n+        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n+            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n+        return;\n       }\n+      LocalResource keytabRes \u003d\n+          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n+      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n+          service.getName()), keytabRes);\n+      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n+          \"localization, uri \u003d \" + keytabOnhdfs);\n+      break;\n+    case \"file\":\n+      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n+      break;\n+    default:\n+      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Service service)\n      throws IOException, YarnException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String principalName \u003d service.getKerberosPrincipal().getPrincipalName();\n    if (StringUtils.isEmpty(principalName)) {\n      LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\n      return;\n    }\n    if(StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\n      LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\n      return;\n    }\n\n    URI keytabURI;\n    try {\n      keytabURI \u003d new URI(service.getKerberosPrincipal().getKeytab());\n    } catch (URISyntaxException e) {\n      throw new YarnException(e);\n    }\n\n    switch (keytabURI.getScheme()) {\n    case \"hdfs\":\n      Path keytabOnhdfs \u003d new Path(keytabURI);\n      if (!fileSystem.getFileSystem().exists(keytabOnhdfs)) {\n        LOG.warn(service.getName() + \"\u0027s keytab (principalName \u003d \" +\n            principalName + \") doesn\u0027t exist at: \" + keytabOnhdfs);\n        return;\n      }\n      LocalResource keytabRes \u003d\n          fileSystem.createAmResource(keytabOnhdfs, LocalResourceType.FILE);\n      localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION,\n          service.getName()), keytabRes);\n      LOG.debug(\"Adding \" + service.getName() + \"\u0027s keytab for \" +\n          \"localization, uri \u003d \" + keytabOnhdfs);\n      break;\n    case \"file\":\n      LOG.debug(\"Using a keytab from localhost: \" + keytabURI);\n      break;\n    default:\n      LOG.warn(\"Unsupported URI scheme \" + keytabURI);\n      break;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n-      String appName) throws IOException, BadConfigException {\n+      String serviceName) throws IOException, BadConfigException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String keytabPreInstalledOnHost \u003d\n         conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n     if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n       String amKeytabName \u003d\n           conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n       String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n       Path keytabPath \u003d\n-          fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n+          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n       if (fileSystem.getFileSystem().exists(keytabPath)) {\n         LocalResource keytabRes \u003d\n             fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n         localResource\n             .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n         LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n       } else {\n         LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n         if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n           throw new BadConfigException(\"No keytab file was found at %s.\",\n               keytabPath);\n         } else {\n           LOG.warn(\"The AM will be \"\n               + \"started without a kerberos authenticated identity. \"\n-              + \"The application is therefore not guaranteed to remain \"\n+              + \"The service is therefore not guaranteed to remain \"\n               + \"operational beyond 24 hours.\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n      String serviceName) throws IOException, BadConfigException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String keytabPreInstalledOnHost \u003d\n        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n      String amKeytabName \u003d\n          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n      Path keytabPath \u003d\n          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n      if (fileSystem.getFileSystem().exists(keytabPath)) {\n        LocalResource keytabRes \u003d\n            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n        localResource\n            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n      } else {\n        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n          throw new BadConfigException(\"No keytab file was found at %s.\",\n              keytabPath);\n        } else {\n          LOG.warn(\"The AM will be \"\n              + \"started without a kerberos authenticated identity. \"\n              + \"The service is therefore not guaranteed to remain \"\n              + \"operational beyond 24 hours.\");\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n-      String appName) throws IOException, BadConfigException {\n+      String serviceName) throws IOException, BadConfigException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String keytabPreInstalledOnHost \u003d\n         conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n     if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n       String amKeytabName \u003d\n           conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n       String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n       Path keytabPath \u003d\n-          fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n+          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n       if (fileSystem.getFileSystem().exists(keytabPath)) {\n         LocalResource keytabRes \u003d\n             fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n         localResource\n             .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n         LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n       } else {\n         LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n         if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n           throw new BadConfigException(\"No keytab file was found at %s.\",\n               keytabPath);\n         } else {\n           LOG.warn(\"The AM will be \"\n               + \"started without a kerberos authenticated identity. \"\n-              + \"The application is therefore not guaranteed to remain \"\n+              + \"The service is therefore not guaranteed to remain \"\n               + \"operational beyond 24 hours.\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n      String serviceName) throws IOException, BadConfigException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String keytabPreInstalledOnHost \u003d\n        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n      String amKeytabName \u003d\n          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n      Path keytabPath \u003d\n          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n      if (fileSystem.getFileSystem().exists(keytabPath)) {\n        LocalResource keytabRes \u003d\n            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n        localResource\n            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n      } else {\n        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n          throw new BadConfigException(\"No keytab file was found at %s.\",\n              keytabPath);\n        } else {\n          LOG.warn(\"The AM will be \"\n              + \"started without a kerberos authenticated identity. \"\n              + \"The service is therefore not guaranteed to remain \"\n              + \"operational beyond 24 hours.\");\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n-      String appName) throws IOException, BadConfigException {\n+      String serviceName) throws IOException, BadConfigException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String keytabPreInstalledOnHost \u003d\n         conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n     if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n       String amKeytabName \u003d\n           conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n       String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n       Path keytabPath \u003d\n-          fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n+          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n       if (fileSystem.getFileSystem().exists(keytabPath)) {\n         LocalResource keytabRes \u003d\n             fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n         localResource\n             .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n         LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n       } else {\n         LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n         if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n           throw new BadConfigException(\"No keytab file was found at %s.\",\n               keytabPath);\n         } else {\n           LOG.warn(\"The AM will be \"\n               + \"started without a kerberos authenticated identity. \"\n-              + \"The application is therefore not guaranteed to remain \"\n+              + \"The service is therefore not guaranteed to remain \"\n               + \"operational beyond 24 hours.\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n      String serviceName) throws IOException, BadConfigException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String keytabPreInstalledOnHost \u003d\n        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n      String amKeytabName \u003d\n          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n      Path keytabPath \u003d\n          fileSystem.buildKeytabPath(keytabDir, amKeytabName, serviceName);\n      if (fileSystem.getFileSystem().exists(keytabPath)) {\n        LocalResource keytabRes \u003d\n            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n        localResource\n            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n      } else {\n        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n          throw new BadConfigException(\"No keytab file was found at %s.\",\n              keytabPath);\n        } else {\n          LOG.warn(\"The AM will be \"\n              + \"started without a kerberos authenticated identity. \"\n              + \"The service is therefore not guaranteed to remain \"\n              + \"operational beyond 24 hours.\");\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-SliderFileSystem, localResource-Map\u003cString,LocalResource\u003e, conf-Configuration, appName-String]",
            "newValue": "[fileSystem-SliderFileSystem, localResource-Map\u003cString,LocalResource\u003e, conf-Configuration, serviceName-String]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n       Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n       String appName) throws IOException, BadConfigException {\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       return;\n     }\n     String keytabPreInstalledOnHost \u003d\n-        conf.get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);\n+        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n     if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n       String amKeytabName \u003d\n-          conf.get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);\n-      String keytabDir \u003d conf.get(SliderXmlConfKeys.KEY_HDFS_KEYTAB_DIR);\n+          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n+      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n       Path keytabPath \u003d\n           fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n       if (fileSystem.getFileSystem().exists(keytabPath)) {\n         LocalResource keytabRes \u003d\n             fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n         localResource\n-            .put(SliderKeys.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n+            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n         LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n       } else {\n         LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n-        if (conf.getBoolean(KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n+        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n           throw new BadConfigException(\"No keytab file was found at %s.\",\n               keytabPath);\n         } else {\n           LOG.warn(\"The AM will be \"\n               + \"started without a kerberos authenticated identity. \"\n               + \"The application is therefore not guaranteed to remain \"\n               + \"operational beyond 24 hours.\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n      String appName) throws IOException, BadConfigException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String keytabPreInstalledOnHost \u003d\n        conf.get(YarnServiceConf.KEY_AM_KEYTAB_LOCAL_PATH);\n    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n      String amKeytabName \u003d\n          conf.get(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_NAME);\n      String keytabDir \u003d conf.get(YarnServiceConf.KEY_HDFS_KEYTAB_DIR);\n      Path keytabPath \u003d\n          fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n      if (fileSystem.getFileSystem().exists(keytabPath)) {\n        LocalResource keytabRes \u003d\n            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n        localResource\n            .put(YarnServiceConstants.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n      } else {\n        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n        if (conf.getBoolean(YarnServiceConf.KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n          throw new BadConfigException(\"No keytab file was found at %s.\",\n              keytabPath);\n        } else {\n          LOG.warn(\"The AM will be \"\n              + \"started without a kerberos authenticated identity. \"\n              + \"The application is therefore not guaranteed to remain \"\n              + \"operational beyond 24 hours.\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,34 @@\n+  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n+      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n+      String appName) throws IOException, BadConfigException {\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      return;\n+    }\n+    String keytabPreInstalledOnHost \u003d\n+        conf.get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);\n+    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n+      String amKeytabName \u003d\n+          conf.get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);\n+      String keytabDir \u003d conf.get(SliderXmlConfKeys.KEY_HDFS_KEYTAB_DIR);\n+      Path keytabPath \u003d\n+          fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n+      if (fileSystem.getFileSystem().exists(keytabPath)) {\n+        LocalResource keytabRes \u003d\n+            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n+        localResource\n+            .put(SliderKeys.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n+        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n+      } else {\n+        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n+        if (conf.getBoolean(KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n+          throw new BadConfigException(\"No keytab file was found at %s.\",\n+              keytabPath);\n+        } else {\n+          LOG.warn(\"The AM will be \"\n+              + \"started without a kerberos authenticated identity. \"\n+              + \"The application is therefore not guaranteed to remain \"\n+              + \"operational beyond 24 hours.\");\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addKeytabResourceIfSecure(SliderFileSystem fileSystem,\n      Map\u003cString, LocalResource\u003e localResource, Configuration conf,\n      String appName) throws IOException, BadConfigException {\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      return;\n    }\n    String keytabPreInstalledOnHost \u003d\n        conf.get(SliderXmlConfKeys.KEY_AM_KEYTAB_LOCAL_PATH);\n    if (StringUtils.isEmpty(keytabPreInstalledOnHost)) {\n      String amKeytabName \u003d\n          conf.get(SliderXmlConfKeys.KEY_AM_LOGIN_KEYTAB_NAME);\n      String keytabDir \u003d conf.get(SliderXmlConfKeys.KEY_HDFS_KEYTAB_DIR);\n      Path keytabPath \u003d\n          fileSystem.buildKeytabPath(keytabDir, amKeytabName, appName);\n      if (fileSystem.getFileSystem().exists(keytabPath)) {\n        LocalResource keytabRes \u003d\n            fileSystem.createAmResource(keytabPath, LocalResourceType.FILE);\n        localResource\n            .put(SliderKeys.KEYTAB_DIR + \"/\" + amKeytabName, keytabRes);\n        LOG.info(\"Adding AM keytab on hdfs: \" + keytabPath);\n      } else {\n        LOG.warn(\"No keytab file was found at {}.\", keytabPath);\n        if (conf.getBoolean(KEY_AM_LOGIN_KEYTAB_REQUIRED, false)) {\n          throw new BadConfigException(\"No keytab file was found at %s.\",\n              keytabPath);\n        } else {\n          LOG.warn(\"The AM will be \"\n              + \"started without a kerberos authenticated identity. \"\n              + \"The application is therefore not guaranteed to remain \"\n              + \"operational beyond 24 hours.\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}