{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DF.java",
  "functionName": "parseExecResult",
  "functionId": "parseExecResult___lines-BufferedReader",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
  "functionStartLine": 148,
  "functionEndLine": 155,
  "numCommitsSeen": 14,
  "timeTaken": 965,
  "changeHistory": [
    "9397260411009a5688ef0600a8b96b963536ebdb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "ee6468b8a1c4d9d2714a80bc52bab34b336e43a0",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "9397260411009a5688ef0600a8b96b963536ebdb": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "ee6468b8a1c4d9d2714a80bc52bab34b336e43a0": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9397260411009a5688ef0600a8b96b963536ebdb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7487. DF should throw a more reasonable exception when mount cannot be determined. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449992 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 5:37 PM",
      "commitName": "9397260411009a5688ef0600a8b96b963536ebdb",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 185.02,
      "commitsBetweenForRepo": 898,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,8 @@\n   protected void parseExecResult(BufferedReader lines) throws IOException {\n-    lines.readLine();                         // skip headings\n-  \n+    output.clear();\n     String line \u003d lines.readLine();\n-    if (line \u003d\u003d null) {\n-      throw new IOException( \"Expecting a line not the end of stream\" );\n-    }\n-    StringTokenizer tokens \u003d\n-      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n-    \n-    this.filesystem \u003d tokens.nextToken();\n-    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n+    while (line !\u003d null) {\n+      output.add(line);\n       line \u003d lines.readLine();\n-      if (line \u003d\u003d null) {\n-        throw new IOException( \"Expecting a line not the end of stream\" );\n-      }\n-      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n     }\n-\n-    switch(getOSType()) {\n-      case OS_TYPE_AIX:\n-        Long.parseLong(tokens.nextToken()); // capacity\n-        Long.parseLong(tokens.nextToken()); // available\n-        Integer.parseInt(tokens.nextToken()); // pct used\n-        tokens.nextToken();\n-        tokens.nextToken();\n-        this.mount \u003d tokens.nextToken();\n-        break;\n-\n-      case OS_TYPE_WIN:\n-      case OS_TYPE_SOLARIS:\n-      case OS_TYPE_MAC:\n-      case OS_TYPE_UNIX:\n-      default:\n-        Long.parseLong(tokens.nextToken()); // capacity\n-        Long.parseLong(tokens.nextToken()); // used\n-        Long.parseLong(tokens.nextToken()); // available\n-        Integer.parseInt(tokens.nextToken()); // pct used\n-        this.mount \u003d tokens.nextToken();\n-        break;\n-   }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    output.clear();\n    String line \u003d lines.readLine();\n    while (line !\u003d null) {\n      output.add(line);\n      line \u003d lines.readLine();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    lines.readLine();                         // skip headings\n  \n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException( \"Expecting a line not the end of stream\" );\n    }\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    this.filesystem \u003d tokens.nextToken();\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      line \u003d lines.readLine();\n      if (line \u003d\u003d null) {\n        throw new IOException( \"Expecting a line not the end of stream\" );\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    switch(getOSType()) {\n      case OS_TYPE_AIX:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        tokens.nextToken();\n        tokens.nextToken();\n        this.mount \u003d tokens.nextToken();\n        break;\n\n      case OS_TYPE_WIN:\n      case OS_TYPE_SOLARIS:\n      case OS_TYPE_MAC:\n      case OS_TYPE_UNIX:\n      default:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // used\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        this.mount \u003d tokens.nextToken();\n        break;\n   }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    lines.readLine();                         // skip headings\n  \n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException( \"Expecting a line not the end of stream\" );\n    }\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    this.filesystem \u003d tokens.nextToken();\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      line \u003d lines.readLine();\n      if (line \u003d\u003d null) {\n        throw new IOException( \"Expecting a line not the end of stream\" );\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    switch(getOSType()) {\n      case OS_TYPE_AIX:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        tokens.nextToken();\n        tokens.nextToken();\n        this.mount \u003d tokens.nextToken();\n        break;\n\n      case OS_TYPE_WIN:\n      case OS_TYPE_SOLARIS:\n      case OS_TYPE_MAC:\n      case OS_TYPE_UNIX:\n      default:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // used\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        this.mount \u003d tokens.nextToken();\n        break;\n   }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/DF.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    lines.readLine();                         // skip headings\n  \n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException( \"Expecting a line not the end of stream\" );\n    }\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    this.filesystem \u003d tokens.nextToken();\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      line \u003d lines.readLine();\n      if (line \u003d\u003d null) {\n        throw new IOException( \"Expecting a line not the end of stream\" );\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    switch(getOSType()) {\n      case OS_TYPE_AIX:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        tokens.nextToken();\n        tokens.nextToken();\n        this.mount \u003d tokens.nextToken();\n        break;\n\n      case OS_TYPE_WIN:\n      case OS_TYPE_SOLARIS:\n      case OS_TYPE_MAC:\n      case OS_TYPE_UNIX:\n      default:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // used\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        this.mount \u003d tokens.nextToken();\n        break;\n   }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/DF.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/DF.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/DF.java"
      }
    },
    "ee6468b8a1c4d9d2714a80bc52bab34b336e43a0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-5958. Use JDK 1.6 File APIs in DF.java wherever possible. Contributed by Aaron Kimball.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@890576 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/09 4:10 PM",
      "commitName": "ee6468b8a1c4d9d2714a80bc52bab34b336e43a0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/09/09 5:26 PM",
      "commitNameOld": "6ef2552953322f086fa63a11385c55b36d124d0b",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 86.99,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   protected void parseExecResult(BufferedReader lines) throws IOException {\n     lines.readLine();                         // skip headings\n   \n     String line \u003d lines.readLine();\n     if (line \u003d\u003d null) {\n       throw new IOException( \"Expecting a line not the end of stream\" );\n     }\n     StringTokenizer tokens \u003d\n       new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n     \n     this.filesystem \u003d tokens.nextToken();\n     if (!tokens.hasMoreTokens()) {            // for long filesystem name\n       line \u003d lines.readLine();\n       if (line \u003d\u003d null) {\n         throw new IOException( \"Expecting a line not the end of stream\" );\n       }\n       tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n     }\n \n     switch(getOSType()) {\n       case OS_TYPE_AIX:\n-        this.capacity \u003d Long.parseLong(tokens.nextToken()) * 1024;\n-        this.available \u003d Long.parseLong(tokens.nextToken()) * 1024;\n-        this.percentUsed \u003d Integer.parseInt(tokens.nextToken());\n+        Long.parseLong(tokens.nextToken()); // capacity\n+        Long.parseLong(tokens.nextToken()); // available\n+        Integer.parseInt(tokens.nextToken()); // pct used\n         tokens.nextToken();\n         tokens.nextToken();\n         this.mount \u003d tokens.nextToken();\n-        this.used \u003d this.capacity - this.available;\n         break;\n \n       case OS_TYPE_WIN:\n       case OS_TYPE_SOLARIS:\n       case OS_TYPE_MAC:\n       case OS_TYPE_UNIX:\n       default:\n-        this.capacity \u003d Long.parseLong(tokens.nextToken()) * 1024;\n-        this.used \u003d Long.parseLong(tokens.nextToken()) * 1024;\n-        this.available \u003d Long.parseLong(tokens.nextToken()) * 1024;\n-        this.percentUsed \u003d Integer.parseInt(tokens.nextToken());\n+        Long.parseLong(tokens.nextToken()); // capacity\n+        Long.parseLong(tokens.nextToken()); // used\n+        Long.parseLong(tokens.nextToken()); // available\n+        Integer.parseInt(tokens.nextToken()); // pct used\n         this.mount \u003d tokens.nextToken();\n         break;\n    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    lines.readLine();                         // skip headings\n  \n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException( \"Expecting a line not the end of stream\" );\n    }\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    this.filesystem \u003d tokens.nextToken();\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      line \u003d lines.readLine();\n      if (line \u003d\u003d null) {\n        throw new IOException( \"Expecting a line not the end of stream\" );\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    switch(getOSType()) {\n      case OS_TYPE_AIX:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        tokens.nextToken();\n        tokens.nextToken();\n        this.mount \u003d tokens.nextToken();\n        break;\n\n      case OS_TYPE_WIN:\n      case OS_TYPE_SOLARIS:\n      case OS_TYPE_MAC:\n      case OS_TYPE_UNIX:\n      default:\n        Long.parseLong(tokens.nextToken()); // capacity\n        Long.parseLong(tokens.nextToken()); // used\n        Long.parseLong(tokens.nextToken()); // available\n        Integer.parseInt(tokens.nextToken()); // pct used\n        this.mount \u003d tokens.nextToken();\n        break;\n   }\n  }",
      "path": "src/java/org/apache/hadoop/fs/DF.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,43 @@\n+  protected void parseExecResult(BufferedReader lines) throws IOException {\n+    lines.readLine();                         // skip headings\n+  \n+    String line \u003d lines.readLine();\n+    if (line \u003d\u003d null) {\n+      throw new IOException( \"Expecting a line not the end of stream\" );\n+    }\n+    StringTokenizer tokens \u003d\n+      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n+    \n+    this.filesystem \u003d tokens.nextToken();\n+    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n+      line \u003d lines.readLine();\n+      if (line \u003d\u003d null) {\n+        throw new IOException( \"Expecting a line not the end of stream\" );\n+      }\n+      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n+    }\n+\n+    switch(getOSType()) {\n+      case OS_TYPE_AIX:\n+        this.capacity \u003d Long.parseLong(tokens.nextToken()) * 1024;\n+        this.available \u003d Long.parseLong(tokens.nextToken()) * 1024;\n+        this.percentUsed \u003d Integer.parseInt(tokens.nextToken());\n+        tokens.nextToken();\n+        tokens.nextToken();\n+        this.mount \u003d tokens.nextToken();\n+        this.used \u003d this.capacity - this.available;\n+        break;\n+\n+      case OS_TYPE_WIN:\n+      case OS_TYPE_SOLARIS:\n+      case OS_TYPE_MAC:\n+      case OS_TYPE_UNIX:\n+      default:\n+        this.capacity \u003d Long.parseLong(tokens.nextToken()) * 1024;\n+        this.used \u003d Long.parseLong(tokens.nextToken()) * 1024;\n+        this.available \u003d Long.parseLong(tokens.nextToken()) * 1024;\n+        this.percentUsed \u003d Integer.parseInt(tokens.nextToken());\n+        this.mount \u003d tokens.nextToken();\n+        break;\n+   }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    lines.readLine();                         // skip headings\n  \n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException( \"Expecting a line not the end of stream\" );\n    }\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    this.filesystem \u003d tokens.nextToken();\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      line \u003d lines.readLine();\n      if (line \u003d\u003d null) {\n        throw new IOException( \"Expecting a line not the end of stream\" );\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    switch(getOSType()) {\n      case OS_TYPE_AIX:\n        this.capacity \u003d Long.parseLong(tokens.nextToken()) * 1024;\n        this.available \u003d Long.parseLong(tokens.nextToken()) * 1024;\n        this.percentUsed \u003d Integer.parseInt(tokens.nextToken());\n        tokens.nextToken();\n        tokens.nextToken();\n        this.mount \u003d tokens.nextToken();\n        this.used \u003d this.capacity - this.available;\n        break;\n\n      case OS_TYPE_WIN:\n      case OS_TYPE_SOLARIS:\n      case OS_TYPE_MAC:\n      case OS_TYPE_UNIX:\n      default:\n        this.capacity \u003d Long.parseLong(tokens.nextToken()) * 1024;\n        this.used \u003d Long.parseLong(tokens.nextToken()) * 1024;\n        this.available \u003d Long.parseLong(tokens.nextToken()) * 1024;\n        this.percentUsed \u003d Integer.parseInt(tokens.nextToken());\n        this.mount \u003d tokens.nextToken();\n        break;\n   }\n  }",
      "path": "src/java/org/apache/hadoop/fs/DF.java"
    }
  }
}