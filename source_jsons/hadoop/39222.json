{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "checkQueueLabelExpression",
  "functionId": "checkQueueLabelExpression___queueLabels-Set__String____labelExpression-String__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 533,
  "functionEndLine": 554,
  "numCommitsSeen": 73,
  "timeTaken": 3817,
  "changeHistory": [
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1"
  ],
  "changeHistoryShort": {
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e": "Ybodychange",
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1": "Ymultichange(Yparameterchange,Ybodychange)",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4465. SchedulerUtils#validateRequest for Label check should happen only when nodelabel enabled. (Bibin A Chundatt via wangda)\n",
      "commitDate": "08/03/16 2:27 PM",
      "commitName": "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/01/16 8:53 PM",
      "commitNameOld": "9e792da01419998c2ebfafd7161070150d85d3ac",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 56.73,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,22 @@\n   public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n       String labelExpression, RMContext rmContext) {\n     // if label expression is empty, we can allocate container on any node\n     if (labelExpression \u003d\u003d null) {\n       return true;\n     }\n     for (String str : labelExpression.split(\"\u0026\u0026\")) {\n       str \u003d str.trim();\n       if (!str.trim().isEmpty()) {\n         // check queue label\n         if (queueLabels \u003d\u003d null) {\n           return false; \n         } else {\n           if (!queueLabels.contains(str)\n               \u0026\u0026 !queueLabels.contains(RMNodeLabelsManager.ANY)) {\n             return false;\n           }\n         }\n-        \n-        // check node label manager contains this label\n-        if (null !\u003d rmContext) {\n-          RMNodeLabelsManager nlm \u003d rmContext.getNodeLabelManager();\n-          if (nlm !\u003d null \u0026\u0026 !nlm.containsNodeLabel(str)) {\n-            return false;\n-          }\n-        }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n      String labelExpression, RMContext rmContext) {\n    // if label expression is empty, we can allocate container on any node\n    if (labelExpression \u003d\u003d null) {\n      return true;\n    }\n    for (String str : labelExpression.split(\"\u0026\u0026\")) {\n      str \u003d str.trim();\n      if (!str.trim().isEmpty()) {\n        // check queue label\n        if (queueLabels \u003d\u003d null) {\n          return false; \n        } else {\n          if (!queueLabels.contains(str)\n              \u0026\u0026 !queueLabels.contains(RMNodeLabelsManager.ANY)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
      "commitDate": "07/05/15 5:35 PM",
      "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
          "commitDate": "07/05/15 5:35 PM",
          "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 5:11 PM",
          "commitNameOld": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 20.02,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,30 @@\n   public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n-      String labelExpression) {\n-    if (queueLabels !\u003d null \u0026\u0026 queueLabels.contains(RMNodeLabelsManager.ANY)) {\n-      return true;\n-    }\n+      String labelExpression, RMContext rmContext) {\n     // if label expression is empty, we can allocate container on any node\n     if (labelExpression \u003d\u003d null) {\n       return true;\n     }\n     for (String str : labelExpression.split(\"\u0026\u0026\")) {\n-      if (!str.trim().isEmpty()\n-          \u0026\u0026 (queueLabels \u003d\u003d null || !queueLabels.contains(str.trim()))) {\n-        return false;\n+      str \u003d str.trim();\n+      if (!str.trim().isEmpty()) {\n+        // check queue label\n+        if (queueLabels \u003d\u003d null) {\n+          return false; \n+        } else {\n+          if (!queueLabels.contains(str)\n+              \u0026\u0026 !queueLabels.contains(RMNodeLabelsManager.ANY)) {\n+            return false;\n+          }\n+        }\n+        \n+        // check node label manager contains this label\n+        if (null !\u003d rmContext) {\n+          RMNodeLabelsManager nlm \u003d rmContext.getNodeLabelManager();\n+          if (nlm !\u003d null \u0026\u0026 !nlm.containsNodeLabel(str)) {\n+            return false;\n+          }\n+        }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n      String labelExpression, RMContext rmContext) {\n    // if label expression is empty, we can allocate container on any node\n    if (labelExpression \u003d\u003d null) {\n      return true;\n    }\n    for (String str : labelExpression.split(\"\u0026\u0026\")) {\n      str \u003d str.trim();\n      if (!str.trim().isEmpty()) {\n        // check queue label\n        if (queueLabels \u003d\u003d null) {\n          return false; \n        } else {\n          if (!queueLabels.contains(str)\n              \u0026\u0026 !queueLabels.contains(RMNodeLabelsManager.ANY)) {\n            return false;\n          }\n        }\n        \n        // check node label manager contains this label\n        if (null !\u003d rmContext) {\n          RMNodeLabelsManager nlm \u003d rmContext.getNodeLabelManager();\n          if (nlm !\u003d null \u0026\u0026 !nlm.containsNodeLabel(str)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[queueLabels-Set\u003cString\u003e, labelExpression-String]",
            "newValue": "[queueLabels-Set\u003cString\u003e, labelExpression-String, rmContext-RMContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
          "commitDate": "07/05/15 5:35 PM",
          "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 5:11 PM",
          "commitNameOld": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 20.02,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,30 @@\n   public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n-      String labelExpression) {\n-    if (queueLabels !\u003d null \u0026\u0026 queueLabels.contains(RMNodeLabelsManager.ANY)) {\n-      return true;\n-    }\n+      String labelExpression, RMContext rmContext) {\n     // if label expression is empty, we can allocate container on any node\n     if (labelExpression \u003d\u003d null) {\n       return true;\n     }\n     for (String str : labelExpression.split(\"\u0026\u0026\")) {\n-      if (!str.trim().isEmpty()\n-          \u0026\u0026 (queueLabels \u003d\u003d null || !queueLabels.contains(str.trim()))) {\n-        return false;\n+      str \u003d str.trim();\n+      if (!str.trim().isEmpty()) {\n+        // check queue label\n+        if (queueLabels \u003d\u003d null) {\n+          return false; \n+        } else {\n+          if (!queueLabels.contains(str)\n+              \u0026\u0026 !queueLabels.contains(RMNodeLabelsManager.ANY)) {\n+            return false;\n+          }\n+        }\n+        \n+        // check node label manager contains this label\n+        if (null !\u003d rmContext) {\n+          RMNodeLabelsManager nlm \u003d rmContext.getNodeLabelManager();\n+          if (nlm !\u003d null \u0026\u0026 !nlm.containsNodeLabel(str)) {\n+            return false;\n+          }\n+        }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n      String labelExpression, RMContext rmContext) {\n    // if label expression is empty, we can allocate container on any node\n    if (labelExpression \u003d\u003d null) {\n      return true;\n    }\n    for (String str : labelExpression.split(\"\u0026\u0026\")) {\n      str \u003d str.trim();\n      if (!str.trim().isEmpty()) {\n        // check queue label\n        if (queueLabels \u003d\u003d null) {\n          return false; \n        } else {\n          if (!queueLabels.contains(str)\n              \u0026\u0026 !queueLabels.contains(RMNodeLabelsManager.ANY)) {\n            return false;\n          }\n        }\n        \n        // check node label manager contains this label\n        if (null !\u003d rmContext) {\n          RMNodeLabelsManager nlm \u003d rmContext.getNodeLabelManager();\n          if (nlm !\u003d null \u0026\u0026 !nlm.containsNodeLabel(str)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n+      String labelExpression) {\n+    if (queueLabels !\u003d null \u0026\u0026 queueLabels.contains(RMNodeLabelsManager.ANY)) {\n+      return true;\n+    }\n+    // if label expression is empty, we can allocate container on any node\n+    if (labelExpression \u003d\u003d null) {\n+      return true;\n+    }\n+    for (String str : labelExpression.split(\"\u0026\u0026\")) {\n+      if (!str.trim().isEmpty()\n+          \u0026\u0026 (queueLabels \u003d\u003d null || !queueLabels.contains(str.trim()))) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean checkQueueLabelExpression(Set\u003cString\u003e queueLabels,\n      String labelExpression) {\n    if (queueLabels !\u003d null \u0026\u0026 queueLabels.contains(RMNodeLabelsManager.ANY)) {\n      return true;\n    }\n    // if label expression is empty, we can allocate container on any node\n    if (labelExpression \u003d\u003d null) {\n      return true;\n    }\n    for (String str : labelExpression.split(\"\u0026\u0026\")) {\n      if (!str.trim().isEmpty()\n          \u0026\u0026 (queueLabels \u003d\u003d null || !queueLabels.contains(str.trim()))) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}