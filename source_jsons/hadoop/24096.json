{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalDistributedCacheManager.java",
  "functionName": "makeClassLoader",
  "functionId": "makeClassLoader___parent-ClassLoader(modifiers-final)",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
  "functionStartLine": 228,
  "functionEndLine": 245,
  "numCommitsSeen": 14,
  "timeTaken": 1839,
  "changeHistory": [
    "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
    "de09716fb8782596ccf44a3cfc90ac3c4f288667",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077"
  ],
  "changeHistoryShort": {
    "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7": "Ymultichange(Ymodifierchange,Ybodychange)",
    "de09716fb8782596ccf44a3cfc90ac3c4f288667": "Ybodychange",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7094. LocalDistributedCacheManager leaves classloaders open, which leaks FDs. Contributed by Adam Szita.\n",
      "commitDate": "17/05/18 11:16 AM",
      "commitName": "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
      "commitAuthor": "Miklos Szegedi",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-7094. LocalDistributedCacheManager leaves classloaders open, which leaks FDs. Contributed by Adam Szita.\n",
          "commitDate": "17/05/18 11:16 AM",
          "commitName": "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "26/03/18 2:55 PM",
          "commitNameOld": "edb202e4934be750e43103c047752b97c5eafc94",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 51.85,
          "commitsBetweenForRepo": 861,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,18 @@\n-  public ClassLoader makeClassLoader(final ClassLoader parent)\n+  public synchronized ClassLoader makeClassLoader(final ClassLoader parent)\n       throws MalformedURLException {\n+    if (classLoaderCreated !\u003d null) {\n+      throw new IllegalStateException(\"A classloader was already created\");\n+    }\n     final URL[] urls \u003d new URL[localClasspaths.size()];\n     for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n       urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n       LOG.info(urls[i].toString());\n     }\n     return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n       @Override\n       public ClassLoader run() {\n-        return new URLClassLoader(urls, parent);\n+        classLoaderCreated \u003d new URLClassLoader(urls, parent);\n+        return classLoaderCreated;\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ClassLoader makeClassLoader(final ClassLoader parent)\n      throws MalformedURLException {\n    if (classLoaderCreated !\u003d null) {\n      throw new IllegalStateException(\"A classloader was already created\");\n    }\n    final URL[] urls \u003d new URL[localClasspaths.size()];\n    for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n      urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n      LOG.info(urls[i].toString());\n    }\n    return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n      @Override\n      public ClassLoader run() {\n        classLoaderCreated \u003d new URLClassLoader(urls, parent);\n        return classLoaderCreated;\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7094. LocalDistributedCacheManager leaves classloaders open, which leaks FDs. Contributed by Adam Szita.\n",
          "commitDate": "17/05/18 11:16 AM",
          "commitName": "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "26/03/18 2:55 PM",
          "commitNameOld": "edb202e4934be750e43103c047752b97c5eafc94",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 51.85,
          "commitsBetweenForRepo": 861,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,18 @@\n-  public ClassLoader makeClassLoader(final ClassLoader parent)\n+  public synchronized ClassLoader makeClassLoader(final ClassLoader parent)\n       throws MalformedURLException {\n+    if (classLoaderCreated !\u003d null) {\n+      throw new IllegalStateException(\"A classloader was already created\");\n+    }\n     final URL[] urls \u003d new URL[localClasspaths.size()];\n     for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n       urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n       LOG.info(urls[i].toString());\n     }\n     return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n       @Override\n       public ClassLoader run() {\n-        return new URLClassLoader(urls, parent);\n+        classLoaderCreated \u003d new URLClassLoader(urls, parent);\n+        return classLoaderCreated;\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ClassLoader makeClassLoader(final ClassLoader parent)\n      throws MalformedURLException {\n    if (classLoaderCreated !\u003d null) {\n      throw new IllegalStateException(\"A classloader was already created\");\n    }\n    final URL[] urls \u003d new URL[localClasspaths.size()];\n    for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n      urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n      LOG.info(urls[i].toString());\n    }\n    return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n      @Override\n      public ClassLoader run() {\n        classLoaderCreated \u003d new URLClassLoader(urls, parent);\n        return classLoaderCreated;\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "de09716fb8782596ccf44a3cfc90ac3c4f288667": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6977 Move logging APIs over to slf4j in hadoop-mapreduce-client-common.\nContributed by Jinjiang Ling.\n",
      "commitDate": "27/10/17 2:45 AM",
      "commitName": "de09716fb8782596ccf44a3cfc90ac3c4f288667",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 499.49,
      "commitsBetweenForRepo": 3371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public ClassLoader makeClassLoader(final ClassLoader parent)\n       throws MalformedURLException {\n     final URL[] urls \u003d new URL[localClasspaths.size()];\n     for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n       urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n-      LOG.info(urls[i]);\n+      LOG.info(urls[i].toString());\n     }\n     return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n       @Override\n       public ClassLoader run() {\n         return new URLClassLoader(urls, parent);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ClassLoader makeClassLoader(final ClassLoader parent)\n      throws MalformedURLException {\n    final URL[] urls \u003d new URL[localClasspaths.size()];\n    for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n      urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n      LOG.info(urls[i].toString());\n    }\n    return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n      @Override\n      public ClassLoader run() {\n        return new URLClassLoader(urls, parent);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
      "extendedDetails": {}
    },
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3237. Move LocalJobRunner to hadoop-mapreduce-client-core. Contributed by Tom White.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 8:16 PM",
      "commitName": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,14 @@\n+  public ClassLoader makeClassLoader(final ClassLoader parent)\n+      throws MalformedURLException {\n+    final URL[] urls \u003d new URL[localClasspaths.size()];\n+    for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n+      urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n+      LOG.info(urls[i]);\n+    }\n+    return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n+      @Override\n+      public ClassLoader run() {\n+        return new URLClassLoader(urls, parent);\n+      }\n+    });\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ClassLoader makeClassLoader(final ClassLoader parent)\n      throws MalformedURLException {\n    final URL[] urls \u003d new URL[localClasspaths.size()];\n    for (int i \u003d 0; i \u003c localClasspaths.size(); ++i) {\n      urls[i] \u003d new File(localClasspaths.get(i)).toURI().toURL();\n      LOG.info(urls[i]);\n    }\n    return AccessController.doPrivileged(new PrivilegedAction\u003cClassLoader\u003e() {\n      @Override\n      public ClassLoader run() {\n        return new URLClassLoader(urls, parent);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java"
    }
  }
}