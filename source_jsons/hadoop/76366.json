{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectWritable.java",
  "functionName": "readObject",
  "functionId": "readObject___in-DataInput__objectWritable-ObjectWritable__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
  "functionStartLine": 223,
  "functionEndLine": 301,
  "numCommitsSeen": 9,
  "timeTaken": 951,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "7728f03f0861b99070a3774e95960925a3105b20",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "0d55e1a14430ee18a84de6f985da86dc61d7ae80",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "7728f03f0861b99070a3774e95960925a3105b20": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "0d55e1a14430ee18a84de6f985da86dc61d7ae80": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n    throws IOException {\n    String className \u003d UTF8.readString(in);\n    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n    if (declaredClass \u003d\u003d null) {\n      declaredClass \u003d loadClass(conf, className);\n    }\n    \n    Object instance;\n    \n    if (declaredClass.isPrimitive()) {            // primitive types\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n        instance \u003d Boolean.valueOf(in.readBoolean());\n      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n        instance \u003d Character.valueOf(in.readChar());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n        instance \u003d Byte.valueOf(in.readByte());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n        instance \u003d Short.valueOf(in.readShort());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n        instance \u003d Integer.valueOf(in.readInt());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n        instance \u003d Long.valueOf(in.readLong());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n        instance \u003d Float.valueOf(in.readFloat());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n        instance \u003d Double.valueOf(in.readDouble());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n        instance \u003d null;\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n\n    } else if (declaredClass.isArray()) {              // array\n      int length \u003d in.readInt();\n      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        Array.set(instance, i, readObject(in, conf));\n      }\n      \n    } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n      // Read and unwrap ArrayPrimitiveWritable$Internal array.\n      // Always allow the read, even if write is disabled by allowCompactArrays.\n      ArrayPrimitiveWritable.Internal temp \u003d \n          new ArrayPrimitiveWritable.Internal();\n      temp.readFields(in);\n      instance \u003d temp.get();\n      declaredClass \u003d instance.getClass();\n\n    } else if (declaredClass \u003d\u003d String.class) {        // String\n      instance \u003d UTF8.readString(in);\n    } else if (declaredClass.isEnum()) {         // enum\n      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n    } else if (Message.class.isAssignableFrom(declaredClass)) {\n      instance \u003d tryInstantiateProtobuf(declaredClass, in);\n    } else {                                      // Writable\n      Class instanceClass \u003d null;\n      String str \u003d UTF8.readString(in);\n      instanceClass \u003d loadClass(conf, str);\n      \n      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n      writable.readFields(in);\n      instance \u003d writable;\n\n      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n        declaredClass \u003d ((NullInstance)instance).declaredClass;\n        instance \u003d null;\n      }\n    }\n\n    if (objectWritable !\u003d null) {                 // store values\n      objectWritable.declaredClass \u003d declaredClass;\n      objectWritable.instance \u003d instance;\n    }\n\n    return instance;\n      \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n    throws IOException {\n    String className \u003d UTF8.readString(in);\n    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n    if (declaredClass \u003d\u003d null) {\n      declaredClass \u003d loadClass(conf, className);\n    }\n    \n    Object instance;\n    \n    if (declaredClass.isPrimitive()) {            // primitive types\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n        instance \u003d Boolean.valueOf(in.readBoolean());\n      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n        instance \u003d Character.valueOf(in.readChar());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n        instance \u003d Byte.valueOf(in.readByte());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n        instance \u003d Short.valueOf(in.readShort());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n        instance \u003d Integer.valueOf(in.readInt());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n        instance \u003d Long.valueOf(in.readLong());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n        instance \u003d Float.valueOf(in.readFloat());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n        instance \u003d Double.valueOf(in.readDouble());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n        instance \u003d null;\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n\n    } else if (declaredClass.isArray()) {              // array\n      int length \u003d in.readInt();\n      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        Array.set(instance, i, readObject(in, conf));\n      }\n      \n    } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n      // Read and unwrap ArrayPrimitiveWritable$Internal array.\n      // Always allow the read, even if write is disabled by allowCompactArrays.\n      ArrayPrimitiveWritable.Internal temp \u003d \n          new ArrayPrimitiveWritable.Internal();\n      temp.readFields(in);\n      instance \u003d temp.get();\n      declaredClass \u003d instance.getClass();\n\n    } else if (declaredClass \u003d\u003d String.class) {        // String\n      instance \u003d UTF8.readString(in);\n    } else if (declaredClass.isEnum()) {         // enum\n      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n    } else if (Message.class.isAssignableFrom(declaredClass)) {\n      instance \u003d tryInstantiateProtobuf(declaredClass, in);\n    } else {                                      // Writable\n      Class instanceClass \u003d null;\n      String str \u003d UTF8.readString(in);\n      instanceClass \u003d loadClass(conf, str);\n      \n      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n      writable.readFields(in);\n      instance \u003d writable;\n\n      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n        declaredClass \u003d ((NullInstance)instance).declaredClass;\n        instance \u003d null;\n      }\n    }\n\n    if (objectWritable !\u003d null) {                 // store values\n      objectWritable.declaredClass \u003d declaredClass;\n      objectWritable.instance \u003d instance;\n    }\n\n    return instance;\n      \n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "7728f03f0861b99070a3774e95960925a3105b20": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7379. Add the ability to serialize and deserialize protocol buffers in ObjectWritable. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1136222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/11 3:21 PM",
      "commitName": "7728f03f0861b99070a3774e95960925a3105b20",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,79 @@\n   public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n     throws IOException {\n     String className \u003d UTF8.readString(in);\n     Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n     if (declaredClass \u003d\u003d null) {\n       declaredClass \u003d loadClass(conf, className);\n     }\n     \n     Object instance;\n     \n     if (declaredClass.isPrimitive()) {            // primitive types\n \n       if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n         instance \u003d Boolean.valueOf(in.readBoolean());\n       } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n         instance \u003d Character.valueOf(in.readChar());\n       } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n         instance \u003d Byte.valueOf(in.readByte());\n       } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n         instance \u003d Short.valueOf(in.readShort());\n       } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n         instance \u003d Integer.valueOf(in.readInt());\n       } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n         instance \u003d Long.valueOf(in.readLong());\n       } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n         instance \u003d Float.valueOf(in.readFloat());\n       } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n         instance \u003d Double.valueOf(in.readDouble());\n       } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n         instance \u003d null;\n       } else {\n         throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n       }\n \n     } else if (declaredClass.isArray()) {              // array\n       int length \u003d in.readInt();\n       instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n       for (int i \u003d 0; i \u003c length; i++) {\n         Array.set(instance, i, readObject(in, conf));\n       }\n       \n     } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n       // Read and unwrap ArrayPrimitiveWritable$Internal array.\n       // Always allow the read, even if write is disabled by allowCompactArrays.\n       ArrayPrimitiveWritable.Internal temp \u003d \n           new ArrayPrimitiveWritable.Internal();\n       temp.readFields(in);\n       instance \u003d temp.get();\n       declaredClass \u003d instance.getClass();\n \n     } else if (declaredClass \u003d\u003d String.class) {        // String\n       instance \u003d UTF8.readString(in);\n     } else if (declaredClass.isEnum()) {         // enum\n       instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n+    } else if (Message.class.isAssignableFrom(declaredClass)) {\n+      instance \u003d tryInstantiateProtobuf(declaredClass, in);\n     } else {                                      // Writable\n       Class instanceClass \u003d null;\n       String str \u003d UTF8.readString(in);\n       instanceClass \u003d loadClass(conf, str);\n       \n       Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n       writable.readFields(in);\n       instance \u003d writable;\n \n       if (instanceClass \u003d\u003d NullInstance.class) {  // null\n         declaredClass \u003d ((NullInstance)instance).declaredClass;\n         instance \u003d null;\n       }\n     }\n \n     if (objectWritable !\u003d null) {                 // store values\n       objectWritable.declaredClass \u003d declaredClass;\n       objectWritable.instance \u003d instance;\n     }\n \n     return instance;\n       \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n    throws IOException {\n    String className \u003d UTF8.readString(in);\n    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n    if (declaredClass \u003d\u003d null) {\n      declaredClass \u003d loadClass(conf, className);\n    }\n    \n    Object instance;\n    \n    if (declaredClass.isPrimitive()) {            // primitive types\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n        instance \u003d Boolean.valueOf(in.readBoolean());\n      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n        instance \u003d Character.valueOf(in.readChar());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n        instance \u003d Byte.valueOf(in.readByte());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n        instance \u003d Short.valueOf(in.readShort());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n        instance \u003d Integer.valueOf(in.readInt());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n        instance \u003d Long.valueOf(in.readLong());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n        instance \u003d Float.valueOf(in.readFloat());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n        instance \u003d Double.valueOf(in.readDouble());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n        instance \u003d null;\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n\n    } else if (declaredClass.isArray()) {              // array\n      int length \u003d in.readInt();\n      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        Array.set(instance, i, readObject(in, conf));\n      }\n      \n    } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n      // Read and unwrap ArrayPrimitiveWritable$Internal array.\n      // Always allow the read, even if write is disabled by allowCompactArrays.\n      ArrayPrimitiveWritable.Internal temp \u003d \n          new ArrayPrimitiveWritable.Internal();\n      temp.readFields(in);\n      instance \u003d temp.get();\n      declaredClass \u003d instance.getClass();\n\n    } else if (declaredClass \u003d\u003d String.class) {        // String\n      instance \u003d UTF8.readString(in);\n    } else if (declaredClass.isEnum()) {         // enum\n      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n    } else if (Message.class.isAssignableFrom(declaredClass)) {\n      instance \u003d tryInstantiateProtobuf(declaredClass, in);\n    } else {                                      // Writable\n      Class instanceClass \u003d null;\n      String str \u003d UTF8.readString(in);\n      instanceClass \u003d loadClass(conf, str);\n      \n      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n      writable.readFields(in);\n      instance \u003d writable;\n\n      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n        declaredClass \u003d ((NullInstance)instance).declaredClass;\n        instance \u003d null;\n      }\n    }\n\n    if (objectWritable !\u003d null) {                 // store values\n      objectWritable.declaredClass \u003d declaredClass;\n      objectWritable.instance \u003d instance;\n    }\n\n    return instance;\n      \n  }",
      "path": "common/src/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n    throws IOException {\n    String className \u003d UTF8.readString(in);\n    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n    if (declaredClass \u003d\u003d null) {\n      declaredClass \u003d loadClass(conf, className);\n    }\n    \n    Object instance;\n    \n    if (declaredClass.isPrimitive()) {            // primitive types\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n        instance \u003d Boolean.valueOf(in.readBoolean());\n      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n        instance \u003d Character.valueOf(in.readChar());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n        instance \u003d Byte.valueOf(in.readByte());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n        instance \u003d Short.valueOf(in.readShort());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n        instance \u003d Integer.valueOf(in.readInt());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n        instance \u003d Long.valueOf(in.readLong());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n        instance \u003d Float.valueOf(in.readFloat());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n        instance \u003d Double.valueOf(in.readDouble());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n        instance \u003d null;\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n\n    } else if (declaredClass.isArray()) {              // array\n      int length \u003d in.readInt();\n      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        Array.set(instance, i, readObject(in, conf));\n      }\n      \n    } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n      // Read and unwrap ArrayPrimitiveWritable$Internal array.\n      // Always allow the read, even if write is disabled by allowCompactArrays.\n      ArrayPrimitiveWritable.Internal temp \u003d \n          new ArrayPrimitiveWritable.Internal();\n      temp.readFields(in);\n      instance \u003d temp.get();\n      declaredClass \u003d instance.getClass();\n\n    } else if (declaredClass \u003d\u003d String.class) {        // String\n      instance \u003d UTF8.readString(in);\n    } else if (declaredClass.isEnum()) {         // enum\n      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n    } else {                                      // Writable\n      Class instanceClass \u003d null;\n      String str \u003d UTF8.readString(in);\n      instanceClass \u003d loadClass(conf, str);\n      \n      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n      writable.readFields(in);\n      instance \u003d writable;\n\n      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n        declaredClass \u003d ((NullInstance)instance).declaredClass;\n        instance \u003d null;\n      }\n    }\n\n    if (objectWritable !\u003d null) {                 // store values\n      objectWritable.declaredClass \u003d declaredClass;\n      objectWritable.instance \u003d instance;\n    }\n\n    return instance;\n      \n  }",
      "path": "common/src/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "common/src/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "0d55e1a14430ee18a84de6f985da86dc61d7ae80": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6949. Reduce RPC packet size of primitive arrays using ArrayPrimitiveWritable instead of ObjectWritable. Contributed by Matt Foley.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1083957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/11 2:10 PM",
      "commitName": "0d55e1a14430ee18a84de6f985da86dc61d7ae80",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 282.98,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,77 @@\n   public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n     throws IOException {\n     String className \u003d UTF8.readString(in);\n     Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n     if (declaredClass \u003d\u003d null) {\n       declaredClass \u003d loadClass(conf, className);\n     }\n     \n     Object instance;\n     \n     if (declaredClass.isPrimitive()) {            // primitive types\n \n       if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n         instance \u003d Boolean.valueOf(in.readBoolean());\n       } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n         instance \u003d Character.valueOf(in.readChar());\n       } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n         instance \u003d Byte.valueOf(in.readByte());\n       } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n         instance \u003d Short.valueOf(in.readShort());\n       } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n         instance \u003d Integer.valueOf(in.readInt());\n       } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n         instance \u003d Long.valueOf(in.readLong());\n       } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n         instance \u003d Float.valueOf(in.readFloat());\n       } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n         instance \u003d Double.valueOf(in.readDouble());\n       } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n         instance \u003d null;\n       } else {\n         throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n       }\n \n     } else if (declaredClass.isArray()) {              // array\n       int length \u003d in.readInt();\n       instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n       for (int i \u003d 0; i \u003c length; i++) {\n         Array.set(instance, i, readObject(in, conf));\n       }\n       \n+    } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n+      // Read and unwrap ArrayPrimitiveWritable$Internal array.\n+      // Always allow the read, even if write is disabled by allowCompactArrays.\n+      ArrayPrimitiveWritable.Internal temp \u003d \n+          new ArrayPrimitiveWritable.Internal();\n+      temp.readFields(in);\n+      instance \u003d temp.get();\n+      declaredClass \u003d instance.getClass();\n+\n     } else if (declaredClass \u003d\u003d String.class) {        // String\n       instance \u003d UTF8.readString(in);\n     } else if (declaredClass.isEnum()) {         // enum\n       instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n     } else {                                      // Writable\n       Class instanceClass \u003d null;\n       String str \u003d UTF8.readString(in);\n       instanceClass \u003d loadClass(conf, str);\n       \n       Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n       writable.readFields(in);\n       instance \u003d writable;\n \n       if (instanceClass \u003d\u003d NullInstance.class) {  // null\n         declaredClass \u003d ((NullInstance)instance).declaredClass;\n         instance \u003d null;\n       }\n     }\n \n     if (objectWritable !\u003d null) {                 // store values\n       objectWritable.declaredClass \u003d declaredClass;\n       objectWritable.instance \u003d instance;\n     }\n \n     return instance;\n       \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n    throws IOException {\n    String className \u003d UTF8.readString(in);\n    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n    if (declaredClass \u003d\u003d null) {\n      declaredClass \u003d loadClass(conf, className);\n    }\n    \n    Object instance;\n    \n    if (declaredClass.isPrimitive()) {            // primitive types\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n        instance \u003d Boolean.valueOf(in.readBoolean());\n      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n        instance \u003d Character.valueOf(in.readChar());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n        instance \u003d Byte.valueOf(in.readByte());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n        instance \u003d Short.valueOf(in.readShort());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n        instance \u003d Integer.valueOf(in.readInt());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n        instance \u003d Long.valueOf(in.readLong());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n        instance \u003d Float.valueOf(in.readFloat());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n        instance \u003d Double.valueOf(in.readDouble());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n        instance \u003d null;\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n\n    } else if (declaredClass.isArray()) {              // array\n      int length \u003d in.readInt();\n      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        Array.set(instance, i, readObject(in, conf));\n      }\n      \n    } else if (declaredClass \u003d\u003d ArrayPrimitiveWritable.Internal.class) {\n      // Read and unwrap ArrayPrimitiveWritable$Internal array.\n      // Always allow the read, even if write is disabled by allowCompactArrays.\n      ArrayPrimitiveWritable.Internal temp \u003d \n          new ArrayPrimitiveWritable.Internal();\n      temp.readFields(in);\n      instance \u003d temp.get();\n      declaredClass \u003d instance.getClass();\n\n    } else if (declaredClass \u003d\u003d String.class) {        // String\n      instance \u003d UTF8.readString(in);\n    } else if (declaredClass.isEnum()) {         // enum\n      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n    } else {                                      // Writable\n      Class instanceClass \u003d null;\n      String str \u003d UTF8.readString(in);\n      instanceClass \u003d loadClass(conf, str);\n      \n      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n      writable.readFields(in);\n      instance \u003d writable;\n\n      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n        declaredClass \u003d ((NullInstance)instance).declaredClass;\n        instance \u003d null;\n      }\n    }\n\n    if (objectWritable !\u003d null) {                 // store values\n      objectWritable.declaredClass \u003d declaredClass;\n      objectWritable.instance \u003d instance;\n    }\n\n    return instance;\n      \n  }",
      "path": "src/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,68 @@\n+  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n+    throws IOException {\n+    String className \u003d UTF8.readString(in);\n+    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n+    if (declaredClass \u003d\u003d null) {\n+      declaredClass \u003d loadClass(conf, className);\n+    }\n+    \n+    Object instance;\n+    \n+    if (declaredClass.isPrimitive()) {            // primitive types\n+\n+      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n+        instance \u003d Boolean.valueOf(in.readBoolean());\n+      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n+        instance \u003d Character.valueOf(in.readChar());\n+      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n+        instance \u003d Byte.valueOf(in.readByte());\n+      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n+        instance \u003d Short.valueOf(in.readShort());\n+      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n+        instance \u003d Integer.valueOf(in.readInt());\n+      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n+        instance \u003d Long.valueOf(in.readLong());\n+      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n+        instance \u003d Float.valueOf(in.readFloat());\n+      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n+        instance \u003d Double.valueOf(in.readDouble());\n+      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n+        instance \u003d null;\n+      } else {\n+        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n+      }\n+\n+    } else if (declaredClass.isArray()) {              // array\n+      int length \u003d in.readInt();\n+      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n+      for (int i \u003d 0; i \u003c length; i++) {\n+        Array.set(instance, i, readObject(in, conf));\n+      }\n+      \n+    } else if (declaredClass \u003d\u003d String.class) {        // String\n+      instance \u003d UTF8.readString(in);\n+    } else if (declaredClass.isEnum()) {         // enum\n+      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n+    } else {                                      // Writable\n+      Class instanceClass \u003d null;\n+      String str \u003d UTF8.readString(in);\n+      instanceClass \u003d loadClass(conf, str);\n+      \n+      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n+      writable.readFields(in);\n+      instance \u003d writable;\n+\n+      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n+        declaredClass \u003d ((NullInstance)instance).declaredClass;\n+        instance \u003d null;\n+      }\n+    }\n+\n+    if (objectWritable !\u003d null) {                 // store values\n+      objectWritable.declaredClass \u003d declaredClass;\n+      objectWritable.instance \u003d instance;\n+    }\n+\n+    return instance;\n+      \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf)\n    throws IOException {\n    String className \u003d UTF8.readString(in);\n    Class\u003c?\u003e declaredClass \u003d PRIMITIVE_NAMES.get(className);\n    if (declaredClass \u003d\u003d null) {\n      declaredClass \u003d loadClass(conf, className);\n    }\n    \n    Object instance;\n    \n    if (declaredClass.isPrimitive()) {            // primitive types\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {             // boolean\n        instance \u003d Boolean.valueOf(in.readBoolean());\n      } else if (declaredClass \u003d\u003d Character.TYPE) {    // char\n        instance \u003d Character.valueOf(in.readChar());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {         // byte\n        instance \u003d Byte.valueOf(in.readByte());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {        // short\n        instance \u003d Short.valueOf(in.readShort());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) {      // int\n        instance \u003d Integer.valueOf(in.readInt());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {         // long\n        instance \u003d Long.valueOf(in.readLong());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {        // float\n        instance \u003d Float.valueOf(in.readFloat());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {       // double\n        instance \u003d Double.valueOf(in.readDouble());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {         // void\n        instance \u003d null;\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n\n    } else if (declaredClass.isArray()) {              // array\n      int length \u003d in.readInt();\n      instance \u003d Array.newInstance(declaredClass.getComponentType(), length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        Array.set(instance, i, readObject(in, conf));\n      }\n      \n    } else if (declaredClass \u003d\u003d String.class) {        // String\n      instance \u003d UTF8.readString(in);\n    } else if (declaredClass.isEnum()) {         // enum\n      instance \u003d Enum.valueOf((Class\u003c? extends Enum\u003e) declaredClass, UTF8.readString(in));\n    } else {                                      // Writable\n      Class instanceClass \u003d null;\n      String str \u003d UTF8.readString(in);\n      instanceClass \u003d loadClass(conf, str);\n      \n      Writable writable \u003d WritableFactories.newInstance(instanceClass, conf);\n      writable.readFields(in);\n      instance \u003d writable;\n\n      if (instanceClass \u003d\u003d NullInstance.class) {  // null\n        declaredClass \u003d ((NullInstance)instance).declaredClass;\n        instance \u003d null;\n      }\n    }\n\n    if (objectWritable !\u003d null) {                 // store values\n      objectWritable.declaredClass \u003d declaredClass;\n      objectWritable.instance \u003d instance;\n    }\n\n    return instance;\n      \n  }",
      "path": "src/java/org/apache/hadoop/io/ObjectWritable.java"
    }
  }
}