{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "getUserGroupMappingPlacementRule",
  "functionId": "getUserGroupMappingPlacementRule",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 670,
  "functionEndLine": 679,
  "numCommitsSeen": 239,
  "timeTaken": 7370,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "a90471b3e65326cc18ed31fe21aef654833b5883",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "a90471b3e65326cc18ed31fe21aef654833b5883": "Ybodychange",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": "Ymultichange(Yreturntypechange,Ybodychange)",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       UserGroupMappingPlacementRule ugRule \u003d new UserGroupMappingPlacementRule();\n       ugRule.initialize(this);\n       return ugRule;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n    readLock.lock();\n    try {\n      UserGroupMappingPlacementRule ugRule \u003d new UserGroupMappingPlacementRule();\n      ugRule.initialize(this);\n      return ugRule;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "a90471b3e65326cc18ed31fe21aef654833b5883": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8016. Refine PlacementRule interface and add a app-name queue mapping rule as an example. (Zian Chen via wangda)\n\nChange-Id: I35caf1480e0f76f5f3a53528af09312e39414bbb\n",
      "commitDate": "23/03/18 4:43 PM",
      "commitName": "a90471b3e65326cc18ed31fe21aef654833b5883",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "15/02/18 2:23 PM",
      "commitNameOld": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 36.06,
      "commitsBetweenForRepo": 384,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,10 @@\n   public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n     try {\n       readLock.lock();\n-      return UserGroupMappingPlacementRule.get(this);\n+      UserGroupMappingPlacementRule ugRule \u003d new UserGroupMappingPlacementRule();\n+      ugRule.initialize(this);\n+      return ugRule;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n    try {\n      readLock.lock();\n      UserGroupMappingPlacementRule ugRule \u003d new UserGroupMappingPlacementRule();\n      ugRule.initialize(this);\n      return ugRule;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
      "commitDate": "16/11/17 11:25 AM",
      "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
          "commitDate": "16/11/17 11:25 AM",
          "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/11/17 1:01 PM",
          "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 6.93,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,8 @@\n-      getUserGroupMappingPlacementRule() throws IOException {\n+  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n     try {\n       readLock.lock();\n-      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n-      LOG.info(\n-          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n-\n-      // Get new user/group mappings\n-      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n-      // check if mappings refer to valid queues\n-      for (QueueMapping mapping : newMappings) {\n-        String mappingQueue \u003d mapping.getQueue();\n-        if (!mappingQueue.equals(\n-            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n-            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n-          CSQueue queue \u003d getQueue(mappingQueue);\n-          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n-            throw new IOException(\n-                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n-          }\n-        }\n-      }\n-\n-      // initialize groups if mappings are present\n-      if (newMappings.size() \u003e 0) {\n-        Groups groups \u003d new Groups(conf);\n-        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n-            newMappings, groups);\n-      }\n-\n-      return null;\n+      return UserGroupMappingPlacementRule.get(this);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n    try {\n      readLock.lock();\n      return UserGroupMappingPlacementRule.get(this);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "UserGroupMappingPlacementRule",
            "newValue": "PlacementRule"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
          "commitDate": "16/11/17 11:25 AM",
          "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/11/17 1:01 PM",
          "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 6.93,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,8 @@\n-      getUserGroupMappingPlacementRule() throws IOException {\n+  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n     try {\n       readLock.lock();\n-      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n-      LOG.info(\n-          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n-\n-      // Get new user/group mappings\n-      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n-      // check if mappings refer to valid queues\n-      for (QueueMapping mapping : newMappings) {\n-        String mappingQueue \u003d mapping.getQueue();\n-        if (!mappingQueue.equals(\n-            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n-            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n-          CSQueue queue \u003d getQueue(mappingQueue);\n-          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n-            throw new IOException(\n-                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n-          }\n-        }\n-      }\n-\n-      // initialize groups if mappings are present\n-      if (newMappings.size() \u003e 0) {\n-        Groups groups \u003d new Groups(conf);\n-        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n-            newMappings, groups);\n-      }\n-\n-      return null;\n+      return UserGroupMappingPlacementRule.get(this);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PlacementRule getUserGroupMappingPlacementRule() throws IOException {\n    try {\n      readLock.lock();\n      return UserGroupMappingPlacementRule.get(this);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n       getUserGroupMappingPlacementRule() throws IOException {\n     try {\n       readLock.lock();\n       boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n       LOG.info(\n           \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n \n       // Get new user/group mappings\n       List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n       // check if mappings refer to valid queues\n       for (QueueMapping mapping : newMappings) {\n         String mappingQueue \u003d mapping.getQueue();\n         if (!mappingQueue.equals(\n             UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n             .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n-          CSQueue queue \u003d queues.get(mappingQueue);\n+          CSQueue queue \u003d getQueue(mappingQueue);\n           if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n             throw new IOException(\n                 \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n           }\n         }\n       }\n \n       // initialize groups if mappings are present\n       if (newMappings.size() \u003e 0) {\n         Groups groups \u003d new Groups(conf);\n         return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n             newMappings, groups);\n       }\n \n       return null;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getUserGroupMappingPlacementRule() throws IOException {\n    try {\n      readLock.lock();\n      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n      LOG.info(\n          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n\n      // Get new user/group mappings\n      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n      // check if mappings refer to valid queues\n      for (QueueMapping mapping : newMappings) {\n        String mappingQueue \u003d mapping.getQueue();\n        if (!mappingQueue.equals(\n            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n          CSQueue queue \u003d getQueue(mappingQueue);\n          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n            throw new IOException(\n                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n          }\n        }\n      }\n\n      // initialize groups if mappings are present\n      if (newMappings.size() \u003e 0) {\n        Groups groups \u003d new Groups(conf);\n        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n            newMappings, groups);\n      }\n\n      return null;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n       getUserGroupMappingPlacementRule() throws IOException {\n-    boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n-    LOG.info(\"Initialized queue mappings, override: \"\n-        + overrideWithQueueMappings);\n+    try {\n+      readLock.lock();\n+      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n+      LOG.info(\n+          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n \n-    // Get new user/group mappings\n-    List\u003cUserGroupMappingPlacementRule.QueueMapping\u003e newMappings \u003d\n-        conf.getQueueMappings();\n-    // check if mappings refer to valid queues\n-    for (QueueMapping mapping : newMappings) {\n-      String mappingQueue \u003d mapping.getQueue();\n-      if (!mappingQueue\n-          .equals(UserGroupMappingPlacementRule.CURRENT_USER_MAPPING)\n-          \u0026\u0026 !mappingQueue\n-              .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n-        CSQueue queue \u003d queues.get(mappingQueue);\n-        if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n-          throw new IOException(\"mapping contains invalid or non-leaf queue \"\n-              + mappingQueue);\n+      // Get new user/group mappings\n+      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n+      // check if mappings refer to valid queues\n+      for (QueueMapping mapping : newMappings) {\n+        String mappingQueue \u003d mapping.getQueue();\n+        if (!mappingQueue.equals(\n+            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n+            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n+          CSQueue queue \u003d queues.get(mappingQueue);\n+          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n+            throw new IOException(\n+                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n+          }\n         }\n       }\n-    }\n \n-    // initialize groups if mappings are present\n-    if (newMappings.size() \u003e 0) {\n-      Groups groups \u003d new Groups(conf);\n-      return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n-          newMappings, groups);\n-    }\n+      // initialize groups if mappings are present\n+      if (newMappings.size() \u003e 0) {\n+        Groups groups \u003d new Groups(conf);\n+        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n+            newMappings, groups);\n+      }\n \n-    return null;\n+      return null;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      getUserGroupMappingPlacementRule() throws IOException {\n    try {\n      readLock.lock();\n      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n      LOG.info(\n          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n\n      // Get new user/group mappings\n      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n      // check if mappings refer to valid queues\n      for (QueueMapping mapping : newMappings) {\n        String mappingQueue \u003d mapping.getQueue();\n        if (!mappingQueue.equals(\n            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n          CSQueue queue \u003d queues.get(mappingQueue);\n          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n            throw new IOException(\n                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n          }\n        }\n      }\n\n      // initialize groups if mappings are present\n      if (newMappings.size() \u003e 0) {\n        Groups groups \u003d new Groups(conf);\n        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n            newMappings, groups);\n      }\n\n      return null;\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n       getUserGroupMappingPlacementRule() throws IOException {\n-    boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n-    LOG.info(\"Initialized queue mappings, override: \"\n-        + overrideWithQueueMappings);\n+    try {\n+      readLock.lock();\n+      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n+      LOG.info(\n+          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n \n-    // Get new user/group mappings\n-    List\u003cUserGroupMappingPlacementRule.QueueMapping\u003e newMappings \u003d\n-        conf.getQueueMappings();\n-    // check if mappings refer to valid queues\n-    for (QueueMapping mapping : newMappings) {\n-      String mappingQueue \u003d mapping.getQueue();\n-      if (!mappingQueue\n-          .equals(UserGroupMappingPlacementRule.CURRENT_USER_MAPPING)\n-          \u0026\u0026 !mappingQueue\n-              .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n-        CSQueue queue \u003d queues.get(mappingQueue);\n-        if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n-          throw new IOException(\"mapping contains invalid or non-leaf queue \"\n-              + mappingQueue);\n+      // Get new user/group mappings\n+      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n+      // check if mappings refer to valid queues\n+      for (QueueMapping mapping : newMappings) {\n+        String mappingQueue \u003d mapping.getQueue();\n+        if (!mappingQueue.equals(\n+            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n+            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n+          CSQueue queue \u003d queues.get(mappingQueue);\n+          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n+            throw new IOException(\n+                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n+          }\n         }\n       }\n-    }\n \n-    // initialize groups if mappings are present\n-    if (newMappings.size() \u003e 0) {\n-      Groups groups \u003d new Groups(conf);\n-      return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n-          newMappings, groups);\n-    }\n+      // initialize groups if mappings are present\n+      if (newMappings.size() \u003e 0) {\n+        Groups groups \u003d new Groups(conf);\n+        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n+            newMappings, groups);\n+      }\n \n-    return null;\n+      return null;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      getUserGroupMappingPlacementRule() throws IOException {\n    try {\n      readLock.lock();\n      boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n      LOG.info(\n          \"Initialized queue mappings, override: \" + overrideWithQueueMappings);\n\n      // Get new user/group mappings\n      List\u003cQueueMapping\u003e newMappings \u003d conf.getQueueMappings();\n      // check if mappings refer to valid queues\n      for (QueueMapping mapping : newMappings) {\n        String mappingQueue \u003d mapping.getQueue();\n        if (!mappingQueue.equals(\n            UserGroupMappingPlacementRule.CURRENT_USER_MAPPING) \u0026\u0026 !mappingQueue\n            .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n          CSQueue queue \u003d queues.get(mappingQueue);\n          if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n            throw new IOException(\n                \"mapping contains invalid or non-leaf queue \" + mappingQueue);\n          }\n        }\n      }\n\n      // initialize groups if mappings are present\n      if (newMappings.size() \u003e 0) {\n        Groups groups \u003d new Groups(conf);\n        return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n            newMappings, groups);\n      }\n\n      return null;\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3635. Refactored current queue mapping implementation in CapacityScheduler to use a generic PlacementManager framework. Contributed by Wangda Tan\n",
      "commitDate": "15/09/15 12:39 AM",
      "commitName": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+      getUserGroupMappingPlacementRule() throws IOException {\n+    boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n+    LOG.info(\"Initialized queue mappings, override: \"\n+        + overrideWithQueueMappings);\n+\n+    // Get new user/group mappings\n+    List\u003cUserGroupMappingPlacementRule.QueueMapping\u003e newMappings \u003d\n+        conf.getQueueMappings();\n+    // check if mappings refer to valid queues\n+    for (QueueMapping mapping : newMappings) {\n+      String mappingQueue \u003d mapping.getQueue();\n+      if (!mappingQueue\n+          .equals(UserGroupMappingPlacementRule.CURRENT_USER_MAPPING)\n+          \u0026\u0026 !mappingQueue\n+              .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n+        CSQueue queue \u003d queues.get(mappingQueue);\n+        if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n+          throw new IOException(\"mapping contains invalid or non-leaf queue \"\n+              + mappingQueue);\n+        }\n+      }\n+    }\n+\n+    // initialize groups if mappings are present\n+    if (newMappings.size() \u003e 0) {\n+      Groups groups \u003d new Groups(conf);\n+      return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n+          newMappings, groups);\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getUserGroupMappingPlacementRule() throws IOException {\n    boolean overrideWithQueueMappings \u003d conf.getOverrideWithQueueMappings();\n    LOG.info(\"Initialized queue mappings, override: \"\n        + overrideWithQueueMappings);\n\n    // Get new user/group mappings\n    List\u003cUserGroupMappingPlacementRule.QueueMapping\u003e newMappings \u003d\n        conf.getQueueMappings();\n    // check if mappings refer to valid queues\n    for (QueueMapping mapping : newMappings) {\n      String mappingQueue \u003d mapping.getQueue();\n      if (!mappingQueue\n          .equals(UserGroupMappingPlacementRule.CURRENT_USER_MAPPING)\n          \u0026\u0026 !mappingQueue\n              .equals(UserGroupMappingPlacementRule.PRIMARY_GROUP_MAPPING)) {\n        CSQueue queue \u003d queues.get(mappingQueue);\n        if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n          throw new IOException(\"mapping contains invalid or non-leaf queue \"\n              + mappingQueue);\n        }\n      }\n    }\n\n    // initialize groups if mappings are present\n    if (newMappings.size() \u003e 0) {\n      Groups groups \u003d new Groups(conf);\n      return new UserGroupMappingPlacementRule(overrideWithQueueMappings,\n          newMappings, groups);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}