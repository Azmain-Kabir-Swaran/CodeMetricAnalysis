{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultOOMHandler.java",
  "functionName": "compareTo",
  "functionId": "compareTo___o-ContainerCandidate",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java",
  "functionStartLine": 283,
  "functionEndLine": 301,
  "numCommitsSeen": 5,
  "timeTaken": 958,
  "changeHistory": [
    "d5eca1a6a0e3939eead6711805b7a61c364d254b"
  ],
  "changeHistoryShort": {
    "d5eca1a6a0e3939eead6711805b7a61c364d254b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5eca1a6a0e3939eead6711805b7a61c364d254b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.\n",
      "commitDate": "07/06/18 4:38 PM",
      "commitName": "d5eca1a6a0e3939eead6711805b7a61c364d254b",
      "commitAuthor": "Miklos Szegedi",
      "diff": "@@ -0,0 +1,19 @@\n+    public int compareTo(ContainerCandidate o) {\n+      boolean isThisOpportunistic \u003d isOpportunistic(container);\n+      boolean isOtherOpportunistic \u003d isOpportunistic(o.container);\n+      int ret \u003d Boolean.compare(isOtherOpportunistic, isThisOpportunistic);\n+      if (ret \u003d\u003d 0) {\n+        // the two containers are of the same execution type, order them\n+        // by their out-of-limit status.\n+        int outOfLimitRet \u003d Boolean.compare(o.outOfLimit, outOfLimit);\n+        if (outOfLimitRet \u003d\u003d 0) {\n+          // the two containers are also of the same out-of-limit status,\n+          // order them by their launch time\n+          ret \u003d Long.compare(o.container.getContainerLaunchTime(),\n+              this.container.getContainerLaunchTime());\n+        } else {\n+          ret \u003d outOfLimitRet;\n+        }\n+      }\n+      return ret;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int compareTo(ContainerCandidate o) {\n      boolean isThisOpportunistic \u003d isOpportunistic(container);\n      boolean isOtherOpportunistic \u003d isOpportunistic(o.container);\n      int ret \u003d Boolean.compare(isOtherOpportunistic, isThisOpportunistic);\n      if (ret \u003d\u003d 0) {\n        // the two containers are of the same execution type, order them\n        // by their out-of-limit status.\n        int outOfLimitRet \u003d Boolean.compare(o.outOfLimit, outOfLimit);\n        if (outOfLimitRet \u003d\u003d 0) {\n          // the two containers are also of the same out-of-limit status,\n          // order them by their launch time\n          ret \u003d Long.compare(o.container.getContainerLaunchTime(),\n              this.container.getContainerLaunchTime());\n        } else {\n          ret \u003d outOfLimitRet;\n        }\n      }\n      return ret;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java"
    }
  }
}