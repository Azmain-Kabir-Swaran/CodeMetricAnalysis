{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "assignMapsWithLocality",
  "functionId": "assignMapsWithLocality___allocatedContainers-List__Container__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 1402,
  "functionEndLine": 1492,
  "numCommitsSeen": 105,
  "timeTaken": 9150,
  "changeHistory": [
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
    "4228de94028f1e10ca59ce23e963e488fe566909",
    "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "74748ec62570f92d57dbad3ba4cca47402990db5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": "Ybodychange",
    "4228de94028f1e10ca59ce23e963e488fe566909": "Ybodychange",
    "28c308d5e81432b79f9c9e14df316a52cc7ba48f": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "74748ec62570f92d57dbad3ba4cca47402990db5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6703. Add flag to allow MapReduce AM to request for OPPORTUNISTIC containers. Contributed by Arun Suresh\n",
      "commitDate": "24/05/16 7:47 PM",
      "commitName": "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/05/16 3:25 PM",
      "commitNameOld": "c9bb96fa81fc925e33ccc0b02c98cc2d929df120",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,91 @@\n     private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n       // try to assign to all nodes first to match node local\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n       while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n         Container allocated \u003d it.next();        \n         Priority priority \u003d allocated.getPriority();\n-        assert PRIORITY_MAP.equals(priority);\n-        // \"if (maps.containsKey(tId))\" below should be almost always true.\n-        // hence this while loop would almost always have O(1) complexity\n-        String host \u003d allocated.getNodeId().getHost();\n-        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n-        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Host matched to the request list \" + host);\n-          }\n-          TaskAttemptId tId \u003d list.removeFirst();\n-          if (maps.containsKey(tId)) {\n-            ContainerRequest assigned \u003d maps.remove(tId);\n-            containerAssigned(allocated, assigned);\n-            it.remove();\n-            JobCounterUpdateEvent jce \u003d\n-              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n-            eventHandler.handle(jce);\n-            hostLocalAssigned++;\n+        assert (PRIORITY_MAP.equals(priority)\n+            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority));\n+        if (!PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n+          // \"if (maps.containsKey(tId))\" below should be almost always true.\n+          // hence this while loop would almost always have O(1) complexity\n+          String host \u003d allocated.getNodeId().getHost();\n+          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n+          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Assigned based on host match \" + host);\n+              LOG.debug(\"Host matched to the request list \" + host);\n             }\n-            break;\n+            TaskAttemptId tId \u003d list.removeFirst();\n+            if (maps.containsKey(tId)) {\n+              ContainerRequest assigned \u003d maps.remove(tId);\n+              containerAssigned(allocated, assigned);\n+              it.remove();\n+              JobCounterUpdateEvent jce \u003d\n+                  new JobCounterUpdateEvent(assigned.attemptID.getTaskId()\n+                      .getJobId());\n+              jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n+              eventHandler.handle(jce);\n+              hostLocalAssigned++;\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Assigned based on host match \" + host);\n+              }\n+              break;\n+            }\n           }\n         }\n       }\n       \n       // try to match all rack local\n       it \u003d allocatedContainers.iterator();\n       while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n         Container allocated \u003d it.next();\n         Priority priority \u003d allocated.getPriority();\n-        assert PRIORITY_MAP.equals(priority);\n-        // \"if (maps.containsKey(tId))\" below should be almost always true.\n-        // hence this while loop would almost always have O(1) complexity\n-        String host \u003d allocated.getNodeId().getHost();\n-        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n-        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n-        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-          TaskAttemptId tId \u003d list.removeFirst();\n-          if (maps.containsKey(tId)) {\n-            ContainerRequest assigned \u003d maps.remove(tId);\n-            containerAssigned(allocated, assigned);\n-            it.remove();\n-            JobCounterUpdateEvent jce \u003d\n-              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n-            eventHandler.handle(jce);\n-            rackLocalAssigned++;\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Assigned based on rack match \" + rack);\n+        assert (PRIORITY_MAP.equals(priority)\n+            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority));\n+        if (!PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n+          // \"if (maps.containsKey(tId))\" below should be almost always true.\n+          // hence this while loop would almost always have O(1) complexity\n+          String host \u003d allocated.getNodeId().getHost();\n+          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n+          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+            TaskAttemptId tId \u003d list.removeFirst();\n+            if (maps.containsKey(tId)) {\n+              ContainerRequest assigned \u003d maps.remove(tId);\n+              containerAssigned(allocated, assigned);\n+              it.remove();\n+              JobCounterUpdateEvent jce \u003d\n+                  new JobCounterUpdateEvent(assigned.attemptID.getTaskId()\n+                      .getJobId());\n+              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n+              eventHandler.handle(jce);\n+              rackLocalAssigned++;\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Assigned based on rack match \" + rack);\n+              }\n+              break;\n             }\n-            break;\n           }\n         }\n       }\n       \n       // assign remaining\n       it \u003d allocatedContainers.iterator();\n       while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n         Container allocated \u003d it.next();\n         Priority priority \u003d allocated.getPriority();\n-        assert PRIORITY_MAP.equals(priority);\n+        assert (PRIORITY_MAP.equals(priority)\n+            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority));\n         TaskAttemptId tId \u003d maps.keySet().iterator().next();\n         ContainerRequest assigned \u003d maps.remove(tId);\n         containerAssigned(allocated, assigned);\n         it.remove();\n         JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigned based on * match\");\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n      // try to assign to all nodes first to match node local\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n        Container allocated \u003d it.next();        \n        Priority priority \u003d allocated.getPriority();\n        assert (PRIORITY_MAP.equals(priority)\n            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority));\n        if (!PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n          // \"if (maps.containsKey(tId))\" below should be almost always true.\n          // hence this while loop would almost always have O(1) complexity\n          String host \u003d allocated.getNodeId().getHost();\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Host matched to the request list \" + host);\n            }\n            TaskAttemptId tId \u003d list.removeFirst();\n            if (maps.containsKey(tId)) {\n              ContainerRequest assigned \u003d maps.remove(tId);\n              containerAssigned(allocated, assigned);\n              it.remove();\n              JobCounterUpdateEvent jce \u003d\n                  new JobCounterUpdateEvent(assigned.attemptID.getTaskId()\n                      .getJobId());\n              jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n              eventHandler.handle(jce);\n              hostLocalAssigned++;\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Assigned based on host match \" + host);\n              }\n              break;\n            }\n          }\n        }\n      }\n      \n      // try to match all rack local\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert (PRIORITY_MAP.equals(priority)\n            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority));\n        if (!PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n          // \"if (maps.containsKey(tId))\" below should be almost always true.\n          // hence this while loop would almost always have O(1) complexity\n          String host \u003d allocated.getNodeId().getHost();\n          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n            TaskAttemptId tId \u003d list.removeFirst();\n            if (maps.containsKey(tId)) {\n              ContainerRequest assigned \u003d maps.remove(tId);\n              containerAssigned(allocated, assigned);\n              it.remove();\n              JobCounterUpdateEvent jce \u003d\n                  new JobCounterUpdateEvent(assigned.attemptID.getTaskId()\n                      .getJobId());\n              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n              eventHandler.handle(jce);\n              rackLocalAssigned++;\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Assigned based on rack match \" + rack);\n              }\n              break;\n            }\n          }\n        }\n      }\n      \n      // assign remaining\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert (PRIORITY_MAP.equals(priority)\n            || PRIORITY_OPPORTUNISTIC_MAP.equals(priority));\n        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n        ContainerRequest assigned \u003d maps.remove(tId);\n        containerAssigned(allocated, assigned);\n        it.remove();\n        JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned based on * match\");\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "4228de94028f1e10ca59ce23e963e488fe566909": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.\n",
      "commitDate": "03/03/15 2:02 AM",
      "commitName": "4228de94028f1e10ca59ce23e963e488fe566909",
      "commitAuthor": "Junping Du",
      "commitDateOld": "28/01/15 3:51 PM",
      "commitNameOld": "cff05bff1fe24628677d41a0d537f2c383b44faf",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.42,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n     private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n       // try to assign to all nodes first to match node local\n       Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n-      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n         Container allocated \u003d it.next();        \n         Priority priority \u003d allocated.getPriority();\n         assert PRIORITY_MAP.equals(priority);\n         // \"if (maps.containsKey(tId))\" below should be almost always true.\n         // hence this while loop would almost always have O(1) complexity\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Host matched to the request list \" + host);\n           }\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n             ContainerRequest assigned \u003d maps.remove(tId);\n             containerAssigned(allocated, assigned);\n             it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Assigned based on host match \" + host);\n             }\n             break;\n           }\n         }\n       }\n       \n       // try to match all rack local\n       it \u003d allocatedContainers.iterator();\n-      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n         Container allocated \u003d it.next();\n         Priority priority \u003d allocated.getPriority();\n         assert PRIORITY_MAP.equals(priority);\n         // \"if (maps.containsKey(tId))\" below should be almost always true.\n         // hence this while loop would almost always have O(1) complexity\n         String host \u003d allocated.getNodeId().getHost();\n         String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n             ContainerRequest assigned \u003d maps.remove(tId);\n             containerAssigned(allocated, assigned);\n             it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             rackLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Assigned based on rack match \" + rack);\n             }\n             break;\n           }\n         }\n       }\n       \n       // assign remaining\n       it \u003d allocatedContainers.iterator();\n-      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n         Container allocated \u003d it.next();\n         Priority priority \u003d allocated.getPriority();\n         assert PRIORITY_MAP.equals(priority);\n         TaskAttemptId tId \u003d maps.keySet().iterator().next();\n         ContainerRequest assigned \u003d maps.remove(tId);\n         containerAssigned(allocated, assigned);\n         it.remove();\n         JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigned based on * match\");\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n      // try to assign to all nodes first to match node local\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n        Container allocated \u003d it.next();        \n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Host matched to the request list \" + host);\n          }\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on host match \" + host);\n            }\n            break;\n          }\n        }\n      }\n      \n      // try to match all rack local\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            rackLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on rack match \" + rack);\n            }\n            break;\n          }\n        }\n      }\n      \n      // assign remaining\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0 \u0026\u0026 canAssignMaps()){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n        ContainerRequest assigned \u003d maps.remove(tId);\n        containerAssigned(allocated, assigned);\n        it.remove();\n        JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned based on * match\");\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "28c308d5e81432b79f9c9e14df316a52cc7ba48f": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4893. Fixed MR ApplicationMaster to do optimal assignment of containers to get maximum locality. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440749 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/13 4:28 PM",
      "commitName": "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-4893. Fixed MR ApplicationMaster to do optimal assignment of containers to get maximum locality. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440749 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/13 4:28 PM",
          "commitName": "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/01/13 4:21 PM",
          "commitNameOld": "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 2.0,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,82 @@\n-    private ContainerRequest assignToMap(Container allocated) {\n-    //try to assign to maps if present \n-      //first by host, then by rack, followed by *\n-      ContainerRequest assigned \u003d null;\n-      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n+    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n+      // try to assign to all nodes first to match node local\n+      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();        \n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Host matched to the request list \" + host);\n           }\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n-            assigned \u003d maps.remove(tId);\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Assigned based on host match \" + host);\n             }\n             break;\n           }\n         }\n-        if (assigned \u003d\u003d null) {\n-          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n-          list \u003d mapsRackMapping.get(rack);\n-          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-            TaskAttemptId tId \u003d list.removeFirst();\n-            if (maps.containsKey(tId)) {\n-              assigned \u003d maps.remove(tId);\n-              JobCounterUpdateEvent jce \u003d\n-                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n-              eventHandler.handle(jce);\n-              rackLocalAssigned++;\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Assigned based on rack match \" + rack);\n-              }\n-              break;\n-            }\n-          }\n-          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n-            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n-            assigned \u003d maps.remove(tId);\n+      }\n+      \n+      // try to match all rack local\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n+        String host \u003d allocated.getNodeId().getHost();\n+        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n+        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+          TaskAttemptId tId \u003d list.removeFirst();\n+          if (maps.containsKey(tId)) {\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n+            rackLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Assigned based on * match\");\n+              LOG.debug(\"Assigned based on rack match \" + rack);\n             }\n             break;\n           }\n         }\n       }\n-      return assigned;\n+      \n+      // assign remaining\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n+        ContainerRequest assigned \u003d maps.remove(tId);\n+        containerAssigned(allocated, assigned);\n+        it.remove();\n+        JobCounterUpdateEvent jce \u003d\n+          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+        eventHandler.handle(jce);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Assigned based on * match\");\n+        }\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n      // try to assign to all nodes first to match node local\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();        \n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Host matched to the request list \" + host);\n          }\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on host match \" + host);\n            }\n            break;\n          }\n        }\n      }\n      \n      // try to match all rack local\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            rackLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on rack match \" + rack);\n            }\n            break;\n          }\n        }\n      }\n      \n      // assign remaining\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n        ContainerRequest assigned \u003d maps.remove(tId);\n        containerAssigned(allocated, assigned);\n        it.remove();\n        JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned based on * match\");\n        }\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "assignToMap",
            "newValue": "assignMapsWithLocality"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4893. Fixed MR ApplicationMaster to do optimal assignment of containers to get maximum locality. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440749 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/13 4:28 PM",
          "commitName": "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/01/13 4:21 PM",
          "commitNameOld": "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 2.0,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,82 @@\n-    private ContainerRequest assignToMap(Container allocated) {\n-    //try to assign to maps if present \n-      //first by host, then by rack, followed by *\n-      ContainerRequest assigned \u003d null;\n-      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n+    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n+      // try to assign to all nodes first to match node local\n+      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();        \n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Host matched to the request list \" + host);\n           }\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n-            assigned \u003d maps.remove(tId);\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Assigned based on host match \" + host);\n             }\n             break;\n           }\n         }\n-        if (assigned \u003d\u003d null) {\n-          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n-          list \u003d mapsRackMapping.get(rack);\n-          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-            TaskAttemptId tId \u003d list.removeFirst();\n-            if (maps.containsKey(tId)) {\n-              assigned \u003d maps.remove(tId);\n-              JobCounterUpdateEvent jce \u003d\n-                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n-              eventHandler.handle(jce);\n-              rackLocalAssigned++;\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Assigned based on rack match \" + rack);\n-              }\n-              break;\n-            }\n-          }\n-          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n-            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n-            assigned \u003d maps.remove(tId);\n+      }\n+      \n+      // try to match all rack local\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n+        String host \u003d allocated.getNodeId().getHost();\n+        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n+        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+          TaskAttemptId tId \u003d list.removeFirst();\n+          if (maps.containsKey(tId)) {\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n+            rackLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Assigned based on * match\");\n+              LOG.debug(\"Assigned based on rack match \" + rack);\n             }\n             break;\n           }\n         }\n       }\n-      return assigned;\n+      \n+      // assign remaining\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n+        ContainerRequest assigned \u003d maps.remove(tId);\n+        containerAssigned(allocated, assigned);\n+        it.remove();\n+        JobCounterUpdateEvent jce \u003d\n+          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+        eventHandler.handle(jce);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Assigned based on * match\");\n+        }\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n      // try to assign to all nodes first to match node local\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();        \n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Host matched to the request list \" + host);\n          }\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on host match \" + host);\n            }\n            break;\n          }\n        }\n      }\n      \n      // try to match all rack local\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            rackLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on rack match \" + rack);\n            }\n            break;\n          }\n        }\n      }\n      \n      // assign remaining\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n        ContainerRequest assigned \u003d maps.remove(tId);\n        containerAssigned(allocated, assigned);\n        it.remove();\n        JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned based on * match\");\n        }\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[allocated-Container]",
            "newValue": "[allocatedContainers-List\u003cContainer\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-4893. Fixed MR ApplicationMaster to do optimal assignment of containers to get maximum locality. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440749 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/13 4:28 PM",
          "commitName": "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/01/13 4:21 PM",
          "commitNameOld": "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 2.0,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,82 @@\n-    private ContainerRequest assignToMap(Container allocated) {\n-    //try to assign to maps if present \n-      //first by host, then by rack, followed by *\n-      ContainerRequest assigned \u003d null;\n-      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n+    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n+      // try to assign to all nodes first to match node local\n+      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();        \n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Host matched to the request list \" + host);\n           }\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n-            assigned \u003d maps.remove(tId);\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Assigned based on host match \" + host);\n             }\n             break;\n           }\n         }\n-        if (assigned \u003d\u003d null) {\n-          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n-          list \u003d mapsRackMapping.get(rack);\n-          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-            TaskAttemptId tId \u003d list.removeFirst();\n-            if (maps.containsKey(tId)) {\n-              assigned \u003d maps.remove(tId);\n-              JobCounterUpdateEvent jce \u003d\n-                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n-              eventHandler.handle(jce);\n-              rackLocalAssigned++;\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Assigned based on rack match \" + rack);\n-              }\n-              break;\n-            }\n-          }\n-          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n-            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n-            assigned \u003d maps.remove(tId);\n+      }\n+      \n+      // try to match all rack local\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n+        String host \u003d allocated.getNodeId().getHost();\n+        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n+        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+          TaskAttemptId tId \u003d list.removeFirst();\n+          if (maps.containsKey(tId)) {\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n+            rackLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Assigned based on * match\");\n+              LOG.debug(\"Assigned based on rack match \" + rack);\n             }\n             break;\n           }\n         }\n       }\n-      return assigned;\n+      \n+      // assign remaining\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n+        ContainerRequest assigned \u003d maps.remove(tId);\n+        containerAssigned(allocated, assigned);\n+        it.remove();\n+        JobCounterUpdateEvent jce \u003d\n+          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+        eventHandler.handle(jce);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Assigned based on * match\");\n+        }\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n      // try to assign to all nodes first to match node local\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();        \n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Host matched to the request list \" + host);\n          }\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on host match \" + host);\n            }\n            break;\n          }\n        }\n      }\n      \n      // try to match all rack local\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            rackLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on rack match \" + rack);\n            }\n            break;\n          }\n        }\n      }\n      \n      // assign remaining\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n        ContainerRequest assigned \u003d maps.remove(tId);\n        containerAssigned(allocated, assigned);\n        it.remove();\n        JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned based on * match\");\n        }\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "ContainerRequest",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4893. Fixed MR ApplicationMaster to do optimal assignment of containers to get maximum locality. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440749 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/13 4:28 PM",
          "commitName": "28c308d5e81432b79f9c9e14df316a52cc7ba48f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/01/13 4:21 PM",
          "commitNameOld": "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 2.0,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,82 @@\n-    private ContainerRequest assignToMap(Container allocated) {\n-    //try to assign to maps if present \n-      //first by host, then by rack, followed by *\n-      ContainerRequest assigned \u003d null;\n-      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n+    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n+      // try to assign to all nodes first to match node local\n+      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();        \n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Host matched to the request list \" + host);\n           }\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n-            assigned \u003d maps.remove(tId);\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Assigned based on host match \" + host);\n             }\n             break;\n           }\n         }\n-        if (assigned \u003d\u003d null) {\n-          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n-          list \u003d mapsRackMapping.get(rack);\n-          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-            TaskAttemptId tId \u003d list.removeFirst();\n-            if (maps.containsKey(tId)) {\n-              assigned \u003d maps.remove(tId);\n-              JobCounterUpdateEvent jce \u003d\n-                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n-              eventHandler.handle(jce);\n-              rackLocalAssigned++;\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Assigned based on rack match \" + rack);\n-              }\n-              break;\n-            }\n-          }\n-          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n-            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n-            assigned \u003d maps.remove(tId);\n+      }\n+      \n+      // try to match all rack local\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        // \"if (maps.containsKey(tId))\" below should be almost always true.\n+        // hence this while loop would almost always have O(1) complexity\n+        String host \u003d allocated.getNodeId().getHost();\n+        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n+        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+          TaskAttemptId tId \u003d list.removeFirst();\n+          if (maps.containsKey(tId)) {\n+            ContainerRequest assigned \u003d maps.remove(tId);\n+            containerAssigned(allocated, assigned);\n+            it.remove();\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n-            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n+            rackLocalAssigned++;\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Assigned based on * match\");\n+              LOG.debug(\"Assigned based on rack match \" + rack);\n             }\n             break;\n           }\n         }\n       }\n-      return assigned;\n+      \n+      // assign remaining\n+      it \u003d allocatedContainers.iterator();\n+      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n+        Container allocated \u003d it.next();\n+        Priority priority \u003d allocated.getPriority();\n+        assert PRIORITY_MAP.equals(priority);\n+        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n+        ContainerRequest assigned \u003d maps.remove(tId);\n+        containerAssigned(allocated, assigned);\n+        it.remove();\n+        JobCounterUpdateEvent jce \u003d\n+          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+        eventHandler.handle(jce);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Assigned based on * match\");\n+        }\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void assignMapsWithLocality(List\u003cContainer\u003e allocatedContainers) {\n      // try to assign to all nodes first to match node local\n      Iterator\u003cContainer\u003e it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();        \n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Host matched to the request list \" + host);\n          }\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on host match \" + host);\n            }\n            break;\n          }\n        }\n      }\n      \n      // try to match all rack local\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        // \"if (maps.containsKey(tId))\" below should be almost always true.\n        // hence this while loop would almost always have O(1) complexity\n        String host \u003d allocated.getNodeId().getHost();\n        String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            ContainerRequest assigned \u003d maps.remove(tId);\n            containerAssigned(allocated, assigned);\n            it.remove();\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            rackLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on rack match \" + rack);\n            }\n            break;\n          }\n        }\n      }\n      \n      // assign remaining\n      it \u003d allocatedContainers.iterator();\n      while(it.hasNext() \u0026\u0026 maps.size() \u003e 0){\n        Container allocated \u003d it.next();\n        Priority priority \u003d allocated.getPriority();\n        assert PRIORITY_MAP.equals(priority);\n        TaskAttemptId tId \u003d maps.keySet().iterator().next();\n        ContainerRequest assigned \u003d maps.remove(tId);\n        containerAssigned(allocated, assigned);\n        it.remove();\n        JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned based on * match\");\n        }\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "03/02/12 4:04 PM",
      "commitNameOld": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,59 @@\n     private ContainerRequest assignToMap(Container allocated) {\n     //try to assign to maps if present \n       //first by host, then by rack, followed by *\n       ContainerRequest assigned \u003d null;\n       while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n-          LOG.info(\"Host matched to the request list \" + host);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Host matched to the request list \" + host);\n+          }\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n             assigned \u003d maps.remove(tId);\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n-            LOG.info(\"Assigned based on host match \" + host);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Assigned based on host match \" + host);\n+            }\n             break;\n           }\n         }\n         if (assigned \u003d\u003d null) {\n           String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n           list \u003d mapsRackMapping.get(rack);\n           while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n             TaskAttemptId tId \u003d list.removeFirst();\n             if (maps.containsKey(tId)) {\n               assigned \u003d maps.remove(tId);\n               JobCounterUpdateEvent jce \u003d\n                 new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n               jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n               eventHandler.handle(jce);\n               rackLocalAssigned++;\n-              LOG.info(\"Assigned based on rack match \" + rack);\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Assigned based on rack match \" + rack);\n+              }\n               break;\n             }\n           }\n           if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n             TaskAttemptId tId \u003d maps.keySet().iterator().next();\n             assigned \u003d maps.remove(tId);\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n-            LOG.info(\"Assigned based on * match\");\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Assigned based on * match\");\n+            }\n             break;\n           }\n         }\n       }\n       return assigned;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ContainerRequest assignToMap(Container allocated) {\n    //try to assign to maps if present \n      //first by host, then by rack, followed by *\n      ContainerRequest assigned \u003d null;\n      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Host matched to the request list \" + host);\n          }\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on host match \" + host);\n            }\n            break;\n          }\n        }\n        if (assigned \u003d\u003d null) {\n          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n          list \u003d mapsRackMapping.get(rack);\n          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n            TaskAttemptId tId \u003d list.removeFirst();\n            if (maps.containsKey(tId)) {\n              assigned \u003d maps.remove(tId);\n              JobCounterUpdateEvent jce \u003d\n                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n              eventHandler.handle(jce);\n              rackLocalAssigned++;\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Assigned based on rack match \" + rack);\n              }\n              break;\n            }\n          }\n          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Assigned based on * match\");\n            }\n            break;\n          }\n        }\n      }\n      return assigned;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "74748ec62570f92d57dbad3ba4cca47402990db5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2693. Fix NPE in job-blacklisting. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186529 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/11 3:02 PM",
      "commitName": "74748ec62570f92d57dbad3ba4cca47402990db5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "26/09/11 6:25 AM",
      "commitNameOld": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.36,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n     private ContainerRequest assignToMap(Container allocated) {\n     //try to assign to maps if present \n       //first by host, then by rack, followed by *\n       ContainerRequest assigned \u003d null;\n-      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0\n-          \u0026\u0026 allocated.getResource().getMemory() \u003e\u003d mapResourceReqt) {\n-        String host \u003d getHost(allocated.getNodeId().toString());\n+      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n+        String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           LOG.info(\"Host matched to the request list \" + host);\n           TaskAttemptId tId \u003d list.removeFirst();\n           if (maps.containsKey(tId)) {\n             assigned \u003d maps.remove(tId);\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             hostLocalAssigned++;\n             LOG.info(\"Assigned based on host match \" + host);\n             break;\n           }\n         }\n         if (assigned \u003d\u003d null) {\n           String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n           list \u003d mapsRackMapping.get(rack);\n           while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n             TaskAttemptId tId \u003d list.removeFirst();\n             if (maps.containsKey(tId)) {\n               assigned \u003d maps.remove(tId);\n               JobCounterUpdateEvent jce \u003d\n                 new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n               jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n               eventHandler.handle(jce);\n               rackLocalAssigned++;\n               LOG.info(\"Assigned based on rack match \" + rack);\n               break;\n             }\n           }\n           if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n             TaskAttemptId tId \u003d maps.keySet().iterator().next();\n             assigned \u003d maps.remove(tId);\n             JobCounterUpdateEvent jce \u003d\n               new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n             jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n             eventHandler.handle(jce);\n             LOG.info(\"Assigned based on * match\");\n             break;\n           }\n         }\n       }\n       return assigned;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ContainerRequest assignToMap(Container allocated) {\n    //try to assign to maps if present \n      //first by host, then by rack, followed by *\n      ContainerRequest assigned \u003d null;\n      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          LOG.info(\"Host matched to the request list \" + host);\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            LOG.info(\"Assigned based on host match \" + host);\n            break;\n          }\n        }\n        if (assigned \u003d\u003d null) {\n          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n          list \u003d mapsRackMapping.get(rack);\n          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n            TaskAttemptId tId \u003d list.removeFirst();\n            if (maps.containsKey(tId)) {\n              assigned \u003d maps.remove(tId);\n              JobCounterUpdateEvent jce \u003d\n                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n              eventHandler.handle(jce);\n              rackLocalAssigned++;\n              LOG.info(\"Assigned based on rack match \" + rack);\n              break;\n            }\n          }\n          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            LOG.info(\"Assigned based on * match\");\n            break;\n          }\n        }\n      }\n      return assigned;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private ContainerRequest assignToMap(Container allocated) {\n    //try to assign to maps if present \n      //first by host, then by rack, followed by *\n      ContainerRequest assigned \u003d null;\n      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0\n          \u0026\u0026 allocated.getResource().getMemory() \u003e\u003d mapResourceReqt) {\n        String host \u003d getHost(allocated.getNodeId().toString());\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          LOG.info(\"Host matched to the request list \" + host);\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            LOG.info(\"Assigned based on host match \" + host);\n            break;\n          }\n        }\n        if (assigned \u003d\u003d null) {\n          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n          list \u003d mapsRackMapping.get(rack);\n          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n            TaskAttemptId tId \u003d list.removeFirst();\n            if (maps.containsKey(tId)) {\n              assigned \u003d maps.remove(tId);\n              JobCounterUpdateEvent jce \u003d\n                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n              eventHandler.handle(jce);\n              rackLocalAssigned++;\n              LOG.info(\"Assigned based on rack match \" + rack);\n              break;\n            }\n          }\n          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            LOG.info(\"Assigned based on * match\");\n            break;\n          }\n        }\n      }\n      return assigned;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,52 @@\n+    private ContainerRequest assignToMap(Container allocated) {\n+    //try to assign to maps if present \n+      //first by host, then by rack, followed by *\n+      ContainerRequest assigned \u003d null;\n+      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0\n+          \u0026\u0026 allocated.getResource().getMemory() \u003e\u003d mapResourceReqt) {\n+        String host \u003d getHost(allocated.getNodeId().toString());\n+        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n+        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+          LOG.info(\"Host matched to the request list \" + host);\n+          TaskAttemptId tId \u003d list.removeFirst();\n+          if (maps.containsKey(tId)) {\n+            assigned \u003d maps.remove(tId);\n+            JobCounterUpdateEvent jce \u003d\n+              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n+            eventHandler.handle(jce);\n+            hostLocalAssigned++;\n+            LOG.info(\"Assigned based on host match \" + host);\n+            break;\n+          }\n+        }\n+        if (assigned \u003d\u003d null) {\n+          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n+          list \u003d mapsRackMapping.get(rack);\n+          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+            TaskAttemptId tId \u003d list.removeFirst();\n+            if (maps.containsKey(tId)) {\n+              assigned \u003d maps.remove(tId);\n+              JobCounterUpdateEvent jce \u003d\n+                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n+              eventHandler.handle(jce);\n+              rackLocalAssigned++;\n+              LOG.info(\"Assigned based on rack match \" + rack);\n+              break;\n+            }\n+          }\n+          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n+            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n+            assigned \u003d maps.remove(tId);\n+            JobCounterUpdateEvent jce \u003d\n+              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n+            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+            eventHandler.handle(jce);\n+            LOG.info(\"Assigned based on * match\");\n+            break;\n+          }\n+        }\n+      }\n+      return assigned;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private ContainerRequest assignToMap(Container allocated) {\n    //try to assign to maps if present \n      //first by host, then by rack, followed by *\n      ContainerRequest assigned \u003d null;\n      while (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0\n          \u0026\u0026 allocated.getResource().getMemory() \u003e\u003d mapResourceReqt) {\n        String host \u003d getHost(allocated.getNodeId().toString());\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          LOG.info(\"Host matched to the request list \" + host);\n          TaskAttemptId tId \u003d list.removeFirst();\n          if (maps.containsKey(tId)) {\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.DATA_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            hostLocalAssigned++;\n            LOG.info(\"Assigned based on host match \" + host);\n            break;\n          }\n        }\n        if (assigned \u003d\u003d null) {\n          String rack \u003d RackResolver.resolve(host).getNetworkLocation();\n          list \u003d mapsRackMapping.get(rack);\n          while (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n            TaskAttemptId tId \u003d list.removeFirst();\n            if (maps.containsKey(tId)) {\n              assigned \u003d maps.remove(tId);\n              JobCounterUpdateEvent jce \u003d\n                new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n              jce.addCounterUpdate(JobCounter.RACK_LOCAL_MAPS, 1);\n              eventHandler.handle(jce);\n              rackLocalAssigned++;\n              LOG.info(\"Assigned based on rack match \" + rack);\n              break;\n            }\n          }\n          if (assigned \u003d\u003d null \u0026\u0026 maps.size() \u003e 0) {\n            TaskAttemptId tId \u003d maps.keySet().iterator().next();\n            assigned \u003d maps.remove(tId);\n            JobCounterUpdateEvent jce \u003d\n              new JobCounterUpdateEvent(assigned.attemptID.getTaskId().getJobId());\n            jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n            eventHandler.handle(jce);\n            LOG.info(\"Assigned based on * match\");\n            break;\n          }\n        }\n      }\n      return assigned;\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}