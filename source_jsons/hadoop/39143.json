{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "pullNewlyAllocatedContainers",
  "functionId": "pullNewlyAllocatedContainers",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 814,
  "functionEndLine": 837,
  "numCommitsSeen": 180,
  "timeTaken": 14468,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "81df7b586a16f8226c7b01c139c1c70c060399c3",
    "1ea36299a47af302379ae0750b571ec021eb54ad",
    "1b89a3e173f8e905074ed6714a7be5c003c0e2c4",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
    "e285b98f0fe8637b574c52498035f7f11fb4e962",
    "0fbc7fe816007b4e330604e9f8bae6b1e4b448bc",
    "5fd5c9900cfd299428acbc8dff767273e44647c0",
    "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "6772d07fdc0ad7d0cd1be851bf83ae0208abd391",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "81df7b586a16f8226c7b01c139c1c70c060399c3": "Ybodychange",
    "1ea36299a47af302379ae0750b571ec021eb54ad": "Ybodychange",
    "1b89a3e173f8e905074ed6714a7be5c003c0e2c4": "Ybodychange",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": "Ybodychange",
    "e285b98f0fe8637b574c52498035f7f11fb4e962": "Ybodychange",
    "0fbc7fe816007b4e330604e9f8bae6b1e4b448bc": "Ybodychange",
    "5fd5c9900cfd299428acbc8dff767273e44647c0": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "d0a5e43de73119e57d12f2ec89a9d1a192cde204": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ymovefromfile",
    "6772d07fdc0ad7d0cd1be851bf83ae0208abd391": "Ymovefromfile",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n           newlyAllocatedContainers.size());\n \n       Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n       while (i.hasNext()) {\n         RMContainer rmContainer \u003d i.next();\n         Container updatedContainer \u003d\n             updateContainerAndNMToken(rmContainer, null);\n         // Only add container to return list when it\u0027s not null.\n         // updatedContainer could be null when generate token failed, it can be\n         // caused by DNS resolving failed.\n         if (updatedContainer !\u003d null) {\n           returnContainerList.add(updatedContainer);\n           i.remove();\n         }\n       }\n       return returnContainerList;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    writeLock.lock();\n    try {\n      List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n          newlyAllocatedContainers.size());\n\n      Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n      while (i.hasNext()) {\n        RMContainer rmContainer \u003d i.next();\n        Container updatedContainer \u003d\n            updateContainerAndNMToken(rmContainer, null);\n        // Only add container to return list when it\u0027s not null.\n        // updatedContainer could be null when generate token failed, it can be\n        // caused by DNS resolving failed.\n        if (updatedContainer !\u003d null) {\n          returnContainerList.add(updatedContainer);\n          i.remove();\n        }\n      }\n      return returnContainerList;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n     try {\n       writeLock.lock();\n       List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n           newlyAllocatedContainers.size());\n \n       Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n       while (i.hasNext()) {\n         RMContainer rmContainer \u003d i.next();\n-        Container updatedContainer \u003d updateContainerAndNMToken(rmContainer,\n-            true, false);\n+        Container updatedContainer \u003d\n+            updateContainerAndNMToken(rmContainer, null);\n         // Only add container to return list when it\u0027s not null.\n         // updatedContainer could be null when generate token failed, it can be\n         // caused by DNS resolving failed.\n         if (updatedContainer !\u003d null) {\n           returnContainerList.add(updatedContainer);\n           i.remove();\n         }\n       }\n       return returnContainerList;\n     } finally {\n       writeLock.unlock();\n     }\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    try {\n      writeLock.lock();\n      List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n          newlyAllocatedContainers.size());\n\n      Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n      while (i.hasNext()) {\n        RMContainer rmContainer \u003d i.next();\n        Container updatedContainer \u003d\n            updateContainerAndNMToken(rmContainer, null);\n        // Only add container to return list when it\u0027s not null.\n        // updatedContainer could be null when generate token failed, it can be\n        // caused by DNS resolving failed.\n        if (updatedContainer !\u003d null) {\n          returnContainerList.add(updatedContainer);\n          i.remove();\n        }\n      }\n      return returnContainerList;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,25 @@\n-  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n-    List\u003cContainer\u003e returnContainerList \u003d\n-        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n-    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n-        .hasNext();) {\n-      RMContainer rmContainer \u003d i.next();\n-      Container updatedContainer \u003d\n-          updateContainerAndNMToken(rmContainer, true, false);\n-      // Only add container to return list when it\u0027s not null. updatedContainer\n-      // could be null when generate token failed, it can be caused by DNS\n-      // resolving failed.\n-      if (updatedContainer !\u003d null) {\n-        returnContainerList.add(updatedContainer);\n-        i.remove();\n+  public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n+    try {\n+      writeLock.lock();\n+      List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n+          newlyAllocatedContainers.size());\n+\n+      Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n+      while (i.hasNext()) {\n+        RMContainer rmContainer \u003d i.next();\n+        Container updatedContainer \u003d updateContainerAndNMToken(rmContainer,\n+            true, false);\n+        // Only add container to return list when it\u0027s not null.\n+        // updatedContainer could be null when generate token failed, it can be\n+        // caused by DNS resolving failed.\n+        if (updatedContainer !\u003d null) {\n+          returnContainerList.add(updatedContainer);\n+          i.remove();\n+        }\n       }\n+      return returnContainerList;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return returnContainerList;\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    try {\n      writeLock.lock();\n      List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n          newlyAllocatedContainers.size());\n\n      Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n      while (i.hasNext()) {\n        RMContainer rmContainer \u003d i.next();\n        Container updatedContainer \u003d updateContainerAndNMToken(rmContainer,\n            true, false);\n        // Only add container to return list when it\u0027s not null.\n        // updatedContainer could be null when generate token failed, it can be\n        // caused by DNS resolving failed.\n        if (updatedContainer !\u003d null) {\n          returnContainerList.add(updatedContainer);\n          i.remove();\n        }\n      }\n      return returnContainerList;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,25 @@\n-  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n-    List\u003cContainer\u003e returnContainerList \u003d\n-        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n-    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n-        .hasNext();) {\n-      RMContainer rmContainer \u003d i.next();\n-      Container updatedContainer \u003d\n-          updateContainerAndNMToken(rmContainer, true, false);\n-      // Only add container to return list when it\u0027s not null. updatedContainer\n-      // could be null when generate token failed, it can be caused by DNS\n-      // resolving failed.\n-      if (updatedContainer !\u003d null) {\n-        returnContainerList.add(updatedContainer);\n-        i.remove();\n+  public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n+    try {\n+      writeLock.lock();\n+      List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n+          newlyAllocatedContainers.size());\n+\n+      Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n+      while (i.hasNext()) {\n+        RMContainer rmContainer \u003d i.next();\n+        Container updatedContainer \u003d updateContainerAndNMToken(rmContainer,\n+            true, false);\n+        // Only add container to return list when it\u0027s not null.\n+        // updatedContainer could be null when generate token failed, it can be\n+        // caused by DNS resolving failed.\n+        if (updatedContainer !\u003d null) {\n+          returnContainerList.add(updatedContainer);\n+          i.remove();\n+        }\n       }\n+      return returnContainerList;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return returnContainerList;\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    try {\n      writeLock.lock();\n      List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n          newlyAllocatedContainers.size());\n\n      Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator();\n      while (i.hasNext()) {\n        RMContainer rmContainer \u003d i.next();\n        Container updatedContainer \u003d updateContainerAndNMToken(rmContainer,\n            true, false);\n        // Only add container to return list when it\u0027s not null.\n        // updatedContainer could be null when generate token failed, it can be\n        // caused by DNS resolving failed.\n        if (updatedContainer !\u003d null) {\n          returnContainerList.add(updatedContainer);\n          i.remove();\n        }\n      }\n      return returnContainerList;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "13/09/15 5:03 PM",
          "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,18 @@\n-      pullNewlyAllocatedContainersAndNMTokens() {\n+  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n-    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n-      .hasNext();) {\n+        .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n-      Container container \u003d rmContainer.getContainer();\n-      ContainerType containerType \u003d ContainerType.TASK;\n-      boolean isWaitingForAMContainer \u003d isWaitingForAMContainer(\n-          container.getId().getApplicationAttemptId().getApplicationId());\n-      if (isWaitingForAMContainer) {\n-        containerType \u003d ContainerType.APPLICATION_MASTER;\n+      Container updatedContainer \u003d\n+          updateContainerAndNMToken(rmContainer, true, false);\n+      // Only add container to return list when it\u0027s not null. updatedContainer\n+      // could be null when generate token failed, it can be caused by DNS\n+      // resolving failed.\n+      if (updatedContainer !\u003d null) {\n+        returnContainerList.add(updatedContainer);\n+        i.remove();\n       }\n-      try {\n-        // create container token and NMToken altogether.\n-        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n-            .createContainerToken(container.getId(), container.getNodeId(),\n-                getUser(), container.getResource(), container.getPriority(),\n-                rmContainer.getCreationTime(), this.logAggregationContext,\n-                rmContainer.getNodeLabelExpression(), containerType));\n-        NMToken nmToken \u003d\n-            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n-              getApplicationAttemptId(), container);\n-        if (nmToken !\u003d null) {\n-          nmTokens.add(nmToken);\n-        }\n-      } catch (IllegalArgumentException e) {\n-        // DNS might be down, skip returning this container.\n-        LOG.error(\"Error trying to assign container token and NM token to\" +\n-            \" an allocated container \" + container.getId(), e);\n-        continue;\n-      }\n-      returnContainerList.add(container);\n-      i.remove();\n-      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n-        RMContainerEventType.ACQUIRED));\n     }\n-    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n+    return returnContainerList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n        .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container updatedContainer \u003d\n          updateContainerAndNMToken(rmContainer, true, false);\n      // Only add container to return list when it\u0027s not null. updatedContainer\n      // could be null when generate token failed, it can be caused by DNS\n      // resolving failed.\n      if (updatedContainer !\u003d null) {\n        returnContainerList.add(updatedContainer);\n        i.remove();\n      }\n    }\n    return returnContainerList;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "pullNewlyAllocatedContainersAndNMTokens",
            "newValue": "pullNewlyAllocatedContainers"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "13/09/15 5:03 PM",
          "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,18 @@\n-      pullNewlyAllocatedContainersAndNMTokens() {\n+  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n-    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n-      .hasNext();) {\n+        .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n-      Container container \u003d rmContainer.getContainer();\n-      ContainerType containerType \u003d ContainerType.TASK;\n-      boolean isWaitingForAMContainer \u003d isWaitingForAMContainer(\n-          container.getId().getApplicationAttemptId().getApplicationId());\n-      if (isWaitingForAMContainer) {\n-        containerType \u003d ContainerType.APPLICATION_MASTER;\n+      Container updatedContainer \u003d\n+          updateContainerAndNMToken(rmContainer, true, false);\n+      // Only add container to return list when it\u0027s not null. updatedContainer\n+      // could be null when generate token failed, it can be caused by DNS\n+      // resolving failed.\n+      if (updatedContainer !\u003d null) {\n+        returnContainerList.add(updatedContainer);\n+        i.remove();\n       }\n-      try {\n-        // create container token and NMToken altogether.\n-        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n-            .createContainerToken(container.getId(), container.getNodeId(),\n-                getUser(), container.getResource(), container.getPriority(),\n-                rmContainer.getCreationTime(), this.logAggregationContext,\n-                rmContainer.getNodeLabelExpression(), containerType));\n-        NMToken nmToken \u003d\n-            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n-              getApplicationAttemptId(), container);\n-        if (nmToken !\u003d null) {\n-          nmTokens.add(nmToken);\n-        }\n-      } catch (IllegalArgumentException e) {\n-        // DNS might be down, skip returning this container.\n-        LOG.error(\"Error trying to assign container token and NM token to\" +\n-            \" an allocated container \" + container.getId(), e);\n-        continue;\n-      }\n-      returnContainerList.add(container);\n-      i.remove();\n-      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n-        RMContainerEventType.ACQUIRED));\n     }\n-    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n+    return returnContainerList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n        .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container updatedContainer \u003d\n          updateContainerAndNMToken(rmContainer, true, false);\n      // Only add container to return list when it\u0027s not null. updatedContainer\n      // could be null when generate token failed, it can be caused by DNS\n      // resolving failed.\n      if (updatedContainer !\u003d null) {\n        returnContainerList.add(updatedContainer);\n        i.remove();\n      }\n    }\n    return returnContainerList;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "ContainersAndNMTokensAllocation",
            "newValue": "List\u003cContainer\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "13/09/15 5:03 PM",
          "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,18 @@\n-      pullNewlyAllocatedContainersAndNMTokens() {\n+  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n-    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n-      .hasNext();) {\n+        .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n-      Container container \u003d rmContainer.getContainer();\n-      ContainerType containerType \u003d ContainerType.TASK;\n-      boolean isWaitingForAMContainer \u003d isWaitingForAMContainer(\n-          container.getId().getApplicationAttemptId().getApplicationId());\n-      if (isWaitingForAMContainer) {\n-        containerType \u003d ContainerType.APPLICATION_MASTER;\n+      Container updatedContainer \u003d\n+          updateContainerAndNMToken(rmContainer, true, false);\n+      // Only add container to return list when it\u0027s not null. updatedContainer\n+      // could be null when generate token failed, it can be caused by DNS\n+      // resolving failed.\n+      if (updatedContainer !\u003d null) {\n+        returnContainerList.add(updatedContainer);\n+        i.remove();\n       }\n-      try {\n-        // create container token and NMToken altogether.\n-        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n-            .createContainerToken(container.getId(), container.getNodeId(),\n-                getUser(), container.getResource(), container.getPriority(),\n-                rmContainer.getCreationTime(), this.logAggregationContext,\n-                rmContainer.getNodeLabelExpression(), containerType));\n-        NMToken nmToken \u003d\n-            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n-              getApplicationAttemptId(), container);\n-        if (nmToken !\u003d null) {\n-          nmTokens.add(nmToken);\n-        }\n-      } catch (IllegalArgumentException e) {\n-        // DNS might be down, skip returning this container.\n-        LOG.error(\"Error trying to assign container token and NM token to\" +\n-            \" an allocated container \" + container.getId(), e);\n-        continue;\n-      }\n-      returnContainerList.add(container);\n-      i.remove();\n-      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n-        RMContainerEventType.ACQUIRED));\n     }\n-    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n+    return returnContainerList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n        .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container updatedContainer \u003d\n          updateContainerAndNMToken(rmContainer, true, false);\n      // Only add container to return list when it\u0027s not null. updatedContainer\n      // could be null when generate token failed, it can be caused by DNS\n      // resolving failed.\n      if (updatedContainer !\u003d null) {\n        returnContainerList.add(updatedContainer);\n        i.remove();\n      }\n    }\n    return returnContainerList;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "81df7b586a16f8226c7b01c139c1c70c060399c3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2005. Blacklisting support for scheduling AMs. (Anubhav Dhoot via kasha)\n",
      "commitDate": "13/09/15 5:03 PM",
      "commitName": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/08/15 8:51 PM",
      "commitNameOld": "fa1d84ae2739a1e76f58b9c96d1378f9453cc0d2",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.84,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,40 @@\n       pullNewlyAllocatedContainersAndNMTokens() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n     List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n       .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n       ContainerType containerType \u003d ContainerType.TASK;\n-      // The working knowledge is that masterContainer for AM is null as it\n-      // itself is the master container.\n-      RMAppAttempt appAttempt \u003d\n-          rmContext\n-              .getRMApps()\n-              .get(\n-                  container.getId().getApplicationAttemptId()\n-                      .getApplicationId()).getCurrentAppAttempt();\n-      if (appAttempt.getMasterContainer() \u003d\u003d null\n-          \u0026\u0026 appAttempt.getSubmissionContext().getUnmanagedAM() \u003d\u003d false) {\n+      boolean isWaitingForAMContainer \u003d isWaitingForAMContainer(\n+          container.getId().getApplicationAttemptId().getApplicationId());\n+      if (isWaitingForAMContainer) {\n         containerType \u003d ContainerType.APPLICATION_MASTER;\n       }\n       try {\n         // create container token and NMToken altogether.\n         container.setContainerToken(rmContext.getContainerTokenSecretManager()\n             .createContainerToken(container.getId(), container.getNodeId(),\n                 getUser(), container.getResource(), container.getPriority(),\n                 rmContainer.getCreationTime(), this.logAggregationContext,\n                 rmContainer.getNodeLabelExpression(), containerType));\n         NMToken nmToken \u003d\n             rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n               getApplicationAttemptId(), container);\n         if (nmToken !\u003d null) {\n           nmTokens.add(nmToken);\n         }\n       } catch (IllegalArgumentException e) {\n         // DNS might be down, skip returning this container.\n         LOG.error(\"Error trying to assign container token and NM token to\" +\n             \" an allocated container \" + container.getId(), e);\n         continue;\n       }\n       returnContainerList.add(container);\n       i.remove();\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n         RMContainerEventType.ACQUIRED));\n     }\n     return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      ContainerType containerType \u003d ContainerType.TASK;\n      boolean isWaitingForAMContainer \u003d isWaitingForAMContainer(\n          container.getId().getApplicationAttemptId().getApplicationId());\n      if (isWaitingForAMContainer) {\n        containerType \u003d ContainerType.APPLICATION_MASTER;\n      }\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n            .createContainerToken(container.getId(), container.getNodeId(),\n                getUser(), container.getResource(), container.getPriority(),\n                rmContainer.getCreationTime(), this.logAggregationContext,\n                rmContainer.getNodeLabelExpression(), containerType));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\"Error trying to assign container token and NM token to\" +\n            \" an allocated container \" + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "1ea36299a47af302379ae0750b571ec021eb54ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3116. RM notifies NM whether a container is an AM container or normal task container. Contributed by Giovanni Matteo Fumarola.\n",
      "commitDate": "10/07/15 6:58 PM",
      "commitName": "1ea36299a47af302379ae0750b571ec021eb54ad",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "26/05/15 12:00 PM",
      "commitNameOld": "10732d515f62258309f98e4d7d23249f80b1847d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 45.29,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,47 @@\n       pullNewlyAllocatedContainersAndNMTokens() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n     List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n       .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n+      ContainerType containerType \u003d ContainerType.TASK;\n+      // The working knowledge is that masterContainer for AM is null as it\n+      // itself is the master container.\n+      RMAppAttempt appAttempt \u003d\n+          rmContext\n+              .getRMApps()\n+              .get(\n+                  container.getId().getApplicationAttemptId()\n+                      .getApplicationId()).getCurrentAppAttempt();\n+      if (appAttempt.getMasterContainer() \u003d\u003d null\n+          \u0026\u0026 appAttempt.getSubmissionContext().getUnmanagedAM() \u003d\u003d false) {\n+        containerType \u003d ContainerType.APPLICATION_MASTER;\n+      }\n       try {\n         // create container token and NMToken altogether.\n         container.setContainerToken(rmContext.getContainerTokenSecretManager()\n             .createContainerToken(container.getId(), container.getNodeId(),\n                 getUser(), container.getResource(), container.getPriority(),\n                 rmContainer.getCreationTime(), this.logAggregationContext,\n-                rmContainer.getNodeLabelExpression()));\n+                rmContainer.getNodeLabelExpression(), containerType));\n         NMToken nmToken \u003d\n             rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n               getApplicationAttemptId(), container);\n         if (nmToken !\u003d null) {\n           nmTokens.add(nmToken);\n         }\n       } catch (IllegalArgumentException e) {\n         // DNS might be down, skip returning this container.\n         LOG.error(\"Error trying to assign container token and NM token to\" +\n             \" an allocated container \" + container.getId(), e);\n         continue;\n       }\n       returnContainerList.add(container);\n       i.remove();\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n         RMContainerEventType.ACQUIRED));\n     }\n     return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      ContainerType containerType \u003d ContainerType.TASK;\n      // The working knowledge is that masterContainer for AM is null as it\n      // itself is the master container.\n      RMAppAttempt appAttempt \u003d\n          rmContext\n              .getRMApps()\n              .get(\n                  container.getId().getApplicationAttemptId()\n                      .getApplicationId()).getCurrentAppAttempt();\n      if (appAttempt.getMasterContainer() \u003d\u003d null\n          \u0026\u0026 appAttempt.getSubmissionContext().getUnmanagedAM() \u003d\u003d false) {\n        containerType \u003d ContainerType.APPLICATION_MASTER;\n      }\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n            .createContainerToken(container.getId(), container.getNodeId(),\n                getUser(), container.getResource(), container.getPriority(),\n                rmContainer.getCreationTime(), this.logAggregationContext,\n                rmContainer.getNodeLabelExpression(), containerType));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\"Error trying to assign container token and NM token to\" +\n            \" an allocated container \" + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "1b89a3e173f8e905074ed6714a7be5c003c0e2c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3354. Add node label expression in ContainerTokenIdentifier to support RM recovery. Contributed by Wangda Tan\n",
      "commitDate": "15/04/15 1:57 PM",
      "commitName": "1b89a3e173f8e905074ed6714a7be5c003c0e2c4",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/04/15 11:45 AM",
      "commitNameOld": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n       pullNewlyAllocatedContainersAndNMTokens() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n     List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n       .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n       try {\n         // create container token and NMToken altogether.\n         container.setContainerToken(rmContext.getContainerTokenSecretManager()\n-          .createContainerToken(container.getId(), container.getNodeId(),\n-            getUser(), container.getResource(), container.getPriority(),\n-            rmContainer.getCreationTime(), this.logAggregationContext));\n+            .createContainerToken(container.getId(), container.getNodeId(),\n+                getUser(), container.getResource(), container.getPriority(),\n+                rmContainer.getCreationTime(), this.logAggregationContext,\n+                rmContainer.getNodeLabelExpression()));\n         NMToken nmToken \u003d\n             rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n               getApplicationAttemptId(), container);\n         if (nmToken !\u003d null) {\n           nmTokens.add(nmToken);\n         }\n       } catch (IllegalArgumentException e) {\n         // DNS might be down, skip returning this container.\n         LOG.error(\"Error trying to assign container token and NM token to\" +\n             \" an allocated container \" + container.getId(), e);\n         continue;\n       }\n       returnContainerList.add(container);\n       i.remove();\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n         RMContainerEventType.ACQUIRED));\n     }\n     return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n            .createContainerToken(container.getId(), container.getNodeId(),\n                getUser(), container.getResource(), container.getPriority(),\n                rmContainer.getCreationTime(), this.logAggregationContext,\n                rmContainer.getNodeLabelExpression()));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\"Error trying to assign container token and NM token to\" +\n            \" an allocated container \" + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2581. Passed LogAggregationContext to NM via ContainerTokenIdentifier. Contributed by Xuan Gong.\n",
      "commitDate": "24/09/14 5:50 PM",
      "commitName": "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "24/09/14 3:23 PM",
      "commitNameOld": "39c87344e16a08ab69e25345b3bce92aec92db47",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n       pullNewlyAllocatedContainersAndNMTokens() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n     List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n       .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n       try {\n         // create container token and NMToken altogether.\n         container.setContainerToken(rmContext.getContainerTokenSecretManager()\n           .createContainerToken(container.getId(), container.getNodeId(),\n             getUser(), container.getResource(), container.getPriority(),\n-            rmContainer.getCreationTime()));\n+            rmContainer.getCreationTime(), this.logAggregationContext));\n         NMToken nmToken \u003d\n             rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n               getApplicationAttemptId(), container);\n         if (nmToken !\u003d null) {\n           nmTokens.add(nmToken);\n         }\n       } catch (IllegalArgumentException e) {\n         // DNS might be down, skip returning this container.\n         LOG.error(\"Error trying to assign container token and NM token to\" +\n             \" an allocated container \" + container.getId(), e);\n         continue;\n       }\n       returnContainerList.add(container);\n       i.remove();\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n         RMContainerEventType.ACQUIRED));\n     }\n     return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n          .createContainerToken(container.getId(), container.getNodeId(),\n            getUser(), container.getResource(), container.getPriority(),\n            rmContainer.getCreationTime(), this.logAggregationContext));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\"Error trying to assign container token and NM token to\" +\n            \" an allocated container \" + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "e285b98f0fe8637b574c52498035f7f11fb4e962": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2152. Added missing information into ContainerTokenIdentifier so that NodeManagers can report the same to RM when RM restarts. Contributed Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 2:43 PM",
      "commitName": "e285b98f0fe8637b574c52498035f7f11fb4e962",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/06/14 8:09 PM",
      "commitNameOld": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.77,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n       pullNewlyAllocatedContainersAndNMTokens() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n     List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n       .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n       try {\n         // create container token and NMToken altogether.\n         container.setContainerToken(rmContext.getContainerTokenSecretManager()\n           .createContainerToken(container.getId(), container.getNodeId(),\n-            getUser(), container.getResource()));\n+            getUser(), container.getResource(), container.getPriority(),\n+            rmContainer.getCreationTime()));\n         NMToken nmToken \u003d\n             rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n               getApplicationAttemptId(), container);\n         if (nmToken !\u003d null) {\n           nmTokens.add(nmToken);\n         }\n       } catch (IllegalArgumentException e) {\n         // DNS might be down, skip returning this container.\n         LOG.error(\"Error trying to assign container token and NM token to\" +\n             \" an allocated container \" + container.getId(), e);\n         continue;\n       }\n       returnContainerList.add(container);\n       i.remove();\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n         RMContainerEventType.ACQUIRED));\n     }\n     return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n          .createContainerToken(container.getId(), container.getNodeId(),\n            getUser(), container.getResource(), container.getPriority(),\n            rmContainer.getCreationTime()));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\"Error trying to assign container token and NM token to\" +\n            \" an allocated container \" + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "0fbc7fe816007b4e330604e9f8bae6b1e4b448bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1588. Enhanced RM and the scheduling protocol to also send NMTokens of transferred containers from previous app-attempts to new AMs after YARN-1490. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/02/14 12:20 PM",
      "commitName": "0fbc7fe816007b4e330604e9f8bae6b1e4b448bc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 3:39 PM",
      "commitNameOld": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n       pullNewlyAllocatedContainersAndNMTokens() {\n     List\u003cContainer\u003e returnContainerList \u003d\n         new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n     List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n     for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n       .hasNext();) {\n       RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n       try {\n         // create container token and NMToken altogether.\n         container.setContainerToken(rmContext.getContainerTokenSecretManager()\n           .createContainerToken(container.getId(), container.getNodeId(),\n             getUser(), container.getResource()));\n         NMToken nmToken \u003d\n             rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n               getApplicationAttemptId(), container);\n         if (nmToken !\u003d null) {\n           nmTokens.add(nmToken);\n         }\n       } catch (IllegalArgumentException e) {\n         // DNS might be down, skip returning this container.\n-        LOG.error(\n-          \"Error trying to assign container token to allocated container \"\n-              + container.getId(), e);\n+        LOG.error(\"Error trying to assign container token and NM token to\" +\n+            \" an allocated container \" + container.getId(), e);\n         continue;\n       }\n       returnContainerList.add(container);\n       i.remove();\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n         RMContainerEventType.ACQUIRED));\n     }\n     return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n          .createContainerToken(container.getId(), container.getNodeId(),\n            getUser(), container.getResource()));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\"Error trying to assign container token and NM token to\" +\n            \" an allocated container \" + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "5fd5c9900cfd299428acbc8dff767273e44647c0": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 3:39 PM",
      "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/02/14 2:02 PM",
          "commitNameOld": "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.07,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,33 @@\n-  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n-    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n-        newlyAllocatedContainers.size());\n-    for (RMContainer rmContainer : newlyAllocatedContainers) {\n-      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n-          RMContainerEventType.ACQUIRED));\n+      pullNewlyAllocatedContainersAndNMTokens() {\n+    List\u003cContainer\u003e returnContainerList \u003d\n+        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n+    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n+    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n+      .hasNext();) {\n+      RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n-      rmContainer.getContainer().setContainerToken(\n-        rmContext.getContainerTokenSecretManager().createContainerToken(\n-          rmContainer.getContainerId(), container.getNodeId(), getUser(),\n-          container.getResource()));\n-      returnContainerList.add(rmContainer.getContainer());\n+      try {\n+        // create container token and NMToken altogether.\n+        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n+          .createContainerToken(container.getId(), container.getNodeId(),\n+            getUser(), container.getResource()));\n+        NMToken nmToken \u003d\n+            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n+              getApplicationAttemptId(), container);\n+        if (nmToken !\u003d null) {\n+          nmTokens.add(nmToken);\n+        }\n+      } catch (IllegalArgumentException e) {\n+        // DNS might be down, skip returning this container.\n+        LOG.error(\n+          \"Error trying to assign container token to allocated container \"\n+              + container.getId(), e);\n+        continue;\n+      }\n+      returnContainerList.add(container);\n+      i.remove();\n+      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n+        RMContainerEventType.ACQUIRED));\n     }\n-    newlyAllocatedContainers.clear();\n-    return returnContainerList;\n+    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n          .createContainerToken(container.getId(), container.getNodeId(),\n            getUser(), container.getResource()));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\n          \"Error trying to assign container token to allocated container \"\n              + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "pullNewlyAllocatedContainers",
            "newValue": "pullNewlyAllocatedContainersAndNMTokens"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/02/14 2:02 PM",
          "commitNameOld": "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.07,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,33 @@\n-  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n-    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n-        newlyAllocatedContainers.size());\n-    for (RMContainer rmContainer : newlyAllocatedContainers) {\n-      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n-          RMContainerEventType.ACQUIRED));\n+      pullNewlyAllocatedContainersAndNMTokens() {\n+    List\u003cContainer\u003e returnContainerList \u003d\n+        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n+    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n+    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n+      .hasNext();) {\n+      RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n-      rmContainer.getContainer().setContainerToken(\n-        rmContext.getContainerTokenSecretManager().createContainerToken(\n-          rmContainer.getContainerId(), container.getNodeId(), getUser(),\n-          container.getResource()));\n-      returnContainerList.add(rmContainer.getContainer());\n+      try {\n+        // create container token and NMToken altogether.\n+        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n+          .createContainerToken(container.getId(), container.getNodeId(),\n+            getUser(), container.getResource()));\n+        NMToken nmToken \u003d\n+            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n+              getApplicationAttemptId(), container);\n+        if (nmToken !\u003d null) {\n+          nmTokens.add(nmToken);\n+        }\n+      } catch (IllegalArgumentException e) {\n+        // DNS might be down, skip returning this container.\n+        LOG.error(\n+          \"Error trying to assign container token to allocated container \"\n+              + container.getId(), e);\n+        continue;\n+      }\n+      returnContainerList.add(container);\n+      i.remove();\n+      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n+        RMContainerEventType.ACQUIRED));\n     }\n-    newlyAllocatedContainers.clear();\n-    return returnContainerList;\n+    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n          .createContainerToken(container.getId(), container.getNodeId(),\n            getUser(), container.getResource()));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\n          \"Error trying to assign container token to allocated container \"\n              + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "List\u003cContainer\u003e",
            "newValue": "ContainersAndNMTokensAllocation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/02/14 2:02 PM",
          "commitNameOld": "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.07,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,33 @@\n-  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n-    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n-        newlyAllocatedContainers.size());\n-    for (RMContainer rmContainer : newlyAllocatedContainers) {\n-      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n-          RMContainerEventType.ACQUIRED));\n+      pullNewlyAllocatedContainersAndNMTokens() {\n+    List\u003cContainer\u003e returnContainerList \u003d\n+        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n+    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n+    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n+      .hasNext();) {\n+      RMContainer rmContainer \u003d i.next();\n       Container container \u003d rmContainer.getContainer();\n-      rmContainer.getContainer().setContainerToken(\n-        rmContext.getContainerTokenSecretManager().createContainerToken(\n-          rmContainer.getContainerId(), container.getNodeId(), getUser(),\n-          container.getResource()));\n-      returnContainerList.add(rmContainer.getContainer());\n+      try {\n+        // create container token and NMToken altogether.\n+        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n+          .createContainerToken(container.getId(), container.getNodeId(),\n+            getUser(), container.getResource()));\n+        NMToken nmToken \u003d\n+            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n+              getApplicationAttemptId(), container);\n+        if (nmToken !\u003d null) {\n+          nmTokens.add(nmToken);\n+        }\n+      } catch (IllegalArgumentException e) {\n+        // DNS might be down, skip returning this container.\n+        LOG.error(\n+          \"Error trying to assign container token to allocated container \"\n+              + container.getId(), e);\n+        continue;\n+      }\n+      returnContainerList.add(container);\n+      i.remove();\n+      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n+        RMContainerEventType.ACQUIRED));\n     }\n-    newlyAllocatedContainers.clear();\n-    return returnContainerList;\n+    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      pullNewlyAllocatedContainersAndNMTokens() {\n    List\u003cContainer\u003e returnContainerList \u003d\n        new ArrayList\u003cContainer\u003e(newlyAllocatedContainers.size());\n    List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n    for (Iterator\u003cRMContainer\u003e i \u003d newlyAllocatedContainers.iterator(); i\n      .hasNext();) {\n      RMContainer rmContainer \u003d i.next();\n      Container container \u003d rmContainer.getContainer();\n      try {\n        // create container token and NMToken altogether.\n        container.setContainerToken(rmContext.getContainerTokenSecretManager()\n          .createContainerToken(container.getId(), container.getNodeId(),\n            getUser(), container.getResource()));\n        NMToken nmToken \u003d\n            rmContext.getNMTokenSecretManager().createAndGetNMToken(getUser(),\n              getApplicationAttemptId(), container);\n        if (nmToken !\u003d null) {\n          nmTokens.add(nmToken);\n        }\n      } catch (IllegalArgumentException e) {\n        // DNS might be down, skip returning this container.\n        LOG.error(\n          \"Error trying to assign container token to allocated container \"\n              + container.getId(), e);\n        continue;\n      }\n      returnContainerList.add(container);\n      i.remove();\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n        RMContainerEventType.ACQUIRED));\n    }\n    return new ContainersAndNMTokensAllocation(returnContainerList, nmTokens);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "d0a5e43de73119e57d12f2ec89a9d1a192cde204": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1417. Modified RM to generate container-tokens not at creation time, but at allocation time so as to prevent RM\nfrom shelling out containers with expired tokens. Contributed by Omkar Vinit Joshi and Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/14 2:02 PM",
      "commitName": "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/02/14 3:04 PM",
      "commitNameOld": "bc939f7ae607d32d52c4e9ceacdfb25c1850e04c",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,16 @@\n   public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n     List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n         newlyAllocatedContainers.size());\n     for (RMContainer rmContainer : newlyAllocatedContainers) {\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n           RMContainerEventType.ACQUIRED));\n+      Container container \u003d rmContainer.getContainer();\n+      rmContainer.getContainer().setContainerToken(\n+        rmContext.getContainerTokenSecretManager().createContainerToken(\n+          rmContainer.getContainerId(), container.getNodeId(), getUser(),\n+          container.getResource()));\n       returnContainerList.add(rmContainer.getContainer());\n     }\n     newlyAllocatedContainers.clear();\n     return returnContainerList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      Container container \u003d rmContainer.getContainer();\n      rmContainer.getContainer().setContainerToken(\n        rmContext.getContainerTokenSecretManager().createContainerToken(\n          rmContainer.getContainerId(), container.getNodeId(), getUser(),\n          container.getResource()));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:11 PM",
      "commitNameOld": "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
        "oldMethodName": "pullNewlyAllocatedContainers",
        "newMethodName": "pullNewlyAllocatedContainers"
      }
    },
    "6772d07fdc0ad7d0cd1be851bf83ae0208abd391": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-1335. Move duplicate code from FSSchedulerApp and FiCaSchedulerApp into SchedulerApplication (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:15 PM",
      "commitName": "6772d07fdc0ad7d0cd1be851bf83ae0208abd391",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "23/10/13 7:30 PM",
      "commitNameOld": "b3195f1283c4524c32e67640e965b70e96530fcc",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n-  synchronized public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n+  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n     List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n         newlyAllocatedContainers.size());\n     for (RMContainer rmContainer : newlyAllocatedContainers) {\n       rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n           RMContainerEventType.ACQUIRED));\n       returnContainerList.add(rmContainer.getContainer());\n     }\n     newlyAllocatedContainers.clear();\n     return returnContainerList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
        "oldMethodName": "pullNewlyAllocatedContainers",
        "newMethodName": "pullNewlyAllocatedContainers"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/07/12 3:41 PM",
      "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,11 @@\n+  synchronized public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n+    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n+        newlyAllocatedContainers.size());\n+    for (RMContainer rmContainer : newlyAllocatedContainers) {\n+      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n+          RMContainerEventType.ACQUIRED));\n+      returnContainerList.add(rmContainer.getContainer());\n+    }\n+    newlyAllocatedContainers.clear();\n+    return returnContainerList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public List\u003cContainer\u003e pullNewlyAllocatedContainers() {\n    List\u003cContainer\u003e returnContainerList \u003d new ArrayList\u003cContainer\u003e(\n        newlyAllocatedContainers.size());\n    for (RMContainer rmContainer : newlyAllocatedContainers) {\n      rmContainer.handle(new RMContainerEvent(rmContainer.getContainerId(),\n          RMContainerEventType.ACQUIRED));\n      returnContainerList.add(rmContainer.getContainer());\n    }\n    newlyAllocatedContainers.clear();\n    return returnContainerList;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java"
    }
  }
}