{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceTimelinePublisher.java",
  "functionName": "serviceAttemptRegistered",
  "functionId": "serviceAttemptRegistered___service-Service__systemConf-org.apache.hadoop.conf.Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
  "functionStartLine": 87,
  "functionEndLine": 124,
  "numCommitsSeen": 14,
  "timeTaken": 5161,
  "changeHistory": [
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "541b64c7985db425c5ce8bd5f71a2d5980809708",
    "eed9e3e8f4724ca42e0140754b8fe598b6472747",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "f4216b7bba511cc79439e7dab9f0282d831a16b2"
  ],
  "changeHistoryShort": {
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "541b64c7985db425c5ce8bd5f71a2d5980809708": "Ybodychange",
    "eed9e3e8f4724ca42e0140754b8fe598b6472747": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Yparameterchange,Ybodychange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "f4216b7bba511cc79439e7dab9f0282d831a16b2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void serviceAttemptRegistered(Service service,\n       org.apache.hadoop.conf.Configuration systemConf) {\n     long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n     entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n     entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n         ServiceState.STARTED.toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n         service.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish system config - YarnConfiguration\n     populateTimelineEntity(systemConf.iterator(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n-    // publish user conf\n-    publishUserConf(service.getConfiguration(), service.getId(),\n+    // publish container conf\n+    publishContainerConf(service.getConfiguration(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n     publishComponents(service.getComponents());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceAttemptRegistered(Service service,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        ServiceState.STARTED.toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        service.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish container conf\n    publishContainerConf(service.getConfiguration(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(service.getComponents());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "541b64c7985db425c5ce8bd5f71a2d5980809708": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7165. Miscellaneous fixes in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthor": "Gour Saha",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "eed9e3e8f4724ca42e0140754b8fe598b6472747",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void serviceAttemptRegistered(Service service,\n       org.apache.hadoop.conf.Configuration systemConf) {\n     long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n     entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n-//    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n-//        service.getState().toString());\n+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n+        ServiceState.STARTED.toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n         service.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish system config - YarnConfiguration\n     populateTimelineEntity(systemConf.iterator(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n     // publish user conf\n     publishUserConf(service.getConfiguration(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n     publishComponents(service.getComponents());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceAttemptRegistered(Service service,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        ServiceState.STARTED.toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        service.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(service.getConfiguration(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(service.getComponents());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "eed9e3e8f4724ca42e0140754b8fe598b6472747": {
      "type": "Ybodychange",
      "commitMessage": "Rebase onto trunk - fix some issues. Contributed by Rohith Sharma K S\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "eed9e3e8f4724ca42e0140754b8fe598b6472747",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void serviceAttemptRegistered(Service service,\n       org.apache.hadoop.conf.Configuration systemConf) {\n     long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n     entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n-    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n-        service.getState().toString());\n+//    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n+//        service.getState().toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n         service.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish system config - YarnConfiguration\n     populateTimelineEntity(systemConf.iterator(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n     // publish user conf\n     publishUserConf(service.getConfiguration(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n     publishComponents(service.getComponents());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceAttemptRegistered(Service service,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n//    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n//        service.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        service.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(service.getConfiguration(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(service.getComponents());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public void serviceAttemptRegistered(Application application,\n+  public void serviceAttemptRegistered(Service service,\n       org.apache.hadoop.conf.Configuration systemConf) {\n-    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n-        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n+    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n+        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n \n-    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n+    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n     entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n-        application.getState().toString());\n+        service.getState().toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n-        application.getQuicklinks());\n+        service.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish system config - YarnConfiguration\n-    populateTimelineEntity(systemConf.iterator(), application.getId(),\n+    populateTimelineEntity(systemConf.iterator(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n     // publish user conf\n-    publishUserConf(application.getConfiguration(), application.getId(),\n+    publishUserConf(service.getConfiguration(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n-    publishComponents(application.getComponents());\n+    publishComponents(service.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Service service,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        service.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        service.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(service.getConfiguration(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(service.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public void serviceAttemptRegistered(Application application,\n+  public void serviceAttemptRegistered(Service service,\n       org.apache.hadoop.conf.Configuration systemConf) {\n-    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n-        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n+    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n+        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n \n-    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n+    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n     entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n-        application.getState().toString());\n+        service.getState().toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n-        application.getQuicklinks());\n+        service.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish system config - YarnConfiguration\n-    populateTimelineEntity(systemConf.iterator(), application.getId(),\n+    populateTimelineEntity(systemConf.iterator(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n     // publish user conf\n-    publishUserConf(application.getConfiguration(), application.getId(),\n+    publishUserConf(service.getConfiguration(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n-    publishComponents(application.getComponents());\n+    publishComponents(service.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Service service,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        service.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        service.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(service.getConfiguration(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(service.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public void serviceAttemptRegistered(Application application,\n+  public void serviceAttemptRegistered(Service service,\n       org.apache.hadoop.conf.Configuration systemConf) {\n-    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n-        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n+    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n+        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n \n-    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n+    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n     entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n-        application.getState().toString());\n+        service.getState().toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n-        application.getQuicklinks());\n+        service.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish system config - YarnConfiguration\n-    populateTimelineEntity(systemConf.iterator(), application.getId(),\n+    populateTimelineEntity(systemConf.iterator(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n     // publish user conf\n-    publishUserConf(application.getConfiguration(), application.getId(),\n+    publishUserConf(service.getConfiguration(), service.getId(),\n         ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n-    publishComponents(application.getComponents());\n+    publishComponents(service.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Service service,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d service.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : service.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(service.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        service.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        service.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(service.getConfiguration(), service.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(service.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "[application-Application, systemConf-org.apache.hadoop.conf.Configuration]",
            "newValue": "[service-Service, systemConf-org.apache.hadoop.conf.Configuration]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,38 @@\n-  public void serviceAttemptRegistered(Application application) {\n+  public void serviceAttemptRegistered(Application application,\n+      org.apache.hadoop.conf.Configuration systemConf) {\n     long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n     entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n     entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n         application.getState().toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n         application.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n-    // publish application specific configurations\n-    publishConfigurations(application.getConfiguration(), application.getId(),\n-        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n+    // publish system config - YarnConfiguration\n+    populateTimelineEntity(systemConf.iterator(), application.getId(),\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n+    // publish user conf\n+    publishUserConf(application.getConfiguration(), application.getId(),\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n     publishComponents(application.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Application application,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        application.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        application.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(application.getConfiguration(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(application.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "[application-Application]",
            "newValue": "[application-Application, systemConf-org.apache.hadoop.conf.Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,38 @@\n-  public void serviceAttemptRegistered(Application application) {\n+  public void serviceAttemptRegistered(Application application,\n+      org.apache.hadoop.conf.Configuration systemConf) {\n     long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n     entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n     entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n         application.getState().toString());\n     entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n     entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n         application.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n     startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n-    // publish application specific configurations\n-    publishConfigurations(application.getConfiguration(), application.getId(),\n-        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n+    // publish system config - YarnConfiguration\n+    populateTimelineEntity(systemConf.iterator(), application.getId(),\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n+    // publish user conf\n+    publishUserConf(application.getConfiguration(), application.getId(),\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n \n     // publish component as separate entity.\n     publishComponents(application.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Application application,\n      org.apache.hadoop.conf.Configuration systemConf) {\n    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        application.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        application.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish system config - YarnConfiguration\n    populateTimelineEntity(systemConf.iterator(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n    // publish user conf\n    publishUserConf(application.getConfiguration(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\n\n    // publish component as separate entity.\n    publishComponents(application.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {}
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,34 @@\n-  public void serviceAttemptRegistered(AppState appState) {\n-    Application application \u003d appState.getClusterStatus();\n+  public void serviceAttemptRegistered(Application application) {\n     long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfos.put(SliderTimelineMetricsConstants.NAME, application.getName());\n-    entityInfos.put(SliderTimelineMetricsConstants.STATE,\n+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n         application.getState().toString());\n-    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,\n+    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n+    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n+        application.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n-    startEvent.setId(SliderTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n+    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish application specific configurations\n     publishConfigurations(application.getConfiguration(), application.getId(),\n-        SliderTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n \n     // publish component as separate entity.\n     publishComponents(application.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Application application) {\n    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        application.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        application.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish application specific configurations\n    publishConfigurations(application.getConfiguration(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n\n    // publish component as separate entity.\n    publishComponents(application.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/server/appmaster/timelineservice/ServiceTimelinePublisher.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,34 @@\n-  public void serviceAttemptRegistered(AppState appState) {\n-    Application application \u003d appState.getClusterStatus();\n+  public void serviceAttemptRegistered(Application application) {\n     long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfos.put(SliderTimelineMetricsConstants.NAME, application.getName());\n-    entityInfos.put(SliderTimelineMetricsConstants.STATE,\n+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n         application.getState().toString());\n-    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,\n+    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n+    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n+        application.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n-    startEvent.setId(SliderTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n+    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish application specific configurations\n     publishConfigurations(application.getConfiguration(), application.getId(),\n-        SliderTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n \n     // publish component as separate entity.\n     publishComponents(application.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Application application) {\n    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        application.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        application.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish application specific configurations\n    publishConfigurations(application.getConfiguration(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n\n    // publish component as separate entity.\n    publishComponents(application.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,34 @@\n-  public void serviceAttemptRegistered(AppState appState) {\n-    Application application \u003d appState.getClusterStatus();\n+  public void serviceAttemptRegistered(Application application) {\n     long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n         ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n \n     TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n     entity.setCreatedTime(currentTimeMillis);\n \n     // create info keys\n     Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-    entityInfos.put(SliderTimelineMetricsConstants.NAME, application.getName());\n-    entityInfos.put(SliderTimelineMetricsConstants.STATE,\n+    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n         application.getState().toString());\n-    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,\n+    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n         currentTimeMillis);\n+    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n+        application.getQuicklinks());\n     entity.addInfo(entityInfos);\n \n     // add an event\n     TimelineEvent startEvent \u003d new TimelineEvent();\n-    startEvent.setId(SliderTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n+    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n     startEvent.setTimestamp(currentTimeMillis);\n     entity.addEvent(startEvent);\n \n     // publish before configurations published\n     putEntity(entity);\n \n     // publish application specific configurations\n     publishConfigurations(application.getConfiguration(), application.getId(),\n-        SliderTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n+        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n \n     // publish component as separate entity.\n     publishComponents(application.getComponents());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceAttemptRegistered(Application application) {\n    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, application.getName());\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE,\n        application.getState().toString());\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS,\n        application.getQuicklinks());\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish application specific configurations\n    publishConfigurations(application.getConfiguration(), application.getId(),\n        ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n\n    // publish component as separate entity.\n    publishComponents(application.getComponents());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "[appState-AppState]",
            "newValue": "[application-Application]"
          }
        }
      ]
    },
    "f4216b7bba511cc79439e7dab9f0282d831a16b2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6395. Integrate service app master to write data into ATSv2. Contributed by Rohith Sharma K S\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f4216b7bba511cc79439e7dab9f0282d831a16b2",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,33 @@\n+  public void serviceAttemptRegistered(AppState appState) {\n+    Application application \u003d appState.getClusterStatus();\n+    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n+        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n+\n+    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n+    entity.setCreatedTime(currentTimeMillis);\n+\n+    // create info keys\n+    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n+    entityInfos.put(SliderTimelineMetricsConstants.NAME, application.getName());\n+    entityInfos.put(SliderTimelineMetricsConstants.STATE,\n+        application.getState().toString());\n+    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,\n+        currentTimeMillis);\n+    entity.addInfo(entityInfos);\n+\n+    // add an event\n+    TimelineEvent startEvent \u003d new TimelineEvent();\n+    startEvent.setId(SliderTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n+    startEvent.setTimestamp(currentTimeMillis);\n+    entity.addEvent(startEvent);\n+\n+    // publish before configurations published\n+    putEntity(entity);\n+\n+    // publish application specific configurations\n+    publishConfigurations(application.getConfiguration(), application.getId(),\n+        SliderTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n+\n+    // publish component as separate entity.\n+    publishComponents(application.getComponents());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceAttemptRegistered(AppState appState) {\n    Application application \u003d appState.getClusterStatus();\n    long currentTimeMillis \u003d application.getLaunchTime() \u003d\u003d null\n        ? System.currentTimeMillis() : application.getLaunchTime().getTime();\n\n    TimelineEntity entity \u003d createServiceAttemptEntity(application.getId());\n    entity.setCreatedTime(currentTimeMillis);\n\n    // create info keys\n    Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n    entityInfos.put(SliderTimelineMetricsConstants.NAME, application.getName());\n    entityInfos.put(SliderTimelineMetricsConstants.STATE,\n        application.getState().toString());\n    entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_TIME,\n        currentTimeMillis);\n    entity.addInfo(entityInfos);\n\n    // add an event\n    TimelineEvent startEvent \u003d new TimelineEvent();\n    startEvent.setId(SliderTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\n    startEvent.setTimestamp(currentTimeMillis);\n    entity.addEvent(startEvent);\n\n    // publish before configurations published\n    putEntity(entity);\n\n    // publish application specific configurations\n    publishConfigurations(application.getConfiguration(), application.getId(),\n        SliderTimelineEntityType.SERVICE_ATTEMPT.toString(), true);\n\n    // publish component as separate entity.\n    publishComponents(application.getComponents());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/server/appmaster/timelineservice/ServiceTimelinePublisher.java"
    }
  }
}