{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "setFieldsFromProperties",
  "functionId": "setFieldsFromProperties___props-Properties__sd-StorageDirectory",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 613,
  "functionEndLine": 616,
  "numCommitsSeen": 81,
  "timeTaken": 6152,
  "changeHistory": [
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
    "e5b3171c3ba07e18d07df2765ded907e28c1b252",
    "46099ce7f1a1d5aab85d9408dc1454fcbe54f7e8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": "Ybodychange",
    "e5b3171c3ba07e18d07df2765ded907e28c1b252": "Ybodychange",
    "46099ce7f1a1d5aab85d9408dc1454fcbe54f7e8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Yrename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5526. Datanode cannot roll back to previous layout version. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 7:33 AM",
      "commitName": "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "10/01/13 4:09 PM",
      "commitNameOld": "82b218c605add2f5cf01c5aa21ab8c55fa5967fd",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 318.64,
      "commitsBetweenForRepo": 1933,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,4 @@\n   protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n       throws IOException {\n-    setLayoutVersion(props, sd);\n-    setcTime(props, sd);\n-    setStorageType(props, sd);\n-    setClusterId(props, layoutVersion, sd);\n-    \n-    // Read NamespaceID in version before federation\n-    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n-      setNamespaceID(props, sd);\n-    }\n-    \n-    // valid storage id, storage id may be empty\n-    String ssid \u003d props.getProperty(\"storageID\");\n-    if (ssid \u003d\u003d null) {\n-      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n-          + STORAGE_FILE_VERSION + \" is invalid.\");\n-    }\n-    String sid \u003d getStorageID();\n-    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n-      throw new InconsistentFSStateException(sd.getRoot(),\n-          \"has incompatible storage Id.\");\n-    }\n-    \n-    if (sid.equals(\"\")) { // update id only if it was empty\n-      setStorageID(ssid);\n-    }\n+    setFieldsFromProperties(props, sd, false, 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n      throws IOException {\n    setFieldsFromProperties(props, sd, false, 0);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "e5b3171c3ba07e18d07df2765ded907e28c1b252": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5494. Fix findbugs warnings for HDFS-2832.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1540924 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/11/13 6:36 PM",
      "commitName": "e5b3171c3ba07e18d07df2765ded907e28c1b252",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "11/11/13 4:48 PM",
      "commitNameOld": "26f2bd67f2979b16af3593beb412103d254599c4",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n       throws IOException {\n     setLayoutVersion(props, sd);\n     setcTime(props, sd);\n     setStorageType(props, sd);\n     setClusterId(props, layoutVersion, sd);\n     \n     // Read NamespaceID in version before federation\n     if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       setNamespaceID(props, sd);\n     }\n     \n \n     // valid storage id, storage id may be empty\n     String ssid \u003d props.getProperty(\"storageID\");\n     if (ssid \u003d\u003d null) {\n       throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n           + STORAGE_FILE_VERSION + \" is invalid.\");\n     }\n     String sid \u003d sd.getStorageUuid();\n     if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n           ssid.equals(\"\") || sid.equals(ssid))) {\n       throw new InconsistentFSStateException(sd.getRoot(),\n           \"has incompatible storage Id.\");\n     }\n \n     if (sid \u003d\u003d null) { // update id only if it was null\n       sd.setStorageUuid(ssid);\n     }\n \n     // Update the datanode UUID if present.\n     if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n       String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n \n       if (getDatanodeUuid() \u003d\u003d null) {\n         setDatanodeUuid(dnUuid);\n       } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n         throw new InconsistentFSStateException(sd.getRoot(),\n             \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n-            \", does not match \" + datanodeUuid + \" from other\" +\n+            \", does not match \" + getDatanodeUuid() + \" from other\" +\n             \" StorageDirectory.\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n      throws IOException {\n    setLayoutVersion(props, sd);\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n\n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d sd.getStorageUuid();\n    if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n          ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n\n    if (sid \u003d\u003d null) { // update id only if it was null\n      sd.setStorageUuid(ssid);\n    }\n\n    // Update the datanode UUID if present.\n    if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n      String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n\n      if (getDatanodeUuid() \u003d\u003d null) {\n        setDatanodeUuid(dnUuid);\n      } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n        throw new InconsistentFSStateException(sd.getRoot(),\n            \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n            \", does not match \" + getDatanodeUuid() + \" from other\" +\n            \" StorageDirectory.\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "46099ce7f1a1d5aab85d9408dc1454fcbe54f7e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4988. Datanode must support all the volumes as individual storages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1526969 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 9:05 AM",
      "commitName": "46099ce7f1a1d5aab85d9408dc1454fcbe54f7e8",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "25/08/13 8:18 PM",
      "commitNameOld": "73d14311bc847a29c2b8ec30bbfbaf59cd3cb713",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.53,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,44 @@\n   protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n       throws IOException {\n     setLayoutVersion(props, sd);\n     setcTime(props, sd);\n     setStorageType(props, sd);\n     setClusterId(props, layoutVersion, sd);\n     \n     // Read NamespaceID in version before federation\n     if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       setNamespaceID(props, sd);\n     }\n     \n+\n     // valid storage id, storage id may be empty\n     String ssid \u003d props.getProperty(\"storageID\");\n     if (ssid \u003d\u003d null) {\n       throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n           + STORAGE_FILE_VERSION + \" is invalid.\");\n     }\n-    String sid \u003d getStorageID();\n-    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n+    String sid \u003d sd.getStorageUuid();\n+    if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n+          ssid.equals(\"\") || sid.equals(ssid))) {\n       throw new InconsistentFSStateException(sd.getRoot(),\n           \"has incompatible storage Id.\");\n     }\n-    \n-    if (sid.equals(\"\")) { // update id only if it was empty\n-      setStorageID(ssid);\n+\n+    if (sid \u003d\u003d null) { // update id only if it was null\n+      sd.setStorageUuid(ssid);\n+    }\n+\n+    // Update the datanode UUID if present.\n+    if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n+      String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n+\n+      if (getDatanodeUuid() \u003d\u003d null) {\n+        setDatanodeUuid(dnUuid);\n+      } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n+        throw new InconsistentFSStateException(sd.getRoot(),\n+            \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n+            \", does not match \" + datanodeUuid + \" from other\" +\n+            \" StorageDirectory.\");\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n      throws IOException {\n    setLayoutVersion(props, sd);\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n\n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d sd.getStorageUuid();\n    if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n          ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n\n    if (sid \u003d\u003d null) { // update id only if it was null\n      sd.setStorageUuid(ssid);\n    }\n\n    // Update the datanode UUID if present.\n    if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n      String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n\n      if (getDatanodeUuid() \u003d\u003d null) {\n        setDatanodeUuid(dnUuid);\n      } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n        throw new InconsistentFSStateException(sd.getRoot(),\n            \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n            \", does not match \" + datanodeUuid + \" from other\" +\n            \" StorageDirectory.\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n      throws IOException {\n    setLayoutVersion(props, sd);\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d getStorageID();\n    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n    \n    if (sid.equals(\"\")) { // update id only if it was empty\n      setStorageID(ssid);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n      throws IOException {\n    setLayoutVersion(props, sd);\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d getStorageID();\n    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n    \n    if (sid.equals(\"\")) { // update id only if it was empty\n      setStorageID(ssid);\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Yrename",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/07/11 6:11 PM",
      "commitNameOld": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-  protected void getFields(Properties props, StorageDirectory sd)\n+  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n       throws IOException {\n     setLayoutVersion(props, sd);\n     setcTime(props, sd);\n     setStorageType(props, sd);\n     setClusterId(props, layoutVersion, sd);\n     \n     // Read NamespaceID in version before federation\n     if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       setNamespaceID(props, sd);\n     }\n     \n     // valid storage id, storage id may be empty\n     String ssid \u003d props.getProperty(\"storageID\");\n     if (ssid \u003d\u003d null) {\n       throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n           + STORAGE_FILE_VERSION + \" is invalid.\");\n     }\n     String sid \u003d getStorageID();\n     if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n       throw new InconsistentFSStateException(sd.getRoot(),\n           \"has incompatible storage Id.\");\n     }\n     \n     if (sid.equals(\"\")) { // update id only if it was empty\n       setStorageID(ssid);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setFieldsFromProperties(Properties props, StorageDirectory sd)\n      throws IOException {\n    setLayoutVersion(props, sd);\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d getStorageID();\n    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n    \n    if (sid.equals(\"\")) { // update id only if it was empty\n      setStorageID(ssid);\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldValue": "getFields",
        "newValue": "setFieldsFromProperties"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,28 @@\n+  protected void getFields(Properties props, StorageDirectory sd)\n+      throws IOException {\n+    setLayoutVersion(props, sd);\n+    setcTime(props, sd);\n+    setStorageType(props, sd);\n+    setClusterId(props, layoutVersion, sd);\n+    \n+    // Read NamespaceID in version before federation\n+    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+      setNamespaceID(props, sd);\n+    }\n+    \n+    // valid storage id, storage id may be empty\n+    String ssid \u003d props.getProperty(\"storageID\");\n+    if (ssid \u003d\u003d null) {\n+      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n+          + STORAGE_FILE_VERSION + \" is invalid.\");\n+    }\n+    String sid \u003d getStorageID();\n+    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n+      throw new InconsistentFSStateException(sd.getRoot(),\n+          \"has incompatible storage Id.\");\n+    }\n+    \n+    if (sid.equals(\"\")) { // update id only if it was empty\n+      setStorageID(ssid);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void getFields(Properties props, StorageDirectory sd)\n      throws IOException {\n    setLayoutVersion(props, sd);\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d getStorageID();\n    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n    \n    if (sid.equals(\"\")) { // update id only if it was empty\n      setStorageID(ssid);\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}