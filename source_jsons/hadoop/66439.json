{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSWebApp.java",
  "functionName": "handle",
  "functionId": "handle___target-String__baseRequest-Request__request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
  "functionStartLine": 134,
  "functionEndLine": 170,
  "numCommitsSeen": 14,
  "timeTaken": 2646,
  "changeHistory": [
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
          "commitDate": "27/10/16 4:09 PM",
          "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "30/04/15 3:34 AM",
          "commitNameOld": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 546.52,
          "commitsBetweenForRepo": 4082,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,37 @@\n-      public void handle(String target, HttpServletRequest request,\n-                         HttpServletResponse response, int dispatch) {\n+      public void handle(String target, Request baseRequest,\n+                         HttpServletRequest request,\n+                         HttpServletResponse response)\n+          throws IOException, ServletException {\n         try{\n           // timeunit\n           int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n           String timeunitLabel \u003d \"second\";\n           if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                   request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n             timeunit \u003d 1000 * 60;\n             timeunitLabel \u003d \"minute\";\n           }\n \n           // http request\n           if (target.equals(\"/\")) {\n             printPageIndex(request, response);\n           } else if (target.equals(\"/simulate\")) {\n             printPageSimulate(request, response, timeunit, timeunitLabel);\n           } else if (target.equals(\"/track\")) {\n             printPageTrack(request, response, timeunit, timeunitLabel);\n           } else\n             // js/css request\n             if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n               response.setCharacterEncoding(\"utf-8\");\n-              staticHandler.handle(target, request, response, dispatch);\n+              staticHandler.handle(target, baseRequest, request, response);\n             } else\n               // json request\n               if (target.equals(\"/simulateMetrics\")) {\n                 printJsonMetrics(request, response);\n               } else if (target.equals(\"/trackMetrics\")) {\n                 printJsonTrack(request, response);\n               }\n         } catch (Exception e) {\n           e.printStackTrace();\n         }\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public void handle(String target, Request baseRequest,\n                         HttpServletRequest request,\n                         HttpServletResponse response)\n          throws IOException, ServletException {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, baseRequest, request, response);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
          "extendedDetails": {
            "oldValue": "[target-String, request-HttpServletRequest, response-HttpServletResponse, dispatch-int]",
            "newValue": "[target-String, baseRequest-Request, request-HttpServletRequest, response-HttpServletResponse]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
          "commitDate": "27/10/16 4:09 PM",
          "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "30/04/15 3:34 AM",
          "commitNameOld": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 546.52,
          "commitsBetweenForRepo": 4082,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,37 @@\n-      public void handle(String target, HttpServletRequest request,\n-                         HttpServletResponse response, int dispatch) {\n+      public void handle(String target, Request baseRequest,\n+                         HttpServletRequest request,\n+                         HttpServletResponse response)\n+          throws IOException, ServletException {\n         try{\n           // timeunit\n           int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n           String timeunitLabel \u003d \"second\";\n           if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                   request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n             timeunit \u003d 1000 * 60;\n             timeunitLabel \u003d \"minute\";\n           }\n \n           // http request\n           if (target.equals(\"/\")) {\n             printPageIndex(request, response);\n           } else if (target.equals(\"/simulate\")) {\n             printPageSimulate(request, response, timeunit, timeunitLabel);\n           } else if (target.equals(\"/track\")) {\n             printPageTrack(request, response, timeunit, timeunitLabel);\n           } else\n             // js/css request\n             if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n               response.setCharacterEncoding(\"utf-8\");\n-              staticHandler.handle(target, request, response, dispatch);\n+              staticHandler.handle(target, baseRequest, request, response);\n             } else\n               // json request\n               if (target.equals(\"/simulateMetrics\")) {\n                 printJsonMetrics(request, response);\n               } else if (target.equals(\"/trackMetrics\")) {\n                 printJsonTrack(request, response);\n               }\n         } catch (Exception e) {\n           e.printStackTrace();\n         }\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public void handle(String target, Request baseRequest,\n                         HttpServletRequest request,\n                         HttpServletResponse response)\n          throws IOException, ServletException {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, baseRequest, request, response);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException, ServletException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
          "commitDate": "27/10/16 4:09 PM",
          "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "30/04/15 3:34 AM",
          "commitNameOld": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 546.52,
          "commitsBetweenForRepo": 4082,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,37 @@\n-      public void handle(String target, HttpServletRequest request,\n-                         HttpServletResponse response, int dispatch) {\n+      public void handle(String target, Request baseRequest,\n+                         HttpServletRequest request,\n+                         HttpServletResponse response)\n+          throws IOException, ServletException {\n         try{\n           // timeunit\n           int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n           String timeunitLabel \u003d \"second\";\n           if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                   request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n             timeunit \u003d 1000 * 60;\n             timeunitLabel \u003d \"minute\";\n           }\n \n           // http request\n           if (target.equals(\"/\")) {\n             printPageIndex(request, response);\n           } else if (target.equals(\"/simulate\")) {\n             printPageSimulate(request, response, timeunit, timeunitLabel);\n           } else if (target.equals(\"/track\")) {\n             printPageTrack(request, response, timeunit, timeunitLabel);\n           } else\n             // js/css request\n             if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n               response.setCharacterEncoding(\"utf-8\");\n-              staticHandler.handle(target, request, response, dispatch);\n+              staticHandler.handle(target, baseRequest, request, response);\n             } else\n               // json request\n               if (target.equals(\"/simulateMetrics\")) {\n                 printJsonMetrics(request, response);\n               } else if (target.equals(\"/trackMetrics\")) {\n                 printJsonTrack(request, response);\n               }\n         } catch (Exception e) {\n           e.printStackTrace();\n         }\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public void handle(String target, Request baseRequest,\n                         HttpServletRequest request,\n                         HttpServletResponse response)\n          throws IOException, ServletException {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, baseRequest, request, response);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,35 @@\n+      public void handle(String target, HttpServletRequest request,\n+                         HttpServletResponse response, int dispatch) {\n+        try{\n+          // timeunit\n+          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n+          String timeunitLabel \u003d \"second\";\n+          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n+                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n+            timeunit \u003d 1000 * 60;\n+            timeunitLabel \u003d \"minute\";\n+          }\n+\n+          // http request\n+          if (target.equals(\"/\")) {\n+            printPageIndex(request, response);\n+          } else if (target.equals(\"/simulate\")) {\n+            printPageSimulate(request, response, timeunit, timeunitLabel);\n+          } else if (target.equals(\"/track\")) {\n+            printPageTrack(request, response, timeunit, timeunitLabel);\n+          } else\n+            // js/css request\n+            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n+              response.setCharacterEncoding(\"utf-8\");\n+              staticHandler.handle(target, request, response, dispatch);\n+            } else\n+              // json request\n+              if (target.equals(\"/simulateMetrics\")) {\n+                printJsonMetrics(request, response);\n+              } else if (target.equals(\"/trackMetrics\")) {\n+                printJsonTrack(request, response);\n+              }\n+        } catch (Exception e) {\n+          e.printStackTrace();\n+        }\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public void handle(String target, HttpServletRequest request,\n                         HttpServletResponse response, int dispatch) {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, request, response, dispatch);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java"
    }
  }
}