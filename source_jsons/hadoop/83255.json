{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MutableRatesWithAggregation.java",
  "functionName": "snapshot",
  "functionId": "snapshot___rb-MetricsRecordBuilder__all-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRatesWithAggregation.java",
  "functionStartLine": 116,
  "functionEndLine": 131,
  "numCommitsSeen": 5,
  "timeTaken": 965,
  "changeHistory": [
    "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1",
    "77c13c385774c51766fe505397fa916754ac08d4"
  ],
  "changeHistoryShort": {
    "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1": "Ybodychange",
    "77c13c385774c51766fe505397fa916754ac08d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10917. Collect peer performance statistics on DataNode. Contributed by Xiaobing Zhou.\n",
      "commitDate": "22/12/16 11:46 PM",
      "commitName": "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "08/11/16 4:07 PM",
      "commitNameOld": "77c13c385774c51766fe505397fa916754ac08d4",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 44.32,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,16 @@\n   public synchronized void snapshot(MetricsRecordBuilder rb, boolean all) {\n     Iterator\u003cWeakReference\u003cConcurrentMap\u003cString, ThreadSafeSampleStat\u003e\u003e\u003e iter \u003d\n         weakReferenceQueue.iterator();\n     while (iter.hasNext()) {\n       ConcurrentMap\u003cString, ThreadSafeSampleStat\u003e map \u003d iter.next().get();\n       if (map \u003d\u003d null) {\n         // Thread has died; clean up its state\n         iter.remove();\n       } else {\n-        // Aggregate the thread\u0027s local samples into the global metrics\n-        for (Map.Entry\u003cString, ThreadSafeSampleStat\u003e entry : map.entrySet()) {\n-          String name \u003d entry.getKey();\n-          MutableRate globalMetric \u003d addMetricIfNotExists(name);\n-          entry.getValue().snapshotInto(globalMetric);\n-        }\n+        aggregateLocalStatesToGlobalMetrics(map);\n       }\n     }\n     for (MutableRate globalMetric : globalMetrics.values()) {\n       globalMetric.snapshot(rb, all);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void snapshot(MetricsRecordBuilder rb, boolean all) {\n    Iterator\u003cWeakReference\u003cConcurrentMap\u003cString, ThreadSafeSampleStat\u003e\u003e\u003e iter \u003d\n        weakReferenceQueue.iterator();\n    while (iter.hasNext()) {\n      ConcurrentMap\u003cString, ThreadSafeSampleStat\u003e map \u003d iter.next().get();\n      if (map \u003d\u003d null) {\n        // Thread has died; clean up its state\n        iter.remove();\n      } else {\n        aggregateLocalStatesToGlobalMetrics(map);\n      }\n    }\n    for (MutableRate globalMetric : globalMetrics.values()) {\n      globalMetric.snapshot(rb, all);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRatesWithAggregation.java",
      "extendedDetails": {}
    },
    "77c13c385774c51766fe505397fa916754ac08d4": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13782. Make MutableRates metrics thread-local write, aggregate-on-read. Contributed by Erik Krogen.\n",
      "commitDate": "08/11/16 4:07 PM",
      "commitName": "77c13c385774c51766fe505397fa916754ac08d4",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,21 @@\n+  public synchronized void snapshot(MetricsRecordBuilder rb, boolean all) {\n+    Iterator\u003cWeakReference\u003cConcurrentMap\u003cString, ThreadSafeSampleStat\u003e\u003e\u003e iter \u003d\n+        weakReferenceQueue.iterator();\n+    while (iter.hasNext()) {\n+      ConcurrentMap\u003cString, ThreadSafeSampleStat\u003e map \u003d iter.next().get();\n+      if (map \u003d\u003d null) {\n+        // Thread has died; clean up its state\n+        iter.remove();\n+      } else {\n+        // Aggregate the thread\u0027s local samples into the global metrics\n+        for (Map.Entry\u003cString, ThreadSafeSampleStat\u003e entry : map.entrySet()) {\n+          String name \u003d entry.getKey();\n+          MutableRate globalMetric \u003d addMetricIfNotExists(name);\n+          entry.getValue().snapshotInto(globalMetric);\n+        }\n+      }\n+    }\n+    for (MutableRate globalMetric : globalMetrics.values()) {\n+      globalMetric.snapshot(rb, all);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void snapshot(MetricsRecordBuilder rb, boolean all) {\n    Iterator\u003cWeakReference\u003cConcurrentMap\u003cString, ThreadSafeSampleStat\u003e\u003e\u003e iter \u003d\n        weakReferenceQueue.iterator();\n    while (iter.hasNext()) {\n      ConcurrentMap\u003cString, ThreadSafeSampleStat\u003e map \u003d iter.next().get();\n      if (map \u003d\u003d null) {\n        // Thread has died; clean up its state\n        iter.remove();\n      } else {\n        // Aggregate the thread\u0027s local samples into the global metrics\n        for (Map.Entry\u003cString, ThreadSafeSampleStat\u003e entry : map.entrySet()) {\n          String name \u003d entry.getKey();\n          MutableRate globalMetric \u003d addMetricIfNotExists(name);\n          entry.getValue().snapshotInto(globalMetric);\n        }\n      }\n    }\n    for (MutableRate globalMetric : globalMetrics.values()) {\n      globalMetric.snapshot(rb, all);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRatesWithAggregation.java"
    }
  }
}