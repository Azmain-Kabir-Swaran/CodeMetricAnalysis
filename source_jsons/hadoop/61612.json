{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "compare",
  "functionId": "compare___lhs-Resource__rhs-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 74,
  "functionEndLine": 100,
  "numCommitsSeen": 37,
  "timeTaken": 3027,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private int compare(Resource lhs, Resource rhs) {\n     boolean lhsGreater \u003d false;\n     boolean rhsGreater \u003d false;\n     int ret \u003d 0;\n \n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation lhsResourceInformation \u003d lhs\n           .getResourceInformation(i);\n       ResourceInformation rhsResourceInformation \u003d rhs\n           .getResourceInformation(i);\n       int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n       if (diff \u003e\u003d 1) {\n         lhsGreater \u003d true;\n       } else if (diff \u003c\u003d -1) {\n         rhsGreater \u003d true;\n       }\n     }\n     if (lhsGreater \u0026\u0026 rhsGreater) {\n       ret \u003d 0;\n     } else if (lhsGreater) {\n       ret \u003d 1;\n     } else if (rhsGreater) {\n       ret \u003d -1;\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int compare(Resource lhs, Resource rhs) {\n    boolean lhsGreater \u003d false;\n    boolean rhsGreater \u003d false;\n    int ret \u003d 0;\n\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation lhsResourceInformation \u003d lhs\n          .getResourceInformation(i);\n      ResourceInformation rhsResourceInformation \u003d rhs\n          .getResourceInformation(i);\n      int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n      if (diff \u003e\u003d 1) {\n        lhsGreater \u003d true;\n      } else if (diff \u003c\u003d -1) {\n        rhsGreater \u003d true;\n      }\n    }\n    if (lhsGreater \u0026\u0026 rhsGreater) {\n      ret \u003d 0;\n    } else if (lhsGreater) {\n      ret \u003d 1;\n    } else if (rhsGreater) {\n      ret \u003d -1;\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private int compare(Resource lhs, Resource rhs) {\n     boolean lhsGreater \u003d false;\n     boolean rhsGreater \u003d false;\n     int ret \u003d 0;\n \n-    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation lhsResourceInformation \u003d lhs\n           .getResourceInformation(i);\n       ResourceInformation rhsResourceInformation \u003d rhs\n           .getResourceInformation(i);\n       int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n       if (diff \u003e\u003d 1) {\n         lhsGreater \u003d true;\n       } else if (diff \u003c\u003d -1) {\n         rhsGreater \u003d true;\n       }\n     }\n     if (lhsGreater \u0026\u0026 rhsGreater) {\n       ret \u003d 0;\n     } else if (lhsGreater) {\n       ret \u003d 1;\n     } else if (rhsGreater) {\n       ret \u003d -1;\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int compare(Resource lhs, Resource rhs) {\n    boolean lhsGreater \u003d false;\n    boolean rhsGreater \u003d false;\n    int ret \u003d 0;\n\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation lhsResourceInformation \u003d lhs\n          .getResourceInformation(i);\n      ResourceInformation rhsResourceInformation \u003d rhs\n          .getResourceInformation(i);\n      int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n      if (diff \u003e\u003d 1) {\n        lhsGreater \u003d true;\n      } else if (diff \u003c\u003d -1) {\n        rhsGreater \u003d true;\n      }\n    }\n    if (lhsGreater \u0026\u0026 rhsGreater) {\n      ret \u003d 0;\n    } else if (lhsGreater) {\n      ret \u003d 1;\n    } else if (rhsGreater) {\n      ret \u003d -1;\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6892. [YARN-3926] Improve API implementation in Resources and DominantResourceCalculator class. Contributed by Sunil G.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "2b51b262aba0191b80dc93799574c0b959cb4f4e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,27 @@\n   private int compare(Resource lhs, Resource rhs) {\n     boolean lhsGreater \u003d false;\n     boolean rhsGreater \u003d false;\n     int ret \u003d 0;\n \n-    for (String rName : resourceNames) {\n-      try {\n-        ResourceInformation lhsResourceInformation \u003d\n-            lhs.getResourceInformation(rName);\n-        ResourceInformation rhsResourceInformation \u003d\n-            rhs.getResourceInformation(rName);\n-        int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n-        if (diff \u003e\u003d 1) {\n-          lhsGreater \u003d true;\n-        } else if (diff \u003c\u003d -1) {\n-          rhsGreater \u003d true;\n-        }\n-      } catch (ResourceNotFoundException ye) {\n-        throw new IllegalArgumentException(\n-            \"Error getting resource information for \" + rName, ye);\n+    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation lhsResourceInformation \u003d lhs\n+          .getResourceInformation(i);\n+      ResourceInformation rhsResourceInformation \u003d rhs\n+          .getResourceInformation(i);\n+      int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n+      if (diff \u003e\u003d 1) {\n+        lhsGreater \u003d true;\n+      } else if (diff \u003c\u003d -1) {\n+        rhsGreater \u003d true;\n       }\n     }\n     if (lhsGreater \u0026\u0026 rhsGreater) {\n       ret \u003d 0;\n     } else if (lhsGreater) {\n       ret \u003d 1;\n     } else if (rhsGreater) {\n       ret \u003d -1;\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int compare(Resource lhs, Resource rhs) {\n    boolean lhsGreater \u003d false;\n    boolean rhsGreater \u003d false;\n    int ret \u003d 0;\n\n    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation lhsResourceInformation \u003d lhs\n          .getResourceInformation(i);\n      ResourceInformation rhsResourceInformation \u003d rhs\n          .getResourceInformation(i);\n      int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n      if (diff \u003e\u003d 1) {\n        lhsGreater \u003d true;\n      } else if (diff \u003c\u003d -1) {\n        rhsGreater \u003d true;\n      }\n    }\n    if (lhsGreater \u0026\u0026 rhsGreater) {\n      ret \u003d 0;\n    } else if (lhsGreater) {\n      ret \u003d 1;\n    } else if (rhsGreater) {\n      ret \u003d -1;\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private int compare(Resource lhs, Resource rhs) {\n     boolean lhsGreater \u003d false;\n     boolean rhsGreater \u003d false;\n     int ret \u003d 0;\n \n     for (String rName : resourceNames) {\n       try {\n         ResourceInformation lhsResourceInformation \u003d\n             lhs.getResourceInformation(rName);\n         ResourceInformation rhsResourceInformation \u003d\n             rhs.getResourceInformation(rName);\n         int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n         if (diff \u003e\u003d 1) {\n           lhsGreater \u003d true;\n         } else if (diff \u003c\u003d -1) {\n           rhsGreater \u003d true;\n         }\n-      } catch (YarnException ye) {\n+      } catch (ResourceNotFoundException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + rName, ye);\n       }\n     }\n     if (lhsGreater \u0026\u0026 rhsGreater) {\n       ret \u003d 0;\n     } else if (lhsGreater) {\n       ret \u003d 1;\n     } else if (rhsGreater) {\n       ret \u003d -1;\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int compare(Resource lhs, Resource rhs) {\n    boolean lhsGreater \u003d false;\n    boolean rhsGreater \u003d false;\n    int ret \u003d 0;\n\n    for (String rName : resourceNames) {\n      try {\n        ResourceInformation lhsResourceInformation \u003d\n            lhs.getResourceInformation(rName);\n        ResourceInformation rhsResourceInformation \u003d\n            rhs.getResourceInformation(rName);\n        int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n        if (diff \u003e\u003d 1) {\n          lhsGreater \u003d true;\n        } else if (diff \u003c\u003d -1) {\n          rhsGreater \u003d true;\n        }\n      } catch (ResourceNotFoundException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + rName, ye);\n      }\n    }\n    if (lhsGreater \u0026\u0026 rhsGreater) {\n      ret \u003d 0;\n    } else if (lhsGreater) {\n      ret \u003d 1;\n    } else if (rhsGreater) {\n      ret \u003d -1;\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4172. Extend DominantResourceCalculator to account for all resources. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "32c91223f1bd06561ea4ce2d1944e8d9a847f18c",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,31 @@\n+  private int compare(Resource lhs, Resource rhs) {\n+    boolean lhsGreater \u003d false;\n+    boolean rhsGreater \u003d false;\n+    int ret \u003d 0;\n+\n+    for (String rName : resourceNames) {\n+      try {\n+        ResourceInformation lhsResourceInformation \u003d\n+            lhs.getResourceInformation(rName);\n+        ResourceInformation rhsResourceInformation \u003d\n+            rhs.getResourceInformation(rName);\n+        int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n+        if (diff \u003e\u003d 1) {\n+          lhsGreater \u003d true;\n+        } else if (diff \u003c\u003d -1) {\n+          rhsGreater \u003d true;\n+        }\n+      } catch (YarnException ye) {\n+        throw new IllegalArgumentException(\n+            \"Error getting resource information for \" + rName, ye);\n+      }\n+    }\n+    if (lhsGreater \u0026\u0026 rhsGreater) {\n+      ret \u003d 0;\n+    } else if (lhsGreater) {\n+      ret \u003d 1;\n+    } else if (rhsGreater) {\n+      ret \u003d -1;\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int compare(Resource lhs, Resource rhs) {\n    boolean lhsGreater \u003d false;\n    boolean rhsGreater \u003d false;\n    int ret \u003d 0;\n\n    for (String rName : resourceNames) {\n      try {\n        ResourceInformation lhsResourceInformation \u003d\n            lhs.getResourceInformation(rName);\n        ResourceInformation rhsResourceInformation \u003d\n            rhs.getResourceInformation(rName);\n        int diff \u003d lhsResourceInformation.compareTo(rhsResourceInformation);\n        if (diff \u003e\u003d 1) {\n          lhsGreater \u003d true;\n        } else if (diff \u003c\u003d -1) {\n          rhsGreater \u003d true;\n        }\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + rName, ye);\n      }\n    }\n    if (lhsGreater \u0026\u0026 rhsGreater) {\n      ret \u003d 0;\n    } else if (lhsGreater) {\n      ret \u003d 1;\n    } else if (rhsGreater) {\n      ret \u003d -1;\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}