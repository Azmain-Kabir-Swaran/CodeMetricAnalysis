{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerConfiguration.java",
  "functionName": "getQueueMappings",
  "functionId": "getQueueMappings",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
  "functionStartLine": 1108,
  "functionEndLine": 1152,
  "numCommitsSeen": 90,
  "timeTaken": 4846,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "7c5cecc3b3c00886a5bc39a9a8cad6ca1088b095",
    "5462d2176f7a64b236f06700cd247f946798cb26",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23",
    "519c4be95a091a072302e9ae52c2d221d80037a8"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "7c5cecc3b3c00886a5bc39a9a8cad6ca1088b095": "Ybodychange",
    "5462d2176f7a64b236f06700cd247f946798cb26": "Ybodychange",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": "Ybodychange",
    "519c4be95a091a072302e9ae52c2d221d80037a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "15/01/20 12:55 AM",
      "commitNameOld": "7c5cecc3b3c00886a5bc39a9a8cad6ca1088b095",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 70.1,
      "commitsBetweenForRepo": 228,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n   public List\u003cQueueMapping\u003e getQueueMappings() {\n     List\u003cQueueMapping\u003e mappings \u003d\n         new ArrayList\u003cQueueMapping\u003e();\n     Collection\u003cString\u003e mappingsString \u003d\n         getTrimmedStringCollection(QUEUE_MAPPING);\n     for (String mappingValue : mappingsString) {\n       String[] mapping \u003d\n           StringUtils.getTrimmedStringCollection(mappingValue, \":\")\n               .toArray(new String[] {});\n       if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n           || mapping[2].length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       QueueMapping m;\n       try {\n         QueueMapping.MappingType mappingType;\n         if (mapping[0].equals(\"u\")) {\n           mappingType \u003d QueueMapping.MappingType.USER;\n         } else if (mapping[0].equals(\"g\")) {\n           mappingType \u003d QueueMapping.MappingType.GROUP;\n         } else {\n           throw new IllegalArgumentException(\n               \"unknown mapping prefix \" + mapping[0]);\n         }\n+        //forcing the queue path to be split to parent and leafQueue, to make\n+        //queue mapping parentPath and queueName consistent\n         m \u003d QueueMappingBuilder.create()\n                 .type(mappingType)\n                 .source(mapping[1])\n-                .queue(mapping[2])\n+                .queuePath(QueuePlacementRuleUtils.extractQueuePath(mapping[2]))\n                 .build();\n       } catch (Throwable t) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       if (m !\u003d null) {\n         mappings.add(m);\n       }\n     }\n \n     return mappings;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cQueueMapping\u003e getQueueMappings() {\n    List\u003cQueueMapping\u003e mappings \u003d\n        new ArrayList\u003cQueueMapping\u003e();\n    Collection\u003cString\u003e mappingsString \u003d\n        getTrimmedStringCollection(QUEUE_MAPPING);\n    for (String mappingValue : mappingsString) {\n      String[] mapping \u003d\n          StringUtils.getTrimmedStringCollection(mappingValue, \":\")\n              .toArray(new String[] {});\n      if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n          || mapping[2].length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      QueueMapping m;\n      try {\n        QueueMapping.MappingType mappingType;\n        if (mapping[0].equals(\"u\")) {\n          mappingType \u003d QueueMapping.MappingType.USER;\n        } else if (mapping[0].equals(\"g\")) {\n          mappingType \u003d QueueMapping.MappingType.GROUP;\n        } else {\n          throw new IllegalArgumentException(\n              \"unknown mapping prefix \" + mapping[0]);\n        }\n        //forcing the queue path to be split to parent and leafQueue, to make\n        //queue mapping parentPath and queueName consistent\n        m \u003d QueueMappingBuilder.create()\n                .type(mappingType)\n                .source(mapping[1])\n                .queuePath(QueuePlacementRuleUtils.extractQueuePath(mapping[2]))\n                .build();\n      } catch (Throwable t) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      if (m !\u003d null) {\n        mappings.add(m);\n      }\n    }\n\n    return mappings;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "7c5cecc3b3c00886a5bc39a9a8cad6ca1088b095": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9970. Refactor TestUserGroupMappingPlacementRule#verifyQueueMapping. Contributed by Manikandan R\n",
      "commitDate": "15/01/20 12:55 AM",
      "commitName": "7c5cecc3b3c00886a5bc39a9a8cad6ca1088b095",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "26/11/19 4:41 AM",
      "commitNameOld": "448ffb12ecaf5b265d50ef18144950d4904f9ac0",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 49.84,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   public List\u003cQueueMapping\u003e getQueueMappings() {\n     List\u003cQueueMapping\u003e mappings \u003d\n         new ArrayList\u003cQueueMapping\u003e();\n     Collection\u003cString\u003e mappingsString \u003d\n         getTrimmedStringCollection(QUEUE_MAPPING);\n     for (String mappingValue : mappingsString) {\n       String[] mapping \u003d\n           StringUtils.getTrimmedStringCollection(mappingValue, \":\")\n               .toArray(new String[] {});\n       if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n           || mapping[2].length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       QueueMapping m;\n       try {\n         QueueMapping.MappingType mappingType;\n         if (mapping[0].equals(\"u\")) {\n           mappingType \u003d QueueMapping.MappingType.USER;\n         } else if (mapping[0].equals(\"g\")) {\n           mappingType \u003d QueueMapping.MappingType.GROUP;\n         } else {\n           throw new IllegalArgumentException(\n               \"unknown mapping prefix \" + mapping[0]);\n         }\n-        m \u003d new QueueMapping(\n-                mappingType,\n-                mapping[1],\n-                mapping[2]);\n+        m \u003d QueueMappingBuilder.create()\n+                .type(mappingType)\n+                .source(mapping[1])\n+                .queue(mapping[2])\n+                .build();\n       } catch (Throwable t) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       if (m !\u003d null) {\n         mappings.add(m);\n       }\n     }\n \n     return mappings;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cQueueMapping\u003e getQueueMappings() {\n    List\u003cQueueMapping\u003e mappings \u003d\n        new ArrayList\u003cQueueMapping\u003e();\n    Collection\u003cString\u003e mappingsString \u003d\n        getTrimmedStringCollection(QUEUE_MAPPING);\n    for (String mappingValue : mappingsString) {\n      String[] mapping \u003d\n          StringUtils.getTrimmedStringCollection(mappingValue, \":\")\n              .toArray(new String[] {});\n      if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n          || mapping[2].length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      QueueMapping m;\n      try {\n        QueueMapping.MappingType mappingType;\n        if (mapping[0].equals(\"u\")) {\n          mappingType \u003d QueueMapping.MappingType.USER;\n        } else if (mapping[0].equals(\"g\")) {\n          mappingType \u003d QueueMapping.MappingType.GROUP;\n        } else {\n          throw new IllegalArgumentException(\n              \"unknown mapping prefix \" + mapping[0]);\n        }\n        m \u003d QueueMappingBuilder.create()\n                .type(mappingType)\n                .source(mapping[1])\n                .queue(mapping[2])\n                .build();\n      } catch (Throwable t) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      if (m !\u003d null) {\n        mappings.add(m);\n      }\n    }\n\n    return mappings;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "5462d2176f7a64b236f06700cd247f946798cb26": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9760. Support configuring application priorities on a workflow level. Contributed by Varun Saxena\n",
      "commitDate": "08/10/19 11:20 AM",
      "commitName": "5462d2176f7a64b236f06700cd247f946798cb26",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "24/09/19 1:51 PM",
      "commitNameOld": "c2731d4b6399f88f76341ed697e80652ed1b61ea",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 13.89,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public List\u003cQueueMapping\u003e getQueueMappings() {\n     List\u003cQueueMapping\u003e mappings \u003d\n         new ArrayList\u003cQueueMapping\u003e();\n     Collection\u003cString\u003e mappingsString \u003d\n         getTrimmedStringCollection(QUEUE_MAPPING);\n     for (String mappingValue : mappingsString) {\n       String[] mapping \u003d\n-          getTrimmedStringCollection(mappingValue, \":\")\n+          StringUtils.getTrimmedStringCollection(mappingValue, \":\")\n               .toArray(new String[] {});\n       if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n           || mapping[2].length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       QueueMapping m;\n       try {\n         QueueMapping.MappingType mappingType;\n         if (mapping[0].equals(\"u\")) {\n           mappingType \u003d QueueMapping.MappingType.USER;\n         } else if (mapping[0].equals(\"g\")) {\n           mappingType \u003d QueueMapping.MappingType.GROUP;\n         } else {\n           throw new IllegalArgumentException(\n               \"unknown mapping prefix \" + mapping[0]);\n         }\n         m \u003d new QueueMapping(\n                 mappingType,\n                 mapping[1],\n                 mapping[2]);\n       } catch (Throwable t) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       if (m !\u003d null) {\n         mappings.add(m);\n       }\n     }\n \n     return mappings;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cQueueMapping\u003e getQueueMappings() {\n    List\u003cQueueMapping\u003e mappings \u003d\n        new ArrayList\u003cQueueMapping\u003e();\n    Collection\u003cString\u003e mappingsString \u003d\n        getTrimmedStringCollection(QUEUE_MAPPING);\n    for (String mappingValue : mappingsString) {\n      String[] mapping \u003d\n          StringUtils.getTrimmedStringCollection(mappingValue, \":\")\n              .toArray(new String[] {});\n      if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n          || mapping[2].length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      QueueMapping m;\n      try {\n        QueueMapping.MappingType mappingType;\n        if (mapping[0].equals(\"u\")) {\n          mappingType \u003d QueueMapping.MappingType.USER;\n        } else if (mapping[0].equals(\"g\")) {\n          mappingType \u003d QueueMapping.MappingType.GROUP;\n        } else {\n          throw new IllegalArgumentException(\n              \"unknown mapping prefix \" + mapping[0]);\n        }\n        m \u003d new QueueMapping(\n                mappingType,\n                mapping[1],\n                mapping[2]);\n      } catch (Throwable t) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      if (m !\u003d null) {\n        mappings.add(m);\n      }\n    }\n\n    return mappings;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3635. Refactored current queue mapping implementation in CapacityScheduler to use a generic PlacementManager framework. Contributed by Wangda Tan\n",
      "commitDate": "15/09/15 12:39 AM",
      "commitName": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
      "commitAuthor": "Jian He",
      "commitDateOld": "21/07/15 9:57 AM",
      "commitNameOld": "c39ca541f498712133890961598bbff50d89d68b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 55.61,
      "commitsBetweenForRepo": 310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public List\u003cQueueMapping\u003e getQueueMappings() {\n     List\u003cQueueMapping\u003e mappings \u003d\n-        new ArrayList\u003cCapacitySchedulerConfiguration.QueueMapping\u003e();\n+        new ArrayList\u003cQueueMapping\u003e();\n     Collection\u003cString\u003e mappingsString \u003d\n         getTrimmedStringCollection(QUEUE_MAPPING);\n     for (String mappingValue : mappingsString) {\n       String[] mapping \u003d\n           getTrimmedStringCollection(mappingValue, \":\")\n               .toArray(new String[] {});\n       if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n           || mapping[2].length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       QueueMapping m;\n       try {\n         QueueMapping.MappingType mappingType;\n         if (mapping[0].equals(\"u\")) {\n           mappingType \u003d QueueMapping.MappingType.USER;\n         } else if (mapping[0].equals(\"g\")) {\n           mappingType \u003d QueueMapping.MappingType.GROUP;\n         } else {\n           throw new IllegalArgumentException(\n               \"unknown mapping prefix \" + mapping[0]);\n         }\n         m \u003d new QueueMapping(\n                 mappingType,\n                 mapping[1],\n                 mapping[2]);\n       } catch (Throwable t) {\n         throw new IllegalArgumentException(\n             \"Illegal queue mapping \" + mappingValue);\n       }\n \n       if (m !\u003d null) {\n         mappings.add(m);\n       }\n     }\n \n     return mappings;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cQueueMapping\u003e getQueueMappings() {\n    List\u003cQueueMapping\u003e mappings \u003d\n        new ArrayList\u003cQueueMapping\u003e();\n    Collection\u003cString\u003e mappingsString \u003d\n        getTrimmedStringCollection(QUEUE_MAPPING);\n    for (String mappingValue : mappingsString) {\n      String[] mapping \u003d\n          getTrimmedStringCollection(mappingValue, \":\")\n              .toArray(new String[] {});\n      if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n          || mapping[2].length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      QueueMapping m;\n      try {\n        QueueMapping.MappingType mappingType;\n        if (mapping[0].equals(\"u\")) {\n          mappingType \u003d QueueMapping.MappingType.USER;\n        } else if (mapping[0].equals(\"g\")) {\n          mappingType \u003d QueueMapping.MappingType.GROUP;\n        } else {\n          throw new IllegalArgumentException(\n              \"unknown mapping prefix \" + mapping[0]);\n        }\n        m \u003d new QueueMapping(\n                mappingType,\n                mapping[1],\n                mapping[2]);\n      } catch (Throwable t) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      if (m !\u003d null) {\n        mappings.add(m);\n      }\n    }\n\n    return mappings;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "519c4be95a091a072302e9ae52c2d221d80037a8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2411. Support simple user and group mappings to queues. Contributed by Ram Venkatesh\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/14 11:08 PM",
      "commitName": "519c4be95a091a072302e9ae52c2d221d80037a8",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,42 @@\n+  public List\u003cQueueMapping\u003e getQueueMappings() {\n+    List\u003cQueueMapping\u003e mappings \u003d\n+        new ArrayList\u003cCapacitySchedulerConfiguration.QueueMapping\u003e();\n+    Collection\u003cString\u003e mappingsString \u003d\n+        getTrimmedStringCollection(QUEUE_MAPPING);\n+    for (String mappingValue : mappingsString) {\n+      String[] mapping \u003d\n+          getTrimmedStringCollection(mappingValue, \":\")\n+              .toArray(new String[] {});\n+      if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n+          || mapping[2].length() \u003d\u003d 0) {\n+        throw new IllegalArgumentException(\n+            \"Illegal queue mapping \" + mappingValue);\n+      }\n+\n+      QueueMapping m;\n+      try {\n+        QueueMapping.MappingType mappingType;\n+        if (mapping[0].equals(\"u\")) {\n+          mappingType \u003d QueueMapping.MappingType.USER;\n+        } else if (mapping[0].equals(\"g\")) {\n+          mappingType \u003d QueueMapping.MappingType.GROUP;\n+        } else {\n+          throw new IllegalArgumentException(\n+              \"unknown mapping prefix \" + mapping[0]);\n+        }\n+        m \u003d new QueueMapping(\n+                mappingType,\n+                mapping[1],\n+                mapping[2]);\n+      } catch (Throwable t) {\n+        throw new IllegalArgumentException(\n+            \"Illegal queue mapping \" + mappingValue);\n+      }\n+\n+      if (m !\u003d null) {\n+        mappings.add(m);\n+      }\n+    }\n+\n+    return mappings;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cQueueMapping\u003e getQueueMappings() {\n    List\u003cQueueMapping\u003e mappings \u003d\n        new ArrayList\u003cCapacitySchedulerConfiguration.QueueMapping\u003e();\n    Collection\u003cString\u003e mappingsString \u003d\n        getTrimmedStringCollection(QUEUE_MAPPING);\n    for (String mappingValue : mappingsString) {\n      String[] mapping \u003d\n          getTrimmedStringCollection(mappingValue, \":\")\n              .toArray(new String[] {});\n      if (mapping.length !\u003d 3 || mapping[1].length() \u003d\u003d 0\n          || mapping[2].length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      QueueMapping m;\n      try {\n        QueueMapping.MappingType mappingType;\n        if (mapping[0].equals(\"u\")) {\n          mappingType \u003d QueueMapping.MappingType.USER;\n        } else if (mapping[0].equals(\"g\")) {\n          mappingType \u003d QueueMapping.MappingType.GROUP;\n        } else {\n          throw new IllegalArgumentException(\n              \"unknown mapping prefix \" + mapping[0]);\n        }\n        m \u003d new QueueMapping(\n                mappingType,\n                mapping[1],\n                mapping[2]);\n      } catch (Throwable t) {\n        throw new IllegalArgumentException(\n            \"Illegal queue mapping \" + mappingValue);\n      }\n\n      if (m !\u003d null) {\n        mappings.add(m);\n      }\n    }\n\n    return mappings;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java"
    }
  }
}