{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSPreemptionThread.java",
  "functionName": "identifyContainersToPreempt",
  "functionId": "identifyContainersToPreempt___starvedApp-FSAppAttempt",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
  "functionStartLine": 107,
  "functionEndLine": 141,
  "numCommitsSeen": 14,
  "timeTaken": 5515,
  "changeHistory": [
    "215f2052fc3b7e366e8bd1bd332663966fa9206c",
    "e89941fdbb3b382eeb487d32e5194909610ac334",
    "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5",
    "2bde3aedf139368fc71f053d8dd6580b498ff46d",
    "9902be72cbf7a170caa5cb1f13c227d881a39064",
    "c3375175d616e0380560f89d491b6b9753a8f3e1",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
    "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "10468529a9b858bd945e7ecb063c9c1438efa474"
  ],
  "changeHistoryShort": {
    "215f2052fc3b7e366e8bd1bd332663966fa9206c": "Ybodychange",
    "e89941fdbb3b382eeb487d32e5194909610ac334": "Ybodychange",
    "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5": "Ybodychange",
    "2bde3aedf139368fc71f053d8dd6580b498ff46d": "Ybodychange",
    "9902be72cbf7a170caa5cb1f13c227d881a39064": "Ybodychange",
    "c3375175d616e0380560f89d491b6b9753a8f3e1": "Ybodychange",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Ymultichange(Yreturntypechange,Ybodychange)",
    "abedb8a9d86b4593a37fd3d2313fbcb057c7846a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Yintroduced"
  },
  "changeHistoryDetails": {
    "215f2052fc3b7e366e8bd1bd332663966fa9206c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9984. FSPreemptionThread can cause NullPointerException while app is unregistered with containers running on a node. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "19/11/19 12:33 AM",
      "commitName": "215f2052fc3b7e366e8bd1bd332663966fa9206c",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 259.14,
      "commitsBetweenForRepo": 1864,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n     // Iterate through enough RRs to address app\u0027s starvation\n     for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n       List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n               .getNodesByResourceName(rr.getResourceName());\n       for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n         PreemptableContainers bestContainers \u003d\n             getBestPreemptableContainers(rr, potentialNodes);\n         if (bestContainers !\u003d null) {\n           List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n           if (containers.size() \u003e 0) {\n             containersToPreempt.addAll(containers);\n             // Reserve the containers for the starved app\n             trackPreemptionsAgainstNode(containers, starvedApp);\n             // Warn application about containers to be killed\n             for (RMContainer container : containers) {\n               FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                       container.getApplicationAttemptId());\n-              LOG.info(\"Preempting container \" + container +\n-                      \" from queue \" + app.getQueueName());\n-              app.trackContainerForPreemption(container);\n+              LOG.info(\"Preempting container \" + container + \" from queue: \"\n+                  + (app !\u003d null ? app.getQueueName() : \"unknown\"));\n+              // If the app has unregistered while building the container list\n+              // the app might be null, skip notifying the app\n+              if (app !\u003d null) {\n+                app.trackContainerForPreemption(container);\n+              }\n             }\n           }\n         }\n       }\n     } // End of iteration over RRs\n     return containersToPreempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n              .getNodesByResourceName(rr.getResourceName());\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d\n            getBestPreemptableContainers(rr, potentialNodes);\n        if (bestContainers !\u003d null) {\n          List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n          if (containers.size() \u003e 0) {\n            containersToPreempt.addAll(containers);\n            // Reserve the containers for the starved app\n            trackPreemptionsAgainstNode(containers, starvedApp);\n            // Warn application about containers to be killed\n            for (RMContainer container : containers) {\n              FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                      container.getApplicationAttemptId());\n              LOG.info(\"Preempting container \" + container + \" from queue: \"\n                  + (app !\u003d null ? app.getQueueName() : \"unknown\"));\n              // If the app has unregistered while building the container list\n              // the app might be null, skip notifying the app\n              if (app !\u003d null) {\n                app.trackContainerForPreemption(container);\n              }\n            }\n          }\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "e89941fdbb3b382eeb487d32e5194909610ac334": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9041. Performance Optimization of method FSPreemptionThread#identifyContainersToPreempt. Contributed by Wanqiang Ji.\n",
      "commitDate": "04/12/18 10:08 AM",
      "commitName": "e89941fdbb3b382eeb487d32e5194909610ac334",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "05/11/18 9:14 PM",
      "commitNameOld": "c7fcca0d7ec9e31d43ef3040ecd576ec808f1f8b",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 28.54,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,31 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n     // Iterate through enough RRs to address app\u0027s starvation\n     for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n       List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n               .getNodesByResourceName(rr.getResourceName());\n       for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n         PreemptableContainers bestContainers \u003d\n-                identifyContainersToPreemptForOneContainer(potentialNodes, rr);\n-\n-        // Don\u0027t preempt AM containers just to satisfy local requests if relax\n-        // locality is enabled.\n-        if (bestContainers !\u003d null\n-                \u0026\u0026 bestContainers.numAMContainers \u003e 0\n-                \u0026\u0026 !ResourceRequest.isAnyLocation(rr.getResourceName())\n-                \u0026\u0026 rr.getRelaxLocality()) {\n-          bestContainers \u003d identifyContainersToPreemptForOneContainer(\n-                  scheduler.getNodeTracker().getAllNodes(), rr);\n-        }\n-\n+            getBestPreemptableContainers(rr, potentialNodes);\n         if (bestContainers !\u003d null) {\n           List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n           if (containers.size() \u003e 0) {\n             containersToPreempt.addAll(containers);\n             // Reserve the containers for the starved app\n             trackPreemptionsAgainstNode(containers, starvedApp);\n             // Warn application about containers to be killed\n             for (RMContainer container : containers) {\n               FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                       container.getApplicationAttemptId());\n               LOG.info(\"Preempting container \" + container +\n                       \" from queue \" + app.getQueueName());\n               app.trackContainerForPreemption(container);\n             }\n           }\n         }\n       }\n     } // End of iteration over RRs\n     return containersToPreempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n              .getNodesByResourceName(rr.getResourceName());\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d\n            getBestPreemptableContainers(rr, potentialNodes);\n        if (bestContainers !\u003d null) {\n          List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n          if (containers.size() \u003e 0) {\n            containersToPreempt.addAll(containers);\n            // Reserve the containers for the starved app\n            trackPreemptionsAgainstNode(containers, starvedApp);\n            // Warn application about containers to be killed\n            for (RMContainer container : containers) {\n              FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                      container.getApplicationAttemptId());\n              LOG.info(\"Preempting container \" + container +\n                      \" from queue \" + app.getQueueName());\n              app.trackContainerForPreemption(container);\n            }\n          }\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7655. Avoid AM preemption caused by RRs for specific nodes or racks. Contributed by Steven Rand.\n",
      "commitDate": "08/02/18 12:32 PM",
      "commitName": "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "16/01/18 2:46 PM",
      "commitNameOld": "370f1c6283813dc1c7d001f44930e3c79c140c54",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 22.91,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,42 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n     // Iterate through enough RRs to address app\u0027s starvation\n     for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n+      List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n+              .getNodesByResourceName(rr.getResourceName());\n       for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n-        PreemptableContainers bestContainers \u003d null;\n-        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n-            .getNodesByResourceName(rr.getResourceName());\n-        int maxAMContainers \u003d Integer.MAX_VALUE;\n+        PreemptableContainers bestContainers \u003d\n+                identifyContainersToPreemptForOneContainer(potentialNodes, rr);\n \n-        for (FSSchedulerNode node : potentialNodes) {\n-          PreemptableContainers preemptableContainers \u003d\n-              identifyContainersToPreemptOnNode(\n-                  rr.getCapability(), node, maxAMContainers);\n-\n-          if (preemptableContainers !\u003d null) {\n-            // This set is better than any previously identified set.\n-            bestContainers \u003d preemptableContainers;\n-            maxAMContainers \u003d bestContainers.numAMContainers;\n-\n-            if (maxAMContainers \u003d\u003d 0) {\n-              break;\n-            }\n-          }\n-        } // End of iteration through nodes for one RR\n+        // Don\u0027t preempt AM containers just to satisfy local requests if relax\n+        // locality is enabled.\n+        if (bestContainers !\u003d null\n+                \u0026\u0026 bestContainers.numAMContainers \u003e 0\n+                \u0026\u0026 !ResourceRequest.isAnyLocation(rr.getResourceName())\n+                \u0026\u0026 rr.getRelaxLocality()) {\n+          bestContainers \u003d identifyContainersToPreemptForOneContainer(\n+                  scheduler.getNodeTracker().getAllNodes(), rr);\n+        }\n \n         if (bestContainers !\u003d null) {\n           List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n           if (containers.size() \u003e 0) {\n             containersToPreempt.addAll(containers);\n             // Reserve the containers for the starved app\n             trackPreemptionsAgainstNode(containers, starvedApp);\n             // Warn application about containers to be killed\n             for (RMContainer container : containers) {\n               FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                       container.getApplicationAttemptId());\n               LOG.info(\"Preempting container \" + container +\n                       \" from queue \" + app.getQueueName());\n               app.trackContainerForPreemption(container);\n             }\n           }\n         }\n       }\n     } // End of iteration over RRs\n     return containersToPreempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n              .getNodesByResourceName(rr.getResourceName());\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d\n                identifyContainersToPreemptForOneContainer(potentialNodes, rr);\n\n        // Don\u0027t preempt AM containers just to satisfy local requests if relax\n        // locality is enabled.\n        if (bestContainers !\u003d null\n                \u0026\u0026 bestContainers.numAMContainers \u003e 0\n                \u0026\u0026 !ResourceRequest.isAnyLocation(rr.getResourceName())\n                \u0026\u0026 rr.getRelaxLocality()) {\n          bestContainers \u003d identifyContainersToPreemptForOneContainer(\n                  scheduler.getNodeTracker().getAllNodes(), rr);\n        }\n\n        if (bestContainers !\u003d null) {\n          List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n          if (containers.size() \u003e 0) {\n            containersToPreempt.addAll(containers);\n            // Reserve the containers for the starved app\n            trackPreemptionsAgainstNode(containers, starvedApp);\n            // Warn application about containers to be killed\n            for (RMContainer container : containers) {\n              FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                      container.getApplicationAttemptId());\n              LOG.info(\"Preempting container \" + container +\n                      \" from queue \" + app.getQueueName());\n              app.trackContainerForPreemption(container);\n            }\n          }\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "2bde3aedf139368fc71f053d8dd6580b498ff46d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7290. Method canContainerBePreempted can return true when it shouldn\u0027t. (Contributed by Steven Rand)\n",
      "commitDate": "24/11/17 11:32 PM",
      "commitName": "2bde3aedf139368fc71f053d8dd6580b498ff46d",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "27/07/17 11:19 PM",
      "commitNameOld": "9902be72cbf7a170caa5cb1f13c227d881a39064",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 120.05,
      "commitsBetweenForRepo": 1058,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,48 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n     // Iterate through enough RRs to address app\u0027s starvation\n     for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n       for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n         PreemptableContainers bestContainers \u003d null;\n         List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n             .getNodesByResourceName(rr.getResourceName());\n         int maxAMContainers \u003d Integer.MAX_VALUE;\n \n         for (FSSchedulerNode node : potentialNodes) {\n           PreemptableContainers preemptableContainers \u003d\n               identifyContainersToPreemptOnNode(\n                   rr.getCapability(), node, maxAMContainers);\n \n           if (preemptableContainers !\u003d null) {\n             // This set is better than any previously identified set.\n             bestContainers \u003d preemptableContainers;\n             maxAMContainers \u003d bestContainers.numAMContainers;\n \n             if (maxAMContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         } // End of iteration through nodes for one RR\n \n-        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n-          containersToPreempt.addAll(bestContainers.containers);\n-          // Reserve the containers for the starved app\n-          trackPreemptionsAgainstNode(bestContainers.containers, starvedApp);\n+        if (bestContainers !\u003d null) {\n+          List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n+          if (containers.size() \u003e 0) {\n+            containersToPreempt.addAll(containers);\n+            // Reserve the containers for the starved app\n+            trackPreemptionsAgainstNode(containers, starvedApp);\n+            // Warn application about containers to be killed\n+            for (RMContainer container : containers) {\n+              FSAppAttempt app \u003d scheduler.getSchedulerApp(\n+                      container.getApplicationAttemptId());\n+              LOG.info(\"Preempting container \" + container +\n+                      \" from queue \" + app.getQueueName());\n+              app.trackContainerForPreemption(container);\n+            }\n+          }\n         }\n       }\n     } // End of iteration over RRs\n     return containersToPreempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d null;\n        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n            .getNodesByResourceName(rr.getResourceName());\n        int maxAMContainers \u003d Integer.MAX_VALUE;\n\n        for (FSSchedulerNode node : potentialNodes) {\n          PreemptableContainers preemptableContainers \u003d\n              identifyContainersToPreemptOnNode(\n                  rr.getCapability(), node, maxAMContainers);\n\n          if (preemptableContainers !\u003d null) {\n            // This set is better than any previously identified set.\n            bestContainers \u003d preemptableContainers;\n            maxAMContainers \u003d bestContainers.numAMContainers;\n\n            if (maxAMContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        } // End of iteration through nodes for one RR\n\n        if (bestContainers !\u003d null) {\n          List\u003cRMContainer\u003e containers \u003d bestContainers.getAllContainers();\n          if (containers.size() \u003e 0) {\n            containersToPreempt.addAll(containers);\n            // Reserve the containers for the starved app\n            trackPreemptionsAgainstNode(containers, starvedApp);\n            // Warn application about containers to be killed\n            for (RMContainer container : containers) {\n              FSAppAttempt app \u003d scheduler.getSchedulerApp(\n                      container.getApplicationAttemptId());\n              LOG.info(\"Preempting container \" + container +\n                      \" from queue \" + app.getQueueName());\n              app.trackContainerForPreemption(container);\n            }\n          }\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "9902be72cbf7a170caa5cb1f13c227d881a39064": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6864. FSPreemptionThread cleanup for readability. (Daniel Templeton via Yufei Gu)\n",
      "commitDate": "27/07/17 11:19 PM",
      "commitName": "9902be72cbf7a170caa5cb1f13c227d881a39064",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "12/04/17 2:21 PM",
      "commitNameOld": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 106.37,
      "commitsBetweenForRepo": 519,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n     // Iterate through enough RRs to address app\u0027s starvation\n     for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n       for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n         PreemptableContainers bestContainers \u003d null;\n         List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n             .getNodesByResourceName(rr.getResourceName());\n+        int maxAMContainers \u003d Integer.MAX_VALUE;\n+\n         for (FSSchedulerNode node : potentialNodes) {\n-          int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n-              Integer.MAX_VALUE : bestContainers.numAMContainers;\n           PreemptableContainers preemptableContainers \u003d\n               identifyContainersToPreemptOnNode(\n                   rr.getCapability(), node, maxAMContainers);\n+\n           if (preemptableContainers !\u003d null) {\n             // This set is better than any previously identified set.\n             bestContainers \u003d preemptableContainers;\n-            if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n+            maxAMContainers \u003d bestContainers.numAMContainers;\n+\n+            if (maxAMContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         } // End of iteration through nodes for one RR\n \n         if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n           containersToPreempt.addAll(bestContainers.containers);\n           // Reserve the containers for the starved app\n           trackPreemptionsAgainstNode(bestContainers.containers, starvedApp);\n         }\n       }\n     } // End of iteration over RRs\n     return containersToPreempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d null;\n        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n            .getNodesByResourceName(rr.getResourceName());\n        int maxAMContainers \u003d Integer.MAX_VALUE;\n\n        for (FSSchedulerNode node : potentialNodes) {\n          PreemptableContainers preemptableContainers \u003d\n              identifyContainersToPreemptOnNode(\n                  rr.getCapability(), node, maxAMContainers);\n\n          if (preemptableContainers !\u003d null) {\n            // This set is better than any previously identified set.\n            bestContainers \u003d preemptableContainers;\n            maxAMContainers \u003d bestContainers.numAMContainers;\n\n            if (maxAMContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        } // End of iteration through nodes for one RR\n\n        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n          containersToPreempt.addAll(bestContainers.containers);\n          // Reserve the containers for the starved app\n          trackPreemptionsAgainstNode(bestContainers.containers, starvedApp);\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "c3375175d616e0380560f89d491b6b9753a8f3e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
      "commitDate": "12/04/17 2:21 PM",
      "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "26/02/17 8:16 PM",
      "commitNameOld": "815d53506fb0c5ca029c993d6b094db2ac0ca6eb",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 44.71,
      "commitsBetweenForRepo": 287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,34 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n     // Iterate through enough RRs to address app\u0027s starvation\n     for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n       for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n         PreemptableContainers bestContainers \u003d null;\n         List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n             .getNodesByResourceName(rr.getResourceName());\n         for (FSSchedulerNode node : potentialNodes) {\n-          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n-          if (isNodeAlreadyReserved(node, starvedApp)) {\n-            continue;\n-          }\n-\n           int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n               Integer.MAX_VALUE : bestContainers.numAMContainers;\n           PreemptableContainers preemptableContainers \u003d\n               identifyContainersToPreemptOnNode(\n                   rr.getCapability(), node, maxAMContainers);\n           if (preemptableContainers !\u003d null) {\n             // This set is better than any previously identified set.\n             bestContainers \u003d preemptableContainers;\n             if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         } // End of iteration through nodes for one RR\n \n         if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n           containersToPreempt.addAll(bestContainers.containers);\n-          trackPreemptionsAgainstNode(bestContainers.containers);\n+          // Reserve the containers for the starved app\n+          trackPreemptionsAgainstNode(bestContainers.containers, starvedApp);\n         }\n       }\n     } // End of iteration over RRs\n     return containersToPreempt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d null;\n        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n            .getNodesByResourceName(rr.getResourceName());\n        for (FSSchedulerNode node : potentialNodes) {\n          int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n              Integer.MAX_VALUE : bestContainers.numAMContainers;\n          PreemptableContainers preemptableContainers \u003d\n              identifyContainersToPreemptOnNode(\n                  rr.getCapability(), node, maxAMContainers);\n          if (preemptableContainers !\u003d null) {\n            // This set is better than any previously identified set.\n            bestContainers \u003d preemptableContainers;\n            if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        } // End of iteration through nodes for one RR\n\n        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n          containersToPreempt.addAll(bestContainers.containers);\n          // Reserve the containers for the starved app\n          trackPreemptionsAgainstNode(bestContainers.containers, starvedApp);\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
          "commitDate": "15/02/17 11:16 PM",
          "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/01/17 12:17 PM",
          "commitNameOld": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 21.46,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,38 @@\n-  private PreemptableContainers identifyContainersToPreempt(\n+  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n-    PreemptableContainers bestContainers \u003d null;\n+    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n-    // Find the nodes that match the next resource request\n-    SchedulingPlacementSet nextPs \u003d\n-        starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n-    PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n-    // TODO (KK): Should we check other resource requests if we can\u0027t match\n-    // the first one?\n+    // Iterate through enough RRs to address app\u0027s starvation\n+    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n+      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n+        PreemptableContainers bestContainers \u003d null;\n+        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n+            .getNodesByResourceName(rr.getResourceName());\n+        for (FSSchedulerNode node : potentialNodes) {\n+          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n+          if (isNodeAlreadyReserved(node, starvedApp)) {\n+            continue;\n+          }\n \n-    Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n+          int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n+              Integer.MAX_VALUE : bestContainers.numAMContainers;\n+          PreemptableContainers preemptableContainers \u003d\n+              identifyContainersToPreemptOnNode(\n+                  rr.getCapability(), node, maxAMContainers);\n+          if (preemptableContainers !\u003d null) {\n+            // This set is better than any previously identified set.\n+            bestContainers \u003d preemptableContainers;\n+            if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n+              break;\n+            }\n+          }\n+        } // End of iteration through nodes for one RR\n \n-    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n-        scheduler.getNodeTracker().getNodesByResourceName(\n-            nextPs.getAcceptedResouceNames().next().toString());\n-\n-    // From the potential nodes, pick a node that has enough containers\n-    // from apps over their fairshare\n-    for (FSSchedulerNode node : potentialNodes) {\n-      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n-      // subsequent if-check needs to be reworked accordingly.\n-      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n-      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n-        // This node is already reserved by another app. Let us not consider\n-        // this for preemption.\n-        continue;\n-      }\n-\n-      int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n-          Integer.MAX_VALUE : bestContainers.numAMContainers;\n-      PreemptableContainers preemptableContainers \u003d\n-          identifyContainersToPreemptOnNode(requestCapability, node,\n-              maxAMContainers);\n-      if (preemptableContainers !\u003d null) {\n-        if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n-          return preemptableContainers;\n-        } else {\n-          bestContainers \u003d preemptableContainers;\n+        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n+          containersToPreempt.addAll(bestContainers.containers);\n+          trackPreemptionsAgainstNode(bestContainers.containers);\n         }\n       }\n-    }\n-\n-    return bestContainers;\n+    } // End of iteration over RRs\n+    return containersToPreempt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d null;\n        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n            .getNodesByResourceName(rr.getResourceName());\n        for (FSSchedulerNode node : potentialNodes) {\n          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n          if (isNodeAlreadyReserved(node, starvedApp)) {\n            continue;\n          }\n\n          int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n              Integer.MAX_VALUE : bestContainers.numAMContainers;\n          PreemptableContainers preemptableContainers \u003d\n              identifyContainersToPreemptOnNode(\n                  rr.getCapability(), node, maxAMContainers);\n          if (preemptableContainers !\u003d null) {\n            // This set is better than any previously identified set.\n            bestContainers \u003d preemptableContainers;\n            if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        } // End of iteration through nodes for one RR\n\n        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n          containersToPreempt.addAll(bestContainers.containers);\n          trackPreemptionsAgainstNode(bestContainers.containers);\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldValue": "PreemptableContainers",
            "newValue": "List\u003cRMContainer\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
          "commitDate": "15/02/17 11:16 PM",
          "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/01/17 12:17 PM",
          "commitNameOld": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 21.46,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,38 @@\n-  private PreemptableContainers identifyContainersToPreempt(\n+  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n-    PreemptableContainers bestContainers \u003d null;\n+    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n \n-    // Find the nodes that match the next resource request\n-    SchedulingPlacementSet nextPs \u003d\n-        starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n-    PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n-    // TODO (KK): Should we check other resource requests if we can\u0027t match\n-    // the first one?\n+    // Iterate through enough RRs to address app\u0027s starvation\n+    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n+      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n+        PreemptableContainers bestContainers \u003d null;\n+        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n+            .getNodesByResourceName(rr.getResourceName());\n+        for (FSSchedulerNode node : potentialNodes) {\n+          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n+          if (isNodeAlreadyReserved(node, starvedApp)) {\n+            continue;\n+          }\n \n-    Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n+          int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n+              Integer.MAX_VALUE : bestContainers.numAMContainers;\n+          PreemptableContainers preemptableContainers \u003d\n+              identifyContainersToPreemptOnNode(\n+                  rr.getCapability(), node, maxAMContainers);\n+          if (preemptableContainers !\u003d null) {\n+            // This set is better than any previously identified set.\n+            bestContainers \u003d preemptableContainers;\n+            if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n+              break;\n+            }\n+          }\n+        } // End of iteration through nodes for one RR\n \n-    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n-        scheduler.getNodeTracker().getNodesByResourceName(\n-            nextPs.getAcceptedResouceNames().next().toString());\n-\n-    // From the potential nodes, pick a node that has enough containers\n-    // from apps over their fairshare\n-    for (FSSchedulerNode node : potentialNodes) {\n-      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n-      // subsequent if-check needs to be reworked accordingly.\n-      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n-      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n-        // This node is already reserved by another app. Let us not consider\n-        // this for preemption.\n-        continue;\n-      }\n-\n-      int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n-          Integer.MAX_VALUE : bestContainers.numAMContainers;\n-      PreemptableContainers preemptableContainers \u003d\n-          identifyContainersToPreemptOnNode(requestCapability, node,\n-              maxAMContainers);\n-      if (preemptableContainers !\u003d null) {\n-        if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n-          return preemptableContainers;\n-        } else {\n-          bestContainers \u003d preemptableContainers;\n+        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n+          containersToPreempt.addAll(bestContainers.containers);\n+          trackPreemptionsAgainstNode(bestContainers.containers);\n         }\n       }\n-    }\n-\n-    return bestContainers;\n+    } // End of iteration over RRs\n+    return containersToPreempt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containersToPreempt \u003d new ArrayList\u003c\u003e();\n\n    // Iterate through enough RRs to address app\u0027s starvation\n    for (ResourceRequest rr : starvedApp.getStarvedResourceRequests()) {\n      for (int i \u003d 0; i \u003c rr.getNumContainers(); i++) {\n        PreemptableContainers bestContainers \u003d null;\n        List\u003cFSSchedulerNode\u003e potentialNodes \u003d scheduler.getNodeTracker()\n            .getNodesByResourceName(rr.getResourceName());\n        for (FSSchedulerNode node : potentialNodes) {\n          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n          if (isNodeAlreadyReserved(node, starvedApp)) {\n            continue;\n          }\n\n          int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n              Integer.MAX_VALUE : bestContainers.numAMContainers;\n          PreemptableContainers preemptableContainers \u003d\n              identifyContainersToPreemptOnNode(\n                  rr.getCapability(), node, maxAMContainers);\n          if (preemptableContainers !\u003d null) {\n            // This set is better than any previously identified set.\n            bestContainers \u003d preemptableContainers;\n            if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        } // End of iteration through nodes for one RR\n\n        if (bestContainers !\u003d null \u0026\u0026 bestContainers.containers.size() \u003e 0) {\n          containersToPreempt.addAll(bestContainers.containers);\n          trackPreemptionsAgainstNode(bestContainers.containers);\n        }\n      }\n    } // End of iteration over RRs\n    return containersToPreempt;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {}
        }
      ]
    },
    "abedb8a9d86b4593a37fd3d2313fbcb057c7846a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5830. FairScheduler: Avoid preempting AM containers. (Yufei Gu via kasha)\n",
      "commitDate": "25/01/17 12:17 PM",
      "commitName": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5830. FairScheduler: Avoid preempting AM containers. (Yufei Gu via kasha)\n",
          "commitDate": "25/01/17 12:17 PM",
          "commitName": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "06/01/17 9:59 AM",
          "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.1,
          "commitsBetweenForRepo": 102,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,45 @@\n-  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n+  private PreemptableContainers identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n-    List\u003cRMContainer\u003e containers \u003d new ArrayList\u003c\u003e(); // return value\n+    PreemptableContainers bestContainers \u003d null;\n \n     // Find the nodes that match the next resource request\n     SchedulingPlacementSet nextPs \u003d\n         starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n     PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n     // TODO (KK): Should we check other resource requests if we can\u0027t match\n     // the first one?\n \n     Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n \n     List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n         scheduler.getNodeTracker().getNodesByResourceName(\n             nextPs.getAcceptedResouceNames().next().toString());\n \n     // From the potential nodes, pick a node that has enough containers\n     // from apps over their fairshare\n     for (FSSchedulerNode node : potentialNodes) {\n-      // Reset containers for the new node being considered.\n-      containers.clear();\n-\n       // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n       // subsequent if-check needs to be reworked accordingly.\n       FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n       if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n         // This node is already reserved by another app. Let us not consider\n         // this for preemption.\n         continue;\n       }\n \n-      // Figure out list of containers to consider\n-      List\u003cRMContainer\u003e containersToCheck \u003d\n-          node.getCopiedListOfRunningContainers();\n-      containersToCheck.removeAll(node.getContainersForPreemption());\n-\n-      // Initialize potential with unallocated resources\n-      Resource potential \u003d Resources.clone(node.getUnallocatedResource());\n-      for (RMContainer container : containersToCheck) {\n-        FSAppAttempt app \u003d\n-            scheduler.getSchedulerApp(container.getApplicationAttemptId());\n-\n-        if (app.canContainerBePreempted(container)) {\n-          // Flag container for preemption\n-          containers.add(container);\n-          Resources.addTo(potential, container.getAllocatedResource());\n-        }\n-\n-        // Check if we have already identified enough containers\n-        if (Resources.fitsIn(requestCapability, potential)) {\n-          // Mark the containers as being considered for preemption on the node.\n-          // Make sure the containers are subsequently removed by calling\n-          // FSSchedulerNode#removeContainerForPreemption.\n-          node.addContainersForPreemption(containers);\n-          return containers;\n+      int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n+          Integer.MAX_VALUE : bestContainers.numAMContainers;\n+      PreemptableContainers preemptableContainers \u003d\n+          identifyContainersToPreemptOnNode(requestCapability, node,\n+              maxAMContainers);\n+      if (preemptableContainers !\u003d null) {\n+        if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n+          return preemptableContainers;\n         } else {\n-          // TODO (YARN-5829): Unreserve the node for the starved app.\n+          bestContainers \u003d preemptableContainers;\n         }\n       }\n     }\n-    return null;\n+\n+    return bestContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PreemptableContainers identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    PreemptableContainers bestContainers \u003d null;\n\n    // Find the nodes that match the next resource request\n    SchedulingPlacementSet nextPs \u003d\n        starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n    PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n    // TODO (KK): Should we check other resource requests if we can\u0027t match\n    // the first one?\n\n    Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n\n    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n        scheduler.getNodeTracker().getNodesByResourceName(\n            nextPs.getAcceptedResouceNames().next().toString());\n\n    // From the potential nodes, pick a node that has enough containers\n    // from apps over their fairshare\n    for (FSSchedulerNode node : potentialNodes) {\n      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n      // subsequent if-check needs to be reworked accordingly.\n      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n        // This node is already reserved by another app. Let us not consider\n        // this for preemption.\n        continue;\n      }\n\n      int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n          Integer.MAX_VALUE : bestContainers.numAMContainers;\n      PreemptableContainers preemptableContainers \u003d\n          identifyContainersToPreemptOnNode(requestCapability, node,\n              maxAMContainers);\n      if (preemptableContainers !\u003d null) {\n        if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n          return preemptableContainers;\n        } else {\n          bestContainers \u003d preemptableContainers;\n        }\n      }\n    }\n\n    return bestContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldValue": "List\u003cRMContainer\u003e",
            "newValue": "PreemptableContainers"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5830. FairScheduler: Avoid preempting AM containers. (Yufei Gu via kasha)\n",
          "commitDate": "25/01/17 12:17 PM",
          "commitName": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "06/01/17 9:59 AM",
          "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.1,
          "commitsBetweenForRepo": 102,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,45 @@\n-  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n+  private PreemptableContainers identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n-    List\u003cRMContainer\u003e containers \u003d new ArrayList\u003c\u003e(); // return value\n+    PreemptableContainers bestContainers \u003d null;\n \n     // Find the nodes that match the next resource request\n     SchedulingPlacementSet nextPs \u003d\n         starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n     PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n     // TODO (KK): Should we check other resource requests if we can\u0027t match\n     // the first one?\n \n     Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n \n     List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n         scheduler.getNodeTracker().getNodesByResourceName(\n             nextPs.getAcceptedResouceNames().next().toString());\n \n     // From the potential nodes, pick a node that has enough containers\n     // from apps over their fairshare\n     for (FSSchedulerNode node : potentialNodes) {\n-      // Reset containers for the new node being considered.\n-      containers.clear();\n-\n       // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n       // subsequent if-check needs to be reworked accordingly.\n       FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n       if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n         // This node is already reserved by another app. Let us not consider\n         // this for preemption.\n         continue;\n       }\n \n-      // Figure out list of containers to consider\n-      List\u003cRMContainer\u003e containersToCheck \u003d\n-          node.getCopiedListOfRunningContainers();\n-      containersToCheck.removeAll(node.getContainersForPreemption());\n-\n-      // Initialize potential with unallocated resources\n-      Resource potential \u003d Resources.clone(node.getUnallocatedResource());\n-      for (RMContainer container : containersToCheck) {\n-        FSAppAttempt app \u003d\n-            scheduler.getSchedulerApp(container.getApplicationAttemptId());\n-\n-        if (app.canContainerBePreempted(container)) {\n-          // Flag container for preemption\n-          containers.add(container);\n-          Resources.addTo(potential, container.getAllocatedResource());\n-        }\n-\n-        // Check if we have already identified enough containers\n-        if (Resources.fitsIn(requestCapability, potential)) {\n-          // Mark the containers as being considered for preemption on the node.\n-          // Make sure the containers are subsequently removed by calling\n-          // FSSchedulerNode#removeContainerForPreemption.\n-          node.addContainersForPreemption(containers);\n-          return containers;\n+      int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n+          Integer.MAX_VALUE : bestContainers.numAMContainers;\n+      PreemptableContainers preemptableContainers \u003d\n+          identifyContainersToPreemptOnNode(requestCapability, node,\n+              maxAMContainers);\n+      if (preemptableContainers !\u003d null) {\n+        if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n+          return preemptableContainers;\n         } else {\n-          // TODO (YARN-5829): Unreserve the node for the starved app.\n+          bestContainers \u003d preemptableContainers;\n         }\n       }\n     }\n-    return null;\n+\n+    return bestContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PreemptableContainers identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    PreemptableContainers bestContainers \u003d null;\n\n    // Find the nodes that match the next resource request\n    SchedulingPlacementSet nextPs \u003d\n        starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n    PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n    // TODO (KK): Should we check other resource requests if we can\u0027t match\n    // the first one?\n\n    Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n\n    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n        scheduler.getNodeTracker().getNodesByResourceName(\n            nextPs.getAcceptedResouceNames().next().toString());\n\n    // From the potential nodes, pick a node that has enough containers\n    // from apps over their fairshare\n    for (FSSchedulerNode node : potentialNodes) {\n      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n      // subsequent if-check needs to be reworked accordingly.\n      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n        // This node is already reserved by another app. Let us not consider\n        // this for preemption.\n        continue;\n      }\n\n      int maxAMContainers \u003d bestContainers \u003d\u003d null ?\n          Integer.MAX_VALUE : bestContainers.numAMContainers;\n      PreemptableContainers preemptableContainers \u003d\n          identifyContainersToPreemptOnNode(requestCapability, node,\n              maxAMContainers);\n      if (preemptableContainers !\u003d null) {\n        if (preemptableContainers.numAMContainers \u003d\u003d 0) {\n          return preemptableContainers;\n        } else {\n          bestContainers \u003d preemptableContainers;\n        }\n      }\n    }\n\n    return bestContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {}
        }
      ]
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "23/11/16 9:48 PM",
      "commitNameOld": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 43.51,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,63 @@\n   private List\u003cRMContainer\u003e identifyContainersToPreempt(\n       FSAppAttempt starvedApp) {\n     List\u003cRMContainer\u003e containers \u003d new ArrayList\u003c\u003e(); // return value\n \n     // Find the nodes that match the next resource request\n-    ResourceRequest request \u003d starvedApp.getNextResourceRequest();\n+    SchedulingPlacementSet nextPs \u003d\n+        starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n+    PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n     // TODO (KK): Should we check other resource requests if we can\u0027t match\n     // the first one?\n \n-    Resource requestCapability \u003d request.getCapability();\n+    Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n+\n     List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n         scheduler.getNodeTracker().getNodesByResourceName(\n-            request.getResourceName());\n+            nextPs.getAcceptedResouceNames().next().toString());\n \n     // From the potential nodes, pick a node that has enough containers\n     // from apps over their fairshare\n     for (FSSchedulerNode node : potentialNodes) {\n       // Reset containers for the new node being considered.\n       containers.clear();\n \n       // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n       // subsequent if-check needs to be reworked accordingly.\n       FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n       if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n         // This node is already reserved by another app. Let us not consider\n         // this for preemption.\n         continue;\n       }\n \n       // Figure out list of containers to consider\n       List\u003cRMContainer\u003e containersToCheck \u003d\n           node.getCopiedListOfRunningContainers();\n       containersToCheck.removeAll(node.getContainersForPreemption());\n \n       // Initialize potential with unallocated resources\n       Resource potential \u003d Resources.clone(node.getUnallocatedResource());\n       for (RMContainer container : containersToCheck) {\n         FSAppAttempt app \u003d\n             scheduler.getSchedulerApp(container.getApplicationAttemptId());\n \n         if (app.canContainerBePreempted(container)) {\n           // Flag container for preemption\n           containers.add(container);\n           Resources.addTo(potential, container.getAllocatedResource());\n         }\n \n         // Check if we have already identified enough containers\n         if (Resources.fitsIn(requestCapability, potential)) {\n           // Mark the containers as being considered for preemption on the node.\n           // Make sure the containers are subsequently removed by calling\n           // FSSchedulerNode#removeContainerForPreemption.\n           node.addContainersForPreemption(containers);\n           return containers;\n         } else {\n           // TODO (YARN-5829): Unreserve the node for the starved app.\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containers \u003d new ArrayList\u003c\u003e(); // return value\n\n    // Find the nodes that match the next resource request\n    SchedulingPlacementSet nextPs \u003d\n        starvedApp.getAppSchedulingInfo().getFirstSchedulingPlacementSet();\n    PendingAsk firstPendingAsk \u003d nextPs.getPendingAsk(ResourceRequest.ANY);\n    // TODO (KK): Should we check other resource requests if we can\u0027t match\n    // the first one?\n\n    Resource requestCapability \u003d firstPendingAsk.getPerAllocationResource();\n\n    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n        scheduler.getNodeTracker().getNodesByResourceName(\n            nextPs.getAcceptedResouceNames().next().toString());\n\n    // From the potential nodes, pick a node that has enough containers\n    // from apps over their fairshare\n    for (FSSchedulerNode node : potentialNodes) {\n      // Reset containers for the new node being considered.\n      containers.clear();\n\n      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n      // subsequent if-check needs to be reworked accordingly.\n      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n        // This node is already reserved by another app. Let us not consider\n        // this for preemption.\n        continue;\n      }\n\n      // Figure out list of containers to consider\n      List\u003cRMContainer\u003e containersToCheck \u003d\n          node.getCopiedListOfRunningContainers();\n      containersToCheck.removeAll(node.getContainersForPreemption());\n\n      // Initialize potential with unallocated resources\n      Resource potential \u003d Resources.clone(node.getUnallocatedResource());\n      for (RMContainer container : containersToCheck) {\n        FSAppAttempt app \u003d\n            scheduler.getSchedulerApp(container.getApplicationAttemptId());\n\n        if (app.canContainerBePreempted(container)) {\n          // Flag container for preemption\n          containers.add(container);\n          Resources.addTo(potential, container.getAllocatedResource());\n        }\n\n        // Check if we have already identified enough containers\n        if (Resources.fitsIn(requestCapability, potential)) {\n          // Mark the containers as being considered for preemption on the node.\n          // Make sure the containers are subsequently removed by calling\n          // FSSchedulerNode#removeContainerForPreemption.\n          node.addContainersForPreemption(containers);\n          return containers;\n        } else {\n          // TODO (YARN-5829): Unreserve the node for the starved app.\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,60 @@\n+  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n+      FSAppAttempt starvedApp) {\n+    List\u003cRMContainer\u003e containers \u003d new ArrayList\u003c\u003e(); // return value\n+\n+    // Find the nodes that match the next resource request\n+    ResourceRequest request \u003d starvedApp.getNextResourceRequest();\n+    // TODO (KK): Should we check other resource requests if we can\u0027t match\n+    // the first one?\n+\n+    Resource requestCapability \u003d request.getCapability();\n+    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n+        scheduler.getNodeTracker().getNodesByResourceName(\n+            request.getResourceName());\n+\n+    // From the potential nodes, pick a node that has enough containers\n+    // from apps over their fairshare\n+    for (FSSchedulerNode node : potentialNodes) {\n+      // Reset containers for the new node being considered.\n+      containers.clear();\n+\n+      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n+      // subsequent if-check needs to be reworked accordingly.\n+      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n+      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n+        // This node is already reserved by another app. Let us not consider\n+        // this for preemption.\n+        continue;\n+      }\n+\n+      // Figure out list of containers to consider\n+      List\u003cRMContainer\u003e containersToCheck \u003d\n+          node.getCopiedListOfRunningContainers();\n+      containersToCheck.removeAll(node.getContainersForPreemption());\n+\n+      // Initialize potential with unallocated resources\n+      Resource potential \u003d Resources.clone(node.getUnallocatedResource());\n+      for (RMContainer container : containersToCheck) {\n+        FSAppAttempt app \u003d\n+            scheduler.getSchedulerApp(container.getApplicationAttemptId());\n+\n+        if (app.canContainerBePreempted(container)) {\n+          // Flag container for preemption\n+          containers.add(container);\n+          Resources.addTo(potential, container.getAllocatedResource());\n+        }\n+\n+        // Check if we have already identified enough containers\n+        if (Resources.fitsIn(requestCapability, potential)) {\n+          // Mark the containers as being considered for preemption on the node.\n+          // Make sure the containers are subsequently removed by calling\n+          // FSSchedulerNode#removeContainerForPreemption.\n+          node.addContainersForPreemption(containers);\n+          return containers;\n+        } else {\n+          // TODO (YARN-5829): Unreserve the node for the starved app.\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRMContainer\u003e identifyContainersToPreempt(\n      FSAppAttempt starvedApp) {\n    List\u003cRMContainer\u003e containers \u003d new ArrayList\u003c\u003e(); // return value\n\n    // Find the nodes that match the next resource request\n    ResourceRequest request \u003d starvedApp.getNextResourceRequest();\n    // TODO (KK): Should we check other resource requests if we can\u0027t match\n    // the first one?\n\n    Resource requestCapability \u003d request.getCapability();\n    List\u003cFSSchedulerNode\u003e potentialNodes \u003d\n        scheduler.getNodeTracker().getNodesByResourceName(\n            request.getResourceName());\n\n    // From the potential nodes, pick a node that has enough containers\n    // from apps over their fairshare\n    for (FSSchedulerNode node : potentialNodes) {\n      // Reset containers for the new node being considered.\n      containers.clear();\n\n      // TODO (YARN-5829): Attempt to reserve the node for starved app. The\n      // subsequent if-check needs to be reworked accordingly.\n      FSAppAttempt nodeReservedApp \u003d node.getReservedAppSchedulable();\n      if (nodeReservedApp !\u003d null \u0026\u0026 !nodeReservedApp.equals(starvedApp)) {\n        // This node is already reserved by another app. Let us not consider\n        // this for preemption.\n        continue;\n      }\n\n      // Figure out list of containers to consider\n      List\u003cRMContainer\u003e containersToCheck \u003d\n          node.getCopiedListOfRunningContainers();\n      containersToCheck.removeAll(node.getContainersForPreemption());\n\n      // Initialize potential with unallocated resources\n      Resource potential \u003d Resources.clone(node.getUnallocatedResource());\n      for (RMContainer container : containersToCheck) {\n        FSAppAttempt app \u003d\n            scheduler.getSchedulerApp(container.getApplicationAttemptId());\n\n        if (app.canContainerBePreempted(container)) {\n          // Flag container for preemption\n          containers.add(container);\n          Resources.addTo(potential, container.getAllocatedResource());\n        }\n\n        // Check if we have already identified enough containers\n        if (Resources.fitsIn(requestCapability, potential)) {\n          // Mark the containers as being considered for preemption on the node.\n          // Make sure the containers are subsequently removed by calling\n          // FSSchedulerNode#removeContainerForPreemption.\n          node.addContainersForPreemption(containers);\n          return containers;\n        } else {\n          // TODO (YARN-5829): Unreserve the node for the starved app.\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java"
    }
  }
}