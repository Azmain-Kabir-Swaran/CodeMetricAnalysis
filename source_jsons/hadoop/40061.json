{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerConfiguration.java",
  "functionName": "internalGetLabeledQueueCapacity",
  "functionId": "internalGetLabeledQueueCapacity___queue-String__label-String__suffix-String__defaultValue-float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
  "functionStartLine": 702,
  "functionEndLine": 728,
  "numCommitsSeen": 90,
  "timeTaken": 3309,
  "changeHistory": [
    "abde1e1f58d5b699e4b8e460cff68e154738169b",
    "1012b901c8eeeb46c7c792c94ed0befca1c860b4",
    "18a594257e052e8f10a03e5594e6cc6901dc56be"
  ],
  "changeHistoryShort": {
    "abde1e1f58d5b699e4b8e460cff68e154738169b": "Ybodychange",
    "1012b901c8eeeb46c7c792c94ed0befca1c860b4": "Ybodychange",
    "18a594257e052e8f10a03e5594e6cc6901dc56be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "abde1e1f58d5b699e4b8e460cff68e154738169b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9204. RM fails to start if absolute resource is specified for partition capacity in CS queues. Contributed by Jiandan Yang.\n",
      "commitDate": "21/01/19 12:54 AM",
      "commitName": "abde1e1f58d5b699e4b8e460cff68e154738169b",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/10/18 10:58 AM",
      "commitNameOld": "780be14f07df2a3ed6273b96ae857c278fd72718",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 94.62,
      "commitsBetweenForRepo": 647,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   private float internalGetLabeledQueueCapacity(String queue, String label, String suffix,\n       float defaultValue) {\n     String capacityPropertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n-    boolean matcher \u003d (capacityPropertyName !\u003d null)\n-        \u0026\u0026 RESOURCE_PATTERN.matcher(capacityPropertyName).find();\n+    String configuredCapacity \u003d get(capacityPropertyName);\n+    boolean matcher \u003d (configuredCapacity !\u003d null)\n+        \u0026\u0026 RESOURCE_PATTERN.matcher(configuredCapacity).find();\n     if (matcher) {\n       // Return capacity in percentage as 0 for non-root queues and 100 for\n       // root.From AbstractCSQueue, absolute resource will be parsed and\n       // updated. Once nodes are added/removed in cluster, capacity in\n       // percentage will also be re-calculated.\n       return defaultValue;\n     }\n \n     float capacity \u003d getFloat(capacityPropertyName, defaultValue);\n     if (capacity \u003c MINIMUM_CAPACITY_VALUE\n         || capacity \u003e MAXIMUM_CAPACITY_VALUE) {\n       throw new IllegalArgumentException(\"Illegal capacity of \" + capacity\n           + \" for node-label\u003d\" + label + \" in queue\u003d\" + queue\n           + \", valid capacity should in range of [0, 100].\");\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"CSConf - getCapacityOfLabel: prefix\u003d\"\n           + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + capacity);\n     }\n     return capacity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private float internalGetLabeledQueueCapacity(String queue, String label, String suffix,\n      float defaultValue) {\n    String capacityPropertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n    String configuredCapacity \u003d get(capacityPropertyName);\n    boolean matcher \u003d (configuredCapacity !\u003d null)\n        \u0026\u0026 RESOURCE_PATTERN.matcher(configuredCapacity).find();\n    if (matcher) {\n      // Return capacity in percentage as 0 for non-root queues and 100 for\n      // root.From AbstractCSQueue, absolute resource will be parsed and\n      // updated. Once nodes are added/removed in cluster, capacity in\n      // percentage will also be re-calculated.\n      return defaultValue;\n    }\n\n    float capacity \u003d getFloat(capacityPropertyName, defaultValue);\n    if (capacity \u003c MINIMUM_CAPACITY_VALUE\n        || capacity \u003e MAXIMUM_CAPACITY_VALUE) {\n      throw new IllegalArgumentException(\"Illegal capacity of \" + capacity\n          + \" for node-label\u003d\" + label + \" in queue\u003d\" + queue\n          + \", valid capacity should in range of [0, 100].\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CSConf - getCapacityOfLabel: prefix\u003d\"\n          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + capacity);\n    }\n    return capacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "1012b901c8eeeb46c7c792c94ed0befca1c860b4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7544. Use queue-path.capacity/maximum-capacity to specify absolute min/max resources. (Sunil G via wangda)\n\nChange-Id: I685341be213eee500f51e02f01c91def89391c17\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "1012b901c8eeeb46c7c792c94ed0befca1c860b4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,26 @@\n   private float internalGetLabeledQueueCapacity(String queue, String label, String suffix,\n       float defaultValue) {\n     String capacityPropertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n+    boolean matcher \u003d (capacityPropertyName !\u003d null)\n+        \u0026\u0026 RESOURCE_PATTERN.matcher(capacityPropertyName).find();\n+    if (matcher) {\n+      // Return capacity in percentage as 0 for non-root queues and 100 for\n+      // root.From AbstractCSQueue, absolute resource will be parsed and\n+      // updated. Once nodes are added/removed in cluster, capacity in\n+      // percentage will also be re-calculated.\n+      return defaultValue;\n+    }\n+\n     float capacity \u003d getFloat(capacityPropertyName, defaultValue);\n     if (capacity \u003c MINIMUM_CAPACITY_VALUE\n         || capacity \u003e MAXIMUM_CAPACITY_VALUE) {\n       throw new IllegalArgumentException(\"Illegal capacity of \" + capacity\n           + \" for node-label\u003d\" + label + \" in queue\u003d\" + queue\n           + \", valid capacity should in range of [0, 100].\");\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"CSConf - getCapacityOfLabel: prefix\u003d\"\n           + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + capacity);\n     }\n     return capacity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private float internalGetLabeledQueueCapacity(String queue, String label, String suffix,\n      float defaultValue) {\n    String capacityPropertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n    boolean matcher \u003d (capacityPropertyName !\u003d null)\n        \u0026\u0026 RESOURCE_PATTERN.matcher(capacityPropertyName).find();\n    if (matcher) {\n      // Return capacity in percentage as 0 for non-root queues and 100 for\n      // root.From AbstractCSQueue, absolute resource will be parsed and\n      // updated. Once nodes are added/removed in cluster, capacity in\n      // percentage will also be re-calculated.\n      return defaultValue;\n    }\n\n    float capacity \u003d getFloat(capacityPropertyName, defaultValue);\n    if (capacity \u003c MINIMUM_CAPACITY_VALUE\n        || capacity \u003e MAXIMUM_CAPACITY_VALUE) {\n      throw new IllegalArgumentException(\"Illegal capacity of \" + capacity\n          + \" for node-label\u003d\" + label + \" in queue\u003d\" + queue\n          + \", valid capacity should in range of [0, 100].\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CSConf - getCapacityOfLabel: prefix\u003d\"\n          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + capacity);\n    }\n    return capacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "18a594257e052e8f10a03e5594e6cc6901dc56be": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
      "commitDate": "12/02/15 2:58 PM",
      "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,16 @@\n+  private float internalGetLabeledQueueCapacity(String queue, String label, String suffix,\n+      float defaultValue) {\n+    String capacityPropertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n+    float capacity \u003d getFloat(capacityPropertyName, defaultValue);\n+    if (capacity \u003c MINIMUM_CAPACITY_VALUE\n+        || capacity \u003e MAXIMUM_CAPACITY_VALUE) {\n+      throw new IllegalArgumentException(\"Illegal capacity of \" + capacity\n+          + \" for node-label\u003d\" + label + \" in queue\u003d\" + queue\n+          + \", valid capacity should in range of [0, 100].\");\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"CSConf - getCapacityOfLabel: prefix\u003d\"\n+          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + capacity);\n+    }\n+    return capacity;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private float internalGetLabeledQueueCapacity(String queue, String label, String suffix,\n      float defaultValue) {\n    String capacityPropertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n    float capacity \u003d getFloat(capacityPropertyName, defaultValue);\n    if (capacity \u003c MINIMUM_CAPACITY_VALUE\n        || capacity \u003e MAXIMUM_CAPACITY_VALUE) {\n      throw new IllegalArgumentException(\"Illegal capacity of \" + capacity\n          + \" for node-label\u003d\" + label + \" in queue\u003d\" + queue\n          + \", valid capacity should in range of [0, 100].\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CSConf - getCapacityOfLabel: prefix\u003d\"\n          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + capacity);\n    }\n    return capacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java"
    }
  }
}