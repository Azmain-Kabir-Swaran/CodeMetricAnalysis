{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetworkTopology.java",
  "functionName": "sortByDistance",
  "functionId": "sortByDistance___reader-Node__nodes-Node[]__activeLen-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
  "functionStartLine": 876,
  "functionEndLine": 882,
  "numCommitsSeen": 109,
  "timeTaken": 4544,
  "changeHistory": [
    "c892a879ddce3abfd51c8609c81148bf6e4f9daa",
    "c73e08a6dad46cad14b38a4a586a5cda1622b206",
    "c6c3247dc0dcb8c72ea00f3fb14a0879fcf49c56",
    "8e73084491c9f317bc8cc3590f93ca67a63687a8",
    "c83c5b868ea34925ecb1597cf1ceb88524ded185",
    "123c563fe6f7a655f11d7414f992d448c5047006",
    "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
    "f01ede227f0594388afb855234b0c4fbd250be26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "c892a879ddce3abfd51c8609c81148bf6e4f9daa": "Ybodychange",
    "c73e08a6dad46cad14b38a4a586a5cda1622b206": "Ybodychange",
    "c6c3247dc0dcb8c72ea00f3fb14a0879fcf49c56": "Ybodychange",
    "8e73084491c9f317bc8cc3590f93ca67a63687a8": "Ymultichange(Yparameterchange,Ybodychange)",
    "c83c5b868ea34925ecb1597cf1ceb88524ded185": "Ymultichange(Yparameterchange,Ybodychange)",
    "123c563fe6f7a655f11d7414f992d448c5047006": "Ymultichange(Yparameterchange,Ybodychange)",
    "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "f01ede227f0594388afb855234b0c4fbd250be26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c892a879ddce3abfd51c8609c81148bf6e4f9daa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14882. Consider DataNode load when #getBlockLocation. Contributed by Xiaoqiao He.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n\nReviewed-by: Inigo Goiri \u003cinigoiri@apache.org\u003e\nReviewed-by: Istvan Fajth \u003cpifta@cloudera.com\u003e\n",
      "commitDate": "15/11/19 12:16 PM",
      "commitName": "c892a879ddce3abfd51c8609c81148bf6e4f9daa",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "18/10/19 10:35 PM",
      "commitNameOld": "2ae4b33d48db40bb0c222ac88df49e4b7c8e1493",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 27.61,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n     /*\n      * This method is called if the reader is a datanode,\n      * so nonDataNodeReader flag is set to false.\n      */\n-    sortByDistance(reader, nodes, activeLen, false);\n+    sortByDistance(reader, nodes, activeLen, list -\u003e Collections.shuffle(list));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n    /*\n     * This method is called if the reader is a datanode,\n     * so nonDataNodeReader flag is set to false.\n     */\n    sortByDistance(reader, nodes, activeLen, list -\u003e Collections.shuffle(list));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "c73e08a6dad46cad14b38a4a586a5cda1622b206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10206. Datanodes not sorted properly by distance when the reader isn\u0027t a datanode. (Nandakumar via mingma)\n",
      "commitDate": "07/12/16 8:26 AM",
      "commitName": "c73e08a6dad46cad14b38a4a586a5cda1622b206",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "05/12/16 11:18 PM",
      "commitNameOld": "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.38,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,7 @@\n   public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n-    /** Sort weights for the nodes array */\n-    int[] weights \u003d new int[activeLen];\n-    for (int i\u003d0; i\u003cactiveLen; i++) {\n-      weights[i] \u003d getWeight(reader, nodes[i]);\n-    }\n-    // Add weight/node pairs to a TreeMap to sort\n-    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n-    for (int i\u003d0; i\u003cactiveLen; i++) {\n-      int weight \u003d weights[i];\n-      Node node \u003d nodes[i];\n-      List\u003cNode\u003e list \u003d tree.get(weight);\n-      if (list \u003d\u003d null) {\n-        list \u003d Lists.newArrayListWithExpectedSize(1);\n-        tree.put(weight, list);\n-      }\n-      list.add(node);\n-    }\n-\n-    int idx \u003d 0;\n-    for (List\u003cNode\u003e list: tree.values()) {\n-      if (list !\u003d null) {\n-        Collections.shuffle(list, r);\n-        for (Node n: list) {\n-          nodes[idx] \u003d n;\n-          idx++;\n-        }\n-      }\n-    }\n-    Preconditions.checkState(idx \u003d\u003d activeLen,\n-        \"Sorted the wrong number of nodes!\");\n+    /*\n+     * This method is called if the reader is a datanode,\n+     * so nonDataNodeReader flag is set to false.\n+     */\n+    sortByDistance(reader, nodes, activeLen, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n    /*\n     * This method is called if the reader is a datanode,\n     * so nonDataNodeReader flag is set to false.\n     */\n    sortByDistance(reader, nodes, activeLen, false);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "c6c3247dc0dcb8c72ea00f3fb14a0879fcf49c56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7122. Use of ThreadLocal\u003cRandom\u003e results in poor block placement. (wang)\n",
      "commitDate": "29/09/14 3:00 PM",
      "commitName": "c6c3247dc0dcb8c72ea00f3fb14a0879fcf49c56",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/09/14 10:55 PM",
      "commitNameOld": "eab15af12c114eef4e9abd9af2ba03b0ab2cc441",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 7.67,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n     /** Sort weights for the nodes array */\n     int[] weights \u003d new int[activeLen];\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n-    Random rand \u003d getRandom();\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n-        Collections.shuffle(list, rand);\n+        Collections.shuffle(list, r);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n     Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, r);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "8e73084491c9f317bc8cc3590f93ca67a63687a8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6840. Clients are always sent to the same datanode when read is off rack. (wang)\n",
      "commitDate": "18/09/14 5:49 PM",
      "commitName": "8e73084491c9f317bc8cc3590f93ca67a63687a8",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6840. Clients are always sent to the same datanode when read is off rack. (wang)\n",
          "commitDate": "18/09/14 5:49 PM",
          "commitName": "8e73084491c9f317bc8cc3590f93ca67a63687a8",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 10:47 AM",
          "commitNameOld": "c83c5b868ea34925ecb1597cf1ceb88524ded185",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 58.29,
          "commitsBetweenForRepo": 553,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  public void sortByDistance(Node reader, Node[] nodes, int activeLen,\n-      long seed, boolean randomizeBlockLocationsPerBlock) {\n+  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n     /** Sort weights for the nodes array */\n     int[] weights \u003d new int[activeLen];\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n-    // Seed is normally the block id\n-    // This means we use the same pseudo-random order for each block, for\n-    // potentially better page cache usage.\n-    // Seed is not used if we want to randomize block location for every block\n     Random rand \u003d getRandom();\n-    if (!randomizeBlockLocationsPerBlock) {\n-      rand.setSeed(seed);\n-    }\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n         Collections.shuffle(list, rand);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n     Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    Random rand \u003d getRandom();\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {
            "oldValue": "[reader-Node, nodes-Node[], activeLen-int, seed-long, randomizeBlockLocationsPerBlock-boolean]",
            "newValue": "[reader-Node, nodes-Node[], activeLen-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6840. Clients are always sent to the same datanode when read is off rack. (wang)\n",
          "commitDate": "18/09/14 5:49 PM",
          "commitName": "8e73084491c9f317bc8cc3590f93ca67a63687a8",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 10:47 AM",
          "commitNameOld": "c83c5b868ea34925ecb1597cf1ceb88524ded185",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 58.29,
          "commitsBetweenForRepo": 553,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  public void sortByDistance(Node reader, Node[] nodes, int activeLen,\n-      long seed, boolean randomizeBlockLocationsPerBlock) {\n+  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n     /** Sort weights for the nodes array */\n     int[] weights \u003d new int[activeLen];\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n-    // Seed is normally the block id\n-    // This means we use the same pseudo-random order for each block, for\n-    // potentially better page cache usage.\n-    // Seed is not used if we want to randomize block location for every block\n     Random rand \u003d getRandom();\n-    if (!randomizeBlockLocationsPerBlock) {\n-      rand.setSeed(seed);\n-    }\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n         Collections.shuffle(list, rand);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n     Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    Random rand \u003d getRandom();\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {}
        }
      ]
    },
    "c83c5b868ea34925ecb1597cf1ceb88524ded185": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6701. Make seed optional in NetworkTopology#sortByDistance. Contributed by Ashwin Shankar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612625 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 10:47 AM",
      "commitName": "c83c5b868ea34925ecb1597cf1ceb88524ded185",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6701. Make seed optional in NetworkTopology#sortByDistance. Contributed by Ashwin Shankar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612625 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 10:47 AM",
          "commitName": "c83c5b868ea34925ecb1597cf1ceb88524ded185",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "09/06/14 5:39 PM",
          "commitNameOld": "123c563fe6f7a655f11d7414f992d448c5047006",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 42.71,
          "commitsBetweenForRepo": 302,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n-  public void sortByDistance(Node reader, Node[] nodes,\n-      int activeLen, long seed) {\n+  public void sortByDistance(Node reader, Node[] nodes, int activeLen,\n+      long seed, boolean randomizeBlockLocationsPerBlock) {\n     /** Sort weights for the nodes array */\n     int[] weights \u003d new int[activeLen];\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n     // Seed is normally the block id\n     // This means we use the same pseudo-random order for each block, for\n     // potentially better page cache usage.\n+    // Seed is not used if we want to randomize block location for every block\n     Random rand \u003d getRandom();\n-    rand.setSeed(seed);\n+    if (!randomizeBlockLocationsPerBlock) {\n+      rand.setSeed(seed);\n+    }\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n         Collections.shuffle(list, rand);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n     Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen,\n      long seed, boolean randomizeBlockLocationsPerBlock) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    // Seed is not used if we want to randomize block location for every block\n    Random rand \u003d getRandom();\n    if (!randomizeBlockLocationsPerBlock) {\n      rand.setSeed(seed);\n    }\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {
            "oldValue": "[reader-Node, nodes-Node[], activeLen-int, seed-long]",
            "newValue": "[reader-Node, nodes-Node[], activeLen-int, seed-long, randomizeBlockLocationsPerBlock-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6701. Make seed optional in NetworkTopology#sortByDistance. Contributed by Ashwin Shankar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612625 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 10:47 AM",
          "commitName": "c83c5b868ea34925ecb1597cf1ceb88524ded185",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "09/06/14 5:39 PM",
          "commitNameOld": "123c563fe6f7a655f11d7414f992d448c5047006",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 42.71,
          "commitsBetweenForRepo": 302,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n-  public void sortByDistance(Node reader, Node[] nodes,\n-      int activeLen, long seed) {\n+  public void sortByDistance(Node reader, Node[] nodes, int activeLen,\n+      long seed, boolean randomizeBlockLocationsPerBlock) {\n     /** Sort weights for the nodes array */\n     int[] weights \u003d new int[activeLen];\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n     for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n     // Seed is normally the block id\n     // This means we use the same pseudo-random order for each block, for\n     // potentially better page cache usage.\n+    // Seed is not used if we want to randomize block location for every block\n     Random rand \u003d getRandom();\n-    rand.setSeed(seed);\n+    if (!randomizeBlockLocationsPerBlock) {\n+      rand.setSeed(seed);\n+    }\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n         Collections.shuffle(list, rand);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n     Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, int activeLen,\n      long seed, boolean randomizeBlockLocationsPerBlock) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    // Seed is not used if we want to randomize block location for every block\n    Random rand \u003d getRandom();\n    if (!randomizeBlockLocationsPerBlock) {\n      rand.setSeed(seed);\n    }\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {}
        }
      ]
    },
    "123c563fe6f7a655f11d7414f992d448c5047006": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6460. Ignore stale and decommissioned nodes in NetworkTopology#sortByDistance. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601535 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/06/14 5:39 PM",
      "commitName": "123c563fe6f7a655f11d7414f992d448c5047006",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6460. Ignore stale and decommissioned nodes in NetworkTopology#sortByDistance. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601535 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/06/14 5:39 PM",
          "commitName": "123c563fe6f7a655f11d7414f992d448c5047006",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "03/06/14 11:33 AM",
          "commitNameOld": "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n+  public void sortByDistance(Node reader, Node[] nodes,\n+      int activeLen, long seed) {\n     /** Sort weights for the nodes array */\n-    int[] weights \u003d new int[nodes.length];\n-    for (int i\u003d0; i\u003cnodes.length; i++) {\n+    int[] weights \u003d new int[activeLen];\n+    for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n-    for (int i\u003d0; i\u003cnodes.length; i++) {\n+    for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n     // Seed is normally the block id\n     // This means we use the same pseudo-random order for each block, for\n     // potentially better page cache usage.\n     Random rand \u003d getRandom();\n     rand.setSeed(seed);\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n         Collections.shuffle(list, rand);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n-    Preconditions.checkState(idx \u003d\u003d nodes.length,\n+    Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes,\n      int activeLen, long seed) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    Random rand \u003d getRandom();\n    rand.setSeed(seed);\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {
            "oldValue": "[reader-Node, nodes-Node[], seed-long]",
            "newValue": "[reader-Node, nodes-Node[], activeLen-int, seed-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6460. Ignore stale and decommissioned nodes in NetworkTopology#sortByDistance. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601535 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/06/14 5:39 PM",
          "commitName": "123c563fe6f7a655f11d7414f992d448c5047006",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "03/06/14 11:33 AM",
          "commitNameOld": "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n+  public void sortByDistance(Node reader, Node[] nodes,\n+      int activeLen, long seed) {\n     /** Sort weights for the nodes array */\n-    int[] weights \u003d new int[nodes.length];\n-    for (int i\u003d0; i\u003cnodes.length; i++) {\n+    int[] weights \u003d new int[activeLen];\n+    for (int i\u003d0; i\u003cactiveLen; i++) {\n       weights[i] \u003d getWeight(reader, nodes[i]);\n     }\n     // Add weight/node pairs to a TreeMap to sort\n     TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n-    for (int i\u003d0; i\u003cnodes.length; i++) {\n+    for (int i\u003d0; i\u003cactiveLen; i++) {\n       int weight \u003d weights[i];\n       Node node \u003d nodes[i];\n       List\u003cNode\u003e list \u003d tree.get(weight);\n       if (list \u003d\u003d null) {\n         list \u003d Lists.newArrayListWithExpectedSize(1);\n         tree.put(weight, list);\n       }\n       list.add(node);\n     }\n \n     // Seed is normally the block id\n     // This means we use the same pseudo-random order for each block, for\n     // potentially better page cache usage.\n     Random rand \u003d getRandom();\n     rand.setSeed(seed);\n     int idx \u003d 0;\n     for (List\u003cNode\u003e list: tree.values()) {\n       if (list !\u003d null) {\n         Collections.shuffle(list, rand);\n         for (Node n: list) {\n           nodes[idx] \u003d n;\n           idx++;\n         }\n       }\n     }\n-    Preconditions.checkState(idx \u003d\u003d nodes.length,\n+    Preconditions.checkState(idx \u003d\u003d activeLen,\n         \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes,\n      int activeLen, long seed) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[activeLen];\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cactiveLen; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    Random rand \u003d getRandom();\n    rand.setSeed(seed);\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d activeLen,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {}
        }
      ]
    },
    "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6268. Better sorting in NetworkTopology#pseudoSortByDistance when no local node is found. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/14 11:33 AM",
      "commitName": "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6268. Better sorting in NetworkTopology#pseudoSortByDistance when no local node is found. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/14 11:33 AM",
          "commitName": "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "25/02/14 10:36 AM",
          "commitNameOld": "df6e1ab4916e41810f092474a1f3abd9845d9956",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 98.0,
          "commitsBetweenForRepo": 658,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n-    int tempIndex \u003d 0;\n-    int localRackNode \u003d -1;\n-    if (reader !\u003d null ) {\n-      //scan the array to find the local node \u0026 local rack node\n-      for(int i\u003d0; i\u003cnodes.length; i++) {\n-        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n-          //swap the local node and the node at position 0\n-          if( i !\u003d 0 ) {\n-            swap(nodes, tempIndex, i);\n-          }\n-          tempIndex\u003d1;\n-          if(localRackNode !\u003d -1 ) {\n-            if(localRackNode \u003d\u003d 0) {\n-              localRackNode \u003d i;\n-            }\n-            break;\n-          }\n-        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n-          //local rack\n-          localRackNode \u003d i;\n-          if(tempIndex !\u003d 0 ) break;\n+  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n+    /** Sort weights for the nodes array */\n+    int[] weights \u003d new int[nodes.length];\n+    for (int i\u003d0; i\u003cnodes.length; i++) {\n+      weights[i] \u003d getWeight(reader, nodes[i]);\n+    }\n+    // Add weight/node pairs to a TreeMap to sort\n+    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n+    for (int i\u003d0; i\u003cnodes.length; i++) {\n+      int weight \u003d weights[i];\n+      Node node \u003d nodes[i];\n+      List\u003cNode\u003e list \u003d tree.get(weight);\n+      if (list \u003d\u003d null) {\n+        list \u003d Lists.newArrayListWithExpectedSize(1);\n+        tree.put(weight, list);\n+      }\n+      list.add(node);\n+    }\n+\n+    // Seed is normally the block id\n+    // This means we use the same pseudo-random order for each block, for\n+    // potentially better page cache usage.\n+    Random rand \u003d getRandom();\n+    rand.setSeed(seed);\n+    int idx \u003d 0;\n+    for (List\u003cNode\u003e list: tree.values()) {\n+      if (list !\u003d null) {\n+        Collections.shuffle(list, rand);\n+        for (Node n: list) {\n+          nodes[idx] \u003d n;\n+          idx++;\n         }\n       }\n-\n-      // swap the local rack node and the node at position tempIndex\n-      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n-        swap(nodes, tempIndex, localRackNode);\n-        tempIndex++;\n-      }\n     }\n-    \n-    // put a random node at position 0 if it is not a local/local-rack node\n-    if(tempIndex \u003d\u003d 0 \u0026\u0026 localRackNode \u003d\u003d -1 \u0026\u0026 nodes.length !\u003d 0) {\n-      swap(nodes, 0, r.nextInt(nodes.length));\n-    }\n+    Preconditions.checkState(idx \u003d\u003d nodes.length,\n+        \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[nodes.length];\n    for (int i\u003d0; i\u003cnodes.length; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cnodes.length; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    Random rand \u003d getRandom();\n    rand.setSeed(seed);\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d nodes.length,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {
            "oldValue": "pseudoSortByDistance",
            "newValue": "sortByDistance"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6268. Better sorting in NetworkTopology#pseudoSortByDistance when no local node is found. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/14 11:33 AM",
          "commitName": "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "25/02/14 10:36 AM",
          "commitNameOld": "df6e1ab4916e41810f092474a1f3abd9845d9956",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 98.0,
          "commitsBetweenForRepo": 658,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n-    int tempIndex \u003d 0;\n-    int localRackNode \u003d -1;\n-    if (reader !\u003d null ) {\n-      //scan the array to find the local node \u0026 local rack node\n-      for(int i\u003d0; i\u003cnodes.length; i++) {\n-        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n-          //swap the local node and the node at position 0\n-          if( i !\u003d 0 ) {\n-            swap(nodes, tempIndex, i);\n-          }\n-          tempIndex\u003d1;\n-          if(localRackNode !\u003d -1 ) {\n-            if(localRackNode \u003d\u003d 0) {\n-              localRackNode \u003d i;\n-            }\n-            break;\n-          }\n-        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n-          //local rack\n-          localRackNode \u003d i;\n-          if(tempIndex !\u003d 0 ) break;\n+  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n+    /** Sort weights for the nodes array */\n+    int[] weights \u003d new int[nodes.length];\n+    for (int i\u003d0; i\u003cnodes.length; i++) {\n+      weights[i] \u003d getWeight(reader, nodes[i]);\n+    }\n+    // Add weight/node pairs to a TreeMap to sort\n+    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n+    for (int i\u003d0; i\u003cnodes.length; i++) {\n+      int weight \u003d weights[i];\n+      Node node \u003d nodes[i];\n+      List\u003cNode\u003e list \u003d tree.get(weight);\n+      if (list \u003d\u003d null) {\n+        list \u003d Lists.newArrayListWithExpectedSize(1);\n+        tree.put(weight, list);\n+      }\n+      list.add(node);\n+    }\n+\n+    // Seed is normally the block id\n+    // This means we use the same pseudo-random order for each block, for\n+    // potentially better page cache usage.\n+    Random rand \u003d getRandom();\n+    rand.setSeed(seed);\n+    int idx \u003d 0;\n+    for (List\u003cNode\u003e list: tree.values()) {\n+      if (list !\u003d null) {\n+        Collections.shuffle(list, rand);\n+        for (Node n: list) {\n+          nodes[idx] \u003d n;\n+          idx++;\n         }\n       }\n-\n-      // swap the local rack node and the node at position tempIndex\n-      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n-        swap(nodes, tempIndex, localRackNode);\n-        tempIndex++;\n-      }\n     }\n-    \n-    // put a random node at position 0 if it is not a local/local-rack node\n-    if(tempIndex \u003d\u003d 0 \u0026\u0026 localRackNode \u003d\u003d -1 \u0026\u0026 nodes.length !\u003d 0) {\n-      swap(nodes, 0, r.nextInt(nodes.length));\n-    }\n+    Preconditions.checkState(idx \u003d\u003d nodes.length,\n+        \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[nodes.length];\n    for (int i\u003d0; i\u003cnodes.length; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cnodes.length; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    Random rand \u003d getRandom();\n    rand.setSeed(seed);\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d nodes.length,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {
            "oldValue": "[reader-Node, nodes-Node[]]",
            "newValue": "[reader-Node, nodes-Node[], seed-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6268. Better sorting in NetworkTopology#pseudoSortByDistance when no local node is found. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/14 11:33 AM",
          "commitName": "02fcb6b6bae7c3fe2a10b00b2a563e4098ff225e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "25/02/14 10:36 AM",
          "commitNameOld": "df6e1ab4916e41810f092474a1f3abd9845d9956",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 98.0,
          "commitsBetweenForRepo": 658,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n-    int tempIndex \u003d 0;\n-    int localRackNode \u003d -1;\n-    if (reader !\u003d null ) {\n-      //scan the array to find the local node \u0026 local rack node\n-      for(int i\u003d0; i\u003cnodes.length; i++) {\n-        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n-          //swap the local node and the node at position 0\n-          if( i !\u003d 0 ) {\n-            swap(nodes, tempIndex, i);\n-          }\n-          tempIndex\u003d1;\n-          if(localRackNode !\u003d -1 ) {\n-            if(localRackNode \u003d\u003d 0) {\n-              localRackNode \u003d i;\n-            }\n-            break;\n-          }\n-        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n-          //local rack\n-          localRackNode \u003d i;\n-          if(tempIndex !\u003d 0 ) break;\n+  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n+    /** Sort weights for the nodes array */\n+    int[] weights \u003d new int[nodes.length];\n+    for (int i\u003d0; i\u003cnodes.length; i++) {\n+      weights[i] \u003d getWeight(reader, nodes[i]);\n+    }\n+    // Add weight/node pairs to a TreeMap to sort\n+    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n+    for (int i\u003d0; i\u003cnodes.length; i++) {\n+      int weight \u003d weights[i];\n+      Node node \u003d nodes[i];\n+      List\u003cNode\u003e list \u003d tree.get(weight);\n+      if (list \u003d\u003d null) {\n+        list \u003d Lists.newArrayListWithExpectedSize(1);\n+        tree.put(weight, list);\n+      }\n+      list.add(node);\n+    }\n+\n+    // Seed is normally the block id\n+    // This means we use the same pseudo-random order for each block, for\n+    // potentially better page cache usage.\n+    Random rand \u003d getRandom();\n+    rand.setSeed(seed);\n+    int idx \u003d 0;\n+    for (List\u003cNode\u003e list: tree.values()) {\n+      if (list !\u003d null) {\n+        Collections.shuffle(list, rand);\n+        for (Node n: list) {\n+          nodes[idx] \u003d n;\n+          idx++;\n         }\n       }\n-\n-      // swap the local rack node and the node at position tempIndex\n-      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n-        swap(nodes, tempIndex, localRackNode);\n-        tempIndex++;\n-      }\n     }\n-    \n-    // put a random node at position 0 if it is not a local/local-rack node\n-    if(tempIndex \u003d\u003d 0 \u0026\u0026 localRackNode \u003d\u003d -1 \u0026\u0026 nodes.length !\u003d 0) {\n-      swap(nodes, 0, r.nextInt(nodes.length));\n-    }\n+    Preconditions.checkState(idx \u003d\u003d nodes.length,\n+        \"Sorted the wrong number of nodes!\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void sortByDistance(Node reader, Node[] nodes, long seed) {\n    /** Sort weights for the nodes array */\n    int[] weights \u003d new int[nodes.length];\n    for (int i\u003d0; i\u003cnodes.length; i++) {\n      weights[i] \u003d getWeight(reader, nodes[i]);\n    }\n    // Add weight/node pairs to a TreeMap to sort\n    TreeMap\u003cInteger, List\u003cNode\u003e\u003e tree \u003d new TreeMap\u003cInteger, List\u003cNode\u003e\u003e();\n    for (int i\u003d0; i\u003cnodes.length; i++) {\n      int weight \u003d weights[i];\n      Node node \u003d nodes[i];\n      List\u003cNode\u003e list \u003d tree.get(weight);\n      if (list \u003d\u003d null) {\n        list \u003d Lists.newArrayListWithExpectedSize(1);\n        tree.put(weight, list);\n      }\n      list.add(node);\n    }\n\n    // Seed is normally the block id\n    // This means we use the same pseudo-random order for each block, for\n    // potentially better page cache usage.\n    Random rand \u003d getRandom();\n    rand.setSeed(seed);\n    int idx \u003d 0;\n    for (List\u003cNode\u003e list: tree.values()) {\n      if (list !\u003d null) {\n        Collections.shuffle(list, rand);\n        for (Node n: list) {\n          nodes[idx] \u003d n;\n          idx++;\n        }\n      }\n    }\n    Preconditions.checkState(idx \u003d\u003d nodes.length,\n        \"Sorted the wrong number of nodes!\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {}
        }
      ]
    },
    "f01ede227f0594388afb855234b0c4fbd250be26": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8144. pseudoSortByDistance in NetworkTopology doesn\u0027t work properly if no local node and first node is local rack node. Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1325367 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/04/12 9:37 AM",
      "commitName": "f01ede227f0594388afb855234b0c4fbd250be26",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "22/03/12 3:43 PM",
      "commitNameOld": "b5a8ccb75b25c90e54ccf8c1834b4b12e6261f05",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 20.75,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n     int tempIndex \u003d 0;\n+    int localRackNode \u003d -1;\n     if (reader !\u003d null ) {\n-      int localRackNode \u003d -1;\n       //scan the array to find the local node \u0026 local rack node\n       for(int i\u003d0; i\u003cnodes.length; i++) {\n         if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n           //swap the local node and the node at position 0\n           if( i !\u003d 0 ) {\n             swap(nodes, tempIndex, i);\n           }\n           tempIndex\u003d1;\n           if(localRackNode !\u003d -1 ) {\n             if(localRackNode \u003d\u003d 0) {\n               localRackNode \u003d i;\n             }\n             break;\n           }\n         } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n           //local rack\n           localRackNode \u003d i;\n           if(tempIndex !\u003d 0 ) break;\n         }\n       }\n \n       // swap the local rack node and the node at position tempIndex\n       if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n         swap(nodes, tempIndex, localRackNode);\n         tempIndex++;\n       }\n     }\n     \n     // put a random node at position 0 if it is not a local/local-rack node\n-    if(tempIndex \u003d\u003d 0 \u0026\u0026 nodes.length !\u003d 0) {\n+    if(tempIndex \u003d\u003d 0 \u0026\u0026 localRackNode \u003d\u003d -1 \u0026\u0026 nodes.length !\u003d 0) {\n       swap(nodes, 0, r.nextInt(nodes.length));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n    int tempIndex \u003d 0;\n    int localRackNode \u003d -1;\n    if (reader !\u003d null ) {\n      //scan the array to find the local node \u0026 local rack node\n      for(int i\u003d0; i\u003cnodes.length; i++) {\n        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n          //swap the local node and the node at position 0\n          if( i !\u003d 0 ) {\n            swap(nodes, tempIndex, i);\n          }\n          tempIndex\u003d1;\n          if(localRackNode !\u003d -1 ) {\n            if(localRackNode \u003d\u003d 0) {\n              localRackNode \u003d i;\n            }\n            break;\n          }\n        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n          //local rack\n          localRackNode \u003d i;\n          if(tempIndex !\u003d 0 ) break;\n        }\n      }\n\n      // swap the local rack node and the node at position tempIndex\n      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n        swap(nodes, tempIndex, localRackNode);\n        tempIndex++;\n      }\n    }\n    \n    // put a random node at position 0 if it is not a local/local-rack node\n    if(tempIndex \u003d\u003d 0 \u0026\u0026 localRackNode \u003d\u003d -1 \u0026\u0026 nodes.length !\u003d 0) {\n      swap(nodes, 0, r.nextInt(nodes.length));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n    int tempIndex \u003d 0;\n    if (reader !\u003d null ) {\n      int localRackNode \u003d -1;\n      //scan the array to find the local node \u0026 local rack node\n      for(int i\u003d0; i\u003cnodes.length; i++) {\n        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n          //swap the local node and the node at position 0\n          if( i !\u003d 0 ) {\n            swap(nodes, tempIndex, i);\n          }\n          tempIndex\u003d1;\n          if(localRackNode !\u003d -1 ) {\n            if(localRackNode \u003d\u003d 0) {\n              localRackNode \u003d i;\n            }\n            break;\n          }\n        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n          //local rack\n          localRackNode \u003d i;\n          if(tempIndex !\u003d 0 ) break;\n        }\n      }\n\n      // swap the local rack node and the node at position tempIndex\n      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n        swap(nodes, tempIndex, localRackNode);\n        tempIndex++;\n      }\n    }\n    \n    // put a random node at position 0 if it is not a local/local-rack node\n    if(tempIndex \u003d\u003d 0 \u0026\u0026 nodes.length !\u003d 0) {\n      swap(nodes, 0, r.nextInt(nodes.length));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n    int tempIndex \u003d 0;\n    if (reader !\u003d null ) {\n      int localRackNode \u003d -1;\n      //scan the array to find the local node \u0026 local rack node\n      for(int i\u003d0; i\u003cnodes.length; i++) {\n        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n          //swap the local node and the node at position 0\n          if( i !\u003d 0 ) {\n            swap(nodes, tempIndex, i);\n          }\n          tempIndex\u003d1;\n          if(localRackNode !\u003d -1 ) {\n            if(localRackNode \u003d\u003d 0) {\n              localRackNode \u003d i;\n            }\n            break;\n          }\n        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n          //local rack\n          localRackNode \u003d i;\n          if(tempIndex !\u003d 0 ) break;\n        }\n      }\n\n      // swap the local rack node and the node at position tempIndex\n      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n        swap(nodes, tempIndex, localRackNode);\n        tempIndex++;\n      }\n    }\n    \n    // put a random node at position 0 if it is not a local/local-rack node\n    if(tempIndex \u003d\u003d 0 \u0026\u0026 nodes.length !\u003d 0) {\n      swap(nodes, 0, r.nextInt(nodes.length));\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n    int tempIndex \u003d 0;\n    if (reader !\u003d null ) {\n      int localRackNode \u003d -1;\n      //scan the array to find the local node \u0026 local rack node\n      for(int i\u003d0; i\u003cnodes.length; i++) {\n        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n          //swap the local node and the node at position 0\n          if( i !\u003d 0 ) {\n            swap(nodes, tempIndex, i);\n          }\n          tempIndex\u003d1;\n          if(localRackNode !\u003d -1 ) {\n            if(localRackNode \u003d\u003d 0) {\n              localRackNode \u003d i;\n            }\n            break;\n          }\n        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n          //local rack\n          localRackNode \u003d i;\n          if(tempIndex !\u003d 0 ) break;\n        }\n      }\n\n      // swap the local rack node and the node at position tempIndex\n      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n        swap(nodes, tempIndex, localRackNode);\n        tempIndex++;\n      }\n    }\n    \n    // put a random node at position 0 if it is not a local/local-rack node\n    if(tempIndex \u003d\u003d 0 \u0026\u0026 nodes.length !\u003d 0) {\n      swap(nodes, 0, r.nextInt(nodes.length));\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,37 @@\n+  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n+    int tempIndex \u003d 0;\n+    if (reader !\u003d null ) {\n+      int localRackNode \u003d -1;\n+      //scan the array to find the local node \u0026 local rack node\n+      for(int i\u003d0; i\u003cnodes.length; i++) {\n+        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n+          //swap the local node and the node at position 0\n+          if( i !\u003d 0 ) {\n+            swap(nodes, tempIndex, i);\n+          }\n+          tempIndex\u003d1;\n+          if(localRackNode !\u003d -1 ) {\n+            if(localRackNode \u003d\u003d 0) {\n+              localRackNode \u003d i;\n+            }\n+            break;\n+          }\n+        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n+          //local rack\n+          localRackNode \u003d i;\n+          if(tempIndex !\u003d 0 ) break;\n+        }\n+      }\n+\n+      // swap the local rack node and the node at position tempIndex\n+      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n+        swap(nodes, tempIndex, localRackNode);\n+        tempIndex++;\n+      }\n+    }\n+    \n+    // put a random node at position 0 if it is not a local/local-rack node\n+    if(tempIndex \u003d\u003d 0 \u0026\u0026 nodes.length !\u003d 0) {\n+      swap(nodes, 0, r.nextInt(nodes.length));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void pseudoSortByDistance( Node reader, Node[] nodes ) {\n    int tempIndex \u003d 0;\n    if (reader !\u003d null ) {\n      int localRackNode \u003d -1;\n      //scan the array to find the local node \u0026 local rack node\n      for(int i\u003d0; i\u003cnodes.length; i++) {\n        if(tempIndex \u003d\u003d 0 \u0026\u0026 reader \u003d\u003d nodes[i]) { //local node\n          //swap the local node and the node at position 0\n          if( i !\u003d 0 ) {\n            swap(nodes, tempIndex, i);\n          }\n          tempIndex\u003d1;\n          if(localRackNode !\u003d -1 ) {\n            if(localRackNode \u003d\u003d 0) {\n              localRackNode \u003d i;\n            }\n            break;\n          }\n        } else if(localRackNode \u003d\u003d -1 \u0026\u0026 isOnSameRack(reader, nodes[i])) {\n          //local rack\n          localRackNode \u003d i;\n          if(tempIndex !\u003d 0 ) break;\n        }\n      }\n\n      // swap the local rack node and the node at position tempIndex\n      if(localRackNode !\u003d -1 \u0026\u0026 localRackNode !\u003d tempIndex ) {\n        swap(nodes, tempIndex, localRackNode);\n        tempIndex++;\n      }\n    }\n    \n    // put a random node at position 0 if it is not a local/local-rack node\n    if(tempIndex \u003d\u003d 0 \u0026\u0026 nodes.length !\u003d 0) {\n      swap(nodes, 0, r.nextInt(nodes.length));\n    }\n  }",
      "path": "src/java/org/apache/hadoop/net/NetworkTopology.java"
    }
  }
}