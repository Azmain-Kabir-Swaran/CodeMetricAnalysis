{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "multiplyAndNormalizeUp",
  "functionId": "multiplyAndNormalizeUp___r-Resource__by-double[]__stepFactor-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 505,
  "functionEndLine": 520,
  "numCommitsSeen": 37,
  "timeTaken": 1793,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "034b312d9f19024d2eabd377210d17d4080ef70e"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "034b312d9f19024d2eabd377210d17d4080ef70e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public Resource multiplyAndNormalizeUp(Resource r, double[] by,\n       Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n       long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n       ret.setResourceValue(i, ResourceCalculator\n           .roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource multiplyAndNormalizeUp(Resource r, double[] by,\n      Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n      ret.setResourceValue(i, ResourceCalculator\n          .roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/05/18 9:06 AM",
      "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 69.04,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,16 @@\n   public Resource multiplyAndNormalizeUp(Resource r, double[] by,\n       Resource stepFactor) {\n     Resource ret \u003d Resource.newInstance(r);\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n-      long stepFactorValue \u003d UnitsConversionUtil.convert(\n-          stepFactorResourceInformation.getUnits(),\n-          rResourceInformation.getUnits(),\n-          stepFactorResourceInformation.getValue());\n+      long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n       ret.setResourceValue(i, ResourceCalculator\n           .roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource multiplyAndNormalizeUp(Resource r, double[] by,\n      Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n      ret.setResourceValue(i, ResourceCalculator\n          .roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "034b312d9f19024d2eabd377210d17d4080ef70e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7411. Inter-Queue preemption\u0027s computeFixpointAllocation need to handle absolute resources while computing normalizedGuarantee. (Sunil G via wangda)\n\nChange-Id: I41b1d7558c20fc4eb2050d40134175a2ef6330cb\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "034b312d9f19024d2eabd377210d17d4080ef70e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,19 @@\n+  public Resource multiplyAndNormalizeUp(Resource r, double[] by,\n+      Resource stepFactor) {\n+    Resource ret \u003d Resource.newInstance(r);\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n+      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n+          .getResourceInformation(i);\n+\n+      long rValue \u003d rResourceInformation.getValue();\n+      long stepFactorValue \u003d UnitsConversionUtil.convert(\n+          stepFactorResourceInformation.getUnits(),\n+          rResourceInformation.getUnits(),\n+          stepFactorResourceInformation.getValue());\n+      ret.setResourceValue(i, ResourceCalculator\n+          .roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource multiplyAndNormalizeUp(Resource r, double[] by,\n      Resource stepFactor) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d UnitsConversionUtil.convert(\n          stepFactorResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          stepFactorResourceInformation.getValue());\n      ret.setResourceValue(i, ResourceCalculator\n          .roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}