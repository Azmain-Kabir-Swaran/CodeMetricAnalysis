{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineStorageUtils.java",
  "functionName": "matchCompareFilter",
  "functionId": "matchCompareFilter___entity-TimelineEntity__compareFilter-TimelineCompareFilter__entityFiltersType-TimelineEntityFiltersType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
  "functionStartLine": 261,
  "functionEndLine": 285,
  "numCommitsSeen": 12,
  "timeTaken": 1024,
  "changeHistory": [
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1"
  ],
  "changeHistoryShort": {
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,25 @@\n+  private static boolean matchCompareFilter(TimelineEntity entity,\n+      TimelineCompareFilter compareFilter,\n+      TimelineEntityFiltersType entityFiltersType) throws IOException {\n+    // Currently exists filter is only supported for metric filters.\n+    if (entityFiltersType !\u003d TimelineEntityFiltersType.METRIC) {\n+      return false;\n+    }\n+    // We expect only integral values(short/int/long) for metric filters.\n+    if (!isIntegralValue(compareFilter.getValue())) {\n+      throw new IOException(\"Metric filters has non integral values\");\n+    }\n+    Map\u003cString, TimelineMetric\u003e metricMap \u003d\n+        new HashMap\u003cString, TimelineMetric\u003e();\n+    for (TimelineMetric metric : entity.getMetrics()) {\n+      metricMap.put(metric.getId(), metric);\n+    }\n+    TimelineMetric metric \u003d metricMap.get(compareFilter.getKey());\n+    if (metric \u003d\u003d null) {\n+      return false;\n+    }\n+    // We will be using the latest value of metric to compare.\n+    return compareValues(compareFilter.getCompareOp(),\n+        metric.getValuesJAXB().firstEntry().getValue().longValue(),\n+        ((Number)compareFilter.getValue()).longValue());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean matchCompareFilter(TimelineEntity entity,\n      TimelineCompareFilter compareFilter,\n      TimelineEntityFiltersType entityFiltersType) throws IOException {\n    // Currently exists filter is only supported for metric filters.\n    if (entityFiltersType !\u003d TimelineEntityFiltersType.METRIC) {\n      return false;\n    }\n    // We expect only integral values(short/int/long) for metric filters.\n    if (!isIntegralValue(compareFilter.getValue())) {\n      throw new IOException(\"Metric filters has non integral values\");\n    }\n    Map\u003cString, TimelineMetric\u003e metricMap \u003d\n        new HashMap\u003cString, TimelineMetric\u003e();\n    for (TimelineMetric metric : entity.getMetrics()) {\n      metricMap.put(metric.getId(), metric);\n    }\n    TimelineMetric metric \u003d metricMap.get(compareFilter.getKey());\n    if (metric \u003d\u003d null) {\n      return false;\n    }\n    // We will be using the latest value of metric to compare.\n    return compareValues(compareFilter.getCompareOp(),\n        metric.getValuesJAXB().firstEntry().getValue().longValue(),\n        ((Number)compareFilter.getValue()).longValue());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java"
    }
  }
}