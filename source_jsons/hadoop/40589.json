{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultPlacementAlgorithm.java",
  "functionName": "validatePlacement",
  "functionId": "validatePlacement___applicationId-ApplicationId__resp-ConstraintPlacementAlgorithmOutput__rejectedRequests-List__SchedulingRequest____availableResources-Map__NodeId,Resource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/DefaultPlacementAlgorithm.java",
  "functionStartLine": 231,
  "functionEndLine": 273,
  "numCommitsSeen": 15,
  "timeTaken": 2004,
  "changeHistory": [
    "6e5ba9366fc05719906ff2789b1a0fd26001182b",
    "a4c539fcdba817e313b2375abf2c4c9a1d13a4fd"
  ],
  "changeHistoryShort": {
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": "Ymultichange(Yparameterchange,Ybodychange)",
    "a4c539fcdba817e313b2375abf2c4c9a1d13a4fd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "02/02/18 10:28 AM",
      "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
          "commitDate": "02/02/18 10:28 AM",
          "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "a4c539fcdba817e313b2375abf2c4c9a1d13a4fd",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,43 @@\n   private void validatePlacement(ApplicationId applicationId,\n       ConstraintPlacementAlgorithmOutput resp,\n-      List\u003cSchedulingRequest\u003e rejectedRequests) {\n+      List\u003cSchedulingRequest\u003e rejectedRequests,\n+      Map\u003cNodeId, Resource\u003e availableResources) {\n     Iterator\u003cPlacedSchedulingRequest\u003e pReqIter \u003d\n         resp.getPlacedRequests().iterator();\n     while (pReqIter.hasNext()) {\n       PlacedSchedulingRequest pReq \u003d pReqIter.next();\n       Iterator\u003cSchedulerNode\u003e nodeIter \u003d pReq.getNodes().iterator();\n       // Assuming all reqs were satisfied.\n       int num \u003d 0;\n       while (nodeIter.hasNext()) {\n         SchedulerNode node \u003d nodeIter.next();\n         try {\n           // Remove just the tags for this placement.\n           this.tagsManager.removeTempTags(node.getNodeID(),\n               applicationId, pReq.getSchedulingRequest().getAllocationTags());\n-          if (!attemptPlacementOnNode(\n-              applicationId, pReq.getSchedulingRequest(), node)) {\n+          Resource availOnNode \u003d availableResources.get(node.getNodeID());\n+          if (!attemptPlacementOnNode(applicationId, availOnNode,\n+              pReq.getSchedulingRequest(), node, true)) {\n             nodeIter.remove();\n             num++;\n+            Resources.subtractFrom(availOnNode,\n+                pReq.getSchedulingRequest().getResourceSizing().getResources());\n           } else {\n             // Add back the tags if everything is fine.\n             this.tagsManager.addTempTags(node.getNodeID(),\n                 applicationId, pReq.getSchedulingRequest().getAllocationTags());\n           }\n         } catch (InvalidAllocationTagsQueryException e) {\n           LOG.warn(\"Got exception from TagManager !\", e);\n         }\n       }\n       if (num \u003e 0) {\n         SchedulingRequest sReq \u003d cloneReq(pReq.getSchedulingRequest());\n         sReq.getResourceSizing().setNumAllocations(num);\n         rejectedRequests.add(sReq);\n       }\n       if (pReq.getNodes().isEmpty()) {\n         pReqIter.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validatePlacement(ApplicationId applicationId,\n      ConstraintPlacementAlgorithmOutput resp,\n      List\u003cSchedulingRequest\u003e rejectedRequests,\n      Map\u003cNodeId, Resource\u003e availableResources) {\n    Iterator\u003cPlacedSchedulingRequest\u003e pReqIter \u003d\n        resp.getPlacedRequests().iterator();\n    while (pReqIter.hasNext()) {\n      PlacedSchedulingRequest pReq \u003d pReqIter.next();\n      Iterator\u003cSchedulerNode\u003e nodeIter \u003d pReq.getNodes().iterator();\n      // Assuming all reqs were satisfied.\n      int num \u003d 0;\n      while (nodeIter.hasNext()) {\n        SchedulerNode node \u003d nodeIter.next();\n        try {\n          // Remove just the tags for this placement.\n          this.tagsManager.removeTempTags(node.getNodeID(),\n              applicationId, pReq.getSchedulingRequest().getAllocationTags());\n          Resource availOnNode \u003d availableResources.get(node.getNodeID());\n          if (!attemptPlacementOnNode(applicationId, availOnNode,\n              pReq.getSchedulingRequest(), node, true)) {\n            nodeIter.remove();\n            num++;\n            Resources.subtractFrom(availOnNode,\n                pReq.getSchedulingRequest().getResourceSizing().getResources());\n          } else {\n            // Add back the tags if everything is fine.\n            this.tagsManager.addTempTags(node.getNodeID(),\n                applicationId, pReq.getSchedulingRequest().getAllocationTags());\n          }\n        } catch (InvalidAllocationTagsQueryException e) {\n          LOG.warn(\"Got exception from TagManager !\", e);\n        }\n      }\n      if (num \u003e 0) {\n        SchedulingRequest sReq \u003d cloneReq(pReq.getSchedulingRequest());\n        sReq.getResourceSizing().setNumAllocations(num);\n        rejectedRequests.add(sReq);\n      }\n      if (pReq.getNodes().isEmpty()) {\n        pReqIter.remove();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/DefaultPlacementAlgorithm.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, resp-ConstraintPlacementAlgorithmOutput, rejectedRequests-List\u003cSchedulingRequest\u003e]",
            "newValue": "[applicationId-ApplicationId, resp-ConstraintPlacementAlgorithmOutput, rejectedRequests-List\u003cSchedulingRequest\u003e, availableResources-Map\u003cNodeId,Resource\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
          "commitDate": "02/02/18 10:28 AM",
          "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "a4c539fcdba817e313b2375abf2c4c9a1d13a4fd",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,43 @@\n   private void validatePlacement(ApplicationId applicationId,\n       ConstraintPlacementAlgorithmOutput resp,\n-      List\u003cSchedulingRequest\u003e rejectedRequests) {\n+      List\u003cSchedulingRequest\u003e rejectedRequests,\n+      Map\u003cNodeId, Resource\u003e availableResources) {\n     Iterator\u003cPlacedSchedulingRequest\u003e pReqIter \u003d\n         resp.getPlacedRequests().iterator();\n     while (pReqIter.hasNext()) {\n       PlacedSchedulingRequest pReq \u003d pReqIter.next();\n       Iterator\u003cSchedulerNode\u003e nodeIter \u003d pReq.getNodes().iterator();\n       // Assuming all reqs were satisfied.\n       int num \u003d 0;\n       while (nodeIter.hasNext()) {\n         SchedulerNode node \u003d nodeIter.next();\n         try {\n           // Remove just the tags for this placement.\n           this.tagsManager.removeTempTags(node.getNodeID(),\n               applicationId, pReq.getSchedulingRequest().getAllocationTags());\n-          if (!attemptPlacementOnNode(\n-              applicationId, pReq.getSchedulingRequest(), node)) {\n+          Resource availOnNode \u003d availableResources.get(node.getNodeID());\n+          if (!attemptPlacementOnNode(applicationId, availOnNode,\n+              pReq.getSchedulingRequest(), node, true)) {\n             nodeIter.remove();\n             num++;\n+            Resources.subtractFrom(availOnNode,\n+                pReq.getSchedulingRequest().getResourceSizing().getResources());\n           } else {\n             // Add back the tags if everything is fine.\n             this.tagsManager.addTempTags(node.getNodeID(),\n                 applicationId, pReq.getSchedulingRequest().getAllocationTags());\n           }\n         } catch (InvalidAllocationTagsQueryException e) {\n           LOG.warn(\"Got exception from TagManager !\", e);\n         }\n       }\n       if (num \u003e 0) {\n         SchedulingRequest sReq \u003d cloneReq(pReq.getSchedulingRequest());\n         sReq.getResourceSizing().setNumAllocations(num);\n         rejectedRequests.add(sReq);\n       }\n       if (pReq.getNodes().isEmpty()) {\n         pReqIter.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validatePlacement(ApplicationId applicationId,\n      ConstraintPlacementAlgorithmOutput resp,\n      List\u003cSchedulingRequest\u003e rejectedRequests,\n      Map\u003cNodeId, Resource\u003e availableResources) {\n    Iterator\u003cPlacedSchedulingRequest\u003e pReqIter \u003d\n        resp.getPlacedRequests().iterator();\n    while (pReqIter.hasNext()) {\n      PlacedSchedulingRequest pReq \u003d pReqIter.next();\n      Iterator\u003cSchedulerNode\u003e nodeIter \u003d pReq.getNodes().iterator();\n      // Assuming all reqs were satisfied.\n      int num \u003d 0;\n      while (nodeIter.hasNext()) {\n        SchedulerNode node \u003d nodeIter.next();\n        try {\n          // Remove just the tags for this placement.\n          this.tagsManager.removeTempTags(node.getNodeID(),\n              applicationId, pReq.getSchedulingRequest().getAllocationTags());\n          Resource availOnNode \u003d availableResources.get(node.getNodeID());\n          if (!attemptPlacementOnNode(applicationId, availOnNode,\n              pReq.getSchedulingRequest(), node, true)) {\n            nodeIter.remove();\n            num++;\n            Resources.subtractFrom(availOnNode,\n                pReq.getSchedulingRequest().getResourceSizing().getResources());\n          } else {\n            // Add back the tags if everything is fine.\n            this.tagsManager.addTempTags(node.getNodeID(),\n                applicationId, pReq.getSchedulingRequest().getAllocationTags());\n          }\n        } catch (InvalidAllocationTagsQueryException e) {\n          LOG.warn(\"Got exception from TagManager !\", e);\n        }\n      }\n      if (num \u003e 0) {\n        SchedulingRequest sReq \u003d cloneReq(pReq.getSchedulingRequest());\n        sReq.getResourceSizing().setNumAllocations(num);\n        rejectedRequests.add(sReq);\n      }\n      if (pReq.getNodes().isEmpty()) {\n        pReqIter.remove();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/DefaultPlacementAlgorithm.java",
          "extendedDetails": {}
        }
      ]
    },
    "a4c539fcdba817e313b2375abf2c4c9a1d13a4fd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7783. Add validation step to ensure constraints are not violated due to order in which a request is processed. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a4c539fcdba817e313b2375abf2c4c9a1d13a4fd",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,39 @@\n+  private void validatePlacement(ApplicationId applicationId,\n+      ConstraintPlacementAlgorithmOutput resp,\n+      List\u003cSchedulingRequest\u003e rejectedRequests) {\n+    Iterator\u003cPlacedSchedulingRequest\u003e pReqIter \u003d\n+        resp.getPlacedRequests().iterator();\n+    while (pReqIter.hasNext()) {\n+      PlacedSchedulingRequest pReq \u003d pReqIter.next();\n+      Iterator\u003cSchedulerNode\u003e nodeIter \u003d pReq.getNodes().iterator();\n+      // Assuming all reqs were satisfied.\n+      int num \u003d 0;\n+      while (nodeIter.hasNext()) {\n+        SchedulerNode node \u003d nodeIter.next();\n+        try {\n+          // Remove just the tags for this placement.\n+          this.tagsManager.removeTempTags(node.getNodeID(),\n+              applicationId, pReq.getSchedulingRequest().getAllocationTags());\n+          if (!attemptPlacementOnNode(\n+              applicationId, pReq.getSchedulingRequest(), node)) {\n+            nodeIter.remove();\n+            num++;\n+          } else {\n+            // Add back the tags if everything is fine.\n+            this.tagsManager.addTempTags(node.getNodeID(),\n+                applicationId, pReq.getSchedulingRequest().getAllocationTags());\n+          }\n+        } catch (InvalidAllocationTagsQueryException e) {\n+          LOG.warn(\"Got exception from TagManager !\", e);\n+        }\n+      }\n+      if (num \u003e 0) {\n+        SchedulingRequest sReq \u003d cloneReq(pReq.getSchedulingRequest());\n+        sReq.getResourceSizing().setNumAllocations(num);\n+        rejectedRequests.add(sReq);\n+      }\n+      if (pReq.getNodes().isEmpty()) {\n+        pReqIter.remove();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validatePlacement(ApplicationId applicationId,\n      ConstraintPlacementAlgorithmOutput resp,\n      List\u003cSchedulingRequest\u003e rejectedRequests) {\n    Iterator\u003cPlacedSchedulingRequest\u003e pReqIter \u003d\n        resp.getPlacedRequests().iterator();\n    while (pReqIter.hasNext()) {\n      PlacedSchedulingRequest pReq \u003d pReqIter.next();\n      Iterator\u003cSchedulerNode\u003e nodeIter \u003d pReq.getNodes().iterator();\n      // Assuming all reqs were satisfied.\n      int num \u003d 0;\n      while (nodeIter.hasNext()) {\n        SchedulerNode node \u003d nodeIter.next();\n        try {\n          // Remove just the tags for this placement.\n          this.tagsManager.removeTempTags(node.getNodeID(),\n              applicationId, pReq.getSchedulingRequest().getAllocationTags());\n          if (!attemptPlacementOnNode(\n              applicationId, pReq.getSchedulingRequest(), node)) {\n            nodeIter.remove();\n            num++;\n          } else {\n            // Add back the tags if everything is fine.\n            this.tagsManager.addTempTags(node.getNodeID(),\n                applicationId, pReq.getSchedulingRequest().getAllocationTags());\n          }\n        } catch (InvalidAllocationTagsQueryException e) {\n          LOG.warn(\"Got exception from TagManager !\", e);\n        }\n      }\n      if (num \u003e 0) {\n        SchedulingRequest sReq \u003d cloneReq(pReq.getSchedulingRequest());\n        sReq.getResourceSizing().setNumAllocations(num);\n        rejectedRequests.add(sReq);\n      }\n      if (pReq.getNodes().isEmpty()) {\n        pReqIter.remove();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/DefaultPlacementAlgorithm.java"
    }
  }
}