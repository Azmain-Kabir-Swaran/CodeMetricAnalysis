{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "createAndStartZKManager",
  "functionId": "createAndStartZKManager___config-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 399,
  "functionEndLine": 421,
  "numCommitsSeen": 642,
  "timeTaken": 8882,
  "changeHistory": [
    "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
    "bcb2528a51c33e4caff8d744c5e14c1accfc47d0",
    "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b"
  ],
  "changeHistoryShort": {
    "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "bcb2528a51c33e4caff8d744c5e14c1accfc47d0": "Yexceptionschange",
    "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7453. Fix issue where RM fails to switch to active after first successful start. (Rohith Sharma K S via asuresh)\n",
      "commitDate": "08/11/17 8:00 AM",
      "commitName": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7453. Fix issue where RM fails to switch to active after first successful start. (Rohith Sharma K S via asuresh)\n",
          "commitDate": "08/11/17 8:00 AM",
          "commitName": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "09/10/17 8:36 PM",
          "commitNameOld": "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 29.52,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,23 @@\n-  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n+  public ZKCuratorManager createAndStartZKManager(Configuration\n       config) throws IOException {\n-    if (this.zkManager !\u003d null) {\n-      return zkManager;\n-    }\n     ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n     // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n           YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n       String defaultFencingAuth \u003d\n           zkRootNodeUsername + \":\" + zkRootNodePassword;\n       byte[] defaultFencingAuthData \u003d\n           defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n       String scheme \u003d new DigestAuthenticationProvider().getScheme();\n       AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n       authInfos.add(authInfo);\n     }\n \n     manager.start(authInfos);\n-    this.zkManager \u003d manager;\n-    return zkManager;\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration\n      config) throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "getAndStartZKManager",
            "newValue": "createAndStartZKManager"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7453. Fix issue where RM fails to switch to active after first successful start. (Rohith Sharma K S via asuresh)\n",
          "commitDate": "08/11/17 8:00 AM",
          "commitName": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "09/10/17 8:36 PM",
          "commitNameOld": "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 29.52,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,23 @@\n-  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n+  public ZKCuratorManager createAndStartZKManager(Configuration\n       config) throws IOException {\n-    if (this.zkManager !\u003d null) {\n-      return zkManager;\n-    }\n     ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n     // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n           YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n       String defaultFencingAuth \u003d\n           zkRootNodeUsername + \":\" + zkRootNodePassword;\n       byte[] defaultFencingAuthData \u003d\n           defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n       String scheme \u003d new DigestAuthenticationProvider().getScheme();\n       AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n       authInfos.add(authInfo);\n     }\n \n     manager.start(authInfos);\n-    this.zkManager \u003d manager;\n-    return zkManager;\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration\n      config) throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7453. Fix issue where RM fails to switch to active after first successful start. (Rohith Sharma K S via asuresh)\n",
          "commitDate": "08/11/17 8:00 AM",
          "commitName": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "09/10/17 8:36 PM",
          "commitNameOld": "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 29.52,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,23 @@\n-  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n+  public ZKCuratorManager createAndStartZKManager(Configuration\n       config) throws IOException {\n-    if (this.zkManager !\u003d null) {\n-      return zkManager;\n-    }\n     ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n     // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n           YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n       String defaultFencingAuth \u003d\n           zkRootNodeUsername + \":\" + zkRootNodePassword;\n       byte[] defaultFencingAuthData \u003d\n           defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n       String scheme \u003d new DigestAuthenticationProvider().getScheme();\n       AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n       authInfos.add(authInfo);\n     }\n \n     manager.start(authInfos);\n-    this.zkManager \u003d manager;\n-    return zkManager;\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration\n      config) throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/10/17 9:49 AM",
          "commitNameOld": "72d22b753abde4d07a727479d3f3d5d84d5dd6b2",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 3.06,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,27 @@\n-  public ZKCuratorManager createAndStartZKManager(Configuration config)\n-      throws IOException {\n+  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n+      config) throws IOException {\n+    if (this.zkManager !\u003d null) {\n+      return zkManager;\n+    }\n     ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n     // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n           YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n       String defaultFencingAuth \u003d\n           zkRootNodeUsername + \":\" + zkRootNodePassword;\n       byte[] defaultFencingAuthData \u003d\n           defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n       String scheme \u003d new DigestAuthenticationProvider().getScheme();\n       AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n       authInfos.add(authInfo);\n     }\n \n     manager.start(authInfos);\n-    return manager;\n+    this.zkManager \u003d manager;\n+    return zkManager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n      config) throws IOException {\n    if (this.zkManager !\u003d null) {\n      return zkManager;\n    }\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    this.zkManager \u003d manager;\n    return zkManager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "createAndStartZKManager",
            "newValue": "getAndStartZKManager"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/10/17 9:49 AM",
          "commitNameOld": "72d22b753abde4d07a727479d3f3d5d84d5dd6b2",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 3.06,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,27 @@\n-  public ZKCuratorManager createAndStartZKManager(Configuration config)\n-      throws IOException {\n+  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n+      config) throws IOException {\n+    if (this.zkManager !\u003d null) {\n+      return zkManager;\n+    }\n     ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n     // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n           YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n       String defaultFencingAuth \u003d\n           zkRootNodeUsername + \":\" + zkRootNodePassword;\n       byte[] defaultFencingAuthData \u003d\n           defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n       String scheme \u003d new DigestAuthenticationProvider().getScheme();\n       AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n       authInfos.add(authInfo);\n     }\n \n     manager.start(authInfos);\n-    return manager;\n+    this.zkManager \u003d manager;\n+    return zkManager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n      config) throws IOException {\n    if (this.zkManager !\u003d null) {\n      return zkManager;\n    }\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    this.zkManager \u003d manager;\n    return zkManager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/10/17 9:49 AM",
          "commitNameOld": "72d22b753abde4d07a727479d3f3d5d84d5dd6b2",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 3.06,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,27 @@\n-  public ZKCuratorManager createAndStartZKManager(Configuration config)\n-      throws IOException {\n+  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n+      config) throws IOException {\n+    if (this.zkManager !\u003d null) {\n+      return zkManager;\n+    }\n     ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n     // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n           YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n       String defaultFencingAuth \u003d\n           zkRootNodeUsername + \":\" + zkRootNodePassword;\n       byte[] defaultFencingAuthData \u003d\n           defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n       String scheme \u003d new DigestAuthenticationProvider().getScheme();\n       AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n       authInfos.add(authInfo);\n     }\n \n     manager.start(authInfos);\n-    return manager;\n+    this.zkManager \u003d manager;\n+    return zkManager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ZKCuratorManager getAndStartZKManager(Configuration\n      config) throws IOException {\n    if (this.zkManager !\u003d null) {\n      return zkManager;\n    }\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    this.zkManager \u003d manager;\n    return zkManager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
      "commitDate": "11/08/17 1:58 PM",
      "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
          "commitDate": "11/08/17 1:58 PM",
          "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  public CuratorFramework createAndStartCurator(Configuration conf)\n+  public ZKCuratorManager createAndStartZKManager(Configuration config)\n       throws IOException {\n-    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n-    if (zkHostPort \u003d\u003d null) {\n-      throw new YarnRuntimeException(\n-          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n-    }\n-    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n-        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n-    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n-    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n+    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n-    // set up zk auths\n-    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n+    // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n-    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n-      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n+    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n+        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n+      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n+          YarnConfiguration.RM_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n+      String defaultFencingAuth \u003d\n+          zkRootNodeUsername + \":\" + zkRootNodePassword;\n+      byte[] defaultFencingAuthData \u003d\n+          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n+      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n+      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n+      authInfos.add(authInfo);\n     }\n \n-    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n-        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n-      String zkRootNodeUsername \u003d HAUtil\n-          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n-      byte[] defaultFencingAuth \u003d\n-          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n-              .getBytes(Charset.forName(\"UTF-8\"));\n-      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n-          defaultFencingAuth));\n-    }\n-\n-    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n-        .connectString(zkHostPort)\n-        .sessionTimeoutMs(zkSessionTimeout)\n-        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n-        .authorization(authInfos).build();\n-    client.start();\n-    return client;\n+    manager.start(authInfos);\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration config)\n      throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "createAndStartCurator",
            "newValue": "createAndStartZKManager"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
          "commitDate": "11/08/17 1:58 PM",
          "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  public CuratorFramework createAndStartCurator(Configuration conf)\n+  public ZKCuratorManager createAndStartZKManager(Configuration config)\n       throws IOException {\n-    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n-    if (zkHostPort \u003d\u003d null) {\n-      throw new YarnRuntimeException(\n-          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n-    }\n-    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n-        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n-    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n-    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n+    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n-    // set up zk auths\n-    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n+    // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n-    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n-      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n+    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n+        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n+      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n+          YarnConfiguration.RM_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n+      String defaultFencingAuth \u003d\n+          zkRootNodeUsername + \":\" + zkRootNodePassword;\n+      byte[] defaultFencingAuthData \u003d\n+          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n+      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n+      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n+      authInfos.add(authInfo);\n     }\n \n-    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n-        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n-      String zkRootNodeUsername \u003d HAUtil\n-          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n-      byte[] defaultFencingAuth \u003d\n-          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n-              .getBytes(Charset.forName(\"UTF-8\"));\n-      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n-          defaultFencingAuth));\n-    }\n-\n-    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n-        .connectString(zkHostPort)\n-        .sessionTimeoutMs(zkSessionTimeout)\n-        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n-        .authorization(authInfos).build();\n-    client.start();\n-    return client;\n+    manager.start(authInfos);\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration config)\n      throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[config-Configuration]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
          "commitDate": "11/08/17 1:58 PM",
          "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  public CuratorFramework createAndStartCurator(Configuration conf)\n+  public ZKCuratorManager createAndStartZKManager(Configuration config)\n       throws IOException {\n-    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n-    if (zkHostPort \u003d\u003d null) {\n-      throw new YarnRuntimeException(\n-          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n-    }\n-    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n-        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n-    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n-    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n+    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n-    // set up zk auths\n-    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n+    // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n-    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n-      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n+    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n+        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n+      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n+          YarnConfiguration.RM_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n+      String defaultFencingAuth \u003d\n+          zkRootNodeUsername + \":\" + zkRootNodePassword;\n+      byte[] defaultFencingAuthData \u003d\n+          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n+      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n+      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n+      authInfos.add(authInfo);\n     }\n \n-    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n-        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n-      String zkRootNodeUsername \u003d HAUtil\n-          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n-      byte[] defaultFencingAuth \u003d\n-          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n-              .getBytes(Charset.forName(\"UTF-8\"));\n-      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n-          defaultFencingAuth));\n-    }\n-\n-    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n-        .connectString(zkHostPort)\n-        .sessionTimeoutMs(zkSessionTimeout)\n-        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n-        .authorization(authInfos).build();\n-    client.start();\n-    return client;\n+    manager.start(authInfos);\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration config)\n      throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "CuratorFramework",
            "newValue": "ZKCuratorManager"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
          "commitDate": "11/08/17 1:58 PM",
          "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.85,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,23 @@\n-  public CuratorFramework createAndStartCurator(Configuration conf)\n+  public ZKCuratorManager createAndStartZKManager(Configuration config)\n       throws IOException {\n-    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n-    if (zkHostPort \u003d\u003d null) {\n-      throw new YarnRuntimeException(\n-          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n-    }\n-    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n-        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n-    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n-    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n-        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n+    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n \n-    // set up zk auths\n-    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n+    // Get authentication\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n-    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n-      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n+    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n+        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n+      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n+          YarnConfiguration.RM_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n+      String defaultFencingAuth \u003d\n+          zkRootNodeUsername + \":\" + zkRootNodePassword;\n+      byte[] defaultFencingAuthData \u003d\n+          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n+      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n+      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n+      authInfos.add(authInfo);\n     }\n \n-    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n-        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n-      String zkRootNodeUsername \u003d HAUtil\n-          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n-      byte[] defaultFencingAuth \u003d\n-          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n-              .getBytes(Charset.forName(\"UTF-8\"));\n-      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n-          defaultFencingAuth));\n-    }\n-\n-    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n-        .connectString(zkHostPort)\n-        .sessionTimeoutMs(zkSessionTimeout)\n-        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n-        .authorization(authInfos).build();\n-    client.start();\n-    return client;\n+    manager.start(authInfos);\n+    return manager;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ZKCuratorManager createAndStartZKManager(Configuration config)\n      throws IOException {\n    ZKCuratorManager manager \u003d new ZKCuratorManager(config);\n\n    // Get authentication\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    if (HAUtil.isHAEnabled(config) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, config) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil.getConfValueForRMInstance(\n          YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS, config);\n      String defaultFencingAuth \u003d\n          zkRootNodeUsername + \":\" + zkRootNodePassword;\n      byte[] defaultFencingAuthData \u003d\n          defaultFencingAuth.getBytes(Charset.forName(\"UTF-8\"));\n      String scheme \u003d new DigestAuthenticationProvider().getScheme();\n      AuthInfo authInfo \u003d new AuthInfo(scheme, defaultFencingAuthData);\n      authInfos.add(authInfo);\n    }\n\n    manager.start(authInfos);\n    return manager;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "bcb2528a51c33e4caff8d744c5e14c1accfc47d0": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-5400. Light cleanup in ZKRMStateStore (templedf via rkanter)\n",
      "commitDate": "28/09/16 2:56 PM",
      "commitName": "bcb2528a51c33e4caff8d744c5e14c1accfc47d0",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 50.59,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public CuratorFramework createAndStartCurator(Configuration conf)\n-      throws Exception {\n+      throws IOException {\n     String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkHostPort \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n     }\n     int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n         YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n     int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n     int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n \n     // set up zk auths\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n     List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n     for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n       authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n     }\n \n     if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n         YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n       String zkRootNodeUsername \u003d HAUtil\n           .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n               YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n       byte[] defaultFencingAuth \u003d\n           (zkRootNodeUsername + \":\" + zkRootNodePassword)\n               .getBytes(Charset.forName(\"UTF-8\"));\n       authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n           defaultFencingAuth));\n     }\n \n     CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n         .connectString(zkHostPort)\n         .sessionTimeoutMs(zkSessionTimeout)\n         .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n         .authorization(authInfos).build();\n     client.start();\n     return client;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CuratorFramework createAndStartCurator(Configuration conf)\n      throws IOException {\n    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkHostPort \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n    }\n    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n\n    // set up zk auths\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n    }\n\n    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil\n          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n      byte[] defaultFencingAuth \u003d\n          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n              .getBytes(Charset.forName(\"UTF-8\"));\n      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n          defaultFencingAuth));\n    }\n\n    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n        .connectString(zkHostPort)\n        .sessionTimeoutMs(zkSessionTimeout)\n        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n        .authorization(authInfos).build();\n    client.start();\n    return client;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldValue": "[Exception]",
        "newValue": "[IOException]"
      }
    },
    "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4559. Make leader elector and zk store share the same curator\nclient. Contributed by Jian He\n",
      "commitDate": "20/01/16 2:48 PM",
      "commitName": "890a2ebd1af51d24ccbbc5d1d65d17b24ad8ab9b",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,41 @@\n+  public CuratorFramework createAndStartCurator(Configuration conf)\n+      throws Exception {\n+    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n+    if (zkHostPort \u003d\u003d null) {\n+      throw new YarnRuntimeException(\n+          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n+    }\n+    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n+        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n+    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n+        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n+    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n+        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n+\n+    // set up zk auths\n+    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n+    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n+    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n+      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n+    }\n+\n+    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n+        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n+      String zkRootNodeUsername \u003d HAUtil\n+          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n+      byte[] defaultFencingAuth \u003d\n+          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n+              .getBytes(Charset.forName(\"UTF-8\"));\n+      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n+          defaultFencingAuth));\n+    }\n+\n+    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n+        .connectString(zkHostPort)\n+        .sessionTimeoutMs(zkSessionTimeout)\n+        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n+        .authorization(authInfos).build();\n+    client.start();\n+    return client;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CuratorFramework createAndStartCurator(Configuration conf)\n      throws Exception {\n    String zkHostPort \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkHostPort \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          YarnConfiguration.RM_ZK_ADDRESS + \" is not configured.\");\n    }\n    int numRetries \u003d conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,\n        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);\n    int zkSessionTimeout \u003d conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n    int zkRetryInterval \u003d conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);\n\n    // set up zk auths\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n    List\u003cAuthInfo\u003e authInfos \u003d new ArrayList\u003c\u003e();\n    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n    }\n\n    if (HAUtil.isHAEnabled(conf) \u0026\u0026 HAUtil.getConfValueForRMInstance(\n        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) \u003d\u003d null) {\n      String zkRootNodeUsername \u003d HAUtil\n          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);\n      byte[] defaultFencingAuth \u003d\n          (zkRootNodeUsername + \":\" + zkRootNodePassword)\n              .getBytes(Charset.forName(\"UTF-8\"));\n      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),\n          defaultFencingAuth));\n    }\n\n    CuratorFramework client \u003d  CuratorFrameworkFactory.builder()\n        .connectString(zkHostPort)\n        .sessionTimeoutMs(zkSessionTimeout)\n        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))\n        .authorization(authInfos).build();\n    client.start();\n    return client;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}