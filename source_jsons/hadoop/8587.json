{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatPBINode.java",
  "functionName": "loadINodesInSection",
  "functionId": "loadINodesInSection___in-InputStream__counter-Counter",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
  "functionStartLine": 338,
  "functionEndLine": 364,
  "numCommitsSeen": 63,
  "timeTaken": 1226,
  "changeHistory": [
    "b67812ea2111fa11bdd76096b923c93e1bdf2923"
  ],
  "changeHistoryShort": {
    "b67812ea2111fa11bdd76096b923c93e1bdf2923": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b67812ea2111fa11bdd76096b923c93e1bdf2923": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14617. Improve fsimage load time by writing sub-sections to the fsimage index (#1028). Contributed by  Stephen O\u0027Donnell.\n\nReviewed-by: He Xiaoqiao \u003chexiaoqiao@apache.org\u003e",
      "commitDate": "22/08/19 5:09 PM",
      "commitName": "b67812ea2111fa11bdd76096b923c93e1bdf2923",
      "commitAuthor": "Stephen O\u0027Donnell",
      "diff": "@@ -0,0 +1,27 @@\n+    private int loadINodesInSection(InputStream in, Counter counter)\n+        throws IOException {\n+      // As the input stream is a LimitInputStream, the reading will stop when\n+      // EOF is encountered at the end of the stream.\n+      int cntr \u003d 0;\n+      while (true) {\n+        INodeSection.INode p \u003d INodeSection.INode.parseDelimitedFrom(in);\n+        if (p \u003d\u003d null) {\n+          break;\n+        }\n+        if (p.getId() \u003d\u003d INodeId.ROOT_INODE_ID) {\n+          synchronized(this) {\n+            loadRootINode(p);\n+          }\n+        } else {\n+          INode n \u003d loadINode(p);\n+          synchronized(this) {\n+            dir.addToInodeMap(n);\n+          }\n+        }\n+        cntr++;\n+        if (counter !\u003d null) {\n+          counter.increment();\n+        }\n+      }\n+      return cntr;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int loadINodesInSection(InputStream in, Counter counter)\n        throws IOException {\n      // As the input stream is a LimitInputStream, the reading will stop when\n      // EOF is encountered at the end of the stream.\n      int cntr \u003d 0;\n      while (true) {\n        INodeSection.INode p \u003d INodeSection.INode.parseDelimitedFrom(in);\n        if (p \u003d\u003d null) {\n          break;\n        }\n        if (p.getId() \u003d\u003d INodeId.ROOT_INODE_ID) {\n          synchronized(this) {\n            loadRootINode(p);\n          }\n        } else {\n          INode n \u003d loadINode(p);\n          synchronized(this) {\n            dir.addToInodeMap(n);\n          }\n        }\n        cntr++;\n        if (counter !\u003d null) {\n          counter.increment();\n        }\n      }\n      return cntr;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java"
    }
  }
}