{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConnectionManager.java",
  "functionName": "getConnection",
  "functionId": "getConnection___ugi-UserGroupInformation__nnAddress-String__protocol-Class__?__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
  "functionStartLine": 178,
  "functionEndLine": 232,
  "numCommitsSeen": 12,
  "timeTaken": 4179,
  "changeHistory": [
    "94a8dec168842cc17787526ee9a662f427a5dcea",
    "0ca7142c112c14004a6411df0f0d1bf3c4d17702",
    "6aa7aabff801905f55a18d117f927d0125057d78",
    "a0ebb6b39f2932d3ea2fb5e287f52b841e108428",
    "2be64eb201134502a92f7239bef8aa780771ca0b",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "94a8dec168842cc17787526ee9a662f427a5dcea": "Ybodychange",
    "0ca7142c112c14004a6411df0f0d1bf3c4d17702": "Ybodychange",
    "6aa7aabff801905f55a18d117f927d0125057d78": "Ybodychange",
    "a0ebb6b39f2932d3ea2fb5e287f52b841e108428": "Ybodychange",
    "2be64eb201134502a92f7239bef8aa780771ca0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "94a8dec168842cc17787526ee9a662f427a5dcea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14114. RBF: MIN_ACTIVE_RATIO should be configurable. Contributed by Fei Hui.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "94a8dec168842cc17787526ee9a662f427a5dcea",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "0ca7142c112c14004a6411df0f0d1bf3c4d17702",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public ConnectionContext getConnection(UserGroupInformation ugi,\n       String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n \n     // Check if the manager is shutdown\n     if (!this.running) {\n       LOG.error(\n           \"Cannot get a connection to {} because the manager isn\u0027t running\",\n           nnAddress);\n       return null;\n     }\n \n     // Try to get the pool if created\n     ConnectionPoolId connectionId \u003d\n         new ConnectionPoolId(ugi, nnAddress, protocol);\n     ConnectionPool pool \u003d null;\n     readLock.lock();\n     try {\n       pool \u003d this.pools.get(connectionId);\n     } finally {\n       readLock.unlock();\n     }\n \n     // Create the pool if not created before\n     if (pool \u003d\u003d null) {\n       writeLock.lock();\n       try {\n         pool \u003d this.pools.get(connectionId);\n         if (pool \u003d\u003d null) {\n           pool \u003d new ConnectionPool(\n-              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n+              this.conf, nnAddress, ugi, this.minSize, this.maxSize,\n+              this.minActiveRatio, protocol);\n           this.pools.put(connectionId, pool);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n \n     ConnectionContext conn \u003d pool.getConnection();\n \n     // Add a new connection to the pool if it wasn\u0027t usable\n     if (conn \u003d\u003d null || !conn.isUsable()) {\n       if (!this.creatorQueue.offer(pool)) {\n         LOG.error(\"Cannot add more than {} connections at the same time\",\n             this.creatorQueueMaxSize);\n       }\n     }\n \n     if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n       LOG.error(\"We got a closed connection from {}\", pool);\n       conn \u003d null;\n     }\n \n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ConnectionContext getConnection(UserGroupInformation ugi,\n      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d\n        new ConnectionPoolId(ugi, nnAddress, protocol);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize,\n              this.minActiveRatio, protocol);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            this.creatorQueueMaxSize);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
      "extendedDetails": {}
    },
    "0ca7142c112c14004a6411df0f0d1bf3c4d17702": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-14114. RBF: MIN_ACTIVE_RATIO should be configurable. Contributed by Fei Hui.\"\n\nThis reverts commit 7c0d6f65fde12ead91ed7c706521ad1d3dc995f8.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "0ca7142c112c14004a6411df0f0d1bf3c4d17702",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6aa7aabff801905f55a18d117f927d0125057d78",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,54 @@\n   public ConnectionContext getConnection(UserGroupInformation ugi,\n       String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n \n     // Check if the manager is shutdown\n     if (!this.running) {\n       LOG.error(\n           \"Cannot get a connection to {} because the manager isn\u0027t running\",\n           nnAddress);\n       return null;\n     }\n \n     // Try to get the pool if created\n     ConnectionPoolId connectionId \u003d\n         new ConnectionPoolId(ugi, nnAddress, protocol);\n     ConnectionPool pool \u003d null;\n     readLock.lock();\n     try {\n       pool \u003d this.pools.get(connectionId);\n     } finally {\n       readLock.unlock();\n     }\n \n     // Create the pool if not created before\n     if (pool \u003d\u003d null) {\n       writeLock.lock();\n       try {\n         pool \u003d this.pools.get(connectionId);\n         if (pool \u003d\u003d null) {\n           pool \u003d new ConnectionPool(\n-              this.conf, nnAddress, ugi, this.minSize, this.maxSize,\n-              this.minActiveRatio, protocol);\n+              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n           this.pools.put(connectionId, pool);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n \n     ConnectionContext conn \u003d pool.getConnection();\n \n     // Add a new connection to the pool if it wasn\u0027t usable\n     if (conn \u003d\u003d null || !conn.isUsable()) {\n       if (!this.creatorQueue.offer(pool)) {\n         LOG.error(\"Cannot add more than {} connections at the same time\",\n             this.creatorQueueMaxSize);\n       }\n     }\n \n     if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n       LOG.error(\"We got a closed connection from {}\", pool);\n       conn \u003d null;\n     }\n \n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ConnectionContext getConnection(UserGroupInformation ugi,\n      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d\n        new ConnectionPoolId(ugi, nnAddress, protocol);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            this.creatorQueueMaxSize);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
      "extendedDetails": {}
    },
    "6aa7aabff801905f55a18d117f927d0125057d78": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14114. RBF: MIN_ACTIVE_RATIO should be configurable. Contributed by Fei Hui.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6aa7aabff801905f55a18d117f927d0125057d78",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "fa55eacd357f4c4524fb54598e989c5746921de2",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public ConnectionContext getConnection(UserGroupInformation ugi,\n       String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n \n     // Check if the manager is shutdown\n     if (!this.running) {\n       LOG.error(\n           \"Cannot get a connection to {} because the manager isn\u0027t running\",\n           nnAddress);\n       return null;\n     }\n \n     // Try to get the pool if created\n     ConnectionPoolId connectionId \u003d\n         new ConnectionPoolId(ugi, nnAddress, protocol);\n     ConnectionPool pool \u003d null;\n     readLock.lock();\n     try {\n       pool \u003d this.pools.get(connectionId);\n     } finally {\n       readLock.unlock();\n     }\n \n     // Create the pool if not created before\n     if (pool \u003d\u003d null) {\n       writeLock.lock();\n       try {\n         pool \u003d this.pools.get(connectionId);\n         if (pool \u003d\u003d null) {\n           pool \u003d new ConnectionPool(\n-              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n+              this.conf, nnAddress, ugi, this.minSize, this.maxSize,\n+              this.minActiveRatio, protocol);\n           this.pools.put(connectionId, pool);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n \n     ConnectionContext conn \u003d pool.getConnection();\n \n     // Add a new connection to the pool if it wasn\u0027t usable\n     if (conn \u003d\u003d null || !conn.isUsable()) {\n       if (!this.creatorQueue.offer(pool)) {\n         LOG.error(\"Cannot add more than {} connections at the same time\",\n             this.creatorQueueMaxSize);\n       }\n     }\n \n     if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n       LOG.error(\"We got a closed connection from {}\", pool);\n       conn \u003d null;\n     }\n \n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ConnectionContext getConnection(UserGroupInformation ugi,\n      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d\n        new ConnectionPoolId(ugi, nnAddress, protocol);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize,\n              this.minActiveRatio, protocol);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            this.creatorQueueMaxSize);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
      "extendedDetails": {}
    },
    "a0ebb6b39f2932d3ea2fb5e287f52b841e108428": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13634. RBF: Configurable value in xml for async connection request queue size. Contributed by CR Hota.\n",
      "commitDate": "29/08/18 1:15 AM",
      "commitName": "a0ebb6b39f2932d3ea2fb5e287f52b841e108428",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "03/04/18 12:08 AM",
      "commitNameOld": "2be64eb201134502a92f7239bef8aa780771ca0b",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 148.05,
      "commitsBetweenForRepo": 1590,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public ConnectionContext getConnection(UserGroupInformation ugi,\n       String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n \n     // Check if the manager is shutdown\n     if (!this.running) {\n       LOG.error(\n           \"Cannot get a connection to {} because the manager isn\u0027t running\",\n           nnAddress);\n       return null;\n     }\n \n     // Try to get the pool if created\n     ConnectionPoolId connectionId \u003d\n         new ConnectionPoolId(ugi, nnAddress, protocol);\n     ConnectionPool pool \u003d null;\n     readLock.lock();\n     try {\n       pool \u003d this.pools.get(connectionId);\n     } finally {\n       readLock.unlock();\n     }\n \n     // Create the pool if not created before\n     if (pool \u003d\u003d null) {\n       writeLock.lock();\n       try {\n         pool \u003d this.pools.get(connectionId);\n         if (pool \u003d\u003d null) {\n           pool \u003d new ConnectionPool(\n               this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n           this.pools.put(connectionId, pool);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n \n     ConnectionContext conn \u003d pool.getConnection();\n \n     // Add a new connection to the pool if it wasn\u0027t usable\n     if (conn \u003d\u003d null || !conn.isUsable()) {\n       if (!this.creatorQueue.offer(pool)) {\n         LOG.error(\"Cannot add more than {} connections at the same time\",\n-            MAX_NEW_CONNECTIONS);\n+            this.creatorQueueMaxSize);\n       }\n     }\n \n     if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n       LOG.error(\"We got a closed connection from {}\", pool);\n       conn \u003d null;\n     }\n \n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ConnectionContext getConnection(UserGroupInformation ugi,\n      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d\n        new ConnectionPoolId(ugi, nnAddress, protocol);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            this.creatorQueueMaxSize);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
      "extendedDetails": {}
    },
    "2be64eb201134502a92f7239bef8aa780771ca0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
      "commitDate": "03/04/18 12:08 AM",
      "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "19/03/18 10:13 PM",
          "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthorOld": "weiy",
          "daysBetweenCommits": 14.08,
          "commitsBetweenForRepo": 215,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  public ConnectionContext getConnection(\n-      UserGroupInformation ugi, String nnAddress) throws IOException {\n+  public ConnectionContext getConnection(UserGroupInformation ugi,\n+      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n \n     // Check if the manager is shutdown\n     if (!this.running) {\n       LOG.error(\n           \"Cannot get a connection to {} because the manager isn\u0027t running\",\n           nnAddress);\n       return null;\n     }\n \n     // Try to get the pool if created\n-    ConnectionPoolId connectionId \u003d new ConnectionPoolId(ugi, nnAddress);\n+    ConnectionPoolId connectionId \u003d\n+        new ConnectionPoolId(ugi, nnAddress, protocol);\n     ConnectionPool pool \u003d null;\n     readLock.lock();\n     try {\n       pool \u003d this.pools.get(connectionId);\n     } finally {\n       readLock.unlock();\n     }\n \n     // Create the pool if not created before\n     if (pool \u003d\u003d null) {\n       writeLock.lock();\n       try {\n         pool \u003d this.pools.get(connectionId);\n         if (pool \u003d\u003d null) {\n           pool \u003d new ConnectionPool(\n-              this.conf, nnAddress, ugi, this.minSize, this.maxSize);\n+              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n           this.pools.put(connectionId, pool);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n \n     ConnectionContext conn \u003d pool.getConnection();\n \n     // Add a new connection to the pool if it wasn\u0027t usable\n     if (conn \u003d\u003d null || !conn.isUsable()) {\n       if (!this.creatorQueue.offer(pool)) {\n         LOG.error(\"Cannot add more than {} connections at the same time\",\n             MAX_NEW_CONNECTIONS);\n       }\n     }\n \n     if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n       LOG.error(\"We got a closed connection from {}\", pool);\n       conn \u003d null;\n     }\n \n     return conn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ConnectionContext getConnection(UserGroupInformation ugi,\n      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d\n        new ConnectionPoolId(ugi, nnAddress, protocol);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            MAX_NEW_CONNECTIONS);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation, nnAddress-String]",
            "newValue": "[ugi-UserGroupInformation, nnAddress-String, protocol-Class\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "19/03/18 10:13 PM",
          "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthorOld": "weiy",
          "daysBetweenCommits": 14.08,
          "commitsBetweenForRepo": 215,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  public ConnectionContext getConnection(\n-      UserGroupInformation ugi, String nnAddress) throws IOException {\n+  public ConnectionContext getConnection(UserGroupInformation ugi,\n+      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n \n     // Check if the manager is shutdown\n     if (!this.running) {\n       LOG.error(\n           \"Cannot get a connection to {} because the manager isn\u0027t running\",\n           nnAddress);\n       return null;\n     }\n \n     // Try to get the pool if created\n-    ConnectionPoolId connectionId \u003d new ConnectionPoolId(ugi, nnAddress);\n+    ConnectionPoolId connectionId \u003d\n+        new ConnectionPoolId(ugi, nnAddress, protocol);\n     ConnectionPool pool \u003d null;\n     readLock.lock();\n     try {\n       pool \u003d this.pools.get(connectionId);\n     } finally {\n       readLock.unlock();\n     }\n \n     // Create the pool if not created before\n     if (pool \u003d\u003d null) {\n       writeLock.lock();\n       try {\n         pool \u003d this.pools.get(connectionId);\n         if (pool \u003d\u003d null) {\n           pool \u003d new ConnectionPool(\n-              this.conf, nnAddress, ugi, this.minSize, this.maxSize);\n+              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n           this.pools.put(connectionId, pool);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n     }\n \n     ConnectionContext conn \u003d pool.getConnection();\n \n     // Add a new connection to the pool if it wasn\u0027t usable\n     if (conn \u003d\u003d null || !conn.isUsable()) {\n       if (!this.creatorQueue.offer(pool)) {\n         LOG.error(\"Cannot add more than {} connections at the same time\",\n             MAX_NEW_CONNECTIONS);\n       }\n     }\n \n     if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n       LOG.error(\"We got a closed connection from {}\", pool);\n       conn \u003d null;\n     }\n \n     return conn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ConnectionContext getConnection(UserGroupInformation ugi,\n      String nnAddress, Class\u003c?\u003e protocol) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d\n        new ConnectionPoolId(ugi, nnAddress, protocol);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize, protocol);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            MAX_NEW_CONNECTIONS);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ConnectionContext getConnection(\n      UserGroupInformation ugi, String nnAddress) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d new ConnectionPoolId(ugi, nnAddress);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            MAX_NEW_CONNECTIONS);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java"
      }
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,53 @@\n+  public ConnectionContext getConnection(\n+      UserGroupInformation ugi, String nnAddress) throws IOException {\n+\n+    // Check if the manager is shutdown\n+    if (!this.running) {\n+      LOG.error(\n+          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n+          nnAddress);\n+      return null;\n+    }\n+\n+    // Try to get the pool if created\n+    ConnectionPoolId connectionId \u003d new ConnectionPoolId(ugi, nnAddress);\n+    ConnectionPool pool \u003d null;\n+    readLock.lock();\n+    try {\n+      pool \u003d this.pools.get(connectionId);\n+    } finally {\n+      readLock.unlock();\n+    }\n+\n+    // Create the pool if not created before\n+    if (pool \u003d\u003d null) {\n+      writeLock.lock();\n+      try {\n+        pool \u003d this.pools.get(connectionId);\n+        if (pool \u003d\u003d null) {\n+          pool \u003d new ConnectionPool(\n+              this.conf, nnAddress, ugi, this.minSize, this.maxSize);\n+          this.pools.put(connectionId, pool);\n+        }\n+      } finally {\n+        writeLock.unlock();\n+      }\n+    }\n+\n+    ConnectionContext conn \u003d pool.getConnection();\n+\n+    // Add a new connection to the pool if it wasn\u0027t usable\n+    if (conn \u003d\u003d null || !conn.isUsable()) {\n+      if (!this.creatorQueue.offer(pool)) {\n+        LOG.error(\"Cannot add more than {} connections at the same time\",\n+            MAX_NEW_CONNECTIONS);\n+      }\n+    }\n+\n+    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n+      LOG.error(\"We got a closed connection from {}\", pool);\n+      conn \u003d null;\n+    }\n+\n+    return conn;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ConnectionContext getConnection(\n      UserGroupInformation ugi, String nnAddress) throws IOException {\n\n    // Check if the manager is shutdown\n    if (!this.running) {\n      LOG.error(\n          \"Cannot get a connection to {} because the manager isn\u0027t running\",\n          nnAddress);\n      return null;\n    }\n\n    // Try to get the pool if created\n    ConnectionPoolId connectionId \u003d new ConnectionPoolId(ugi, nnAddress);\n    ConnectionPool pool \u003d null;\n    readLock.lock();\n    try {\n      pool \u003d this.pools.get(connectionId);\n    } finally {\n      readLock.unlock();\n    }\n\n    // Create the pool if not created before\n    if (pool \u003d\u003d null) {\n      writeLock.lock();\n      try {\n        pool \u003d this.pools.get(connectionId);\n        if (pool \u003d\u003d null) {\n          pool \u003d new ConnectionPool(\n              this.conf, nnAddress, ugi, this.minSize, this.maxSize);\n          this.pools.put(connectionId, pool);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n\n    ConnectionContext conn \u003d pool.getConnection();\n\n    // Add a new connection to the pool if it wasn\u0027t usable\n    if (conn \u003d\u003d null || !conn.isUsable()) {\n      if (!this.creatorQueue.offer(pool)) {\n        LOG.error(\"Cannot add more than {} connections at the same time\",\n            MAX_NEW_CONNECTIONS);\n      }\n    }\n\n    if (conn !\u003d null \u0026\u0026 conn.isClosed()) {\n      LOG.error(\"We got a closed connection from {}\", pool);\n      conn \u003d null;\n    }\n\n    return conn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionManager.java"
    }
  }
}