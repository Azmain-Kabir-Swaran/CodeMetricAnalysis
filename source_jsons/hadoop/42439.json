{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MemoryRMStateStore.java",
  "functionName": "storeReservationState",
  "functionId": "storeReservationState___reservationAllocation-ReservationAllocationStateProto__planName-String__reservationIdName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java",
  "functionStartLine": 255,
  "functionEndLine": 269,
  "numCommitsSeen": 35,
  "timeTaken": 1646,
  "changeHistory": [
    "f271d377357ad680924d19f07e6c8315e7c89bae"
  ],
  "changeHistoryShort": {
    "f271d377357ad680924d19f07e6c8315e7c89bae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f271d377357ad680924d19f07e6c8315e7c89bae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)\n",
      "commitDate": "05/08/15 12:57 PM",
      "commitName": "f271d377357ad680924d19f07e6c8315e7c89bae",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,15 @@\n+  protected synchronized void storeReservationState(\n+      ReservationAllocationStateProto reservationAllocation, String planName,\n+      String reservationIdName) throws Exception {\n+    LOG.info(\"Storing reservationallocation for \" + reservationIdName + \" \" +\n+            \"for plan \" + planName);\n+    Map\u003cReservationId, ReservationAllocationStateProto\u003e planState \u003d\n+        state.getReservationState().get(planName);\n+    if (planState \u003d\u003d null) {\n+      planState \u003d new HashMap\u003c\u003e();\n+      state.getReservationState().put(planName, planState);\n+    }\n+    ReservationId reservationId \u003d\n+        ReservationId.parseReservationId(reservationIdName);\n+    planState.put(reservationId, reservationAllocation);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void storeReservationState(\n      ReservationAllocationStateProto reservationAllocation, String planName,\n      String reservationIdName) throws Exception {\n    LOG.info(\"Storing reservationallocation for \" + reservationIdName + \" \" +\n            \"for plan \" + planName);\n    Map\u003cReservationId, ReservationAllocationStateProto\u003e planState \u003d\n        state.getReservationState().get(planName);\n    if (planState \u003d\u003d null) {\n      planState \u003d new HashMap\u003c\u003e();\n      state.getReservationState().put(planName, planState);\n    }\n    ReservationId reservationId \u003d\n        ReservationId.parseReservationId(reservationIdName);\n    planState.put(reservationId, reservationAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/MemoryRMStateStore.java"
    }
  }
}