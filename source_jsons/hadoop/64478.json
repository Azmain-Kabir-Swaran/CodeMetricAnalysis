{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AUtils.java",
  "functionName": "createAWSCredentialProviderSet",
  "functionId": "createAWSCredentialProviderSet___binding-URI(annotations-@Nullable)__conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
  "functionStartLine": 613,
  "functionEndLine": 628,
  "numCommitsSeen": 67,
  "timeTaken": 5797,
  "changeHistory": [
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "87f63b6479330840e9d708a729355948bb91fd4d",
    "7ac88244c54ce483729af3d2736d9f4731e230ca",
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
    "b8305e6d06cbb9d44c728da14506d5cf825c12e5",
    "2e30aa72e01de7b5774fcb312406a393221e0908",
    "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351",
    "763f0497bb996e331e40caed9ca0af966f5b3fac"
  ],
  "changeHistoryShort": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ymultichange(Ybodychange,Yparametermetachange)",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ymultichange(Ybodychange,Yparametermetachange)",
    "87f63b6479330840e9d708a729355948bb91fd4d": "Ybodychange",
    "7ac88244c54ce483729af3d2736d9f4731e230ca": "Ybodychange",
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc": "Ybodychange",
    "b8305e6d06cbb9d44c728da14506d5cf825c12e5": "Ybodychange",
    "2e30aa72e01de7b5774fcb312406a393221e0908": "Ymultichange(Yparameterchange,Ybodychange)",
    "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351": "Ybodychange",
    "763f0497bb996e331e40caed9ca0af966f5b3fac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      URI binding, Configuration conf) throws IOException {\n-    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n-\n-    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n-        AWS_CREDENTIALS_PROVIDER);\n-    if (awsClasses.length \u003d\u003d 0) {\n-      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n-      credentials.add(new EnvironmentVariableCredentialsProvider());\n-      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n-    } else {\n-      for (Class\u003c?\u003e aClass : awsClasses) {\n-        credentials.add(createAWSCredentialProvider(conf,\n-            aClass,\n-            binding));\n-      }\n-    }\n+      @Nullable URI binding,\n+      Configuration conf) throws IOException {\n+    // this will reject any user:secret entries in the URI\n+    S3xLoginHelper.rejectSecretsInURIs(binding);\n+    AWSCredentialProviderList credentials \u003d\n+        buildAWSProviderList(binding,\n+            conf,\n+            AWS_CREDENTIALS_PROVIDER,\n+            STANDARD_AWS_PROVIDERS,\n+            new HashSet\u003c\u003e());\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n-        S3xLoginHelper.toString(binding), credentials);\n+        binding, credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      @Nullable URI binding,\n      Configuration conf) throws IOException {\n    // this will reject any user:secret entries in the URI\n    S3xLoginHelper.rejectSecretsInURIs(binding);\n    AWSCredentialProviderList credentials \u003d\n        buildAWSProviderList(binding,\n            conf,\n            AWS_CREDENTIALS_PROVIDER,\n            STANDARD_AWS_PROVIDERS,\n            new HashSet\u003c\u003e());\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        binding, credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
          "commitDate": "14/01/19 9:59 AM",
          "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "07/01/19 9:51 PM",
          "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 6.51,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      URI binding, Configuration conf) throws IOException {\n-    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n-\n-    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n-        AWS_CREDENTIALS_PROVIDER);\n-    if (awsClasses.length \u003d\u003d 0) {\n-      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n-      credentials.add(new EnvironmentVariableCredentialsProvider());\n-      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n-    } else {\n-      for (Class\u003c?\u003e aClass : awsClasses) {\n-        credentials.add(createAWSCredentialProvider(conf,\n-            aClass,\n-            binding));\n-      }\n-    }\n+      @Nullable URI binding,\n+      Configuration conf) throws IOException {\n+    // this will reject any user:secret entries in the URI\n+    S3xLoginHelper.rejectSecretsInURIs(binding);\n+    AWSCredentialProviderList credentials \u003d\n+        buildAWSProviderList(binding,\n+            conf,\n+            AWS_CREDENTIALS_PROVIDER,\n+            STANDARD_AWS_PROVIDERS,\n+            new HashSet\u003c\u003e());\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n-        S3xLoginHelper.toString(binding), credentials);\n+        binding, credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      @Nullable URI binding,\n      Configuration conf) throws IOException {\n    // this will reject any user:secret entries in the URI\n    S3xLoginHelper.rejectSecretsInURIs(binding);\n    AWSCredentialProviderList credentials \u003d\n        buildAWSProviderList(binding,\n            conf,\n            AWS_CREDENTIALS_PROVIDER,\n            STANDARD_AWS_PROVIDERS,\n            new HashSet\u003c\u003e());\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        binding, credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[binding-URI, conf-Configuration]",
            "newValue": "[binding-URI(annotations-@Nullable), conf-Configuration]"
          }
        }
      ]
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      @Nullable URI binding,\n-      Configuration conf) throws IOException {\n-    // this will reject any user:secret entries in the URI\n-    S3xLoginHelper.rejectSecretsInURIs(binding);\n-    AWSCredentialProviderList credentials \u003d\n-        buildAWSProviderList(binding,\n-            conf,\n-            AWS_CREDENTIALS_PROVIDER,\n-            STANDARD_AWS_PROVIDERS,\n-            new HashSet\u003c\u003e());\n+      URI binding, Configuration conf) throws IOException {\n+    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n+\n+    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n+        AWS_CREDENTIALS_PROVIDER);\n+    if (awsClasses.length \u003d\u003d 0) {\n+      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n+      credentials.add(new EnvironmentVariableCredentialsProvider());\n+      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n+    } else {\n+      for (Class\u003c?\u003e aClass : awsClasses) {\n+        credentials.add(createAWSCredentialProvider(conf,\n+            aClass,\n+            binding));\n+      }\n+    }\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n-        binding, credentials);\n+        S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n        AWS_CREDENTIALS_PROVIDER);\n    if (awsClasses.length \u003d\u003d 0) {\n      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf,\n            aClass,\n            binding));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
          "commitDate": "07/01/19 9:51 PM",
          "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "07/01/19 5:18 AM",
          "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.69,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      @Nullable URI binding,\n-      Configuration conf) throws IOException {\n-    // this will reject any user:secret entries in the URI\n-    S3xLoginHelper.rejectSecretsInURIs(binding);\n-    AWSCredentialProviderList credentials \u003d\n-        buildAWSProviderList(binding,\n-            conf,\n-            AWS_CREDENTIALS_PROVIDER,\n-            STANDARD_AWS_PROVIDERS,\n-            new HashSet\u003c\u003e());\n+      URI binding, Configuration conf) throws IOException {\n+    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n+\n+    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n+        AWS_CREDENTIALS_PROVIDER);\n+    if (awsClasses.length \u003d\u003d 0) {\n+      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n+      credentials.add(new EnvironmentVariableCredentialsProvider());\n+      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n+    } else {\n+      for (Class\u003c?\u003e aClass : awsClasses) {\n+        credentials.add(createAWSCredentialProvider(conf,\n+            aClass,\n+            binding));\n+      }\n+    }\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n-        binding, credentials);\n+        S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n        AWS_CREDENTIALS_PROVIDER);\n    if (awsClasses.length \u003d\u003d 0) {\n      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf,\n            aClass,\n            binding));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[binding-URI(annotations-@Nullable), conf-Configuration]",
            "newValue": "[binding-URI, conf-Configuration]"
          }
        }
      ]
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      URI binding, Configuration conf) throws IOException {\n-    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n-\n-    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n-        AWS_CREDENTIALS_PROVIDER);\n-    if (awsClasses.length \u003d\u003d 0) {\n-      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n-      credentials.add(new EnvironmentVariableCredentialsProvider());\n-      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n-    } else {\n-      for (Class\u003c?\u003e aClass : awsClasses) {\n-        credentials.add(createAWSCredentialProvider(conf,\n-            aClass,\n-            binding));\n-      }\n-    }\n+      @Nullable URI binding,\n+      Configuration conf) throws IOException {\n+    // this will reject any user:secret entries in the URI\n+    S3xLoginHelper.rejectSecretsInURIs(binding);\n+    AWSCredentialProviderList credentials \u003d\n+        buildAWSProviderList(binding,\n+            conf,\n+            AWS_CREDENTIALS_PROVIDER,\n+            STANDARD_AWS_PROVIDERS,\n+            new HashSet\u003c\u003e());\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n-        S3xLoginHelper.toString(binding), credentials);\n+        binding, credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      @Nullable URI binding,\n      Configuration conf) throws IOException {\n    // this will reject any user:secret entries in the URI\n    S3xLoginHelper.rejectSecretsInURIs(binding);\n    AWSCredentialProviderList credentials \u003d\n        buildAWSProviderList(binding,\n            conf,\n            AWS_CREDENTIALS_PROVIDER,\n            STANDARD_AWS_PROVIDERS,\n            new HashSet\u003c\u003e());\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        binding, credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
          "commitDate": "07/01/19 5:18 AM",
          "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 9:04 PM",
          "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 116.38,
          "commitsBetweenForRepo": 928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      URI binding, Configuration conf) throws IOException {\n-    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n-\n-    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n-        AWS_CREDENTIALS_PROVIDER);\n-    if (awsClasses.length \u003d\u003d 0) {\n-      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n-      credentials.add(new EnvironmentVariableCredentialsProvider());\n-      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n-    } else {\n-      for (Class\u003c?\u003e aClass : awsClasses) {\n-        credentials.add(createAWSCredentialProvider(conf,\n-            aClass,\n-            binding));\n-      }\n-    }\n+      @Nullable URI binding,\n+      Configuration conf) throws IOException {\n+    // this will reject any user:secret entries in the URI\n+    S3xLoginHelper.rejectSecretsInURIs(binding);\n+    AWSCredentialProviderList credentials \u003d\n+        buildAWSProviderList(binding,\n+            conf,\n+            AWS_CREDENTIALS_PROVIDER,\n+            STANDARD_AWS_PROVIDERS,\n+            new HashSet\u003c\u003e());\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n-        S3xLoginHelper.toString(binding), credentials);\n+        binding, credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      @Nullable URI binding,\n      Configuration conf) throws IOException {\n    // this will reject any user:secret entries in the URI\n    S3xLoginHelper.rejectSecretsInURIs(binding);\n    AWSCredentialProviderList credentials \u003d\n        buildAWSProviderList(binding,\n            conf,\n            AWS_CREDENTIALS_PROVIDER,\n            STANDARD_AWS_PROVIDERS,\n            new HashSet\u003c\u003e());\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        binding, credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[binding-URI, conf-Configuration]",
            "newValue": "[binding-URI(annotations-@Nullable), conf-Configuration]"
          }
        }
      ]
    },
    "87f63b6479330840e9d708a729355948bb91fd4d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14833. Remove s3a user:secret authentication. Contributed by Steve Loughran\n",
      "commitDate": "11/09/18 5:18 PM",
      "commitName": "87f63b6479330840e9d708a729355948bb91fd4d",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "08/08/18 10:57 PM",
      "commitNameOld": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 33.76,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n       URI binding, Configuration conf) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n     Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n         AWS_CREDENTIALS_PROVIDER);\n     if (awsClasses.length \u003d\u003d 0) {\n-      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n-      credentials.add(new BasicAWSCredentialsProvider(\n-              creds.getUser(), creds.getPassword()));\n+      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n       credentials.add(InstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n         credentials.add(createAWSCredentialProvider(conf,\n             aClass,\n             binding));\n       }\n     }\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n         S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n        AWS_CREDENTIALS_PROVIDER);\n    if (awsClasses.length \u003d\u003d 0) {\n      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf,\n            aClass,\n            binding));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "7ac88244c54ce483729af3d2736d9f4731e230ca": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
      "commitDate": "16/02/18 8:37 AM",
      "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "15/02/18 7:57 AM",
      "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n       URI binding, Configuration conf) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n     Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n         AWS_CREDENTIALS_PROVIDER);\n     if (awsClasses.length \u003d\u003d 0) {\n       S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n       credentials.add(new BasicAWSCredentialsProvider(\n               creds.getUser(), creds.getPassword()));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n       credentials.add(InstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n-        credentials.add(createAWSCredentialProvider(conf, aClass));\n+        credentials.add(createAWSCredentialProvider(conf,\n+            aClass,\n+            binding));\n       }\n     }\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n         S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n        AWS_CREDENTIALS_PROVIDER);\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf,\n            aClass,\n            binding));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15141 Support IAM Assumed roles in S3A. Contributed by Steve Loughran.\n",
      "commitDate": "17/01/18 12:05 AM",
      "commitName": "268ab4e0279b3e40f4a627d3dfe91e2a3523a8cc",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "21/12/17 6:15 AM",
      "commitNameOld": "ef450df443f1dea1c52082cf281f25db7141972f",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 26.74,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,22 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n       URI binding, Configuration conf) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n-    Class\u003c?\u003e[] awsClasses;\n-    try {\n-      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n-    } catch (RuntimeException e) {\n-      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n-      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n-          \u0027 \u0027 + c, c);\n-    }\n+    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n+        AWS_CREDENTIALS_PROVIDER);\n     if (awsClasses.length \u003d\u003d 0) {\n       S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n       credentials.add(new BasicAWSCredentialsProvider(\n               creds.getUser(), creds.getPassword()));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n       credentials.add(InstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n         credentials.add(createAWSCredentialProvider(conf, aClass));\n       }\n     }\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n         S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses \u003d loadAWSProviderClasses(conf,\n        AWS_CREDENTIALS_PROVIDER);\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf, aClass));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "b8305e6d06cbb9d44c728da14506d5cf825c12e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14248. Retire SharedInstanceProfileCredentialsProvider in trunk. Contributed by Mingliang Liu.\n",
      "commitDate": "12/04/17 10:02 AM",
      "commitName": "b8305e6d06cbb9d44c728da14506d5cf825c12e5",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "23/03/17 11:33 AM",
      "commitNameOld": "2e30aa72e01de7b5774fcb312406a393221e0908",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 19.94,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,28 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n       URI binding, Configuration conf) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n     Class\u003c?\u003e[] awsClasses;\n     try {\n       awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n     } catch (RuntimeException e) {\n       Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n       throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n           \u0027 \u0027 + c, c);\n     }\n     if (awsClasses.length \u003d\u003d 0) {\n       S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n       credentials.add(new BasicAWSCredentialsProvider(\n               creds.getUser(), creds.getPassword()));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n-      credentials.add(\n-          SharedInstanceProfileCredentialsProvider.getInstance());\n+      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n-        if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n-          LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n-              SharedInstanceProfileCredentialsProvider.class.getName());\n-          aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n-        }\n         credentials.add(createAWSCredentialProvider(conf, aClass));\n       }\n     }\n     // make sure the logging message strips out any auth details\n     LOG.debug(\"For URI {}, using credentials {}\",\n         S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses;\n    try {\n      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n    } catch (RuntimeException e) {\n      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n          \u0027 \u0027 + c, c);\n    }\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(InstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf, aClass));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "2e30aa72e01de7b5774fcb312406a393221e0908": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14135. Remove URI parameter in AWSCredentialProvider constructors. Contributed by Mingliang Liu\n",
      "commitDate": "23/03/17 11:33 AM",
      "commitName": "2e30aa72e01de7b5774fcb312406a393221e0908",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14135. Remove URI parameter in AWSCredentialProvider constructors. Contributed by Mingliang Liu\n",
          "commitDate": "23/03/17 11:33 AM",
          "commitName": "2e30aa72e01de7b5774fcb312406a393221e0908",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "25/02/17 7:35 AM",
          "commitNameOld": "dab00da19f25619ccc71c7f803a235b21766bf1e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 26.12,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,34 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      URI binding,\n-      Configuration conf,\n-      URI fsURI) throws IOException {\n+      URI binding, Configuration conf) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n     Class\u003c?\u003e[] awsClasses;\n     try {\n       awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n     } catch (RuntimeException e) {\n       Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n       throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n           \u0027 \u0027 + c, c);\n     }\n     if (awsClasses.length \u003d\u003d 0) {\n       S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n       credentials.add(new BasicAWSCredentialsProvider(\n               creds.getUser(), creds.getPassword()));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n       credentials.add(\n           SharedInstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n         if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n           LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n               SharedInstanceProfileCredentialsProvider.class.getName());\n           aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n         }\n-        credentials.add(createAWSCredentialProvider(conf,\n-            aClass,\n-            fsURI));\n+        credentials.add(createAWSCredentialProvider(conf, aClass));\n       }\n     }\n+    // make sure the logging message strips out any auth details\n+    LOG.debug(\"For URI {}, using credentials {}\",\n+        S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses;\n    try {\n      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n    } catch (RuntimeException e) {\n      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n          \u0027 \u0027 + c, c);\n    }\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(\n          SharedInstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n          LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n              SharedInstanceProfileCredentialsProvider.class.getName());\n          aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n        }\n        credentials.add(createAWSCredentialProvider(conf, aClass));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[binding-URI, conf-Configuration, fsURI-URI]",
            "newValue": "[binding-URI, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14135. Remove URI parameter in AWSCredentialProvider constructors. Contributed by Mingliang Liu\n",
          "commitDate": "23/03/17 11:33 AM",
          "commitName": "2e30aa72e01de7b5774fcb312406a393221e0908",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "25/02/17 7:35 AM",
          "commitNameOld": "dab00da19f25619ccc71c7f803a235b21766bf1e",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 26.12,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,34 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n-      URI binding,\n-      Configuration conf,\n-      URI fsURI) throws IOException {\n+      URI binding, Configuration conf) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n     Class\u003c?\u003e[] awsClasses;\n     try {\n       awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n     } catch (RuntimeException e) {\n       Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n       throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n           \u0027 \u0027 + c, c);\n     }\n     if (awsClasses.length \u003d\u003d 0) {\n       S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n       credentials.add(new BasicAWSCredentialsProvider(\n               creds.getUser(), creds.getPassword()));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n       credentials.add(\n           SharedInstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n         if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n           LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n               SharedInstanceProfileCredentialsProvider.class.getName());\n           aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n         }\n-        credentials.add(createAWSCredentialProvider(conf,\n-            aClass,\n-            fsURI));\n+        credentials.add(createAWSCredentialProvider(conf, aClass));\n       }\n     }\n+    // make sure the logging message strips out any auth details\n+    LOG.debug(\"For URI {}, using credentials {}\",\n+        S3xLoginHelper.toString(binding), credentials);\n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding, Configuration conf) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses;\n    try {\n      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n    } catch (RuntimeException e) {\n      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n          \u0027 \u0027 + c, c);\n    }\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(\n          SharedInstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n          LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n              SharedInstanceProfileCredentialsProvider.class.getName());\n          aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n        }\n        credentials.add(createAWSCredentialProvider(conf, aClass));\n      }\n    }\n    // make sure the logging message strips out any auth details\n    LOG.debug(\"For URI {}, using credentials {}\",\n        S3xLoginHelper.toString(binding), credentials);\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13727. S3A: Reduce high number of connections to EC2 Instance Metadata Service caused by InstanceProfileCredentialsProvider. Contributed by Chris Nauroth.\n",
      "commitDate": "24/10/16 9:22 PM",
      "commitName": "d8fa1cfa6722cbf7a4ec3d6b9c44b034da9aa351",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "18/10/16 1:16 PM",
      "commitNameOld": "6c348c56918973fd988b110e79231324a8befe12",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n   public static AWSCredentialProviderList createAWSCredentialProviderSet(\n       URI binding,\n       Configuration conf,\n       URI fsURI) throws IOException {\n     AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n \n     Class\u003c?\u003e[] awsClasses;\n     try {\n       awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n     } catch (RuntimeException e) {\n       Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n       throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n           \u0027 \u0027 + c, c);\n     }\n     if (awsClasses.length \u003d\u003d 0) {\n       S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n       credentials.add(new BasicAWSCredentialsProvider(\n               creds.getUser(), creds.getPassword()));\n       credentials.add(new EnvironmentVariableCredentialsProvider());\n-      credentials.add(new InstanceProfileCredentialsProvider());\n+      credentials.add(\n+          SharedInstanceProfileCredentialsProvider.getInstance());\n     } else {\n       for (Class\u003c?\u003e aClass : awsClasses) {\n+        if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n+          LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n+              SharedInstanceProfileCredentialsProvider.class.getName());\n+          aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n+        }\n         credentials.add(createAWSCredentialProvider(conf,\n             aClass,\n             fsURI));\n       }\n     }\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding,\n      Configuration conf,\n      URI fsURI) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses;\n    try {\n      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n    } catch (RuntimeException e) {\n      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n          \u0027 \u0027 + c, c);\n    }\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(\n          SharedInstanceProfileCredentialsProvider.getInstance());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        if (aClass \u003d\u003d InstanceProfileCredentialsProvider.class) {\n          LOG.debug(\"Found {}, but will use {} instead.\", aClass.getName(),\n              SharedInstanceProfileCredentialsProvider.class.getName());\n          aClass \u003d SharedInstanceProfileCredentialsProvider.class;\n        }\n        credentials.add(createAWSCredentialProvider(conf,\n            aClass,\n            fsURI));\n      }\n    }\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
      "extendedDetails": {}
    },
    "763f0497bb996e331e40caed9ca0af966f5b3fac": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13252. Tune S3A provider plugin mechanism. Contributed by Steve Loughran.\n",
      "commitDate": "19/08/16 10:48 AM",
      "commitName": "763f0497bb996e331e40caed9ca0af966f5b3fac",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,29 @@\n+  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n+      URI binding,\n+      Configuration conf,\n+      URI fsURI) throws IOException {\n+    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n+\n+    Class\u003c?\u003e[] awsClasses;\n+    try {\n+      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n+    } catch (RuntimeException e) {\n+      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n+      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n+          \u0027 \u0027 + c, c);\n+    }\n+    if (awsClasses.length \u003d\u003d 0) {\n+      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n+      credentials.add(new BasicAWSCredentialsProvider(\n+              creds.getUser(), creds.getPassword()));\n+      credentials.add(new EnvironmentVariableCredentialsProvider());\n+      credentials.add(new InstanceProfileCredentialsProvider());\n+    } else {\n+      for (Class\u003c?\u003e aClass : awsClasses) {\n+        credentials.add(createAWSCredentialProvider(conf,\n+            aClass,\n+            fsURI));\n+      }\n+    }\n+    return credentials;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AWSCredentialProviderList createAWSCredentialProviderSet(\n      URI binding,\n      Configuration conf,\n      URI fsURI) throws IOException {\n    AWSCredentialProviderList credentials \u003d new AWSCredentialProviderList();\n\n    Class\u003c?\u003e[] awsClasses;\n    try {\n      awsClasses \u003d conf.getClasses(AWS_CREDENTIALS_PROVIDER);\n    } catch (RuntimeException e) {\n      Throwable c \u003d e.getCause() !\u003d null ? e.getCause() : e;\n      throw new IOException(\"From option \" + AWS_CREDENTIALS_PROVIDER +\n          \u0027 \u0027 + c, c);\n    }\n    if (awsClasses.length \u003d\u003d 0) {\n      S3xLoginHelper.Login creds \u003d getAWSAccessKeys(binding, conf);\n      credentials.add(new BasicAWSCredentialsProvider(\n              creds.getUser(), creds.getPassword()));\n      credentials.add(new EnvironmentVariableCredentialsProvider());\n      credentials.add(new InstanceProfileCredentialsProvider());\n    } else {\n      for (Class\u003c?\u003e aClass : awsClasses) {\n        credentials.add(createAWSCredentialProvider(conf,\n            aClass,\n            fsURI));\n      }\n    }\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java"
    }
  }
}