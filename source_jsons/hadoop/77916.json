{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyCommands.java",
  "functionName": "processArguments",
  "functionId": "processArguments___args-LinkedList__PathData__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
  "functionStartLine": 376,
  "functionEndLine": 392,
  "numCommitsSeen": 32,
  "timeTaken": 2081,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
    "ed2c62012a48849d9b2b31bbad5f8f6a0ed9d89f",
    "8f9661da4823bfbb243e430252ec1bb5780ecbfc",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d": "Ybodychange",
    "ed2c62012a48849d9b2b31bbad5f8f6a0ed9d89f": "Ybodychange",
    "8f9661da4823bfbb243e430252ec1bb5780ecbfc": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "26/11/18 4:41 AM",
      "commitNameOld": "23b441c2253bcb3be5229d3c5eb1e165369070c0",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 157.3,
      "commitsBetweenForRepo": 1117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     protected void processArguments(LinkedList\u003cPathData\u003e args)\n         throws IOException {\n \n       if (!dst.exists) {\n         dst.fs.create(dst.path, false).close();\n       }\n \n-      FileInputStream is \u003d null;\n+      InputStream is \u003d null;\n       try (FSDataOutputStream fos \u003d dst.fs.append(dst.path)) {\n         if (readStdin) {\n           if (args.size() \u003d\u003d 0) {\n             IOUtils.copyBytes(System.in, fos, DEFAULT_IO_LENGTH);\n           } else {\n             throw new IOException(\n                 \"stdin (-) must be the sole input argument when present\");\n           }\n         }\n \n         // Read in each input file and write to the target.\n         for (PathData source : args) {\n-          is \u003d new FileInputStream(source.toFile());\n+          is \u003d Files.newInputStream(source.toFile().toPath());\n           IOUtils.copyBytes(is, fos, DEFAULT_IO_LENGTH);\n           IOUtils.closeStream(is);\n           is \u003d null;\n         }\n       } finally {\n         if (is !\u003d null) {\n           IOUtils.closeStream(is);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n        throws IOException {\n\n      if (!dst.exists) {\n        dst.fs.create(dst.path, false).close();\n      }\n\n      InputStream is \u003d null;\n      try (FSDataOutputStream fos \u003d dst.fs.append(dst.path)) {\n        if (readStdin) {\n          if (args.size() \u003d\u003d 0) {\n            IOUtils.copyBytes(System.in, fos, DEFAULT_IO_LENGTH);\n          } else {\n            throw new IOException(\n                \"stdin (-) must be the sole input argument when present\");\n          }\n        }\n\n        // Read in each input file and write to the target.\n        for (PathData source : args) {\n          is \u003d Files.newInputStream(source.toFile().toPath());\n          IOUtils.copyBytes(is, fos, DEFAULT_IO_LENGTH);\n          IOUtils.closeStream(is);\n          is \u003d null;\n        }\n      } finally {\n        if (is !\u003d null) {\n          IOUtils.closeStream(is);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {}
    },
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15085. Output streams closed with IOUtils suppressing write errors. Contributed by Jim Brennan\n",
      "commitDate": "14/12/17 8:18 AM",
      "commitName": "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "16/07/17 10:59 AM",
      "commitNameOld": "02b141ac6059323ec43e472ca36dc570fdca386f",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 150.93,
      "commitsBetweenForRepo": 1226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,31 @@\n     protected void processArguments(LinkedList\u003cPathData\u003e args)\n         throws IOException {\n \n       if (!dst.exists) {\n         dst.fs.create(dst.path, false).close();\n       }\n \n-      InputStream is \u003d null;\n-      FSDataOutputStream fos \u003d dst.fs.append(dst.path);\n-\n-      try {\n+      FileInputStream is \u003d null;\n+      try (FSDataOutputStream fos \u003d dst.fs.append(dst.path)) {\n         if (readStdin) {\n           if (args.size() \u003d\u003d 0) {\n             IOUtils.copyBytes(System.in, fos, DEFAULT_IO_LENGTH);\n           } else {\n             throw new IOException(\n                 \"stdin (-) must be the sole input argument when present\");\n           }\n         }\n \n         // Read in each input file and write to the target.\n         for (PathData source : args) {\n           is \u003d new FileInputStream(source.toFile());\n           IOUtils.copyBytes(is, fos, DEFAULT_IO_LENGTH);\n           IOUtils.closeStream(is);\n           is \u003d null;\n         }\n       } finally {\n         if (is !\u003d null) {\n           IOUtils.closeStream(is);\n         }\n-\n-        if (fos !\u003d null) {\n-          IOUtils.closeStream(fos);\n-        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n        throws IOException {\n\n      if (!dst.exists) {\n        dst.fs.create(dst.path, false).close();\n      }\n\n      FileInputStream is \u003d null;\n      try (FSDataOutputStream fos \u003d dst.fs.append(dst.path)) {\n        if (readStdin) {\n          if (args.size() \u003d\u003d 0) {\n            IOUtils.copyBytes(System.in, fos, DEFAULT_IO_LENGTH);\n          } else {\n            throw new IOException(\n                \"stdin (-) must be the sole input argument when present\");\n          }\n        }\n\n        // Read in each input file and write to the target.\n        for (PathData source : args) {\n          is \u003d new FileInputStream(source.toFile());\n          IOUtils.copyBytes(is, fos, DEFAULT_IO_LENGTH);\n          IOUtils.closeStream(is);\n          is \u003d null;\n        }\n      } finally {\n        if (is !\u003d null) {\n          IOUtils.closeStream(is);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {}
    },
    "ed2c62012a48849d9b2b31bbad5f8f6a0ed9d89f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4905. Add appendToFile command to \"hdfs dfs\". Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1510773 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/13 3:05 PM",
      "commitName": "ed2c62012a48849d9b2b31bbad5f8f6a0ed9d89f",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "30/04/13 9:27 AM",
      "commitNameOld": "bfef63719d04a25d8105f82e24a77f5d66c30f58",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 97.23,
      "commitsBetweenForRepo": 589,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,37 @@\n     protected void processArguments(LinkedList\u003cPathData\u003e args)\n-    throws IOException {\n-      // NOTE: this logic should be better, mimics previous implementation\n-      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n-        copyStreamToTarget(System.in, getTargetPath(args.get(0)));\n-        return;\n+        throws IOException {\n+\n+      if (!dst.exists) {\n+        dst.fs.create(dst.path, false).close();\n       }\n-      super.processArguments(args);\n+\n+      InputStream is \u003d null;\n+      FSDataOutputStream fos \u003d dst.fs.append(dst.path);\n+\n+      try {\n+        if (readStdin) {\n+          if (args.size() \u003d\u003d 0) {\n+            IOUtils.copyBytes(System.in, fos, DEFAULT_IO_LENGTH);\n+          } else {\n+            throw new IOException(\n+                \"stdin (-) must be the sole input argument when present\");\n+          }\n+        }\n+\n+        // Read in each input file and write to the target.\n+        for (PathData source : args) {\n+          is \u003d new FileInputStream(source.toFile());\n+          IOUtils.copyBytes(is, fos, DEFAULT_IO_LENGTH);\n+          IOUtils.closeStream(is);\n+          is \u003d null;\n+        }\n+      } finally {\n+        if (is !\u003d null) {\n+          IOUtils.closeStream(is);\n+        }\n+\n+        if (fos !\u003d null) {\n+          IOUtils.closeStream(fos);\n+        }\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n        throws IOException {\n\n      if (!dst.exists) {\n        dst.fs.create(dst.path, false).close();\n      }\n\n      InputStream is \u003d null;\n      FSDataOutputStream fos \u003d dst.fs.append(dst.path);\n\n      try {\n        if (readStdin) {\n          if (args.size() \u003d\u003d 0) {\n            IOUtils.copyBytes(System.in, fos, DEFAULT_IO_LENGTH);\n          } else {\n            throw new IOException(\n                \"stdin (-) must be the sole input argument when present\");\n          }\n        }\n\n        // Read in each input file and write to the target.\n        for (PathData source : args) {\n          is \u003d new FileInputStream(source.toFile());\n          IOUtils.copyBytes(is, fos, DEFAULT_IO_LENGTH);\n          IOUtils.closeStream(is);\n          is \u003d null;\n        }\n      } finally {\n        if (is !\u003d null) {\n          IOUtils.closeStream(is);\n        }\n\n        if (fos !\u003d null) {\n          IOUtils.closeStream(fos);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {}
    },
    "8f9661da4823bfbb243e430252ec1bb5780ecbfc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7771. FsShell -copyToLocal, -get, etc. commands throw NPE if the destination directory does not exist.  Contributed by John George and Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 6:50 PM",
      "commitName": "8f9661da4823bfbb243e430252ec1bb5780ecbfc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/10/11 6:13 PM",
      "commitNameOld": "659ea4c540e440004d9f1a7dedefa91c0bec8b04",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.03,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,9 @@\n     protected void processArguments(LinkedList\u003cPathData\u003e args)\n     throws IOException {\n       // NOTE: this logic should be better, mimics previous implementation\n       if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n-        if (dst.exists \u0026\u0026 !overwrite) {\n-          throw new PathExistsException(dst.toString());\n-        }\n-        copyFromStdin();\n+        copyStreamToTarget(System.in, getTargetPath(args.get(0)));\n         return;\n       }\n       super.processArguments(args);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n    throws IOException {\n      // NOTE: this logic should be better, mimics previous implementation\n      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n        copyStreamToTarget(System.in, getTargetPath(args.get(0)));\n        return;\n      }\n      super.processArguments(args);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n    throws IOException {\n      // NOTE: this logic should be better, mimics previous implementation\n      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n        if (dst.exists \u0026\u0026 !overwrite) {\n          throw new PathExistsException(dst.toString());\n        }\n        copyFromStdin();\n        return;\n      }\n      super.processArguments(args);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n    throws IOException {\n      // NOTE: this logic should be better, mimics previous implementation\n      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n        if (dst.exists \u0026\u0026 !overwrite) {\n          throw new PathExistsException(dst.toString());\n        }\n        copyFromStdin();\n        return;\n      }\n      super.processArguments(args);\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/CopyCommands.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CopyCommands.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n    throws IOException {\n      // NOTE: this logic should be better, mimics previous implementation\n      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n        if (dst.exists \u0026\u0026 !overwrite) {\n          throw new PathExistsException(dst.toString());\n        }\n        copyFromStdin();\n        return;\n      }\n      super.processArguments(args);\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/shell/CopyCommands.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/CopyCommands.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/CopyCommands.java"
      }
    },
    "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7320. Refactor the copy and move commands to conform to new FsCommand class. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1127591 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/05/11 10:29 AM",
      "commitName": "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,12 @@\n+    protected void processArguments(LinkedList\u003cPathData\u003e args)\n+    throws IOException {\n+      // NOTE: this logic should be better, mimics previous implementation\n+      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n+        if (dst.exists \u0026\u0026 !overwrite) {\n+          throw new PathExistsException(dst.toString());\n+        }\n+        copyFromStdin();\n+        return;\n+      }\n+      super.processArguments(args);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processArguments(LinkedList\u003cPathData\u003e args)\n    throws IOException {\n      // NOTE: this logic should be better, mimics previous implementation\n      if (args.size() \u003d\u003d 1 \u0026\u0026 args.get(0).toString().equals(\"-\")) {\n        if (dst.exists \u0026\u0026 !overwrite) {\n          throw new PathExistsException(dst.toString());\n        }\n        copyFromStdin();\n        return;\n      }\n      super.processArguments(args);\n    }",
      "path": "src/java/org/apache/hadoop/fs/shell/CopyCommands.java"
    }
  }
}