{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbConfigurationStore.java",
  "functionName": "confirmMutation",
  "functionId": "confirmMutation___pendingMutation-LogMutation__isValid-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
  "functionStartLine": 205,
  "functionEndLine": 220,
  "numCommitsSeen": 27,
  "timeTaken": 8023,
  "changeHistory": [
    "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
    "be901f49628a553cfe6a3942478cb528cce2b266",
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
    "4510970e2f7728d036c750b596985e5ffa357b60",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "74ba6ffa0b601badc68366685dcf993a0844520a"
  ],
  "changeHistoryShort": {
    "348685dcb9c1a0ea50b536170b3a8c77a8f8df06": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18": "Ymultichange(Yparameterchange,Ybodychange)",
    "be901f49628a553cfe6a3942478cb528cce2b266": "Ybodychange",
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e": "Ybodychange",
    "4510970e2f7728d036c750b596985e5ffa357b60": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "74ba6ffa0b601badc68366685dcf993a0844520a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "348685dcb9c1a0ea50b536170b3a8c77a8f8df06": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-9998. Code cleanup in LeveldbConfigurationStore. Contributed by Benjamin Teke\n",
      "commitDate": "26/03/20 4:18 AM",
      "commitName": "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-9998. Code cleanup in LeveldbConfigurationStore. Contributed by Benjamin Teke\n",
          "commitDate": "26/03/20 4:18 AM",
          "commitName": "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "10/03/20 8:35 AM",
          "commitNameOld": "61f4cf3055e60e64a95f4599ebceac5a924bba02",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 15.82,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,16 @@\n   public void confirmMutation(LogMutation pendingMutation,\n-      boolean isValid) throws IOException {\n+      boolean isValid) {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n-      long configVersion \u003d getConfigVersion() + 1L;\n-      versiondb.put(bytes(CONF_VERSION_KEY),\n-          bytes(String.valueOf(configVersion)));\n+      increaseConfigVersion();\n     }\n     db.write(updateBatch);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(LogMutation pendingMutation,\n      boolean isValid) {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n      increaseConfigVersion();\n    }\n    db.write(updateBatch);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9998. Code cleanup in LeveldbConfigurationStore. Contributed by Benjamin Teke\n",
          "commitDate": "26/03/20 4:18 AM",
          "commitName": "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "10/03/20 8:35 AM",
          "commitNameOld": "61f4cf3055e60e64a95f4599ebceac5a924bba02",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 15.82,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,16 @@\n   public void confirmMutation(LogMutation pendingMutation,\n-      boolean isValid) throws IOException {\n+      boolean isValid) {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n-      long configVersion \u003d getConfigVersion() + 1L;\n-      versiondb.put(bytes(CONF_VERSION_KEY),\n-          bytes(String.valueOf(configVersion)));\n+      increaseConfigVersion();\n     }\n     db.write(updateBatch);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(LogMutation pendingMutation,\n      boolean isValid) {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n      increaseConfigVersion();\n    }\n    db.write(updateBatch);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9788. Queue Management API does not support parallel updates. Contributed by Prabhu Joseph\n",
      "commitDate": "14/01/20 3:26 AM",
      "commitName": "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9788. Queue Management API does not support parallel updates. Contributed by Prabhu Joseph\n",
          "commitDate": "14/01/20 3:26 AM",
          "commitName": "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "05/12/19 11:43 AM",
          "commitNameOld": "5cc6f945da648a48441b00aca89f3cc1a9777143",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 39.65,
          "commitsBetweenForRepo": 136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  public void confirmMutation(boolean isValid) throws IOException {\n+  public void confirmMutation(LogMutation pendingMutation,\n+      boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n       long configVersion \u003d getConfigVersion() + 1L;\n       versiondb.put(bytes(CONF_VERSION_KEY),\n           bytes(String.valueOf(configVersion)));\n     }\n     db.write(updateBatch);\n-    pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(LogMutation pendingMutation,\n      boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n      long configVersion \u003d getConfigVersion() + 1L;\n      versiondb.put(bytes(CONF_VERSION_KEY),\n          bytes(String.valueOf(configVersion)));\n    }\n    db.write(updateBatch);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "[isValid-boolean]",
            "newValue": "[pendingMutation-LogMutation, isValid-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9788. Queue Management API does not support parallel updates. Contributed by Prabhu Joseph\n",
          "commitDate": "14/01/20 3:26 AM",
          "commitName": "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "05/12/19 11:43 AM",
          "commitNameOld": "5cc6f945da648a48441b00aca89f3cc1a9777143",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 39.65,
          "commitsBetweenForRepo": 136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  public void confirmMutation(boolean isValid) throws IOException {\n+  public void confirmMutation(LogMutation pendingMutation,\n+      boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n       long configVersion \u003d getConfigVersion() + 1L;\n       versiondb.put(bytes(CONF_VERSION_KEY),\n           bytes(String.valueOf(configVersion)));\n     }\n     db.write(updateBatch);\n-    pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(LogMutation pendingMutation,\n      boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n      long configVersion \u003d getConfigVersion() + 1L;\n      versiondb.put(bytes(CONF_VERSION_KEY),\n          bytes(String.valueOf(configVersion)));\n    }\n    db.write(updateBatch);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "be901f49628a553cfe6a3942478cb528cce2b266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change need to update Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "09/10/19 3:23 AM",
      "commitName": "be901f49628a553cfe6a3942478cb528cce2b266",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 8:45 PM",
      "commitNameOld": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n+      long configVersion \u003d getConfigVersion() + 1L;\n+      versiondb.put(bytes(CONF_VERSION_KEY),\n+          bytes(String.valueOf(configVersion)));\n     }\n     db.write(updateBatch);\n     pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n      long configVersion \u003d getConfigVersion() + 1L;\n      versiondb.put(bytes(CONF_VERSION_KEY),\n          bytes(String.valueOf(configVersion)));\n    }\n    db.write(updateBatch);\n    pendingMutation \u003d null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "fb1ecff6a26875c7f2b86ef07d7b9145c469377e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-9873. Mutation API Config Change updates Version Number. Contributed by Prabhu Joseph\"\n\nThis reverts commit 4510970e2f7728d036c750b596985e5ffa357b60.\n",
      "commitDate": "04/10/19 8:45 PM",
      "commitName": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 9:19 AM",
      "commitNameOld": "4510970e2f7728d036c750b596985e5ffa357b60",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n   public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n     }\n     db.write(updateBatch);\n-    db.put(bytes(CONF_VERSION_KEY),\n-        bytes(String.valueOf(System.currentTimeMillis())));\n     pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    db.write(updateBatch);\n    pendingMutation \u003d null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "4510970e2f7728d036c750b596985e5ffa357b60": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change updates Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "04/10/19 9:19 AM",
      "commitName": "4510970e2f7728d036c750b596985e5ffa357b60",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/09/19 8:38 PM",
      "commitNameOld": "137546a78a45adbfb5ef338c1c2984a97b3cecc2",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 3.53,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n       for (Map.Entry\u003cString, String\u003e changes :\n           pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n     }\n     db.write(updateBatch);\n+    db.put(bytes(CONF_VERSION_KEY),\n+        bytes(String.valueOf(System.currentTimeMillis())));\n     pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    db.write(updateBatch);\n    db.put(bytes(CONF_VERSION_KEY),\n        bytes(String.valueOf(System.currentTimeMillis())));\n    pendingMutation \u003d null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,15 @@\n-  public synchronized boolean confirmMutation(long id, boolean isValid)\n-      throws IOException {\n+  public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n-      LogMutation mutation \u003d deserLogMutation(db.get(bytes(LOG_PREFIX + id)));\n       for (Map.Entry\u003cString, String\u003e changes :\n-          mutation.getUpdates().entrySet()) {\n+          pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n     }\n-    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));\n     db.write(updateBatch);\n-    // Assumes logMutation and confirmMutation are done in the same\n-    // synchronized method. For example,\n-    // {@link MutableCSConfigurationProvider#mutateConfiguration(\n-    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}\n-    pendingMutations.removeFirst();\n-    return true;\n+    pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    db.write(updateBatch);\n    pendingMutation \u003d null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "[id-long, isValid-boolean]",
            "newValue": "[isValid-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,15 @@\n-  public synchronized boolean confirmMutation(long id, boolean isValid)\n-      throws IOException {\n+  public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n-      LogMutation mutation \u003d deserLogMutation(db.get(bytes(LOG_PREFIX + id)));\n       for (Map.Entry\u003cString, String\u003e changes :\n-          mutation.getUpdates().entrySet()) {\n+          pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n     }\n-    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));\n     db.write(updateBatch);\n-    // Assumes logMutation and confirmMutation are done in the same\n-    // synchronized method. For example,\n-    // {@link MutableCSConfigurationProvider#mutateConfiguration(\n-    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}\n-    pendingMutations.removeFirst();\n-    return true;\n+    pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    db.write(updateBatch);\n    pendingMutation \u003d null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,15 @@\n-  public synchronized boolean confirmMutation(long id, boolean isValid)\n-      throws IOException {\n+  public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n-      LogMutation mutation \u003d deserLogMutation(db.get(bytes(LOG_PREFIX + id)));\n       for (Map.Entry\u003cString, String\u003e changes :\n-          mutation.getUpdates().entrySet()) {\n+          pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n     }\n-    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));\n     db.write(updateBatch);\n-    // Assumes logMutation and confirmMutation are done in the same\n-    // synchronized method. For example,\n-    // {@link MutableCSConfigurationProvider#mutateConfiguration(\n-    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}\n-    pendingMutations.removeFirst();\n-    return true;\n+    pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    db.write(updateBatch);\n    pendingMutation \u003d null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,15 @@\n-  public synchronized boolean confirmMutation(long id, boolean isValid)\n-      throws IOException {\n+  public void confirmMutation(boolean isValid) throws IOException {\n     WriteBatch updateBatch \u003d db.createWriteBatch();\n     if (isValid) {\n-      LogMutation mutation \u003d deserLogMutation(db.get(bytes(LOG_PREFIX + id)));\n       for (Map.Entry\u003cString, String\u003e changes :\n-          mutation.getUpdates().entrySet()) {\n+          pendingMutation.getUpdates().entrySet()) {\n         if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n           updateBatch.delete(bytes(changes.getKey()));\n         } else {\n           updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n         }\n       }\n     }\n-    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));\n     db.write(updateBatch);\n-    // Assumes logMutation and confirmMutation are done in the same\n-    // synchronized method. For example,\n-    // {@link MutableCSConfigurationProvider#mutateConfiguration(\n-    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}\n-    pendingMutations.removeFirst();\n-    return true;\n+    pendingMutation \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void confirmMutation(boolean isValid) throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      for (Map.Entry\u003cString, String\u003e changes :\n          pendingMutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    db.write(updateBatch);\n    pendingMutation \u003d null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "74ba6ffa0b601badc68366685dcf993a0844520a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5947: Create LeveldbConfigurationStore class using Leveldb as backing store. Contributed by Jonathan Hung\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "74ba6ffa0b601badc68366685dcf993a0844520a",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,23 @@\n+  public synchronized boolean confirmMutation(long id, boolean isValid)\n+      throws IOException {\n+    WriteBatch updateBatch \u003d db.createWriteBatch();\n+    if (isValid) {\n+      LogMutation mutation \u003d deserLogMutation(db.get(bytes(LOG_PREFIX + id)));\n+      for (Map.Entry\u003cString, String\u003e changes :\n+          mutation.getUpdates().entrySet()) {\n+        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n+          updateBatch.delete(bytes(changes.getKey()));\n+        } else {\n+          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n+        }\n+      }\n+    }\n+    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));\n+    db.write(updateBatch);\n+    // Assumes logMutation and confirmMutation are done in the same\n+    // synchronized method. For example,\n+    // {@link MutableCSConfigurationProvider#mutateConfiguration(\n+    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}\n+    pendingMutations.removeFirst();\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean confirmMutation(long id, boolean isValid)\n      throws IOException {\n    WriteBatch updateBatch \u003d db.createWriteBatch();\n    if (isValid) {\n      LogMutation mutation \u003d deserLogMutation(db.get(bytes(LOG_PREFIX + id)));\n      for (Map.Entry\u003cString, String\u003e changes :\n          mutation.getUpdates().entrySet()) {\n        if (changes.getValue() \u003d\u003d null || changes.getValue().isEmpty()) {\n          updateBatch.delete(bytes(changes.getKey()));\n        } else {\n          updateBatch.put(bytes(changes.getKey()), bytes(changes.getValue()));\n        }\n      }\n    }\n    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));\n    db.write(updateBatch);\n    // Assumes logMutation and confirmMutation are done in the same\n    // synchronized method. For example,\n    // {@link MutableCSConfigurationProvider#mutateConfiguration(\n    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}\n    pendingMutations.removeFirst();\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java"
    }
  }
}