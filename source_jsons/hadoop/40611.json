{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintProcessor.java",
  "functionName": "init",
  "functionId": "init___amsContext-ApplicationMasterServiceContext__nextProcessor-ApplicationMasterServiceProcessor",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
  "functionStartLine": 101,
  "functionEndLine": 153,
  "numCommitsSeen": 7,
  "timeTaken": 2749,
  "changeHistory": [
    "0b489e564ce5a50324a530e29c18aa8a75276c50",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "0b489e564ce5a50324a530e29c18aa8a75276c50": "Ymultichange(Yfilerename,Ybodychange)",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": "Ybodychange",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b489e564ce5a50324a530e29c18aa8a75276c50": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 2:23 PM",
      "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
          "commitDate": "15/02/18 2:23 PM",
          "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "15/02/18 1:32 PM",
          "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,53 @@\n   public void init(ApplicationMasterServiceContext amsContext,\n       ApplicationMasterServiceProcessor nextProcessor) {\n     LOG.info(\"Initializing Constraint Placement Processor:\");\n-    this.nextAMSProcessor \u003d nextProcessor;\n-    this.constraintManager \u003d\n-        ((RMContextImpl)amsContext).getPlacementConstraintManager();\n+    super.init(amsContext, nextProcessor);\n \n-    this.scheduler \u003d\n-        (AbstractYarnScheduler)((RMContextImpl)amsContext).getScheduler();\n     // Only the first class is considered - even if a comma separated\n     // list is provided. (This is for simplicity, since getInstances does a\n     // lot of good things by handling things correctly)\n     List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n         ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n             YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n             ConstraintPlacementAlgorithm.class);\n     ConstraintPlacementAlgorithm algorithm \u003d null;\n     if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n       algorithm \u003d instances.get(0);\n     } else {\n       algorithm \u003d new DefaultPlacementAlgorithm();\n     }\n     LOG.info(\"Placement Algorithm [{}]\", algorithm.getClass().getName());\n \n     String iteratorName \u003d ((RMContextImpl) amsContext).getYarnConfiguration()\n         .get(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR,\n             BatchedRequests.IteratorType.SERIAL.name());\n     LOG.info(\"Placement Algorithm Iterator[{}]\", iteratorName);\n     try {\n       iteratorType \u003d BatchedRequests.IteratorType.valueOf(iteratorName);\n     } catch (IllegalArgumentException e) {\n       throw new YarnRuntimeException(\n           \"Could not instantiate Placement Algorithm Iterator: \", e);\n     }\n \n     int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n         YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n         YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n     this.placementDispatcher \u003d new PlacementDispatcher();\n     this.placementDispatcher.init(\n         ((RMContextImpl)amsContext), algorithm, algoPSize);\n     LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n \n     int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n         YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n         YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n     this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n     LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n \n     // Number of times a request that is not satisfied by the scheduler\n     // can be retried.\n     this.retryAttempts \u003d\n         ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n             YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n             YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n     LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(ApplicationMasterServiceContext amsContext,\n      ApplicationMasterServiceProcessor nextProcessor) {\n    LOG.info(\"Initializing Constraint Placement Processor:\");\n    super.init(amsContext, nextProcessor);\n\n    // Only the first class is considered - even if a comma separated\n    // list is provided. (This is for simplicity, since getInstances does a\n    // lot of good things by handling things correctly)\n    List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n            ConstraintPlacementAlgorithm.class);\n    ConstraintPlacementAlgorithm algorithm \u003d null;\n    if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n      algorithm \u003d instances.get(0);\n    } else {\n      algorithm \u003d new DefaultPlacementAlgorithm();\n    }\n    LOG.info(\"Placement Algorithm [{}]\", algorithm.getClass().getName());\n\n    String iteratorName \u003d ((RMContextImpl) amsContext).getYarnConfiguration()\n        .get(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR,\n            BatchedRequests.IteratorType.SERIAL.name());\n    LOG.info(\"Placement Algorithm Iterator[{}]\", iteratorName);\n    try {\n      iteratorType \u003d BatchedRequests.IteratorType.valueOf(iteratorName);\n    } catch (IllegalArgumentException e) {\n      throw new YarnRuntimeException(\n          \"Could not instantiate Placement Algorithm Iterator: \", e);\n    }\n\n    int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n    this.placementDispatcher \u003d new PlacementDispatcher();\n    this.placementDispatcher.init(\n        ((RMContextImpl)amsContext), algorithm, algoPSize);\n    LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n\n    int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n    this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n    LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n\n    // Number of times a request that is not satisfied by the scheduler\n    // can be retried.\n    this.retryAttempts \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n            YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n    LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
          "commitDate": "15/02/18 2:23 PM",
          "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "15/02/18 1:32 PM",
          "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,53 @@\n   public void init(ApplicationMasterServiceContext amsContext,\n       ApplicationMasterServiceProcessor nextProcessor) {\n     LOG.info(\"Initializing Constraint Placement Processor:\");\n-    this.nextAMSProcessor \u003d nextProcessor;\n-    this.constraintManager \u003d\n-        ((RMContextImpl)amsContext).getPlacementConstraintManager();\n+    super.init(amsContext, nextProcessor);\n \n-    this.scheduler \u003d\n-        (AbstractYarnScheduler)((RMContextImpl)amsContext).getScheduler();\n     // Only the first class is considered - even if a comma separated\n     // list is provided. (This is for simplicity, since getInstances does a\n     // lot of good things by handling things correctly)\n     List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n         ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n             YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n             ConstraintPlacementAlgorithm.class);\n     ConstraintPlacementAlgorithm algorithm \u003d null;\n     if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n       algorithm \u003d instances.get(0);\n     } else {\n       algorithm \u003d new DefaultPlacementAlgorithm();\n     }\n     LOG.info(\"Placement Algorithm [{}]\", algorithm.getClass().getName());\n \n     String iteratorName \u003d ((RMContextImpl) amsContext).getYarnConfiguration()\n         .get(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR,\n             BatchedRequests.IteratorType.SERIAL.name());\n     LOG.info(\"Placement Algorithm Iterator[{}]\", iteratorName);\n     try {\n       iteratorType \u003d BatchedRequests.IteratorType.valueOf(iteratorName);\n     } catch (IllegalArgumentException e) {\n       throw new YarnRuntimeException(\n           \"Could not instantiate Placement Algorithm Iterator: \", e);\n     }\n \n     int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n         YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n         YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n     this.placementDispatcher \u003d new PlacementDispatcher();\n     this.placementDispatcher.init(\n         ((RMContextImpl)amsContext), algorithm, algoPSize);\n     LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n \n     int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n         YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n         YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n     this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n     LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n \n     // Number of times a request that is not satisfied by the scheduler\n     // can be retried.\n     this.retryAttempts \u003d\n         ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n             YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n             YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n     LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(ApplicationMasterServiceContext amsContext,\n      ApplicationMasterServiceProcessor nextProcessor) {\n    LOG.info(\"Initializing Constraint Placement Processor:\");\n    super.init(amsContext, nextProcessor);\n\n    // Only the first class is considered - even if a comma separated\n    // list is provided. (This is for simplicity, since getInstances does a\n    // lot of good things by handling things correctly)\n    List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n            ConstraintPlacementAlgorithm.class);\n    ConstraintPlacementAlgorithm algorithm \u003d null;\n    if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n      algorithm \u003d instances.get(0);\n    } else {\n      algorithm \u003d new DefaultPlacementAlgorithm();\n    }\n    LOG.info(\"Placement Algorithm [{}]\", algorithm.getClass().getName());\n\n    String iteratorName \u003d ((RMContextImpl) amsContext).getYarnConfiguration()\n        .get(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR,\n            BatchedRequests.IteratorType.SERIAL.name());\n    LOG.info(\"Placement Algorithm Iterator[{}]\", iteratorName);\n    try {\n      iteratorType \u003d BatchedRequests.IteratorType.valueOf(iteratorName);\n    } catch (IllegalArgumentException e) {\n      throw new YarnRuntimeException(\n          \"Could not instantiate Placement Algorithm Iterator: \", e);\n    }\n\n    int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n    this.placementDispatcher \u003d new PlacementDispatcher();\n    this.placementDispatcher.init(\n        ((RMContextImpl)amsContext), algorithm, algoPSize);\n    LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n\n    int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n    this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n    LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n\n    // Number of times a request that is not satisfied by the scheduler\n    // can be retried.\n    this.retryAttempts \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n            YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n    LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7613. Implement Basic algorithm for constraint based placement. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,57 @@\n   public void init(ApplicationMasterServiceContext amsContext,\n       ApplicationMasterServiceProcessor nextProcessor) {\n     LOG.info(\"Initializing Constraint Placement Processor:\");\n     this.nextAMSProcessor \u003d nextProcessor;\n     this.constraintManager \u003d\n         ((RMContextImpl)amsContext).getPlacementConstraintManager();\n \n     this.scheduler \u003d\n         (AbstractYarnScheduler)((RMContextImpl)amsContext).getScheduler();\n     // Only the first class is considered - even if a comma separated\n     // list is provided. (This is for simplicity, since getInstances does a\n     // lot of good things by handling things correctly)\n     List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n         ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n             YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n             ConstraintPlacementAlgorithm.class);\n     ConstraintPlacementAlgorithm algorithm \u003d null;\n     if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n       algorithm \u003d instances.get(0);\n     } else {\n-      algorithm \u003d new SamplePlacementAlgorithm();\n+      algorithm \u003d new DefaultPlacementAlgorithm();\n     }\n-    LOG.info(\"Planning Algorithm [{}]\", algorithm.getClass().getName());\n+    LOG.info(\"Placement Algorithm [{}]\", algorithm.getClass().getName());\n+\n+    String iteratorName \u003d ((RMContextImpl) amsContext).getYarnConfiguration()\n+        .get(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR,\n+            BatchedRequests.IteratorType.SERIAL.name());\n+    LOG.info(\"Placement Algorithm Iterator[{}]\", iteratorName);\n+    try {\n+      iteratorType \u003d BatchedRequests.IteratorType.valueOf(iteratorName);\n+    } catch (IllegalArgumentException e) {\n+      throw new YarnRuntimeException(\n+          \"Could not instantiate Placement Algorithm Iterator: \", e);\n+    }\n \n     int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n         YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n         YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n     this.placementDispatcher \u003d new PlacementDispatcher();\n     this.placementDispatcher.init(\n         ((RMContextImpl)amsContext), algorithm, algoPSize);\n     LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n \n     int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n         YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n         YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n     this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n     LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n \n     // Number of times a request that is not satisfied by the scheduler\n     // can be retried.\n     this.retryAttempts \u003d\n         ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n             YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n             YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n     LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(ApplicationMasterServiceContext amsContext,\n      ApplicationMasterServiceProcessor nextProcessor) {\n    LOG.info(\"Initializing Constraint Placement Processor:\");\n    this.nextAMSProcessor \u003d nextProcessor;\n    this.constraintManager \u003d\n        ((RMContextImpl)amsContext).getPlacementConstraintManager();\n\n    this.scheduler \u003d\n        (AbstractYarnScheduler)((RMContextImpl)amsContext).getScheduler();\n    // Only the first class is considered - even if a comma separated\n    // list is provided. (This is for simplicity, since getInstances does a\n    // lot of good things by handling things correctly)\n    List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n            ConstraintPlacementAlgorithm.class);\n    ConstraintPlacementAlgorithm algorithm \u003d null;\n    if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n      algorithm \u003d instances.get(0);\n    } else {\n      algorithm \u003d new DefaultPlacementAlgorithm();\n    }\n    LOG.info(\"Placement Algorithm [{}]\", algorithm.getClass().getName());\n\n    String iteratorName \u003d ((RMContextImpl) amsContext).getYarnConfiguration()\n        .get(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR,\n            BatchedRequests.IteratorType.SERIAL.name());\n    LOG.info(\"Placement Algorithm Iterator[{}]\", iteratorName);\n    try {\n      iteratorType \u003d BatchedRequests.IteratorType.valueOf(iteratorName);\n    } catch (IllegalArgumentException e) {\n      throw new YarnRuntimeException(\n          \"Could not instantiate Placement Algorithm Iterator: \", e);\n    }\n\n    int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n    this.placementDispatcher \u003d new PlacementDispatcher();\n    this.placementDispatcher.init(\n        ((RMContextImpl)amsContext), algorithm, algoPSize);\n    LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n\n    int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n    this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n    LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n\n    // Number of times a request that is not satisfied by the scheduler\n    // can be retried.\n    this.retryAttempts \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n            YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n    LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
      "extendedDetails": {}
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,46 @@\n+  public void init(ApplicationMasterServiceContext amsContext,\n+      ApplicationMasterServiceProcessor nextProcessor) {\n+    LOG.info(\"Initializing Constraint Placement Processor:\");\n+    this.nextAMSProcessor \u003d nextProcessor;\n+    this.constraintManager \u003d\n+        ((RMContextImpl)amsContext).getPlacementConstraintManager();\n+\n+    this.scheduler \u003d\n+        (AbstractYarnScheduler)((RMContextImpl)amsContext).getScheduler();\n+    // Only the first class is considered - even if a comma separated\n+    // list is provided. (This is for simplicity, since getInstances does a\n+    // lot of good things by handling things correctly)\n+    List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n+        ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n+            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n+            ConstraintPlacementAlgorithm.class);\n+    ConstraintPlacementAlgorithm algorithm \u003d null;\n+    if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n+      algorithm \u003d instances.get(0);\n+    } else {\n+      algorithm \u003d new SamplePlacementAlgorithm();\n+    }\n+    LOG.info(\"Planning Algorithm [{}]\", algorithm.getClass().getName());\n+\n+    int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n+        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n+        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n+    this.placementDispatcher \u003d new PlacementDispatcher();\n+    this.placementDispatcher.init(\n+        ((RMContextImpl)amsContext), algorithm, algoPSize);\n+    LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n+\n+    int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n+        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n+        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n+    this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n+    LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n+\n+    // Number of times a request that is not satisfied by the scheduler\n+    // can be retried.\n+    this.retryAttempts \u003d\n+        ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n+            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n+            YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n+    LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(ApplicationMasterServiceContext amsContext,\n      ApplicationMasterServiceProcessor nextProcessor) {\n    LOG.info(\"Initializing Constraint Placement Processor:\");\n    this.nextAMSProcessor \u003d nextProcessor;\n    this.constraintManager \u003d\n        ((RMContextImpl)amsContext).getPlacementConstraintManager();\n\n    this.scheduler \u003d\n        (AbstractYarnScheduler)((RMContextImpl)amsContext).getScheduler();\n    // Only the first class is considered - even if a comma separated\n    // list is provided. (This is for simplicity, since getInstances does a\n    // lot of good things by handling things correctly)\n    List\u003cConstraintPlacementAlgorithm\u003e instances \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInstances(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS,\n            ConstraintPlacementAlgorithm.class);\n    ConstraintPlacementAlgorithm algorithm \u003d null;\n    if (instances !\u003d null \u0026\u0026 !instances.isEmpty()) {\n      algorithm \u003d instances.get(0);\n    } else {\n      algorithm \u003d new SamplePlacementAlgorithm();\n    }\n    LOG.info(\"Planning Algorithm [{}]\", algorithm.getClass().getName());\n\n    int algoPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE);\n    this.placementDispatcher \u003d new PlacementDispatcher();\n    this.placementDispatcher.init(\n        ((RMContextImpl)amsContext), algorithm, algoPSize);\n    LOG.info(\"Planning Algorithm pool size [{}]\", algoPSize);\n\n    int schedPSize \u003d ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n        YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE,\n        YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE);\n    this.schedulingThreadPool \u003d Executors.newFixedThreadPool(schedPSize);\n    LOG.info(\"Scheduler pool size [{}]\", schedPSize);\n\n    // Number of times a request that is not satisfied by the scheduler\n    // can be retried.\n    this.retryAttempts \u003d\n        ((RMContextImpl) amsContext).getYarnConfiguration().getInt(\n            YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS,\n            YarnConfiguration.DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS);\n    LOG.info(\"Num retry attempts [{}]\", this.retryAttempts);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java"
    }
  }
}