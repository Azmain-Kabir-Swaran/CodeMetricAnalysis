{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemApplicationHistoryStore.java",
  "functionName": "getApplicationAttempts",
  "functionId": "getApplicationAttempts___appId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/FileSystemApplicationHistoryStore.java",
  "functionStartLine": 221,
  "functionEndLine": 260,
  "numCommitsSeen": 16,
  "timeTaken": 1787,
  "changeHistory": [
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "0185a5784712d9b6e23d9d8c7624cd4e4886cab8",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "0185a5784712d9b6e23d9d8c7624cd4e4886cab8": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "15/01/16 8:40 AM",
      "commitNameOld": "fc6d3a3b234efff2b0b646c31a4e6ff0a5118ef9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 151.23,
      "commitsBetweenForRepo": 980,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n       getApplicationAttempts(ApplicationId appId) throws IOException {\n     Map\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e historyDataMap \u003d\n         new HashMap\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e();\n     HistoryFileReader hfReader \u003d getHistoryFileReader(appId);\n     try {\n       while (hfReader.hasNext()) {\n         HistoryFileReader.Entry entry \u003d hfReader.next();\n         if (entry.key.id.startsWith(\n             ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n-          ApplicationAttemptId appAttemptId \u003d \n-              ConverterUtils.toApplicationAttemptId(entry.key.id);\n+          ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n+              entry.key.id);\n           if (appAttemptId.getApplicationId().equals(appId)) {\n             ApplicationAttemptHistoryData historyData \u003d \n                 historyDataMap.get(appAttemptId);\n             if (historyData \u003d\u003d null) {\n               historyData \u003d ApplicationAttemptHistoryData.newInstance(\n                   appAttemptId, null, -1, null, null, null,\n                   FinalApplicationStatus.UNDEFINED, null);\n               historyDataMap.put(appAttemptId, historyData);\n             }\n             if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n               mergeApplicationAttemptHistoryData(historyData,\n                   parseApplicationAttemptStartData(entry.value));\n             } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n               mergeApplicationAttemptHistoryData(historyData,\n                   parseApplicationAttemptFinishData(entry.value));\n             }\n           }\n         }\n       }\n       LOG.info(\"Completed reading history information of all application\"\n           + \" attempts of application \" + appId);\n     } catch (IOException e) {\n       LOG.info(\"Error when reading history information of some application\"\n           + \" attempts of application \" + appId);\n     } finally {\n       hfReader.close();\n     }\n     return historyDataMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getApplicationAttempts(ApplicationId appId) throws IOException {\n    Map\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e historyDataMap \u003d\n        new HashMap\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e();\n    HistoryFileReader hfReader \u003d getHistoryFileReader(appId);\n    try {\n      while (hfReader.hasNext()) {\n        HistoryFileReader.Entry entry \u003d hfReader.next();\n        if (entry.key.id.startsWith(\n            ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n          ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n              entry.key.id);\n          if (appAttemptId.getApplicationId().equals(appId)) {\n            ApplicationAttemptHistoryData historyData \u003d \n                historyDataMap.get(appAttemptId);\n            if (historyData \u003d\u003d null) {\n              historyData \u003d ApplicationAttemptHistoryData.newInstance(\n                  appAttemptId, null, -1, null, null, null,\n                  FinalApplicationStatus.UNDEFINED, null);\n              historyDataMap.put(appAttemptId, historyData);\n            }\n            if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n              mergeApplicationAttemptHistoryData(historyData,\n                  parseApplicationAttemptStartData(entry.value));\n            } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n              mergeApplicationAttemptHistoryData(historyData,\n                  parseApplicationAttemptFinishData(entry.value));\n            }\n          }\n        }\n      }\n      LOG.info(\"Completed reading history information of all application\"\n          + \" attempts of application \" + appId);\n    } catch (IOException e) {\n      LOG.info(\"Error when reading history information of some application\"\n          + \" attempts of application \" + appId);\n    } finally {\n      hfReader.close();\n    }\n    return historyDataMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/FileSystemApplicationHistoryStore.java",
      "extendedDetails": {}
    },
    "0185a5784712d9b6e23d9d8c7624cd4e4886cab8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1578. Fixed reading incomplete application attempt and container data in FileSystemApplicationHistoryStore. Contributed by Shinichi Yamashita.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567816 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 4:08 PM",
      "commitName": "0185a5784712d9b6e23d9d8c7624cd4e4886cab8",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.8,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n       getApplicationAttempts(ApplicationId appId) throws IOException {\n     Map\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e historyDataMap \u003d\n         new HashMap\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e();\n-    Map\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e startFinshDataMap \u003d\n-        new HashMap\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e();\n     HistoryFileReader hfReader \u003d getHistoryFileReader(appId);\n     try {\n       while (hfReader.hasNext()) {\n         HistoryFileReader.Entry entry \u003d hfReader.next();\n-        if (entry.key.id.startsWith(ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n-          if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n-            retrieveStartFinishData(appId, entry, startFinshDataMap, true);\n-          } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n-            retrieveStartFinishData(appId, entry, startFinshDataMap, false);\n+        if (entry.key.id.startsWith(\n+            ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n+          ApplicationAttemptId appAttemptId \u003d \n+              ConverterUtils.toApplicationAttemptId(entry.key.id);\n+          if (appAttemptId.getApplicationId().equals(appId)) {\n+            ApplicationAttemptHistoryData historyData \u003d \n+                historyDataMap.get(appAttemptId);\n+            if (historyData \u003d\u003d null) {\n+              historyData \u003d ApplicationAttemptHistoryData.newInstance(\n+                  appAttemptId, null, -1, null, null, null,\n+                  FinalApplicationStatus.UNDEFINED, null);\n+              historyDataMap.put(appAttemptId, historyData);\n+            }\n+            if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n+              mergeApplicationAttemptHistoryData(historyData,\n+                  parseApplicationAttemptStartData(entry.value));\n+            } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n+              mergeApplicationAttemptHistoryData(historyData,\n+                  parseApplicationAttemptFinishData(entry.value));\n+            }\n           }\n         }\n       }\n       LOG.info(\"Completed reading history information of all application\"\n           + \" attempts of application \" + appId);\n     } catch (IOException e) {\n       LOG.info(\"Error when reading history information of some application\"\n           + \" attempts of application \" + appId);\n     } finally {\n       hfReader.close();\n     }\n-    for (Map.Entry\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e entry : startFinshDataMap\n-      .entrySet()) {\n-      ApplicationAttemptHistoryData historyData \u003d\n-          ApplicationAttemptHistoryData.newInstance(entry.getKey(), null, -1,\n-            null, null, null, FinalApplicationStatus.UNDEFINED, null);\n-      mergeApplicationAttemptHistoryData(historyData,\n-        entry.getValue().startData);\n-      mergeApplicationAttemptHistoryData(historyData,\n-        entry.getValue().finishData);\n-      historyDataMap.put(entry.getKey(), historyData);\n-    }\n     return historyDataMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getApplicationAttempts(ApplicationId appId) throws IOException {\n    Map\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e historyDataMap \u003d\n        new HashMap\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e();\n    HistoryFileReader hfReader \u003d getHistoryFileReader(appId);\n    try {\n      while (hfReader.hasNext()) {\n        HistoryFileReader.Entry entry \u003d hfReader.next();\n        if (entry.key.id.startsWith(\n            ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n          ApplicationAttemptId appAttemptId \u003d \n              ConverterUtils.toApplicationAttemptId(entry.key.id);\n          if (appAttemptId.getApplicationId().equals(appId)) {\n            ApplicationAttemptHistoryData historyData \u003d \n                historyDataMap.get(appAttemptId);\n            if (historyData \u003d\u003d null) {\n              historyData \u003d ApplicationAttemptHistoryData.newInstance(\n                  appAttemptId, null, -1, null, null, null,\n                  FinalApplicationStatus.UNDEFINED, null);\n              historyDataMap.put(appAttemptId, historyData);\n            }\n            if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n              mergeApplicationAttemptHistoryData(historyData,\n                  parseApplicationAttemptStartData(entry.value));\n            } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n              mergeApplicationAttemptHistoryData(historyData,\n                  parseApplicationAttemptFinishData(entry.value));\n            }\n          }\n        }\n      }\n      LOG.info(\"Completed reading history information of all application\"\n          + \" attempts of application \" + appId);\n    } catch (IOException e) {\n      LOG.info(\"Error when reading history information of some application\"\n          + \" attempts of application \" + appId);\n    } finally {\n      hfReader.close();\n    }\n    return historyDataMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/FileSystemApplicationHistoryStore.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,38 @@\n+      getApplicationAttempts(ApplicationId appId) throws IOException {\n+    Map\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e historyDataMap \u003d\n+        new HashMap\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e();\n+    Map\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e startFinshDataMap \u003d\n+        new HashMap\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e();\n+    HistoryFileReader hfReader \u003d getHistoryFileReader(appId);\n+    try {\n+      while (hfReader.hasNext()) {\n+        HistoryFileReader.Entry entry \u003d hfReader.next();\n+        if (entry.key.id.startsWith(ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n+          if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n+            retrieveStartFinishData(appId, entry, startFinshDataMap, true);\n+          } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n+            retrieveStartFinishData(appId, entry, startFinshDataMap, false);\n+          }\n+        }\n+      }\n+      LOG.info(\"Completed reading history information of all application\"\n+          + \" attempts of application \" + appId);\n+    } catch (IOException e) {\n+      LOG.info(\"Error when reading history information of some application\"\n+          + \" attempts of application \" + appId);\n+    } finally {\n+      hfReader.close();\n+    }\n+    for (Map.Entry\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e entry : startFinshDataMap\n+      .entrySet()) {\n+      ApplicationAttemptHistoryData historyData \u003d\n+          ApplicationAttemptHistoryData.newInstance(entry.getKey(), null, -1,\n+            null, null, null, FinalApplicationStatus.UNDEFINED, null);\n+      mergeApplicationAttemptHistoryData(historyData,\n+        entry.getValue().startData);\n+      mergeApplicationAttemptHistoryData(historyData,\n+        entry.getValue().finishData);\n+      historyDataMap.put(entry.getKey(), historyData);\n+    }\n+    return historyDataMap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getApplicationAttempts(ApplicationId appId) throws IOException {\n    Map\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e historyDataMap \u003d\n        new HashMap\u003cApplicationAttemptId, ApplicationAttemptHistoryData\u003e();\n    Map\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e startFinshDataMap \u003d\n        new HashMap\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e();\n    HistoryFileReader hfReader \u003d getHistoryFileReader(appId);\n    try {\n      while (hfReader.hasNext()) {\n        HistoryFileReader.Entry entry \u003d hfReader.next();\n        if (entry.key.id.startsWith(ConverterUtils.APPLICATION_ATTEMPT_PREFIX)) {\n          if (entry.key.suffix.equals(START_DATA_SUFFIX)) {\n            retrieveStartFinishData(appId, entry, startFinshDataMap, true);\n          } else if (entry.key.suffix.equals(FINISH_DATA_SUFFIX)) {\n            retrieveStartFinishData(appId, entry, startFinshDataMap, false);\n          }\n        }\n      }\n      LOG.info(\"Completed reading history information of all application\"\n          + \" attempts of application \" + appId);\n    } catch (IOException e) {\n      LOG.info(\"Error when reading history information of some application\"\n          + \" attempts of application \" + appId);\n    } finally {\n      hfReader.close();\n    }\n    for (Map.Entry\u003cApplicationAttemptId, StartFinishDataPair\u003cApplicationAttemptStartData, ApplicationAttemptFinishData\u003e\u003e entry : startFinshDataMap\n      .entrySet()) {\n      ApplicationAttemptHistoryData historyData \u003d\n          ApplicationAttemptHistoryData.newInstance(entry.getKey(), null, -1,\n            null, null, null, FinalApplicationStatus.UNDEFINED, null);\n      mergeApplicationAttemptHistoryData(historyData,\n        entry.getValue().startData);\n      mergeApplicationAttemptHistoryData(historyData,\n        entry.getValue().finishData);\n      historyDataMap.put(entry.getKey(), historyData);\n    }\n    return historyDataMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/FileSystemApplicationHistoryStore.java"
    }
  }
}