{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeRpcServer.java",
  "functionName": "getNextSPSPath",
  "functionId": "getNextSPSPath",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
  "functionStartLine": 2637,
  "functionEndLine": 2658,
  "numCommitsSeen": 564,
  "timeTaken": 7765,
  "changeHistory": [
    "66e8f9b31529226309c924226a53dead3e6fcf11",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
    "8467ec24fb74f30371d5a13e893fc56309ee9372",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
    "99594b48b8e040ab5a0939d7c3dbcfb34400e6fc"
  ],
  "changeHistoryShort": {
    "66e8f9b31529226309c924226a53dead3e6fcf11": "Ymultichange(Yreturntypechange,Ybodychange)",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": "Ybodychange",
    "8467ec24fb74f30371d5a13e893fc56309ee9372": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": "Ybodychange",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": "Ybodychange",
    "99594b48b8e040ab5a0939d7c3dbcfb34400e6fc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66e8f9b31529226309c924226a53dead3e6fcf11": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "66e8f9b31529226309c924226a53dead3e6fcf11",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,22 @@\n-  public String getNextSPSPath() throws IOException {\n+  public Long getNextSPSPath() throws IOException {\n     checkNNStartup();\n     String operationName \u003d \"getNextSPSPath\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n     // Check that SPS is enabled externally\n     StoragePolicySatisfyManager spsMgr \u003d\n         namesystem.getBlockManager().getSPSManager();\n     StoragePolicySatisfierMode spsMode \u003d (spsMgr !\u003d null ? spsMgr.getMode()\n         : StoragePolicySatisfierMode.NONE);\n     if (spsMode !\u003d StoragePolicySatisfierMode.EXTERNAL) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"SPS service mode is {}, so external SPS service is \"\n             + \"not allowed to fetch the path Ids\", spsMode);\n       }\n       throw new IOException(\"SPS service mode is \" + spsMode + \", so \"\n           + \"external SPS service is not allowed to fetch the path Ids\");\n     }\n-    Long pathId \u003d spsMgr.getNextPathId();\n-    if (pathId \u003d\u003d null) {\n-      return null;\n-    }\n-    return namesystem.getFilePath(pathId);\n+    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Long getNextSPSPath() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPath\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS is enabled externally\n    StoragePolicySatisfyManager spsMgr \u003d\n        namesystem.getBlockManager().getSPSManager();\n    StoragePolicySatisfierMode spsMode \u003d (spsMgr !\u003d null ? spsMgr.getMode()\n        : StoragePolicySatisfierMode.NONE);\n    if (spsMode !\u003d StoragePolicySatisfierMode.EXTERNAL) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"SPS service mode is {}, so external SPS service is \"\n            + \"not allowed to fetch the path Ids\", spsMode);\n      }\n      throw new IOException(\"SPS service mode is \" + spsMode + \", so \"\n          + \"external SPS service is not allowed to fetch the path Ids\");\n    }\n    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {
            "oldValue": "String",
            "newValue": "Long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "66e8f9b31529226309c924226a53dead3e6fcf11",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,22 @@\n-  public String getNextSPSPath() throws IOException {\n+  public Long getNextSPSPath() throws IOException {\n     checkNNStartup();\n     String operationName \u003d \"getNextSPSPath\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n     // Check that SPS is enabled externally\n     StoragePolicySatisfyManager spsMgr \u003d\n         namesystem.getBlockManager().getSPSManager();\n     StoragePolicySatisfierMode spsMode \u003d (spsMgr !\u003d null ? spsMgr.getMode()\n         : StoragePolicySatisfierMode.NONE);\n     if (spsMode !\u003d StoragePolicySatisfierMode.EXTERNAL) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"SPS service mode is {}, so external SPS service is \"\n             + \"not allowed to fetch the path Ids\", spsMode);\n       }\n       throw new IOException(\"SPS service mode is \" + spsMode + \", so \"\n           + \"external SPS service is not allowed to fetch the path Ids\");\n     }\n-    Long pathId \u003d spsMgr.getNextPathId();\n-    if (pathId \u003d\u003d null) {\n-      return null;\n-    }\n-    return namesystem.getFilePath(pathId);\n+    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Long getNextSPSPath() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPath\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS is enabled externally\n    StoragePolicySatisfyManager spsMgr \u003d\n        namesystem.getBlockManager().getSPSManager();\n    StoragePolicySatisfierMode spsMode \u003d (spsMgr !\u003d null ? spsMgr.getMode()\n        : StoragePolicySatisfierMode.NONE);\n    if (spsMode !\u003d StoragePolicySatisfierMode.EXTERNAL) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"SPS service mode is {}, so external SPS service is \"\n            + \"not allowed to fetch the path Ids\", spsMode);\n      }\n      throw new IOException(\"SPS service mode is \" + spsMode + \", so \"\n          + \"external SPS service is not allowed to fetch the path Ids\");\n    }\n    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   public String getNextSPSPath() throws IOException {\n     checkNNStartup();\n     String operationName \u003d \"getNextSPSPath\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n-    // Check that SPS daemon service is running inside namenode\n-    if (namesystem.getBlockManager().getSPSManager()\n-        .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n-      LOG.debug(\"SPS service is internally enabled and running inside \"\n-          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n-      throw new IOException(\"SPS service is internally enabled and running\"\n-          + \" inside namenode, so external SPS is not allowed to fetch\"\n-          + \" the path Ids\");\n+    // Check that SPS is enabled externally\n+    StoragePolicySatisfyManager spsMgr \u003d\n+        namesystem.getBlockManager().getSPSManager();\n+    StoragePolicySatisfierMode spsMode \u003d (spsMgr !\u003d null ? spsMgr.getMode()\n+        : StoragePolicySatisfierMode.NONE);\n+    if (spsMode !\u003d StoragePolicySatisfierMode.EXTERNAL) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"SPS service mode is {}, so external SPS service is \"\n+            + \"not allowed to fetch the path Ids\", spsMode);\n+      }\n+      throw new IOException(\"SPS service mode is \" + spsMode + \", so \"\n+          + \"external SPS service is not allowed to fetch the path Ids\");\n     }\n-    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    Long pathId \u003d spsMgr.getNextPathId();\n     if (pathId \u003d\u003d null) {\n       return null;\n     }\n     return namesystem.getFilePath(pathId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getNextSPSPath() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPath\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS is enabled externally\n    StoragePolicySatisfyManager spsMgr \u003d\n        namesystem.getBlockManager().getSPSManager();\n    StoragePolicySatisfierMode spsMode \u003d (spsMgr !\u003d null ? spsMgr.getMode()\n        : StoragePolicySatisfierMode.NONE);\n    if (spsMode !\u003d StoragePolicySatisfierMode.EXTERNAL) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"SPS service mode is {}, so external SPS service is \"\n            + \"not allowed to fetch the path Ids\", spsMode);\n      }\n      throw new IOException(\"SPS service mode is \" + spsMode + \", so \"\n          + \"external SPS service is not allowed to fetch the path Ids\");\n    }\n    Long pathId \u003d spsMgr.getNextPathId();\n    if (pathId \u003d\u003d null) {\n      return null;\n    }\n    return namesystem.getFilePath(pathId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "8467ec24fb74f30371d5a13e893fc56309ee9372": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthor": "Rakesh Radhakrishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,22 @@\n-  public Long getNextSPSPathId() throws IOException {\n+  public String getNextSPSPath() throws IOException {\n     checkNNStartup();\n-    String operationName \u003d \"getNextSPSPathId\";\n+    String operationName \u003d \"getNextSPSPath\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n     // Check that SPS daemon service is running inside namenode\n     if (namesystem.getBlockManager().getSPSManager()\n         .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n       LOG.debug(\"SPS service is internally enabled and running inside \"\n           + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n       throw new IOException(\"SPS service is internally enabled and running\"\n           + \" inside namenode, so external SPS is not allowed to fetch\"\n           + \" the path Ids\");\n     }\n-    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    if (pathId \u003d\u003d null) {\n+      return null;\n+    }\n+    return namesystem.getFilePath(pathId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getNextSPSPath() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPath\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS daemon service is running inside namenode\n    if (namesystem.getBlockManager().getSPSManager()\n        .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n      LOG.debug(\"SPS service is internally enabled and running inside \"\n          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n      throw new IOException(\"SPS service is internally enabled and running\"\n          + \" inside namenode, so external SPS is not allowed to fetch\"\n          + \" the path Ids\");\n    }\n    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n    if (pathId \u003d\u003d null) {\n      return null;\n    }\n    return namesystem.getFilePath(pathId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {
            "oldValue": "getNextSPSPathId",
            "newValue": "getNextSPSPath"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,22 @@\n-  public Long getNextSPSPathId() throws IOException {\n+  public String getNextSPSPath() throws IOException {\n     checkNNStartup();\n-    String operationName \u003d \"getNextSPSPathId\";\n+    String operationName \u003d \"getNextSPSPath\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n     // Check that SPS daemon service is running inside namenode\n     if (namesystem.getBlockManager().getSPSManager()\n         .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n       LOG.debug(\"SPS service is internally enabled and running inside \"\n           + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n       throw new IOException(\"SPS service is internally enabled and running\"\n           + \" inside namenode, so external SPS is not allowed to fetch\"\n           + \" the path Ids\");\n     }\n-    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    if (pathId \u003d\u003d null) {\n+      return null;\n+    }\n+    return namesystem.getFilePath(pathId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getNextSPSPath() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPath\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS daemon service is running inside namenode\n    if (namesystem.getBlockManager().getSPSManager()\n        .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n      LOG.debug(\"SPS service is internally enabled and running inside \"\n          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n      throw new IOException(\"SPS service is internally enabled and running\"\n          + \" inside namenode, so external SPS is not allowed to fetch\"\n          + \" the path Ids\");\n    }\n    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n    if (pathId \u003d\u003d null) {\n      return null;\n    }\n    return namesystem.getFilePath(pathId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {
            "oldValue": "Long",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,22 @@\n-  public Long getNextSPSPathId() throws IOException {\n+  public String getNextSPSPath() throws IOException {\n     checkNNStartup();\n-    String operationName \u003d \"getNextSPSPathId\";\n+    String operationName \u003d \"getNextSPSPath\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n     // Check that SPS daemon service is running inside namenode\n     if (namesystem.getBlockManager().getSPSManager()\n         .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n       LOG.debug(\"SPS service is internally enabled and running inside \"\n           + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n       throw new IOException(\"SPS service is internally enabled and running\"\n           + \" inside namenode, so external SPS is not allowed to fetch\"\n           + \" the path Ids\");\n     }\n-    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n+    if (pathId \u003d\u003d null) {\n+      return null;\n+    }\n+    return namesystem.getFilePath(pathId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getNextSPSPath() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPath\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS daemon service is running inside namenode\n    if (namesystem.getBlockManager().getSPSManager()\n        .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n      LOG.debug(\"SPS service is internally enabled and running inside \"\n          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n      throw new IOException(\"SPS service is internally enabled and running\"\n          + \" inside namenode, so external SPS is not allowed to fetch\"\n          + \" the path Ids\");\n    }\n    Long pathId \u003d namesystem.getBlockManager().getSPSManager().getNextPathId();\n    if (pathId \u003d\u003d null) {\n      return null;\n    }\n    return namesystem.getFilePath(pathId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13097: [SPS]: Fix the branch review comments(Part1). Contributed by Surendra Singh.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,18 @@\n   public Long getNextSPSPathId() throws IOException {\n     checkNNStartup();\n     String operationName \u003d \"getNextSPSPathId\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n-    // Check that internal SPS service is running\n-    if (namesystem.getBlockManager()\n-        .getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n-        \u0026\u0026 namesystem.getBlockManager().getSPSService().isRunning()) {\n+    // Check that SPS daemon service is running inside namenode\n+    if (namesystem.getBlockManager().getSPSManager()\n+        .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n       LOG.debug(\"SPS service is internally enabled and running inside \"\n           + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n       throw new IOException(\"SPS service is internally enabled and running\"\n           + \" inside namenode, so external SPS is not allowed to fetch\"\n           + \" the path Ids\");\n     }\n-    return namesystem.getBlockManager().getNextSPSPathId();\n+    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Long getNextSPSPathId() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPathId\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that SPS daemon service is running inside namenode\n    if (namesystem.getBlockManager().getSPSManager()\n        .getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL) {\n      LOG.debug(\"SPS service is internally enabled and running inside \"\n          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n      throw new IOException(\"SPS service is internally enabled and running\"\n          + \" inside namenode, so external SPS is not allowed to fetch\"\n          + \" the path Ids\");\n    }\n    return namesystem.getBlockManager().getSPSManager().getNextPathId();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13077. [SPS]: Fix review comments of external storage policy satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "99594b48b8e040ab5a0939d7c3dbcfb34400e6fc",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,19 @@\n   public Long getNextSPSPathId() throws IOException {\n     checkNNStartup();\n     String operationName \u003d \"getNextSPSPathId\";\n     namesystem.checkSuperuserPrivilege(operationName);\n     if (nn.isStandbyState()) {\n       throw new StandbyException(\"Not supported by Standby Namenode.\");\n     }\n+    // Check that internal SPS service is running\n+    if (namesystem.getBlockManager()\n+        .getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n+        \u0026\u0026 namesystem.getBlockManager().getSPSService().isRunning()) {\n+      LOG.debug(\"SPS service is internally enabled and running inside \"\n+          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n+      throw new IOException(\"SPS service is internally enabled and running\"\n+          + \" inside namenode, so external SPS is not allowed to fetch\"\n+          + \" the path Ids\");\n+    }\n     return namesystem.getBlockManager().getNextSPSPathId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Long getNextSPSPathId() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPathId\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    // Check that internal SPS service is running\n    if (namesystem.getBlockManager()\n        .getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n        \u0026\u0026 namesystem.getBlockManager().getSPSService().isRunning()) {\n      LOG.debug(\"SPS service is internally enabled and running inside \"\n          + \"namenode, so external SPS is not allowed to fetch the path Ids\");\n      throw new IOException(\"SPS service is internally enabled and running\"\n          + \" inside namenode, so external SPS is not allowed to fetch\"\n          + \" the path Ids\");\n    }\n    return namesystem.getBlockManager().getNextSPSPathId();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "99594b48b8e040ab5a0939d7c3dbcfb34400e6fc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13075. [SPS]: Provide External Context implementation. Contributed by Uma Maheswara Rao G.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "99594b48b8e040ab5a0939d7c3dbcfb34400e6fc",
      "commitAuthor": "Surendra Singh Lilhore",
      "diff": "@@ -0,0 +1,9 @@\n+  public Long getNextSPSPathId() throws IOException {\n+    checkNNStartup();\n+    String operationName \u003d \"getNextSPSPathId\";\n+    namesystem.checkSuperuserPrivilege(operationName);\n+    if (nn.isStandbyState()) {\n+      throw new StandbyException(\"Not supported by Standby Namenode.\");\n+    }\n+    return namesystem.getBlockManager().getNextSPSPathId();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Long getNextSPSPathId() throws IOException {\n    checkNNStartup();\n    String operationName \u003d \"getNextSPSPathId\";\n    namesystem.checkSuperuserPrivilege(operationName);\n    if (nn.isStandbyState()) {\n      throw new StandbyException(\"Not supported by Standby Namenode.\");\n    }\n    return namesystem.getBlockManager().getNextSPSPathId();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java"
    }
  }
}