{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandWithDestination.java",
  "functionName": "writeStreamToFile",
  "functionId": "writeStreamToFile___in-InputStream__target-PathData__lazyPersist-boolean__direct-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
  "functionStartLine": 488,
  "functionEndLine": 501,
  "numCommitsSeen": 64,
  "timeTaken": 3096,
  "changeHistory": [
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
    "9221704f857e33a5f9e00c19d3705e46e94f427b",
    "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
    "12d0e025919cfb375ecb1739fe99e92421beb56c"
  ],
  "changeHistoryShort": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": "Ybodychange",
    "9221704f857e33a5f9e00c19d3705e46e94f427b": "Ybodychange",
    "090d26652c04916a1ede4ca55e7f2ca4fc5f6249": "Ymultichange(Yparameterchange,Ybodychange)",
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15": "Ymultichange(Yparameterchange,Ybodychange)",
    "12d0e025919cfb375ecb1739fe99e92421beb56c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16885. Encryption zone file copy failure leaks a temp file\n\n\r\nContributed by Xiaoyu Yao.\r\n\r\nContains HDFS-14892. Close the output stream if createWrappedOutputStream() fails\r\n\r\nCopying file through the FsShell command into an HDFS encryption zone where\r\nthe caller lacks permissions is leaks a temp ._COPYING file\r\nand potentially a wrapped stream unclosed.\r\n\r\nThis is a convergence of a fix for S3 meeting an issue in HDFS.\r\n\r\nS3: a HEAD against a file can cache a 404, \r\n -you must not do any existence checks, including deleteOnExit(),\r\n  until the file is written. \r\n\r\nHence: HADOOP-16490, only register files for deletion the create worked\r\nand the upload is not direct. \r\n\r\nHDFS-14892. HDFS doesn\u0027t close wrapped streams when IOEs are raised on\r\ncreate() failures. Which means that an entry is retained on the NN.\r\n-you need to register a file with deleteOnExit() even if the file wasn\u0027t\r\ncreated.\r\n\r\nThis patch:\r\n\r\n* Moves the deleteOnExit to ensure the created file get deleted cleanly.\r\n* Fixes HDFS to close the wrapped stream on failures.\r\n\r\n\r\n",
      "commitDate": "02/03/20 5:22 AM",
      "commitName": "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "11/09/19 8:46 AM",
      "commitNameOld": "9221704f857e33a5f9e00c19d3705e46e94f427b",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 172.9,
      "commitsBetweenForRepo": 759,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,14 @@\n     void writeStreamToFile(InputStream in, PathData target,\n         boolean lazyPersist, boolean direct)\n         throws IOException {\n       FSDataOutputStream out \u003d null;\n       try {\n-        out \u003d create(target, lazyPersist, direct);\n+        out \u003d create(target, lazyPersist);\n         IOUtils.copyBytes(in, out, getConf(), true);\n-      } catch (IOException e) {\n-        // failure: clean up if we got as far as creating the file\n-        if (!direct \u0026\u0026 out !\u003d null) {\n-          try {\n-            fs.delete(target.path, false);\n-          } catch (IOException ignored) {\n-          }\n-        }\n-        throw e;\n       } finally {\n+        if (!direct) {\n+          deleteOnExit(target.path);\n+        }\n         IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void writeStreamToFile(InputStream in, PathData target,\n        boolean lazyPersist, boolean direct)\n        throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target, lazyPersist);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } finally {\n        if (!direct) {\n          deleteOnExit(target.path);\n        }\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "9221704f857e33a5f9e00c19d3705e46e94f427b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
      "commitDate": "11/09/19 8:46 AM",
      "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "29/01/19 4:45 PM",
      "commitNameOld": "b3bc94ebfd7cbf959bd33b8d85be80c4a8a46574",
      "commitAuthorOld": "Hanisha Koneru",
      "daysBetweenCommits": 224.63,
      "commitsBetweenForRepo": 1743,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,20 @@\n     void writeStreamToFile(InputStream in, PathData target,\n         boolean lazyPersist, boolean direct)\n         throws IOException {\n       FSDataOutputStream out \u003d null;\n       try {\n         out \u003d create(target, lazyPersist, direct);\n         IOUtils.copyBytes(in, out, getConf(), true);\n+      } catch (IOException e) {\n+        // failure: clean up if we got as far as creating the file\n+        if (!direct \u0026\u0026 out !\u003d null) {\n+          try {\n+            fs.delete(target.path, false);\n+          } catch (IOException ignored) {\n+          }\n+        }\n+        throw e;\n       } finally {\n         IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void writeStreamToFile(InputStream in, PathData target,\n        boolean lazyPersist, boolean direct)\n        throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target, lazyPersist, direct);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } catch (IOException e) {\n        // failure: clean up if we got as far as creating the file\n        if (!direct \u0026\u0026 out !\u003d null) {\n          try {\n            fs.delete(target.path, false);\n          } catch (IOException ignored) {\n          }\n        }\n        throw e;\n      } finally {\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "090d26652c04916a1ede4ca55e7f2ca4fc5f6249": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12384. Add \u0027-direct\u0027 flag option for fs copy so that user can choose not to create \u0027._COPYING_\u0027 file (Contributed by J.Andreina)\n",
      "commitDate": "08/09/15 6:41 AM",
      "commitName": "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
      "commitAuthor": "Vinayakumar B",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12384. Add \u0027-direct\u0027 flag option for fs copy so that user can choose not to create \u0027._COPYING_\u0027 file (Contributed by J.Andreina)\n",
          "commitDate": "08/09/15 6:41 AM",
          "commitName": "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "16/09/14 6:19 PM",
          "commitNameOld": "dcbc46730131a1bdf8416efeb4571794e5c8e369",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 356.51,
          "commitsBetweenForRepo": 2841,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n     void writeStreamToFile(InputStream in, PathData target,\n-                           boolean lazyPersist) throws IOException {\n+        boolean lazyPersist, boolean direct)\n+        throws IOException {\n       FSDataOutputStream out \u003d null;\n       try {\n-        out \u003d create(target, lazyPersist);\n+        out \u003d create(target, lazyPersist, direct);\n         IOUtils.copyBytes(in, out, getConf(), true);\n       } finally {\n         IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void writeStreamToFile(InputStream in, PathData target,\n        boolean lazyPersist, boolean direct)\n        throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target, lazyPersist, direct);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } finally {\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {
            "oldValue": "[in-InputStream, target-PathData, lazyPersist-boolean]",
            "newValue": "[in-InputStream, target-PathData, lazyPersist-boolean, direct-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12384. Add \u0027-direct\u0027 flag option for fs copy so that user can choose not to create \u0027._COPYING_\u0027 file (Contributed by J.Andreina)\n",
          "commitDate": "08/09/15 6:41 AM",
          "commitName": "090d26652c04916a1ede4ca55e7f2ca4fc5f6249",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "16/09/14 6:19 PM",
          "commitNameOld": "dcbc46730131a1bdf8416efeb4571794e5c8e369",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 356.51,
          "commitsBetweenForRepo": 2841,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n     void writeStreamToFile(InputStream in, PathData target,\n-                           boolean lazyPersist) throws IOException {\n+        boolean lazyPersist, boolean direct)\n+        throws IOException {\n       FSDataOutputStream out \u003d null;\n       try {\n-        out \u003d create(target, lazyPersist);\n+        out \u003d create(target, lazyPersist, direct);\n         IOUtils.copyBytes(in, out, getConf(), true);\n       } finally {\n         IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void writeStreamToFile(InputStream in, PathData target,\n        boolean lazyPersist, boolean direct)\n        throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target, lazyPersist, direct);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } finally {\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {}
        }
      ]
    },
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
      "commitDate": "28/08/14 3:53 PM",
      "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
      "commitAuthor": "arp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
          "commitDate": "28/08/14 3:53 PM",
          "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
          "commitAuthor": "arp",
          "commitDateOld": "19/08/14 1:43 PM",
          "commitNameOld": "a4ee77b65f31351b4eae76ba5df0681a0d2b856f",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 9.09,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,10 @@\n-    void writeStreamToFile(InputStream in, PathData target) throws IOException {\n+    void writeStreamToFile(InputStream in, PathData target,\n+                           boolean lazyPersist) throws IOException {\n       FSDataOutputStream out \u003d null;\n       try {\n-        out \u003d create(target);\n+        out \u003d create(target, lazyPersist);\n         IOUtils.copyBytes(in, out, getConf(), true);\n       } finally {\n         IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void writeStreamToFile(InputStream in, PathData target,\n                           boolean lazyPersist) throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target, lazyPersist);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } finally {\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {
            "oldValue": "[in-InputStream, target-PathData]",
            "newValue": "[in-InputStream, target-PathData, lazyPersist-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
          "commitDate": "28/08/14 3:53 PM",
          "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
          "commitAuthor": "arp",
          "commitDateOld": "19/08/14 1:43 PM",
          "commitNameOld": "a4ee77b65f31351b4eae76ba5df0681a0d2b856f",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 9.09,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,10 @@\n-    void writeStreamToFile(InputStream in, PathData target) throws IOException {\n+    void writeStreamToFile(InputStream in, PathData target,\n+                           boolean lazyPersist) throws IOException {\n       FSDataOutputStream out \u003d null;\n       try {\n-        out \u003d create(target);\n+        out \u003d create(target, lazyPersist);\n         IOUtils.copyBytes(in, out, getConf(), true);\n       } finally {\n         IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void writeStreamToFile(InputStream in, PathData target,\n                           boolean lazyPersist) throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target, lazyPersist);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } finally {\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {}
        }
      ]
    },
    "12d0e025919cfb375ecb1739fe99e92421beb56c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8633. Interrupted FsShell copies may leave tmp files (Daryn Sharp via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1368002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/12 7:02 AM",
      "commitName": "12d0e025919cfb375ecb1739fe99e92421beb56c",
      "commitAuthor": "Thomas Graves",
      "diff": "@@ -0,0 +1,9 @@\n+    void writeStreamToFile(InputStream in, PathData target) throws IOException {\n+      FSDataOutputStream out \u003d null;\n+      try {\n+        out \u003d create(target);\n+        IOUtils.copyBytes(in, out, getConf(), true);\n+      } finally {\n+        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void writeStreamToFile(InputStream in, PathData target) throws IOException {\n      FSDataOutputStream out \u003d null;\n      try {\n        out \u003d create(target);\n        IOUtils.copyBytes(in, out, getConf(), true);\n      } finally {\n        IOUtils.closeStream(out); // just in case copyBytes didn\u0027t\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java"
    }
  }
}