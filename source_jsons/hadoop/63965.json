{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintParser.java",
  "functionName": "parseExpression",
  "functionId": "parseExpression___constraintStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/constraint/PlacementConstraintParser.java",
  "functionStartLine": 661,
  "functionEndLine": 688,
  "numCommitsSeen": 6,
  "timeTaken": 1196,
  "changeHistory": [
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
    "a08c048832d68c203fbdfce8d9f0e7dcccb02a55"
  ],
  "changeHistoryShort": {
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": "Ybodychange",
    "a08c048832d68c203fbdfce8d9f0e7dcccb02a55": "Yintroduced"
  },
  "changeHistoryDetails": {
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "04/03/18 7:49 PM",
      "commitNameOld": "e8c5be63f0110b3c761575207dc3234c25b76078",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 191.28,
      "commitsBetweenForRepo": 2026,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   public static AbstractConstraint parseExpression(String constraintStr)\n       throws PlacementConstraintParseException {\n     // Try parse given expression with all allowed constraint parsers,\n     // fails if no one could parse it.\n     TargetConstraintParser tp \u003d new TargetConstraintParser(constraintStr);\n     Optional\u003cAbstractConstraint\u003e constraintOptional \u003d\n         Optional.ofNullable(tp.tryParse());\n     if (!constraintOptional.isPresent()) {\n       CardinalityConstraintParser cp \u003d\n           new CardinalityConstraintParser(constraintStr);\n       constraintOptional \u003d Optional.ofNullable(cp.tryParse());\n       if (!constraintOptional.isPresent()) {\n         ConjunctionConstraintParser jp \u003d\n             new ConjunctionConstraintParser(constraintStr);\n         constraintOptional \u003d Optional.ofNullable(jp.tryParse());\n       }\n       if (!constraintOptional.isPresent()) {\n+        NodeConstraintParser np \u003d\n+            new NodeConstraintParser(constraintStr);\n+        constraintOptional \u003d Optional.ofNullable(np.tryParse());\n+      }\n+      if (!constraintOptional.isPresent()) {\n         throw new PlacementConstraintParseException(\n             \"Invalid constraint expression \" + constraintStr);\n       }\n     }\n     return constraintOptional.get();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AbstractConstraint parseExpression(String constraintStr)\n      throws PlacementConstraintParseException {\n    // Try parse given expression with all allowed constraint parsers,\n    // fails if no one could parse it.\n    TargetConstraintParser tp \u003d new TargetConstraintParser(constraintStr);\n    Optional\u003cAbstractConstraint\u003e constraintOptional \u003d\n        Optional.ofNullable(tp.tryParse());\n    if (!constraintOptional.isPresent()) {\n      CardinalityConstraintParser cp \u003d\n          new CardinalityConstraintParser(constraintStr);\n      constraintOptional \u003d Optional.ofNullable(cp.tryParse());\n      if (!constraintOptional.isPresent()) {\n        ConjunctionConstraintParser jp \u003d\n            new ConjunctionConstraintParser(constraintStr);\n        constraintOptional \u003d Optional.ofNullable(jp.tryParse());\n      }\n      if (!constraintOptional.isPresent()) {\n        NodeConstraintParser np \u003d\n            new NodeConstraintParser(constraintStr);\n        constraintOptional \u003d Optional.ofNullable(np.tryParse());\n      }\n      if (!constraintOptional.isPresent()) {\n        throw new PlacementConstraintParseException(\n            \"Invalid constraint expression \" + constraintStr);\n      }\n    }\n    return constraintOptional.get();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/constraint/PlacementConstraintParser.java",
      "extendedDetails": {}
    },
    "a08c048832d68c203fbdfce8d9f0e7dcccb02a55": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7838. Support AND/OR constraints in Distributed Shell. Contributed by Weiwei Yang.\n",
      "commitDate": "10/02/18 10:20 PM",
      "commitName": "a08c048832d68c203fbdfce8d9f0e7dcccb02a55",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,23 @@\n+  public static AbstractConstraint parseExpression(String constraintStr)\n+      throws PlacementConstraintParseException {\n+    // Try parse given expression with all allowed constraint parsers,\n+    // fails if no one could parse it.\n+    TargetConstraintParser tp \u003d new TargetConstraintParser(constraintStr);\n+    Optional\u003cAbstractConstraint\u003e constraintOptional \u003d\n+        Optional.ofNullable(tp.tryParse());\n+    if (!constraintOptional.isPresent()) {\n+      CardinalityConstraintParser cp \u003d\n+          new CardinalityConstraintParser(constraintStr);\n+      constraintOptional \u003d Optional.ofNullable(cp.tryParse());\n+      if (!constraintOptional.isPresent()) {\n+        ConjunctionConstraintParser jp \u003d\n+            new ConjunctionConstraintParser(constraintStr);\n+        constraintOptional \u003d Optional.ofNullable(jp.tryParse());\n+      }\n+      if (!constraintOptional.isPresent()) {\n+        throw new PlacementConstraintParseException(\n+            \"Invalid constraint expression \" + constraintStr);\n+      }\n+    }\n+    return constraintOptional.get();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AbstractConstraint parseExpression(String constraintStr)\n      throws PlacementConstraintParseException {\n    // Try parse given expression with all allowed constraint parsers,\n    // fails if no one could parse it.\n    TargetConstraintParser tp \u003d new TargetConstraintParser(constraintStr);\n    Optional\u003cAbstractConstraint\u003e constraintOptional \u003d\n        Optional.ofNullable(tp.tryParse());\n    if (!constraintOptional.isPresent()) {\n      CardinalityConstraintParser cp \u003d\n          new CardinalityConstraintParser(constraintStr);\n      constraintOptional \u003d Optional.ofNullable(cp.tryParse());\n      if (!constraintOptional.isPresent()) {\n        ConjunctionConstraintParser jp \u003d\n            new ConjunctionConstraintParser(constraintStr);\n        constraintOptional \u003d Optional.ofNullable(jp.tryParse());\n      }\n      if (!constraintOptional.isPresent()) {\n        throw new PlacementConstraintParseException(\n            \"Invalid constraint expression \" + constraintStr);\n      }\n    }\n    return constraintOptional.get();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/constraint/PlacementConstraintParser.java"
    }
  }
}