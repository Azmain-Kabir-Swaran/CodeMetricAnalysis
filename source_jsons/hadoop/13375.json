{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PendingReconstructionBlocks.java",
  "functionName": "pendingReconstructionCheck",
  "functionId": "pendingReconstructionCheck",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/PendingReconstructionBlocks.java",
  "functionStartLine": 269,
  "functionEndLine": 289,
  "numCommitsSeen": 10,
  "timeTaken": 2060,
  "changeHistory": [
    "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f",
    "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
    "900221f95ea9fe1936b4d5f277e6047ee8734eca",
    "5865fe2bf01284993572ea60b3ec3bf8b4492818"
  ],
  "changeHistoryShort": {
    "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f": "Ybodychange",
    "a2f0cbd92f7e90909cf817c261a5fae13a9695b4": "Ybodychange",
    "900221f95ea9fe1936b4d5f277e6047ee8734eca": "Ybodychange",
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
      "commitDate": "30/06/17 10:20 AM",
      "commitName": "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "30/06/17 10:19 AM",
      "commitNameOld": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     void pendingReconstructionCheck() {\n       synchronized (pendingReconstructions) {\n         Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n             pendingReconstructions.entrySet().iterator();\n         long now \u003d monotonicNow();\n         LOG.debug(\"PendingReconstructionMonitor checking Q\");\n         while (iter.hasNext()) {\n           Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n           PendingBlockInfo pendingBlock \u003d entry.getValue();\n           if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n             BlockInfo block \u003d entry.getKey();\n             synchronized (timedOutItems) {\n               timedOutItems.add(block);\n             }\n             LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n+            NameNode.getNameNodeMetrics().incTimeoutReReplications();\n             iter.remove();\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void pendingReconstructionCheck() {\n      synchronized (pendingReconstructions) {\n        Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n            pendingReconstructions.entrySet().iterator();\n        long now \u003d monotonicNow();\n        LOG.debug(\"PendingReconstructionMonitor checking Q\");\n        while (iter.hasNext()) {\n          Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n          PendingBlockInfo pendingBlock \u003d entry.getValue();\n          if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n            BlockInfo block \u003d entry.getKey();\n            synchronized (timedOutItems) {\n              timedOutItems.add(block);\n            }\n            LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n            NameNode.getNameNodeMetrics().incTimeoutReReplications();\n            iter.remove();\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/PendingReconstructionBlocks.java",
      "extendedDetails": {}
    },
    "a2f0cbd92f7e90909cf817c261a5fae13a9695b4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\"\n\nAccidentally committed the wrong patch version, reverting to fix that.\n\nThis reverts commit 900221f95ea9fe1936b4d5f277e6047ee8734eca.\n",
      "commitDate": "30/06/17 10:19 AM",
      "commitName": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "29/06/17 5:15 PM",
      "commitNameOld": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n     void pendingReconstructionCheck() {\n       synchronized (pendingReconstructions) {\n         Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n             pendingReconstructions.entrySet().iterator();\n         long now \u003d monotonicNow();\n         LOG.debug(\"PendingReconstructionMonitor checking Q\");\n         while (iter.hasNext()) {\n           Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n           PendingBlockInfo pendingBlock \u003d entry.getValue();\n           if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n             BlockInfo block \u003d entry.getKey();\n             synchronized (timedOutItems) {\n               timedOutItems.add(block);\n             }\n             LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n-            NameNode.getNameNodeMetrics().incTimeoutReReplications();\n             iter.remove();\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void pendingReconstructionCheck() {\n      synchronized (pendingReconstructions) {\n        Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n            pendingReconstructions.entrySet().iterator();\n        long now \u003d monotonicNow();\n        LOG.debug(\"PendingReconstructionMonitor checking Q\");\n        while (iter.hasNext()) {\n          Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n          PendingBlockInfo pendingBlock \u003d entry.getValue();\n          if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n            BlockInfo block \u003d entry.getKey();\n            synchronized (timedOutItems) {\n              timedOutItems.add(block);\n            }\n            LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n            iter.remove();\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/PendingReconstructionBlocks.java",
      "extendedDetails": {}
    },
    "900221f95ea9fe1936b4d5f277e6047ee8734eca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
      "commitDate": "29/06/17 5:15 PM",
      "commitName": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "06/02/17 3:19 AM",
      "commitNameOld": "663e683adfbbbffeacdddcd846bd336c121df5c7",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 143.54,
      "commitsBetweenForRepo": 798,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     void pendingReconstructionCheck() {\n       synchronized (pendingReconstructions) {\n         Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n             pendingReconstructions.entrySet().iterator();\n         long now \u003d monotonicNow();\n         LOG.debug(\"PendingReconstructionMonitor checking Q\");\n         while (iter.hasNext()) {\n           Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n           PendingBlockInfo pendingBlock \u003d entry.getValue();\n           if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n             BlockInfo block \u003d entry.getKey();\n             synchronized (timedOutItems) {\n               timedOutItems.add(block);\n             }\n             LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n+            NameNode.getNameNodeMetrics().incTimeoutReReplications();\n             iter.remove();\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void pendingReconstructionCheck() {\n      synchronized (pendingReconstructions) {\n        Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n            pendingReconstructions.entrySet().iterator();\n        long now \u003d monotonicNow();\n        LOG.debug(\"PendingReconstructionMonitor checking Q\");\n        while (iter.hasNext()) {\n          Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n          PendingBlockInfo pendingBlock \u003d entry.getValue();\n          if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n            BlockInfo block \u003d entry.getKey();\n            synchronized (timedOutItems) {\n              timedOutItems.add(block);\n            }\n            LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n            NameNode.getNameNodeMetrics().incTimeoutReReplications();\n            iter.remove();\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/PendingReconstructionBlocks.java",
      "extendedDetails": {}
    },
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.\n",
      "commitDate": "25/04/16 10:01 PM",
      "commitName": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,20 @@\n+    void pendingReconstructionCheck() {\n+      synchronized (pendingReconstructions) {\n+        Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n+            pendingReconstructions.entrySet().iterator();\n+        long now \u003d monotonicNow();\n+        LOG.debug(\"PendingReconstructionMonitor checking Q\");\n+        while (iter.hasNext()) {\n+          Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n+          PendingBlockInfo pendingBlock \u003d entry.getValue();\n+          if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n+            BlockInfo block \u003d entry.getKey();\n+            synchronized (timedOutItems) {\n+              timedOutItems.add(block);\n+            }\n+            LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n+            iter.remove();\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void pendingReconstructionCheck() {\n      synchronized (pendingReconstructions) {\n        Iterator\u003cMap.Entry\u003cBlockInfo, PendingBlockInfo\u003e\u003e iter \u003d\n            pendingReconstructions.entrySet().iterator();\n        long now \u003d monotonicNow();\n        LOG.debug(\"PendingReconstructionMonitor checking Q\");\n        while (iter.hasNext()) {\n          Map.Entry\u003cBlockInfo, PendingBlockInfo\u003e entry \u003d iter.next();\n          PendingBlockInfo pendingBlock \u003d entry.getValue();\n          if (now \u003e pendingBlock.getTimeStamp() + timeout) {\n            BlockInfo block \u003d entry.getKey();\n            synchronized (timedOutItems) {\n              timedOutItems.add(block);\n            }\n            LOG.warn(\"PendingReconstructionMonitor timed out \" + block);\n            iter.remove();\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/PendingReconstructionBlocks.java"
    }
  }
}