{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "loginUserFromSubject",
  "functionId": "loginUserFromSubject___subject-Subject",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 705,
  "functionEndLine": 707,
  "numCommitsSeen": 104,
  "timeTaken": 5185,
  "changeHistory": [
    "59cf7588779145ad5850ad63426743dfe03d8347",
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba",
    "2e853be6577a5b98fd860e6d64f89ca6d160514a",
    "680be58aac03a9ffab6b07c8fde9602ddb9dc858",
    "cf3261570ae139c177225af165557038a9280a5d",
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
    "d22c4239a40a1c7ed49c06038138f0e3f387b4a0",
    "576b569b6c97bd5f57e52efdabdf8c2fa996a524",
    "832b3cbde1c2f77b04c93188e3a94420974090cf",
    "c9d74139bc63a9144a5aab8909be5ebf47445269"
  ],
  "changeHistoryShort": {
    "59cf7588779145ad5850ad63426743dfe03d8347": "Ymultichange(Ymodifierchange,Ybodychange)",
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba": "Ybodychange",
    "2e853be6577a5b98fd860e6d64f89ca6d160514a": "Ybodychange",
    "680be58aac03a9ffab6b07c8fde9602ddb9dc858": "Ybodychange",
    "cf3261570ae139c177225af165557038a9280a5d": "Ybodychange",
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4": "Ybodychange",
    "d22c4239a40a1c7ed49c06038138f0e3f387b4a0": "Ybodychange",
    "576b569b6c97bd5f57e52efdabdf8c2fa996a524": "Ybodychange",
    "832b3cbde1c2f77b04c93188e3a94420974090cf": "Ybodychange",
    "c9d74139bc63a9144a5aab8909be5ebf47445269": "Yintroduced"
  },
  "changeHistoryDetails": {
    "59cf7588779145ad5850ad63426743dfe03d8347": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
      "commitDate": "23/02/18 11:10 AM",
      "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
          "commitDate": "23/02/18 11:10 AM",
          "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "27/12/17 11:17 PM",
          "commitNameOld": "d31c9d8c495794a803fb20729b5ed6b374e23eb4",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 57.5,
          "commitsBetweenForRepo": 327,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,80 +1,3 @@\n-  static void loginUserFromSubject(Subject subject) throws IOException {\n-    ensureInitialized();\n-    boolean externalSubject \u003d false;\n-    try {\n-      if (subject \u003d\u003d null) {\n-        subject \u003d new Subject();\n-      } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Treat subject external: \" + treatSubjectExternal\n-              + \". When true, assuming keytab is managed extenally since \"\n-              + \" logged in from subject\");\n-        }\n-        externalSubject \u003d treatSubjectExternal;\n-      }\n-      LoginContext login \u003d\n-          newLoginContext(authenticationMethod.getLoginAppName(), \n-                          subject, new HadoopConfiguration());\n-      login.login();\n-\n-      UserGroupInformation realUser \u003d\n-          new UserGroupInformation(subject, externalSubject);\n-      realUser.setLogin(login);\n-      realUser.setAuthenticationMethod(authenticationMethod);\n-      // If the HADOOP_PROXY_USER environment variable or property\n-      // is specified, create a proxy user as the logged in user.\n-      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n-      if (proxyUser \u003d\u003d null) {\n-        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n-      }\n-      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n-\n-      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n-      if (tokenFileLocation \u003d\u003d null) {\n-        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n-      }\n-      if (tokenFileLocation !\u003d null) {\n-        for (String tokenFileName:\n-             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n-          if (tokenFileName.length() \u003e 0) {\n-            File tokenFile \u003d new File(tokenFileName);\n-            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n-              Credentials cred \u003d Credentials.readTokenStorageFile(\n-                  tokenFile, conf);\n-              loginUser.addCredentials(cred);\n-            } else {\n-              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n-            }\n-          }\n-        }\n-      }\n-\n-      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n-      if (fileLocation !\u003d null) {\n-        // Load the token storage file and put all of the tokens into the\n-        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n-        // cycle (HADOOP-9212).\n-        File source \u003d new File(fileLocation);\n-        LOG.debug(\"Reading credentials from location set in {}: {}\",\n-            HADOOP_TOKEN_FILE_LOCATION,\n-            source.getCanonicalPath());\n-        if (!source.isFile()) {\n-          throw new FileNotFoundException(\"Source file \"\n-              + source.getCanonicalPath() + \" from \"\n-              + HADOOP_TOKEN_FILE_LOCATION\n-              + \" not found\");\n-        }\n-        Credentials cred \u003d Credentials.readTokenStorageFile(\n-            source, conf);\n-        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n-        loginUser.addCredentials(cred);\n-      }\n-      loginUser.spawnAutoRenewalThreadForUserCreds();\n-    } catch (LoginException le) {\n-      LOG.debug(\"failure to login\", le);\n-      throw new KerberosAuthException(FAILURE_TO_LOGIN, le);\n-    }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"UGI loginUser:\"+loginUser);\n-    } \n+  public static void loginUserFromSubject(Subject subject) throws IOException {\n+    setLoginUser(createLoginUser(subject));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void loginUserFromSubject(Subject subject) throws IOException {\n    setLoginUser(createLoginUser(subject));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {
            "oldValue": "[public, static, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
          "commitDate": "23/02/18 11:10 AM",
          "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "27/12/17 11:17 PM",
          "commitNameOld": "d31c9d8c495794a803fb20729b5ed6b374e23eb4",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 57.5,
          "commitsBetweenForRepo": 327,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,80 +1,3 @@\n-  static void loginUserFromSubject(Subject subject) throws IOException {\n-    ensureInitialized();\n-    boolean externalSubject \u003d false;\n-    try {\n-      if (subject \u003d\u003d null) {\n-        subject \u003d new Subject();\n-      } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Treat subject external: \" + treatSubjectExternal\n-              + \". When true, assuming keytab is managed extenally since \"\n-              + \" logged in from subject\");\n-        }\n-        externalSubject \u003d treatSubjectExternal;\n-      }\n-      LoginContext login \u003d\n-          newLoginContext(authenticationMethod.getLoginAppName(), \n-                          subject, new HadoopConfiguration());\n-      login.login();\n-\n-      UserGroupInformation realUser \u003d\n-          new UserGroupInformation(subject, externalSubject);\n-      realUser.setLogin(login);\n-      realUser.setAuthenticationMethod(authenticationMethod);\n-      // If the HADOOP_PROXY_USER environment variable or property\n-      // is specified, create a proxy user as the logged in user.\n-      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n-      if (proxyUser \u003d\u003d null) {\n-        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n-      }\n-      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n-\n-      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n-      if (tokenFileLocation \u003d\u003d null) {\n-        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n-      }\n-      if (tokenFileLocation !\u003d null) {\n-        for (String tokenFileName:\n-             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n-          if (tokenFileName.length() \u003e 0) {\n-            File tokenFile \u003d new File(tokenFileName);\n-            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n-              Credentials cred \u003d Credentials.readTokenStorageFile(\n-                  tokenFile, conf);\n-              loginUser.addCredentials(cred);\n-            } else {\n-              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n-            }\n-          }\n-        }\n-      }\n-\n-      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n-      if (fileLocation !\u003d null) {\n-        // Load the token storage file and put all of the tokens into the\n-        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n-        // cycle (HADOOP-9212).\n-        File source \u003d new File(fileLocation);\n-        LOG.debug(\"Reading credentials from location set in {}: {}\",\n-            HADOOP_TOKEN_FILE_LOCATION,\n-            source.getCanonicalPath());\n-        if (!source.isFile()) {\n-          throw new FileNotFoundException(\"Source file \"\n-              + source.getCanonicalPath() + \" from \"\n-              + HADOOP_TOKEN_FILE_LOCATION\n-              + \" not found\");\n-        }\n-        Credentials cred \u003d Credentials.readTokenStorageFile(\n-            source, conf);\n-        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n-        loginUser.addCredentials(cred);\n-      }\n-      loginUser.spawnAutoRenewalThreadForUserCreds();\n-    } catch (LoginException le) {\n-      LOG.debug(\"failure to login\", le);\n-      throw new KerberosAuthException(FAILURE_TO_LOGIN, le);\n-    }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"UGI loginUser:\"+loginUser);\n-    } \n+  public static void loginUserFromSubject(Subject subject) throws IOException {\n+    setLoginUser(createLoginUser(subject));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void loginUserFromSubject(Subject subject) throws IOException {\n    setLoginUser(createLoginUser(subject));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13805. UGI.getCurrentUser() fails if user does not have a keytab associated. Contributed by Xiao Chen, Wei-Chiu Chuang, Yongjun Zhang.\n",
      "commitDate": "17/02/17 9:18 AM",
      "commitName": "4c26c241ad2b907dc02cecefa9846cbe2b0465ba",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "25/01/17 1:29 PM",
      "commitNameOld": "7fc3e68a876132563aa2321519fc6941e37b2cae",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 22.83,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,80 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n+    boolean externalSubject \u003d false;\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Treat subject external: \" + treatSubjectExternal\n+              + \". When true, assuming keytab is managed extenally since \"\n+              + \" logged in from subject\");\n+        }\n+        externalSubject \u003d treatSubjectExternal;\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n-      LOG.debug(\"Assuming keytab is managed externally since logged in from\"\n-          + \" subject.\");\n-      UserGroupInformation realUser \u003d new UserGroupInformation(subject, true);\n+\n+      UserGroupInformation realUser \u003d\n+          new UserGroupInformation(subject, externalSubject);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n       String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n       if (tokenFileLocation \u003d\u003d null) {\n         tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n       }\n       if (tokenFileLocation !\u003d null) {\n         for (String tokenFileName:\n              StringUtils.getTrimmedStrings(tokenFileLocation)) {\n           if (tokenFileName.length() \u003e 0) {\n             File tokenFile \u003d new File(tokenFileName);\n             if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n               Credentials cred \u003d Credentials.readTokenStorageFile(\n                   tokenFile, conf);\n               loginUser.addCredentials(cred);\n             } else {\n               LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n             }\n           }\n         }\n       }\n \n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         File source \u003d new File(fileLocation);\n         LOG.debug(\"Reading credentials from location set in {}: {}\",\n             HADOOP_TOKEN_FILE_LOCATION,\n             source.getCanonicalPath());\n         if (!source.isFile()) {\n           throw new FileNotFoundException(\"Source file \"\n               + source.getCanonicalPath() + \" from \"\n               + HADOOP_TOKEN_FILE_LOCATION\n               + \" not found\");\n         }\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             source, conf);\n         LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n       throw new KerberosAuthException(FAILURE_TO_LOGIN, le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    boolean externalSubject \u003d false;\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Treat subject external: \" + treatSubjectExternal\n              + \". When true, assuming keytab is managed extenally since \"\n              + \" logged in from subject\");\n        }\n        externalSubject \u003d treatSubjectExternal;\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n\n      UserGroupInformation realUser \u003d\n          new UserGroupInformation(subject, externalSubject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        File source \u003d new File(fileLocation);\n        LOG.debug(\"Reading credentials from location set in {}: {}\",\n            HADOOP_TOKEN_FILE_LOCATION,\n            source.getCanonicalPath());\n        if (!source.isFile()) {\n          throw new FileNotFoundException(\"Source file \"\n              + source.getCanonicalPath() + \" from \"\n              + HADOOP_TOKEN_FILE_LOCATION\n              + \" not found\");\n        }\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            source, conf);\n        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new KerberosAuthException(FAILURE_TO_LOGIN, le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "2e853be6577a5b98fd860e6d64f89ca6d160514a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13627. Have an explicit KerberosAuthException for UGI to throw, text from public constants. Contributed by Xiao Chen.\n",
      "commitDate": "07/10/16 1:46 PM",
      "commitName": "2e853be6577a5b98fd860e6d64f89ca6d160514a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "05/10/16 5:36 PM",
      "commitNameOld": "c5ca2169151a5eec57152775789b6f53664e102c",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n       LOG.debug(\"Assuming keytab is managed externally since logged in from\"\n           + \" subject.\");\n       UserGroupInformation realUser \u003d new UserGroupInformation(subject, true);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n       String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n       if (tokenFileLocation \u003d\u003d null) {\n         tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n       }\n       if (tokenFileLocation !\u003d null) {\n         for (String tokenFileName:\n              StringUtils.getTrimmedStrings(tokenFileLocation)) {\n           if (tokenFileName.length() \u003e 0) {\n             File tokenFile \u003d new File(tokenFileName);\n             if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n               Credentials cred \u003d Credentials.readTokenStorageFile(\n                   tokenFile, conf);\n               loginUser.addCredentials(cred);\n             } else {\n               LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n             }\n           }\n         }\n       }\n \n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         File source \u003d new File(fileLocation);\n         LOG.debug(\"Reading credentials from location set in {}: {}\",\n             HADOOP_TOKEN_FILE_LOCATION,\n             source.getCanonicalPath());\n         if (!source.isFile()) {\n           throw new FileNotFoundException(\"Source file \"\n               + source.getCanonicalPath() + \" from \"\n               + HADOOP_TOKEN_FILE_LOCATION\n               + \" not found\");\n         }\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             source, conf);\n         LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n-      throw new IOException(\"failure to login: \" + le, le);\n+      throw new KerberosAuthException(FAILURE_TO_LOGIN, le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      LOG.debug(\"Assuming keytab is managed externally since logged in from\"\n          + \" subject.\");\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject, true);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        File source \u003d new File(fileLocation);\n        LOG.debug(\"Reading credentials from location set in {}: {}\",\n            HADOOP_TOKEN_FILE_LOCATION,\n            source.getCanonicalPath());\n        if (!source.isFile()) {\n          throw new FileNotFoundException(\"Source file \"\n              + source.getCanonicalPath() + \" from \"\n              + HADOOP_TOKEN_FILE_LOCATION\n              + \" not found\");\n        }\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            source, conf);\n        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new KerberosAuthException(FAILURE_TO_LOGIN, le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "680be58aac03a9ffab6b07c8fde9602ddb9dc858": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13558. UserGroupInformation created from a Subject incorrectly tries to renew the Kerberos ticket. Contributed by Xiao Chen.\n",
      "commitDate": "06/09/16 8:54 PM",
      "commitName": "680be58aac03a9ffab6b07c8fde9602ddb9dc858",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "07/09/16 2:05 AM",
      "commitNameOld": "62a9667136ebd8a048f556b534fcff4fdaf8e2ec",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": -0.22,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "diff": "@@ -1,71 +1,72 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n-      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n+      LOG.debug(\"Assuming keytab is managed externally since logged in from\"\n+          + \" subject.\");\n+      UserGroupInformation realUser \u003d new UserGroupInformation(subject, true);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n-      realUser \u003d new UserGroupInformation(login.getSubject());\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n       String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n       if (tokenFileLocation \u003d\u003d null) {\n         tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n       }\n       if (tokenFileLocation !\u003d null) {\n         for (String tokenFileName:\n              StringUtils.getTrimmedStrings(tokenFileLocation)) {\n           if (tokenFileName.length() \u003e 0) {\n             File tokenFile \u003d new File(tokenFileName);\n             if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n               Credentials cred \u003d Credentials.readTokenStorageFile(\n                   tokenFile, conf);\n               loginUser.addCredentials(cred);\n             } else {\n               LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n             }\n           }\n         }\n       }\n \n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         File source \u003d new File(fileLocation);\n         LOG.debug(\"Reading credentials from location set in {}: {}\",\n             HADOOP_TOKEN_FILE_LOCATION,\n             source.getCanonicalPath());\n         if (!source.isFile()) {\n           throw new FileNotFoundException(\"Source file \"\n               + source.getCanonicalPath() + \" from \"\n               + HADOOP_TOKEN_FILE_LOCATION\n               + \" not found\");\n         }\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             source, conf);\n         LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n       throw new IOException(\"failure to login: \" + le, le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      LOG.debug(\"Assuming keytab is managed externally since logged in from\"\n          + \" subject.\");\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject, true);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        File source \u003d new File(fileLocation);\n        LOG.debug(\"Reading credentials from location set in {}: {}\",\n            HADOOP_TOKEN_FILE_LOCATION,\n            source.getCanonicalPath());\n        if (!source.isFile()) {\n          throw new FileNotFoundException(\"Source file \"\n              + source.getCanonicalPath() + \" from \"\n              + HADOOP_TOKEN_FILE_LOCATION\n              + \" not found\");\n        }\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            source, conf);\n        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login: \" + le, le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "cf3261570ae139c177225af165557038a9280a5d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12752. Improve diagnostics/use of envvar/sysprop credential propagation. Contributed by Steve Loughran.\n",
      "commitDate": "08/02/16 9:36 AM",
      "commitName": "cf3261570ae139c177225af165557038a9280a5d",
      "commitAuthor": "cnauroth",
      "commitDateOld": "05/02/16 3:47 PM",
      "commitNameOld": "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 2.74,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,71 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n       UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       realUser \u003d new UserGroupInformation(login.getSubject());\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n       String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n       if (tokenFileLocation \u003d\u003d null) {\n         tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n       }\n       if (tokenFileLocation !\u003d null) {\n         for (String tokenFileName:\n              StringUtils.getTrimmedStrings(tokenFileLocation)) {\n           if (tokenFileName.length() \u003e 0) {\n             File tokenFile \u003d new File(tokenFileName);\n             if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n               Credentials cred \u003d Credentials.readTokenStorageFile(\n                   tokenFile, conf);\n               loginUser.addCredentials(cred);\n             } else {\n               LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n             }\n           }\n         }\n       }\n \n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n+        File source \u003d new File(fileLocation);\n+        LOG.debug(\"Reading credentials from location set in {}: {}\",\n+            HADOOP_TOKEN_FILE_LOCATION,\n+            source.getCanonicalPath());\n+        if (!source.isFile()) {\n+          throw new FileNotFoundException(\"Source file \"\n+              + source.getCanonicalPath() + \" from \"\n+              + HADOOP_TOKEN_FILE_LOCATION\n+              + \" not found\");\n+        }\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n-            new File(fileLocation), conf);\n+            source, conf);\n+        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n       throw new IOException(\"failure to login: \" + le, le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      realUser \u003d new UserGroupInformation(login.getSubject());\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        File source \u003d new File(fileLocation);\n        LOG.debug(\"Reading credentials from location set in {}: {}\",\n            HADOOP_TOKEN_FILE_LOCATION,\n            source.getCanonicalPath());\n        if (!source.isFile()) {\n          throw new FileNotFoundException(\"Source file \"\n              + source.getCanonicalPath() + \" from \"\n              + HADOOP_TOKEN_FILE_LOCATION\n              + \" not found\");\n        }\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            source, conf);\n        LOG.debug(\"Loaded {} tokens\", cred.numberOfTokens());\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login: \" + le, le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12426. Add Entry point for Kerberos health check. Contributed by Steve Loughran.\n",
      "commitDate": "05/02/16 3:47 PM",
      "commitName": "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
      "commitAuthor": "cnauroth",
      "commitDateOld": "22/01/16 12:15 PM",
      "commitNameOld": "d22c4239a40a1c7ed49c06038138f0e3f387b4a0",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 14.15,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n       UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       realUser \u003d new UserGroupInformation(login.getSubject());\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n       String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n       if (tokenFileLocation \u003d\u003d null) {\n         tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n       }\n       if (tokenFileLocation !\u003d null) {\n         for (String tokenFileName:\n              StringUtils.getTrimmedStrings(tokenFileLocation)) {\n           if (tokenFileName.length() \u003e 0) {\n             File tokenFile \u003d new File(tokenFileName);\n             if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n               Credentials cred \u003d Credentials.readTokenStorageFile(\n                   tokenFile, conf);\n               loginUser.addCredentials(cred);\n             } else {\n               LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n             }\n           }\n         }\n       }\n \n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             new File(fileLocation), conf);\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n-      throw new IOException(\"failure to login\", le);\n+      throw new IOException(\"failure to login: \" + le, le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      realUser \u003d new UserGroupInformation(login.getSubject());\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            new File(fileLocation), conf);\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login: \" + le, le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "d22c4239a40a1c7ed49c06038138f0e3f387b4a0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9525. hadoop utilities need to support provided delegation tokens (HeeSoo Kim via aw)\n",
      "commitDate": "22/01/16 12:15 PM",
      "commitName": "d22c4239a40a1c7ed49c06038138f0e3f387b4a0",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "30/12/15 10:29 AM",
      "commitNameOld": "ab725cff66e8a047e9437e42ac49ac8685ee7a94",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 23.07,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,60 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n       UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       realUser \u003d new UserGroupInformation(login.getSubject());\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n+      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n+      if (tokenFileLocation \u003d\u003d null) {\n+        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n+      }\n+      if (tokenFileLocation !\u003d null) {\n+        for (String tokenFileName:\n+             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n+          if (tokenFileName.length() \u003e 0) {\n+            File tokenFile \u003d new File(tokenFileName);\n+            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n+              Credentials cred \u003d Credentials.readTokenStorageFile(\n+                  tokenFile, conf);\n+              loginUser.addCredentials(cred);\n+            } else {\n+              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n+            }\n+          }\n+        }\n+      }\n+\n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             new File(fileLocation), conf);\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n       throw new IOException(\"failure to login\", le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      realUser \u003d new UserGroupInformation(login.getSubject());\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        for (String tokenFileName:\n             StringUtils.getTrimmedStrings(tokenFileLocation)) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            new File(fileLocation), conf);\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login\", le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "576b569b6c97bd5f57e52efdabdf8c2fa996a524": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9525. hadoop utilities need to support provided delegation tokens (HeeSoo Kim via aw)\"\n\nThis reverts commit 832b3cbde1c2f77b04c93188e3a94420974090cf.\n",
      "commitDate": "11/12/15 10:59 AM",
      "commitName": "576b569b6c97bd5f57e52efdabdf8c2fa996a524",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "08/12/15 12:56 PM",
      "commitNameOld": "832b3cbde1c2f77b04c93188e3a94420974090cf",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,40 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n       UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       realUser \u003d new UserGroupInformation(login.getSubject());\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n-      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n-      if (tokenFileLocation \u003d\u003d null) {\n-        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n-      }\n-      if (tokenFileLocation !\u003d null) {\n-        String[] tokenFileNames \u003d tokenFileLocation.split(\"\\\\s*,\\\\s*+\");\n-        for (String tokenFileName: tokenFileNames) {\n-          if (tokenFileName.length() \u003e 0) {\n-            File tokenFile \u003d new File(tokenFileName);\n-            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n-              Credentials cred \u003d Credentials.readTokenStorageFile(\n-                  tokenFile, conf);\n-              loginUser.addCredentials(cred);\n-            } else {\n-              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n-            }\n-          }\n-        }\n-      }\n-\n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             new File(fileLocation), conf);\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n       throw new IOException(\"failure to login\", le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      realUser \u003d new UserGroupInformation(login.getSubject());\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            new File(fileLocation), conf);\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login\", le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "832b3cbde1c2f77b04c93188e3a94420974090cf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9525. hadoop utilities need to support provided delegation tokens (HeeSoo Kim via aw)\n",
      "commitDate": "08/12/15 12:56 PM",
      "commitName": "832b3cbde1c2f77b04c93188e3a94420974090cf",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "18/10/15 4:23 AM",
      "commitNameOld": "e286512a7143427f2975ec92cdc4fad0a093a456",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 51.4,
      "commitsBetweenForRepo": 384,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,60 @@\n   static void loginUserFromSubject(Subject subject) throws IOException {\n     ensureInitialized();\n     try {\n       if (subject \u003d\u003d null) {\n         subject \u003d new Subject();\n       }\n       LoginContext login \u003d\n           newLoginContext(authenticationMethod.getLoginAppName(), \n                           subject, new HadoopConfiguration());\n       login.login();\n       UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n       realUser.setLogin(login);\n       realUser.setAuthenticationMethod(authenticationMethod);\n       realUser \u003d new UserGroupInformation(login.getSubject());\n       // If the HADOOP_PROXY_USER environment variable or property\n       // is specified, create a proxy user as the logged in user.\n       String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n       if (proxyUser \u003d\u003d null) {\n         proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n       }\n       loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n+      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n+      if (tokenFileLocation \u003d\u003d null) {\n+        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n+      }\n+      if (tokenFileLocation !\u003d null) {\n+        String[] tokenFileNames \u003d tokenFileLocation.split(\"\\\\s*,\\\\s*+\");\n+        for (String tokenFileName: tokenFileNames) {\n+          if (tokenFileName.length() \u003e 0) {\n+            File tokenFile \u003d new File(tokenFileName);\n+            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n+              Credentials cred \u003d Credentials.readTokenStorageFile(\n+                  tokenFile, conf);\n+              loginUser.addCredentials(cred);\n+            } else {\n+              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n+            }\n+          }\n+        }\n+      }\n+\n       String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n       if (fileLocation !\u003d null) {\n         // Load the token storage file and put all of the tokens into the\n         // user. Don\u0027t use the FileSystem API for reading since it has a lock\n         // cycle (HADOOP-9212).\n         Credentials cred \u003d Credentials.readTokenStorageFile(\n             new File(fileLocation), conf);\n         loginUser.addCredentials(cred);\n       }\n       loginUser.spawnAutoRenewalThreadForUserCreds();\n     } catch (LoginException le) {\n       LOG.debug(\"failure to login\", le);\n       throw new IOException(\"failure to login\", le);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"UGI loginUser:\"+loginUser);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      realUser \u003d new UserGroupInformation(login.getSubject());\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String tokenFileLocation \u003d System.getProperty(HADOOP_TOKEN_FILES);\n      if (tokenFileLocation \u003d\u003d null) {\n        tokenFileLocation \u003d conf.get(HADOOP_TOKEN_FILES);\n      }\n      if (tokenFileLocation !\u003d null) {\n        String[] tokenFileNames \u003d tokenFileLocation.split(\"\\\\s*,\\\\s*+\");\n        for (String tokenFileName: tokenFileNames) {\n          if (tokenFileName.length() \u003e 0) {\n            File tokenFile \u003d new File(tokenFileName);\n            if (tokenFile.exists() \u0026\u0026 tokenFile.isFile()) {\n              Credentials cred \u003d Credentials.readTokenStorageFile(\n                  tokenFile, conf);\n              loginUser.addCredentials(cred);\n            } else {\n              LOG.info(\"tokenFile(\"+tokenFileName+\") does not exist\");\n            }\n          }\n        }\n      }\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            new File(fileLocation), conf);\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login\", le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "c9d74139bc63a9144a5aab8909be5ebf47445269": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10164. Allow UGI to login with a known Subject (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552104 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 1:20 PM",
      "commitName": "c9d74139bc63a9144a5aab8909be5ebf47445269",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,40 @@\n+  static void loginUserFromSubject(Subject subject) throws IOException {\n+    ensureInitialized();\n+    try {\n+      if (subject \u003d\u003d null) {\n+        subject \u003d new Subject();\n+      }\n+      LoginContext login \u003d\n+          newLoginContext(authenticationMethod.getLoginAppName(), \n+                          subject, new HadoopConfiguration());\n+      login.login();\n+      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n+      realUser.setLogin(login);\n+      realUser.setAuthenticationMethod(authenticationMethod);\n+      realUser \u003d new UserGroupInformation(login.getSubject());\n+      // If the HADOOP_PROXY_USER environment variable or property\n+      // is specified, create a proxy user as the logged in user.\n+      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n+      if (proxyUser \u003d\u003d null) {\n+        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n+      }\n+      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n+\n+      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n+      if (fileLocation !\u003d null) {\n+        // Load the token storage file and put all of the tokens into the\n+        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n+        // cycle (HADOOP-9212).\n+        Credentials cred \u003d Credentials.readTokenStorageFile(\n+            new File(fileLocation), conf);\n+        loginUser.addCredentials(cred);\n+      }\n+      loginUser.spawnAutoRenewalThreadForUserCreds();\n+    } catch (LoginException le) {\n+      LOG.debug(\"failure to login\", le);\n+      throw new IOException(\"failure to login\", le);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"UGI loginUser:\"+loginUser);\n+    } \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void loginUserFromSubject(Subject subject) throws IOException {\n    ensureInitialized();\n    try {\n      if (subject \u003d\u003d null) {\n        subject \u003d new Subject();\n      }\n      LoginContext login \u003d\n          newLoginContext(authenticationMethod.getLoginAppName(), \n                          subject, new HadoopConfiguration());\n      login.login();\n      UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n      realUser.setLogin(login);\n      realUser.setAuthenticationMethod(authenticationMethod);\n      realUser \u003d new UserGroupInformation(login.getSubject());\n      // If the HADOOP_PROXY_USER environment variable or property\n      // is specified, create a proxy user as the logged in user.\n      String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n      if (proxyUser \u003d\u003d null) {\n        proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n      }\n      loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n      String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n      if (fileLocation !\u003d null) {\n        // Load the token storage file and put all of the tokens into the\n        // user. Don\u0027t use the FileSystem API for reading since it has a lock\n        // cycle (HADOOP-9212).\n        Credentials cred \u003d Credentials.readTokenStorageFile(\n            new File(fileLocation), conf);\n        loginUser.addCredentials(cred);\n      }\n      loginUser.spawnAutoRenewalThreadForUserCreds();\n    } catch (LoginException le) {\n      LOG.debug(\"failure to login\", le);\n      throw new IOException(\"failure to login\", le);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"UGI loginUser:\"+loginUser);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}