{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNFileReadTask.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileReadTask.java",
  "functionStartLine": 80,
  "functionEndLine": 123,
  "numCommitsSeen": 2,
  "timeTaken": 822,
  "changeHistory": [
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": "Ybodychange",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
      "commitDate": "20/04/20 3:14 AM",
      "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "27/09/19 1:53 AM",
      "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 206.06,
      "commitsBetweenForRepo": 773,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public void run() {\n     int retries \u003d 0;\n     RetryPolicy.RetryAction retryAction;\n-    LOG.info(Thread.currentThread().getName() + \"read ...\");\n     try {\n       this.readBuffer.lock();\n       do {\n         try {\n           InputStream inputStream \u003d this.store.retrieveBlock(this.key,\n               this.readBuffer.getStart(), this.readBuffer.getEnd());\n           IOUtils.readFully(inputStream, this.readBuffer.getBuffer(), 0,\n               readBuffer.getBuffer().length);\n           inputStream.close();\n           this.readBuffer.setStatus(CosNInputStream.ReadBuffer.SUCCESS);\n           break;\n         } catch (IOException e) {\n           this.readBuffer.setStatus(CosNInputStream.ReadBuffer.ERROR);\n           LOG.warn(\n               \"Exception occurs when retrieve the block range start: \"\n                   + String.valueOf(this.readBuffer.getStart()) + \" end: \"\n                   + this.readBuffer.getEnd());\n           try {\n             retryAction \u003d this.retryPolicy.shouldRetry(\n                 e, retries++, 0, true);\n             if (retryAction.action\n                 \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n               Thread.sleep(retryAction.delayMillis);\n             }\n           } catch (Exception e1) {\n             String errMsg \u003d String.format(\"Exception occurs when retry[%s] \"\n                     + \"to retrieve the block range start: %s, end:%s\",\n                 this.retryPolicy.toString(),\n                 String.valueOf(this.readBuffer.getStart()),\n                 String.valueOf(this.readBuffer.getEnd()));\n             LOG.error(errMsg, e1);\n             break;\n           }\n         }\n       } while (retryAction.action \u003d\u003d\n           RetryPolicy.RetryAction.RetryDecision.RETRY);\n       this.readBuffer.signalAll();\n     } finally {\n       this.readBuffer.unLock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    int retries \u003d 0;\n    RetryPolicy.RetryAction retryAction;\n    try {\n      this.readBuffer.lock();\n      do {\n        try {\n          InputStream inputStream \u003d this.store.retrieveBlock(this.key,\n              this.readBuffer.getStart(), this.readBuffer.getEnd());\n          IOUtils.readFully(inputStream, this.readBuffer.getBuffer(), 0,\n              readBuffer.getBuffer().length);\n          inputStream.close();\n          this.readBuffer.setStatus(CosNInputStream.ReadBuffer.SUCCESS);\n          break;\n        } catch (IOException e) {\n          this.readBuffer.setStatus(CosNInputStream.ReadBuffer.ERROR);\n          LOG.warn(\n              \"Exception occurs when retrieve the block range start: \"\n                  + String.valueOf(this.readBuffer.getStart()) + \" end: \"\n                  + this.readBuffer.getEnd());\n          try {\n            retryAction \u003d this.retryPolicy.shouldRetry(\n                e, retries++, 0, true);\n            if (retryAction.action\n                \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n              Thread.sleep(retryAction.delayMillis);\n            }\n          } catch (Exception e1) {\n            String errMsg \u003d String.format(\"Exception occurs when retry[%s] \"\n                    + \"to retrieve the block range start: %s, end:%s\",\n                this.retryPolicy.toString(),\n                String.valueOf(this.readBuffer.getStart()),\n                String.valueOf(this.readBuffer.getEnd()));\n            LOG.error(errMsg, e1);\n            break;\n          }\n        }\n      } while (retryAction.action \u003d\u003d\n          RetryPolicy.RetryAction.RetryDecision.RETRY);\n      this.readBuffer.signalAll();\n    } finally {\n      this.readBuffer.unLock();\n    }\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileReadTask.java",
      "extendedDetails": {}
    },
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,45 @@\n+  public void run() {\n+    int retries \u003d 0;\n+    RetryPolicy.RetryAction retryAction;\n+    LOG.info(Thread.currentThread().getName() + \"read ...\");\n+    try {\n+      this.readBuffer.lock();\n+      do {\n+        try {\n+          InputStream inputStream \u003d this.store.retrieveBlock(this.key,\n+              this.readBuffer.getStart(), this.readBuffer.getEnd());\n+          IOUtils.readFully(inputStream, this.readBuffer.getBuffer(), 0,\n+              readBuffer.getBuffer().length);\n+          inputStream.close();\n+          this.readBuffer.setStatus(CosNInputStream.ReadBuffer.SUCCESS);\n+          break;\n+        } catch (IOException e) {\n+          this.readBuffer.setStatus(CosNInputStream.ReadBuffer.ERROR);\n+          LOG.warn(\n+              \"Exception occurs when retrieve the block range start: \"\n+                  + String.valueOf(this.readBuffer.getStart()) + \" end: \"\n+                  + this.readBuffer.getEnd());\n+          try {\n+            retryAction \u003d this.retryPolicy.shouldRetry(\n+                e, retries++, 0, true);\n+            if (retryAction.action\n+                \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n+              Thread.sleep(retryAction.delayMillis);\n+            }\n+          } catch (Exception e1) {\n+            String errMsg \u003d String.format(\"Exception occurs when retry[%s] \"\n+                    + \"to retrieve the block range start: %s, end:%s\",\n+                this.retryPolicy.toString(),\n+                String.valueOf(this.readBuffer.getStart()),\n+                String.valueOf(this.readBuffer.getEnd()));\n+            LOG.error(errMsg, e1);\n+            break;\n+          }\n+        }\n+      } while (retryAction.action \u003d\u003d\n+          RetryPolicy.RetryAction.RetryDecision.RETRY);\n+      this.readBuffer.signalAll();\n+    } finally {\n+      this.readBuffer.unLock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    int retries \u003d 0;\n    RetryPolicy.RetryAction retryAction;\n    LOG.info(Thread.currentThread().getName() + \"read ...\");\n    try {\n      this.readBuffer.lock();\n      do {\n        try {\n          InputStream inputStream \u003d this.store.retrieveBlock(this.key,\n              this.readBuffer.getStart(), this.readBuffer.getEnd());\n          IOUtils.readFully(inputStream, this.readBuffer.getBuffer(), 0,\n              readBuffer.getBuffer().length);\n          inputStream.close();\n          this.readBuffer.setStatus(CosNInputStream.ReadBuffer.SUCCESS);\n          break;\n        } catch (IOException e) {\n          this.readBuffer.setStatus(CosNInputStream.ReadBuffer.ERROR);\n          LOG.warn(\n              \"Exception occurs when retrieve the block range start: \"\n                  + String.valueOf(this.readBuffer.getStart()) + \" end: \"\n                  + this.readBuffer.getEnd());\n          try {\n            retryAction \u003d this.retryPolicy.shouldRetry(\n                e, retries++, 0, true);\n            if (retryAction.action\n                \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n              Thread.sleep(retryAction.delayMillis);\n            }\n          } catch (Exception e1) {\n            String errMsg \u003d String.format(\"Exception occurs when retry[%s] \"\n                    + \"to retrieve the block range start: %s, end:%s\",\n                this.retryPolicy.toString(),\n                String.valueOf(this.readBuffer.getStart()),\n                String.valueOf(this.readBuffer.getEnd()));\n            LOG.error(errMsg, e1);\n            break;\n          }\n        }\n      } while (retryAction.action \u003d\u003d\n          RetryPolicy.RetryAction.RetryDecision.RETRY);\n      this.readBuffer.signalAll();\n    } finally {\n      this.readBuffer.unLock();\n    }\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileReadTask.java"
    }
  }
}