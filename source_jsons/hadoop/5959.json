{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirEncryptionZoneOp.java",
  "functionName": "getCurrentKeyVersion",
  "functionId": "getCurrentKeyVersion___dir-FSDirectory(modifiers-final)__pc-FSPermissionChecker(modifiers-final)__zone-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
  "functionStartLine": 698,
  "functionEndLine": 719,
  "numCommitsSeen": 61,
  "timeTaken": 6065,
  "changeHistory": [
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "b3a4d7d2a01051e166c06ee78e8c6e8df1341948",
    "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "b3a4d7d2a01051e166c06ee78e8c6e8df1341948": "Ybodychange",
    "0ba8ff4b77db11fb68111f20fb077cffddd24f17": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "28/01/18 10:19 PM",
          "commitNameOld": "b63dcd583f0b98e785831004f41bd7c7de8b3c18",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 24.55,
          "commitsBetweenForRepo": 166,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n-      throws IOException {\n+  static String getCurrentKeyVersion(final FSDirectory dir,\n+      final FSPermissionChecker pc, final String zone) throws IOException {\n     assert dir.getProvider() !\u003d null;\n     assert !dir.hasReadLock();\n-    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n+    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir,\n+        pc, zone);\n     if (keyName \u003d\u003d null) {\n       throw new IOException(zone + \" is not an encryption zone.\");\n     }\n     // drain the local cache of the key provider.\n     // Do not invalidateCache on the server, since that\u0027s the responsibility\n     // when rolling the key version.\n     dir.getProvider().drain(keyName);\n     final EncryptedKeyVersion edek;\n     try {\n       edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n     } catch (GeneralSecurityException gse) {\n       throw new IOException(gse);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir,\n      final FSPermissionChecker pc, final String zone) throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir,\n        pc, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    dir.getProvider().drain(keyName);\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[dir-FSDirectory(modifiers-final), zone-String(modifiers-final)]",
            "newValue": "[dir-FSDirectory(modifiers-final), pc-FSPermissionChecker(modifiers-final), zone-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "28/01/18 10:19 PM",
          "commitNameOld": "b63dcd583f0b98e785831004f41bd7c7de8b3c18",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 24.55,
          "commitsBetweenForRepo": 166,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n-      throws IOException {\n+  static String getCurrentKeyVersion(final FSDirectory dir,\n+      final FSPermissionChecker pc, final String zone) throws IOException {\n     assert dir.getProvider() !\u003d null;\n     assert !dir.hasReadLock();\n-    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n+    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir,\n+        pc, zone);\n     if (keyName \u003d\u003d null) {\n       throw new IOException(zone + \" is not an encryption zone.\");\n     }\n     // drain the local cache of the key provider.\n     // Do not invalidateCache on the server, since that\u0027s the responsibility\n     // when rolling the key version.\n     dir.getProvider().drain(keyName);\n     final EncryptedKeyVersion edek;\n     try {\n       edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n     } catch (GeneralSecurityException gse) {\n       throw new IOException(gse);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir,\n      final FSPermissionChecker pc, final String zone) throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir,\n        pc, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    dir.getProvider().drain(keyName);\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "b3a4d7d2a01051e166c06ee78e8c6e8df1341948": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12400. Provide a way for NN to drain the local key cache before re-encryption.\n",
      "commitDate": "07/09/17 8:51 PM",
      "commitName": "b3a4d7d2a01051e166c06ee78e8c6e8df1341948",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "05/09/17 10:08 AM",
      "commitNameOld": "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 2.45,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n       throws IOException {\n     assert dir.getProvider() !\u003d null;\n     assert !dir.hasReadLock();\n     final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n     if (keyName \u003d\u003d null) {\n       throw new IOException(zone + \" is not an encryption zone.\");\n     }\n     // drain the local cache of the key provider.\n     // Do not invalidateCache on the server, since that\u0027s the responsibility\n     // when rolling the key version.\n-    if (dir.getProvider() instanceof CryptoExtension) {\n-      ((CryptoExtension) dir.getProvider()).drain(keyName);\n-    }\n+    dir.getProvider().drain(keyName);\n     final EncryptedKeyVersion edek;\n     try {\n       edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n     } catch (GeneralSecurityException gse) {\n       throw new IOException(gse);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n      throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    dir.getProvider().drain(keyName);\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "0ba8ff4b77db11fb68111f20fb077cffddd24f17": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-12359. Re-encryption should operate with minimum KMS ACL requirements.\n",
      "commitDate": "05/09/17 10:08 AM",
      "commitName": "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-12359. Re-encryption should operate with minimum KMS ACL requirements.\n",
          "commitDate": "05/09/17 10:08 AM",
          "commitName": "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "23/08/17 5:06 PM",
          "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 12.71,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  static KeyVersion getLatestKeyVersion(final FSDirectory dir,\n-      final String zone, final FSPermissionChecker pc) throws IOException {\n-    final EncryptionZone ez;\n+  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n+      throws IOException {\n     assert dir.getProvider() !\u003d null;\n-    dir.readLock();\n-    try {\n-      final INodesInPath iip \u003d dir.resolvePath(pc, zone, DirOp.READ);\n-      if (iip.getLastINode() \u003d\u003d null) {\n-        throw new FileNotFoundException(zone + \" does not exist.\");\n-      }\n-      dir.ezManager.checkEncryptionZoneRoot(iip.getLastINode(), iip.getPath());\n-      ez \u003d FSDirEncryptionZoneOp.getEZForPath(dir, iip);\n-    } finally {\n-      dir.readUnlock();\n+    assert !dir.hasReadLock();\n+    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n+    if (keyName \u003d\u003d null) {\n+      throw new IOException(zone + \" is not an encryption zone.\");\n     }\n-    // Contact KMS out of locks.\n-    KeyVersion currKv \u003d dir.getProvider().getCurrentKey(ez.getKeyName());\n-    Preconditions.checkNotNull(currKv,\n-        \"No current key versions for key name \" + ez.getKeyName());\n-    return currKv;\n+    // drain the local cache of the key provider.\n+    // Do not invalidateCache on the server, since that\u0027s the responsibility\n+    // when rolling the key version.\n+    if (dir.getProvider() instanceof CryptoExtension) {\n+      ((CryptoExtension) dir.getProvider()).drain(keyName);\n+    }\n+    final EncryptedKeyVersion edek;\n+    try {\n+      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n+    } catch (GeneralSecurityException gse) {\n+      throw new IOException(gse);\n+    }\n+    Preconditions.checkNotNull(edek);\n+    return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n      throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    if (dir.getProvider() instanceof CryptoExtension) {\n      ((CryptoExtension) dir.getProvider()).drain(keyName);\n    }\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "getLatestKeyVersion",
            "newValue": "getCurrentKeyVersion"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12359. Re-encryption should operate with minimum KMS ACL requirements.\n",
          "commitDate": "05/09/17 10:08 AM",
          "commitName": "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "23/08/17 5:06 PM",
          "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 12.71,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  static KeyVersion getLatestKeyVersion(final FSDirectory dir,\n-      final String zone, final FSPermissionChecker pc) throws IOException {\n-    final EncryptionZone ez;\n+  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n+      throws IOException {\n     assert dir.getProvider() !\u003d null;\n-    dir.readLock();\n-    try {\n-      final INodesInPath iip \u003d dir.resolvePath(pc, zone, DirOp.READ);\n-      if (iip.getLastINode() \u003d\u003d null) {\n-        throw new FileNotFoundException(zone + \" does not exist.\");\n-      }\n-      dir.ezManager.checkEncryptionZoneRoot(iip.getLastINode(), iip.getPath());\n-      ez \u003d FSDirEncryptionZoneOp.getEZForPath(dir, iip);\n-    } finally {\n-      dir.readUnlock();\n+    assert !dir.hasReadLock();\n+    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n+    if (keyName \u003d\u003d null) {\n+      throw new IOException(zone + \" is not an encryption zone.\");\n     }\n-    // Contact KMS out of locks.\n-    KeyVersion currKv \u003d dir.getProvider().getCurrentKey(ez.getKeyName());\n-    Preconditions.checkNotNull(currKv,\n-        \"No current key versions for key name \" + ez.getKeyName());\n-    return currKv;\n+    // drain the local cache of the key provider.\n+    // Do not invalidateCache on the server, since that\u0027s the responsibility\n+    // when rolling the key version.\n+    if (dir.getProvider() instanceof CryptoExtension) {\n+      ((CryptoExtension) dir.getProvider()).drain(keyName);\n+    }\n+    final EncryptedKeyVersion edek;\n+    try {\n+      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n+    } catch (GeneralSecurityException gse) {\n+      throw new IOException(gse);\n+    }\n+    Preconditions.checkNotNull(edek);\n+    return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n      throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    if (dir.getProvider() instanceof CryptoExtension) {\n      ((CryptoExtension) dir.getProvider()).drain(keyName);\n    }\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[dir-FSDirectory(modifiers-final), zone-String(modifiers-final), pc-FSPermissionChecker(modifiers-final)]",
            "newValue": "[dir-FSDirectory(modifiers-final), zone-String(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-12359. Re-encryption should operate with minimum KMS ACL requirements.\n",
          "commitDate": "05/09/17 10:08 AM",
          "commitName": "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "23/08/17 5:06 PM",
          "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 12.71,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  static KeyVersion getLatestKeyVersion(final FSDirectory dir,\n-      final String zone, final FSPermissionChecker pc) throws IOException {\n-    final EncryptionZone ez;\n+  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n+      throws IOException {\n     assert dir.getProvider() !\u003d null;\n-    dir.readLock();\n-    try {\n-      final INodesInPath iip \u003d dir.resolvePath(pc, zone, DirOp.READ);\n-      if (iip.getLastINode() \u003d\u003d null) {\n-        throw new FileNotFoundException(zone + \" does not exist.\");\n-      }\n-      dir.ezManager.checkEncryptionZoneRoot(iip.getLastINode(), iip.getPath());\n-      ez \u003d FSDirEncryptionZoneOp.getEZForPath(dir, iip);\n-    } finally {\n-      dir.readUnlock();\n+    assert !dir.hasReadLock();\n+    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n+    if (keyName \u003d\u003d null) {\n+      throw new IOException(zone + \" is not an encryption zone.\");\n     }\n-    // Contact KMS out of locks.\n-    KeyVersion currKv \u003d dir.getProvider().getCurrentKey(ez.getKeyName());\n-    Preconditions.checkNotNull(currKv,\n-        \"No current key versions for key name \" + ez.getKeyName());\n-    return currKv;\n+    // drain the local cache of the key provider.\n+    // Do not invalidateCache on the server, since that\u0027s the responsibility\n+    // when rolling the key version.\n+    if (dir.getProvider() instanceof CryptoExtension) {\n+      ((CryptoExtension) dir.getProvider()).drain(keyName);\n+    }\n+    final EncryptedKeyVersion edek;\n+    try {\n+      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n+    } catch (GeneralSecurityException gse) {\n+      throw new IOException(gse);\n+    }\n+    Preconditions.checkNotNull(edek);\n+    return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n      throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    if (dir.getProvider() instanceof CryptoExtension) {\n      ((CryptoExtension) dir.getProvider()).drain(keyName);\n    }\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "KeyVersion",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12359. Re-encryption should operate with minimum KMS ACL requirements.\n",
          "commitDate": "05/09/17 10:08 AM",
          "commitName": "0ba8ff4b77db11fb68111f20fb077cffddd24f17",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "23/08/17 5:06 PM",
          "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 12.71,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  static KeyVersion getLatestKeyVersion(final FSDirectory dir,\n-      final String zone, final FSPermissionChecker pc) throws IOException {\n-    final EncryptionZone ez;\n+  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n+      throws IOException {\n     assert dir.getProvider() !\u003d null;\n-    dir.readLock();\n-    try {\n-      final INodesInPath iip \u003d dir.resolvePath(pc, zone, DirOp.READ);\n-      if (iip.getLastINode() \u003d\u003d null) {\n-        throw new FileNotFoundException(zone + \" does not exist.\");\n-      }\n-      dir.ezManager.checkEncryptionZoneRoot(iip.getLastINode(), iip.getPath());\n-      ez \u003d FSDirEncryptionZoneOp.getEZForPath(dir, iip);\n-    } finally {\n-      dir.readUnlock();\n+    assert !dir.hasReadLock();\n+    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n+    if (keyName \u003d\u003d null) {\n+      throw new IOException(zone + \" is not an encryption zone.\");\n     }\n-    // Contact KMS out of locks.\n-    KeyVersion currKv \u003d dir.getProvider().getCurrentKey(ez.getKeyName());\n-    Preconditions.checkNotNull(currKv,\n-        \"No current key versions for key name \" + ez.getKeyName());\n-    return currKv;\n+    // drain the local cache of the key provider.\n+    // Do not invalidateCache on the server, since that\u0027s the responsibility\n+    // when rolling the key version.\n+    if (dir.getProvider() instanceof CryptoExtension) {\n+      ((CryptoExtension) dir.getProvider()).drain(keyName);\n+    }\n+    final EncryptedKeyVersion edek;\n+    try {\n+      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n+    } catch (GeneralSecurityException gse) {\n+      throw new IOException(gse);\n+    }\n+    Preconditions.checkNotNull(edek);\n+    return edek.getEncryptionKeyVersionName();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static String getCurrentKeyVersion(final FSDirectory dir, final String zone)\n      throws IOException {\n    assert dir.getProvider() !\u003d null;\n    assert !dir.hasReadLock();\n    final String keyName \u003d FSDirEncryptionZoneOp.getKeyNameForZone(dir, zone);\n    if (keyName \u003d\u003d null) {\n      throw new IOException(zone + \" is not an encryption zone.\");\n    }\n    // drain the local cache of the key provider.\n    // Do not invalidateCache on the server, since that\u0027s the responsibility\n    // when rolling the key version.\n    if (dir.getProvider() instanceof CryptoExtension) {\n      ((CryptoExtension) dir.getProvider()).drain(keyName);\n    }\n    final EncryptedKeyVersion edek;\n    try {\n      edek \u003d dir.getProvider().generateEncryptedKey(keyName);\n    } catch (GeneralSecurityException gse) {\n      throw new IOException(gse);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek.getEncryptionKeyVersionName();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,21 @@\n+  static KeyVersion getLatestKeyVersion(final FSDirectory dir,\n+      final String zone, final FSPermissionChecker pc) throws IOException {\n+    final EncryptionZone ez;\n+    assert dir.getProvider() !\u003d null;\n+    dir.readLock();\n+    try {\n+      final INodesInPath iip \u003d dir.resolvePath(pc, zone, DirOp.READ);\n+      if (iip.getLastINode() \u003d\u003d null) {\n+        throw new FileNotFoundException(zone + \" does not exist.\");\n+      }\n+      dir.ezManager.checkEncryptionZoneRoot(iip.getLastINode(), iip.getPath());\n+      ez \u003d FSDirEncryptionZoneOp.getEZForPath(dir, iip);\n+    } finally {\n+      dir.readUnlock();\n+    }\n+    // Contact KMS out of locks.\n+    KeyVersion currKv \u003d dir.getProvider().getCurrentKey(ez.getKeyName());\n+    Preconditions.checkNotNull(currKv,\n+        \"No current key versions for key name \" + ez.getKeyName());\n+    return currKv;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static KeyVersion getLatestKeyVersion(final FSDirectory dir,\n      final String zone, final FSPermissionChecker pc) throws IOException {\n    final EncryptionZone ez;\n    assert dir.getProvider() !\u003d null;\n    dir.readLock();\n    try {\n      final INodesInPath iip \u003d dir.resolvePath(pc, zone, DirOp.READ);\n      if (iip.getLastINode() \u003d\u003d null) {\n        throw new FileNotFoundException(zone + \" does not exist.\");\n      }\n      dir.ezManager.checkEncryptionZoneRoot(iip.getLastINode(), iip.getPath());\n      ez \u003d FSDirEncryptionZoneOp.getEZForPath(dir, iip);\n    } finally {\n      dir.readUnlock();\n    }\n    // Contact KMS out of locks.\n    KeyVersion currKv \u003d dir.getProvider().getCurrentKey(ez.getKeyName());\n    Preconditions.checkNotNull(currKv,\n        \"No current key versions for key name \" + ez.getKeyName());\n    return currKv;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java"
    }
  }
}