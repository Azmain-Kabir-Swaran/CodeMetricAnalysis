{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeAttributesManagerImpl.java",
  "functionName": "validateForAttributeTypeMismatch",
  "functionId": "validateForAttributeTypeMismatch___isRemoveOperation-boolean__attribute-NodeAttribute__newAttributes-Map__NodeAttributeKey,RMNodeAttribute__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
  "functionStartLine": 339,
  "functionEndLine": 370,
  "numCommitsSeen": 24,
  "timeTaken": 2413,
  "changeHistory": [
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
    "2f7712be09d5b68978547f95b1be2352cdd46266"
  ],
  "changeHistoryShort": {
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": "Ymultichange(Yparameterchange,Ybodychange)",
    "2f7712be09d5b68978547f95b1be2352cdd46266": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthor": "bibinchundatt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n   private boolean validateForAttributeTypeMismatch(boolean isRemoveOperation,\n       NodeAttribute attribute,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributes)\n+      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributes)\n       throws IOException {\n-    if (isRemoveOperation \u0026\u0026 !clusterAttributes.containsKey(attribute)) {\n+    NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n+    if (isRemoveOperation\n+        \u0026\u0026 !clusterAttributes.containsKey(attributeKey)) {\n       // no need to validate anything as its remove operation and attribute\n       // doesn\u0027t exist.\n       return false; // no need to add as its remove operation\n     } else {\n       // already existing or attribute is mapped to another Node in the\n       // current command, then check whether the attribute type is matching\n       NodeAttribute existingAttribute \u003d\n-          (clusterAttributes.containsKey((attribute))\n-              ? clusterAttributes.get(attribute).getAttribute()\n-              : (newAttributes.containsKey(attribute)\n-                  ? newAttributes.get(attribute).getAttribute()\n+          (clusterAttributes.containsKey(attributeKey)\n+              ? clusterAttributes.get(attributeKey).getAttribute()\n+              : (newAttributes.containsKey(attributeKey)\n+                  ? newAttributes.get(attributeKey).getAttribute()\n                   : null));\n       if (existingAttribute \u003d\u003d null) {\n         return true;\n       } else if (existingAttribute.getAttributeType() !\u003d attribute\n           .getAttributeType()) {\n         throw new IOException(\"Attribute name - type is not matching with \"\n             + \"already configured mapping for the attribute \"\n-            + attribute.getAttributeName() + \" existing : \"\n+            + attributeKey + \" existing : \"\n             + existingAttribute.getAttributeType() + \", new :\"\n             + attribute.getAttributeType());\n       }\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean validateForAttributeTypeMismatch(boolean isRemoveOperation,\n      NodeAttribute attribute,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributes)\n      throws IOException {\n    NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n    if (isRemoveOperation\n        \u0026\u0026 !clusterAttributes.containsKey(attributeKey)) {\n      // no need to validate anything as its remove operation and attribute\n      // doesn\u0027t exist.\n      return false; // no need to add as its remove operation\n    } else {\n      // already existing or attribute is mapped to another Node in the\n      // current command, then check whether the attribute type is matching\n      NodeAttribute existingAttribute \u003d\n          (clusterAttributes.containsKey(attributeKey)\n              ? clusterAttributes.get(attributeKey).getAttribute()\n              : (newAttributes.containsKey(attributeKey)\n                  ? newAttributes.get(attributeKey).getAttribute()\n                  : null));\n      if (existingAttribute \u003d\u003d null) {\n        return true;\n      } else if (existingAttribute.getAttributeType() !\u003d attribute\n          .getAttributeType()) {\n        throw new IOException(\"Attribute name - type is not matching with \"\n            + \"already configured mapping for the attribute \"\n            + attributeKey + \" existing : \"\n            + existingAttribute.getAttributeType() + \", new :\"\n            + attribute.getAttributeType());\n      }\n      return false;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[isRemoveOperation-boolean, attribute-NodeAttribute, newAttributes-Map\u003cNodeAttribute,RMNodeAttribute\u003e]",
            "newValue": "[isRemoveOperation-boolean, attribute-NodeAttribute, newAttributes-Map\u003cNodeAttributeKey,RMNodeAttribute\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n   private boolean validateForAttributeTypeMismatch(boolean isRemoveOperation,\n       NodeAttribute attribute,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributes)\n+      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributes)\n       throws IOException {\n-    if (isRemoveOperation \u0026\u0026 !clusterAttributes.containsKey(attribute)) {\n+    NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n+    if (isRemoveOperation\n+        \u0026\u0026 !clusterAttributes.containsKey(attributeKey)) {\n       // no need to validate anything as its remove operation and attribute\n       // doesn\u0027t exist.\n       return false; // no need to add as its remove operation\n     } else {\n       // already existing or attribute is mapped to another Node in the\n       // current command, then check whether the attribute type is matching\n       NodeAttribute existingAttribute \u003d\n-          (clusterAttributes.containsKey((attribute))\n-              ? clusterAttributes.get(attribute).getAttribute()\n-              : (newAttributes.containsKey(attribute)\n-                  ? newAttributes.get(attribute).getAttribute()\n+          (clusterAttributes.containsKey(attributeKey)\n+              ? clusterAttributes.get(attributeKey).getAttribute()\n+              : (newAttributes.containsKey(attributeKey)\n+                  ? newAttributes.get(attributeKey).getAttribute()\n                   : null));\n       if (existingAttribute \u003d\u003d null) {\n         return true;\n       } else if (existingAttribute.getAttributeType() !\u003d attribute\n           .getAttributeType()) {\n         throw new IOException(\"Attribute name - type is not matching with \"\n             + \"already configured mapping for the attribute \"\n-            + attribute.getAttributeName() + \" existing : \"\n+            + attributeKey + \" existing : \"\n             + existingAttribute.getAttributeType() + \", new :\"\n             + attribute.getAttributeType());\n       }\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean validateForAttributeTypeMismatch(boolean isRemoveOperation,\n      NodeAttribute attribute,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributes)\n      throws IOException {\n    NodeAttributeKey attributeKey \u003d attribute.getAttributeKey();\n    if (isRemoveOperation\n        \u0026\u0026 !clusterAttributes.containsKey(attributeKey)) {\n      // no need to validate anything as its remove operation and attribute\n      // doesn\u0027t exist.\n      return false; // no need to add as its remove operation\n    } else {\n      // already existing or attribute is mapped to another Node in the\n      // current command, then check whether the attribute type is matching\n      NodeAttribute existingAttribute \u003d\n          (clusterAttributes.containsKey(attributeKey)\n              ? clusterAttributes.get(attributeKey).getAttribute()\n              : (newAttributes.containsKey(attributeKey)\n                  ? newAttributes.get(attributeKey).getAttribute()\n                  : null));\n      if (existingAttribute \u003d\u003d null) {\n        return true;\n      } else if (existingAttribute.getAttributeType() !\u003d attribute\n          .getAttributeType()) {\n        throw new IOException(\"Attribute name - type is not matching with \"\n            + \"already configured mapping for the attribute \"\n            + attributeKey + \" existing : \"\n            + existingAttribute.getAttributeType() + \", new :\"\n            + attribute.getAttributeType());\n      }\n      return false;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "2f7712be09d5b68978547f95b1be2352cdd46266": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6858. Attribute Manager to store and provide node attributes in RM. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,30 @@\n+  private boolean validateForAttributeTypeMismatch(boolean isRemoveOperation,\n+      NodeAttribute attribute,\n+      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributes)\n+      throws IOException {\n+    if (isRemoveOperation \u0026\u0026 !clusterAttributes.containsKey(attribute)) {\n+      // no need to validate anything as its remove operation and attribute\n+      // doesn\u0027t exist.\n+      return false; // no need to add as its remove operation\n+    } else {\n+      // already existing or attribute is mapped to another Node in the\n+      // current command, then check whether the attribute type is matching\n+      NodeAttribute existingAttribute \u003d\n+          (clusterAttributes.containsKey((attribute))\n+              ? clusterAttributes.get(attribute).getAttribute()\n+              : (newAttributes.containsKey(attribute)\n+                  ? newAttributes.get(attribute).getAttribute()\n+                  : null));\n+      if (existingAttribute \u003d\u003d null) {\n+        return true;\n+      } else if (existingAttribute.getAttributeType() !\u003d attribute\n+          .getAttributeType()) {\n+        throw new IOException(\"Attribute name - type is not matching with \"\n+            + \"already configured mapping for the attribute \"\n+            + attribute.getAttributeName() + \" existing : \"\n+            + existingAttribute.getAttributeType() + \", new :\"\n+            + attribute.getAttributeType());\n+      }\n+      return false;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean validateForAttributeTypeMismatch(boolean isRemoveOperation,\n      NodeAttribute attribute,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributes)\n      throws IOException {\n    if (isRemoveOperation \u0026\u0026 !clusterAttributes.containsKey(attribute)) {\n      // no need to validate anything as its remove operation and attribute\n      // doesn\u0027t exist.\n      return false; // no need to add as its remove operation\n    } else {\n      // already existing or attribute is mapped to another Node in the\n      // current command, then check whether the attribute type is matching\n      NodeAttribute existingAttribute \u003d\n          (clusterAttributes.containsKey((attribute))\n              ? clusterAttributes.get(attribute).getAttribute()\n              : (newAttributes.containsKey(attribute)\n                  ? newAttributes.get(attribute).getAttribute()\n                  : null));\n      if (existingAttribute \u003d\u003d null) {\n        return true;\n      } else if (existingAttribute.getAttributeType() !\u003d attribute\n          .getAttributeType()) {\n        throw new IOException(\"Attribute name - type is not matching with \"\n            + \"already configured mapping for the attribute \"\n            + attribute.getAttributeName() + \" existing : \"\n            + existingAttribute.getAttributeType() + \", new :\"\n            + attribute.getAttributeType());\n      }\n      return false;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java"
    }
  }
}