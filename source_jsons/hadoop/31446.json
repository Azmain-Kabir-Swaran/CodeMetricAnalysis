{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HBaseTimelineStorageUtils.java",
  "functionName": "getTimelineServiceHBaseConf",
  "functionId": "getTimelineServiceHBaseConf___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
  "functionStartLine": 55,
  "functionEndLine": 84,
  "numCommitsSeen": 14,
  "timeTaken": 5276,
  "changeHistory": [
    "d45669cd3c65fe83b0821d4e5bc72358f52700a3",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "f3e33aeb80dca88d452ebe70028f95f0efede4dd",
    "ec8f47e7fadbe62c0c39390d0a46cefd50e98492",
    "44999aabc27636706851f1c71f3ce500ee6eb027",
    "2556c012e385947cfdcd23f597b174dc78efde46",
    "643a20a358e2e7e7f6d39d6890409ef7cb73d030"
  ],
  "changeHistoryShort": {
    "d45669cd3c65fe83b0821d4e5bc72358f52700a3": "Ymultichange(Yexceptionschange,Ybodychange)",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymovefromfile",
    "f3e33aeb80dca88d452ebe70028f95f0efede4dd": "Ymultichange(Yexceptionschange,Ybodychange)",
    "ec8f47e7fadbe62c0c39390d0a46cefd50e98492": "Ymultichange(Yexceptionschange,Ybodychange)",
    "44999aabc27636706851f1c71f3ce500ee6eb027": "Ybodychange",
    "2556c012e385947cfdcd23f597b174dc78efde46": "Ybodychange",
    "643a20a358e2e7e7f6d39d6890409ef7cb73d030": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d45669cd3c65fe83b0821d4e5bc72358f52700a3": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7537.  Add ability to load hbase config from distributed file system.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "04/06/19 4:26 PM",
      "commitName": "d45669cd3c65fe83b0821d4e5bc72358f52700a3",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7537.  Add ability to load hbase config from distributed file system.\n            Contributed by Prabhu Joseph\n",
          "commitDate": "04/06/19 4:26 PM",
          "commitName": "d45669cd3c65fe83b0821d4e5bc72358f52700a3",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/02/18 7:00 AM",
          "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 472.35,
          "commitsBetweenForRepo": 4109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n-      throws MalformedURLException {\n+      throws IOException {\n     if (conf \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n \n     Configuration hbaseConf;\n-    String timelineServiceHBaseConfFileURL \u003d\n+    String timelineServiceHBaseConfFilePath \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n-    if (timelineServiceHBaseConfFileURL !\u003d null\n-        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n+\n+    if (timelineServiceHBaseConfFilePath !\u003d null\n+          \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n       LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFileURL);\n+          timelineServiceHBaseConfFilePath);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n-      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n-      plainHBaseConf.addResource(hbaseSiteXML);\n-      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n+      try (FileSystem fs \u003d\n+          FileSystem.newInstance(hbaseConfigPath.toUri(), conf);\n+          FSDataInputStream in \u003d fs.open(hbaseConfigPath)) {\n+        plainHBaseConf.addResource(in);\n+        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      }\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws IOException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFilePath \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n\n    if (timelineServiceHBaseConfFilePath !\u003d null\n          \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFilePath);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n      try (FileSystem fs \u003d\n          FileSystem.newInstance(hbaseConfigPath.toUri(), conf);\n          FSDataInputStream in \u003d fs.open(hbaseConfigPath)) {\n        plainHBaseConf.addResource(in);\n        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n      }\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[MalformedURLException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7537.  Add ability to load hbase config from distributed file system.\n            Contributed by Prabhu Joseph\n",
          "commitDate": "04/06/19 4:26 PM",
          "commitName": "d45669cd3c65fe83b0821d4e5bc72358f52700a3",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/02/18 7:00 AM",
          "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 472.35,
          "commitsBetweenForRepo": 4109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n-      throws MalformedURLException {\n+      throws IOException {\n     if (conf \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n \n     Configuration hbaseConf;\n-    String timelineServiceHBaseConfFileURL \u003d\n+    String timelineServiceHBaseConfFilePath \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n-    if (timelineServiceHBaseConfFileURL !\u003d null\n-        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n+\n+    if (timelineServiceHBaseConfFilePath !\u003d null\n+          \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n       LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFileURL);\n+          timelineServiceHBaseConfFilePath);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n-      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n-      plainHBaseConf.addResource(hbaseSiteXML);\n-      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n+      try (FileSystem fs \u003d\n+          FileSystem.newInstance(hbaseConfigPath.toUri(), conf);\n+          FSDataInputStream in \u003d fs.open(hbaseConfigPath)) {\n+        plainHBaseConf.addResource(in);\n+        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      }\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws IOException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFilePath \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n\n    if (timelineServiceHBaseConfFilePath !\u003d null\n          \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFilePath);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n      try (FileSystem fs \u003d\n          FileSystem.newInstance(hbaseConfigPath.toUri(), conf);\n          FSDataInputStream in \u003d fs.open(hbaseConfigPath)) {\n        plainHBaseConf.addResource(in);\n        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n      }\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws MalformedURLException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFileURL \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFileURL !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFileURL);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n      plainHBaseConf.addResource(hbaseSiteXML);\n      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
        "oldMethodName": "getTimelineServiceHBaseConf",
        "newMethodName": "getTimelineServiceHBaseConf"
      }
    },
    "f3e33aeb80dca88d452ebe70028f95f0efede4dd": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Revert \"YARN-7537 [Atsv2] load hbase configuration from filesystem rather than URL. Contributed by Rohith Sharma\"\n\nThis reverts commit ec8f47e7fadbe62c0c39390d0a46cefd50e98492.\n",
      "commitDate": "24/01/18 1:34 AM",
      "commitName": "f3e33aeb80dca88d452ebe70028f95f0efede4dd",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Revert \"YARN-7537 [Atsv2] load hbase configuration from filesystem rather than URL. Contributed by Rohith Sharma\"\n\nThis reverts commit ec8f47e7fadbe62c0c39390d0a46cefd50e98492.\n",
          "commitDate": "24/01/18 1:34 AM",
          "commitName": "f3e33aeb80dca88d452ebe70028f95f0efede4dd",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "19/01/18 3:34 PM",
          "commitNameOld": "ec8f47e7fadbe62c0c39390d0a46cefd50e98492",
          "commitAuthorOld": "Vrushali C",
          "daysBetweenCommits": 4.42,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,25 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n-      throws IOException {\n+      throws MalformedURLException {\n     if (conf \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n \n     Configuration hbaseConf;\n-    String timelineServiceHBaseConfFilePath \u003d\n+    String timelineServiceHBaseConfFileURL \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n-    if (timelineServiceHBaseConfFilePath !\u003d null\n-        \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n+    if (timelineServiceHBaseConfFileURL !\u003d null\n+        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n       LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFilePath);\n+          timelineServiceHBaseConfFileURL);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n-      FileSystem fs \u003d null;\n-      FSDataInputStream in \u003d null;\n-      try {\n-        Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n-        fs \u003d FileSystem.newInstance(conf);\n-        in \u003d fs.open(hbaseConfigPath);\n-        plainHBaseConf.addResource(in);\n-        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n-      } catch (IOException e) {\n-        throw e;\n-      } finally {\n-        if (in !\u003d null) {\n-          in.close();\n-        }\n-        if (fs !\u003d null) {\n-          fs.close();\n-        }\n-      }\n+      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n+      plainHBaseConf.addResource(hbaseSiteXML);\n+      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws MalformedURLException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFileURL \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFileURL !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFileURL);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n      plainHBaseConf.addResource(hbaseSiteXML);\n      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[MalformedURLException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-7537 [Atsv2] load hbase configuration from filesystem rather than URL. Contributed by Rohith Sharma\"\n\nThis reverts commit ec8f47e7fadbe62c0c39390d0a46cefd50e98492.\n",
          "commitDate": "24/01/18 1:34 AM",
          "commitName": "f3e33aeb80dca88d452ebe70028f95f0efede4dd",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "19/01/18 3:34 PM",
          "commitNameOld": "ec8f47e7fadbe62c0c39390d0a46cefd50e98492",
          "commitAuthorOld": "Vrushali C",
          "daysBetweenCommits": 4.42,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,25 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n-      throws IOException {\n+      throws MalformedURLException {\n     if (conf \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n \n     Configuration hbaseConf;\n-    String timelineServiceHBaseConfFilePath \u003d\n+    String timelineServiceHBaseConfFileURL \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n-    if (timelineServiceHBaseConfFilePath !\u003d null\n-        \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n+    if (timelineServiceHBaseConfFileURL !\u003d null\n+        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n       LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFilePath);\n+          timelineServiceHBaseConfFileURL);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n-      FileSystem fs \u003d null;\n-      FSDataInputStream in \u003d null;\n-      try {\n-        Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n-        fs \u003d FileSystem.newInstance(conf);\n-        in \u003d fs.open(hbaseConfigPath);\n-        plainHBaseConf.addResource(in);\n-        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n-      } catch (IOException e) {\n-        throw e;\n-      } finally {\n-        if (in !\u003d null) {\n-          in.close();\n-        }\n-        if (fs !\u003d null) {\n-          fs.close();\n-        }\n-      }\n+      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n+      plainHBaseConf.addResource(hbaseSiteXML);\n+      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws MalformedURLException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFileURL \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFileURL !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFileURL);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n      plainHBaseConf.addResource(hbaseSiteXML);\n      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "ec8f47e7fadbe62c0c39390d0a46cefd50e98492": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7537 [Atsv2] load hbase configuration from filesystem rather than URL. Contributed by Rohith Sharma\n",
      "commitDate": "19/01/18 3:34 PM",
      "commitName": "ec8f47e7fadbe62c0c39390d0a46cefd50e98492",
      "commitAuthor": "Vrushali C",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7537 [Atsv2] load hbase configuration from filesystem rather than URL. Contributed by Rohith Sharma\n",
          "commitDate": "19/01/18 3:34 PM",
          "commitName": "ec8f47e7fadbe62c0c39390d0a46cefd50e98492",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "03/10/17 3:01 PM",
          "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 108.06,
          "commitsBetweenForRepo": 745,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,40 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n-      throws MalformedURLException {\n+      throws IOException {\n     if (conf \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n \n     Configuration hbaseConf;\n-    String timelineServiceHBaseConfFileURL \u003d\n+    String timelineServiceHBaseConfFilePath \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n-    if (timelineServiceHBaseConfFileURL !\u003d null\n-        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n+    if (timelineServiceHBaseConfFilePath !\u003d null\n+        \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n       LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFileURL);\n+          timelineServiceHBaseConfFilePath);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n-      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n-      plainHBaseConf.addResource(hbaseSiteXML);\n-      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      FileSystem fs \u003d null;\n+      FSDataInputStream in \u003d null;\n+      try {\n+        Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n+        fs \u003d FileSystem.newInstance(conf);\n+        in \u003d fs.open(hbaseConfigPath);\n+        plainHBaseConf.addResource(in);\n+        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      } catch (IOException e) {\n+        throw e;\n+      } finally {\n+        if (in !\u003d null) {\n+          in.close();\n+        }\n+        if (fs !\u003d null) {\n+          fs.close();\n+        }\n+      }\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws IOException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFilePath \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFilePath !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFilePath);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      FileSystem fs \u003d null;\n      FSDataInputStream in \u003d null;\n      try {\n        Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n        fs \u003d FileSystem.newInstance(conf);\n        in \u003d fs.open(hbaseConfigPath);\n        plainHBaseConf.addResource(in);\n        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n      } catch (IOException e) {\n        throw e;\n      } finally {\n        if (in !\u003d null) {\n          in.close();\n        }\n        if (fs !\u003d null) {\n          fs.close();\n        }\n      }\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[MalformedURLException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7537 [Atsv2] load hbase configuration from filesystem rather than URL. Contributed by Rohith Sharma\n",
          "commitDate": "19/01/18 3:34 PM",
          "commitName": "ec8f47e7fadbe62c0c39390d0a46cefd50e98492",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "03/10/17 3:01 PM",
          "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 108.06,
          "commitsBetweenForRepo": 745,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,40 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n-      throws MalformedURLException {\n+      throws IOException {\n     if (conf \u003d\u003d null) {\n       throw new NullPointerException();\n     }\n \n     Configuration hbaseConf;\n-    String timelineServiceHBaseConfFileURL \u003d\n+    String timelineServiceHBaseConfFilePath \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n-    if (timelineServiceHBaseConfFileURL !\u003d null\n-        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n+    if (timelineServiceHBaseConfFilePath !\u003d null\n+        \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n       LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFileURL);\n+          timelineServiceHBaseConfFilePath);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n-      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n-      plainHBaseConf.addResource(hbaseSiteXML);\n-      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      FileSystem fs \u003d null;\n+      FSDataInputStream in \u003d null;\n+      try {\n+        Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n+        fs \u003d FileSystem.newInstance(conf);\n+        in \u003d fs.open(hbaseConfigPath);\n+        plainHBaseConf.addResource(in);\n+        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+      } catch (IOException e) {\n+        throw e;\n+      } finally {\n+        if (in !\u003d null) {\n+          in.close();\n+        }\n+        if (fs !\u003d null) {\n+          fs.close();\n+        }\n+      }\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws IOException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFilePath \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFilePath !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFilePath.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFilePath);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      FileSystem fs \u003d null;\n      FSDataInputStream in \u003d null;\n      try {\n        Path hbaseConfigPath \u003d new Path(timelineServiceHBaseConfFilePath);\n        fs \u003d FileSystem.newInstance(conf);\n        in \u003d fs.open(hbaseConfigPath);\n        plainHBaseConf.addResource(in);\n        HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n      } catch (IOException e) {\n        throw e;\n      } finally {\n        if (in !\u003d null) {\n          in.close();\n        }\n        if (fs !\u003d null) {\n          fs.close();\n        }\n      }\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "44999aabc27636706851f1c71f3ce500ee6eb027": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6318. timeline service schema creator fails if executed from a remote machine (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "44999aabc27636706851f1c71f3ce500ee6eb027",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "2556c012e385947cfdcd23f597b174dc78efde46",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n       throws MalformedURLException {\n-    Configuration hbaseConf;\n-\n     if (conf \u003d\u003d null) {\n-      return HBaseConfiguration.create();\n+      throw new NullPointerException();\n     }\n \n+    Configuration hbaseConf;\n     String timelineServiceHBaseConfFileURL \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n     if (timelineServiceHBaseConfFileURL !\u003d null\n         \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n+      LOG.info(\"Using hbase configuration at \" +\n+          timelineServiceHBaseConfFileURL);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n       URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n       plainHBaseConf.addResource(hbaseSiteXML);\n       HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws MalformedURLException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFileURL \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFileURL !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFileURL);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n      plainHBaseConf.addResource(hbaseSiteXML);\n      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
      "extendedDetails": {}
    },
    "2556c012e385947cfdcd23f597b174dc78efde46": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5925. Extract hbase-backend-exclusive utility methods from TimelineStorageUtil. Contributed by Haibo Chen.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "2556c012e385947cfdcd23f597b174dc78efde46",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n       throws MalformedURLException {\n+    Configuration hbaseConf;\n+\n     if (conf \u003d\u003d null) {\n-      throw new NullPointerException();\n+      return HBaseConfiguration.create();\n     }\n \n-    Configuration hbaseConf;\n     String timelineServiceHBaseConfFileURL \u003d\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n     if (timelineServiceHBaseConfFileURL !\u003d null\n         \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n-      LOG.info(\"Using hbase configuration at \" +\n-          timelineServiceHBaseConfFileURL);\n       // create a clone so that we don\u0027t mess with out input one\n       hbaseConf \u003d new Configuration(conf);\n       Configuration plainHBaseConf \u003d new Configuration(false);\n       URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n       plainHBaseConf.addResource(hbaseSiteXML);\n       HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n     } else {\n       // default to what is on the classpath\n       hbaseConf \u003d HBaseConfiguration.create(conf);\n     }\n     return hbaseConf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws MalformedURLException {\n    Configuration hbaseConf;\n\n    if (conf \u003d\u003d null) {\n      return HBaseConfiguration.create();\n    }\n\n    String timelineServiceHBaseConfFileURL \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFileURL !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n      plainHBaseConf.addResource(hbaseSiteXML);\n      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java",
      "extendedDetails": {}
    },
    "643a20a358e2e7e7f6d39d6890409ef7cb73d030": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5265. Make HBase configuration for the timeline service configurable. Contributed by Joep Rottinghuis.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "643a20a358e2e7e7f6d39d6890409ef7cb73d030",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,25 @@\n+  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n+      throws MalformedURLException {\n+    if (conf \u003d\u003d null) {\n+      throw new NullPointerException();\n+    }\n+\n+    Configuration hbaseConf;\n+    String timelineServiceHBaseConfFileURL \u003d\n+        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n+    if (timelineServiceHBaseConfFileURL !\u003d null\n+        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n+      LOG.info(\"Using hbase configuration at \" +\n+          timelineServiceHBaseConfFileURL);\n+      // create a clone so that we don\u0027t mess with out input one\n+      hbaseConf \u003d new Configuration(conf);\n+      Configuration plainHBaseConf \u003d new Configuration(false);\n+      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n+      plainHBaseConf.addResource(hbaseSiteXML);\n+      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n+    } else {\n+      // default to what is on the classpath\n+      hbaseConf \u003d HBaseConfiguration.create(conf);\n+    }\n+    return hbaseConf;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration getTimelineServiceHBaseConf(Configuration conf)\n      throws MalformedURLException {\n    if (conf \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n\n    Configuration hbaseConf;\n    String timelineServiceHBaseConfFileURL \u003d\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE);\n    if (timelineServiceHBaseConfFileURL !\u003d null\n        \u0026\u0026 timelineServiceHBaseConfFileURL.length() \u003e 0) {\n      LOG.info(\"Using hbase configuration at \" +\n          timelineServiceHBaseConfFileURL);\n      // create a clone so that we don\u0027t mess with out input one\n      hbaseConf \u003d new Configuration(conf);\n      Configuration plainHBaseConf \u003d new Configuration(false);\n      URL hbaseSiteXML \u003d new URL(timelineServiceHBaseConfFileURL);\n      plainHBaseConf.addResource(hbaseSiteXML);\n      HBaseConfiguration.merge(hbaseConf, plainHBaseConf);\n    } else {\n      // default to what is on the classpath\n      hbaseConf \u003d HBaseConfiguration.create(conf);\n    }\n    return hbaseConf;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/HBaseTimelineStorageUtils.java"
    }
  }
}