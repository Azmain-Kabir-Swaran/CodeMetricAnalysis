{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnmanagedAMLauncher.java",
  "functionName": "monitorCurrentAppAttempt",
  "functionId": "monitorCurrentAppAttempt___appId-ApplicationId__attemptState-YarnApplicationAttemptState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
  "functionStartLine": 385,
  "functionEndLine": 420,
  "numCommitsSeen": 23,
  "timeTaken": 1276,
  "changeHistory": [
    "ef9634bf796807501e3c1937a8ea8a70205cb990"
  ],
  "changeHistoryShort": {
    "ef9634bf796807501e3c1937a8ea8a70205cb990": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef9634bf796807501e3c1937a8ea8a70205cb990": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1577. Made UnmanagedAMLauncher do launchAM after the attempt reaches the LAUNCHED state. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 9:35 PM",
      "commitName": "ef9634bf796807501e3c1937a8ea8a70205cb990",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,36 @@\n+  private ApplicationAttemptReport monitorCurrentAppAttempt(\n+      ApplicationId appId, YarnApplicationAttemptState attemptState)\n+      throws YarnException, IOException {\n+    long startTime \u003d System.currentTimeMillis();\n+    ApplicationAttemptId attemptId \u003d null;\n+    while (true) {\n+      if (attemptId \u003d\u003d null) {\n+        attemptId \u003d\n+            rmClient.getApplicationReport(appId)\n+              .getCurrentApplicationAttemptId();\n+      }\n+      ApplicationAttemptReport attemptReport \u003d null;\n+      if (attemptId !\u003d null) {\n+        attemptReport \u003d rmClient.getApplicationAttemptReport(attemptId);\n+        if (attemptState.equals(attemptReport.getYarnApplicationAttemptState())) {\n+          return attemptReport;\n+        }\n+      }\n+      LOG.info(\"Current attempt state of \" + appId + \" is \" + (attemptReport \u003d\u003d null\n+            ? \" N/A \" : attemptReport.getYarnApplicationAttemptState())\n+                + \", waiting for current attempt to reach \" + attemptState);\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Interrupted while waiting for current attempt of \" + appId\n+            + \" to reach \" + attemptState);\n+      }\n+      if (System.currentTimeMillis() - startTime \u003e AM_STATE_WAIT_TIMEOUT_MS) {\n+        String errmsg \u003d\n+            \"Timeout for waiting current attempt of \" + appId + \" to reach \"\n+                + attemptState;\n+        LOG.error(errmsg);\n+        throw new RuntimeException(errmsg);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationAttemptReport monitorCurrentAppAttempt(\n      ApplicationId appId, YarnApplicationAttemptState attemptState)\n      throws YarnException, IOException {\n    long startTime \u003d System.currentTimeMillis();\n    ApplicationAttemptId attemptId \u003d null;\n    while (true) {\n      if (attemptId \u003d\u003d null) {\n        attemptId \u003d\n            rmClient.getApplicationReport(appId)\n              .getCurrentApplicationAttemptId();\n      }\n      ApplicationAttemptReport attemptReport \u003d null;\n      if (attemptId !\u003d null) {\n        attemptReport \u003d rmClient.getApplicationAttemptReport(attemptId);\n        if (attemptState.equals(attemptReport.getYarnApplicationAttemptState())) {\n          return attemptReport;\n        }\n      }\n      LOG.info(\"Current attempt state of \" + appId + \" is \" + (attemptReport \u003d\u003d null\n            ? \" N/A \" : attemptReport.getYarnApplicationAttemptState())\n                + \", waiting for current attempt to reach \" + attemptState);\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.warn(\"Interrupted while waiting for current attempt of \" + appId\n            + \" to reach \" + attemptState);\n      }\n      if (System.currentTimeMillis() - startTime \u003e AM_STATE_WAIT_TIMEOUT_MS) {\n        String errmsg \u003d\n            \"Timeout for waiting current attempt of \" + appId + \" to reach \"\n                + attemptState;\n        LOG.error(errmsg);\n        throw new RuntimeException(errmsg);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java"
    }
  }
}