{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "rename",
  "functionId": "rename___src-Path(modifiers-final)__dst-Path(modifiers-final)__options-Rename(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 1541,
  "functionEndLine": 1597,
  "numCommitsSeen": 188,
  "timeTaken": 4943,
  "changeHistory": [
    "33fe54a25f04673048f0f0db4abaa42535f043ec",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7578282edce0eba3f24c96355c944c02156ece79",
    "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f"
  ],
  "changeHistoryShort": {
    "33fe54a25f04673048f0f0db4abaa42535f043ec": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7578282edce0eba3f24c96355c944c02156ece79": "Ybodychange",
    "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "33fe54a25f04673048f0f0db4abaa42535f043ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9416.  Add new symlink resolution methods in FileSystem and FileSystemLinkResolver.  (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/13 4:29 PM",
      "commitName": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "13/04/13 2:41 PM",
      "commitNameOld": "0f78c50ea7f25515f43a7570fe67a6604e8772ad",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 81.07,
      "commitsBetweenForRepo": 514,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   protected void rename(final Path src, final Path dst,\n       final Rename... options) throws IOException {\n     // Default implementation\n-    final FileStatus srcStatus \u003d getFileStatus(src);\n+    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     boolean overwrite \u003d false;\n     if (null !\u003d options) {\n       for (Rename option : options) {\n         if (option \u003d\u003d Rename.OVERWRITE) {\n           overwrite \u003d true;\n         }\n       }\n     }\n \n     FileStatus dstStatus;\n     try {\n-      dstStatus \u003d getFileStatus(dst);\n+      dstStatus \u003d getFileLinkStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n       if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n       if (dstStatus.isDirectory()) {\n         FileStatus[] list \u003d listStatus(dst);\n         if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n       if (!parentStatus.isDirectory()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n             + \" is a file.\");\n       }\n     }\n     if (!rename(src, dst)) {\n       throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void rename(final Path src, final Path dst,\n      final Rename... options) throws IOException {\n    // Default implementation\n    final FileStatus srcStatus \u003d getFileLinkStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    boolean overwrite \u003d false;\n    if (null !\u003d options) {\n      for (Rename option : options) {\n        if (option \u003d\u003d Rename.OVERWRITE) {\n          overwrite \u003d true;\n        }\n      }\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileLinkStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDirectory()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n            + \" is a file.\");\n      }\n    }\n    if (!rename(src, dst)) {\n      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void rename(final Path src, final Path dst,\n      final Rename... options) throws IOException {\n    // Default implementation\n    final FileStatus srcStatus \u003d getFileStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    boolean overwrite \u003d false;\n    if (null !\u003d options) {\n      for (Rename option : options) {\n        if (option \u003d\u003d Rename.OVERWRITE) {\n          overwrite \u003d true;\n        }\n      }\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDirectory()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n            + \" is a file.\");\n      }\n    }\n    if (!rename(src, dst)) {\n      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void rename(final Path src, final Path dst,\n      final Rename... options) throws IOException {\n    // Default implementation\n    final FileStatus srcStatus \u003d getFileStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    boolean overwrite \u003d false;\n    if (null !\u003d options) {\n      for (Rename option : options) {\n        if (option \u003d\u003d Rename.OVERWRITE) {\n          overwrite \u003d true;\n        }\n      }\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDirectory()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n            + \" is a file.\");\n      }\n    }\n    if (!rename(src, dst)) {\n      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void rename(final Path src, final Path dst,\n      final Rename... options) throws IOException {\n    // Default implementation\n    final FileStatus srcStatus \u003d getFileStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    boolean overwrite \u003d false;\n    if (null !\u003d options) {\n      for (Rename option : options) {\n        if (option \u003d\u003d Rename.OVERWRITE) {\n          overwrite \u003d true;\n        }\n      }\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDirectory()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n            + \" is a file.\");\n      }\n    }\n    if (!rename(src, dst)) {\n      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "7578282edce0eba3f24c96355c944c02156ece79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6585.  Add FileStatus#isDirectory and isFile.  Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@949658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/10 8:14 PM",
      "commitName": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/05/10 9:21 AM",
      "commitNameOld": "759494f3a1a5e2883267e61c5179e6e5446631b3",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 12.45,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   protected void rename(final Path src, final Path dst,\n       final Rename... options) throws IOException {\n     // Default implementation\n     final FileStatus srcStatus \u003d getFileStatus(src);\n     if (srcStatus \u003d\u003d null) {\n       throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n     }\n \n     boolean overwrite \u003d false;\n     if (null !\u003d options) {\n       for (Rename option : options) {\n         if (option \u003d\u003d Rename.OVERWRITE) {\n           overwrite \u003d true;\n         }\n       }\n     }\n \n     FileStatus dstStatus;\n     try {\n       dstStatus \u003d getFileStatus(dst);\n     } catch (IOException e) {\n       dstStatus \u003d null;\n     }\n     if (dstStatus !\u003d null) {\n-      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n+      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n         throw new IOException(\"Source \" + src + \" Destination \" + dst\n             + \" both should be either file or directory\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(\"rename destination \" + dst\n             + \" already exists.\");\n       }\n       // Delete the destination that is a file or an empty directory\n-      if (dstStatus.isDir()) {\n+      if (dstStatus.isDirectory()) {\n         FileStatus[] list \u003d listStatus(dst);\n         if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n           throw new IOException(\n               \"rename cannot overwrite non empty destination directory \" + dst);\n         }\n       }\n       delete(dst, false);\n     } else {\n       final Path parent \u003d dst.getParent();\n       final FileStatus parentStatus \u003d getFileStatus(parent);\n       if (parentStatus \u003d\u003d null) {\n         throw new FileNotFoundException(\"rename destination parent \" + parent\n             + \" not found.\");\n       }\n-      if (!parentStatus.isDir()) {\n+      if (!parentStatus.isDirectory()) {\n         throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n             + \" is a file.\");\n       }\n     }\n     if (!rename(src, dst)) {\n       throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void rename(final Path src, final Path dst,\n      final Rename... options) throws IOException {\n    // Default implementation\n    final FileStatus srcStatus \u003d getFileStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    boolean overwrite \u003d false;\n    if (null !\u003d options) {\n      for (Rename option : options) {\n        if (option \u003d\u003d Rename.OVERWRITE) {\n          overwrite \u003d true;\n        }\n      }\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDirectory() !\u003d dstStatus.isDirectory()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDirectory()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDirectory()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n            + \" is a file.\");\n      }\n    }\n    if (!rename(src, dst)) {\n      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6240. Add new FileContext rename operation that posix compliant that allows overwriting existing destination. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/09 2:52 PM",
      "commitName": "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,57 @@\n+  protected void rename(final Path src, final Path dst,\n+      final Rename... options) throws IOException {\n+    // Default implementation\n+    final FileStatus srcStatus \u003d getFileStatus(src);\n+    if (srcStatus \u003d\u003d null) {\n+      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n+    }\n+\n+    boolean overwrite \u003d false;\n+    if (null !\u003d options) {\n+      for (Rename option : options) {\n+        if (option \u003d\u003d Rename.OVERWRITE) {\n+          overwrite \u003d true;\n+        }\n+      }\n+    }\n+\n+    FileStatus dstStatus;\n+    try {\n+      dstStatus \u003d getFileStatus(dst);\n+    } catch (IOException e) {\n+      dstStatus \u003d null;\n+    }\n+    if (dstStatus !\u003d null) {\n+      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n+        throw new IOException(\"Source \" + src + \" Destination \" + dst\n+            + \" both should be either file or directory\");\n+      }\n+      if (!overwrite) {\n+        throw new FileAlreadyExistsException(\"rename destination \" + dst\n+            + \" already exists.\");\n+      }\n+      // Delete the destination that is a file or an empty directory\n+      if (dstStatus.isDir()) {\n+        FileStatus[] list \u003d listStatus(dst);\n+        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n+          throw new IOException(\n+              \"rename cannot overwrite non empty destination directory \" + dst);\n+        }\n+      }\n+      delete(dst, false);\n+    } else {\n+      final Path parent \u003d dst.getParent();\n+      final FileStatus parentStatus \u003d getFileStatus(parent);\n+      if (parentStatus \u003d\u003d null) {\n+        throw new FileNotFoundException(\"rename destination parent \" + parent\n+            + \" not found.\");\n+      }\n+      if (!parentStatus.isDir()) {\n+        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n+            + \" is a file.\");\n+      }\n+    }\n+    if (!rename(src, dst)) {\n+      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void rename(final Path src, final Path dst,\n      final Rename... options) throws IOException {\n    // Default implementation\n    final FileStatus srcStatus \u003d getFileStatus(src);\n    if (srcStatus \u003d\u003d null) {\n      throw new FileNotFoundException(\"rename source \" + src + \" not found.\");\n    }\n\n    boolean overwrite \u003d false;\n    if (null !\u003d options) {\n      for (Rename option : options) {\n        if (option \u003d\u003d Rename.OVERWRITE) {\n          overwrite \u003d true;\n        }\n      }\n    }\n\n    FileStatus dstStatus;\n    try {\n      dstStatus \u003d getFileStatus(dst);\n    } catch (IOException e) {\n      dstStatus \u003d null;\n    }\n    if (dstStatus !\u003d null) {\n      if (srcStatus.isDir() !\u003d dstStatus.isDir()) {\n        throw new IOException(\"Source \" + src + \" Destination \" + dst\n            + \" both should be either file or directory\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(\"rename destination \" + dst\n            + \" already exists.\");\n      }\n      // Delete the destination that is a file or an empty directory\n      if (dstStatus.isDir()) {\n        FileStatus[] list \u003d listStatus(dst);\n        if (list !\u003d null \u0026\u0026 list.length !\u003d 0) {\n          throw new IOException(\n              \"rename cannot overwrite non empty destination directory \" + dst);\n        }\n      }\n      delete(dst, false);\n    } else {\n      final Path parent \u003d dst.getParent();\n      final FileStatus parentStatus \u003d getFileStatus(parent);\n      if (parentStatus \u003d\u003d null) {\n        throw new FileNotFoundException(\"rename destination parent \" + parent\n            + \" not found.\");\n      }\n      if (!parentStatus.isDir()) {\n        throw new ParentNotDirectoryException(\"rename destination parent \" + parent\n            + \" is a file.\");\n      }\n    }\n    if (!rename(src, dst)) {\n      throw new IOException(\"rename from \" + src + \" to \" + dst + \" failed.\");\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}