{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReaderFactory.java",
  "functionName": "getRemoteBlockReaderFromDomain",
  "functionId": "getRemoteBlockReaderFromDomain",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
  "functionStartLine": 676,
  "functionEndLine": 728,
  "numCommitsSeen": 63,
  "timeTaken": 4753,
  "changeHistory": [
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "f308561f1d885491b88db73ac63003202056d661",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "ed72daa5df97669906234e8ac9a406d78136b206",
    "225569ece229cec32f852f831fd337a139c44b1e",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "f308561f1d885491b88db73ac63003202056d661": "Yfilerename",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Ymultichange(Yfilerename,Ybodychange)",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ybodychange",
    "ed72daa5df97669906234e8ac9a406d78136b206": "Ybodychange",
    "225569ece229cec32f852f831fd337a139c44b1e": "Ybodychange",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Ybodychange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/07/18 2:59 PM",
      "commitNameOld": "0247cb6318507afe06816e337a19f396afc53efa",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 61.99,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n     LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n         + \"socket at {}\", this, pathInfo.getPath());\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n-        IOUtilsClient.cleanup(LOG, peer);\n+        IOUtilsClient.cleanupWithLogger(LOG, peer);\n         if (isSecurityException(ioe)) {\n           LOG.trace(\"{}: got security exception while constructing a remote \"\n                   + \" block reader from the unix domain socket at {}\",\n               this, pathInfo.getPath(), ioe);\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious because the underlying socket may be stale.\n           LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n-          IOUtilsClient.cleanup(LOG, peer);\n+          IOUtilsClient.cleanupWithLogger(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n        + \"socket at {}\", this, pathInfo.getPath());\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanupWithLogger(LOG, peer);\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n                  + \" block reader from the unix domain socket at {}\",\n              this, pathInfo.getPath(), ioe);\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious because the underlying socket may be stale.\n          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "f308561f1d885491b88db73ac63003202056d661": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8057 Move BlockReader implementation to the client implementation package.  Contributed by Takanobu Asanuma\n",
      "commitDate": "25/04/16 12:01 PM",
      "commitName": "f308561f1d885491b88db73ac63003202056d661",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/04/16 9:38 AM",
      "commitNameOld": "10f0f7851a3255caab775777e8fb6c2781d97062",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n        + \"socket at {}\", this, pathInfo.getPath());\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n                  + \" block reader from the unix domain socket at {}\",\n              this, pathInfo.getPath(), ioe);\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious because the underlying socket may be stale.\n          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java"
      }
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:52 PM",
      "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n     LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n         + \"socket at {}\", this, pathInfo.getPath());\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtilsClient.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           LOG.trace(\"{}: got security exception while constructing a remote \"\n                   + \" block reader from the unix domain socket at {}\",\n               this, pathInfo.getPath(), ioe);\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n-          // considered less serious, because the underlying socket may be stale.\n+          // considered less serious because the underlying socket may be stale.\n           LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n        + \"socket at {}\", this, pathInfo.getPath());\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n                  + \" block reader from the unix domain socket at {}\",\n              this, pathInfo.getPath(), ioe);\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious because the underlying socket may be stale.\n          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,53 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(this + \": trying to create a remote block reader from the \" +\n-          \"UNIX domain socket at \" + pathInfo.getPath());\n-    }\n+    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n+        + \"socket at {}\", this, pathInfo.getPath());\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtilsClient.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": got security exception while constructing \" +\n-                \"a remote block reader from the unix domain socket at \" +\n-                pathInfo.getPath(), ioe);\n-          }\n+          LOG.trace(\"{}: got security exception while constructing a remote \"\n+                  + \" block reader from the unix domain socket at {}\",\n+              this, pathInfo.getPath(), ioe);\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n-          }\n+          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n        + \"socket at {}\", this, pathInfo.getPath());\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n                  + \" block reader from the unix domain socket at {}\",\n              this, pathInfo.getPath(), ioe);\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,59 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n-    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n-        + \"socket at {}\", this, pathInfo.getPath());\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": trying to create a remote block reader from the \" +\n+          \"UNIX domain socket at \" + pathInfo.getPath());\n+    }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtilsClient.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n-          LOG.trace(\"{}: got security exception while constructing a remote \"\n-                  + \" block reader from the unix domain socket at {}\",\n-              this, pathInfo.getPath(), ioe);\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": got security exception while constructing \" +\n+                \"a remote block reader from the unix domain socket at \" +\n+                pathInfo.getPath(), ioe);\n+          }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n-          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n+          }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 1:39 PM",
      "commitNameOld": "e5992ef4df63fbc6a6b8e357b32c647e7837c662",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,53 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(this + \": trying to create a remote block reader from the \" +\n-          \"UNIX domain socket at \" + pathInfo.getPath());\n-    }\n+    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n+        + \"socket at {}\", this, pathInfo.getPath());\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtilsClient.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": got security exception while constructing \" +\n-                \"a remote block reader from the unix domain socket at \" +\n-                pathInfo.getPath(), ioe);\n-          }\n+          LOG.trace(\"{}: got security exception while constructing a remote \"\n+                  + \" block reader from the unix domain socket at {}\",\n+              this, pathInfo.getPath(), ioe);\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n-          }\n+          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    LOG.trace(\"{}: trying to create a remote block reader from the UNIX domain \"\n        + \"socket at {}\", this, pathInfo.getPath());\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          LOG.trace(\"{}: got security exception while constructing a remote \"\n                  + \" block reader from the unix domain socket at {}\",\n              this, pathInfo.getPath(), ioe);\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          LOG.debug(\"Closed potentially stale domain peer {}\", peer, ioe);\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/09/15 11:08 AM",
          "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "26/09/15 9:06 AM",
          "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from the \" +\n           \"UNIX domain socket at \" + pathInfo.getPath());\n     }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n-        IOUtils.cleanup(LOG, peer);\n+        IOUtilsClient.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from the unix domain socket at \" +\n                 pathInfo.getPath(), ioe);\n           }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/09/15 11:08 AM",
          "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "26/09/15 9:06 AM",
          "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory()\n           .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from the \" +\n           \"UNIX domain socket at \" + pathInfo.getPath());\n     }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n-        IOUtils.cleanup(LOG, peer);\n+        IOUtilsClient.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from the unix domain socket at \" +\n                 pathInfo.getPath(), ioe);\n           }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtilsClient.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtilsClient.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "01/04/15 12:54 PM",
      "commitNameOld": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 9.08,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n-      pathInfo \u003d clientContext.getDomainSocketFactory().\n-                      getPathInfo(inetSocketAddress, conf);\n+      pathInfo \u003d clientContext.getDomainSocketFactory()\n+          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n           \"remote block reader because the UNIX domain socket at {}\" +\n            \" is not usable.\", this, pathInfo);\n       return null;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from the \" +\n           \"UNIX domain socket at \" + pathInfo.getPath());\n     }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtils.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from the unix domain socket at \" +\n                 pathInfo.getPath(), ioe);\n           }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtils.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory()\n          .getPathInfo(inetSocketAddress, conf.getShortCircuitConf());\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtils.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "ed72daa5df97669906234e8ac9a406d78136b206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7978. Add LOG.isDebugEnabled() guard for some LOG.debug(..). Contributed by Walter Su.\n",
      "commitDate": "01/04/15 12:54 PM",
      "commitName": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "14/03/15 10:36 PM",
      "commitNameOld": "bc9cb3e271b22069a15ca110cd60c860250aaab2",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 17.6,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory().\n                       getPathInfo(inetSocketAddress, conf);\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n-      PerformanceAdvisory.LOG.debug(this + \": not trying to create a \" +\n-          \"remote block reader because the UNIX domain socket at \" +\n-          pathInfo + \" is not usable.\");\n+      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n+          \"remote block reader because the UNIX domain socket at {}\" +\n+           \" is not usable.\", this, pathInfo);\n       return null;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from the \" +\n           \"UNIX domain socket at \" + pathInfo.getPath());\n     }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtils.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from the unix domain socket at \" +\n                 pathInfo.getPath(), ioe);\n           }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtils.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory().\n                      getPathInfo(inetSocketAddress, conf);\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(\"{}: not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at {}\" +\n           \" is not usable.\", this, pathInfo);\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtils.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "225569ece229cec32f852f831fd337a139c44b1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4486. Add log category for long-running DFSClient notices.  Contributed by Zhe Zhang.\n",
      "commitDate": "27/08/14 1:39 PM",
      "commitName": "225569ece229cec32f852f831fd337a139c44b1e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "14/07/14 11:10 AM",
      "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 44.1,
      "commitsBetweenForRepo": 375,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,59 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory().\n                       getPathInfo(inetSocketAddress, conf);\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n-      if (LOG.isTraceEnabled()) {\n-        LOG.trace(this + \": not trying to create a remote block reader \" +\n-            \"because the UNIX domain socket at \" + pathInfo +\n-            \" is not usable.\");\n-      }\n+      PerformanceAdvisory.LOG.debug(this + \": not trying to create a \" +\n+          \"remote block reader because the UNIX domain socket at \" +\n+          pathInfo + \" is not usable.\");\n       return null;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from the \" +\n           \"UNIX domain socket at \" + pathInfo.getPath());\n     }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtils.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from the unix domain socket at \" +\n                 pathInfo.getPath(), ioe);\n           }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtils.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory().\n                      getPathInfo(inetSocketAddress, conf);\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      PerformanceAdvisory.LOG.debug(this + \": not trying to create a \" +\n          \"remote block reader because the UNIX domain socket at \" +\n          pathInfo + \" is not usable.\");\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtils.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 7:10 PM",
      "commitNameOld": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 18.03,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n     if (pathInfo \u003d\u003d null) {\n       pathInfo \u003d clientContext.getDomainSocketFactory().\n                       getPathInfo(inetSocketAddress, conf);\n     }\n     if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(this + \": not trying to create a remote block reader \" +\n             \"because the UNIX domain socket at \" + pathInfo +\n             \" is not usable.\");\n       }\n       return null;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create a remote block reader from the \" +\n           \"UNIX domain socket at \" + pathInfo.getPath());\n     }\n \n     while (true) {\n       BlockReaderPeer curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n+      if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       BlockReader blockReader \u003d null;\n       try {\n         blockReader \u003d getRemoteBlockReader(peer);\n         return blockReader;\n       } catch (IOException ioe) {\n         IOUtils.cleanup(LOG, peer);\n         if (isSecurityException(ioe)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": got security exception while constructing \" +\n                 \"a remote block reader from the unix domain socket at \" +\n                 pathInfo.getPath(), ioe);\n           }\n           throw ioe;\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached peer.  These are\n           // considered less serious, because the underlying socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n           }\n         } else {\n           // Handle an I/O error we got when using a newly created domain peer.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n               \"domain socket \" + peer.getDomainSocket(), ioe);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       } finally {\n         if (blockReader \u003d\u003d null) {\n           IOUtils.cleanup(LOG, peer);\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory().\n                      getPathInfo(inetSocketAddress, conf);\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": not trying to create a remote block reader \" +\n            \"because the UNIX domain socket at \" + pathInfo +\n            \" is not usable.\");\n      }\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtils.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,60 @@\n+  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n+    if (pathInfo \u003d\u003d null) {\n+      pathInfo \u003d clientContext.getDomainSocketFactory().\n+                      getPathInfo(inetSocketAddress, conf);\n+    }\n+    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": not trying to create a remote block reader \" +\n+            \"because the UNIX domain socket at \" + pathInfo +\n+            \" is not usable.\");\n+      }\n+      return null;\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": trying to create a remote block reader from the \" +\n+          \"UNIX domain socket at \" + pathInfo.getPath());\n+    }\n+\n+    while (true) {\n+      BlockReaderPeer curPeer \u003d nextDomainPeer();\n+      if (curPeer \u003d\u003d null) break;\n+      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n+      BlockReader blockReader \u003d null;\n+      try {\n+        blockReader \u003d getRemoteBlockReader(peer);\n+        return blockReader;\n+      } catch (IOException ioe) {\n+        IOUtils.cleanup(LOG, peer);\n+        if (isSecurityException(ioe)) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": got security exception while constructing \" +\n+                \"a remote block reader from the unix domain socket at \" +\n+                pathInfo.getPath(), ioe);\n+          }\n+          throw ioe;\n+        }\n+        if (curPeer.fromCache) {\n+          // Handle an I/O error we got when using a cached peer.  These are\n+          // considered less serious, because the underlying socket may be stale.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n+          }\n+        } else {\n+          // Handle an I/O error we got when using a newly created domain peer.\n+          // We temporarily disable the domain socket path for a few minutes in\n+          // this case, to prevent wasting more time on it.\n+          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n+              \"domain socket \" + peer.getDomainSocket(), ioe);\n+          clientContext.getDomainSocketFactory()\n+              .disableDomainSocketPath(pathInfo.getPath());\n+          return null;\n+        }\n+      } finally {\n+        if (blockReader \u003d\u003d null) {\n+          IOUtils.cleanup(LOG, peer);\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader getRemoteBlockReaderFromDomain() throws IOException {\n    if (pathInfo \u003d\u003d null) {\n      pathInfo \u003d clientContext.getDomainSocketFactory().\n                      getPathInfo(inetSocketAddress, conf);\n    }\n    if (!pathInfo.getPathState().getUsableForDataTransfer()) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": not trying to create a remote block reader \" +\n            \"because the UNIX domain socket at \" + pathInfo +\n            \" is not usable.\");\n      }\n      return null;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create a remote block reader from the \" +\n          \"UNIX domain socket at \" + pathInfo.getPath());\n    }\n\n    while (true) {\n      BlockReaderPeer curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      BlockReader blockReader \u003d null;\n      try {\n        blockReader \u003d getRemoteBlockReader(peer);\n        return blockReader;\n      } catch (IOException ioe) {\n        IOUtils.cleanup(LOG, peer);\n        if (isSecurityException(ioe)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": got security exception while constructing \" +\n                \"a remote block reader from the unix domain socket at \" +\n                pathInfo.getPath(), ioe);\n          }\n          throw ioe;\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached peer.  These are\n          // considered less serious, because the underlying socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Closed potentially stale domain peer \" + peer, ioe);\n          }\n        } else {\n          // Handle an I/O error we got when using a newly created domain peer.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(\"I/O error constructing remote block reader.  Disabling \" +\n              \"domain socket \" + peer.getDomainSocket(), ioe);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      } finally {\n        if (blockReader \u003d\u003d null) {\n          IOUtils.cleanup(LOG, peer);\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
    }
  }
}