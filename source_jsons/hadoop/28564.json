{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppsBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
  "functionStartLine": 134,
  "functionEndLine": 147,
  "numCommitsSeen": 18,
  "timeTaken": 2104,
  "changeHistory": [
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Ybodychange",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/08/15 2:15 AM",
      "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 715.62,
      "commitsBetweenForRepo": 4613,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public void render(Block html) {\n     setTitle(\"Applications\");\n \n     try {\n       fetchData();\n     }\n     catch( Exception e) {\n       String message \u003d \"Failed to read the applications.\";\n       LOG.error(message, e);\n-      html.p()._(message)._();\n+      html.p().__(message).__();\n       return;\n     }\n     renderData(html);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void render(Block html) {\n    setTitle(\"Applications\");\n\n    try {\n      fetchData();\n    }\n    catch( Exception e) {\n      String message \u003d \"Failed to read the applications.\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n    renderData(html);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "commitDateOld": "05/03/15 9:20 PM",
      "commitNameOld": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 26.25,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,14 @@\n   public void render(Block html) {\n     setTitle(\"Applications\");\n \n-    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n-        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n-          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n-          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n-          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n-          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n-          .th(\".ui\", \"Tracking UI\")._()._().tbody();\n-    EnumSet\u003cYarnApplicationState\u003e reqAppStates \u003d\n-        EnumSet.noneOf(YarnApplicationState.class);\n-    String reqStateString \u003d $(APP_STATE);\n-    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n-      String[] appStateStrings \u003d reqStateString.split(\",\");\n-      for (String stateString : appStateStrings) {\n-        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n-      }\n-    }\n-\n-    UserGroupInformation callerUGI \u003d getCallerUGI();\n-    Collection\u003cApplicationReport\u003e appReports \u003d null;\n     try {\n-      final GetApplicationsRequest request \u003d\n-          GetApplicationsRequest.newInstance(reqAppStates);\n-      if (callerUGI \u003d\u003d null) {\n-        appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n-      } else {\n-        appReports \u003d callerUGI.doAs(\n-            new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e () {\n-          @Override\n-          public Collection\u003cApplicationReport\u003e run() throws Exception {\n-            return appBaseProt.getApplications(request).getApplicationList();\n-          }\n-        });\n-      }\n-    } catch (Exception e) {\n+      fetchData();\n+    }\n+    catch( Exception e) {\n       String message \u003d \"Failed to read the applications.\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n-    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n-    for (ApplicationReport appReport : appReports) {\n-      // TODO: remove the following condition. It is still here because\n-      // the history side implementation of ApplicationBaseProtocol\n-      // hasn\u0027t filtering capability (YARN-1819).\n-      if (!reqAppStates.isEmpty()\n-          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n-        continue;\n-      }\n-      AppInfo app \u003d new AppInfo(appReport);\n-      String percent \u003d String.format(\"%.1f\", app.getProgress());\n-      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n-      appsTableData\n-        .append(\"[\\\"\u003ca href\u003d\u0027\")\n-        .append(url(\"app\", app.getAppId()))\n-        .append(\"\u0027\u003e\")\n-        .append(app.getAppId())\n-        .append(\"\u003c/a\u003e\\\",\\\"\")\n-        .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getUser())))\n-        .append(\"\\\",\\\"\")\n-        .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getName())))\n-        .append(\"\\\",\\\"\")\n-        .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getType())))\n-        .append(\"\\\",\\\"\")\n-        .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n-        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n-        .append(\"\\\",\\\"\")\n-        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n-        .append(\"\\\",\\\"\")\n-        .append(app.getFinalAppStatus())\n-        .append(\"\\\",\\\"\")\n-        // Progress bar\n-        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n-        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n-        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n-        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n-        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n-\n-      String trackingURL \u003d\n-          app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n-              ? null : app.getTrackingUrl();\n-\n-      String trackingUI \u003d\n-          app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n-              ? \"Unassigned\"\n-              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n-                  || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n-                  || app.getAppState() \u003d\u003d YarnApplicationState.KILLED\n-                  ? \"History\" : \"ApplicationMaster\";\n-      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n-        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\"],\\n\");\n-\n-    }\n-    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n-      appsTableData.delete(appsTableData.length() - 2,\n-        appsTableData.length() - 1);\n-    }\n-    appsTableData.append(\"]\");\n-    html.script().$type(\"text/javascript\")\n-      ._(\"var appsTableData\u003d\" + appsTableData)._();\n-\n-    tbody._()._();\n+    renderData(html);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void render(Block html) {\n    setTitle(\"Applications\");\n\n    try {\n      fetchData();\n    }\n    catch( Exception e) {\n      String message \u003d \"Failed to read the applications.\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    renderData(html);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong\n",
      "commitDate": "05/03/15 9:20 PM",
      "commitName": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 175.14,
      "commitsBetweenForRepo": 1474,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,113 @@\n   public void render(Block html) {\n     setTitle(\"Applications\");\n \n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")._()._().tbody();\n-    Collection\u003cYarnApplicationState\u003e reqAppStates \u003d null;\n+    EnumSet\u003cYarnApplicationState\u003e reqAppStates \u003d\n+        EnumSet.noneOf(YarnApplicationState.class);\n     String reqStateString \u003d $(APP_STATE);\n     if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n       String[] appStateStrings \u003d reqStateString.split(\",\");\n-      reqAppStates \u003d new HashSet\u003cYarnApplicationState\u003e(appStateStrings.length);\n       for (String stateString : appStateStrings) {\n-        reqAppStates.add(YarnApplicationState.valueOf(stateString));\n+        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n       }\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n-    Collection\u003cApplicationReport\u003e appReports;\n+    Collection\u003cApplicationReport\u003e appReports \u003d null;\n     try {\n+      final GetApplicationsRequest request \u003d\n+          GetApplicationsRequest.newInstance(reqAppStates);\n       if (callerUGI \u003d\u003d null) {\n-        appReports \u003d appContext.getAllApplications().values();\n+        appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n       } else {\n         appReports \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationReport\u003e run() throws Exception {\n-            return appContext.getAllApplications().values();\n+            return appBaseProt.getApplications(request).getApplicationList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the applications.\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n-      if (reqAppStates !\u003d null\n+      // TODO: remove the following condition. It is still here because\n+      // the history side implementation of ApplicationBaseProtocol\n+      // hasn\u0027t filtering capability (YARN-1819).\n+      if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n       AppInfo app \u003d new AppInfo(appReport);\n-      String percent \u003d String.format(\"%.1f\", app.getProgress() * 100.0F);\n+      String percent \u003d String.format(\"%.1f\", app.getProgress());\n       // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n-        .append(app.getAppState())\n+        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n-        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca href\u003d\u0027\");\n+        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n-          app.getTrackingUrl() \u003d\u003d null ? \"#\" : app.getTrackingUrl();\n+          app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n+              ? null : app.getTrackingUrl();\n \n-      appsTableData.append(trackingURL).append(\"\u0027\u003e\").append(\"History\")\n-        .append(\"\u003c/a\u003e\\\"],\\n\");\n+      String trackingUI \u003d\n+          app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n+              ? \"Unassigned\"\n+              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+                  || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n+                  || app.getAppState() \u003d\u003d YarnApplicationState.KILLED\n+                  ? \"History\" : \"ApplicationMaster\";\n+      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n+        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void render(Block html) {\n    setTitle(\"Applications\");\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")._()._().tbody();\n    EnumSet\u003cYarnApplicationState\u003e reqAppStates \u003d\n        EnumSet.noneOf(YarnApplicationState.class);\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n      }\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    Collection\u003cApplicationReport\u003e appReports \u003d null;\n    try {\n      final GetApplicationsRequest request \u003d\n          GetApplicationsRequest.newInstance(reqAppStates);\n      if (callerUGI \u003d\u003d null) {\n        appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n      } else {\n        appReports \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationReport\u003e run() throws Exception {\n            return appBaseProt.getApplications(request).getApplicationList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the applications.\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n      AppInfo app \u003d new AppInfo(appReport);\n      String percent \u003d String.format(\"%.1f\", app.getProgress());\n      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n              ? null : app.getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n              ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                  || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                  || app.getAppState() \u003d\u003d YarnApplicationState.KILLED\n                  ? \"History\" : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 228.88,
      "commitsBetweenForRepo": 1735,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,100 @@\n   public void render(Block html) {\n     setTitle(\"Applications\");\n \n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")._()._().tbody();\n     Collection\u003cYarnApplicationState\u003e reqAppStates \u003d null;\n     String reqStateString \u003d $(APP_STATE);\n     if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n       String[] appStateStrings \u003d reqStateString.split(\",\");\n       reqAppStates \u003d new HashSet\u003cYarnApplicationState\u003e(appStateStrings.length);\n       for (String stateString : appStateStrings) {\n         reqAppStates.add(YarnApplicationState.valueOf(stateString));\n       }\n     }\n \n+    UserGroupInformation callerUGI \u003d getCallerUGI();\n     Collection\u003cApplicationReport\u003e appReports;\n     try {\n-      appReports \u003d appContext.getAllApplications().values();\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        appReports \u003d appContext.getAllApplications().values();\n+      } else {\n+        appReports \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e () {\n+          @Override\n+          public Collection\u003cApplicationReport\u003e run() throws Exception {\n+            return appContext.getAllApplications().values();\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       String message \u003d \"Failed to read the applications.\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       if (reqAppStates !\u003d null\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n       AppInfo app \u003d new AppInfo(appReport);\n-      String percent \u003d String.format(\"%.1f\", app.getProgress());\n+      String percent \u003d String.format(\"%.1f\", app.getProgress() * 100.0F);\n       // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca href\u003d\u0027\");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null ? \"#\" : app.getTrackingUrl();\n \n       appsTableData.append(trackingURL).append(\"\u0027\u003e\").append(\"History\")\n         .append(\"\u003c/a\u003e\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void render(Block html) {\n    setTitle(\"Applications\");\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")._()._().tbody();\n    Collection\u003cYarnApplicationState\u003e reqAppStates \u003d null;\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      reqAppStates \u003d new HashSet\u003cYarnApplicationState\u003e(appStateStrings.length);\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString));\n      }\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    Collection\u003cApplicationReport\u003e appReports;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        appReports \u003d appContext.getAllApplications().values();\n      } else {\n        appReports \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationReport\u003e run() throws Exception {\n            return appContext.getAllApplications().values();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the applications.\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      if (reqAppStates !\u003d null\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n      AppInfo app \u003d new AppInfo(appReport);\n      String percent \u003d String.format(\"%.1f\", app.getProgress() * 100.0F);\n      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca href\u003d\u0027\");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null ? \"#\" : app.getTrackingUrl();\n\n      appsTableData.append(trackingURL).append(\"\u0027\u003e\").append(\"History\")\n        .append(\"\u003c/a\u003e\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,89 @@\n+  public void render(Block html) {\n+    setTitle(\"Applications\");\n+\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n+          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n+          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n+          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n+          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n+          .th(\".ui\", \"Tracking UI\")._()._().tbody();\n+    Collection\u003cYarnApplicationState\u003e reqAppStates \u003d null;\n+    String reqStateString \u003d $(APP_STATE);\n+    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n+      String[] appStateStrings \u003d reqStateString.split(\",\");\n+      reqAppStates \u003d new HashSet\u003cYarnApplicationState\u003e(appStateStrings.length);\n+      for (String stateString : appStateStrings) {\n+        reqAppStates.add(YarnApplicationState.valueOf(stateString));\n+      }\n+    }\n+\n+    Collection\u003cApplicationReport\u003e appReports;\n+    try {\n+      appReports \u003d appContext.getAllApplications().values();\n+    } catch (IOException e) {\n+      String message \u003d \"Failed to read the applications.\";\n+      LOG.error(message, e);\n+      html.p()._(message)._();\n+      return;\n+    }\n+    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n+    for (ApplicationReport appReport : appReports) {\n+      if (reqAppStates !\u003d null\n+          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n+        continue;\n+      }\n+      AppInfo app \u003d new AppInfo(appReport);\n+      String percent \u003d String.format(\"%.1f\", app.getProgress());\n+      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n+      appsTableData\n+        .append(\"[\\\"\u003ca href\u003d\u0027\")\n+        .append(url(\"app\", app.getAppId()))\n+        .append(\"\u0027\u003e\")\n+        .append(app.getAppId())\n+        .append(\"\u003c/a\u003e\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getUser())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getName())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getType())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n+        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n+        .append(\"\\\",\\\"\")\n+        .append(app.getAppState())\n+        .append(\"\\\",\\\"\")\n+        .append(app.getFinalAppStatus())\n+        .append(\"\\\",\\\"\")\n+        // Progress bar\n+        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n+        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n+        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n+        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n+        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca href\u003d\u0027\");\n+\n+      String trackingURL \u003d\n+          app.getTrackingUrl() \u003d\u003d null ? \"#\" : app.getTrackingUrl();\n+\n+      appsTableData.append(trackingURL).append(\"\u0027\u003e\").append(\"History\")\n+        .append(\"\u003c/a\u003e\\\"],\\n\");\n+\n+    }\n+    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      appsTableData.delete(appsTableData.length() - 2,\n+        appsTableData.length() - 1);\n+    }\n+    appsTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\")\n+      ._(\"var appsTableData\u003d\" + appsTableData)._();\n+\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void render(Block html) {\n    setTitle(\"Applications\");\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")._()._().tbody();\n    Collection\u003cYarnApplicationState\u003e reqAppStates \u003d null;\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      reqAppStates \u003d new HashSet\u003cYarnApplicationState\u003e(appStateStrings.length);\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString));\n      }\n    }\n\n    Collection\u003cApplicationReport\u003e appReports;\n    try {\n      appReports \u003d appContext.getAllApplications().values();\n    } catch (IOException e) {\n      String message \u003d \"Failed to read the applications.\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      if (reqAppStates !\u003d null\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n      AppInfo app \u003d new AppInfo(appReport);\n      String percent \u003d String.format(\"%.1f\", app.getProgress());\n      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca href\u003d\u0027\");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null ? \"#\" : app.getTrackingUrl();\n\n      appsTableData.append(trackingURL).append(\"\u0027\u003e\").append(\"History\")\n        .append(\"\u003c/a\u003e\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java"
    }
  }
}