{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BZip2Codec.java",
  "functionName": "createInputStream",
  "functionId": "createInputStream___seekableIn-InputStream__decompressor-Decompressor__start-long__end-long__readMode-READ_MODE",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
  "functionStartLine": 199,
  "functionEndLine": 210,
  "numCommitsSeen": 20,
  "timeTaken": 2118,
  "changeHistory": [
    "2fae63aa60c43b62bd908a9499562fe528603185",
    "e3ba9ad3f116306910f74645ded91506345b9f6e",
    "d02fb53750bc592c23ba470ae82eb6f47d9a00ec",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "86724941c5144a06113090d40c50c289e7ebd290"
  ],
  "changeHistoryShort": {
    "2fae63aa60c43b62bd908a9499562fe528603185": "Ybodychange",
    "e3ba9ad3f116306910f74645ded91506345b9f6e": "Ybodychange",
    "d02fb53750bc592c23ba470ae82eb6f47d9a00ec": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "86724941c5144a06113090d40c50c289e7ebd290": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fae63aa60c43b62bd908a9499562fe528603185": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14919. BZip2 drops records when reading data in splits. Contributed by Jason Lowe\n",
      "commitDate": "31/10/17 7:30 AM",
      "commitName": "2fae63aa60c43b62bd908a9499562fe528603185",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "12/05/17 2:54 PM",
      "commitNameOld": "7bc217224891b7f7f0a2e35e37e46b36d8c5309d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 171.69,
      "commitsBetweenForRepo": 1181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,12 @@\n   public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n       Decompressor decompressor, long start, long end, READ_MODE readMode)\n       throws IOException {\n \n     if (!(seekableIn instanceof Seekable)) {\n       throw new IOException(\"seekableIn must be an instance of \" +\n           Seekable.class.getName());\n     }\n \n-    //find the position of first BZip2 start up marker\n-    ((Seekable)seekableIn).seek(0);\n-\n-    // BZip2 start of block markers are of 6 bytes.  But the very first block\n-    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n-    // time stream might start without a leading BZ.\n-    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n-      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n-    long adjStart \u003d 0L;\n-    if (start !\u003d 0) {\n-      // Other than the first of file, the marker size is 6 bytes.\n-      adjStart \u003d Math.max(0L, start - (FIRST_BZIP2_BLOCK_MARKER_POSITION\n-          - (HEADER_LEN + SUB_HEADER_LEN)));\n-    }\n-\n-    ((Seekable)seekableIn).seek(adjStart);\n-    SplitCompressionInputStream in \u003d\n-      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n-\n-\n-    // The following if clause handles the following case:\n-    // Assume the following scenario in BZip2 compressed stream where\n-    // . represent compressed data.\n-    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n-    // ........................[47 bits][1 bit].....[48 bit Block]...\n-    // ................................^[Assume a Byte alignment here]\n-    // ........................................^^[current position of stream]\n-    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n-    // ........................................^^[We align at wrong position!]\n-    // ...........................................................^^[While this pos is correct]\n-\n-    if (in.getPos() \u003c start) {\n-      ((Seekable)seekableIn).seek(start);\n-      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n-    }\n-\n-    return in;\n+    ((Seekable)seekableIn).seek(start);\n+    return new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    ((Seekable)seekableIn).seek(start);\n    return new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {}
    },
    "e3ba9ad3f116306910f74645ded91506345b9f6e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13270. BZip2CompressionInputStream finds the same compression marker twice in corner case, causing duplicate data blocks. Contributed by Kai Sasaki.\n",
      "commitDate": "13/06/16 6:18 PM",
      "commitName": "e3ba9ad3f116306910f74645ded91506345b9f6e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "06/01/15 1:19 PM",
      "commitNameOld": "d02fb53750bc592c23ba470ae82eb6f47d9a00ec",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 524.17,
      "commitsBetweenForRepo": 4003,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,47 @@\n   public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n       Decompressor decompressor, long start, long end, READ_MODE readMode)\n       throws IOException {\n \n     if (!(seekableIn instanceof Seekable)) {\n       throw new IOException(\"seekableIn must be an instance of \" +\n           Seekable.class.getName());\n     }\n \n     //find the position of first BZip2 start up marker\n     ((Seekable)seekableIn).seek(0);\n \n     // BZip2 start of block markers are of 6 bytes.  But the very first block\n     // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n     // time stream might start without a leading BZ.\n     final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n       CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n-    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n+    long adjStart \u003d 0L;\n+    if (start !\u003d 0) {\n+      // Other than the first of file, the marker size is 6 bytes.\n+      adjStart \u003d Math.max(0L, start - (FIRST_BZIP2_BLOCK_MARKER_POSITION\n+          - (HEADER_LEN + SUB_HEADER_LEN)));\n+    }\n \n     ((Seekable)seekableIn).seek(adjStart);\n     SplitCompressionInputStream in \u003d\n       new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n \n \n     // The following if clause handles the following case:\n     // Assume the following scenario in BZip2 compressed stream where\n     // . represent compressed data.\n     // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n     // ........................[47 bits][1 bit].....[48 bit Block]...\n     // ................................^[Assume a Byte alignment here]\n     // ........................................^^[current position of stream]\n     // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n     // ........................................^^[We align at wrong position!]\n     // ...........................................................^^[While this pos is correct]\n \n     if (in.getPos() \u003c start) {\n       ((Seekable)seekableIn).seek(start);\n       in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n     }\n \n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    //find the position of first BZip2 start up marker\n    ((Seekable)seekableIn).seek(0);\n\n    // BZip2 start of block markers are of 6 bytes.  But the very first block\n    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n    // time stream might start without a leading BZ.\n    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n    long adjStart \u003d 0L;\n    if (start !\u003d 0) {\n      // Other than the first of file, the marker size is 6 bytes.\n      adjStart \u003d Math.max(0L, start - (FIRST_BZIP2_BLOCK_MARKER_POSITION\n          - (HEADER_LEN + SUB_HEADER_LEN)));\n    }\n\n    ((Seekable)seekableIn).seek(adjStart);\n    SplitCompressionInputStream in \u003d\n      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n\n\n    // The following if clause handles the following case:\n    // Assume the following scenario in BZip2 compressed stream where\n    // . represent compressed data.\n    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n    // ........................[47 bits][1 bit].....[48 bit Block]...\n    // ................................^[Assume a Byte alignment here]\n    // ........................................^^[current position of stream]\n    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n    // ........................................^^[We align at wrong position!]\n    // ...........................................................^^[While this pos is correct]\n\n    if (in.getPos() \u003c start) {\n      ((Seekable)seekableIn).seek(start);\n      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n    }\n\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {}
    },
    "d02fb53750bc592c23ba470ae82eb6f47d9a00ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11445. Bzip2Codec: Data block is skipped when position of newly created stream is equal to start of split. Contributed by Ankit Kamboj\n",
      "commitDate": "06/01/15 1:19 PM",
      "commitName": "d02fb53750bc592c23ba470ae82eb6f47d9a00ec",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 25.86,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n       Decompressor decompressor, long start, long end, READ_MODE readMode)\n       throws IOException {\n \n     if (!(seekableIn instanceof Seekable)) {\n       throw new IOException(\"seekableIn must be an instance of \" +\n           Seekable.class.getName());\n     }\n \n     //find the position of first BZip2 start up marker\n     ((Seekable)seekableIn).seek(0);\n \n     // BZip2 start of block markers are of 6 bytes.  But the very first block\n     // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n     // time stream might start without a leading BZ.\n     final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n       CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n     long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n \n     ((Seekable)seekableIn).seek(adjStart);\n     SplitCompressionInputStream in \u003d\n       new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n \n \n     // The following if clause handles the following case:\n     // Assume the following scenario in BZip2 compressed stream where\n     // . represent compressed data.\n     // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n     // ........................[47 bits][1 bit].....[48 bit Block]...\n     // ................................^[Assume a Byte alignment here]\n     // ........................................^^[current position of stream]\n     // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n     // ........................................^^[We align at wrong position!]\n     // ...........................................................^^[While this pos is correct]\n \n-    if (in.getPos() \u003c\u003d start) {\n+    if (in.getPos() \u003c start) {\n       ((Seekable)seekableIn).seek(start);\n       in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n     }\n \n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    //find the position of first BZip2 start up marker\n    ((Seekable)seekableIn).seek(0);\n\n    // BZip2 start of block markers are of 6 bytes.  But the very first block\n    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n    // time stream might start without a leading BZ.\n    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n\n    ((Seekable)seekableIn).seek(adjStart);\n    SplitCompressionInputStream in \u003d\n      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n\n\n    // The following if clause handles the following case:\n    // Assume the following scenario in BZip2 compressed stream where\n    // . represent compressed data.\n    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n    // ........................[47 bits][1 bit].....[48 bit Block]...\n    // ................................^[Assume a Byte alignment here]\n    // ........................................^^[current position of stream]\n    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n    // ........................................^^[We align at wrong position!]\n    // ...........................................................^^[While this pos is correct]\n\n    if (in.getPos() \u003c start) {\n      ((Seekable)seekableIn).seek(start);\n      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n    }\n\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    //find the position of first BZip2 start up marker\n    ((Seekable)seekableIn).seek(0);\n\n    // BZip2 start of block markers are of 6 bytes.  But the very first block\n    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n    // time stream might start without a leading BZ.\n    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n\n    ((Seekable)seekableIn).seek(adjStart);\n    SplitCompressionInputStream in \u003d\n      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n\n\n    // The following if clause handles the following case:\n    // Assume the following scenario in BZip2 compressed stream where\n    // . represent compressed data.\n    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n    // ........................[47 bits][1 bit].....[48 bit Block]...\n    // ................................^[Assume a Byte alignment here]\n    // ........................................^^[current position of stream]\n    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n    // ........................................^^[We align at wrong position!]\n    // ...........................................................^^[While this pos is correct]\n\n    if (in.getPos() \u003c\u003d start) {\n      ((Seekable)seekableIn).seek(start);\n      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n    }\n\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    //find the position of first BZip2 start up marker\n    ((Seekable)seekableIn).seek(0);\n\n    // BZip2 start of block markers are of 6 bytes.  But the very first block\n    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n    // time stream might start without a leading BZ.\n    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n\n    ((Seekable)seekableIn).seek(adjStart);\n    SplitCompressionInputStream in \u003d\n      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n\n\n    // The following if clause handles the following case:\n    // Assume the following scenario in BZip2 compressed stream where\n    // . represent compressed data.\n    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n    // ........................[47 bits][1 bit].....[48 bit Block]...\n    // ................................^[Assume a Byte alignment here]\n    // ........................................^^[current position of stream]\n    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n    // ........................................^^[We align at wrong position!]\n    // ...........................................................^^[While this pos is correct]\n\n    if (in.getPos() \u003c\u003d start) {\n      ((Seekable)seekableIn).seek(start);\n      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n    }\n\n    return in;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    //find the position of first BZip2 start up marker\n    ((Seekable)seekableIn).seek(0);\n\n    // BZip2 start of block markers are of 6 bytes.  But the very first block\n    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n    // time stream might start without a leading BZ.\n    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n\n    ((Seekable)seekableIn).seek(adjStart);\n    SplitCompressionInputStream in \u003d\n      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n\n\n    // The following if clause handles the following case:\n    // Assume the following scenario in BZip2 compressed stream where\n    // . represent compressed data.\n    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n    // ........................[47 bits][1 bit].....[48 bit Block]...\n    // ................................^[Assume a Byte alignment here]\n    // ........................................^^[current position of stream]\n    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n    // ........................................^^[We align at wrong position!]\n    // ...........................................................^^[While this pos is correct]\n\n    if (in.getPos() \u003c\u003d start) {\n      ((Seekable)seekableIn).seek(start);\n      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n    }\n\n    return in;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/BZip2Codec.java"
      }
    },
    "86724941c5144a06113090d40c50c289e7ebd290": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4012. Provide splitting support for bzip2 compressed files. Contributed by Abdul Qadeer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@813581 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/09 1:51 PM",
      "commitName": "86724941c5144a06113090d40c50c289e7ebd290",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,42 @@\n+  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n+      Decompressor decompressor, long start, long end, READ_MODE readMode)\n+      throws IOException {\n+\n+    if (!(seekableIn instanceof Seekable)) {\n+      throw new IOException(\"seekableIn must be an instance of \" +\n+          Seekable.class.getName());\n+    }\n+\n+    //find the position of first BZip2 start up marker\n+    ((Seekable)seekableIn).seek(0);\n+\n+    // BZip2 start of block markers are of 6 bytes.  But the very first block\n+    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n+    // time stream might start without a leading BZ.\n+    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n+      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n+    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n+\n+    ((Seekable)seekableIn).seek(adjStart);\n+    SplitCompressionInputStream in \u003d\n+      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n+\n+\n+    // The following if clause handles the following case:\n+    // Assume the following scenario in BZip2 compressed stream where\n+    // . represent compressed data.\n+    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n+    // ........................[47 bits][1 bit].....[48 bit Block]...\n+    // ................................^[Assume a Byte alignment here]\n+    // ........................................^^[current position of stream]\n+    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n+    // ........................................^^[We align at wrong position!]\n+    // ...........................................................^^[While this pos is correct]\n+\n+    if (in.getPos() \u003c\u003d start) {\n+      ((Seekable)seekableIn).seek(start);\n+      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n+    }\n+\n+    return in;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SplitCompressionInputStream createInputStream(InputStream seekableIn,\n      Decompressor decompressor, long start, long end, READ_MODE readMode)\n      throws IOException {\n\n    if (!(seekableIn instanceof Seekable)) {\n      throw new IOException(\"seekableIn must be an instance of \" +\n          Seekable.class.getName());\n    }\n\n    //find the position of first BZip2 start up marker\n    ((Seekable)seekableIn).seek(0);\n\n    // BZip2 start of block markers are of 6 bytes.  But the very first block\n    // also has \"BZh9\", making it 10 bytes.  This is the common case.  But at\n    // time stream might start without a leading BZ.\n    final long FIRST_BZIP2_BLOCK_MARKER_POSITION \u003d\n      CBZip2InputStream.numberOfBytesTillNextMarker(seekableIn);\n    long adjStart \u003d Math.max(0L, start - FIRST_BZIP2_BLOCK_MARKER_POSITION);\n\n    ((Seekable)seekableIn).seek(adjStart);\n    SplitCompressionInputStream in \u003d\n      new BZip2CompressionInputStream(seekableIn, adjStart, end, readMode);\n\n\n    // The following if clause handles the following case:\n    // Assume the following scenario in BZip2 compressed stream where\n    // . represent compressed data.\n    // .....[48 bit Block].....[48 bit   Block].....[48 bit Block]...\n    // ........................[47 bits][1 bit].....[48 bit Block]...\n    // ................................^[Assume a Byte alignment here]\n    // ........................................^^[current position of stream]\n    // .....................^^[We go back 10 Bytes in stream and find a Block marker]\n    // ........................................^^[We align at wrong position!]\n    // ...........................................................^^[While this pos is correct]\n\n    if (in.getPos() \u003c\u003d start) {\n      ((Seekable)seekableIn).seek(start);\n      in \u003d new BZip2CompressionInputStream(seekableIn, start, end, readMode);\n    }\n\n    return in;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/BZip2Codec.java"
    }
  }
}