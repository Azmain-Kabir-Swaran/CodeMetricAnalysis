{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnConfiguration.java",
  "functionName": "getRMDefaultPortNumber",
  "functionId": "getRMDefaultPortNumber___addressPrefix-String__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java",
  "functionStartLine": 4465,
  "functionEndLine": 4486,
  "numCommitsSeen": 466,
  "timeTaken": 10600,
  "changeHistory": [
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "8b2336fcefa906a5bfe7f6dcf36c18fb34f377f5"
  ],
  "changeHistoryShort": {
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ymultichange(Yparameterchange,Ybodychange)",
    "8b2336fcefa906a5bfe7f6dcf36c18fb34f377f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/14 12:01 PM",
          "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/02/14 6:15 PM",
          "commitNameOld": "23b2e43f5d678517e33590d15dec73225b9c5682",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 6.74,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public static int getRMDefaultPortNumber(String addressPrefix) {\n+  public static int getRMDefaultPortNumber(String addressPrefix,\n+      Configuration conf) {\n     if (addressPrefix.equals(YarnConfiguration.RM_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_SCHEDULER_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\n     } else if (addressPrefix\n         .equals(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_ADMIN_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_ADMIN_PORT;\n     } else {\n       throw new HadoopIllegalArgumentException(\n           \"Invalid RM RPC address Prefix: \" + addressPrefix\n               + \". The valid value should be one of \"\n-              + YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS);\n+              + getServiceAddressConfKeys(conf));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static int getRMDefaultPortNumber(String addressPrefix,\n      Configuration conf) {\n    if (addressPrefix.equals(YarnConfiguration.RM_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_SCHEDULER_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\n    } else if (addressPrefix\n        .equals(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_ADMIN_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_ADMIN_PORT;\n    } else {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid RM RPC address Prefix: \" + addressPrefix\n              + \". The valid value should be one of \"\n              + getServiceAddressConfKeys(conf));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java",
          "extendedDetails": {
            "oldValue": "[addressPrefix-String]",
            "newValue": "[addressPrefix-String, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/14 12:01 PM",
          "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/02/14 6:15 PM",
          "commitNameOld": "23b2e43f5d678517e33590d15dec73225b9c5682",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 6.74,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public static int getRMDefaultPortNumber(String addressPrefix) {\n+  public static int getRMDefaultPortNumber(String addressPrefix,\n+      Configuration conf) {\n     if (addressPrefix.equals(YarnConfiguration.RM_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_SCHEDULER_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\n     } else if (addressPrefix\n         .equals(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT;\n     } else if (addressPrefix.equals(YarnConfiguration.RM_ADMIN_ADDRESS)) {\n       return YarnConfiguration.DEFAULT_RM_ADMIN_PORT;\n     } else {\n       throw new HadoopIllegalArgumentException(\n           \"Invalid RM RPC address Prefix: \" + addressPrefix\n               + \". The valid value should be one of \"\n-              + YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS);\n+              + getServiceAddressConfKeys(conf));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static int getRMDefaultPortNumber(String addressPrefix,\n      Configuration conf) {\n    if (addressPrefix.equals(YarnConfiguration.RM_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_SCHEDULER_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\n    } else if (addressPrefix\n        .equals(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_ADMIN_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_ADMIN_PORT;\n    } else {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid RM RPC address Prefix: \" + addressPrefix\n              + \". The valid value should be one of \"\n              + getServiceAddressConfKeys(conf));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java",
          "extendedDetails": {}
        }
      ]
    },
    "8b2336fcefa906a5bfe7f6dcf36c18fb34f377f5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1660. Simplified the RM HA configuration to accept and be able to simply depend just on\nconfiguration properties of the form yarn.resourcemanager.hostname.RMID and use the default\nports for all service addresses. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565523 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/14 7:18 PM",
      "commitName": "8b2336fcefa906a5bfe7f6dcf36c18fb34f377f5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public static int getRMDefaultPortNumber(String addressPrefix) {\n+    if (addressPrefix.equals(YarnConfiguration.RM_ADDRESS)) {\n+      return YarnConfiguration.DEFAULT_RM_PORT;\n+    } else if (addressPrefix.equals(YarnConfiguration.RM_SCHEDULER_ADDRESS)) {\n+      return YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT;\n+    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_ADDRESS)) {\n+      return YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\n+    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS)) {\n+      return YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\n+    } else if (addressPrefix\n+        .equals(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS)) {\n+      return YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT;\n+    } else if (addressPrefix.equals(YarnConfiguration.RM_ADMIN_ADDRESS)) {\n+      return YarnConfiguration.DEFAULT_RM_ADMIN_PORT;\n+    } else {\n+      throw new HadoopIllegalArgumentException(\n+          \"Invalid RM RPC address Prefix: \" + addressPrefix\n+              + \". The valid value should be one of \"\n+              + YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int getRMDefaultPortNumber(String addressPrefix) {\n    if (addressPrefix.equals(YarnConfiguration.RM_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_SCHEDULER_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\n    } else if (addressPrefix\n        .equals(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT;\n    } else if (addressPrefix.equals(YarnConfiguration.RM_ADMIN_ADDRESS)) {\n      return YarnConfiguration.DEFAULT_RM_ADMIN_PORT;\n    } else {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid RM RPC address Prefix: \" + addressPrefix\n              + \". The valid value should be one of \"\n              + YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java"
    }
  }
}