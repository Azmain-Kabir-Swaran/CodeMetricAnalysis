{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuditReplayThread.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/audit/AuditReplayThread.java",
  "functionStartLine": 157,
  "functionEndLine": 189,
  "numCommitsSeen": 2,
  "timeTaken": 372,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,33 @@\n+  public void run() {\n+    long currentEpoch \u003d System.currentTimeMillis();\n+    long delay \u003d startTimestampMs - currentEpoch;\n+    try {\n+      if (delay \u003e 0) {\n+        LOG.info(\"Sleeping for \" + delay + \" ms\");\n+        Thread.sleep(delay);\n+      } else {\n+        LOG.warn(\"Starting late by \" + (-1 * delay) + \" ms\");\n+      }\n+\n+      AuditReplayCommand cmd \u003d commandQueue.take();\n+      while (!cmd.isPoison()) {\n+        replayCountersMap.get(REPLAYCOUNTERS.TOTALCOMMANDS).increment(1);\n+        delay \u003d cmd.getDelay(TimeUnit.MILLISECONDS);\n+        if (delay \u003c -5) { // allow some tolerance here\n+          replayCountersMap.get(REPLAYCOUNTERS.LATECOMMANDS).increment(1);\n+          replayCountersMap.get(REPLAYCOUNTERS.LATECOMMANDSTOTALTIME)\n+              .increment(-1 * delay);\n+        }\n+        if (!replayLog(cmd)) {\n+          replayCountersMap.get(REPLAYCOUNTERS.TOTALINVALIDCOMMANDS)\n+              .increment(1);\n+        }\n+        cmd \u003d commandQueue.take();\n+      }\n+    } catch (InterruptedException e) {\n+      LOG.error(\"Interrupted; exiting from thread.\", e);\n+    } catch (Exception e) {\n+      exception \u003d e;\n+      LOG.error(\"ReplayThread encountered exception; exiting.\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    long currentEpoch \u003d System.currentTimeMillis();\n    long delay \u003d startTimestampMs - currentEpoch;\n    try {\n      if (delay \u003e 0) {\n        LOG.info(\"Sleeping for \" + delay + \" ms\");\n        Thread.sleep(delay);\n      } else {\n        LOG.warn(\"Starting late by \" + (-1 * delay) + \" ms\");\n      }\n\n      AuditReplayCommand cmd \u003d commandQueue.take();\n      while (!cmd.isPoison()) {\n        replayCountersMap.get(REPLAYCOUNTERS.TOTALCOMMANDS).increment(1);\n        delay \u003d cmd.getDelay(TimeUnit.MILLISECONDS);\n        if (delay \u003c -5) { // allow some tolerance here\n          replayCountersMap.get(REPLAYCOUNTERS.LATECOMMANDS).increment(1);\n          replayCountersMap.get(REPLAYCOUNTERS.LATECOMMANDSTOTALTIME)\n              .increment(-1 * delay);\n        }\n        if (!replayLog(cmd)) {\n          replayCountersMap.get(REPLAYCOUNTERS.TOTALINVALIDCOMMANDS)\n              .increment(1);\n        }\n        cmd \u003d commandQueue.take();\n      }\n    } catch (InterruptedException e) {\n      LOG.error(\"Interrupted; exiting from thread.\", e);\n    } catch (Exception e) {\n      exception \u003d e;\n      LOG.error(\"ReplayThread encountered exception; exiting.\", e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/audit/AuditReplayThread.java"
    }
  }
}