{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "getAllowedLocalityLevelByTime",
  "functionId": "getAllowedLocalityLevelByTime___schedulerKey-SchedulerRequestKey__nodeLocalityDelayMs-long__rackLocalityDelayMs-long__currentTimeMs-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 352,
  "functionEndLine": 420,
  "numCommitsSeen": 106,
  "timeTaken": 5644,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "2528bea67ff80fae597f10e26c5f70d601af9fb1",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "2aaed1032719e978660d1f14a8ed299e83b5f65e",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "2528bea67ff80fae597f10e26c5f70d601af9fb1": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "2aaed1032719e978660d1f14a8ed299e83b5f65e": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,69 @@\n   NodeType getAllowedLocalityLevelByTime(\n       SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n       long rackLocalityDelayMs, long currentTimeMs) {\n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     writeLock.lock();\n     try {\n \n       // default level is NODE_LOCAL\n       if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n         // add the initial time of priority to prevent comparing with FsApp\n         // startTime and allowedLocalityLevel degrade\n         lastScheduledContainer.put(schedulerKey, currentTimeMs);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\n-              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n-                  .getPriority() + \", time: \" + currentTimeMs);\n-        }\n+        LOG.debug(\"Init the lastScheduledContainer time, priority: {},\"\n+            + \" time: {}\", schedulerKey.getPriority(), currentTimeMs);\n         allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n         return NodeType.NODE_LOCAL;\n       }\n \n       NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n       // if level is already most liberal, we\u0027re done\n       if (allowed.equals(NodeType.OFF_SWITCH)) {\n         return NodeType.OFF_SWITCH;\n       }\n \n       // check waiting time\n       long waitTime \u003d currentTimeMs;\n       if (lastScheduledContainer.containsKey(schedulerKey)) {\n         waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n       } else{\n         waitTime -\u003d getStartTime();\n       }\n \n       long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n           nodeLocalityDelayMs :\n           rackLocalityDelayMs;\n \n       if (waitTime \u003e thresholdTime) {\n         if (allowed.equals(NodeType.NODE_LOCAL)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(\"Waiting time: \" + waitTime\n                 + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                 + \", change allowedLocality from NODE_LOCAL to RACK_LOCAL\"\n                 + \", priority: \" + schedulerKey.getPriority()\n                 + \", app attempt id: \" + this.attemptId);\n           }\n           allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n           resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n         } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(\"Waiting time: \" + waitTime\n                 + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                 + \", change allowedLocality from RACK_LOCAL to OFF_SWITCH\"\n                 + \", priority: \" + schedulerKey.getPriority()\n                 + \", app attempt id: \" + this.attemptId);\n           }\n           allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n           resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n         }\n       }\n       return allowedLocalityLevel.get(schedulerKey);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    writeLock.lock();\n    try {\n\n      // default level is NODE_LOCAL\n      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n        // add the initial time of priority to prevent comparing with FsApp\n        // startTime and allowedLocalityLevel degrade\n        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n        LOG.debug(\"Init the lastScheduledContainer time, priority: {},\"\n            + \" time: {}\", schedulerKey.getPriority(), currentTimeMs);\n        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n        return NodeType.NODE_LOCAL;\n      }\n\n      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n      // if level is already most liberal, we\u0027re done\n      if (allowed.equals(NodeType.OFF_SWITCH)) {\n        return NodeType.OFF_SWITCH;\n      }\n\n      // check waiting time\n      long waitTime \u003d currentTimeMs;\n      if (lastScheduledContainer.containsKey(schedulerKey)) {\n        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n      } else{\n        waitTime -\u003d getStartTime();\n      }\n\n      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n          nodeLocalityDelayMs :\n          rackLocalityDelayMs;\n\n      if (waitTime \u003e thresholdTime) {\n        if (allowed.equals(NodeType.NODE_LOCAL)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Waiting time: \" + waitTime\n                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                + \", change allowedLocality from NODE_LOCAL to RACK_LOCAL\"\n                + \", priority: \" + schedulerKey.getPriority()\n                + \", app attempt id: \" + this.attemptId);\n          }\n          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Waiting time: \" + waitTime\n                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                + \", change allowedLocality from RACK_LOCAL to OFF_SWITCH\"\n                + \", priority: \" + schedulerKey.getPriority()\n                + \", app attempt id: \" + this.attemptId);\n          }\n          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        }\n      }\n      return allowedLocalityLevel.get(schedulerKey);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   NodeType getAllowedLocalityLevelByTime(\n       SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n       long rackLocalityDelayMs, long currentTimeMs) {\n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n \n       // default level is NODE_LOCAL\n       if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n         // add the initial time of priority to prevent comparing with FsApp\n         // startTime and allowedLocalityLevel degrade\n         lastScheduledContainer.put(schedulerKey, currentTimeMs);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n                   .getPriority() + \", time: \" + currentTimeMs);\n         }\n         allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n         return NodeType.NODE_LOCAL;\n       }\n \n       NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n       // if level is already most liberal, we\u0027re done\n       if (allowed.equals(NodeType.OFF_SWITCH)) {\n         return NodeType.OFF_SWITCH;\n       }\n \n       // check waiting time\n       long waitTime \u003d currentTimeMs;\n       if (lastScheduledContainer.containsKey(schedulerKey)) {\n         waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n       } else{\n         waitTime -\u003d getStartTime();\n       }\n \n       long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n           nodeLocalityDelayMs :\n           rackLocalityDelayMs;\n \n       if (waitTime \u003e thresholdTime) {\n         if (allowed.equals(NodeType.NODE_LOCAL)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(\"Waiting time: \" + waitTime\n                 + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                 + \", change allowedLocality from NODE_LOCAL to RACK_LOCAL\"\n                 + \", priority: \" + schedulerKey.getPriority()\n                 + \", app attempt id: \" + this.attemptId);\n           }\n           allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n           resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n         } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(\"Waiting time: \" + waitTime\n                 + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                 + \", change allowedLocality from RACK_LOCAL to OFF_SWITCH\"\n                 + \", priority: \" + schedulerKey.getPriority()\n                 + \", app attempt id: \" + this.attemptId);\n           }\n           allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n           resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n         }\n       }\n       return allowedLocalityLevel.get(schedulerKey);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    writeLock.lock();\n    try {\n\n      // default level is NODE_LOCAL\n      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n        // add the initial time of priority to prevent comparing with FsApp\n        // startTime and allowedLocalityLevel degrade\n        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n                  .getPriority() + \", time: \" + currentTimeMs);\n        }\n        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n        return NodeType.NODE_LOCAL;\n      }\n\n      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n      // if level is already most liberal, we\u0027re done\n      if (allowed.equals(NodeType.OFF_SWITCH)) {\n        return NodeType.OFF_SWITCH;\n      }\n\n      // check waiting time\n      long waitTime \u003d currentTimeMs;\n      if (lastScheduledContainer.containsKey(schedulerKey)) {\n        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n      } else{\n        waitTime -\u003d getStartTime();\n      }\n\n      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n          nodeLocalityDelayMs :\n          rackLocalityDelayMs;\n\n      if (waitTime \u003e thresholdTime) {\n        if (allowed.equals(NodeType.NODE_LOCAL)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Waiting time: \" + waitTime\n                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                + \", change allowedLocality from NODE_LOCAL to RACK_LOCAL\"\n                + \", priority: \" + schedulerKey.getPriority()\n                + \", app attempt id: \" + this.attemptId);\n          }\n          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Waiting time: \" + waitTime\n                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                + \", change allowedLocality from RACK_LOCAL to OFF_SWITCH\"\n                + \", priority: \" + schedulerKey.getPriority()\n                + \", app attempt id: \" + this.attemptId);\n          }\n          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        }\n      }\n      return allowedLocalityLevel.get(schedulerKey);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2528bea67ff80fae597f10e26c5f70d601af9fb1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4396. Log the trace information on FSAppAttempt#assignContainer (Contributed by Yiqun Li via Daniel Templeton)\n",
      "commitDate": "31/10/16 1:34 PM",
      "commitName": "2528bea67ff80fae597f10e26c5f70d601af9fb1",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "27/10/16 2:42 PM",
      "commitNameOld": "b98fc8249f0576e7b4e230ffc3cec5a20eefc543",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 3.95,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,72 @@\n   NodeType getAllowedLocalityLevelByTime(\n       SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n       long rackLocalityDelayMs, long currentTimeMs) {\n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     try {\n       writeLock.lock();\n \n       // default level is NODE_LOCAL\n       if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n         // add the initial time of priority to prevent comparing with FsApp\n         // startTime and allowedLocalityLevel degrade\n         lastScheduledContainer.put(schedulerKey, currentTimeMs);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n                   .getPriority() + \", time: \" + currentTimeMs);\n         }\n         allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n         return NodeType.NODE_LOCAL;\n       }\n \n       NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n       // if level is already most liberal, we\u0027re done\n       if (allowed.equals(NodeType.OFF_SWITCH)) {\n         return NodeType.OFF_SWITCH;\n       }\n \n       // check waiting time\n       long waitTime \u003d currentTimeMs;\n       if (lastScheduledContainer.containsKey(schedulerKey)) {\n         waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n       } else{\n         waitTime -\u003d getStartTime();\n       }\n \n       long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n           nodeLocalityDelayMs :\n           rackLocalityDelayMs;\n \n       if (waitTime \u003e thresholdTime) {\n         if (allowed.equals(NodeType.NODE_LOCAL)) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Waiting time: \" + waitTime\n+                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n+                + \", change allowedLocality from NODE_LOCAL to RACK_LOCAL\"\n+                + \", priority: \" + schedulerKey.getPriority()\n+                + \", app attempt id: \" + this.attemptId);\n+          }\n           allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n           resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n         } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Waiting time: \" + waitTime\n+                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n+                + \", change allowedLocality from RACK_LOCAL to OFF_SWITCH\"\n+                + \", priority: \" + schedulerKey.getPriority()\n+                + \", app attempt id: \" + this.attemptId);\n+          }\n           allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n           resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n         }\n       }\n       return allowedLocalityLevel.get(schedulerKey);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    try {\n      writeLock.lock();\n\n      // default level is NODE_LOCAL\n      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n        // add the initial time of priority to prevent comparing with FsApp\n        // startTime and allowedLocalityLevel degrade\n        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n                  .getPriority() + \", time: \" + currentTimeMs);\n        }\n        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n        return NodeType.NODE_LOCAL;\n      }\n\n      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n      // if level is already most liberal, we\u0027re done\n      if (allowed.equals(NodeType.OFF_SWITCH)) {\n        return NodeType.OFF_SWITCH;\n      }\n\n      // check waiting time\n      long waitTime \u003d currentTimeMs;\n      if (lastScheduledContainer.containsKey(schedulerKey)) {\n        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n      } else{\n        waitTime -\u003d getStartTime();\n      }\n\n      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n          nodeLocalityDelayMs :\n          rackLocalityDelayMs;\n\n      if (waitTime \u003e thresholdTime) {\n        if (allowed.equals(NodeType.NODE_LOCAL)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Waiting time: \" + waitTime\n                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                + \", change allowedLocality from NODE_LOCAL to RACK_LOCAL\"\n                + \", priority: \" + schedulerKey.getPriority()\n                + \", app attempt id: \" + this.attemptId);\n          }\n          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Waiting time: \" + waitTime\n                + \" ms, nodeLocalityDelay time: \" + nodeLocalityDelayMs + \" ms\"\n                + \", change allowedLocality from RACK_LOCAL to OFF_SWITCH\"\n                + \", priority: \" + schedulerKey.getPriority()\n                + \", app attempt id: \" + this.attemptId);\n          }\n          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        }\n      }\n      return allowedLocalityLevel.get(schedulerKey);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/16 10:43 AM",
          "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 44.64,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,58 @@\n-  public synchronized NodeType getAllowedLocalityLevelByTime(\n+  NodeType getAllowedLocalityLevelByTime(\n       SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n       long rackLocalityDelayMs, long currentTimeMs) {\n-\n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n-    // default level is NODE_LOCAL\n-    if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n-      // add the initial time of priority to prevent comparing with FsApp\n-      // startTime and allowedLocalityLevel degrade\n-      lastScheduledContainer.put(schedulerKey, currentTimeMs);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Init the lastScheduledContainer time, priority: \"\n-            + schedulerKey.getPriority() + \", time: \" + currentTimeMs);\n+    try {\n+      writeLock.lock();\n+\n+      // default level is NODE_LOCAL\n+      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n+        // add the initial time of priority to prevent comparing with FsApp\n+        // startTime and allowedLocalityLevel degrade\n+        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n+                  .getPriority() + \", time: \" + currentTimeMs);\n+        }\n+        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n+        return NodeType.NODE_LOCAL;\n       }\n-      allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n-      return NodeType.NODE_LOCAL;\n-    }\n \n-    NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n+      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n-    // if level is already most liberal, we\u0027re done\n-    if (allowed.equals(NodeType.OFF_SWITCH)) {\n-      return NodeType.OFF_SWITCH;\n-    }\n-\n-    // check waiting time\n-    long waitTime \u003d currentTimeMs;\n-    if (lastScheduledContainer.containsKey(schedulerKey)) {\n-      waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n-    } else {\n-      waitTime -\u003d getStartTime();\n-    }\n-\n-    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n-            nodeLocalityDelayMs : rackLocalityDelayMs;\n-\n-    if (waitTime \u003e thresholdTime) {\n-      if (allowed.equals(NodeType.NODE_LOCAL)) {\n-        allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n-        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n-      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n-        allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n-        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n+      // if level is already most liberal, we\u0027re done\n+      if (allowed.equals(NodeType.OFF_SWITCH)) {\n+        return NodeType.OFF_SWITCH;\n       }\n+\n+      // check waiting time\n+      long waitTime \u003d currentTimeMs;\n+      if (lastScheduledContainer.containsKey(schedulerKey)) {\n+        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n+      } else{\n+        waitTime -\u003d getStartTime();\n+      }\n+\n+      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n+          nodeLocalityDelayMs :\n+          rackLocalityDelayMs;\n+\n+      if (waitTime \u003e thresholdTime) {\n+        if (allowed.equals(NodeType.NODE_LOCAL)) {\n+          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n+          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n+        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n+          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n+          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n+        }\n+      }\n+      return allowedLocalityLevel.get(schedulerKey);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return allowedLocalityLevel.get(schedulerKey);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    try {\n      writeLock.lock();\n\n      // default level is NODE_LOCAL\n      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n        // add the initial time of priority to prevent comparing with FsApp\n        // startTime and allowedLocalityLevel degrade\n        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n                  .getPriority() + \", time: \" + currentTimeMs);\n        }\n        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n        return NodeType.NODE_LOCAL;\n      }\n\n      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n      // if level is already most liberal, we\u0027re done\n      if (allowed.equals(NodeType.OFF_SWITCH)) {\n        return NodeType.OFF_SWITCH;\n      }\n\n      // check waiting time\n      long waitTime \u003d currentTimeMs;\n      if (lastScheduledContainer.containsKey(schedulerKey)) {\n        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n      } else{\n        waitTime -\u003d getStartTime();\n      }\n\n      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n          nodeLocalityDelayMs :\n          rackLocalityDelayMs;\n\n      if (waitTime \u003e thresholdTime) {\n        if (allowed.equals(NodeType.NODE_LOCAL)) {\n          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        }\n      }\n      return allowedLocalityLevel.get(schedulerKey);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/16 10:43 AM",
          "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 44.64,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,58 @@\n-  public synchronized NodeType getAllowedLocalityLevelByTime(\n+  NodeType getAllowedLocalityLevelByTime(\n       SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n       long rackLocalityDelayMs, long currentTimeMs) {\n-\n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n-    // default level is NODE_LOCAL\n-    if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n-      // add the initial time of priority to prevent comparing with FsApp\n-      // startTime and allowedLocalityLevel degrade\n-      lastScheduledContainer.put(schedulerKey, currentTimeMs);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Init the lastScheduledContainer time, priority: \"\n-            + schedulerKey.getPriority() + \", time: \" + currentTimeMs);\n+    try {\n+      writeLock.lock();\n+\n+      // default level is NODE_LOCAL\n+      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n+        // add the initial time of priority to prevent comparing with FsApp\n+        // startTime and allowedLocalityLevel degrade\n+        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n+                  .getPriority() + \", time: \" + currentTimeMs);\n+        }\n+        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n+        return NodeType.NODE_LOCAL;\n       }\n-      allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n-      return NodeType.NODE_LOCAL;\n-    }\n \n-    NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n+      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n-    // if level is already most liberal, we\u0027re done\n-    if (allowed.equals(NodeType.OFF_SWITCH)) {\n-      return NodeType.OFF_SWITCH;\n-    }\n-\n-    // check waiting time\n-    long waitTime \u003d currentTimeMs;\n-    if (lastScheduledContainer.containsKey(schedulerKey)) {\n-      waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n-    } else {\n-      waitTime -\u003d getStartTime();\n-    }\n-\n-    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n-            nodeLocalityDelayMs : rackLocalityDelayMs;\n-\n-    if (waitTime \u003e thresholdTime) {\n-      if (allowed.equals(NodeType.NODE_LOCAL)) {\n-        allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n-        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n-      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n-        allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n-        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n+      // if level is already most liberal, we\u0027re done\n+      if (allowed.equals(NodeType.OFF_SWITCH)) {\n+        return NodeType.OFF_SWITCH;\n       }\n+\n+      // check waiting time\n+      long waitTime \u003d currentTimeMs;\n+      if (lastScheduledContainer.containsKey(schedulerKey)) {\n+        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n+      } else{\n+        waitTime -\u003d getStartTime();\n+      }\n+\n+      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n+          nodeLocalityDelayMs :\n+          rackLocalityDelayMs;\n+\n+      if (waitTime \u003e thresholdTime) {\n+        if (allowed.equals(NodeType.NODE_LOCAL)) {\n+          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n+          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n+        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n+          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n+          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n+        }\n+      }\n+      return allowedLocalityLevel.get(schedulerKey);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return allowedLocalityLevel.get(schedulerKey);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    try {\n      writeLock.lock();\n\n      // default level is NODE_LOCAL\n      if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n        // add the initial time of priority to prevent comparing with FsApp\n        // startTime and allowedLocalityLevel degrade\n        lastScheduledContainer.put(schedulerKey, currentTimeMs);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Init the lastScheduledContainer time, priority: \" + schedulerKey\n                  .getPriority() + \", time: \" + currentTimeMs);\n        }\n        allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n        return NodeType.NODE_LOCAL;\n      }\n\n      NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n      // if level is already most liberal, we\u0027re done\n      if (allowed.equals(NodeType.OFF_SWITCH)) {\n        return NodeType.OFF_SWITCH;\n      }\n\n      // check waiting time\n      long waitTime \u003d currentTimeMs;\n      if (lastScheduledContainer.containsKey(schedulerKey)) {\n        waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n      } else{\n        waitTime -\u003d getStartTime();\n      }\n\n      long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n          nodeLocalityDelayMs :\n          rackLocalityDelayMs;\n\n      if (waitTime \u003e thresholdTime) {\n        if (allowed.equals(NodeType.NODE_LOCAL)) {\n          allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n          allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n          resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n        }\n      }\n      return allowedLocalityLevel.get(schedulerKey);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,\n-          long nodeLocalityDelayMs, long rackLocalityDelayMs,\n-          long currentTimeMs) {\n+  public synchronized NodeType getAllowedLocalityLevelByTime(\n+      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n+      long rackLocalityDelayMs, long currentTimeMs) {\n \n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     // default level is NODE_LOCAL\n-    if (!allowedLocalityLevel.containsKey(priority)) {\n+    if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n       // add the initial time of priority to prevent comparing with FsApp\n       // startTime and allowedLocalityLevel degrade\n-      lastScheduledContainer.put(priority, currentTimeMs);\n+      lastScheduledContainer.put(schedulerKey, currentTimeMs);\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Init the lastScheduledContainer time, priority: \" + priority\n-            + \", time: \" + currentTimeMs);\n+        LOG.debug(\"Init the lastScheduledContainer time, priority: \"\n+            + schedulerKey.getPriority() + \", time: \" + currentTimeMs);\n       }\n-      allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);\n+      allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n       return NodeType.NODE_LOCAL;\n     }\n \n-    NodeType allowed \u003d allowedLocalityLevel.get(priority);\n+    NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n     // if level is already most liberal, we\u0027re done\n     if (allowed.equals(NodeType.OFF_SWITCH)) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     // check waiting time\n     long waitTime \u003d currentTimeMs;\n-    if (lastScheduledContainer.containsKey(priority)) {\n-      waitTime -\u003d lastScheduledContainer.get(priority);\n+    if (lastScheduledContainer.containsKey(schedulerKey)) {\n+      waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n     } else {\n       waitTime -\u003d getStartTime();\n     }\n \n     long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n             nodeLocalityDelayMs : rackLocalityDelayMs;\n \n     if (waitTime \u003e thresholdTime) {\n       if (allowed.equals(NodeType.NODE_LOCAL)) {\n-        allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);\n-        resetSchedulingOpportunities(priority, currentTimeMs);\n+        allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n+        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n       } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n-        allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);\n-        resetSchedulingOpportunities(priority, currentTimeMs);\n+        allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n+        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n       }\n     }\n-    return allowedLocalityLevel.get(priority);\n+    return allowedLocalityLevel.get(schedulerKey);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // default level is NODE_LOCAL\n    if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n      // add the initial time of priority to prevent comparing with FsApp\n      // startTime and allowedLocalityLevel degrade\n      lastScheduledContainer.put(schedulerKey, currentTimeMs);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Init the lastScheduledContainer time, priority: \"\n            + schedulerKey.getPriority() + \", time: \" + currentTimeMs);\n      }\n      allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n      return NodeType.NODE_LOCAL;\n    }\n\n    NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n    // if level is already most liberal, we\u0027re done\n    if (allowed.equals(NodeType.OFF_SWITCH)) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // check waiting time\n    long waitTime \u003d currentTimeMs;\n    if (lastScheduledContainer.containsKey(schedulerKey)) {\n      waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n    } else {\n      waitTime -\u003d getStartTime();\n    }\n\n    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n            nodeLocalityDelayMs : rackLocalityDelayMs;\n\n    if (waitTime \u003e thresholdTime) {\n      if (allowed.equals(NodeType.NODE_LOCAL)) {\n        allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n        allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n      }\n    }\n    return allowedLocalityLevel.get(schedulerKey);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, nodeLocalityDelayMs-long, rackLocalityDelayMs-long, currentTimeMs-long]",
            "newValue": "[schedulerKey-SchedulerRequestKey, nodeLocalityDelayMs-long, rackLocalityDelayMs-long, currentTimeMs-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,\n-          long nodeLocalityDelayMs, long rackLocalityDelayMs,\n-          long currentTimeMs) {\n+  public synchronized NodeType getAllowedLocalityLevelByTime(\n+      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n+      long rackLocalityDelayMs, long currentTimeMs) {\n \n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     // default level is NODE_LOCAL\n-    if (!allowedLocalityLevel.containsKey(priority)) {\n+    if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n       // add the initial time of priority to prevent comparing with FsApp\n       // startTime and allowedLocalityLevel degrade\n-      lastScheduledContainer.put(priority, currentTimeMs);\n+      lastScheduledContainer.put(schedulerKey, currentTimeMs);\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Init the lastScheduledContainer time, priority: \" + priority\n-            + \", time: \" + currentTimeMs);\n+        LOG.debug(\"Init the lastScheduledContainer time, priority: \"\n+            + schedulerKey.getPriority() + \", time: \" + currentTimeMs);\n       }\n-      allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);\n+      allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n       return NodeType.NODE_LOCAL;\n     }\n \n-    NodeType allowed \u003d allowedLocalityLevel.get(priority);\n+    NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n \n     // if level is already most liberal, we\u0027re done\n     if (allowed.equals(NodeType.OFF_SWITCH)) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     // check waiting time\n     long waitTime \u003d currentTimeMs;\n-    if (lastScheduledContainer.containsKey(priority)) {\n-      waitTime -\u003d lastScheduledContainer.get(priority);\n+    if (lastScheduledContainer.containsKey(schedulerKey)) {\n+      waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n     } else {\n       waitTime -\u003d getStartTime();\n     }\n \n     long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n             nodeLocalityDelayMs : rackLocalityDelayMs;\n \n     if (waitTime \u003e thresholdTime) {\n       if (allowed.equals(NodeType.NODE_LOCAL)) {\n-        allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);\n-        resetSchedulingOpportunities(priority, currentTimeMs);\n+        allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n+        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n       } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n-        allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);\n-        resetSchedulingOpportunities(priority, currentTimeMs);\n+        allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n+        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n       }\n     }\n-    return allowedLocalityLevel.get(priority);\n+    return allowedLocalityLevel.get(schedulerKey);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized NodeType getAllowedLocalityLevelByTime(\n      SchedulerRequestKey schedulerKey, long nodeLocalityDelayMs,\n      long rackLocalityDelayMs, long currentTimeMs) {\n\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // default level is NODE_LOCAL\n    if (!allowedLocalityLevel.containsKey(schedulerKey)) {\n      // add the initial time of priority to prevent comparing with FsApp\n      // startTime and allowedLocalityLevel degrade\n      lastScheduledContainer.put(schedulerKey, currentTimeMs);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Init the lastScheduledContainer time, priority: \"\n            + schedulerKey.getPriority() + \", time: \" + currentTimeMs);\n      }\n      allowedLocalityLevel.put(schedulerKey, NodeType.NODE_LOCAL);\n      return NodeType.NODE_LOCAL;\n    }\n\n    NodeType allowed \u003d allowedLocalityLevel.get(schedulerKey);\n\n    // if level is already most liberal, we\u0027re done\n    if (allowed.equals(NodeType.OFF_SWITCH)) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // check waiting time\n    long waitTime \u003d currentTimeMs;\n    if (lastScheduledContainer.containsKey(schedulerKey)) {\n      waitTime -\u003d lastScheduledContainer.get(schedulerKey);\n    } else {\n      waitTime -\u003d getStartTime();\n    }\n\n    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n            nodeLocalityDelayMs : rackLocalityDelayMs;\n\n    if (waitTime \u003e thresholdTime) {\n      if (allowed.equals(NodeType.NODE_LOCAL)) {\n        allowedLocalityLevel.put(schedulerKey, NodeType.RACK_LOCAL);\n        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n        allowedLocalityLevel.put(schedulerKey, NodeType.OFF_SWITCH);\n        resetSchedulingOpportunities(schedulerKey, currentTimeMs);\n      }\n    }\n    return allowedLocalityLevel.get(schedulerKey);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "2aaed1032719e978660d1f14a8ed299e83b5f65e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4440. FSAppAttempt#getAllowedLocalityLevelByTime should init the lastScheduler time. Contributed by Lin Yiqun\n",
      "commitDate": "15/12/15 12:17 AM",
      "commitName": "2aaed1032719e978660d1f14a8ed299e83b5f65e",
      "commitAuthor": "Zhihai Xu",
      "commitDateOld": "29/10/15 1:42 PM",
      "commitNameOld": "58d1df585c2b8a4d2f78ae30726f07b4c6a94731",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 46.48,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,51 @@\n   public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,\n           long nodeLocalityDelayMs, long rackLocalityDelayMs,\n           long currentTimeMs) {\n \n     // if not being used, can schedule anywhere\n     if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     // default level is NODE_LOCAL\n     if (! allowedLocalityLevel.containsKey(priority)) {\n+      // add the initial time of priority to prevent comparing with FsApp\n+      // startTime and allowedLocalityLevel degrade\n+      lastScheduledContainer.put(priority, currentTimeMs);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Init the lastScheduledContainer time, priority: \" + priority\n+            + \", time: \" + currentTimeMs);\n+      }\n       allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);\n       return NodeType.NODE_LOCAL;\n     }\n \n     NodeType allowed \u003d allowedLocalityLevel.get(priority);\n \n     // if level is already most liberal, we\u0027re done\n     if (allowed.equals(NodeType.OFF_SWITCH)) {\n       return NodeType.OFF_SWITCH;\n     }\n \n     // check waiting time\n     long waitTime \u003d currentTimeMs;\n     if (lastScheduledContainer.containsKey(priority)) {\n       waitTime -\u003d lastScheduledContainer.get(priority);\n     } else {\n       waitTime -\u003d getStartTime();\n     }\n \n     long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n             nodeLocalityDelayMs : rackLocalityDelayMs;\n \n     if (waitTime \u003e thresholdTime) {\n       if (allowed.equals(NodeType.NODE_LOCAL)) {\n         allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);\n         resetSchedulingOpportunities(priority, currentTimeMs);\n       } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n         allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);\n         resetSchedulingOpportunities(priority, currentTimeMs);\n       }\n     }\n     return allowedLocalityLevel.get(priority);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,\n          long nodeLocalityDelayMs, long rackLocalityDelayMs,\n          long currentTimeMs) {\n\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // default level is NODE_LOCAL\n    if (! allowedLocalityLevel.containsKey(priority)) {\n      // add the initial time of priority to prevent comparing with FsApp\n      // startTime and allowedLocalityLevel degrade\n      lastScheduledContainer.put(priority, currentTimeMs);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Init the lastScheduledContainer time, priority: \" + priority\n            + \", time: \" + currentTimeMs);\n      }\n      allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);\n      return NodeType.NODE_LOCAL;\n    }\n\n    NodeType allowed \u003d allowedLocalityLevel.get(priority);\n\n    // if level is already most liberal, we\u0027re done\n    if (allowed.equals(NodeType.OFF_SWITCH)) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // check waiting time\n    long waitTime \u003d currentTimeMs;\n    if (lastScheduledContainer.containsKey(priority)) {\n      waitTime -\u003d lastScheduledContainer.get(priority);\n    } else {\n      waitTime -\u003d getStartTime();\n    }\n\n    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n            nodeLocalityDelayMs : rackLocalityDelayMs;\n\n    if (waitTime \u003e thresholdTime) {\n      if (allowed.equals(NodeType.NODE_LOCAL)) {\n        allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);\n        resetSchedulingOpportunities(priority, currentTimeMs);\n      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n        allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);\n        resetSchedulingOpportunities(priority, currentTimeMs);\n      }\n    }\n    return allowedLocalityLevel.get(priority);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,44 @@\n+  public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,\n+          long nodeLocalityDelayMs, long rackLocalityDelayMs,\n+          long currentTimeMs) {\n+\n+    // if not being used, can schedule anywhere\n+    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n+      return NodeType.OFF_SWITCH;\n+    }\n+\n+    // default level is NODE_LOCAL\n+    if (! allowedLocalityLevel.containsKey(priority)) {\n+      allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);\n+      return NodeType.NODE_LOCAL;\n+    }\n+\n+    NodeType allowed \u003d allowedLocalityLevel.get(priority);\n+\n+    // if level is already most liberal, we\u0027re done\n+    if (allowed.equals(NodeType.OFF_SWITCH)) {\n+      return NodeType.OFF_SWITCH;\n+    }\n+\n+    // check waiting time\n+    long waitTime \u003d currentTimeMs;\n+    if (lastScheduledContainer.containsKey(priority)) {\n+      waitTime -\u003d lastScheduledContainer.get(priority);\n+    } else {\n+      waitTime -\u003d getStartTime();\n+    }\n+\n+    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n+            nodeLocalityDelayMs : rackLocalityDelayMs;\n+\n+    if (waitTime \u003e thresholdTime) {\n+      if (allowed.equals(NodeType.NODE_LOCAL)) {\n+        allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);\n+        resetSchedulingOpportunities(priority, currentTimeMs);\n+      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n+        allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);\n+        resetSchedulingOpportunities(priority, currentTimeMs);\n+      }\n+    }\n+    return allowedLocalityLevel.get(priority);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized NodeType getAllowedLocalityLevelByTime(Priority priority,\n          long nodeLocalityDelayMs, long rackLocalityDelayMs,\n          long currentTimeMs) {\n\n    // if not being used, can schedule anywhere\n    if (nodeLocalityDelayMs \u003c 0 || rackLocalityDelayMs \u003c 0) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // default level is NODE_LOCAL\n    if (! allowedLocalityLevel.containsKey(priority)) {\n      allowedLocalityLevel.put(priority, NodeType.NODE_LOCAL);\n      return NodeType.NODE_LOCAL;\n    }\n\n    NodeType allowed \u003d allowedLocalityLevel.get(priority);\n\n    // if level is already most liberal, we\u0027re done\n    if (allowed.equals(NodeType.OFF_SWITCH)) {\n      return NodeType.OFF_SWITCH;\n    }\n\n    // check waiting time\n    long waitTime \u003d currentTimeMs;\n    if (lastScheduledContainer.containsKey(priority)) {\n      waitTime -\u003d lastScheduledContainer.get(priority);\n    } else {\n      waitTime -\u003d getStartTime();\n    }\n\n    long thresholdTime \u003d allowed.equals(NodeType.NODE_LOCAL) ?\n            nodeLocalityDelayMs : rackLocalityDelayMs;\n\n    if (waitTime \u003e thresholdTime) {\n      if (allowed.equals(NodeType.NODE_LOCAL)) {\n        allowedLocalityLevel.put(priority, NodeType.RACK_LOCAL);\n        resetSchedulingOpportunities(priority, currentTimeMs);\n      } else if (allowed.equals(NodeType.RACK_LOCAL)) {\n        allowedLocalityLevel.put(priority, NodeType.OFF_SWITCH);\n        resetSchedulingOpportunities(priority, currentTimeMs);\n      }\n    }\n    return allowedLocalityLevel.get(priority);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}